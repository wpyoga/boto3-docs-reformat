

***
ECR
***

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: ECR.Client

  A low-level client representing Amazon EC2 Container Registry (ECR)
   

  Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry service. Customers can use the familiar Docker CLI, or their preferred client, to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports private repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images.

  ::

    
    import boto3
    
    client = boto3.client('ecr')

  
  These are the available methods:
  
  *   :py:meth:`~ECR.Client.batch_check_layer_availability`

  
  *   :py:meth:`~ECR.Client.batch_delete_image`

  
  *   :py:meth:`~ECR.Client.batch_get_image`

  
  *   :py:meth:`~ECR.Client.can_paginate`

  
  *   :py:meth:`~ECR.Client.complete_layer_upload`

  
  *   :py:meth:`~ECR.Client.create_repository`

  
  *   :py:meth:`~ECR.Client.delete_lifecycle_policy`

  
  *   :py:meth:`~ECR.Client.delete_registry_policy`

  
  *   :py:meth:`~ECR.Client.delete_repository`

  
  *   :py:meth:`~ECR.Client.delete_repository_policy`

  
  *   :py:meth:`~ECR.Client.describe_image_scan_findings`

  
  *   :py:meth:`~ECR.Client.describe_images`

  
  *   :py:meth:`~ECR.Client.describe_registry`

  
  *   :py:meth:`~ECR.Client.describe_repositories`

  
  *   :py:meth:`~ECR.Client.generate_presigned_url`

  
  *   :py:meth:`~ECR.Client.get_authorization_token`

  
  *   :py:meth:`~ECR.Client.get_download_url_for_layer`

  
  *   :py:meth:`~ECR.Client.get_lifecycle_policy`

  
  *   :py:meth:`~ECR.Client.get_lifecycle_policy_preview`

  
  *   :py:meth:`~ECR.Client.get_paginator`

  
  *   :py:meth:`~ECR.Client.get_registry_policy`

  
  *   :py:meth:`~ECR.Client.get_repository_policy`

  
  *   :py:meth:`~ECR.Client.get_waiter`

  
  *   :py:meth:`~ECR.Client.initiate_layer_upload`

  
  *   :py:meth:`~ECR.Client.list_images`

  
  *   :py:meth:`~ECR.Client.list_tags_for_resource`

  
  *   :py:meth:`~ECR.Client.put_image`

  
  *   :py:meth:`~ECR.Client.put_image_scanning_configuration`

  
  *   :py:meth:`~ECR.Client.put_image_tag_mutability`

  
  *   :py:meth:`~ECR.Client.put_lifecycle_policy`

  
  *   :py:meth:`~ECR.Client.put_registry_policy`

  
  *   :py:meth:`~ECR.Client.put_replication_configuration`

  
  *   :py:meth:`~ECR.Client.set_repository_policy`

  
  *   :py:meth:`~ECR.Client.start_image_scan`

  
  *   :py:meth:`~ECR.Client.start_lifecycle_policy_preview`

  
  *   :py:meth:`~ECR.Client.tag_resource`

  
  *   :py:meth:`~ECR.Client.untag_resource`

  
  *   :py:meth:`~ECR.Client.upload_layer_part`

  

  .. py:method:: batch_check_layer_availability(**kwargs)

    

    Checks the availability of one or more image layers in a repository.

     

    When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.

     

    .. note::

       

      This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the ``docker`` CLI to pull, tag, and push images.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchCheckLayerAvailability>`_    


    **Request Syntax** 
    ::

      response = client.batch_check_layer_availability(
          registryId='string',
          repositoryName='string',
          layerDigests=[
              'string',
          ]
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository that is associated with the image layers to check.

      

    
    :type layerDigests: list
    :param layerDigests: **[REQUIRED]** 

      The digests of the image layers to check.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'layers': [
                {
                    'layerDigest': 'string',
                    'layerAvailability': 'AVAILABLE'|'UNAVAILABLE',
                    'layerSize': 123,
                    'mediaType': 'string'
                },
            ],
            'failures': [
                {
                    'layerDigest': 'string',
                    'failureCode': 'InvalidLayerDigest'|'MissingLayerDigest',
                    'failureReason': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **layers** *(list) --* 

          A list of image layer objects corresponding to the image layer references in the request.

          
          

          - *(dict) --* 

            An object representing an Amazon ECR image layer.

            
            

            - **layerDigest** *(string) --* 

              The ``sha256`` digest of the image layer.

              
            

            - **layerAvailability** *(string) --* 

              The availability status of the image layer.

              
            

            - **layerSize** *(integer) --* 

              The size, in bytes, of the image layer.

              
            

            - **mediaType** *(string) --* 

              The media type of the layer, such as ``application/vnd.docker.image.rootfs.diff.tar.gzip`` or ``application/vnd.oci.image.layer.v1.tar+gzip`` .

              
        
      
        

        - **failures** *(list) --* 

          Any failures associated with the call.

          
          

          - *(dict) --* 

            An object representing an Amazon ECR image layer failure.

            
            

            - **layerDigest** *(string) --* 

              The layer digest associated with the failure.

              
            

            - **failureCode** *(string) --* 

              The failure code associated with the failure.

              
            

            - **failureReason** *(string) --* 

              The reason for the failure.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    

  .. py:method:: batch_delete_image(**kwargs)

    

    Deletes a list of specified images within a repository. Images are specified with either an ``imageTag`` or ``imageDigest`` .

     

    You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.

     

    You can completely delete an image (and all of its tags) by specifying the image's digest in your request.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchDeleteImage>`_    


    **Request Syntax** 
    ::

      response = client.batch_delete_image(
          registryId='string',
          repositoryName='string',
          imageIds=[
              {
                  'imageDigest': 'string',
                  'imageTag': 'string'
              },
          ]
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository that contains the image to delete.

      

    
    :type imageIds: list
    :param imageIds: **[REQUIRED]** 

      A list of image ID references that correspond to images to delete. The format of the ``imageIds`` reference is ``imageTag=tag`` or ``imageDigest=digest`` .

      

    
      - *(dict) --* 

        An object with identifying information for an Amazon ECR image.

        

      
        - **imageDigest** *(string) --* 

          The ``sha256`` digest of the image manifest.

          

        
        - **imageTag** *(string) --* 

          The tag used for the image.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'imageIds': [
                {
                    'imageDigest': 'string',
                    'imageTag': 'string'
                },
            ],
            'failures': [
                {
                    'imageId': {
                        'imageDigest': 'string',
                        'imageTag': 'string'
                    },
                    'failureCode': 'InvalidImageDigest'|'InvalidImageTag'|'ImageTagDoesNotMatchDigest'|'ImageNotFound'|'MissingDigestAndTag'|'ImageReferencedByManifestList'|'KmsError',
                    'failureReason': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **imageIds** *(list) --* 

          The image IDs of the deleted images.

          
          

          - *(dict) --* 

            An object with identifying information for an Amazon ECR image.

            
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imageTag** *(string) --* 

              The tag used for the image.

              
        
      
        

        - **failures** *(list) --* 

          Any failures associated with the call.

          
          

          - *(dict) --* 

            An object representing an Amazon ECR image failure.

            
            

            - **imageId** *(dict) --* 

              The image ID associated with the failure.

              
              

              - **imageDigest** *(string) --* 

                The ``sha256`` digest of the image manifest.

                
              

              - **imageTag** *(string) --* 

                The tag used for the image.

                
          
            

            - **failureCode** *(string) --* 

              The code associated with the failure.

              
            

            - **failureReason** *(string) --* 

              The reason for the failure.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

    **Examples** 

    This example deletes images with the tags precise and trusty in a repository called ubuntu in the default registry for an account.
    ::

      response = client.batch_delete_image(
          imageIds=[
              {
                  'imageTag': 'precise',
              },
          ],
          repositoryName='ubuntu',
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'failures': [
          ],
          'imageIds': [
              {
                  'imageDigest': 'sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f',
                  'imageTag': 'precise',
              },
          ],
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: batch_get_image(**kwargs)

    

    Gets detailed information for an image. Images are specified with either an ``imageTag`` or ``imageDigest`` .

     

    When an image is pulled, the BatchGetImage API is called once to retrieve the image manifest.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchGetImage>`_    


    **Request Syntax** 
    ::

      response = client.batch_get_image(
          registryId='string',
          repositoryName='string',
          imageIds=[
              {
                  'imageDigest': 'string',
                  'imageTag': 'string'
              },
          ],
          acceptedMediaTypes=[
              'string',
          ]
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository that contains the images to describe.

      

    
    :type imageIds: list
    :param imageIds: **[REQUIRED]** 

      A list of image ID references that correspond to images to describe. The format of the ``imageIds`` reference is ``imageTag=tag`` or ``imageDigest=digest`` .

      

    
      - *(dict) --* 

        An object with identifying information for an Amazon ECR image.

        

      
        - **imageDigest** *(string) --* 

          The ``sha256`` digest of the image manifest.

          

        
        - **imageTag** *(string) --* 

          The tag used for the image.

          

        
      
  
    :type acceptedMediaTypes: list
    :param acceptedMediaTypes: 

      The accepted media types for the request.

       

      Valid values: ``application/vnd.docker.distribution.manifest.v1+json`` | ``application/vnd.docker.distribution.manifest.v2+json`` | ``application/vnd.oci.image.manifest.v1+json``  

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'images': [
                {
                    'registryId': 'string',
                    'repositoryName': 'string',
                    'imageId': {
                        'imageDigest': 'string',
                        'imageTag': 'string'
                    },
                    'imageManifest': 'string',
                    'imageManifestMediaType': 'string'
                },
            ],
            'failures': [
                {
                    'imageId': {
                        'imageDigest': 'string',
                        'imageTag': 'string'
                    },
                    'failureCode': 'InvalidImageDigest'|'InvalidImageTag'|'ImageTagDoesNotMatchDigest'|'ImageNotFound'|'MissingDigestAndTag'|'ImageReferencedByManifestList'|'KmsError',
                    'failureReason': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **images** *(list) --* 

          A list of image objects corresponding to the image references in the request.

          
          

          - *(dict) --* 

            An object representing an Amazon ECR image.

            
            

            - **registryId** *(string) --* 

              The AWS account ID associated with the registry containing the image.

              
            

            - **repositoryName** *(string) --* 

              The name of the repository associated with the image.

              
            

            - **imageId** *(dict) --* 

              An object containing the image tag and image digest associated with an image.

              
              

              - **imageDigest** *(string) --* 

                The ``sha256`` digest of the image manifest.

                
              

              - **imageTag** *(string) --* 

                The tag used for the image.

                
          
            

            - **imageManifest** *(string) --* 

              The image manifest associated with the image.

              
            

            - **imageManifestMediaType** *(string) --* 

              The manifest media type of the image.

              
        
      
        

        - **failures** *(list) --* 

          Any failures associated with the call.

          
          

          - *(dict) --* 

            An object representing an Amazon ECR image failure.

            
            

            - **imageId** *(dict) --* 

              The image ID associated with the failure.

              
              

              - **imageDigest** *(string) --* 

                The ``sha256`` digest of the image manifest.

                
              

              - **imageTag** *(string) --* 

                The tag used for the image.

                
          
            

            - **failureCode** *(string) --* 

              The code associated with the failure.

              
            

            - **failureReason** *(string) --* 

              The reason for the failure.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

    **Examples** 

    This example obtains information for an image with a specified image digest ID from the repository named ubuntu in the current account.
    ::

      response = client.batch_get_image(
          imageIds=[
              {
                  'imageTag': 'precise',
              },
          ],
          repositoryName='ubuntu',
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'failures': [
          ],
          'images': [
              {
                  'imageId': {
                      'imageDigest': 'sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a',
                      'imageTag': 'precise',
                  },
                  'imageManifest': '{\n "schemaVersion": 1,\n "name": "ubuntu",\n "tag": "precise",\n...',
                  'registryId': '244698725403',
                  'repositoryName': 'ubuntu',
              },
          ],
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: complete_layer_upload(**kwargs)

    

    Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a ``sha256`` digest of the image layer for data validation purposes.

     

    When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.

     

    .. note::

       

      This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the ``docker`` CLI to pull, tag, and push images.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/CompleteLayerUpload>`_    


    **Request Syntax** 
    ::

      response = client.complete_layer_upload(
          registryId='string',
          repositoryName='string',
          uploadId='string',
          layerDigests=[
              'string',
          ]
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry to which to upload layers. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository to associate with the image layer.

      

    
    :type uploadId: string
    :param uploadId: **[REQUIRED]** 

      The upload ID from a previous  InitiateLayerUpload operation to associate with the image layer.

      

    
    :type layerDigests: list
    :param layerDigests: **[REQUIRED]** 

      The ``sha256`` digest of the image layer.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'uploadId': 'string',
            'layerDigest': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **uploadId** *(string) --* 

          The upload ID associated with the layer.

          
        

        - **layerDigest** *(string) --* 

          The ``sha256`` digest of the image layer.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.UploadNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidLayerException`

    
    *     :py:class:`ECR.Client.exceptions.LayerPartTooSmallException`

    
    *     :py:class:`ECR.Client.exceptions.LayerAlreadyExistsException`

    
    *     :py:class:`ECR.Client.exceptions.EmptyUploadException`

    
    *     :py:class:`ECR.Client.exceptions.KmsException`

    

  .. py:method:: create_repository(**kwargs)

    

    Creates a repository. For more information, see `Amazon ECR Repositories <https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html>`__ in the *Amazon Elastic Container Registry User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/CreateRepository>`_    


    **Request Syntax** 
    ::

      response = client.create_repository(
          repositoryName='string',
          tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          imageTagMutability='MUTABLE'|'IMMUTABLE',
          imageScanningConfiguration={
              'scanOnPush': True|False
          },
          encryptionConfiguration={
              'encryptionType': 'AES256'|'KMS',
              'kmsKey': 'string'
          }
      )
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app`` ) or it can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app`` ).

      

    
    :type tags: list
    :param tags: 

      The metadata that you apply to the repository to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **Key** *(string) --* 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **Value** *(string) --* 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    :type imageTagMutability: string
    :param imageTagMutability: 

      The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.

      

    
    :type imageScanningConfiguration: dict
    :param imageScanningConfiguration: 

      The image scanning configuration for the repository. This determines whether images are scanned for known vulnerabilities after being pushed to the repository.

      

    
      - **scanOnPush** *(boolean) --* 

        The setting that determines whether images are scanned after being pushed to a repository. If set to ``true`` , images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started with the  StartImageScan API.

        

      
    
    :type encryptionConfiguration: dict
    :param encryptionConfiguration: 

      The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.

      

    
      - **encryptionType** *(string) --* **[REQUIRED]** 

        The encryption type to use.

         

        If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using server-side encryption with customer master keys (CMKs) stored in AWS KMS. When you use AWS KMS to encrypt your data, you can either use the default AWS managed CMK for Amazon ECR, or specify your own CMK, which you already created. For more information, see `Protecting Data Using Server-Side Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

         

        If you use the ``AES256`` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see `Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

        

      
      - **kmsKey** *(string) --* 

        If you use the ``KMS`` encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'repository': {
                'repositoryArn': 'string',
                'registryId': 'string',
                'repositoryName': 'string',
                'repositoryUri': 'string',
                'createdAt': datetime(2015, 1, 1),
                'imageTagMutability': 'MUTABLE'|'IMMUTABLE',
                'imageScanningConfiguration': {
                    'scanOnPush': True|False
                },
                'encryptionConfiguration': {
                    'encryptionType': 'AES256'|'KMS',
                    'kmsKey': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **repository** *(dict) --* 

          The repository that was created.

          
          

          - **repositoryArn** *(string) --* 

            The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the ``arn:aws:ecr`` namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, ``arn:aws:ecr:region:012345678910:repository/test`` .

            
          

          - **registryId** *(string) --* 

            The AWS account ID associated with the registry that contains the repository.

            
          

          - **repositoryName** *(string) --* 

            The name of the repository.

            
          

          - **repositoryUri** *(string) --* 

            The URI for the repository. You can use this URI for container image ``push`` and ``pull`` operations.

            
          

          - **createdAt** *(datetime) --* 

            The date and time, in JavaScript date format, when the repository was created.

            
          

          - **imageTagMutability** *(string) --* 

            The tag mutability setting for the repository.

            
          

          - **imageScanningConfiguration** *(dict) --* 

            The image scanning configuration for a repository.

            
            

            - **scanOnPush** *(boolean) --* 

              The setting that determines whether images are scanned after being pushed to a repository. If set to ``true`` , images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started with the  StartImageScan API.

              
        
          

          - **encryptionConfiguration** *(dict) --* 

            The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.

            
            

            - **encryptionType** *(string) --* 

              The encryption type to use.

               

              If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using server-side encryption with customer master keys (CMKs) stored in AWS KMS. When you use AWS KMS to encrypt your data, you can either use the default AWS managed CMK for Amazon ECR, or specify your own CMK, which you already created. For more information, see `Protecting Data Using Server-Side Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

               

              If you use the ``AES256`` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see `Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

              
            

            - **kmsKey** *(string) --* 

              If you use the ``KMS`` encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidTagParameterException`

    
    *     :py:class:`ECR.Client.exceptions.TooManyTagsException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryAlreadyExistsException`

    
    *     :py:class:`ECR.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ECR.Client.exceptions.KmsException`

    

    **Examples** 

    This example creates a repository called nginx-web-app inside the project-a namespace in the default registry for an account.
    ::

      response = client.create_repository(
          repositoryName='project-a/nginx-web-app',
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'repository': {
              'registryId': '012345678901',
              'repositoryArn': 'arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app',
              'repositoryName': 'project-a/nginx-web-app',
          },
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: delete_lifecycle_policy(**kwargs)

    

    Deletes the lifecycle policy associated with the specified repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteLifecyclePolicy>`_    


    **Request Syntax** 
    ::

      response = client.delete_lifecycle_policy(
          registryId='string',
          repositoryName='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'lifecyclePolicyText': 'string',
            'lastEvaluatedAt': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **lifecyclePolicyText** *(string) --* 

          The JSON lifecycle policy text.

          
        

        - **lastEvaluatedAt** *(datetime) --* 

          The time stamp of the last time that the lifecycle policy was run.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LifecyclePolicyNotFoundException`

    

  .. py:method:: delete_registry_policy()

    

    Deletes the registry permissions policy.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteRegistryPolicy>`_    


    **Request Syntax** 
    ::

      response = client.delete_registry_policy()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'policyText': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **policyText** *(string) --* 

          The contents of the registry permissions policy that was deleted.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RegistryPolicyNotFoundException`

    

  .. py:method:: delete_repository(**kwargs)

    

    Deletes a repository. If the repository contains images, you must either delete all images in the repository or use the ``force`` option to delete the repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteRepository>`_    


    **Request Syntax** 
    ::

      response = client.delete_repository(
          registryId='string',
          repositoryName='string',
          force=True|False
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository to delete.

      

    
    :type force: boolean
    :param force: 

      If a repository contains images, forces the deletion.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'repository': {
                'repositoryArn': 'string',
                'registryId': 'string',
                'repositoryName': 'string',
                'repositoryUri': 'string',
                'createdAt': datetime(2015, 1, 1),
                'imageTagMutability': 'MUTABLE'|'IMMUTABLE',
                'imageScanningConfiguration': {
                    'scanOnPush': True|False
                },
                'encryptionConfiguration': {
                    'encryptionType': 'AES256'|'KMS',
                    'kmsKey': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **repository** *(dict) --* 

          The repository that was deleted.

          
          

          - **repositoryArn** *(string) --* 

            The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the ``arn:aws:ecr`` namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, ``arn:aws:ecr:region:012345678910:repository/test`` .

            
          

          - **registryId** *(string) --* 

            The AWS account ID associated with the registry that contains the repository.

            
          

          - **repositoryName** *(string) --* 

            The name of the repository.

            
          

          - **repositoryUri** *(string) --* 

            The URI for the repository. You can use this URI for container image ``push`` and ``pull`` operations.

            
          

          - **createdAt** *(datetime) --* 

            The date and time, in JavaScript date format, when the repository was created.

            
          

          - **imageTagMutability** *(string) --* 

            The tag mutability setting for the repository.

            
          

          - **imageScanningConfiguration** *(dict) --* 

            The image scanning configuration for a repository.

            
            

            - **scanOnPush** *(boolean) --* 

              The setting that determines whether images are scanned after being pushed to a repository. If set to ``true`` , images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started with the  StartImageScan API.

              
        
          

          - **encryptionConfiguration** *(dict) --* 

            The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.

            
            

            - **encryptionType** *(string) --* 

              The encryption type to use.

               

              If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using server-side encryption with customer master keys (CMKs) stored in AWS KMS. When you use AWS KMS to encrypt your data, you can either use the default AWS managed CMK for Amazon ECR, or specify your own CMK, which you already created. For more information, see `Protecting Data Using Server-Side Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

               

              If you use the ``AES256`` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see `Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

              
            

            - **kmsKey** *(string) --* 

              If you use the ``KMS`` encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotEmptyException`

    
    *     :py:class:`ECR.Client.exceptions.KmsException`

    

    **Examples** 

    This example force deletes a repository named ubuntu in the default registry for an account. The force parameter is required if the repository contains images.
    ::

      response = client.delete_repository(
          force=True,
          repositoryName='ubuntu',
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'repository': {
              'registryId': '012345678901',
              'repositoryArn': 'arn:aws:ecr:us-west-2:012345678901:repository/ubuntu',
              'repositoryName': 'ubuntu',
          },
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: delete_repository_policy(**kwargs)

    

    Deletes the repository policy associated with the specified repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteRepositoryPolicy>`_    


    **Request Syntax** 
    ::

      response = client.delete_repository_policy(
          registryId='string',
          repositoryName='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository that is associated with the repository policy to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'policyText': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **policyText** *(string) --* 

          The JSON repository policy that was deleted from the repository.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryPolicyNotFoundException`

    

    **Examples** 

    This example deletes the policy associated with the repository named ubuntu in the current account.
    ::

      response = client.delete_repository_policy(
          repositoryName='ubuntu',
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'policyText': '{ ... }',
          'registryId': '012345678901',
          'repositoryName': 'ubuntu',
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: describe_image_scan_findings(**kwargs)

    

    Returns the scan findings for the specified image.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeImageScanFindings>`_    


    **Request Syntax** 
    ::

      response = client.describe_image_scan_findings(
          registryId='string',
          repositoryName='string',
          imageId={
              'imageDigest': 'string',
              'imageTag': 'string'
          },
          nextToken='string',
          maxResults=123
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to describe the image scan findings for. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository for the image for which to describe the scan findings.

      

    
    :type imageId: dict
    :param imageId: **[REQUIRED]** 

      An object with identifying information for an Amazon ECR image.

      

    
      - **imageDigest** *(string) --* 

        The ``sha256`` digest of the image manifest.

        

      
      - **imageTag** *(string) --* 

        The tag used for the image.

        

      
    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``DescribeImageScanFindings`` request where ``maxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value. This value is null when there are no more results to return.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of image scan results returned by ``DescribeImageScanFindings`` in paginated output. When this parameter is used, ``DescribeImageScanFindings`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``DescribeImageScanFindings`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``DescribeImageScanFindings`` returns up to 100 results and a ``nextToken`` value, if applicable.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'imageId': {
                'imageDigest': 'string',
                'imageTag': 'string'
            },
            'imageScanStatus': {
                'status': 'IN_PROGRESS'|'COMPLETE'|'FAILED',
                'description': 'string'
            },
            'imageScanFindings': {
                'imageScanCompletedAt': datetime(2015, 1, 1),
                'vulnerabilitySourceUpdatedAt': datetime(2015, 1, 1),
                'findings': [
                    {
                        'name': 'string',
                        'description': 'string',
                        'uri': 'string',
                        'severity': 'INFORMATIONAL'|'LOW'|'MEDIUM'|'HIGH'|'CRITICAL'|'UNDEFINED',
                        'attributes': [
                            {
                                'key': 'string',
                                'value': 'string'
                            },
                        ]
                    },
                ],
                'findingSeverityCounts': {
                    'string': 123
                }
            },
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **imageId** *(dict) --* 

          An object with identifying information for an Amazon ECR image.

          
          

          - **imageDigest** *(string) --* 

            The ``sha256`` digest of the image manifest.

            
          

          - **imageTag** *(string) --* 

            The tag used for the image.

            
      
        

        - **imageScanStatus** *(dict) --* 

          The current state of the scan.

          
          

          - **status** *(string) --* 

            The current state of an image scan.

            
          

          - **description** *(string) --* 

            The description of the image scan status.

            
      
        

        - **imageScanFindings** *(dict) --* 

          The information contained in the image scan findings.

          
          

          - **imageScanCompletedAt** *(datetime) --* 

            The time of the last completed image scan.

            
          

          - **vulnerabilitySourceUpdatedAt** *(datetime) --* 

            The time when the vulnerability data was last scanned.

            
          

          - **findings** *(list) --* 

            The findings from the image scan.

            
            

            - *(dict) --* 

              Contains information about an image scan finding.

              
              

              - **name** *(string) --* 

                The name associated with the finding, usually a CVE number.

                
              

              - **description** *(string) --* 

                The description of the finding.

                
              

              - **uri** *(string) --* 

                A link containing additional details about the security vulnerability.

                
              

              - **severity** *(string) --* 

                The finding severity.

                
              

              - **attributes** *(list) --* 

                A collection of attributes of the host from which the finding is generated.

                
                

                - *(dict) --* 

                  This data type is used in the  ImageScanFinding data type.

                  
                  

                  - **key** *(string) --* 

                    The attribute key.

                    
                  

                  - **value** *(string) --* 

                    The value assigned to the attribute key.

                    
              
            
          
        
          

          - **findingSeverityCounts** *(dict) --* 

            The image vulnerability counts, sorted by severity.

            
            

            - *(string) --* 
              

              - *(integer) --* 
        
      
      
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``DescribeImageScanFindings`` request. When the results of a ``DescribeImageScanFindings`` request exceed ``maxResults`` , this value can be used to retrieve the next page of results. This value is null when there are no more results to return.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ImageNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ScanNotFoundException`

    

  .. py:method:: describe_images(**kwargs)

    

    Returns metadata about the images in a repository.

     

    .. note::

       

      Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the ``docker images`` command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by  DescribeImages .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeImages>`_    


    **Request Syntax** 
    ::

      response = client.describe_images(
          registryId='string',
          repositoryName='string',
          imageIds=[
              {
                  'imageDigest': 'string',
                  'imageTag': 'string'
              },
          ],
          nextToken='string',
          maxResults=123,
          filter={
              'tagStatus': 'TAGGED'|'UNTAGGED'|'ANY'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to describe images. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository that contains the images to describe.

      

    
    :type imageIds: list
    :param imageIds: 

      The list of image IDs for the requested repository.

      

    
      - *(dict) --* 

        An object with identifying information for an Amazon ECR image.

        

      
        - **imageDigest** *(string) --* 

          The ``sha256`` digest of the image manifest.

          

        
        - **imageTag** *(string) --* 

          The tag used for the image.

          

        
      
  
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``DescribeImages`` request where ``maxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value. This value is ``null`` when there are no more results to return. This option cannot be used when you specify images with ``imageIds`` .

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of repository results returned by ``DescribeImages`` in paginated output. When this parameter is used, ``DescribeImages`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``DescribeImages`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``DescribeImages`` returns up to 100 results and a ``nextToken`` value, if applicable. This option cannot be used when you specify images with ``imageIds`` .

      

    
    :type filter: dict
    :param filter: 

      The filter key and value with which to filter your ``DescribeImages`` results.

      

    
      - **tagStatus** *(string) --* 

        The tag status with which to filter your  DescribeImages results. You can filter results based on whether they are ``TAGGED`` or ``UNTAGGED`` .

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'imageDetails': [
                {
                    'registryId': 'string',
                    'repositoryName': 'string',
                    'imageDigest': 'string',
                    'imageTags': [
                        'string',
                    ],
                    'imageSizeInBytes': 123,
                    'imagePushedAt': datetime(2015, 1, 1),
                    'imageScanStatus': {
                        'status': 'IN_PROGRESS'|'COMPLETE'|'FAILED',
                        'description': 'string'
                    },
                    'imageScanFindingsSummary': {
                        'imageScanCompletedAt': datetime(2015, 1, 1),
                        'vulnerabilitySourceUpdatedAt': datetime(2015, 1, 1),
                        'findingSeverityCounts': {
                            'string': 123
                        }
                    },
                    'imageManifestMediaType': 'string',
                    'artifactMediaType': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **imageDetails** *(list) --* 

          A list of  ImageDetail objects that contain data about the image.

          
          

          - *(dict) --* 

            An object that describes an image returned by a  DescribeImages operation.

            
            

            - **registryId** *(string) --* 

              The AWS account ID associated with the registry to which this image belongs.

              
            

            - **repositoryName** *(string) --* 

              The name of the repository to which this image belongs.

              
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imageTags** *(list) --* 

              The list of tags associated with this image.

              
              

              - *(string) --* 
          
            

            - **imageSizeInBytes** *(integer) --* 

              The size, in bytes, of the image in the repository.

               

              If the image is a manifest list, this will be the max size of all manifests in the list.

               

              .. note::

                 

                Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the ``docker images`` command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by  DescribeImages .

                 

              
            

            - **imagePushedAt** *(datetime) --* 

              The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. 

              
            

            - **imageScanStatus** *(dict) --* 

              The current state of the scan.

              
              

              - **status** *(string) --* 

                The current state of an image scan.

                
              

              - **description** *(string) --* 

                The description of the image scan status.

                
          
            

            - **imageScanFindingsSummary** *(dict) --* 

              A summary of the last completed image scan.

              
              

              - **imageScanCompletedAt** *(datetime) --* 

                The time of the last completed image scan.

                
              

              - **vulnerabilitySourceUpdatedAt** *(datetime) --* 

                The time when the vulnerability data was last scanned.

                
              

              - **findingSeverityCounts** *(dict) --* 

                The image vulnerability counts, sorted by severity.

                
                

                - *(string) --* 
                  

                  - *(integer) --* 
            
          
          
            

            - **imageManifestMediaType** *(string) --* 

              The media type of the image manifest.

              
            

            - **artifactMediaType** *(string) --* 

              The artifact media type of the image.

              
        
      
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``DescribeImages`` request. When the results of a ``DescribeImages`` request exceed ``maxResults`` , this value can be used to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ImageNotFoundException`

    

  .. py:method:: describe_registry()

    

    Describes the settings for a registry. The replication configuration for a repository can be created or updated with the  PutReplicationConfiguration API action.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeRegistry>`_    


    **Request Syntax** 
    ::

      response = client.describe_registry()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'replicationConfiguration': {
                'rules': [
                    {
                        'destinations': [
                            {
                                'region': 'string',
                                'registryId': 'string'
                            },
                        ]
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The ID of the registry.

          
        

        - **replicationConfiguration** *(dict) --* 

          The replication configuration for the registry.

          
          

          - **rules** *(list) --* 

            An array of objects representing the replication rules for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.

            
            

            - *(dict) --* 

              An array of objects representing the replication destinations for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.

              
              

              - **destinations** *(list) --* 

                An array of objects representing the details of a replication destination.

                
                

                - *(dict) --* 

                  An array of objects representing the details of a replication destination.

                  
                  

                  - **region** *(string) --* 

                    A Region to replicate to.

                    
                  

                  - **registryId** *(string) --* 

                    The account ID of the destination registry to replicate to.

                    
              
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.ValidationException`

    

  .. py:method:: describe_repositories(**kwargs)

    

    Describes image repositories in a registry.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeRepositories>`_    


    **Request Syntax** 
    ::

      response = client.describe_repositories(
          registryId='string',
          repositoryNames=[
              'string',
          ],
          nextToken='string',
          maxResults=123
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryNames: list
    :param repositoryNames: 

      A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.

      

    
      - *(string) --* 

      
  
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``DescribeRepositories`` request where ``maxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value. This value is ``null`` when there are no more results to return. This option cannot be used when you specify repositories with ``repositoryNames`` .

       

      .. note::

         

        This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.

         

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of repository results returned by ``DescribeRepositories`` in paginated output. When this parameter is used, ``DescribeRepositories`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``DescribeRepositories`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``DescribeRepositories`` returns up to 100 results and a ``nextToken`` value, if applicable. This option cannot be used when you specify repositories with ``repositoryNames`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'repositories': [
                {
                    'repositoryArn': 'string',
                    'registryId': 'string',
                    'repositoryName': 'string',
                    'repositoryUri': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'imageTagMutability': 'MUTABLE'|'IMMUTABLE',
                    'imageScanningConfiguration': {
                        'scanOnPush': True|False
                    },
                    'encryptionConfiguration': {
                        'encryptionType': 'AES256'|'KMS',
                        'kmsKey': 'string'
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **repositories** *(list) --* 

          A list of repository objects corresponding to valid repositories.

          
          

          - *(dict) --* 

            An object representing a repository.

            
            

            - **repositoryArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the ``arn:aws:ecr`` namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, ``arn:aws:ecr:region:012345678910:repository/test`` .

              
            

            - **registryId** *(string) --* 

              The AWS account ID associated with the registry that contains the repository.

              
            

            - **repositoryName** *(string) --* 

              The name of the repository.

              
            

            - **repositoryUri** *(string) --* 

              The URI for the repository. You can use this URI for container image ``push`` and ``pull`` operations.

              
            

            - **createdAt** *(datetime) --* 

              The date and time, in JavaScript date format, when the repository was created.

              
            

            - **imageTagMutability** *(string) --* 

              The tag mutability setting for the repository.

              
            

            - **imageScanningConfiguration** *(dict) --* 

              The image scanning configuration for a repository.

              
              

              - **scanOnPush** *(boolean) --* 

                The setting that determines whether images are scanned after being pushed to a repository. If set to ``true`` , images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started with the  StartImageScan API.

                
          
            

            - **encryptionConfiguration** *(dict) --* 

              The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.

              
              

              - **encryptionType** *(string) --* 

                The encryption type to use.

                 

                If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using server-side encryption with customer master keys (CMKs) stored in AWS KMS. When you use AWS KMS to encrypt your data, you can either use the default AWS managed CMK for Amazon ECR, or specify your own CMK, which you already created. For more information, see `Protecting Data Using Server-Side Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

                 

                If you use the ``AES256`` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see `Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

                
              

              - **kmsKey** *(string) --* 

                If you use the ``KMS`` encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.

                
          
        
      
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``DescribeRepositories`` request. When the results of a ``DescribeRepositories`` request exceed ``maxResults`` , this value can be used to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

    **Examples** 

    The following example obtains a list and description of all repositories in the default registry to which the current user has access.
    ::

      response = client.describe_repositories(
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'repositories': [
              {
                  'registryId': '012345678910',
                  'repositoryArn': 'arn:aws:ecr:us-west-2:012345678910:repository/ubuntu',
                  'repositoryName': 'ubuntu',
              },
              {
                  'registryId': '012345678910',
                  'repositoryArn': 'arn:aws:ecr:us-west-2:012345678910:repository/test',
                  'repositoryName': 'test',
              },
          ],
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_authorization_token(**kwargs)

    

    Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours.

     

    The ``authorizationToken`` returned is a base64 encoded string that can be decoded and used in a ``docker login`` command to authenticate to a registry. The AWS CLI offers an ``get-login-password`` command that simplifies the login process. For more information, see `Registry Authentication <https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth>`__ in the *Amazon Elastic Container Registry User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetAuthorizationToken>`_    


    **Request Syntax** 
    ::

      response = client.get_authorization_token(
          registryIds=[
              'string',
          ]
      )
    :type registryIds: list
    :param registryIds: 

      A list of AWS account IDs that are associated with the registries for which to get AuthorizationData objects. If you do not specify a registry, the default registry is assumed.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'authorizationData': [
                {
                    'authorizationToken': 'string',
                    'expiresAt': datetime(2015, 1, 1),
                    'proxyEndpoint': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **authorizationData** *(list) --* 

          A list of authorization token data objects that correspond to the ``registryIds`` values in the request.

          
          

          - *(dict) --* 

            An object representing authorization data for an Amazon ECR registry.

            
            

            - **authorizationToken** *(string) --* 

              A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format ``user:password`` for private registry authentication using ``docker login`` .

              
            

            - **expiresAt** *(datetime) --* 

              The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.

              
            

            - **proxyEndpoint** *(string) --* 

              The registry URL to use for this authorization token in a ``docker login`` command. The Amazon ECR registry URL format is ``https://aws_account_id.dkr.ecr.region.amazonaws.com`` . For example, ``https://012345678910.dkr.ecr.us-east-1.amazonaws.com`` .. 

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    

  .. py:method:: get_download_url_for_layer(**kwargs)

    

    Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.

     

    When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer that is not already cached.

     

    .. note::

       

      This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the ``docker`` CLI to pull, tag, and push images.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetDownloadUrlForLayer>`_    


    **Request Syntax** 
    ::

      response = client.get_download_url_for_layer(
          registryId='string',
          repositoryName='string',
          layerDigest='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository that is associated with the image layer to download.

      

    
    :type layerDigest: string
    :param layerDigest: **[REQUIRED]** 

      The digest of the image layer to download.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'downloadUrl': 'string',
            'layerDigest': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **downloadUrl** *(string) --* 

          The pre-signed Amazon S3 download URL for the requested layer.

          
        

        - **layerDigest** *(string) --* 

          The digest of the image layer to download.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.LayersNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LayerInaccessibleException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

  .. py:method:: get_lifecycle_policy(**kwargs)

    

    Retrieves the lifecycle policy for the specified repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_lifecycle_policy(
          registryId='string',
          repositoryName='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'lifecyclePolicyText': 'string',
            'lastEvaluatedAt': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **lifecyclePolicyText** *(string) --* 

          The JSON lifecycle policy text.

          
        

        - **lastEvaluatedAt** *(datetime) --* 

          The time stamp of the last time that the lifecycle policy was run.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LifecyclePolicyNotFoundException`

    

  .. py:method:: get_lifecycle_policy_preview(**kwargs)

    

    Retrieves the results of the lifecycle policy preview request for the specified repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicyPreview>`_    


    **Request Syntax** 
    ::

      response = client.get_lifecycle_policy_preview(
          registryId='string',
          repositoryName='string',
          imageIds=[
              {
                  'imageDigest': 'string',
                  'imageTag': 'string'
              },
          ],
          nextToken='string',
          maxResults=123,
          filter={
              'tagStatus': 'TAGGED'|'UNTAGGED'|'ANY'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository.

      

    
    :type imageIds: list
    :param imageIds: 

      The list of imageIDs to be included.

      

    
      - *(dict) --* 

        An object with identifying information for an Amazon ECR image.

        

      
        - **imageDigest** *(string) --* 

          The ``sha256`` digest of the image manifest.

          

        
        - **imageTag** *(string) --* 

          The tag used for the image.

          

        
      
  
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``GetLifecyclePolicyPreviewRequest`` request where ``maxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value. This value is ``null`` when there are no more results to return. This option cannot be used when you specify images with ``imageIds`` .

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of repository results returned by ``GetLifecyclePolicyPreviewRequest`` in paginated output. When this parameter is used, ``GetLifecyclePolicyPreviewRequest`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``GetLifecyclePolicyPreviewRequest`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``GetLifecyclePolicyPreviewRequest`` returns up to 100 results and a ``nextToken`` value, if applicable. This option cannot be used when you specify images with ``imageIds`` .

      

    
    :type filter: dict
    :param filter: 

      An optional parameter that filters results based on image tag status and all tags, if tagged.

      

    
      - **tagStatus** *(string) --* 

        The tag status of the image.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'lifecyclePolicyText': 'string',
            'status': 'IN_PROGRESS'|'COMPLETE'|'EXPIRED'|'FAILED',
            'nextToken': 'string',
            'previewResults': [
                {
                    'imageTags': [
                        'string',
                    ],
                    'imageDigest': 'string',
                    'imagePushedAt': datetime(2015, 1, 1),
                    'action': {
                        'type': 'EXPIRE'
                    },
                    'appliedRulePriority': 123
                },
            ],
            'summary': {
                'expiringImageTotalCount': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **lifecyclePolicyText** *(string) --* 

          The JSON lifecycle policy text.

          
        

        - **status** *(string) --* 

          The status of the lifecycle policy preview request.

          
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``GetLifecyclePolicyPreview`` request. When the results of a ``GetLifecyclePolicyPreview`` request exceed ``maxResults`` , this value can be used to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
        

        - **previewResults** *(list) --* 

          The results of the lifecycle policy preview request.

          
          

          - *(dict) --* 

            The result of the lifecycle policy preview.

            
            

            - **imageTags** *(list) --* 

              The list of tags associated with this image.

              
              

              - *(string) --* 
          
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imagePushedAt** *(datetime) --* 

              The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.

              
            

            - **action** *(dict) --* 

              The type of action to be taken.

              
              

              - **type** *(string) --* 

                The type of action to be taken.

                
          
            

            - **appliedRulePriority** *(integer) --* 

              The priority of the applied rule.

              
        
      
        

        - **summary** *(dict) --* 

          The list of images that is returned as a result of the action.

          
          

          - **expiringImageTotalCount** *(integer) --* 

            The number of expiring images.

            
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LifecyclePolicyPreviewNotFoundException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_registry_policy()

    

    Retrieves the permissions policy for a registry.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetRegistryPolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_registry_policy()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'policyText': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The ID of the registry.

          
        

        - **policyText** *(string) --* 

          The JSON text of the permissions policy for a registry.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RegistryPolicyNotFoundException`

    

  .. py:method:: get_repository_policy(**kwargs)

    

    Retrieves the repository policy for the specified repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetRepositoryPolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_repository_policy(
          registryId='string',
          repositoryName='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository with the policy to retrieve.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'policyText': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **policyText** *(string) --* 

          The JSON repository policy text associated with the repository.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryPolicyNotFoundException`

    

    **Examples** 

    This example obtains the repository policy for the repository named ubuntu.
    ::

      response = client.get_repository_policy(
          repositoryName='ubuntu',
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'policyText': '{\n  "Version" : "2008-10-17",\n  "Statement" : [ {\n    "Sid" : "new statement",\n    "Effect" : "Allow",\n    "Principal" : {\n     "AWS" : "arn:aws:iam::012345678901:role/CodeDeployDemo"\n    },\n"Action" : [ "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage", "ecr:BatchCheckLayerAvailability" ]\n } ]\n}',
          'registryId': '012345678901',
          'repositoryName': 'ubuntu',
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: initiate_layer_upload(**kwargs)

    

    Notifies Amazon ECR that you intend to upload an image layer.

     

    When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.

     

    .. note::

       

      This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the ``docker`` CLI to pull, tag, and push images.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/InitiateLayerUpload>`_    


    **Request Syntax** 
    ::

      response = client.initiate_layer_upload(
          registryId='string',
          repositoryName='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry to which you intend to upload layers. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository to which you intend to upload layers.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'uploadId': 'string',
            'partSize': 123
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **uploadId** *(string) --* 

          The upload ID for the layer upload. This parameter is passed to further  UploadLayerPart and  CompleteLayerUpload operations.

          
        

        - **partSize** *(integer) --* 

          The size, in bytes, that Amazon ECR expects future layer part uploads to be.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.KmsException`

    

  .. py:method:: list_images(**kwargs)

    

    Lists all the image IDs for the specified repository.

     

    You can filter images based on whether or not they are tagged by using the ``tagStatus`` filter and specifying either ``TAGGED`` , ``UNTAGGED`` or ``ANY`` . For example, you can filter your results to return only ``UNTAGGED`` images and then pipe that result to a  BatchDeleteImage operation to delete them. Or, you can filter your results to return only ``TAGGED`` images to list all of the tags in your repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListImages>`_    


    **Request Syntax** 
    ::

      response = client.list_images(
          registryId='string',
          repositoryName='string',
          nextToken='string',
          maxResults=123,
          filter={
              'tagStatus': 'TAGGED'|'UNTAGGED'|'ANY'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to list images. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository with image IDs to be listed.

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListImages`` request where ``maxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value. This value is ``null`` when there are no more results to return.

       

      .. note::

         

        This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.

         

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of image results returned by ``ListImages`` in paginated output. When this parameter is used, ``ListImages`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListImages`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``ListImages`` returns up to 100 results and a ``nextToken`` value, if applicable.

      

    
    :type filter: dict
    :param filter: 

      The filter key and value with which to filter your ``ListImages`` results.

      

    
      - **tagStatus** *(string) --* 

        The tag status with which to filter your  ListImages results. You can filter results based on whether they are ``TAGGED`` or ``UNTAGGED`` .

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'imageIds': [
                {
                    'imageDigest': 'string',
                    'imageTag': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **imageIds** *(list) --* 

          The list of image IDs for the requested repository.

          
          

          - *(dict) --* 

            An object with identifying information for an Amazon ECR image.

            
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imageTag** *(string) --* 

              The tag used for the image.

              
        
      
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListImages`` request. When the results of a ``ListImages`` request exceed ``maxResults`` , this value can be used to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

    **Examples** 

    This example lists all of the images in the repository named ubuntu in the default registry in the current account. 
    ::

      response = client.list_images(
          repositoryName='ubuntu',
      )
      
      print(response)

    
    Expected Output:
    ::

      {
          'imageIds': [
              {
                  'imageDigest': 'sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a',
                  'imageTag': 'precise',
              },
          ],
          'ResponseMetadata': {
              '...': '...',
          },
      }

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    List the tags for an Amazon ECR resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the only supported resource is an Amazon ECR repository.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(list) --* 

          The tags for the resource.

          
          

          - *(dict) --* 

            The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

            
            

            - **Key** *(string) --* 

              One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

              
            

            - **Value** *(string) --* 

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    

  .. py:method:: put_image(**kwargs)

    

    Creates or updates the image manifest and tags associated with an image.

     

    When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.

     

    .. note::

       

      This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the ``docker`` CLI to pull, tag, and push images.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutImage>`_    


    **Request Syntax** 
    ::

      response = client.put_image(
          registryId='string',
          repositoryName='string',
          imageManifest='string',
          imageManifestMediaType='string',
          imageTag='string',
          imageDigest='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository in which to put the image.

      

    
    :type imageManifest: string
    :param imageManifest: **[REQUIRED]** 

      The image manifest corresponding to the image to be uploaded.

      

    
    :type imageManifestMediaType: string
    :param imageManifestMediaType: 

      The media type of the image manifest. If you push an image manifest that does not contain the ``mediaType`` field, you must specify the ``imageManifestMediaType`` in the request.

      

    
    :type imageTag: string
    :param imageTag: 

      The tag to associate with the image. This parameter is required for images that use the Docker Image Manifest V2 Schema 2 or Open Container Initiative (OCI) formats.

      

    
    :type imageDigest: string
    :param imageDigest: 

      The image digest of the image manifest corresponding to the image.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'image': {
                'registryId': 'string',
                'repositoryName': 'string',
                'imageId': {
                    'imageDigest': 'string',
                    'imageTag': 'string'
                },
                'imageManifest': 'string',
                'imageManifestMediaType': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **image** *(dict) --* 

          Details of the image uploaded.

          
          

          - **registryId** *(string) --* 

            The AWS account ID associated with the registry containing the image.

            
          

          - **repositoryName** *(string) --* 

            The name of the repository associated with the image.

            
          

          - **imageId** *(dict) --* 

            An object containing the image tag and image digest associated with an image.

            
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imageTag** *(string) --* 

              The tag used for the image.

              
        
          

          - **imageManifest** *(string) --* 

            The image manifest associated with the image.

            
          

          - **imageManifestMediaType** *(string) --* 

            The manifest media type of the image.

            
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ImageAlreadyExistsException`

    
    *     :py:class:`ECR.Client.exceptions.LayersNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ReferencedImagesNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ECR.Client.exceptions.ImageTagAlreadyExistsException`

    
    *     :py:class:`ECR.Client.exceptions.ImageDigestDoesNotMatchException`

    
    *     :py:class:`ECR.Client.exceptions.KmsException`

    

  .. py:method:: put_image_scanning_configuration(**kwargs)

    

    Updates the image scanning configuration for the specified repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutImageScanningConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_image_scanning_configuration(
          registryId='string',
          repositoryName='string',
          imageScanningConfiguration={
              'scanOnPush': True|False
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to update the image scanning configuration setting. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository in which to update the image scanning configuration setting.

      

    
    :type imageScanningConfiguration: dict
    :param imageScanningConfiguration: **[REQUIRED]** 

      The image scanning configuration for the repository. This setting determines whether images are scanned for known vulnerabilities after being pushed to the repository.

      

    
      - **scanOnPush** *(boolean) --* 

        The setting that determines whether images are scanned after being pushed to a repository. If set to ``true`` , images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started with the  StartImageScan API.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'imageScanningConfiguration': {
                'scanOnPush': True|False
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **imageScanningConfiguration** *(dict) --* 

          The image scanning configuration setting for the repository.

          
          

          - **scanOnPush** *(boolean) --* 

            The setting that determines whether images are scanned after being pushed to a repository. If set to ``true`` , images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started with the  StartImageScan API.

            
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

  .. py:method:: put_image_tag_mutability(**kwargs)

    

    Updates the image tag mutability settings for the specified repository. For more information, see `Image Tag Mutability <https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html>`__ in the *Amazon Elastic Container Registry User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutImageTagMutability>`_    


    **Request Syntax** 
    ::

      response = client.put_image_tag_mutability(
          registryId='string',
          repositoryName='string',
          imageTagMutability='MUTABLE'|'IMMUTABLE'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to update the image tag mutability settings. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository in which to update the image tag mutability settings.

      

    
    :type imageTagMutability: string
    :param imageTagMutability: **[REQUIRED]** 

      The tag mutability setting for the repository. If ``MUTABLE`` is specified, image tags can be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'imageTagMutability': 'MUTABLE'|'IMMUTABLE'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **imageTagMutability** *(string) --* 

          The image tag mutability setting for the repository.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

  .. py:method:: put_lifecycle_policy(**kwargs)

    

    Creates or updates the lifecycle policy for the specified repository. For more information, see `Lifecycle Policy Template <https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutLifecyclePolicy>`_    


    **Request Syntax** 
    ::

      response = client.put_lifecycle_policy(
          registryId='string',
          repositoryName='string',
          lifecyclePolicyText='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository to receive the policy.

      

    
    :type lifecyclePolicyText: string
    :param lifecyclePolicyText: **[REQUIRED]** 

      The JSON repository policy text to apply to the repository.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'lifecyclePolicyText': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **lifecyclePolicyText** *(string) --* 

          The JSON repository policy text.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

  .. py:method:: put_registry_policy(**kwargs)

    

    Creates or updates the permissions policy for your registry.

     

    A registry policy is used to specify permissions for another AWS account and is used when configuring cross-account replication. For more information, see `Registry permissions <https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html>`__ in the *Amazon Elastic Container Registry User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutRegistryPolicy>`_    


    **Request Syntax** 
    ::

      response = client.put_registry_policy(
          policyText='string'
      )
    :type policyText: string
    :param policyText: **[REQUIRED]** 

      The JSON policy text to apply to your registry. The policy text follows the same format as IAM policy text. For more information, see `Registry permissions <https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html>`__ in the *Amazon Elastic Container Registry User Guide* .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'policyText': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID.

          
        

        - **policyText** *(string) --* 

          The JSON policy text for your registry.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    

  .. py:method:: put_replication_configuration(**kwargs)

    

    Creates or updates the replication configuration for a registry. The existing replication configuration for a repository can be retrieved with the  DescribeRegistry API action. The first time the PutReplicationConfiguration API is called, a service-linked IAM role is created in your account for the replication process. For more information, see `Using Service-Linked Roles for Amazon ECR <https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html>`__ in the *Amazon Elastic Container Registry User Guide* .

     

    .. note::

       

      When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a registry permissions policy. For more information, see  PutRegistryPolicy .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutReplicationConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_replication_configuration(
          replicationConfiguration={
              'rules': [
                  {
                      'destinations': [
                          {
                              'region': 'string',
                              'registryId': 'string'
                          },
                      ]
                  },
              ]
          }
      )
    :type replicationConfiguration: dict
    :param replicationConfiguration: **[REQUIRED]** 

      An object representing the replication configuration for a registry.

      

    
      - **rules** *(list) --* **[REQUIRED]** 

        An array of objects representing the replication rules for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.

        

      
        - *(dict) --* 

          An array of objects representing the replication destinations for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.

          

        
          - **destinations** *(list) --* **[REQUIRED]** 

            An array of objects representing the details of a replication destination.

            

          
            - *(dict) --* 

              An array of objects representing the details of a replication destination.

              

            
              - **region** *(string) --* **[REQUIRED]** 

                A Region to replicate to.

                

              
              - **registryId** *(string) --* **[REQUIRED]** 

                The account ID of the destination registry to replicate to.

                

              
            
        
        
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'replicationConfiguration': {
                'rules': [
                    {
                        'destinations': [
                            {
                                'region': 'string',
                                'registryId': 'string'
                            },
                        ]
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **replicationConfiguration** *(dict) --* 

          The contents of the replication configuration for the registry.

          
          

          - **rules** *(list) --* 

            An array of objects representing the replication rules for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.

            
            

            - *(dict) --* 

              An array of objects representing the replication destinations for a replication configuration. A replication configuration may contain only one replication rule but the rule may contain one or more replication destinations.

              
              

              - **destinations** *(list) --* 

                An array of objects representing the details of a replication destination.

                
                

                - *(dict) --* 

                  An array of objects representing the details of a replication destination.

                  
                  

                  - **region** *(string) --* 

                    A Region to replicate to.

                    
                  

                  - **registryId** *(string) --* 

                    The account ID of the destination registry to replicate to.

                    
              
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.ValidationException`

    

  .. py:method:: set_repository_policy(**kwargs)

    

    Applies a repository policy to the specified repository to control access permissions. For more information, see `Amazon ECR Repository Policies <https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html>`__ in the *Amazon Elastic Container Registry User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/SetRepositoryPolicy>`_    


    **Request Syntax** 
    ::

      response = client.set_repository_policy(
          registryId='string',
          repositoryName='string',
          policyText='string',
          force=True|False
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository to receive the policy.

      

    
    :type policyText: string
    :param policyText: **[REQUIRED]** 

      The JSON repository policy text to apply to the repository. For more information, see `Amazon ECR Repository Policies <https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html>`__ in the *Amazon Elastic Container Registry User Guide* .

      

    
    :type force: boolean
    :param force: 

      If the policy you are attempting to set on a repository policy would prevent you from setting another policy in the future, you must force the  SetRepositoryPolicy operation. This is intended to prevent accidental repository lock outs.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'policyText': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **policyText** *(string) --* 

          The JSON repository policy text applied to the repository.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    

  .. py:method:: start_image_scan(**kwargs)

    

    Starts an image vulnerability scan. An image scan can only be started once per day on an individual image. This limit includes if an image was scanned on initial push. For more information, see `Image Scanning <https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html>`__ in the *Amazon Elastic Container Registry User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/StartImageScan>`_    


    **Request Syntax** 
    ::

      response = client.start_image_scan(
          registryId='string',
          repositoryName='string',
          imageId={
              'imageDigest': 'string',
              'imageTag': 'string'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to start an image scan request. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository that contains the images to scan.

      

    
    :type imageId: dict
    :param imageId: **[REQUIRED]** 

      An object with identifying information for an Amazon ECR image.

      

    
      - **imageDigest** *(string) --* 

        The ``sha256`` digest of the image manifest.

        

      
      - **imageTag** *(string) --* 

        The tag used for the image.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'imageId': {
                'imageDigest': 'string',
                'imageTag': 'string'
            },
            'imageScanStatus': {
                'status': 'IN_PROGRESS'|'COMPLETE'|'FAILED',
                'description': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **imageId** *(dict) --* 

          An object with identifying information for an Amazon ECR image.

          
          

          - **imageDigest** *(string) --* 

            The ``sha256`` digest of the image manifest.

            
          

          - **imageTag** *(string) --* 

            The tag used for the image.

            
      
        

        - **imageScanStatus** *(dict) --* 

          The current state of the scan.

          
          

          - **status** *(string) --* 

            The current state of an image scan.

            
          

          - **description** *(string) --* 

            The description of the image scan status.

            
      
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.UnsupportedImageTypeException`

    
    *     :py:class:`ECR.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ImageNotFoundException`

    

  .. py:method:: start_lifecycle_policy_preview(**kwargs)

    

    Starts a preview of a lifecycle policy for the specified repository. This allows you to see the results before associating the lifecycle policy with the repository.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/StartLifecyclePolicyPreview>`_    


    **Request Syntax** 
    ::

      response = client.start_lifecycle_policy_preview(
          registryId='string',
          repositoryName='string',
          lifecyclePolicyText='string'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository to be evaluated.

      

    
    :type lifecyclePolicyText: string
    :param lifecyclePolicyText: 

      The policy to be evaluated against. If you do not specify a policy, the current policy for the repository is used.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'lifecyclePolicyText': 'string',
            'status': 'IN_PROGRESS'|'COMPLETE'|'EXPIRED'|'FAILED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **lifecyclePolicyText** *(string) --* 

          The JSON repository policy text.

          
        

        - **status** *(string) --* 

          The status of the lifecycle policy preview request.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LifecyclePolicyNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LifecyclePolicyPreviewInProgressException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the the resource to which to add tags. Currently, the only supported resource is an Amazon ECR repository.

      

    
    :type tags: list
    :param tags: **[REQUIRED]** 

      The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **Key** *(string) --* 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **Value** *(string) --* 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidTagParameterException`

    
    *     :py:class:`ECR.Client.exceptions.TooManyTagsException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Deletes specified tags from a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource from which to remove tags. Currently, the only supported resource is an Amazon ECR repository.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      The keys of the tags to be removed.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidTagParameterException`

    
    *     :py:class:`ECR.Client.exceptions.TooManyTagsException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    

  .. py:method:: upload_layer_part(**kwargs)

    

    Uploads an image layer part to Amazon ECR.

     

    When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.

     

    .. note::

       

      This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the ``docker`` CLI to pull, tag, and push images.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/UploadLayerPart>`_    


    **Request Syntax** 
    ::

      response = client.upload_layer_part(
          registryId='string',
          repositoryName='string',
          uploadId='string',
          partFirstByte=123,
          partLastByte=123,
          layerPartBlob=b'bytes'
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry to which you are uploading layer parts. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository to which you are uploading layer parts.

      

    
    :type uploadId: string
    :param uploadId: **[REQUIRED]** 

      The upload ID from a previous  InitiateLayerUpload operation to associate with the layer part upload.

      

    
    :type partFirstByte: integer
    :param partFirstByte: **[REQUIRED]** 

      The position of the first byte of the layer part witin the overall image layer.

      

    
    :type partLastByte: integer
    :param partLastByte: **[REQUIRED]** 

      The position of the last byte of the layer part within the overall image layer.

      

    
    :type layerPartBlob: bytes
    :param layerPartBlob: **[REQUIRED]** 

      The base64-encoded layer part payload.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'uploadId': 'string',
            'lastByteReceived': 123
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **uploadId** *(string) --* 

          The upload ID associated with the request.

          
        

        - **lastByteReceived** *(integer) --* 

          The integer value of the last byte received in the request.

          
    
    **Exceptions** 
    
    *     :py:class:`ECR.Client.exceptions.ServerException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`ECR.Client.exceptions.InvalidLayerPartException`

    
    *     :py:class:`ECR.Client.exceptions.RepositoryNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.UploadNotFoundException`

    
    *     :py:class:`ECR.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ECR.Client.exceptions.KmsException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`ECR.Paginator.DescribeImageScanFindings`


* :py:class:`ECR.Paginator.DescribeImages`


* :py:class:`ECR.Paginator.DescribeRepositories`


* :py:class:`ECR.Paginator.GetLifecyclePolicyPreview`


* :py:class:`ECR.Paginator.ListImages`



.. py:class:: ECR.Paginator.DescribeImageScanFindings

  ::

    
    paginator = client.get_paginator('describe_image_scan_findings')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ECR.Client.describe_image_scan_findings`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeImageScanFindings>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          registryId='string',
          repositoryName='string',
          imageId={
              'imageDigest': 'string',
              'imageTag': 'string'
          },
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to describe the image scan findings for. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository for the image for which to describe the scan findings.

      

    
    :type imageId: dict
    :param imageId: **[REQUIRED]** 

      An object with identifying information for an Amazon ECR image.

      

    
      - **imageDigest** *(string) --* 

        The ``sha256`` digest of the image manifest.

        

      
      - **imageTag** *(string) --* 

        The tag used for the image.

        

      
    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'imageId': {
                'imageDigest': 'string',
                'imageTag': 'string'
            },
            'imageScanStatus': {
                'status': 'IN_PROGRESS'|'COMPLETE'|'FAILED',
                'description': 'string'
            },
            'imageScanFindings': {
                'imageScanCompletedAt': datetime(2015, 1, 1),
                'vulnerabilitySourceUpdatedAt': datetime(2015, 1, 1),
                'findings': [
                    {
                        'name': 'string',
                        'description': 'string',
                        'uri': 'string',
                        'severity': 'INFORMATIONAL'|'LOW'|'MEDIUM'|'HIGH'|'CRITICAL'|'UNDEFINED',
                        'attributes': [
                            {
                                'key': 'string',
                                'value': 'string'
                            },
                        ]
                    },
                ],
                'findingSeverityCounts': {
                    'string': 123
                }
            },
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **imageId** *(dict) --* 

          An object with identifying information for an Amazon ECR image.

          
          

          - **imageDigest** *(string) --* 

            The ``sha256`` digest of the image manifest.

            
          

          - **imageTag** *(string) --* 

            The tag used for the image.

            
      
        

        - **imageScanStatus** *(dict) --* 

          The current state of the scan.

          
          

          - **status** *(string) --* 

            The current state of an image scan.

            
          

          - **description** *(string) --* 

            The description of the image scan status.

            
      
        

        - **imageScanFindings** *(dict) --* 

          The information contained in the image scan findings.

          
          

          - **imageScanCompletedAt** *(datetime) --* 

            The time of the last completed image scan.

            
          

          - **vulnerabilitySourceUpdatedAt** *(datetime) --* 

            The time when the vulnerability data was last scanned.

            
          

          - **findings** *(list) --* 

            The findings from the image scan.

            
            

            - *(dict) --* 

              Contains information about an image scan finding.

              
              

              - **name** *(string) --* 

                The name associated with the finding, usually a CVE number.

                
              

              - **description** *(string) --* 

                The description of the finding.

                
              

              - **uri** *(string) --* 

                A link containing additional details about the security vulnerability.

                
              

              - **severity** *(string) --* 

                The finding severity.

                
              

              - **attributes** *(list) --* 

                A collection of attributes of the host from which the finding is generated.

                
                

                - *(dict) --* 

                  This data type is used in the  ImageScanFinding data type.

                  
                  

                  - **key** *(string) --* 

                    The attribute key.

                    
                  

                  - **value** *(string) --* 

                    The value assigned to the attribute key.

                    
              
            
          
        
          

          - **findingSeverityCounts** *(dict) --* 

            The image vulnerability counts, sorted by severity.

            
            

            - *(string) --* 
              

              - *(integer) --* 
        
      
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: ECR.Paginator.DescribeImages

  ::

    
    paginator = client.get_paginator('describe_images')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ECR.Client.describe_images`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeImages>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          registryId='string',
          repositoryName='string',
          imageIds=[
              {
                  'imageDigest': 'string',
                  'imageTag': 'string'
              },
          ],
          filter={
              'tagStatus': 'TAGGED'|'UNTAGGED'|'ANY'
          },
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to describe images. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository that contains the images to describe.

      

    
    :type imageIds: list
    :param imageIds: 

      The list of image IDs for the requested repository.

      

    
      - *(dict) --* 

        An object with identifying information for an Amazon ECR image.

        

      
        - **imageDigest** *(string) --* 

          The ``sha256`` digest of the image manifest.

          

        
        - **imageTag** *(string) --* 

          The tag used for the image.

          

        
      
  
    :type filter: dict
    :param filter: 

      The filter key and value with which to filter your ``DescribeImages`` results.

      

    
      - **tagStatus** *(string) --* 

        The tag status with which to filter your  DescribeImages results. You can filter results based on whether they are ``TAGGED`` or ``UNTAGGED`` .

        

      
    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'imageDetails': [
                {
                    'registryId': 'string',
                    'repositoryName': 'string',
                    'imageDigest': 'string',
                    'imageTags': [
                        'string',
                    ],
                    'imageSizeInBytes': 123,
                    'imagePushedAt': datetime(2015, 1, 1),
                    'imageScanStatus': {
                        'status': 'IN_PROGRESS'|'COMPLETE'|'FAILED',
                        'description': 'string'
                    },
                    'imageScanFindingsSummary': {
                        'imageScanCompletedAt': datetime(2015, 1, 1),
                        'vulnerabilitySourceUpdatedAt': datetime(2015, 1, 1),
                        'findingSeverityCounts': {
                            'string': 123
                        }
                    },
                    'imageManifestMediaType': 'string',
                    'artifactMediaType': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **imageDetails** *(list) --* 

          A list of  ImageDetail objects that contain data about the image.

          
          

          - *(dict) --* 

            An object that describes an image returned by a  DescribeImages operation.

            
            

            - **registryId** *(string) --* 

              The AWS account ID associated with the registry to which this image belongs.

              
            

            - **repositoryName** *(string) --* 

              The name of the repository to which this image belongs.

              
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imageTags** *(list) --* 

              The list of tags associated with this image.

              
              

              - *(string) --* 
          
            

            - **imageSizeInBytes** *(integer) --* 

              The size, in bytes, of the image in the repository.

               

              If the image is a manifest list, this will be the max size of all manifests in the list.

               

              .. note::

                 

                Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the ``docker images`` command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by  DescribeImages .

                 

              
            

            - **imagePushedAt** *(datetime) --* 

              The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. 

              
            

            - **imageScanStatus** *(dict) --* 

              The current state of the scan.

              
              

              - **status** *(string) --* 

                The current state of an image scan.

                
              

              - **description** *(string) --* 

                The description of the image scan status.

                
          
            

            - **imageScanFindingsSummary** *(dict) --* 

              A summary of the last completed image scan.

              
              

              - **imageScanCompletedAt** *(datetime) --* 

                The time of the last completed image scan.

                
              

              - **vulnerabilitySourceUpdatedAt** *(datetime) --* 

                The time when the vulnerability data was last scanned.

                
              

              - **findingSeverityCounts** *(dict) --* 

                The image vulnerability counts, sorted by severity.

                
                

                - *(string) --* 
                  

                  - *(integer) --* 
            
          
          
            

            - **imageManifestMediaType** *(string) --* 

              The media type of the image manifest.

              
            

            - **artifactMediaType** *(string) --* 

              The artifact media type of the image.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: ECR.Paginator.DescribeRepositories

  ::

    
    paginator = client.get_paginator('describe_repositories')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ECR.Client.describe_repositories`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeRepositories>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          registryId='string',
          repositoryNames=[
              'string',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryNames: list
    :param repositoryNames: 

      A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'repositories': [
                {
                    'repositoryArn': 'string',
                    'registryId': 'string',
                    'repositoryName': 'string',
                    'repositoryUri': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'imageTagMutability': 'MUTABLE'|'IMMUTABLE',
                    'imageScanningConfiguration': {
                        'scanOnPush': True|False
                    },
                    'encryptionConfiguration': {
                        'encryptionType': 'AES256'|'KMS',
                        'kmsKey': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **repositories** *(list) --* 

          A list of repository objects corresponding to valid repositories.

          
          

          - *(dict) --* 

            An object representing a repository.

            
            

            - **repositoryArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the ``arn:aws:ecr`` namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, ``arn:aws:ecr:region:012345678910:repository/test`` .

              
            

            - **registryId** *(string) --* 

              The AWS account ID associated with the registry that contains the repository.

              
            

            - **repositoryName** *(string) --* 

              The name of the repository.

              
            

            - **repositoryUri** *(string) --* 

              The URI for the repository. You can use this URI for container image ``push`` and ``pull`` operations.

              
            

            - **createdAt** *(datetime) --* 

              The date and time, in JavaScript date format, when the repository was created.

              
            

            - **imageTagMutability** *(string) --* 

              The tag mutability setting for the repository.

              
            

            - **imageScanningConfiguration** *(dict) --* 

              The image scanning configuration for a repository.

              
              

              - **scanOnPush** *(boolean) --* 

                The setting that determines whether images are scanned after being pushed to a repository. If set to ``true`` , images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started with the  StartImageScan API.

                
          
            

            - **encryptionConfiguration** *(dict) --* 

              The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.

              
              

              - **encryptionType** *(string) --* 

                The encryption type to use.

                 

                If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using server-side encryption with customer master keys (CMKs) stored in AWS KMS. When you use AWS KMS to encrypt your data, you can either use the default AWS managed CMK for Amazon ECR, or specify your own CMK, which you already created. For more information, see `Protecting Data Using Server-Side Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

                 

                If you use the ``AES256`` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see `Protecting Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys (SSE-S3) <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html>`__ in the *Amazon Simple Storage Service Console Developer Guide.* .

                
              

              - **kmsKey** *(string) --* 

                If you use the ``KMS`` encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.

                
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: ECR.Paginator.GetLifecyclePolicyPreview

  ::

    
    paginator = client.get_paginator('get_lifecycle_policy_preview')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ECR.Client.get_lifecycle_policy_preview`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicyPreview>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          registryId='string',
          repositoryName='string',
          imageIds=[
              {
                  'imageDigest': 'string',
                  'imageTag': 'string'
              },
          ],
          filter={
              'tagStatus': 'TAGGED'|'UNTAGGED'|'ANY'
          },
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository.

      

    
    :type imageIds: list
    :param imageIds: 

      The list of imageIDs to be included.

      

    
      - *(dict) --* 

        An object with identifying information for an Amazon ECR image.

        

      
        - **imageDigest** *(string) --* 

          The ``sha256`` digest of the image manifest.

          

        
        - **imageTag** *(string) --* 

          The tag used for the image.

          

        
      
  
    :type filter: dict
    :param filter: 

      An optional parameter that filters results based on image tag status and all tags, if tagged.

      

    
      - **tagStatus** *(string) --* 

        The tag status of the image.

        

      
    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'registryId': 'string',
            'repositoryName': 'string',
            'lifecyclePolicyText': 'string',
            'status': 'IN_PROGRESS'|'COMPLETE'|'EXPIRED'|'FAILED',
            'previewResults': [
                {
                    'imageTags': [
                        'string',
                    ],
                    'imageDigest': 'string',
                    'imagePushedAt': datetime(2015, 1, 1),
                    'action': {
                        'type': 'EXPIRE'
                    },
                    'appliedRulePriority': 123
                },
            ],
            'summary': {
                'expiringImageTotalCount': 123
            },
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **registryId** *(string) --* 

          The registry ID associated with the request.

          
        

        - **repositoryName** *(string) --* 

          The repository name associated with the request.

          
        

        - **lifecyclePolicyText** *(string) --* 

          The JSON lifecycle policy text.

          
        

        - **status** *(string) --* 

          The status of the lifecycle policy preview request.

          
        

        - **previewResults** *(list) --* 

          The results of the lifecycle policy preview request.

          
          

          - *(dict) --* 

            The result of the lifecycle policy preview.

            
            

            - **imageTags** *(list) --* 

              The list of tags associated with this image.

              
              

              - *(string) --* 
          
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imagePushedAt** *(datetime) --* 

              The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.

              
            

            - **action** *(dict) --* 

              The type of action to be taken.

              
              

              - **type** *(string) --* 

                The type of action to be taken.

                
          
            

            - **appliedRulePriority** *(integer) --* 

              The priority of the applied rule.

              
        
      
        

        - **summary** *(dict) --* 

          The list of images that is returned as a result of the action.

          
          

          - **expiringImageTotalCount** *(integer) --* 

            The number of expiring images.

            
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: ECR.Paginator.ListImages

  ::

    
    paginator = client.get_paginator('list_images')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ECR.Client.list_images`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListImages>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          registryId='string',
          repositoryName='string',
          filter={
              'tagStatus': 'TAGGED'|'UNTAGGED'|'ANY'
          },
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to list images. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository with image IDs to be listed.

      

    
    :type filter: dict
    :param filter: 

      The filter key and value with which to filter your ``ListImages`` results.

      

    
      - **tagStatus** *(string) --* 

        The tag status with which to filter your  ListImages results. You can filter results based on whether they are ``TAGGED`` or ``UNTAGGED`` .

        

      
    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'imageIds': [
                {
                    'imageDigest': 'string',
                    'imageTag': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **imageIds** *(list) --* 

          The list of image IDs for the requested repository.

          
          

          - *(dict) --* 

            An object with identifying information for an Amazon ECR image.

            
            

            - **imageDigest** *(string) --* 

              The ``sha256`` digest of the image manifest.

              
            

            - **imageTag** *(string) --* 

              The tag used for the image.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

=======
Waiters
=======


The available waiters are:

* :py:class:`ECR.Waiter.ImageScanComplete`


* :py:class:`ECR.Waiter.LifecyclePolicyPreviewComplete`



.. py:class:: ECR.Waiter.ImageScanComplete

  ::

    
    waiter = client.get_waiter('image_scan_complete')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`ECR.Client.describe_image_scan_findings` every 5 seconds until a successful state is reached. An error is returned after 60 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeImageScanFindings>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          registryId='string',
          repositoryName='string',
          imageId={
              'imageDigest': 'string',
              'imageTag': 'string'
          },
          nextToken='string',
          maxResults=123,
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository in which to describe the image scan findings for. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The repository for the image for which to describe the scan findings.

      

    
    :type imageId: dict
    :param imageId: **[REQUIRED]** 

      An object with identifying information for an Amazon ECR image.

      

    
      - **imageDigest** *(string) --* 

        The ``sha256`` digest of the image manifest.

        

      
      - **imageTag** *(string) --* 

        The tag used for the image.

        

      
    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``DescribeImageScanFindings`` request where ``maxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value. This value is null when there are no more results to return.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of image scan results returned by ``DescribeImageScanFindings`` in paginated output. When this parameter is used, ``DescribeImageScanFindings`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``DescribeImageScanFindings`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``DescribeImageScanFindings`` returns up to 100 results and a ``nextToken`` value, if applicable.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 60

        

      
    
    
    :returns: None

.. py:class:: ECR.Waiter.LifecyclePolicyPreviewComplete

  ::

    
    waiter = client.get_waiter('lifecycle_policy_preview_complete')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`ECR.Client.get_lifecycle_policy_preview` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicyPreview>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          registryId='string',
          repositoryName='string',
          imageIds=[
              {
                  'imageDigest': 'string',
                  'imageTag': 'string'
              },
          ],
          nextToken='string',
          maxResults=123,
          filter={
              'tagStatus': 'TAGGED'|'UNTAGGED'|'ANY'
          },
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type registryId: string
    :param registryId: 

      The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.

      

    
    :type repositoryName: string
    :param repositoryName: **[REQUIRED]** 

      The name of the repository.

      

    
    :type imageIds: list
    :param imageIds: 

      The list of imageIDs to be included.

      

    
      - *(dict) --* 

        An object with identifying information for an Amazon ECR image.

        

      
        - **imageDigest** *(string) --* 

          The ``sha256`` digest of the image manifest.

          

        
        - **imageTag** *(string) --* 

          The tag used for the image.

          

        
      
  
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``GetLifecyclePolicyPreviewRequest`` request where ``maxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value. This value is ``null`` when there are no more results to return. This option cannot be used when you specify images with ``imageIds`` .

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of repository results returned by ``GetLifecyclePolicyPreviewRequest`` in paginated output. When this parameter is used, ``GetLifecyclePolicyPreviewRequest`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``GetLifecyclePolicyPreviewRequest`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``GetLifecyclePolicyPreviewRequest`` returns up to 100 results and a ``nextToken`` value, if applicable. This option cannot be used when you specify images with ``imageIds`` .

      

    
    :type filter: dict
    :param filter: 

      An optional parameter that filters results based on image tag status and all tags, if tagged.

      

    
      - **tagStatus** *(string) --* 

        The tag status of the image.

        

      
    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None