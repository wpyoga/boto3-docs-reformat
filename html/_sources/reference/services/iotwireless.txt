

***********
IoTWireless
***********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: IoTWireless.Client

  A low-level client representing AWS IoT Wireless
  

  AWS IoT Wireless API documentation

  ::

    
    import boto3
    
    client = boto3.client('iotwireless')

  
  These are the available methods:
  
  *   :py:meth:`~IoTWireless.Client.associate_aws_account_with_partner_account`

  
  *   :py:meth:`~IoTWireless.Client.associate_wireless_device_with_thing`

  
  *   :py:meth:`~IoTWireless.Client.associate_wireless_gateway_with_certificate`

  
  *   :py:meth:`~IoTWireless.Client.associate_wireless_gateway_with_thing`

  
  *   :py:meth:`~IoTWireless.Client.can_paginate`

  
  *   :py:meth:`~IoTWireless.Client.create_destination`

  
  *   :py:meth:`~IoTWireless.Client.create_device_profile`

  
  *   :py:meth:`~IoTWireless.Client.create_service_profile`

  
  *   :py:meth:`~IoTWireless.Client.create_wireless_device`

  
  *   :py:meth:`~IoTWireless.Client.create_wireless_gateway`

  
  *   :py:meth:`~IoTWireless.Client.create_wireless_gateway_task`

  
  *   :py:meth:`~IoTWireless.Client.create_wireless_gateway_task_definition`

  
  *   :py:meth:`~IoTWireless.Client.delete_destination`

  
  *   :py:meth:`~IoTWireless.Client.delete_device_profile`

  
  *   :py:meth:`~IoTWireless.Client.delete_service_profile`

  
  *   :py:meth:`~IoTWireless.Client.delete_wireless_device`

  
  *   :py:meth:`~IoTWireless.Client.delete_wireless_gateway`

  
  *   :py:meth:`~IoTWireless.Client.delete_wireless_gateway_task`

  
  *   :py:meth:`~IoTWireless.Client.delete_wireless_gateway_task_definition`

  
  *   :py:meth:`~IoTWireless.Client.disassociate_aws_account_from_partner_account`

  
  *   :py:meth:`~IoTWireless.Client.disassociate_wireless_device_from_thing`

  
  *   :py:meth:`~IoTWireless.Client.disassociate_wireless_gateway_from_certificate`

  
  *   :py:meth:`~IoTWireless.Client.disassociate_wireless_gateway_from_thing`

  
  *   :py:meth:`~IoTWireless.Client.generate_presigned_url`

  
  *   :py:meth:`~IoTWireless.Client.get_destination`

  
  *   :py:meth:`~IoTWireless.Client.get_device_profile`

  
  *   :py:meth:`~IoTWireless.Client.get_log_levels_by_resource_types`

  
  *   :py:meth:`~IoTWireless.Client.get_paginator`

  
  *   :py:meth:`~IoTWireless.Client.get_partner_account`

  
  *   :py:meth:`~IoTWireless.Client.get_resource_log_level`

  
  *   :py:meth:`~IoTWireless.Client.get_service_endpoint`

  
  *   :py:meth:`~IoTWireless.Client.get_service_profile`

  
  *   :py:meth:`~IoTWireless.Client.get_waiter`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_device`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_device_statistics`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_gateway`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_gateway_certificate`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_gateway_firmware_information`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_gateway_statistics`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_gateway_task`

  
  *   :py:meth:`~IoTWireless.Client.get_wireless_gateway_task_definition`

  
  *   :py:meth:`~IoTWireless.Client.list_destinations`

  
  *   :py:meth:`~IoTWireless.Client.list_device_profiles`

  
  *   :py:meth:`~IoTWireless.Client.list_partner_accounts`

  
  *   :py:meth:`~IoTWireless.Client.list_service_profiles`

  
  *   :py:meth:`~IoTWireless.Client.list_tags_for_resource`

  
  *   :py:meth:`~IoTWireless.Client.list_wireless_devices`

  
  *   :py:meth:`~IoTWireless.Client.list_wireless_gateway_task_definitions`

  
  *   :py:meth:`~IoTWireless.Client.list_wireless_gateways`

  
  *   :py:meth:`~IoTWireless.Client.put_resource_log_level`

  
  *   :py:meth:`~IoTWireless.Client.reset_all_resource_log_levels`

  
  *   :py:meth:`~IoTWireless.Client.reset_resource_log_level`

  
  *   :py:meth:`~IoTWireless.Client.send_data_to_wireless_device`

  
  *   :py:meth:`~IoTWireless.Client.tag_resource`

  
  *   :py:meth:`~IoTWireless.Client.test_wireless_device`

  
  *   :py:meth:`~IoTWireless.Client.untag_resource`

  
  *   :py:meth:`~IoTWireless.Client.update_destination`

  
  *   :py:meth:`~IoTWireless.Client.update_log_levels_by_resource_types`

  
  *   :py:meth:`~IoTWireless.Client.update_partner_account`

  
  *   :py:meth:`~IoTWireless.Client.update_wireless_device`

  
  *   :py:meth:`~IoTWireless.Client.update_wireless_gateway`

  

  .. py:method:: associate_aws_account_with_partner_account(**kwargs)

    

    Associates a partner account with your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/AssociateAwsAccountWithPartnerAccount>`_    


    **Request Syntax** 
    ::

      response = client.associate_aws_account_with_partner_account(
          Sidewalk={
              'AmazonId': 'string',
              'AppServerPrivateKey': 'string'
          },
          ClientRequestToken='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Sidewalk: dict
    :param Sidewalk: **[REQUIRED]** 

      The Sidewalk account credentials.

      

    
      - **AmazonId** *(string) --* 

        The Sidewalk Amazon ID.

        

      
      - **AppServerPrivateKey** *(string) --* 

        The Sidewalk application server private key.

        

      
    
    :type ClientRequestToken: string
    :param ClientRequestToken: 

      Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. 

      This field is autopopulated if not provided.

    
    :type Tags: list
    :param Tags: 

      The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Sidewalk': {
                'AmazonId': 'string',
                'AppServerPrivateKey': 'string'
            },
            'Arn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Sidewalk** *(dict) --* 

          The Sidewalk account credentials.

          
          

          - **AmazonId** *(string) --* 

            The Sidewalk Amazon ID.

            
          

          - **AppServerPrivateKey** *(string) --* 

            The Sidewalk application server private key.

            
      
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    

  .. py:method:: associate_wireless_device_with_thing(**kwargs)

    

    Associates a wireless device with a thing.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/AssociateWirelessDeviceWithThing>`_    


    **Request Syntax** 
    ::

      response = client.associate_wireless_device_with_thing(
          Id='string',
          ThingArn='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    :type ThingArn: string
    :param ThingArn: **[REQUIRED]** 

      The ARN of the thing to associate with the wireless device.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    

  .. py:method:: associate_wireless_gateway_with_certificate(**kwargs)

    

    Associates a wireless gateway with a certificate.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/AssociateWirelessGatewayWithCertificate>`_    


    **Request Syntax** 
    ::

      response = client.associate_wireless_gateway_with_certificate(
          Id='string',
          IotCertificateId='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    :type IotCertificateId: string
    :param IotCertificateId: **[REQUIRED]** 

      The ID of the certificate to associate with the wireless gateway.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IotCertificateId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IotCertificateId** *(string) --* 

          The ID of the certificate associated with the wireless gateway.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_wireless_gateway_with_thing(**kwargs)

    

    Associates a wireless gateway with a thing.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/AssociateWirelessGatewayWithThing>`_    


    **Request Syntax** 
    ::

      response = client.associate_wireless_gateway_with_thing(
          Id='string',
          ThingArn='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    :type ThingArn: string
    :param ThingArn: **[REQUIRED]** 

      The ARN of the thing to associate with the wireless gateway.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_destination(**kwargs)

    

    Creates a new destination that maps a device message to an AWS IoT rule.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/CreateDestination>`_    


    **Request Syntax** 
    ::

      response = client.create_destination(
          Name='string',
          ExpressionType='RuleName'|'MqttTopic',
          Expression='string',
          Description='string',
          RoleArn='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          ClientRequestToken='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the new resource.

      

    
    :type ExpressionType: string
    :param ExpressionType: **[REQUIRED]** 

      The type of value in ``Expression`` .

      

    
    :type Expression: string
    :param Expression: **[REQUIRED]** 

      The rule name or topic rule to send messages to.

      

    
    :type Description: string
    :param Description: 

      The description of the new resource.

      

    
    :type RoleArn: string
    :param RoleArn: **[REQUIRED]** 

      The ARN of the IAM Role that authorizes the destination.

      

    
    :type Tags: list
    :param Tags: 

      The tags to attach to the new destination. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    :type ClientRequestToken: string
    :param ClientRequestToken: 

      Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. 

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Name': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the new resource.

          
        

        - **Name** *(string) --* 

          The name of the new resource.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_device_profile(**kwargs)

    

    Creates a new device profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/CreateDeviceProfile>`_    


    **Request Syntax** 
    ::

      response = client.create_device_profile(
          Name='string',
          LoRaWAN={
              'SupportsClassB': True|False,
              'ClassBTimeout': 123,
              'PingSlotPeriod': 123,
              'PingSlotDr': 123,
              'PingSlotFreq': 123,
              'SupportsClassC': True|False,
              'ClassCTimeout': 123,
              'MacVersion': 'string',
              'RegParamsRevision': 'string',
              'RxDelay1': 123,
              'RxDrOffset1': 123,
              'RxDataRate2': 123,
              'RxFreq2': 123,
              'FactoryPresetFreqsList': [
                  123,
              ],
              'MaxEirp': 123,
              'MaxDutyCycle': 123,
              'RfRegion': 'string',
              'SupportsJoin': True|False,
              'Supports32BitFCnt': True|False
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          ClientRequestToken='string'
      )
    :type Name: string
    :param Name: 

      The name of the new resource.

      

    
    :type LoRaWAN: dict
    :param LoRaWAN: 

      The device profile information to use to create the device profile.

      

    
      - **SupportsClassB** *(boolean) --* 

        The SupportsClassB value.

        

      
      - **ClassBTimeout** *(integer) --* 

        The ClassBTimeout value.

        

      
      - **PingSlotPeriod** *(integer) --* 

        The PingSlotPeriod value.

        

      
      - **PingSlotDr** *(integer) --* 

        The PingSlotDR value.

        

      
      - **PingSlotFreq** *(integer) --* 

        The PingSlotFreq value.

        

      
      - **SupportsClassC** *(boolean) --* 

        The SupportsClassC value.

        

      
      - **ClassCTimeout** *(integer) --* 

        The ClassCTimeout value.

        

      
      - **MacVersion** *(string) --* 

        The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.

        

      
      - **RegParamsRevision** *(string) --* 

        The version of regional parameters.

        

      
      - **RxDelay1** *(integer) --* 

        The RXDelay1 value.

        

      
      - **RxDrOffset1** *(integer) --* 

        The RXDROffset1 value.

        

      
      - **RxDataRate2** *(integer) --* 

        The RXDataRate2 value.

        

      
      - **RxFreq2** *(integer) --* 

        The RXFreq2 value.

        

      
      - **FactoryPresetFreqsList** *(list) --* 

        The list of values that make up the FactoryPresetFreqs value.

        

      
        - *(integer) --* 

        
    
      - **MaxEirp** *(integer) --* 

        The MaxEIRP value.

        

      
      - **MaxDutyCycle** *(integer) --* 

        The MaxDutyCycle value.

        

      
      - **RfRegion** *(string) --* 

        The frequency band (RFRegion) value.

        

      
      - **SupportsJoin** *(boolean) --* 

        The SupportsJoin value.

        

      
      - **Supports32BitFCnt** *(boolean) --* 

        The Supports32BitFCnt value.

        

      
    
    :type Tags: list
    :param Tags: 

      The tags to attach to the new device profile. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    :type ClientRequestToken: string
    :param ClientRequestToken: 

      Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. 

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Id': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the new resource.

          
        

        - **Id** *(string) --* 

          The ID of the new device profile.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_service_profile(**kwargs)

    

    Creates a new service profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/CreateServiceProfile>`_    


    **Request Syntax** 
    ::

      response = client.create_service_profile(
          Name='string',
          LoRaWAN={
              'AddGwMetadata': True|False
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          ClientRequestToken='string'
      )
    :type Name: string
    :param Name: 

      The name of the new resource.

      

    
    :type LoRaWAN: dict
    :param LoRaWAN: 

      The service profile information to use to create the service profile.

      

    
      - **AddGwMetadata** *(boolean) --* 

        The AddGWMetaData value.

        

      
    
    :type Tags: list
    :param Tags: 

      The tags to attach to the new service profile. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    :type ClientRequestToken: string
    :param ClientRequestToken: 

      Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. 

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Id': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the new resource.

          
        

        - **Id** *(string) --* 

          The ID of the new service profile.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_wireless_device(**kwargs)

    

    Provisions a wireless device.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/CreateWirelessDevice>`_    


    **Request Syntax** 
    ::

      response = client.create_wireless_device(
          Type='Sidewalk'|'LoRaWAN',
          Name='string',
          Description='string',
          DestinationName='string',
          ClientRequestToken='string',
          LoRaWAN={
              'DevEui': 'string',
              'DeviceProfileId': 'string',
              'ServiceProfileId': 'string',
              'OtaaV1_1': {
                  'AppKey': 'string',
                  'NwkKey': 'string',
                  'JoinEui': 'string'
              },
              'OtaaV1_0_x': {
                  'AppKey': 'string',
                  'AppEui': 'string'
              },
              'AbpV1_1': {
                  'DevAddr': 'string',
                  'SessionKeys': {
                      'FNwkSIntKey': 'string',
                      'SNwkSIntKey': 'string',
                      'NwkSEncKey': 'string',
                      'AppSKey': 'string'
                  }
              },
              'AbpV1_0_x': {
                  'DevAddr': 'string',
                  'SessionKeys': {
                      'NwkSKey': 'string',
                      'AppSKey': 'string'
                  }
              }
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Type: string
    :param Type: **[REQUIRED]** 

      The wireless device type.

      

    
    :type Name: string
    :param Name: 

      The name of the new resource.

      

    
    :type Description: string
    :param Description: 

      The description of the new resource.

      

    
    :type DestinationName: string
    :param DestinationName: **[REQUIRED]** 

      The name of the destination to assign to the new wireless device.

      

    
    :type ClientRequestToken: string
    :param ClientRequestToken: 

      Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. 

      This field is autopopulated if not provided.

    
    :type LoRaWAN: dict
    :param LoRaWAN: 

      The device configuration information to use to create the wireless device.

      

    
      - **DevEui** *(string) --* 

        The DevEUI value.

        

      
      - **DeviceProfileId** *(string) --* 

        The ID of the device profile for the new wireless device.

        

      
      - **ServiceProfileId** *(string) --* 

        The ID of the service profile.

        

      
      - **OtaaV1_1** *(dict) --* 

        OTAA device object for v1.1 for create APIs

        

      
        - **AppKey** *(string) --* 

          The AppKey value.

          

        
        - **NwkKey** *(string) --* 

          The NwkKey value.

          

        
        - **JoinEui** *(string) --* 

          The JoinEUI value.

          

        
      
      - **OtaaV1_0_x** *(dict) --* 

        OTAA device object for create APIs for v1.0.x

        

      
        - **AppKey** *(string) --* 

          The AppKey value.

          

        
        - **AppEui** *(string) --* 

          The AppEUI value.

          

        
      
      - **AbpV1_1** *(dict) --* 

        ABP device object for create APIs for v1.1

        

      
        - **DevAddr** *(string) --* 

          The DevAddr value.

          

        
        - **SessionKeys** *(dict) --* 

          Session keys for ABP v1.1

          

        
          - **FNwkSIntKey** *(string) --* 

            The FNwkSIntKey value.

            

          
          - **SNwkSIntKey** *(string) --* 

            The SNwkSIntKey value.

            

          
          - **NwkSEncKey** *(string) --* 

            The NwkSEncKey value.

            

          
          - **AppSKey** *(string) --* 

            The AppSKey value.

            

          
        
      
      - **AbpV1_0_x** *(dict) --* 

        LoRaWAN object for create APIs

        

      
        - **DevAddr** *(string) --* 

          The DevAddr value.

          

        
        - **SessionKeys** *(dict) --* 

          Session keys for ABP v1.0.x

          

        
          - **NwkSKey** *(string) --* 

            The NwkSKey value.

            

          
          - **AppSKey** *(string) --* 

            The AppSKey value.

            

          
        
      
    
    :type Tags: list
    :param Tags: 

      The tags to attach to the new wireless device. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Id': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the new resource.

          
        

        - **Id** *(string) --* 

          The ID of the new wireless device.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_wireless_gateway(**kwargs)

    

    Provisions a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/CreateWirelessGateway>`_    


    **Request Syntax** 
    ::

      response = client.create_wireless_gateway(
          Name='string',
          Description='string',
          LoRaWAN={
              'GatewayEui': 'string',
              'RfRegion': 'string',
              'JoinEuiFilters': [
                  [
                      'string',
                  ],
              ],
              'NetIdFilters': [
                  'string',
              ],
              'SubBands': [
                  123,
              ]
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          ClientRequestToken='string'
      )
    :type Name: string
    :param Name: 

      The name of the new resource.

      

    
    :type Description: string
    :param Description: 

      The description of the new resource.

      

    
    :type LoRaWAN: dict
    :param LoRaWAN: **[REQUIRED]** 

      The gateway configuration information to use to create the wireless gateway.

      

    
      - **GatewayEui** *(string) --* 

        The gateway's EUI value.

        

      
      - **RfRegion** *(string) --* 

        The frequency band (RFRegion) value.

        

      
      - **JoinEuiFilters** *(list) --* 

        A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.

        

      
        - *(list) --* 

          A pair of join EUI describing a range [BegEui, EndEui], both ends are inclusive.

          

        
          - *(string) --* 

          
      
    
      - **NetIdFilters** *(list) --* 

        A list of NetId values that are used by LoRa gateways to filter the uplink frames.

        

      
        - *(string) --* 

          LoRaWAN network ID.

          

        
    
      - **SubBands** *(list) --* 

        A list of integer indicating which sub bands are supported by LoRa gateway.

        

      
        - *(integer) --* 

          A subset of supported frequency channels in a certain RFRegion.

          

        
    
    
    :type Tags: list
    :param Tags: 

      The tags to attach to the new wireless gateway. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    :type ClientRequestToken: string
    :param ClientRequestToken: 

      Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. 

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Id': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the new resource.

          
        

        - **Id** *(string) --* 

          The ID of the new wireless gateway.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_wireless_gateway_task(**kwargs)

    

    Creates a task for a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/CreateWirelessGatewayTask>`_    


    **Request Syntax** 
    ::

      response = client.create_wireless_gateway_task(
          Id='string',
          WirelessGatewayTaskDefinitionId='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    :type WirelessGatewayTaskDefinitionId: string
    :param WirelessGatewayTaskDefinitionId: **[REQUIRED]** 

      The ID of the WirelessGatewayTaskDefinition.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WirelessGatewayTaskDefinitionId': 'string',
            'Status': 'PENDING'|'IN_PROGRESS'|'FIRST_RETRY'|'SECOND_RETRY'|'COMPLETED'|'FAILED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WirelessGatewayTaskDefinitionId** *(string) --* 

          The ID of the WirelessGatewayTaskDefinition.

          
        

        - **Status** *(string) --* 

          The status of the request.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_wireless_gateway_task_definition(**kwargs)

    

    Creates a gateway task definition.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/CreateWirelessGatewayTaskDefinition>`_    


    **Request Syntax** 
    ::

      response = client.create_wireless_gateway_task_definition(
          AutoCreateTasks=True|False,
          Name='string',
          Update={
              'UpdateDataSource': 'string',
              'UpdateDataRole': 'string',
              'LoRaWAN': {
                  'UpdateSignature': 'string',
                  'SigKeyCrc': 123,
                  'CurrentVersion': {
                      'PackageVersion': 'string',
                      'Model': 'string',
                      'Station': 'string'
                  },
                  'UpdateVersion': {
                      'PackageVersion': 'string',
                      'Model': 'string',
                      'Station': 'string'
                  }
              }
          },
          ClientRequestToken='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type AutoCreateTasks: boolean
    :param AutoCreateTasks: **[REQUIRED]** 

      Whether to automatically create tasks using this task definition for all gateways with the specified current version. If ``false`` , the task must me created by calling ``CreateWirelessGatewayTask`` .

      

    
    :type Name: string
    :param Name: 

      The name of the new resource.

      

    
    :type Update: dict
    :param Update: 

      Information about the gateways to update.

      

    
      - **UpdateDataSource** *(string) --* 

        The link to the S3 bucket.

        

      
      - **UpdateDataRole** *(string) --* 

        The IAM role used to read data from the S3 bucket.

        

      
      - **LoRaWAN** *(dict) --* 

        The properties that relate to the LoRaWAN wireless gateway.

        

      
        - **UpdateSignature** *(string) --* 

          The signature used to verify the update firmware.

          

        
        - **SigKeyCrc** *(integer) --* 

          The CRC of the signature private key to check.

          

        
        - **CurrentVersion** *(dict) --* 

          The version of the gateways that should receive the update.

          

        
          - **PackageVersion** *(string) --* 

            The version of the wireless gateway firmware.

            

          
          - **Model** *(string) --* 

            The model number of the wireless gateway.

            

          
          - **Station** *(string) --* 

            The basic station version of the wireless gateway.

            

          
        
        - **UpdateVersion** *(dict) --* 

          The firmware version to update the gateway to.

          

        
          - **PackageVersion** *(string) --* 

            The version of the wireless gateway firmware.

            

          
          - **Model** *(string) --* 

            The model number of the wireless gateway.

            

          
          - **Station** *(string) --* 

            The basic station version of the wireless gateway.

            

          
        
      
    
    :type ClientRequestToken: string
    :param ClientRequestToken: 

      Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request. 

      This field is autopopulated if not provided.

    
    :type Tags: list
    :param Tags: 

      The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Id': 'string',
            'Arn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Id** *(string) --* 

          The ID of the new wireless gateway task definition.

          
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_destination(**kwargs)

    

    Deletes a destination.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DeleteDestination>`_    


    **Request Syntax** 
    ::

      response = client.delete_destination(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the resource to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_device_profile(**kwargs)

    

    Deletes a device profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DeleteDeviceProfile>`_    


    **Request Syntax** 
    ::

      response = client.delete_device_profile(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_service_profile(**kwargs)

    

    Deletes a service profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DeleteServiceProfile>`_    


    **Request Syntax** 
    ::

      response = client.delete_service_profile(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_wireless_device(**kwargs)

    

    Deletes a wireless device.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DeleteWirelessDevice>`_    


    **Request Syntax** 
    ::

      response = client.delete_wireless_device(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_wireless_gateway(**kwargs)

    

    Deletes a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DeleteWirelessGateway>`_    


    **Request Syntax** 
    ::

      response = client.delete_wireless_gateway(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_wireless_gateway_task(**kwargs)

    

    Deletes a wireless gateway task.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DeleteWirelessGatewayTask>`_    


    **Request Syntax** 
    ::

      response = client.delete_wireless_gateway_task(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_wireless_gateway_task_definition(**kwargs)

    

    Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DeleteWirelessGatewayTaskDefinition>`_    


    **Request Syntax** 
    ::

      response = client.delete_wireless_gateway_task_definition(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_aws_account_from_partner_account(**kwargs)

    

    Disassociates your AWS account from a partner account. If ``PartnerAccountId`` and ``PartnerType`` are ``null`` , disassociates your AWS account from all partner accounts.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DisassociateAwsAccountFromPartnerAccount>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_aws_account_from_partner_account(
          PartnerAccountId='string',
          PartnerType='Sidewalk'
      )
    :type PartnerAccountId: string
    :param PartnerAccountId: **[REQUIRED]** 

      The partner account ID to disassociate from the AWS account.

      

    
    :type PartnerType: string
    :param PartnerType: **[REQUIRED]** 

      The partner type.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_wireless_device_from_thing(**kwargs)

    

    Disassociates a wireless device from its currently associated thing.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DisassociateWirelessDeviceFromThing>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_wireless_device_from_thing(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    

  .. py:method:: disassociate_wireless_gateway_from_certificate(**kwargs)

    

    Disassociates a wireless gateway from its currently associated certificate.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DisassociateWirelessGatewayFromCertificate>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_wireless_gateway_from_certificate(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_wireless_gateway_from_thing(**kwargs)

    

    Disassociates a wireless gateway from its currently associated thing.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/DisassociateWirelessGatewayFromThing>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_wireless_gateway_from_thing(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_destination(**kwargs)

    

    Gets information about a destination.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetDestination>`_    


    **Request Syntax** 
    ::

      response = client.get_destination(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the resource to get.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Name': 'string',
            'Expression': 'string',
            'ExpressionType': 'RuleName'|'MqttTopic',
            'Description': 'string',
            'RoleArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
        

        - **Name** *(string) --* 

          The name of the resource.

          
        

        - **Expression** *(string) --* 

          The rule name or topic rule to send messages to.

          
        

        - **ExpressionType** *(string) --* 

          The type of value in ``Expression`` .

          
        

        - **Description** *(string) --* 

          The description of the resource.

          
        

        - **RoleArn** *(string) --* 

          The ARN of the IAM Role that authorizes the destination.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_device_profile(**kwargs)

    

    Gets information about a device profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetDeviceProfile>`_    


    **Request Syntax** 
    ::

      response = client.get_device_profile(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to get.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Name': 'string',
            'Id': 'string',
            'LoRaWAN': {
                'SupportsClassB': True|False,
                'ClassBTimeout': 123,
                'PingSlotPeriod': 123,
                'PingSlotDr': 123,
                'PingSlotFreq': 123,
                'SupportsClassC': True|False,
                'ClassCTimeout': 123,
                'MacVersion': 'string',
                'RegParamsRevision': 'string',
                'RxDelay1': 123,
                'RxDrOffset1': 123,
                'RxDataRate2': 123,
                'RxFreq2': 123,
                'FactoryPresetFreqsList': [
                    123,
                ],
                'MaxEirp': 123,
                'MaxDutyCycle': 123,
                'RfRegion': 'string',
                'SupportsJoin': True|False,
                'Supports32BitFCnt': True|False
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
        

        - **Name** *(string) --* 

          The name of the resource.

          
        

        - **Id** *(string) --* 

          The ID of the device profile.

          
        

        - **LoRaWAN** *(dict) --* 

          Information about the device profile.

          
          

          - **SupportsClassB** *(boolean) --* 

            The SupportsClassB value.

            
          

          - **ClassBTimeout** *(integer) --* 

            The ClassBTimeout value.

            
          

          - **PingSlotPeriod** *(integer) --* 

            The PingSlotPeriod value.

            
          

          - **PingSlotDr** *(integer) --* 

            The PingSlotDR value.

            
          

          - **PingSlotFreq** *(integer) --* 

            The PingSlotFreq value.

            
          

          - **SupportsClassC** *(boolean) --* 

            The SupportsClassC value.

            
          

          - **ClassCTimeout** *(integer) --* 

            The ClassCTimeout value.

            
          

          - **MacVersion** *(string) --* 

            The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.

            
          

          - **RegParamsRevision** *(string) --* 

            The version of regional parameters.

            
          

          - **RxDelay1** *(integer) --* 

            The RXDelay1 value.

            
          

          - **RxDrOffset1** *(integer) --* 

            The RXDROffset1 value.

            
          

          - **RxDataRate2** *(integer) --* 

            The RXDataRate2 value.

            
          

          - **RxFreq2** *(integer) --* 

            The RXFreq2 value.

            
          

          - **FactoryPresetFreqsList** *(list) --* 

            The list of values that make up the FactoryPresetFreqs value.

            
            

            - *(integer) --* 
        
          

          - **MaxEirp** *(integer) --* 

            The MaxEIRP value.

            
          

          - **MaxDutyCycle** *(integer) --* 

            The MaxDutyCycle value.

            
          

          - **RfRegion** *(string) --* 

            The frequency band (RFRegion) value.

            
          

          - **SupportsJoin** *(boolean) --* 

            The SupportsJoin value.

            
          

          - **Supports32BitFCnt** *(boolean) --* 

            The Supports32BitFCnt value.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_log_levels_by_resource_types()

    

    Returns current default log-levels, or log levels by resource types, could be for wireless device log options or wireless gateway log options.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetLogLevelsByResourceTypes>`_    


    **Request Syntax** 
    ::

      response = client.get_log_levels_by_resource_types()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DefaultLogLevel': 'INFO'|'ERROR'|'DISABLED',
            'WirelessGatewayLogOptions': [
                {
                    'Type': 'LoRaWAN',
                    'LogLevel': 'INFO'|'ERROR'|'DISABLED',
                    'Events': [
                        {
                            'Event': 'CUPS_Request'|'Certificate',
                            'LogLevel': 'INFO'|'ERROR'|'DISABLED'
                        },
                    ]
                },
            ],
            'WirelessDeviceLogOptions': [
                {
                    'Type': 'Sidewalk'|'LoRaWAN',
                    'LogLevel': 'INFO'|'ERROR'|'DISABLED',
                    'Events': [
                        {
                            'Event': 'Join'|'Rejoin'|'Uplink_Data'|'Downlink_Data'|'Registration',
                            'LogLevel': 'INFO'|'ERROR'|'DISABLED'
                        },
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DefaultLogLevel** *(string) --* 

          The log level for a log message.

          
        

        - **WirelessGatewayLogOptions** *(list) --* 

          The list of wireless gateway log options.

          
          

          - *(dict) --* 

            The log option for wireless gateways. Can be used to set log level for a specific type of wireless gateway.

            
            

            - **Type** *(string) --* 

              The wireless gateway type.

              
            

            - **LogLevel** *(string) --* 

              The log level for a log message.

              
            

            - **Events** *(list) --* 

              The list of wireless gateway event log options.

              
              

              - *(dict) --* 

                The log option for a wireless gateway event. Can be used to set log level for a specific wireless gateway event. For a LoRaWAN gateway, the possible events for a log message are: CUPS_Request, Certificate.

                
                

                - **Event** *(string) --* 

                  The event for a log message, if the log message is tied to a wireless gateway.

                  
                

                - **LogLevel** *(string) --* 

                  The log level for a log message.

                  
            
          
        
      
        

        - **WirelessDeviceLogOptions** *(list) --* 

          The list of wireless device log options.

          
          

          - *(dict) --* 

            The log option for wireless devices. Can be used to set log level for a specific type of wireless device.

            
            

            - **Type** *(string) --* 

              The wireless device type.

              
            

            - **LogLevel** *(string) --* 

              The log level for a log message.

              
            

            - **Events** *(list) --* 

              The list of wireless device event log options.

              
              

              - *(dict) --* 

                The log option for a wireless device event. Can be used to set log level for a specific wireless device event. For a LoRaWAN device, the possible events for a log messsage are: Join, Rejoin, Downlink_Data, Uplink_Data. For a Sidewalk device, the possible events for a log message are: Registration, Downlink_Data, Uplink_Data.

                
                

                - **Event** *(string) --* 

                  The event for a log message, if the log message is tied to a wireless device.

                  
                

                - **LogLevel** *(string) --* 

                  The log level for a log message.

                  
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_partner_account(**kwargs)

    

    Gets information about a partner account. If ``PartnerAccountId`` and ``PartnerType`` are ``null`` , returns all partner accounts.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetPartnerAccount>`_    


    **Request Syntax** 
    ::

      response = client.get_partner_account(
          PartnerAccountId='string',
          PartnerType='Sidewalk'
      )
    :type PartnerAccountId: string
    :param PartnerAccountId: **[REQUIRED]** 

      The partner account ID to disassociate from the AWS account.

      

    
    :type PartnerType: string
    :param PartnerType: **[REQUIRED]** 

      The partner type.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Sidewalk': {
                'AmazonId': 'string',
                'Fingerprint': 'string',
                'Arn': 'string'
            },
            'AccountLinked': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Sidewalk** *(dict) --* 

          The Sidewalk account credentials.

          
          

          - **AmazonId** *(string) --* 

            The Sidewalk Amazon ID.

            
          

          - **Fingerprint** *(string) --* 

            The fingerprint of the Sidewalk application server private key.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name of the resource.

            
      
        

        - **AccountLinked** *(boolean) --* 

          Whether the partner account is linked to the AWS account.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_resource_log_level(**kwargs)

    

    Fetches the log-level override if any for a given resource-ID and resource-type, coulde be a wireless device or a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetResourceLogLevel>`_    


    **Request Syntax** 
    ::

      response = client.get_resource_log_level(
          ResourceIdentifier='string',
          ResourceType='string'
      )
    :type ResourceIdentifier: string
    :param ResourceIdentifier: **[REQUIRED]** 

      The identifier of the resource. For a Wireless Device, it is the wireless device id. For a wireless gateway, it is the wireless gateway id.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      The type of the resource, currently support WirelessDevice and WirelessGateway.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LogLevel': 'INFO'|'ERROR'|'DISABLED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LogLevel** *(string) --* 

          The log level for a log message.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    

  .. py:method:: get_service_endpoint(**kwargs)

    

    Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetServiceEndpoint>`_    


    **Request Syntax** 
    ::

      response = client.get_service_endpoint(
          ServiceType='CUPS'|'LNS'
      )
    :type ServiceType: string
    :param ServiceType: 

      The service type for which to get endpoint information about. Can be ``CUPS`` for the Configuration and Update Server endpoint, or ``LNS`` for the LoRaWAN Network Server endpoint.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServiceType': 'CUPS'|'LNS',
            'ServiceEndpoint': 'string',
            'ServerTrust': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServiceType** *(string) --* 

          The endpoint's service type.

          
        

        - **ServiceEndpoint** *(string) --* 

          The service endpoint value.

          
        

        - **ServerTrust** *(string) --* 

          The Root CA of the server trust certificate.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_service_profile(**kwargs)

    

    Gets information about a service profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetServiceProfile>`_    


    **Request Syntax** 
    ::

      response = client.get_service_profile(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to get.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Name': 'string',
            'Id': 'string',
            'LoRaWAN': {
                'UlRate': 123,
                'UlBucketSize': 123,
                'UlRatePolicy': 'string',
                'DlRate': 123,
                'DlBucketSize': 123,
                'DlRatePolicy': 'string',
                'AddGwMetadata': True|False,
                'DevStatusReqFreq': 123,
                'ReportDevStatusBattery': True|False,
                'ReportDevStatusMargin': True|False,
                'DrMin': 123,
                'DrMax': 123,
                'ChannelMask': 'string',
                'PrAllowed': True|False,
                'HrAllowed': True|False,
                'RaAllowed': True|False,
                'NwkGeoLoc': True|False,
                'TargetPer': 123,
                'MinGwDiversity': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
        

        - **Name** *(string) --* 

          The name of the resource.

          
        

        - **Id** *(string) --* 

          The ID of the service profile.

          
        

        - **LoRaWAN** *(dict) --* 

          Information about the service profile.

          
          

          - **UlRate** *(integer) --* 

            The ULRate value.

            
          

          - **UlBucketSize** *(integer) --* 

            The ULBucketSize value.

            
          

          - **UlRatePolicy** *(string) --* 

            The ULRatePolicy value.

            
          

          - **DlRate** *(integer) --* 

            The DLRate value.

            
          

          - **DlBucketSize** *(integer) --* 

            The DLBucketSize value.

            
          

          - **DlRatePolicy** *(string) --* 

            The DLRatePolicy value.

            
          

          - **AddGwMetadata** *(boolean) --* 

            The AddGWMetaData value.

            
          

          - **DevStatusReqFreq** *(integer) --* 

            The DevStatusReqFreq value.

            
          

          - **ReportDevStatusBattery** *(boolean) --* 

            The ReportDevStatusBattery value.

            
          

          - **ReportDevStatusMargin** *(boolean) --* 

            The ReportDevStatusMargin value.

            
          

          - **DrMin** *(integer) --* 

            The DRMin value.

            
          

          - **DrMax** *(integer) --* 

            The DRMax value.

            
          

          - **ChannelMask** *(string) --* 

            The ChannelMask value.

            
          

          - **PrAllowed** *(boolean) --* 

            The PRAllowed value that describes whether passive roaming is allowed.

            
          

          - **HrAllowed** *(boolean) --* 

            The HRAllowed value that describes whether handover roaming is allowed.

            
          

          - **RaAllowed** *(boolean) --* 

            The RAAllowed value that describes whether roaming activation is allowed.

            
          

          - **NwkGeoLoc** *(boolean) --* 

            The NwkGeoLoc value.

            
          

          - **TargetPer** *(integer) --* 

            The TargetPER value.

            
          

          - **MinGwDiversity** *(integer) --* 

            The MinGwDiversity value.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: get_wireless_device(**kwargs)

    

    Gets information about a wireless device.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessDevice>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_device(
          Identifier='string',
          IdentifierType='WirelessDeviceId'|'DevEui'|'ThingName'
      )
    :type Identifier: string
    :param Identifier: **[REQUIRED]** 

      The identifier of the wireless device to get.

      

    
    :type IdentifierType: string
    :param IdentifierType: **[REQUIRED]** 

      The type of identifier used in ``identifier`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Type': 'Sidewalk'|'LoRaWAN',
            'Name': 'string',
            'Description': 'string',
            'DestinationName': 'string',
            'Id': 'string',
            'Arn': 'string',
            'ThingName': 'string',
            'ThingArn': 'string',
            'LoRaWAN': {
                'DevEui': 'string',
                'DeviceProfileId': 'string',
                'ServiceProfileId': 'string',
                'OtaaV1_1': {
                    'AppKey': 'string',
                    'NwkKey': 'string',
                    'JoinEui': 'string'
                },
                'OtaaV1_0_x': {
                    'AppKey': 'string',
                    'AppEui': 'string'
                },
                'AbpV1_1': {
                    'DevAddr': 'string',
                    'SessionKeys': {
                        'FNwkSIntKey': 'string',
                        'SNwkSIntKey': 'string',
                        'NwkSEncKey': 'string',
                        'AppSKey': 'string'
                    }
                },
                'AbpV1_0_x': {
                    'DevAddr': 'string',
                    'SessionKeys': {
                        'NwkSKey': 'string',
                        'AppSKey': 'string'
                    }
                }
            },
            'Sidewalk': {
                'SidewalkId': 'string',
                'SidewalkManufacturingSn': 'string',
                'DeviceCertificates': [
                    {
                        'SigningAlg': 'Ed25519'|'P256r1',
                        'Value': 'string'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Type** *(string) --* 

          The wireless device type.

          
        

        - **Name** *(string) --* 

          The name of the resource.

          
        

        - **Description** *(string) --* 

          The description of the resource.

          
        

        - **DestinationName** *(string) --* 

          The name of the destination to which the device is assigned.

          
        

        - **Id** *(string) --* 

          The ID of the wireless device.

          
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
        

        - **ThingName** *(string) --* 

          The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.

          
        

        - **ThingArn** *(string) --* 

          The ARN of the thing associated with the wireless device.

          
        

        - **LoRaWAN** *(dict) --* 

          Information about the wireless device.

          
          

          - **DevEui** *(string) --* 

            The DevEUI value.

            
          

          - **DeviceProfileId** *(string) --* 

            The ID of the device profile for the new wireless device.

            
          

          - **ServiceProfileId** *(string) --* 

            The ID of the service profile.

            
          

          - **OtaaV1_1** *(dict) --* 

            OTAA device object for v1.1 for create APIs

            
            

            - **AppKey** *(string) --* 

              The AppKey value.

              
            

            - **NwkKey** *(string) --* 

              The NwkKey value.

              
            

            - **JoinEui** *(string) --* 

              The JoinEUI value.

              
        
          

          - **OtaaV1_0_x** *(dict) --* 

            OTAA device object for create APIs for v1.0.x

            
            

            - **AppKey** *(string) --* 

              The AppKey value.

              
            

            - **AppEui** *(string) --* 

              The AppEUI value.

              
        
          

          - **AbpV1_1** *(dict) --* 

            ABP device object for create APIs for v1.1

            
            

            - **DevAddr** *(string) --* 

              The DevAddr value.

              
            

            - **SessionKeys** *(dict) --* 

              Session keys for ABP v1.1

              
              

              - **FNwkSIntKey** *(string) --* 

                The FNwkSIntKey value.

                
              

              - **SNwkSIntKey** *(string) --* 

                The SNwkSIntKey value.

                
              

              - **NwkSEncKey** *(string) --* 

                The NwkSEncKey value.

                
              

              - **AppSKey** *(string) --* 

                The AppSKey value.

                
          
        
          

          - **AbpV1_0_x** *(dict) --* 

            LoRaWAN object for create APIs

            
            

            - **DevAddr** *(string) --* 

              The DevAddr value.

              
            

            - **SessionKeys** *(dict) --* 

              Session keys for ABP v1.0.x

              
              

              - **NwkSKey** *(string) --* 

                The NwkSKey value.

                
              

              - **AppSKey** *(string) --* 

                The AppSKey value.

                
          
        
      
        

        - **Sidewalk** *(dict) --* 

          Sidewalk device object.

          
          

          - **SidewalkId** *(string) --* 

            The sidewalk device identification.

            
          

          - **SidewalkManufacturingSn** *(string) --* 

            The Sidewalk manufacturing series number.

            
          

          - **DeviceCertificates** *(list) --* 

            The sidewalk device certificates for Ed25519 and P256r1.

            
            

            - *(dict) --* 

              List of sidewalk certificates.

              
              

              - **SigningAlg** *(string) --* 

                The certificate chain algorithm provided by sidewalk.

                
              

              - **Value** *(string) --* 

                The value of the chosen sidewalk certificate.

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_wireless_device_statistics(**kwargs)

    

    Gets operating information about a wireless device.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessDeviceStatistics>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_device_statistics(
          WirelessDeviceId='string'
      )
    :type WirelessDeviceId: string
    :param WirelessDeviceId: **[REQUIRED]** 

      The ID of the wireless device for which to get the data.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WirelessDeviceId': 'string',
            'LastUplinkReceivedAt': 'string',
            'LoRaWAN': {
                'DevEui': 'string',
                'FPort': 123,
                'DataRate': 123,
                'Frequency': 123,
                'Timestamp': 'string',
                'Gateways': [
                    {
                        'GatewayEui': 'string',
                        'Snr': 123.0,
                        'Rssi': 123.0
                    },
                ]
            },
            'Sidewalk': {
                'Rssi': 123,
                'BatteryLevel': 'normal'|'low'|'critical',
                'Event': 'discovered'|'lost'|'ack'|'nack'|'passthrough',
                'DeviceState': 'Provisioned'|'RegisteredNotSeen'|'RegisteredReachable'|'RegisteredUnreachable'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WirelessDeviceId** *(string) --* 

          The ID of the wireless device.

          
        

        - **LastUplinkReceivedAt** *(string) --* 

          The date and time when the most recent uplink was received.

          
        

        - **LoRaWAN** *(dict) --* 

          Information about the wireless device's operations.

          
          

          - **DevEui** *(string) --* 

            The DevEUI value.

            
          

          - **FPort** *(integer) --* 

            The FPort value.

            
          

          - **DataRate** *(integer) --* 

            The DataRate value.

            
          

          - **Frequency** *(integer) --* 

            The device's channel frequency in Hz.

            
          

          - **Timestamp** *(string) --* 

            The date and time of the metadata.

            
          

          - **Gateways** *(list) --* 

            Information about the gateways accessed by the device.

            
            

            - *(dict) --* 

              LoRaWAN gateway metatdata.

              
              

              - **GatewayEui** *(string) --* 

                The gateway's EUI value.

                
              

              - **Snr** *(float) --* 

                The SNR value.

                
              

              - **Rssi** *(float) --* 

                The RSSI value.

                
          
        
      
        

        - **Sidewalk** *(dict) --* 

          MetaData for Sidewalk device.

          
          

          - **Rssi** *(integer) --* 

            The RSSI value.

            
          

          - **BatteryLevel** *(string) --* 

            Sidewalk device battery level.

            
          

          - **Event** *(string) --* 

            Sidewalk device status notification.

            
          

          - **DeviceState** *(string) --* 

            Device state defines the device status of sidewalk device.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_wireless_gateway(**kwargs)

    

    Gets information about a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessGateway>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_gateway(
          Identifier='string',
          IdentifierType='GatewayEui'|'WirelessGatewayId'|'ThingName'
      )
    :type Identifier: string
    :param Identifier: **[REQUIRED]** 

      The identifier of the wireless gateway to get.

      

    
    :type IdentifierType: string
    :param IdentifierType: **[REQUIRED]** 

      The type of identifier used in ``identifier`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Name': 'string',
            'Id': 'string',
            'Description': 'string',
            'LoRaWAN': {
                'GatewayEui': 'string',
                'RfRegion': 'string',
                'JoinEuiFilters': [
                    [
                        'string',
                    ],
                ],
                'NetIdFilters': [
                    'string',
                ],
                'SubBands': [
                    123,
                ]
            },
            'Arn': 'string',
            'ThingName': 'string',
            'ThingArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Name** *(string) --* 

          The name of the resource.

          
        

        - **Id** *(string) --* 

          The ID of the wireless gateway.

          
        

        - **Description** *(string) --* 

          The description of the resource.

          
        

        - **LoRaWAN** *(dict) --* 

          Information about the wireless gateway.

          
          

          - **GatewayEui** *(string) --* 

            The gateway's EUI value.

            
          

          - **RfRegion** *(string) --* 

            The frequency band (RFRegion) value.

            
          

          - **JoinEuiFilters** *(list) --* 

            A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.

            
            

            - *(list) --* 

              A pair of join EUI describing a range [BegEui, EndEui], both ends are inclusive.

              
              

              - *(string) --* 
          
        
          

          - **NetIdFilters** *(list) --* 

            A list of NetId values that are used by LoRa gateways to filter the uplink frames.

            
            

            - *(string) --* 

              LoRaWAN network ID.

              
        
          

          - **SubBands** *(list) --* 

            A list of integer indicating which sub bands are supported by LoRa gateway.

            
            

            - *(integer) --* 

              A subset of supported frequency channels in a certain RFRegion.

              
        
      
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
        

        - **ThingName** *(string) --* 

          The name of the thing associated with the wireless gateway. The value is empty if a thing isn't associated with the gateway.

          
        

        - **ThingArn** *(string) --* 

          The ARN of the thing associated with the wireless gateway.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_wireless_gateway_certificate(**kwargs)

    

    Gets the ID of the certificate that is currently associated with a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessGatewayCertificate>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_gateway_certificate(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to get.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IotCertificateId': 'string',
            'LoRaWANNetworkServerCertificateId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IotCertificateId** *(string) --* 

          The ID of the certificate associated with the wireless gateway.

          
        

        - **LoRaWANNetworkServerCertificateId** *(string) --* 

          The ID of the certificate that is associated with the wireless gateway and used for the LoRaWANNetworkServer endpoint.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_wireless_gateway_firmware_information(**kwargs)

    

    Gets the firmware version and other information about a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessGatewayFirmwareInformation>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_gateway_firmware_information(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to get.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LoRaWAN': {
                'CurrentVersion': {
                    'PackageVersion': 'string',
                    'Model': 'string',
                    'Station': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LoRaWAN** *(dict) --* 

          Information about the wireless gateway's firmware.

          
          

          - **CurrentVersion** *(dict) --* 

            The version of the gateways that should receive the update.

            
            

            - **PackageVersion** *(string) --* 

              The version of the wireless gateway firmware.

              
            

            - **Model** *(string) --* 

              The model number of the wireless gateway.

              
            

            - **Station** *(string) --* 

              The basic station version of the wireless gateway.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_wireless_gateway_statistics(**kwargs)

    

    Gets operating information about a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessGatewayStatistics>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_gateway_statistics(
          WirelessGatewayId='string'
      )
    :type WirelessGatewayId: string
    :param WirelessGatewayId: **[REQUIRED]** 

      The ID of the wireless gateway for which to get the data.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WirelessGatewayId': 'string',
            'LastUplinkReceivedAt': 'string',
            'ConnectionStatus': 'Connected'|'Disconnected'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WirelessGatewayId** *(string) --* 

          The ID of the wireless gateway.

          
        

        - **LastUplinkReceivedAt** *(string) --* 

          The date and time when the most recent uplink was received.

          
        

        - **ConnectionStatus** *(string) --* 

          The connection status of the wireless gateway.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_wireless_gateway_task(**kwargs)

    

    Gets information about a wireless gateway task.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessGatewayTask>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_gateway_task(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to get.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WirelessGatewayId': 'string',
            'WirelessGatewayTaskDefinitionId': 'string',
            'LastUplinkReceivedAt': 'string',
            'TaskCreatedAt': 'string',
            'Status': 'PENDING'|'IN_PROGRESS'|'FIRST_RETRY'|'SECOND_RETRY'|'COMPLETED'|'FAILED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WirelessGatewayId** *(string) --* 

          The ID of the wireless gateway.

          
        

        - **WirelessGatewayTaskDefinitionId** *(string) --* 

          The ID of the WirelessGatewayTask.

          
        

        - **LastUplinkReceivedAt** *(string) --* 

          The date and time when the most recent uplink was received.

          
        

        - **TaskCreatedAt** *(string) --* 

          The date and time when the task was created.

          
        

        - **Status** *(string) --* 

          The status of the request.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_wireless_gateway_task_definition(**kwargs)

    

    Gets information about a wireless gateway task definition.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/GetWirelessGatewayTaskDefinition>`_    


    **Request Syntax** 
    ::

      response = client.get_wireless_gateway_task_definition(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to get.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AutoCreateTasks': True|False,
            'Name': 'string',
            'Update': {
                'UpdateDataSource': 'string',
                'UpdateDataRole': 'string',
                'LoRaWAN': {
                    'UpdateSignature': 'string',
                    'SigKeyCrc': 123,
                    'CurrentVersion': {
                        'PackageVersion': 'string',
                        'Model': 'string',
                        'Station': 'string'
                    },
                    'UpdateVersion': {
                        'PackageVersion': 'string',
                        'Model': 'string',
                        'Station': 'string'
                    }
                }
            },
            'Arn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AutoCreateTasks** *(boolean) --* 

          Whether to automatically create tasks using this task definition for all gateways with the specified current version. If ``false`` , the task must me created by calling ``CreateWirelessGatewayTask`` .

          
        

        - **Name** *(string) --* 

          The name of the resource.

          
        

        - **Update** *(dict) --* 

          Information about the gateways to update.

          
          

          - **UpdateDataSource** *(string) --* 

            The link to the S3 bucket.

            
          

          - **UpdateDataRole** *(string) --* 

            The IAM role used to read data from the S3 bucket.

            
          

          - **LoRaWAN** *(dict) --* 

            The properties that relate to the LoRaWAN wireless gateway.

            
            

            - **UpdateSignature** *(string) --* 

              The signature used to verify the update firmware.

              
            

            - **SigKeyCrc** *(integer) --* 

              The CRC of the signature private key to check.

              
            

            - **CurrentVersion** *(dict) --* 

              The version of the gateways that should receive the update.

              
              

              - **PackageVersion** *(string) --* 

                The version of the wireless gateway firmware.

                
              

              - **Model** *(string) --* 

                The model number of the wireless gateway.

                
              

              - **Station** *(string) --* 

                The basic station version of the wireless gateway.

                
          
            

            - **UpdateVersion** *(dict) --* 

              The firmware version to update the gateway to.

              
              

              - **PackageVersion** *(string) --* 

                The version of the wireless gateway firmware.

                
              

              - **Model** *(string) --* 

                The model number of the wireless gateway.

                
              

              - **Station** *(string) --* 

                The basic station version of the wireless gateway.

                
          
        
      
        

        - **Arn** *(string) --* 

          The Amazon Resource Name of the resource.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_destinations(**kwargs)

    

    Lists the destinations registered to your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListDestinations>`_    


    **Request Syntax** 
    ::

      response = client.list_destinations(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in this operation.

      

    
    :type NextToken: string
    :param NextToken: 

      To retrieve the next set of results, the ``nextToken`` value from a previous response; otherwise **null** to receive the first set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'DestinationList': [
                {
                    'Arn': 'string',
                    'Name': 'string',
                    'ExpressionType': 'RuleName'|'MqttTopic',
                    'Expression': 'string',
                    'Description': 'string',
                    'RoleArn': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          The token to use to get the next set of results, or **null** if there are no additional results.

          
        

        - **DestinationList** *(list) --* 

          The list of destinations.

          
          

          - *(dict) --* 

            Describes a destination.

            
            

            - **Arn** *(string) --* 

              The Amazon Resource Name of the resource.

              
            

            - **Name** *(string) --* 

              The name of the resource.

              
            

            - **ExpressionType** *(string) --* 

              The type of value in ``Expression`` .

              
            

            - **Expression** *(string) --* 

              The rule name or topic rule to send messages to.

              
            

            - **Description** *(string) --* 

              The description of the resource.

              
            

            - **RoleArn** *(string) --* 

              The ARN of the IAM Role that authorizes the destination.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_device_profiles(**kwargs)

    

    Lists the device profiles registered to your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListDeviceProfiles>`_    


    **Request Syntax** 
    ::

      response = client.list_device_profiles(
          NextToken='string',
          MaxResults=123
      )
    :type NextToken: string
    :param NextToken: 

      To retrieve the next set of results, the ``nextToken`` value from a previous response; otherwise **null** to receive the first set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in this operation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'DeviceProfileList': [
                {
                    'Arn': 'string',
                    'Name': 'string',
                    'Id': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          The token to use to get the next set of results, or **null** if there are no additional results.

          
        

        - **DeviceProfileList** *(list) --* 

          The list of device profiles.

          
          

          - *(dict) --* 

            Describes a device profile.

            
            

            - **Arn** *(string) --* 

              The Amazon Resource Name of the resource.

              
            

            - **Name** *(string) --* 

              The name of the resource.

              
            

            - **Id** *(string) --* 

              The ID of the device profile.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_partner_accounts(**kwargs)

    

    Lists the partner accounts associated with your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListPartnerAccounts>`_    


    **Request Syntax** 
    ::

      response = client.list_partner_accounts(
          NextToken='string',
          MaxResults=123
      )
    :type NextToken: string
    :param NextToken: 

      To retrieve the next set of results, the ``nextToken`` value from a previous response; otherwise **null** to receive the first set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in this operation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Sidewalk': [
                {
                    'AmazonId': 'string',
                    'Fingerprint': 'string',
                    'Arn': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          The token to use to get the next set of results, or **null** if there are no additional results.

          
        

        - **Sidewalk** *(list) --* 

          The Sidewalk account credentials.

          
          

          - *(dict) --* 

            Information about a Sidewalk account.

            
            

            - **AmazonId** *(string) --* 

              The Sidewalk Amazon ID.

              
            

            - **Fingerprint** *(string) --* 

              The fingerprint of the Sidewalk application server private key.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name of the resource.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_service_profiles(**kwargs)

    

    Lists the service profiles registered to your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListServiceProfiles>`_    


    **Request Syntax** 
    ::

      response = client.list_service_profiles(
          NextToken='string',
          MaxResults=123
      )
    :type NextToken: string
    :param NextToken: 

      To retrieve the next set of results, the ``nextToken`` value from a previous response; otherwise **null** to receive the first set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in this operation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'ServiceProfileList': [
                {
                    'Arn': 'string',
                    'Name': 'string',
                    'Id': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          The token to use to get the next set of results, or **null** if there are no additional results.

          
        

        - **ServiceProfileList** *(list) --* 

          The list of service profiles.

          
          

          - *(dict) --* 

            Information about a service profile.

            
            

            - **Arn** *(string) --* 

              The Amazon Resource Name of the resource.

              
            

            - **Name** *(string) --* 

              The name of the resource.

              
            

            - **Id** *(string) --* 

              The ID of the service profile.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists the tags (metadata) you have assigned to the resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The ARN of the resource for which you want to list tags.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tags** *(list) --* 

          The tags to attach to the specified resource. Tags are metadata that you can use to manage a resource.

          
          

          - *(dict) --* 

            A simple label consisting of a customer-defined key-value pair

            
            

            - **Key** *(string) --* 

              The tag's key value.

              
            

            - **Value** *(string) --* 

              The tag's value.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_wireless_devices(**kwargs)

    

    Lists the wireless devices registered to your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListWirelessDevices>`_    


    **Request Syntax** 
    ::

      response = client.list_wireless_devices(
          MaxResults=123,
          NextToken='string',
          DestinationName='string',
          DeviceProfileId='string',
          ServiceProfileId='string',
          WirelessDeviceType='Sidewalk'|'LoRaWAN'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in this operation.

      

    
    :type NextToken: string
    :param NextToken: 

      To retrieve the next set of results, the ``nextToken`` value from a previous response; otherwise **null** to receive the first set of results.

      

    
    :type DestinationName: string
    :param DestinationName: 

      A filter to list only the wireless devices that use this destination.

      

    
    :type DeviceProfileId: string
    :param DeviceProfileId: 

      A filter to list only the wireless devices that use this device profile.

      

    
    :type ServiceProfileId: string
    :param ServiceProfileId: 

      A filter to list only the wireless devices that use this service profile.

      

    
    :type WirelessDeviceType: string
    :param WirelessDeviceType: 

      A filter to list only the wireless devices that use this wireless device type.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'WirelessDeviceList': [
                {
                    'Arn': 'string',
                    'Id': 'string',
                    'Type': 'Sidewalk'|'LoRaWAN',
                    'Name': 'string',
                    'DestinationName': 'string',
                    'LastUplinkReceivedAt': 'string',
                    'LoRaWAN': {
                        'DevEui': 'string'
                    },
                    'Sidewalk': {
                        'AmazonId': 'string',
                        'SidewalkId': 'string',
                        'SidewalkManufacturingSn': 'string',
                        'DeviceCertificates': [
                            {
                                'SigningAlg': 'Ed25519'|'P256r1',
                                'Value': 'string'
                            },
                        ]
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          The token to use to get the next set of results, or **null** if there are no additional results.

          
        

        - **WirelessDeviceList** *(list) --* 

          The ID of the wireless device.

          
          

          - *(dict) --* 

            Information about a wireless device's operation.

            
            

            - **Arn** *(string) --* 

              The Amazon Resource Name of the resource.

              
            

            - **Id** *(string) --* 

              The ID of the wireless device reporting the data.

              
            

            - **Type** *(string) --* 

              The wireless device type.

              
            

            - **Name** *(string) --* 

              The name of the resource.

              
            

            - **DestinationName** *(string) --* 

              The name of the destination to which the device is assigned.

              
            

            - **LastUplinkReceivedAt** *(string) --* 

              The date and time when the most recent uplink was received.

              
            

            - **LoRaWAN** *(dict) --* 

              LoRaWAN device info.

              
              

              - **DevEui** *(string) --* 

                The DevEUI value.

                
          
            

            - **Sidewalk** *(dict) --* 

              The Sidewalk account credentials.

              
              

              - **AmazonId** *(string) --* 

                The Sidewalk Amazon ID.

                
              

              - **SidewalkId** *(string) --* 

                The sidewalk device identification.

                
              

              - **SidewalkManufacturingSn** *(string) --* 

                The Sidewalk manufacturing series number.

                
              

              - **DeviceCertificates** *(list) --* 

                The sidewalk device certificates for Ed25519 and P256r1.

                
                

                - *(dict) --* 

                  List of sidewalk certificates.

                  
                  

                  - **SigningAlg** *(string) --* 

                    The certificate chain algorithm provided by sidewalk.

                    
                  

                  - **Value** *(string) --* 

                    The value of the chosen sidewalk certificate.

                    
              
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    

  .. py:method:: list_wireless_gateway_task_definitions(**kwargs)

    

    List the wireless gateway tasks definitions registered to your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListWirelessGatewayTaskDefinitions>`_    


    **Request Syntax** 
    ::

      response = client.list_wireless_gateway_task_definitions(
          MaxResults=123,
          NextToken='string',
          TaskDefinitionType='UPDATE'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in this operation.

      

    
    :type NextToken: string
    :param NextToken: 

      To retrieve the next set of results, the ``nextToken`` value from a previous response; otherwise **null** to receive the first set of results.

      

    
    :type TaskDefinitionType: string
    :param TaskDefinitionType: 

      A filter to list only the wireless gateway task definitions that use this task definition type.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'TaskDefinitions': [
                {
                    'Id': 'string',
                    'LoRaWAN': {
                        'CurrentVersion': {
                            'PackageVersion': 'string',
                            'Model': 'string',
                            'Station': 'string'
                        },
                        'UpdateVersion': {
                            'PackageVersion': 'string',
                            'Model': 'string',
                            'Station': 'string'
                        }
                    },
                    'Arn': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          The token to use to get the next set of results, or **null** if there are no additional results.

          
        

        - **TaskDefinitions** *(list) --* 

          The list of task definitions.

          
          

          - *(dict) --* 

            UpdateWirelessGatewayTaskEntry object.

            
            

            - **Id** *(string) --* 

              The ID of the new wireless gateway task entry.

              
            

            - **LoRaWAN** *(dict) --* 

              The properties that relate to the LoRaWAN wireless gateway.

              
              

              - **CurrentVersion** *(dict) --* 

                The version of the gateways that should receive the update.

                
                

                - **PackageVersion** *(string) --* 

                  The version of the wireless gateway firmware.

                  
                

                - **Model** *(string) --* 

                  The model number of the wireless gateway.

                  
                

                - **Station** *(string) --* 

                  The basic station version of the wireless gateway.

                  
            
              

              - **UpdateVersion** *(dict) --* 

                The firmware version to update the gateway to.

                
                

                - **PackageVersion** *(string) --* 

                  The version of the wireless gateway firmware.

                  
                

                - **Model** *(string) --* 

                  The model number of the wireless gateway.

                  
                

                - **Station** *(string) --* 

                  The basic station version of the wireless gateway.

                  
            
          
            

            - **Arn** *(string) --* 

              The Amazon Resource Name of the resource.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_wireless_gateways(**kwargs)

    

    Lists the wireless gateways registered to your AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ListWirelessGateways>`_    


    **Request Syntax** 
    ::

      response = client.list_wireless_gateways(
          NextToken='string',
          MaxResults=123
      )
    :type NextToken: string
    :param NextToken: 

      To retrieve the next set of results, the ``nextToken`` value from a previous response; otherwise **null** to receive the first set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in this operation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'WirelessGatewayList': [
                {
                    'Arn': 'string',
                    'Id': 'string',
                    'Name': 'string',
                    'Description': 'string',
                    'LoRaWAN': {
                        'GatewayEui': 'string',
                        'RfRegion': 'string',
                        'JoinEuiFilters': [
                            [
                                'string',
                            ],
                        ],
                        'NetIdFilters': [
                            'string',
                        ],
                        'SubBands': [
                            123,
                        ]
                    },
                    'LastUplinkReceivedAt': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          The token to use to get the next set of results, or **null** if there are no additional results.

          
        

        - **WirelessGatewayList** *(list) --* 

          The ID of the wireless gateway.

          
          

          - *(dict) --* 

            Information about a wireless gateway's operation.

            
            

            - **Arn** *(string) --* 

              The Amazon Resource Name of the resource.

              
            

            - **Id** *(string) --* 

              The ID of the wireless gateway reporting the data.

              
            

            - **Name** *(string) --* 

              The name of the resource.

              
            

            - **Description** *(string) --* 

              The description of the resource.

              
            

            - **LoRaWAN** *(dict) --* 

              LoRaWAN gateway info.

              
              

              - **GatewayEui** *(string) --* 

                The gateway's EUI value.

                
              

              - **RfRegion** *(string) --* 

                The frequency band (RFRegion) value.

                
              

              - **JoinEuiFilters** *(list) --* 

                A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.

                
                

                - *(list) --* 

                  A pair of join EUI describing a range [BegEui, EndEui], both ends are inclusive.

                  
                  

                  - *(string) --* 
              
            
              

              - **NetIdFilters** *(list) --* 

                A list of NetId values that are used by LoRa gateways to filter the uplink frames.

                
                

                - *(string) --* 

                  LoRaWAN network ID.

                  
            
              

              - **SubBands** *(list) --* 

                A list of integer indicating which sub bands are supported by LoRa gateway.

                
                

                - *(integer) --* 

                  A subset of supported frequency channels in a certain RFRegion.

                  
            
          
            

            - **LastUplinkReceivedAt** *(string) --* 

              The date and time when the most recent uplink was received.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_resource_log_level(**kwargs)

    

    Sets the log-level override for a resource-ID and resource-type, could be a wireless gateway or a wireless device.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/PutResourceLogLevel>`_    


    **Request Syntax** 
    ::

      response = client.put_resource_log_level(
          ResourceIdentifier='string',
          ResourceType='string',
          LogLevel='INFO'|'ERROR'|'DISABLED'
      )
    :type ResourceIdentifier: string
    :param ResourceIdentifier: **[REQUIRED]** 

      The identifier of the resource. For a Wireless Device, it is the wireless device id. For a wireless gateway, it is the wireless gateway id.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      The type of the resource, currently support WirelessDevice and WirelessGateway.

      

    
    :type LogLevel: string
    :param LogLevel: **[REQUIRED]** 

      The log level for a log message.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    

  .. py:method:: reset_all_resource_log_levels()

    

    Remove log-level overrides if any for all resources (both wireless devices and wireless gateways).

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ResetAllResourceLogLevels>`_    


    **Request Syntax** 
    ::

      response = client.reset_all_resource_log_levels()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    

  .. py:method:: reset_resource_log_level(**kwargs)

    

    Remove log-level override if any for a specific resource-ID and resource-type, could be a wireless device or a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/ResetResourceLogLevel>`_    


    **Request Syntax** 
    ::

      response = client.reset_resource_log_level(
          ResourceIdentifier='string',
          ResourceType='string'
      )
    :type ResourceIdentifier: string
    :param ResourceIdentifier: **[REQUIRED]** 

      The identifier of the resource. For a Wireless Device, it is the wireless device id. For a wireless gateway, it is the wireless gateway id.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      The type of the resource, currently support WirelessDevice and WirelessGateway.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    

  .. py:method:: send_data_to_wireless_device(**kwargs)

    

    Sends a decrypted application data frame to a device.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/SendDataToWirelessDevice>`_    


    **Request Syntax** 
    ::

      response = client.send_data_to_wireless_device(
          Id='string',
          TransmitMode=123,
          PayloadData='string',
          WirelessMetadata={
              'LoRaWAN': {
                  'FPort': 123
              },
              'Sidewalk': {
                  'Seq': 123,
                  'MessageType': 'CUSTOM_COMMAND_ID_NOTIFY'|'CUSTOM_COMMAND_ID_GET'|'CUSTOM_COMMAND_ID_SET'|'CUSTOM_COMMAND_ID_RESP'
              }
          }
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the wireless device to receive the data.

      

    
    :type TransmitMode: integer
    :param TransmitMode: **[REQUIRED]** 

      The transmit mode to use to send data to the wireless device. Can be: ``0`` for UM (unacknowledge mode) or ``1`` for AM (acknowledge mode).

      

    
    :type PayloadData: string
    :param PayloadData: **[REQUIRED]** 

      The message payload to send.

      

    
    :type WirelessMetadata: dict
    :param WirelessMetadata: 

      Metadata about the message request.

      

    
      - **LoRaWAN** *(dict) --* 

        LoRaWAN device info.

        

      
        - **FPort** *(integer) --* 

          The Fport value.

          

        
      
      - **Sidewalk** *(dict) --* 

        The Sidewalk account credentials.

        

      
        - **Seq** *(integer) --* 

          The sequence number.

          

        
        - **MessageType** *(string) --* 

          Sidewalk device message type.

          

        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MessageId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **MessageId** *(string) --* 

          The ID of the message sent to the wireless device.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds a tag to a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceArn='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The ARN of the resource to add tags to.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      Adds to or modifies the tags of the given resource. Tags are metadata that you can use to manage a resource.

      

    
      - *(dict) --* 

        A simple label consisting of a customer-defined key-value pair

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The tag's key value.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.TooManyTagsException`

    

  .. py:method:: test_wireless_device(**kwargs)

    

    Simulates a provisioned device by sending an uplink data payload of ``Hello`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/TestWirelessDevice>`_    


    **Request Syntax** 
    ::

      response = client.test_wireless_device(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the wireless device to test.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Result': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Result** *(string) --* 

          The result returned by the test.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes one or more tags from a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceArn='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The ARN of the resource to remove tags from.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      A list of the keys of the tags to remove from the resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_destination(**kwargs)

    

    Updates properties of a destination.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/UpdateDestination>`_    


    **Request Syntax** 
    ::

      response = client.update_destination(
          Name='string',
          ExpressionType='RuleName'|'MqttTopic',
          Expression='string',
          Description='string',
          RoleArn='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The new name of the resource.

      

    
    :type ExpressionType: string
    :param ExpressionType: 

      The type of value in ``Expression`` .

      

    
    :type Expression: string
    :param Expression: 

      The new rule name or topic rule to send messages to.

      

    
    :type Description: string
    :param Description: 

      A new description of the resource.

      

    
    :type RoleArn: string
    :param RoleArn: 

      The ARN of the IAM Role that authorizes the destination.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_log_levels_by_resource_types(**kwargs)

    

    Set default log level, or log levels by resource types, could be for wireless device log options or wireless gateways log options. This is to control the log messages that will be displayed in CloudWatch.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/UpdateLogLevelsByResourceTypes>`_    


    **Request Syntax** 
    ::

      response = client.update_log_levels_by_resource_types(
          DefaultLogLevel='INFO'|'ERROR'|'DISABLED',
          WirelessDeviceLogOptions=[
              {
                  'Type': 'Sidewalk'|'LoRaWAN',
                  'LogLevel': 'INFO'|'ERROR'|'DISABLED',
                  'Events': [
                      {
                          'Event': 'Join'|'Rejoin'|'Uplink_Data'|'Downlink_Data'|'Registration',
                          'LogLevel': 'INFO'|'ERROR'|'DISABLED'
                      },
                  ]
              },
          ],
          WirelessGatewayLogOptions=[
              {
                  'Type': 'LoRaWAN',
                  'LogLevel': 'INFO'|'ERROR'|'DISABLED',
                  'Events': [
                      {
                          'Event': 'CUPS_Request'|'Certificate',
                          'LogLevel': 'INFO'|'ERROR'|'DISABLED'
                      },
                  ]
              },
          ]
      )
    :type DefaultLogLevel: string
    :param DefaultLogLevel: 

      The log level for a log message.

      

    
    :type WirelessDeviceLogOptions: list
    :param WirelessDeviceLogOptions: 

      The list of wireless device log options.

      

    
      - *(dict) --* 

        The log option for wireless devices. Can be used to set log level for a specific type of wireless device.

        

      
        - **Type** *(string) --* **[REQUIRED]** 

          The wireless device type.

          

        
        - **LogLevel** *(string) --* **[REQUIRED]** 

          The log level for a log message.

          

        
        - **Events** *(list) --* 

          The list of wireless device event log options.

          

        
          - *(dict) --* 

            The log option for a wireless device event. Can be used to set log level for a specific wireless device event. For a LoRaWAN device, the possible events for a log messsage are: Join, Rejoin, Downlink_Data, Uplink_Data. For a Sidewalk device, the possible events for a log message are: Registration, Downlink_Data, Uplink_Data.

            

          
            - **Event** *(string) --* **[REQUIRED]** 

              The event for a log message, if the log message is tied to a wireless device.

              

            
            - **LogLevel** *(string) --* **[REQUIRED]** 

              The log level for a log message.

              

            
          
      
      
  
    :type WirelessGatewayLogOptions: list
    :param WirelessGatewayLogOptions: 

      The list of wireless gateway log options.

      

    
      - *(dict) --* 

        The log option for wireless gateways. Can be used to set log level for a specific type of wireless gateway.

        

      
        - **Type** *(string) --* **[REQUIRED]** 

          The wireless gateway type.

          

        
        - **LogLevel** *(string) --* **[REQUIRED]** 

          The log level for a log message.

          

        
        - **Events** *(list) --* 

          The list of wireless gateway event log options.

          

        
          - *(dict) --* 

            The log option for a wireless gateway event. Can be used to set log level for a specific wireless gateway event. For a LoRaWAN gateway, the possible events for a log message are: CUPS_Request, Certificate.

            

          
            - **Event** *(string) --* **[REQUIRED]** 

              The event for a log message, if the log message is tied to a wireless gateway.

              

            
            - **LogLevel** *(string) --* **[REQUIRED]** 

              The log level for a log message.

              

            
          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ConflictException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    

  .. py:method:: update_partner_account(**kwargs)

    

    Updates properties of a partner account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/UpdatePartnerAccount>`_    


    **Request Syntax** 
    ::

      response = client.update_partner_account(
          Sidewalk={
              'AppServerPrivateKey': 'string'
          },
          PartnerAccountId='string',
          PartnerType='Sidewalk'
      )
    :type Sidewalk: dict
    :param Sidewalk: **[REQUIRED]** 

      The Sidewalk account credentials.

      

    
      - **AppServerPrivateKey** *(string) --* 

        The new Sidewalk application server private key.

        

      
    
    :type PartnerAccountId: string
    :param PartnerAccountId: **[REQUIRED]** 

      The ID of the partner account to update.

      

    
    :type PartnerType: string
    :param PartnerType: **[REQUIRED]** 

      The partner type.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_wireless_device(**kwargs)

    

    Updates properties of a wireless device.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/UpdateWirelessDevice>`_    


    **Request Syntax** 
    ::

      response = client.update_wireless_device(
          Id='string',
          DestinationName='string',
          Name='string',
          Description='string',
          LoRaWAN={
              'DeviceProfileId': 'string',
              'ServiceProfileId': 'string'
          }
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    :type DestinationName: string
    :param DestinationName: 

      The name of the new destination for the device.

      

    
    :type Name: string
    :param Name: 

      The new name of the resource.

      

    
    :type Description: string
    :param Description: 

      A new description of the resource.

      

    
    :type LoRaWAN: dict
    :param LoRaWAN: 

      The updated wireless device's configuration.

      

    
      - **DeviceProfileId** *(string) --* 

        The ID of the device profile for the wireless device.

        

      
      - **ServiceProfileId** *(string) --* 

        The ID of the service profile.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_wireless_gateway(**kwargs)

    

    Updates properties of a wireless gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotwireless-2020-11-22/UpdateWirelessGateway>`_    


    **Request Syntax** 
    ::

      response = client.update_wireless_gateway(
          Id='string',
          Name='string',
          Description='string',
          JoinEuiFilters=[
              [
                  'string',
              ],
          ],
          NetIdFilters=[
              'string',
          ]
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the resource to update.

      

    
    :type Name: string
    :param Name: 

      The new name of the resource.

      

    
    :type Description: string
    :param Description: 

      A new description of the resource.

      

    
    :type JoinEuiFilters: list
    :param JoinEuiFilters: 

      A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.

      

    
      - *(list) --* 

        A pair of join EUI describing a range [BegEui, EndEui], both ends are inclusive.

        

      
        - *(string) --* 

        
    
  
    :type NetIdFilters: list
    :param NetIdFilters: 

      A list of NetId values that are used by LoRa gateways to filter the uplink frames.

      

    
      - *(string) --* 

        LoRaWAN network ID.

        

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTWireless.Client.exceptions.ValidationException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTWireless.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`IoTWireless.Client.exceptions.InternalServerException`

    
    *     :py:class:`IoTWireless.Client.exceptions.ThrottlingException`

    

==========
Paginators
==========


The available paginators are:
