

*****************************
KinesisVideoSignalingChannels
*****************************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: KinesisVideoSignalingChannels.Client

  A low-level client representing Amazon Kinesis Video Signaling Channels
  

  Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.

  ::

    
    import boto3
    
    client = boto3.client('kinesis-video-signaling')

  
  These are the available methods:
  
  *   :py:meth:`~KinesisVideoSignalingChannels.Client.can_paginate`

  
  *   :py:meth:`~KinesisVideoSignalingChannels.Client.generate_presigned_url`

  
  *   :py:meth:`~KinesisVideoSignalingChannels.Client.get_ice_server_config`

  
  *   :py:meth:`~KinesisVideoSignalingChannels.Client.get_paginator`

  
  *   :py:meth:`~KinesisVideoSignalingChannels.Client.get_waiter`

  
  *   :py:meth:`~KinesisVideoSignalingChannels.Client.send_alexa_offer_to_master`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_ice_server_config(**kwargs)

    

    Gets the Interactive Connectivity Establishment (ICE) server configuration information, including URIs, username, and password which can be used to configure the WebRTC connection. The ICE component uses this configuration information to setup the WebRTC connection, including authenticating with the Traversal Using Relays around NAT (TURN) relay server. 

     

    TURN is a protocol that is used to improve the connectivity of peer-to-peer applications. By providing a cloud-based relay service, TURN ensures that a connection can be established even when one or more peers are incapable of a direct peer-to-peer connection. For more information, see `A REST API For Access To TURN Services <https://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00>`__ .

     

    You can invoke this API to establish a fallback mechanism in case either of the peers is unable to establish a direct peer-to-peer connection over a signaling channel. You must specify either a signaling channel ARN or the client ID in order to invoke this API.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kinesis-video-signaling-2019-12-04/GetIceServerConfig>`_    


    **Request Syntax** 
    ::

      response = client.get_ice_server_config(
          ChannelARN='string',
          ClientId='string',
          Service='TURN',
          Username='string'
      )
    :type ChannelARN: string
    :param ChannelARN: **[REQUIRED]** 

      The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. 

      

    
    :type ClientId: string
    :param ClientId: 

      Unique identifier for the viewer. Must be unique within the signaling channel.

      

    
    :type Service: string
    :param Service: 

      Specifies the desired service. Currently, ``TURN`` is the only valid value.

      

    
    :type Username: string
    :param Username: 

      An optional user ID to be associated with the credentials.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IceServerList': [
                {
                    'Uris': [
                        'string',
                    ],
                    'Username': 'string',
                    'Password': 'string',
                    'Ttl': 123
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IceServerList** *(list) --* 

          The list of ICE server information objects.

          
          

          - *(dict) --* 

            A structure for the ICE server connection data.

            
            

            - **Uris** *(list) --* 

              An array of URIs, in the form specified in the `I-D.petithuguenin-behave-turn-uris <https://tools.ietf.org/html/draft-petithuguenin-behave-turn-uris-03>`__ spec. These URIs provide the different addresses and/or protocols that can be used to reach the TURN server.

              
              

              - *(string) --* 
          
            

            - **Username** *(string) --* 

              A username to login to the ICE server.

              
            

            - **Password** *(string) --* 

              A password to login to the ICE server.

              
            

            - **Ttl** *(integer) --* 

              The period of time, in seconds, during which the username and password are valid.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.InvalidClientException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.SessionExpiredException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.ClientLimitExceededException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.InvalidArgumentException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.NotAuthorizedException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: send_alexa_offer_to_master(**kwargs)

    

    This API allows you to connect WebRTC-enabled devices with Alexa display devices. When invoked, it sends the Alexa Session Description Protocol (SDP) offer to the master peer. The offer is delivered as soon as the master is connected to the specified signaling channel. This API returns the SDP answer from the connected master. If the master is not connected to the signaling channel, redelivery requests are made until the message expires.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kinesis-video-signaling-2019-12-04/SendAlexaOfferToMaster>`_    


    **Request Syntax** 
    ::

      response = client.send_alexa_offer_to_master(
          ChannelARN='string',
          SenderClientId='string',
          MessagePayload='string'
      )
    :type ChannelARN: string
    :param ChannelARN: **[REQUIRED]** 

      The ARN of the signaling channel by which Alexa and the master peer communicate.

      

    
    :type SenderClientId: string
    :param SenderClientId: **[REQUIRED]** 

      The unique identifier for the sender client.

      

    
    :type MessagePayload: string
    :param MessagePayload: **[REQUIRED]** 

      The base64-encoded SDP offer content.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Answer': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Answer** *(string) --* 

          The base64-encoded SDP answer content.

          
    
    **Exceptions** 
    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.ClientLimitExceededException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.InvalidArgumentException`

    
    *     :py:class:`KinesisVideoSignalingChannels.Client.exceptions.NotAuthorizedException`

    

==========
Paginators
==========


The available paginators are:
