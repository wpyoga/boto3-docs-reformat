

**********************
AppIntegrationsService
**********************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: AppIntegrationsService.Client

  A low-level client representing Amazon AppIntegrations Service
  

  The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.

   

  For information about how you can use external applications with Amazon Connect, see `Set up pre-built integrations <https://docs.aws.amazon.com/connect/latest/adminguide/crm.html>`__ in the *Amazon Connect Administrator Guide* .

  ::

    
    import boto3
    
    client = boto3.client('appintegrations')

  
  These are the available methods:
  
  *   :py:meth:`~AppIntegrationsService.Client.can_paginate`

  
  *   :py:meth:`~AppIntegrationsService.Client.create_event_integration`

  
  *   :py:meth:`~AppIntegrationsService.Client.delete_event_integration`

  
  *   :py:meth:`~AppIntegrationsService.Client.generate_presigned_url`

  
  *   :py:meth:`~AppIntegrationsService.Client.get_event_integration`

  
  *   :py:meth:`~AppIntegrationsService.Client.get_paginator`

  
  *   :py:meth:`~AppIntegrationsService.Client.get_waiter`

  
  *   :py:meth:`~AppIntegrationsService.Client.list_event_integration_associations`

  
  *   :py:meth:`~AppIntegrationsService.Client.list_event_integrations`

  
  *   :py:meth:`~AppIntegrationsService.Client.list_tags_for_resource`

  
  *   :py:meth:`~AppIntegrationsService.Client.tag_resource`

  
  *   :py:meth:`~AppIntegrationsService.Client.untag_resource`

  
  *   :py:meth:`~AppIntegrationsService.Client.update_event_integration`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_event_integration(**kwargs)

    

    Creates an EventIntegration, given a specified name, description, and a reference to an Amazon EventBridge bus in your account and a partner event source that pushes events to that bus. No objects are created in the your account, only metadata that is persisted on the EventIntegration control plane.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/CreateEventIntegration>`_    


    **Request Syntax** 
    ::

      response = client.create_event_integration(
          Name='string',
          Description='string',
          EventFilter={
              'Source': 'string'
          },
          EventBridgeBus='string',
          ClientToken='string',
          Tags={
              'string': 'string'
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the event integration.

      

    
    :type Description: string
    :param Description: 

      The description of the event integration.

      

    
    :type EventFilter: dict
    :param EventFilter: **[REQUIRED]** 

      The event filter.

      

    
      - **Source** *(string) --* **[REQUIRED]** 

        The source of the events.

        

      
    
    :type EventBridgeBus: string
    :param EventBridgeBus: **[REQUIRED]** 

      The EventBridge bus.

      

    
    :type ClientToken: string
    :param ClientToken: 

      A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventIntegrationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventIntegrationArn** *(string) --* 

          The Amazon Resource Name (ARN) of the event integration. 

          
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceQuotaExceededException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_event_integration(**kwargs)

    

    Deletes the specified existing event integration. If the event integration is associated with clients, the request is rejected.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/DeleteEventIntegration>`_    


    **Request Syntax** 
    ::

      response = client.delete_event_integration(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the event integration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.AccessDeniedException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_event_integration(**kwargs)

    

    Return information about the event integration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/GetEventIntegration>`_    


    **Request Syntax** 
    ::

      response = client.get_event_integration(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the event integration. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Name': 'string',
            'Description': 'string',
            'EventIntegrationArn': 'string',
            'EventBridgeBus': 'string',
            'EventFilter': {
                'Source': 'string'
            },
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Name** *(string) --* 

          The name of the event integration. 

          
        

        - **Description** *(string) --* 

          The description of the event integration.

          
        

        - **EventIntegrationArn** *(string) --* 

          The Amazon Resource Name (ARN) for the event integration.

          
        

        - **EventBridgeBus** *(string) --* 

          The EventBridge bus.

          
        

        - **EventFilter** *(dict) --* 

          The event filter.

          
          

          - **Source** *(string) --* 

            The source of the events.

            
      
        

        - **Tags** *(dict) --* 

          One or more tags.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_event_integration_associations(**kwargs)

    

    Returns a paginated list of event integration associations in the account. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/ListEventIntegrationAssociations>`_    


    **Request Syntax** 
    ::

      response = client.list_event_integration_associations(
          EventIntegrationName='string',
          NextToken='string',
          MaxResults=123
      )
    :type EventIntegrationName: string
    :param EventIntegrationName: **[REQUIRED]** 

      The name of the event integration. 

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventIntegrationAssociations': [
                {
                    'EventIntegrationAssociationArn': 'string',
                    'EventIntegrationAssociationId': 'string',
                    'EventIntegrationName': 'string',
                    'ClientId': 'string',
                    'EventBridgeRuleName': 'string',
                    'ClientAssociationMetadata': {
                        'string': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventIntegrationAssociations** *(list) --* 

          The event integration associations.

          
          

          - *(dict) --* 

            The event integration association.

            
            

            - **EventIntegrationAssociationArn** *(string) --* 

              The Amazon Resource Name (ARN) for the event integration association.

              
            

            - **EventIntegrationAssociationId** *(string) --* 

              The identifier for the event integration association.

              
            

            - **EventIntegrationName** *(string) --* 

              The name of the event integration.

              
            

            - **ClientId** *(string) --* 

              The identifier for the client that is associated with the event integration.

              
            

            - **EventBridgeRuleName** *(string) --* 

              The name of the EventBridge rule.

              
            

            - **ClientAssociationMetadata** *(dict) --* 

              The metadata associated with the client.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.AccessDeniedException`

    

  .. py:method:: list_event_integrations(**kwargs)

    

    Returns a paginated list of event integrations in the account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/ListEventIntegrations>`_    


    **Request Syntax** 
    ::

      response = client.list_event_integrations(
          NextToken='string',
          MaxResults=123
      )
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventIntegrations': [
                {
                    'EventIntegrationArn': 'string',
                    'Name': 'string',
                    'Description': 'string',
                    'EventFilter': {
                        'Source': 'string'
                    },
                    'EventBridgeBus': 'string',
                    'Tags': {
                        'string': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventIntegrations** *(list) --* 

          The event integrations.

          
          

          - *(dict) --* 

            The event integration.

            
            

            - **EventIntegrationArn** *(string) --* 

              The Amazon Resource Name (ARN) of the event integration.

              
            

            - **Name** *(string) --* 

              The name of the event integration.

              
            

            - **Description** *(string) --* 

              The event integration description.

              
            

            - **EventFilter** *(dict) --* 

              The event integration filter.

              
              

              - **Source** *(string) --* 

                The source of the events.

                
          
            

            - **EventBridgeBus** *(string) --* 

              The Amazon EventBridge bus for the event integration.

              
            

            - **Tags** *(dict) --* 

              The tags.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.AccessDeniedException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists the tags for the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(dict) --* 

          Information about the tags.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds the specified tags to the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags={
              'string': 'string'
          }
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    :type tags: dict
    :param tags: **[REQUIRED]** 

      One or more tags. 

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes the specified tags from the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      The tag keys.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_event_integration(**kwargs)

    

    Updates the description of an event integration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appintegrations-2020-07-29/UpdateEventIntegration>`_    


    **Request Syntax** 
    ::

      response = client.update_event_integration(
          Name='string',
          Description='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the event integration.

      

    
    :type Description: string
    :param Description: 

      The description of the event inegration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InternalServiceError`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ThrottlingException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`AppIntegrationsService.Client.exceptions.AccessDeniedException`

    

==========
Paginators
==========


The available paginators are:
