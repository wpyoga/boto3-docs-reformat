

***********
AppRegistry
***********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: AppRegistry.Client

  A low-level client representing AWS Service Catalog App Registry (AppRegistry)
  

  AWS Service Catalog AppRegistry enables organizations to understand the application context of their AWS resources. AppRegistry provides a repository of your applications, their resources, and the application metadata that you use within your enterprise.

  ::

    
    import boto3
    
    client = boto3.client('servicecatalog-appregistry')

  
  These are the available methods:
  
  *   :py:meth:`~AppRegistry.Client.associate_attribute_group`

  
  *   :py:meth:`~AppRegistry.Client.associate_resource`

  
  *   :py:meth:`~AppRegistry.Client.can_paginate`

  
  *   :py:meth:`~AppRegistry.Client.create_application`

  
  *   :py:meth:`~AppRegistry.Client.create_attribute_group`

  
  *   :py:meth:`~AppRegistry.Client.delete_application`

  
  *   :py:meth:`~AppRegistry.Client.delete_attribute_group`

  
  *   :py:meth:`~AppRegistry.Client.disassociate_attribute_group`

  
  *   :py:meth:`~AppRegistry.Client.disassociate_resource`

  
  *   :py:meth:`~AppRegistry.Client.generate_presigned_url`

  
  *   :py:meth:`~AppRegistry.Client.get_application`

  
  *   :py:meth:`~AppRegistry.Client.get_attribute_group`

  
  *   :py:meth:`~AppRegistry.Client.get_paginator`

  
  *   :py:meth:`~AppRegistry.Client.get_waiter`

  
  *   :py:meth:`~AppRegistry.Client.list_applications`

  
  *   :py:meth:`~AppRegistry.Client.list_associated_attribute_groups`

  
  *   :py:meth:`~AppRegistry.Client.list_associated_resources`

  
  *   :py:meth:`~AppRegistry.Client.list_attribute_groups`

  
  *   :py:meth:`~AppRegistry.Client.list_tags_for_resource`

  
  *   :py:meth:`~AppRegistry.Client.sync_resource`

  
  *   :py:meth:`~AppRegistry.Client.tag_resource`

  
  *   :py:meth:`~AppRegistry.Client.untag_resource`

  
  *   :py:meth:`~AppRegistry.Client.update_application`

  
  *   :py:meth:`~AppRegistry.Client.update_attribute_group`

  

  .. py:method:: associate_attribute_group(**kwargs)

    

    Associates an attribute group with an application to augment the application's metadata with the group's attributes. This feature enables applications to be described with user-defined details that are machine-readable, such as third-party integrations.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/AssociateAttributeGroup>`_    


    **Request Syntax** 
    ::

      response = client.associate_attribute_group(
          application='string',
          attributeGroup='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type attributeGroup: string
    :param attributeGroup: **[REQUIRED]** 

      The name or ID of the attribute group that holds the attributes to describe the application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'applicationArn': 'string',
            'attributeGroupArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **applicationArn** *(string) --* 

          The Amazon resource name (ARN) of the application that was augmented with attributes.

          
        

        - **attributeGroupArn** *(string) --* 

          The Amazon resource name (ARN) of the attribute group that contains the application's new attributes.

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ServiceQuotaExceededException`

    

  .. py:method:: associate_resource(**kwargs)

    

    Associates a resource with an application. Both the resource and the application can be specified either by ID or name.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/AssociateResource>`_    


    **Request Syntax** 
    ::

      response = client.associate_resource(
          application='string',
          resourceType='CFN_STACK',
          resource='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type resourceType: string
    :param resourceType: **[REQUIRED]** 

      The type of resource of which the application will be associated.

      

    
    :type resource: string
    :param resource: **[REQUIRED]** 

      The name or ID of the resource of which the application will be associated.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'applicationArn': 'string',
            'resourceArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **applicationArn** *(string) --* 

          The Amazon resource name (ARN) of the application that was augmented with attributes.

          
        

        - **resourceArn** *(string) --* 

          The Amazon resource name (ARN) that specifies the resource.

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ConflictException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_application(**kwargs)

    

    Creates a new application that is the top-level node in a hierarchy of related cloud resource abstractions.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/CreateApplication>`_    


    **Request Syntax** 
    ::

      response = client.create_application(
          name='string',
          description='string',
          tags={
              'string': 'string'
          },
          clientToken='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the application. The name must be unique in the region in which you are creating the application.

      

    
    :type description: string
    :param description: 

      The description of the application.

      

    
    :type tags: dict
    :param tags: 

      Key-value pairs you can use to associate with the application.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type clientToken: string
    :param clientToken: **[REQUIRED]** 

      A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'application': {
                'id': 'string',
                'arn': 'string',
                'name': 'string',
                'description': 'string',
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1),
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **application** *(dict) --* 

          Information about the application.

          
          

          - **id** *(string) --* 

            The identifier of the application.

            
          

          - **arn** *(string) --* 

            The Amazon resource name (ARN) that specifies the application across services.

            
          

          - **name** *(string) --* 

            The name of the application. The name must be unique in the region in which you are creating the application.

            
          

          - **description** *(string) --* 

            The description of the application.

            
          

          - **creationTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment when the application was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment when the application was last updated.

            
          

          - **tags** *(dict) --* 

            Key-value pairs you can use to associate with the application.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ConflictException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: create_attribute_group(**kwargs)

    

    Creates a new attribute group as a container for user-defined attributes. This feature enables users to have full control over their cloud application's metadata in a rich machine-readable format to facilitate integration with automated workflows and third-party tools.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/CreateAttributeGroup>`_    


    **Request Syntax** 
    ::

      response = client.create_attribute_group(
          name='string',
          description='string',
          attributes='string',
          tags={
              'string': 'string'
          },
          clientToken='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the attribute group.

      

    
    :type description: string
    :param description: 

      The description of the attribute group that the user provides.

      

    
    :type attributes: string
    :param attributes: **[REQUIRED]** 

      A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.

      

    
    :type tags: dict
    :param tags: 

      Key-value pairs you can use to associate with the attribute group.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type clientToken: string
    :param clientToken: **[REQUIRED]** 

      A unique identifier that you provide to ensure idempotency. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'attributeGroup': {
                'id': 'string',
                'arn': 'string',
                'name': 'string',
                'description': 'string',
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1),
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **attributeGroup** *(dict) --* 

          Information about the attribute group.

          
          

          - **id** *(string) --* 

            The globally unique attribute group identifier of the attribute group.

            
          

          - **arn** *(string) --* 

            The Amazon resource name (ARN) that specifies the attribute group across services.

            
          

          - **name** *(string) --* 

            The name of the attribute group.

            
          

          - **description** *(string) --* 

            The description of the attribute group that the user provides.

            
          

          - **creationTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment the attribute group was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.

            
          

          - **tags** *(dict) --* 

            Key-value pairs you can use to associate with the attribute group.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ConflictException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_application(**kwargs)

    

    Deletes an application that is specified either by its application ID or name. All associated attribute groups and resources must be disassociated from it before deleting an application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/DeleteApplication>`_    


    **Request Syntax** 
    ::

      response = client.delete_application(
          application='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'application': {
                'id': 'string',
                'arn': 'string',
                'name': 'string',
                'description': 'string',
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **application** *(dict) --* 

          Information about the deleted application.

          
          

          - **id** *(string) --* 

            The identifier of the application.

            
          

          - **arn** *(string) --* 

            The Amazon resource name (ARN) that specifies the application across services.

            
          

          - **name** *(string) --* 

            The name of the application. The name must be unique in the region in which you are creating the application.

            
          

          - **description** *(string) --* 

            The description of the application.

            
          

          - **creationTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment when the application was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment when the application was last updated.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_attribute_group(**kwargs)

    

    Deletes an attribute group, specified either by its attribute group ID or name.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/DeleteAttributeGroup>`_    


    **Request Syntax** 
    ::

      response = client.delete_attribute_group(
          attributeGroup='string'
      )
    :type attributeGroup: string
    :param attributeGroup: **[REQUIRED]** 

      The name or ID of the attribute group that holds the attributes to describe the application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'attributeGroup': {
                'id': 'string',
                'arn': 'string',
                'name': 'string',
                'description': 'string',
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **attributeGroup** *(dict) --* 

          Information about the deleted attribute group.

          
          

          - **id** *(string) --* 

            The globally unique attribute group identifier of the attribute group.

            
          

          - **arn** *(string) --* 

            The Amazon resource name (ARN) that specifies the attribute group across services.

            
          

          - **name** *(string) --* 

            The name of the attribute group.

            
          

          - **description** *(string) --* 

            The description of the attribute group that the user provides.

            
          

          - **creationTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment the attribute group was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: disassociate_attribute_group(**kwargs)

    

    Disassociates an attribute group from an application to remove the extra attributes contained in the attribute group from the application's metadata. This operation reverts ``AssociateAttributeGroup`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/DisassociateAttributeGroup>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_attribute_group(
          application='string',
          attributeGroup='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type attributeGroup: string
    :param attributeGroup: **[REQUIRED]** 

      The name or ID of the attribute group that holds the attributes to describe the application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'applicationArn': 'string',
            'attributeGroupArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **applicationArn** *(string) --* 

          The Amazon resource name (ARN) that specifies the application.

          
        

        - **attributeGroupArn** *(string) --* 

          The Amazon resource name (ARN) that specifies the attribute group.

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: disassociate_resource(**kwargs)

    

    Disassociates a resource from application. Both the resource and the application can be specified either by ID or name.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/DisassociateResource>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_resource(
          application='string',
          resourceType='CFN_STACK',
          resource='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type resourceType: string
    :param resourceType: **[REQUIRED]** 

      The type of the resource that is being disassociated.

      

    
    :type resource: string
    :param resource: **[REQUIRED]** 

      The name or ID of the resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'applicationArn': 'string',
            'resourceArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **applicationArn** *(string) --* 

          The Amazon resource name (ARN) that specifies the application.

          
        

        - **resourceArn** *(string) --* 

          The Amazon resource name (ARN) that specifies the resource.

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_application(**kwargs)

    

    Retrieves metadata information about one of your applications. The application can be specified either by its unique ID or by its name (which is unique within one account in one region at a given point in time). Specify by ID in automated workflows if you want to make sure that the exact same application is returned or a ``ResourceNotFoundException`` is thrown, avoiding the ABA addressing problem.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/GetApplication>`_    


    **Request Syntax** 
    ::

      response = client.get_application(
          application='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'id': 'string',
            'arn': 'string',
            'name': 'string',
            'description': 'string',
            'creationTime': datetime(2015, 1, 1),
            'lastUpdateTime': datetime(2015, 1, 1),
            'associatedResourceCount': 123,
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **id** *(string) --* 

          The identifier of the application.

          
        

        - **arn** *(string) --* 

          The Amazon resource name (ARN) that specifies the application across services.

          
        

        - **name** *(string) --* 

          The name of the application. The name must be unique in the region in which you are creating the application.

          
        

        - **description** *(string) --* 

          The description of the application.

          
        

        - **creationTime** *(datetime) --* 

          The ISO-8601 formatted timestamp of the moment when the application was created.

          
        

        - **lastUpdateTime** *(datetime) --* 

          The ISO-8601 formatted timestamp of the moment when the application was last updated.

          
        

        - **associatedResourceCount** *(integer) --* 

          The number of top-level resources that were registered as part of this application.

          
        

        - **tags** *(dict) --* 

          Key-value pairs associated with the application.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: get_attribute_group(**kwargs)

    

    Retrieves an attribute group, either by its name or its ID. The attribute group can be specified either by its unique ID or by its name.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/GetAttributeGroup>`_    


    **Request Syntax** 
    ::

      response = client.get_attribute_group(
          attributeGroup='string'
      )
    :type attributeGroup: string
    :param attributeGroup: **[REQUIRED]** 

      The name or ID of the attribute group that holds the attributes to describe the application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'id': 'string',
            'arn': 'string',
            'name': 'string',
            'description': 'string',
            'attributes': 'string',
            'creationTime': datetime(2015, 1, 1),
            'lastUpdateTime': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **id** *(string) --* 

          The identifier of the attribute group.

          
        

        - **arn** *(string) --* 

          The Amazon resource name (ARN) that specifies the attribute group across services.

          
        

        - **name** *(string) --* 

          The name of the attribute group.

          
        

        - **description** *(string) --* 

          The description of the attribute group that the user provides.

          
        

        - **attributes** *(string) --* 

          A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.

          
        

        - **creationTime** *(datetime) --* 

          The ISO-8601 formatted timestamp of the moment the attribute group was created.

          
        

        - **lastUpdateTime** *(datetime) --* 

          The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.

          
        

        - **tags** *(dict) --* 

          Key-value pairs associated with the attribute group.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_applications(**kwargs)

    

    Retrieves a list of all of your applications. Results are paginated.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListApplications>`_    


    **Request Syntax** 
    ::

      response = client.list_applications(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token to use to get the next page of results after a previous API call. 

      

    
    :type maxResults: integer
    :param maxResults: 

      The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'applications': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **applications** *(list) --* 

          This list of applications.

          
          

          - *(dict) --* 

            Summary of a Service Catalog AppRegistry application.

            
            

            - **id** *(string) --* 

              The identifier of the application.

              
            

            - **arn** *(string) --* 

              The Amazon resource name (ARN) that specifies the application across services.

              
            

            - **name** *(string) --* 

              The name of the application. The name must be unique in the region in which you are creating the application.

              
            

            - **description** *(string) --* 

              The description of the application.

              
            

            - **creationTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment when the application was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment when the application was last updated.

              
        
      
        

        - **nextToken** *(string) --* 

          The token to use to get the next page of results after a previous API call. 

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: list_associated_attribute_groups(**kwargs)

    

    Lists all attribute groups that are associated with specified application. Results are paginated.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListAssociatedAttributeGroups>`_    


    **Request Syntax** 
    ::

      response = client.list_associated_attribute_groups(
          application='string',
          nextToken='string',
          maxResults=123
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type nextToken: string
    :param nextToken: 

      The token to use to get the next page of results after a previous API call. 

      

    
    :type maxResults: integer
    :param maxResults: 

      The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'attributeGroups': [
                'string',
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **attributeGroups** *(list) --* 

          A list of attribute group IDs.

          
          

          - *(string) --* 
      
        

        - **nextToken** *(string) --* 

          The token to use to get the next page of results after a previous API call. 

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: list_associated_resources(**kwargs)

    

    Lists all resources that are associated with specified application. Results are paginated.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListAssociatedResources>`_    


    **Request Syntax** 
    ::

      response = client.list_associated_resources(
          application='string',
          nextToken='string',
          maxResults=123
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type nextToken: string
    :param nextToken: 

      The token to use to get the next page of results after a previous API call. 

      

    
    :type maxResults: integer
    :param maxResults: 

      The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'resources': [
                {
                    'name': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **resources** *(list) --* 

          Information about the resources.

          
          

          - *(dict) --* 

            Information about the resource.

            
            

            - **name** *(string) --* 

              The name of the resource.

              
            

            - **arn** *(string) --* 

              The Amazon resource name (ARN) that specifies the resource across services.

              
        
      
        

        - **nextToken** *(string) --* 

          The token to use to get the next page of results after a previous API call. 

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: list_attribute_groups(**kwargs)

    

    Lists all attribute groups which you have access to. Results are paginated.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListAttributeGroups>`_    


    **Request Syntax** 
    ::

      response = client.list_attribute_groups(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token to use to get the next page of results after a previous API call. 

      

    
    :type maxResults: integer
    :param maxResults: 

      The upper bound of the number of results to return (cannot exceed 25). If this parameter is omitted, it defaults to 25. This value is optional.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'attributeGroups': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **attributeGroups** *(list) --* 

          This list of attribute groups.

          
          

          - *(dict) --* 

            Summary of a Service Catalog AppRegistry attribute group.

            
            

            - **id** *(string) --* 

              The globally unique attribute group identifier of the attribute group.

              
            

            - **arn** *(string) --* 

              The Amazon resource name (ARN) that specifies the attribute group across services.

              
            

            - **name** *(string) --* 

              The name of the attribute group.

              
            

            - **description** *(string) --* 

              The description of the attribute group that the user provides.

              
            

            - **creationTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment the attribute group was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.

              
        
      
        

        - **nextToken** *(string) --* 

          The token to use to get the next page of results after a previous API call. 

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists all of the tags on the resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon resource name (ARN) that specifies the resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(dict) --* 

          The tags on the resource.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: sync_resource(**kwargs)

    

    Syncs the resource with what is currently recorded in App registry. Specifically, the resource’s App registry system tags are synced with its associated application. The resource is removed if it is not associated with the application. The caller must have permissions to read and update the resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/SyncResource>`_    


    **Request Syntax** 
    ::

      response = client.sync_resource(
          resourceType='CFN_STACK',
          resource='string'
      )
    :type resourceType: string
    :param resourceType: **[REQUIRED]** 

      The type of resource of which the application will be associated.

      

    
    :type resource: string
    :param resource: **[REQUIRED]** 

      An entity you can work with and specify with a name or ID. Examples include an Amazon EC2 instance, an AWS CloudFormation stack, or an Amazon S3 bucket.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'applicationArn': 'string',
            'resourceArn': 'string',
            'actionTaken': 'START_SYNC'|'NO_ACTION'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **applicationArn** *(string) --* 

          The Amazon resource name (ARN) that specifies the application.

          
        

        - **resourceArn** *(string) --* 

          The Amazon resource name (ARN) that specifies the resource.

          
        

        - **actionTaken** *(string) --* 

          The results of the output if an application is associated with an ARN value, which could be ``syncStarted`` or None.

          
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ConflictException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Assigns one or more tags (key-value pairs) to the specified resource.

     

    Each tag consists of a key and an optional value. If a tag with the same key is already associated with the resource, this action updates its value.

     

    This operation returns an empty response if the call was successful.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags={
              'string': 'string'
          }
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon resource name (ARN) that specifies the resource.

      

    
    :type tags: dict
    :param tags: **[REQUIRED]** 

      The new or modified tags for the resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes tags from a resource.

     

    This operation returns an empty response if the call was successful.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon resource name (ARN) that specifies the resource.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      A list of the tag keys to remove from the specified resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: update_application(**kwargs)

    

    Updates an existing application with new attributes.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/UpdateApplication>`_    


    **Request Syntax** 
    ::

      response = client.update_application(
          application='string',
          name='string',
          description='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application that will be updated.

      

    
    :type name: string
    :param name: 

      The new name of the application. The name must be unique in the region in which you are updating the application.

      

    
    :type description: string
    :param description: 

      The new description of the application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'application': {
                'id': 'string',
                'arn': 'string',
                'name': 'string',
                'description': 'string',
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1),
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **application** *(dict) --* 

          The updated information of the application.

          
          

          - **id** *(string) --* 

            The identifier of the application.

            
          

          - **arn** *(string) --* 

            The Amazon resource name (ARN) that specifies the application across services.

            
          

          - **name** *(string) --* 

            The name of the application. The name must be unique in the region in which you are creating the application.

            
          

          - **description** *(string) --* 

            The description of the application.

            
          

          - **creationTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment when the application was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment when the application was last updated.

            
          

          - **tags** *(dict) --* 

            Key-value pairs you can use to associate with the application.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ConflictException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

  .. py:method:: update_attribute_group(**kwargs)

    

    Updates an existing attribute group with new details. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/UpdateAttributeGroup>`_    


    **Request Syntax** 
    ::

      response = client.update_attribute_group(
          attributeGroup='string',
          name='string',
          description='string',
          attributes='string'
      )
    :type attributeGroup: string
    :param attributeGroup: **[REQUIRED]** 

      The name or ID of the attribute group that holds the attributes to describe the application.

      

    
    :type name: string
    :param name: 

      The new name of the attribute group. The name must be unique in the region in which you are updating the attribute group.

      

    
    :type description: string
    :param description: 

      The description of the attribute group that the user provides.

      

    
    :type attributes: string
    :param attributes: 

      A JSON string in the form of nested key-value pairs that represent the attributes in the group and describes an application and its components.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'attributeGroup': {
                'id': 'string',
                'arn': 'string',
                'name': 'string',
                'description': 'string',
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1),
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **attributeGroup** *(dict) --* 

          The updated information of the attribute group.

          
          

          - **id** *(string) --* 

            The globally unique attribute group identifier of the attribute group.

            
          

          - **arn** *(string) --* 

            The Amazon resource name (ARN) that specifies the attribute group across services.

            
          

          - **name** *(string) --* 

            The name of the attribute group.

            
          

          - **description** *(string) --* 

            The description of the attribute group that the user provides.

            
          

          - **creationTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment the attribute group was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.

            
          

          - **tags** *(dict) --* 

            Key-value pairs you can use to associate with the attribute group.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`AppRegistry.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ValidationException`

    
    *     :py:class:`AppRegistry.Client.exceptions.ConflictException`

    
    *     :py:class:`AppRegistry.Client.exceptions.InternalServerException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`AppRegistry.Paginator.ListApplications`


* :py:class:`AppRegistry.Paginator.ListAssociatedAttributeGroups`


* :py:class:`AppRegistry.Paginator.ListAssociatedResources`


* :py:class:`AppRegistry.Paginator.ListAttributeGroups`



.. py:class:: AppRegistry.Paginator.ListApplications

  ::

    
    paginator = client.get_paginator('list_applications')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppRegistry.Client.list_applications`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListApplications>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'applications': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **applications** *(list) --* 

          This list of applications.

          
          

          - *(dict) --* 

            Summary of a Service Catalog AppRegistry application.

            
            

            - **id** *(string) --* 

              The identifier of the application.

              
            

            - **arn** *(string) --* 

              The Amazon resource name (ARN) that specifies the application across services.

              
            

            - **name** *(string) --* 

              The name of the application. The name must be unique in the region in which you are creating the application.

              
            

            - **description** *(string) --* 

              The description of the application.

              
            

            - **creationTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment when the application was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment when the application was last updated.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppRegistry.Paginator.ListAssociatedAttributeGroups

  ::

    
    paginator = client.get_paginator('list_associated_attribute_groups')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppRegistry.Client.list_associated_attribute_groups`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListAssociatedAttributeGroups>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          application='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'attributeGroups': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **attributeGroups** *(list) --* 

          A list of attribute group IDs.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppRegistry.Paginator.ListAssociatedResources

  ::

    
    paginator = client.get_paginator('list_associated_resources')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppRegistry.Client.list_associated_resources`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListAssociatedResources>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          application='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The name or ID of the application.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'resources': [
                {
                    'name': 'string',
                    'arn': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **resources** *(list) --* 

          Information about the resources.

          
          

          - *(dict) --* 

            Information about the resource.

            
            

            - **name** *(string) --* 

              The name of the resource.

              
            

            - **arn** *(string) --* 

              The Amazon resource name (ARN) that specifies the resource across services.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppRegistry.Paginator.ListAttributeGroups

  ::

    
    paginator = client.get_paginator('list_attribute_groups')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppRegistry.Client.list_attribute_groups`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/AWS242AppRegistry-2020-06-24/ListAttributeGroups>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'attributeGroups': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **attributeGroups** *(list) --* 

          This list of attribute groups.

          
          

          - *(dict) --* 

            Summary of a Service Catalog AppRegistry attribute group.

            
            

            - **id** *(string) --* 

              The globally unique attribute group identifier of the attribute group.

              
            

            - **arn** *(string) --* 

              The Amazon resource name (ARN) that specifies the attribute group across services.

              
            

            - **name** *(string) --* 

              The name of the attribute group.

              
            

            - **description** *(string) --* 

              The description of the attribute group that the user provides.

              
            

            - **creationTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment the attribute group was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The ISO-8601 formatted timestamp of the moment the attribute group was last updated. This time is the same as the creationTime for a newly created attribute group.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    