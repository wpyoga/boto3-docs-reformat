

*******
AppMesh
*******

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: AppMesh.Client

  A low-level client representing AWS App Mesh
  

  App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.

   

  App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.

   

  .. note::

     

    App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see `Service Discovery <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html>`__ in the *Amazon Elastic Container Service Developer Guide* . Kubernetes ``kube-dns`` and ``coredns`` are supported. For more information, see `DNS for Services and Pods <https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/>`__ in the Kubernetes documentation.

     

  ::

    
    import boto3
    
    client = boto3.client('appmesh')

  
  These are the available methods:
  
  *   :py:meth:`~AppMesh.Client.can_paginate`

  
  *   :py:meth:`~AppMesh.Client.create_gateway_route`

  
  *   :py:meth:`~AppMesh.Client.create_mesh`

  
  *   :py:meth:`~AppMesh.Client.create_route`

  
  *   :py:meth:`~AppMesh.Client.create_virtual_gateway`

  
  *   :py:meth:`~AppMesh.Client.create_virtual_node`

  
  *   :py:meth:`~AppMesh.Client.create_virtual_router`

  
  *   :py:meth:`~AppMesh.Client.create_virtual_service`

  
  *   :py:meth:`~AppMesh.Client.delete_gateway_route`

  
  *   :py:meth:`~AppMesh.Client.delete_mesh`

  
  *   :py:meth:`~AppMesh.Client.delete_route`

  
  *   :py:meth:`~AppMesh.Client.delete_virtual_gateway`

  
  *   :py:meth:`~AppMesh.Client.delete_virtual_node`

  
  *   :py:meth:`~AppMesh.Client.delete_virtual_router`

  
  *   :py:meth:`~AppMesh.Client.delete_virtual_service`

  
  *   :py:meth:`~AppMesh.Client.describe_gateway_route`

  
  *   :py:meth:`~AppMesh.Client.describe_mesh`

  
  *   :py:meth:`~AppMesh.Client.describe_route`

  
  *   :py:meth:`~AppMesh.Client.describe_virtual_gateway`

  
  *   :py:meth:`~AppMesh.Client.describe_virtual_node`

  
  *   :py:meth:`~AppMesh.Client.describe_virtual_router`

  
  *   :py:meth:`~AppMesh.Client.describe_virtual_service`

  
  *   :py:meth:`~AppMesh.Client.generate_presigned_url`

  
  *   :py:meth:`~AppMesh.Client.get_paginator`

  
  *   :py:meth:`~AppMesh.Client.get_waiter`

  
  *   :py:meth:`~AppMesh.Client.list_gateway_routes`

  
  *   :py:meth:`~AppMesh.Client.list_meshes`

  
  *   :py:meth:`~AppMesh.Client.list_routes`

  
  *   :py:meth:`~AppMesh.Client.list_tags_for_resource`

  
  *   :py:meth:`~AppMesh.Client.list_virtual_gateways`

  
  *   :py:meth:`~AppMesh.Client.list_virtual_nodes`

  
  *   :py:meth:`~AppMesh.Client.list_virtual_routers`

  
  *   :py:meth:`~AppMesh.Client.list_virtual_services`

  
  *   :py:meth:`~AppMesh.Client.tag_resource`

  
  *   :py:meth:`~AppMesh.Client.untag_resource`

  
  *   :py:meth:`~AppMesh.Client.update_gateway_route`

  
  *   :py:meth:`~AppMesh.Client.update_mesh`

  
  *   :py:meth:`~AppMesh.Client.update_route`

  
  *   :py:meth:`~AppMesh.Client.update_virtual_gateway`

  
  *   :py:meth:`~AppMesh.Client.update_virtual_node`

  
  *   :py:meth:`~AppMesh.Client.update_virtual_router`

  
  *   :py:meth:`~AppMesh.Client.update_virtual_service`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_gateway_route(**kwargs)

    

    Creates a gateway route.

     

    A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.

     

    For more information about gateway routes, see `Gateway routes <https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/CreateGatewayRoute>`_    


    **Request Syntax** 
    ::

      response = client.create_gateway_route(
          clientToken='string',
          gatewayRouteName='string',
          meshName='string',
          meshOwner='string',
          spec={
              'grpcRoute': {
                  'action': {
                      'rewrite': {
                          'hostname': {
                              'defaultTargetHostname': 'ENABLED'|'DISABLED'
                          }
                      },
                      'target': {
                          'virtualService': {
                              'virtualServiceName': 'string'
                          }
                      }
                  },
                  'match': {
                      'hostname': {
                          'exact': 'string',
                          'suffix': 'string'
                      },
                      'metadata': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'serviceName': 'string'
                  }
              },
              'http2Route': {
                  'action': {
                      'rewrite': {
                          'hostname': {
                              'defaultTargetHostname': 'ENABLED'|'DISABLED'
                          },
                          'path': {
                              'exact': 'string'
                          },
                          'prefix': {
                              'defaultPrefix': 'ENABLED'|'DISABLED',
                              'value': 'string'
                          }
                      },
                      'target': {
                          'virtualService': {
                              'virtualServiceName': 'string'
                          }
                      }
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'hostname': {
                          'exact': 'string',
                          'suffix': 'string'
                      },
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ]
                  }
              },
              'httpRoute': {
                  'action': {
                      'rewrite': {
                          'hostname': {
                              'defaultTargetHostname': 'ENABLED'|'DISABLED'
                          },
                          'path': {
                              'exact': 'string'
                          },
                          'prefix': {
                              'defaultPrefix': 'ENABLED'|'DISABLED',
                              'value': 'string'
                          }
                      },
                      'target': {
                          'virtualService': {
                              'virtualServiceName': 'string'
                          }
                      }
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'hostname': {
                          'exact': 'string',
                          'suffix': 'string'
                      },
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ]
                  }
              },
              'priority': 123
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          virtualGatewayName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type gatewayRouteName: string
    :param gatewayRouteName: **[REQUIRED]** 

      The name to use for the gateway route.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to create the gateway route in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The gateway route specification to apply.

      

    
      - **grpcRoute** *(dict) --* 

        An object that represents the specification of a gRPC gateway route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **rewrite** *(dict) --* 

            The gateway route action to rewrite.

            

          
            - **hostname** *(dict) --* 

              The host name of the gateway route to rewrite.

              

            
              - **defaultTargetHostname** *(string) --* 

                The default target host name to write to.

                

              
            
          
          - **target** *(dict) --* **[REQUIRED]** 

            An object that represents the target that traffic is routed to when a request matches the gateway route.

            

          
            - **virtualService** *(dict) --* **[REQUIRED]** 

              An object that represents a virtual service gateway route target.

              

            
              - **virtualServiceName** *(string) --* **[REQUIRED]** 

                The name of the virtual service that traffic is routed to.

                

              
            
          
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **hostname** *(dict) --* 

            The gateway route host name to be matched on.

            

          
            - **exact** *(string) --* 

              The exact host name to match on.

              

            
            - **suffix** *(string) --* 

              The specified ending characters of the host name to match on.

              

            
          
          - **metadata** *(list) --* 

            The gateway route metadata to be matched on.

            

          
            - *(dict) --* 

              An object representing the metadata of the gateway route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                The criteria for determining a metadata match.

                

              
                - **exact** *(string) --* 

                  The exact method header to be matched on.

                  

                
                - **prefix** *(string) --* 

                  The specified beginning characters of the method header to be matched on.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The regex used to match the method header.

                  

                
                - **suffix** *(string) --* 

                  The specified ending characters of the method header to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the gateway route metadata.

                

              
            
        
          - **serviceName** *(string) --* 

            The fully qualified domain name for the service to match from the request.

            

          
        
      
      - **http2Route** *(dict) --* 

        An object that represents the specification of an HTTP/2 gateway route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **rewrite** *(dict) --* 

            The gateway route action to rewrite.

            

          
            - **hostname** *(dict) --* 

              The host name to rewrite.

              

            
              - **defaultTargetHostname** *(string) --* 

                The default target host name to write to.

                

              
            
            - **path** *(dict) --* 

              The path to rewrite.

              

            
              - **exact** *(string) --* 

                The exact path to rewrite.

                

              
            
            - **prefix** *(dict) --* 

              The specified beginning characters to rewrite.

              

            
              - **defaultPrefix** *(string) --* 

                The default prefix used to replace the incoming route prefix when rewritten.

                

              
              - **value** *(string) --* 

                The value used to replace the incoming route prefix when rewritten.

                

              
            
          
          - **target** *(dict) --* **[REQUIRED]** 

            An object that represents the target that traffic is routed to when a request matches the gateway route.

            

          
            - **virtualService** *(dict) --* **[REQUIRED]** 

              An object that represents a virtual service gateway route target.

              

            
              - **virtualServiceName** *(string) --* **[REQUIRED]** 

                The name of the virtual service that traffic is routed to.

                

              
            
          
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the gateway route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the gateway route that will be matched on.

                

              
            
        
          - **hostname** *(dict) --* 

            The host name to match on.

            

          
            - **exact** *(string) --* 

              The exact host name to match on.

              

            
            - **suffix** *(string) --* 

              The specified ending characters of the host name to match on.

              

            
          
          - **method** *(string) --* 

            The method to match on.

            

          
          - **path** *(dict) --* 

            The path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The query parameter to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
        
      
      - **httpRoute** *(dict) --* 

        An object that represents the specification of an HTTP gateway route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **rewrite** *(dict) --* 

            The gateway route action to rewrite.

            

          
            - **hostname** *(dict) --* 

              The host name to rewrite.

              

            
              - **defaultTargetHostname** *(string) --* 

                The default target host name to write to.

                

              
            
            - **path** *(dict) --* 

              The path to rewrite.

              

            
              - **exact** *(string) --* 

                The exact path to rewrite.

                

              
            
            - **prefix** *(dict) --* 

              The specified beginning characters to rewrite.

              

            
              - **defaultPrefix** *(string) --* 

                The default prefix used to replace the incoming route prefix when rewritten.

                

              
              - **value** *(string) --* 

                The value used to replace the incoming route prefix when rewritten.

                

              
            
          
          - **target** *(dict) --* **[REQUIRED]** 

            An object that represents the target that traffic is routed to when a request matches the gateway route.

            

          
            - **virtualService** *(dict) --* **[REQUIRED]** 

              An object that represents a virtual service gateway route target.

              

            
              - **virtualServiceName** *(string) --* **[REQUIRED]** 

                The name of the virtual service that traffic is routed to.

                

              
            
          
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the gateway route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the gateway route that will be matched on.

                

              
            
        
          - **hostname** *(dict) --* 

            The host name to match on.

            

          
            - **exact** *(string) --* 

              The exact host name to match on.

              

            
            - **suffix** *(string) --* 

              The specified ending characters of the host name to match on.

              

            
          
          - **method** *(string) --* 

            The method to match on.

            

          
          - **path** *(dict) --* 

            The path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The query parameter to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
        
      
      - **priority** *(integer) --* 

        The ordering of the gateway routes spec.

        

      
    
    :type tags: list
    :param tags: 

      Optional metadata that you can apply to the gateway route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayRoute': {
                'gatewayRouteName': 'string',
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'serviceName': 'string'
                        }
                    },
                    'http2Route': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'priority': 123
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayRoute** *(dict) --* 

          The full description of your gateway route following the create call.

          
          

          - **gatewayRouteName** *(string) --* 

            The name of the gateway route.

            
          

          - **meshName** *(string) --* 

            The name of the service mesh that the resource resides in. 

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the gateway route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name of the gateway route to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **hostname** *(dict) --* 

                  The gateway route host name to be matched on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **metadata** *(list) --* 

                  The gateway route metadata to be matched on.

                  
                  

                  - *(dict) --* 

                    An object representing the metadata of the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The criteria for determining a metadata match.

                      
                      

                      - **exact** *(string) --* 

                        The exact method header to be matched on.

                        
                      

                      - **prefix** *(string) --* 

                        The specified beginning characters of the method header to be matched on.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The regex used to match the method header.

                        
                      

                      - **suffix** *(string) --* 

                        The specified ending characters of the method header to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the gateway route metadata.

                      
                
              
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **priority** *(integer) --* 

              The ordering of the gateway routes spec.

              
        
          

          - **status** *(dict) --* 

            The status of the gateway route.

            
            

            - **status** *(string) --* 

              The current status for the gateway route.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The virtual gateway that the gateway route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_mesh(**kwargs)

    

    Creates a service mesh.

     

    A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.

     

    For more information about service meshes, see `Service meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/CreateMesh>`_    


    **Request Syntax** 
    ::

      response = client.create_mesh(
          clientToken='string',
          meshName='string',
          spec={
              'egressFilter': {
                  'type': 'ALLOW_ALL'|'DROP_ALL'
              }
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name to use for the service mesh.

      

    
    :type spec: dict
    :param spec: 

      The service mesh specification to apply.

      

    
      - **egressFilter** *(dict) --* 

        The egress filter rules for the service mesh.

        

      
        - **type** *(string) --* **[REQUIRED]** 

          The egress filter type. By default, the type is ``DROP_ALL`` , which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to ``*.amazonaws.com`` for Amazon Web Services API calls). You can set the egress filter type to ``ALLOW_ALL`` to allow egress to any endpoint inside or outside of the service mesh.

          

        
      
    
    :type tags: list
    :param tags: 

      Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'mesh': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'egressFilter': {
                        'type': 'ALLOW_ALL'|'DROP_ALL'
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **mesh** *(dict) --* 

          The full description of your service mesh following the create call.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the service mesh.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The associated specification for the service mesh.

            
            

            - **egressFilter** *(dict) --* 

              The egress filter rules for the service mesh.

              
              

              - **type** *(string) --* 

                The egress filter type. By default, the type is ``DROP_ALL`` , which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to ``*.amazonaws.com`` for Amazon Web Services API calls). You can set the egress filter type to ``ALLOW_ALL`` to allow egress to any endpoint inside or outside of the service mesh.

                
          
        
          

          - **status** *(dict) --* 

            The status of the service mesh.

            
            

            - **status** *(string) --* 

              The current mesh status.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_route(**kwargs)

    

    Creates a route that is associated with a virtual router.

     

    You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.

     

    For more information about routes, see `Routes <https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/CreateRoute>`_    


    **Request Syntax** 
    ::

      response = client.create_route(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          routeName='string',
          spec={
              'grpcRoute': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'match': {
                      'metadata': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'methodName': 'string',
                      'serviceName': 'string'
                  },
                  'retryPolicy': {
                      'grpcRetryEvents': [
                          'cancelled'|'deadline-exceeded'|'internal'|'resource-exhausted'|'unavailable',
                      ],
                      'httpRetryEvents': [
                          'string',
                      ],
                      'maxRetries': 123,
                      'perRetryTimeout': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'tcpRetryEvents': [
                          'connection-error',
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'perRequest': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              },
              'http2Route': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'scheme': 'http'|'https'
                  },
                  'retryPolicy': {
                      'httpRetryEvents': [
                          'string',
                      ],
                      'maxRetries': 123,
                      'perRetryTimeout': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'tcpRetryEvents': [
                          'connection-error',
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'perRequest': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              },
              'httpRoute': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'scheme': 'http'|'https'
                  },
                  'retryPolicy': {
                      'httpRetryEvents': [
                          'string',
                      ],
                      'maxRetries': 123,
                      'perRetryTimeout': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'tcpRetryEvents': [
                          'connection-error',
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'perRequest': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              },
              'priority': 123,
              'tcpRoute': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              }
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          virtualRouterName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to create the route in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type routeName: string
    :param routeName: **[REQUIRED]** 

      The name to use for the route.

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The route specification to apply.

      

    
      - **grpcRoute** *(dict) --* 

        An object that represents the specification of a gRPC route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **metadata** *(list) --* 

            An object that represents the data to match from the request.

            

          
            - *(dict) --* 

              An object that represents the match metadata for the route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                An object that represents the data to match from the request.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                The name of the route.

                

              
            
        
          - **methodName** *(string) --* 

            The method name to match from the request. If you specify a name, you must also specify a ``serviceName`` .

            

          
          - **serviceName** *(string) --* 

            The fully qualified domain name for the service to match from the request.

            

          
        
        - **retryPolicy** *(dict) --* 

          An object that represents a retry policy.

          

        
          - **grpcRetryEvents** *(list) --* 

            Specify at least one of the valid values.

            

          
            - *(string) --* 

            
        
          - **httpRetryEvents** *(list) --* 

            Specify at least one of the following values.

             

             
            * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
             
            * **gateway-error** – HTTP status codes 502, 503, and 504 
             
            * **client-error** – HTTP status code 409 
             
            * **stream-error** – Retry on refused stream 
             

            

          
            - *(string) --* 

            
        
          - **maxRetries** *(integer) --* **[REQUIRED]** 

            The maximum number of retry attempts.

            

          
          - **perRetryTimeout** *(dict) --* **[REQUIRED]** 

            The timeout for each retry attempt.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **tcpRetryEvents** *(list) --* 

            Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

            

          
            - *(string) --* 

            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **perRequest** *(dict) --* 

            An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
      - **http2Route** *(dict) --* 

        An object that represents the specification of an HTTP/2 route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the request.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                The ``HeaderMatchMethod`` object.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the client request that will be matched on.

                

              
            
        
          - **method** *(string) --* 

            The client request method to match on. Specify only one.

            

          
          - **path** *(dict) --* 

            The client request path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The client request query parameters to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
          - **scheme** *(string) --* 

            The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

            

          
        
        - **retryPolicy** *(dict) --* 

          An object that represents a retry policy.

          

        
          - **httpRetryEvents** *(list) --* 

            Specify at least one of the following values.

             

             
            * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
             
            * **gateway-error** – HTTP status codes 502, 503, and 504 
             
            * **client-error** – HTTP status code 409 
             
            * **stream-error** – Retry on refused stream 
             

            

          
            - *(string) --* 

            
        
          - **maxRetries** *(integer) --* **[REQUIRED]** 

            The maximum number of retry attempts.

            

          
          - **perRetryTimeout** *(dict) --* **[REQUIRED]** 

            The timeout for each retry attempt.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **tcpRetryEvents** *(list) --* 

            Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

            

          
            - *(string) --* 

            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **perRequest** *(dict) --* 

            An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
      - **httpRoute** *(dict) --* 

        An object that represents the specification of an HTTP route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the request.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                The ``HeaderMatchMethod`` object.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the client request that will be matched on.

                

              
            
        
          - **method** *(string) --* 

            The client request method to match on. Specify only one.

            

          
          - **path** *(dict) --* 

            The client request path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The client request query parameters to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
          - **scheme** *(string) --* 

            The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

            

          
        
        - **retryPolicy** *(dict) --* 

          An object that represents a retry policy.

          

        
          - **httpRetryEvents** *(list) --* 

            Specify at least one of the following values.

             

             
            * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
             
            * **gateway-error** – HTTP status codes 502, 503, and 504 
             
            * **client-error** – HTTP status code 409 
             
            * **stream-error** – Retry on refused stream 
             

            

          
            - *(string) --* 

            
        
          - **maxRetries** *(integer) --* **[REQUIRED]** 

            The maximum number of retry attempts.

            

          
          - **perRetryTimeout** *(dict) --* **[REQUIRED]** 

            The timeout for each retry attempt.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **tcpRetryEvents** *(list) --* 

            Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

            

          
            - *(string) --* 

            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **perRequest** *(dict) --* 

            An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
      - **priority** *(integer) --* 

        The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.

        

      
      - **tcpRoute** *(dict) --* 

        An object that represents the specification of a TCP route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          The action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
    
    :type tags: list
    :param tags: 

      Optional metadata that you can apply to the route to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'route': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'routeName': 'string',
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'methodName': 'string',
                            'serviceName': 'string'
                        },
                        'retryPolicy': {
                            'grpcRetryEvents': [
                                'cancelled'|'deadline-exceeded'|'internal'|'resource-exhausted'|'unavailable',
                            ],
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'http2Route': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'priority': 123,
                    'tcpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **route** *(dict) --* 

          The full description of your mesh following the create call.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the route resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the route.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **routeName** *(string) --* 

            The name of the route.

            
          

          - **spec** *(dict) --* 

            The specifications of the route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **metadata** *(list) --* 

                  An object that represents the data to match from the request.

                  
                  

                  - *(dict) --* 

                    An object that represents the match metadata for the route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the data to match from the request.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      The name of the route.

                      
                
              
                

                - **methodName** *(string) --* 

                  The method name to match from the request. If you specify a name, you must also specify a ``serviceName`` .

                  
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **grpcRetryEvents** *(list) --* 

                  Specify at least one of the valid values.

                  
                  

                  - *(string) --* 
              
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **priority** *(integer) --* 

              The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.

              
            

            - **tcpRoute** *(dict) --* 

              An object that represents the specification of a TCP route.

              
              

              - **action** *(dict) --* 

                The action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The status of the route.

            
            

            - **status** *(string) --* 

              The current status for the route.

              
        
          

          - **virtualRouterName** *(string) --* 

            The virtual router that the route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_virtual_gateway(**kwargs)

    

    Creates a virtual gateway.

     

    A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.

     

    For more information about virtual gateways, see `Virtual gateways <https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/CreateVirtualGateway>`_    


    **Request Syntax** 
    ::

      response = client.create_virtual_gateway(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'backendDefaults': {
                  'clientPolicy': {
                      'tls': {
                          'certificate': {
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'enforce': True|False,
                          'ports': [
                              123,
                          ],
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'acm': {
                                      'certificateAuthorityArns': [
                                          'string',
                                      ]
                                  },
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  }
              },
              'listeners': [
                  {
                      'connectionPool': {
                          'grpc': {
                              'maxRequests': 123
                          },
                          'http': {
                              'maxConnections': 123,
                              'maxPendingRequests': 123
                          },
                          'http2': {
                              'maxRequests': 123
                          }
                      },
                      'healthCheck': {
                          'healthyThreshold': 123,
                          'intervalMillis': 123,
                          'path': 'string',
                          'port': 123,
                          'protocol': 'http'|'http2'|'grpc',
                          'timeoutMillis': 123,
                          'unhealthyThreshold': 123
                      },
                      'portMapping': {
                          'port': 123,
                          'protocol': 'http'|'http2'|'grpc'
                      },
                      'tls': {
                          'certificate': {
                              'acm': {
                                  'certificateArn': 'string'
                              },
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  },
              ],
              'logging': {
                  'accessLog': {
                      'file': {
                          'path': 'string'
                      }
                  }
              }
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          virtualGatewayName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to create the virtual gateway in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The virtual gateway specification to apply.

      

    
      - **backendDefaults** *(dict) --* 

        A reference to an object that represents the defaults for backends.

        

      
        - **clientPolicy** *(dict) --* 

          A reference to an object that represents a client policy.

          

        
          - **tls** *(dict) --* 

            A reference to an object that represents a Transport Layer Security (TLS) client policy.

            

          
            - **certificate** *(dict) --* 

              A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.

              

            
              - **file** *(dict) --* 

                An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **enforce** *(boolean) --* 

              Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

              

            
            - **ports** *(list) --* 

              One or more ports that the policy is enforced for.

              

            
              - *(integer) --* 

              
          
            - **validation** *(dict) --* **[REQUIRED]** 

              A reference to an object that represents a Transport Layer Security (TLS) validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **acm** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                  

                
                  - **certificateAuthorityArns** *(list) --* **[REQUIRED]** 

                    One or more ACM Amazon Resource Name (ARN)s.

                    

                  
                    - *(string) --* 

                    
                
                
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
      
      - **listeners** *(list) --* **[REQUIRED]** 

        The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.

        

      
        - *(dict) --* 

          An object that represents a listener for a virtual gateway.

          

        
          - **connectionPool** *(dict) --* 

            The connection pool information for the virtual gateway listener.

            

          
            - **grpc** *(dict) --* 

              An object that represents a type of connection pool. 

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
            - **http** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxConnections** *(integer) --* **[REQUIRED]** 

                Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                

              
              - **maxPendingRequests** *(integer) --* 

                Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                

              
            
            - **http2** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
          
          - **healthCheck** *(dict) --* 

            The health check information for the listener.

            

          
            - **healthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive successful health checks that must occur before declaring the listener healthy.

              

            
            - **intervalMillis** *(integer) --* **[REQUIRED]** 

              The time period in milliseconds between each health check execution.

              

            
            - **path** *(string) --* 

              The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

              

            
            - **port** *(integer) --* 

              The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

              

            
            - **timeoutMillis** *(integer) --* **[REQUIRED]** 

              The amount of time to wait when receiving a response from the health check, in milliseconds.

              

            
            - **unhealthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.

              

            
          
          - **portMapping** *(dict) --* **[REQUIRED]** 

            The port mapping information for the listener.

            

          
            - **port** *(integer) --* **[REQUIRED]** 

              The port used for the port mapping. Specify one protocol.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol used for the port mapping.

              

            
          
          - **tls** *(dict) --* 

            A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.

            

          
            - **certificate** *(dict) --* **[REQUIRED]** 

              An object that represents a Transport Layer Security (TLS) certificate.

              

            
              - **acm** *(dict) --* 

                A reference to an object that represents an Certificate Manager certificate.

                

              
                - **certificateArn** *(string) --* **[REQUIRED]** 

                  The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                  

                
              
              - **file** *(dict) --* 

                A reference to an object that represents a local file certificate.

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **mode** *(string) --* **[REQUIRED]** 

              Specify one of the following modes.

               

               
              * STRICT – Listener only accepts connections with TLS enabled.  
               
              * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
               
              * DISABLED – Listener only accepts connections without TLS.  
               

              

            
            - **validation** *(dict) --* 

              A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
    
      - **logging** *(dict) --* 

        An object that represents logging information.

        

      
        - **accessLog** *(dict) --* 

          The access log configuration.

          

        
          - **file** *(dict) --* 

            The file object to send virtual gateway access logs to.

            

          
            - **path** *(string) --* **[REQUIRED]** 

              The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

              

            
          
        
      
    
    :type tags: list
    :param tags: 

      Optional metadata that you can apply to the virtual gateway to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name to use for the virtual gateway.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualGateway': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc'
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualGateway** *(dict) --* 

          The full description of your virtual gateway following the create call.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual gateway resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual gateway.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **listeners** *(list) --* 

              The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual gateway.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the virtual gateway listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool. 

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring the listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping. Specify one protocol.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping.

                    
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.

                  
                  

                  - **certificate** *(dict) --* 

                    An object that represents a Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an Certificate Manager certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              An object that represents logging information.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual gateway access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual gateway.

            
            

            - **status** *(string) --* 

              The current status.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The name of the virtual gateway.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_virtual_node(**kwargs)

    

    Creates a virtual node within a service mesh.

     

    A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).

     

    You define a ``listener`` for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a ``backend`` .

     

    The response metadata for your new virtual node contains the ``arn`` that is associated with the virtual node. Set this value to the full ARN; for example, ``arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp`` ) as the ``APPMESH_RESOURCE_ARN`` environment variable for your task group's Envoy proxy container in your task definition or pod spec. This is then mapped to the ``node.id`` and ``node.cluster`` Envoy parameters.

     

    .. note::

       

      By default, App Mesh uses the name of the resource you specified in ``APPMESH_RESOURCE_ARN`` when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the ``APPMESH_RESOURCE_CLUSTER`` environment variable with your own name.

       

     

    For more information about virtual nodes, see `Virtual nodes <https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html>`__ . You must be using ``1.15.0`` or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see `Envoy image <https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html>`__ in the AWS App Mesh User Guide.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/CreateVirtualNode>`_    


    **Request Syntax** 
    ::

      response = client.create_virtual_node(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'backendDefaults': {
                  'clientPolicy': {
                      'tls': {
                          'certificate': {
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'enforce': True|False,
                          'ports': [
                              123,
                          ],
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'acm': {
                                      'certificateAuthorityArns': [
                                          'string',
                                      ]
                                  },
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  }
              },
              'backends': [
                  {
                      'virtualService': {
                          'clientPolicy': {
                              'tls': {
                                  'certificate': {
                                      'file': {
                                          'certificateChain': 'string',
                                          'privateKey': 'string'
                                      },
                                      'sds': {
                                          'secretName': 'string'
                                      }
                                  },
                                  'enforce': True|False,
                                  'ports': [
                                      123,
                                  ],
                                  'validation': {
                                      'subjectAlternativeNames': {
                                          'match': {
                                              'exact': [
                                                  'string',
                                              ]
                                          }
                                      },
                                      'trust': {
                                          'acm': {
                                              'certificateAuthorityArns': [
                                                  'string',
                                              ]
                                          },
                                          'file': {
                                              'certificateChain': 'string'
                                          },
                                          'sds': {
                                              'secretName': 'string'
                                          }
                                      }
                                  }
                              }
                          },
                          'virtualServiceName': 'string'
                      }
                  },
              ],
              'listeners': [
                  {
                      'connectionPool': {
                          'grpc': {
                              'maxRequests': 123
                          },
                          'http': {
                              'maxConnections': 123,
                              'maxPendingRequests': 123
                          },
                          'http2': {
                              'maxRequests': 123
                          },
                          'tcp': {
                              'maxConnections': 123
                          }
                      },
                      'healthCheck': {
                          'healthyThreshold': 123,
                          'intervalMillis': 123,
                          'path': 'string',
                          'port': 123,
                          'protocol': 'http'|'tcp'|'http2'|'grpc',
                          'timeoutMillis': 123,
                          'unhealthyThreshold': 123
                      },
                      'outlierDetection': {
                          'baseEjectionDuration': {
                              'unit': 's'|'ms',
                              'value': 123
                          },
                          'interval': {
                              'unit': 's'|'ms',
                              'value': 123
                          },
                          'maxEjectionPercent': 123,
                          'maxServerErrors': 123
                      },
                      'portMapping': {
                          'port': 123,
                          'protocol': 'http'|'tcp'|'http2'|'grpc'
                      },
                      'timeout': {
                          'grpc': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              },
                              'perRequest': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          },
                          'http': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              },
                              'perRequest': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          },
                          'http2': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              },
                              'perRequest': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          },
                          'tcp': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          }
                      },
                      'tls': {
                          'certificate': {
                              'acm': {
                                  'certificateArn': 'string'
                              },
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  },
              ],
              'logging': {
                  'accessLog': {
                      'file': {
                          'path': 'string'
                      }
                  }
              },
              'serviceDiscovery': {
                  'awsCloudMap': {
                      'attributes': [
                          {
                              'key': 'string',
                              'value': 'string'
                          },
                      ],
                      'namespaceName': 'string',
                      'serviceName': 'string'
                  },
                  'dns': {
                      'hostname': 'string',
                      'responseType': 'LOADBALANCER'|'ENDPOINTS'
                  }
              }
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          virtualNodeName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to create the virtual node in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The virtual node specification to apply.

      

    
      - **backendDefaults** *(dict) --* 

        A reference to an object that represents the defaults for backends.

        

      
        - **clientPolicy** *(dict) --* 

          A reference to an object that represents a client policy.

          

        
          - **tls** *(dict) --* 

            A reference to an object that represents a Transport Layer Security (TLS) client policy.

            

          
            - **certificate** *(dict) --* 

              A reference to an object that represents a client's TLS certificate.

              

            
              - **file** *(dict) --* 

                An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **enforce** *(boolean) --* 

              Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

              

            
            - **ports** *(list) --* 

              One or more ports that the policy is enforced for.

              

            
              - *(integer) --* 

              
          
            - **validation** *(dict) --* **[REQUIRED]** 

              A reference to an object that represents a TLS validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **acm** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                  

                
                  - **certificateAuthorityArns** *(list) --* **[REQUIRED]** 

                    One or more ACM Amazon Resource Name (ARN)s.

                    

                  
                    - *(string) --* 

                    
                
                
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
      
      - **backends** *(list) --* 

        The backends that the virtual node is expected to send outbound traffic to.

        

      
        - *(dict) --* 

          An object that represents the backends that a virtual node is expected to send outbound traffic to.

          

        
          - **virtualService** *(dict) --* 

            Specifies a virtual service to use as a backend. 

            

          
            - **clientPolicy** *(dict) --* 

              A reference to an object that represents the client policy for a backend.

              

            
              - **tls** *(dict) --* 

                A reference to an object that represents a Transport Layer Security (TLS) client policy.

                

              
                - **certificate** *(dict) --* 

                  A reference to an object that represents a client's TLS certificate.

                  

                
                  - **file** *(dict) --* 

                    An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                    

                  
                    - **certificateChain** *(string) --* **[REQUIRED]** 

                      The certificate chain for the certificate.

                      

                    
                    - **privateKey** *(string) --* **[REQUIRED]** 

                      The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                      

                    
                  
                  - **sds** *(dict) --* 

                    A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                    

                  
                    - **secretName** *(string) --* **[REQUIRED]** 

                      A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                      

                    
                  
                
                - **enforce** *(boolean) --* 

                  Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                  

                
                - **ports** *(list) --* 

                  One or more ports that the policy is enforced for.

                  

                
                  - *(integer) --* 

                  
              
                - **validation** *(dict) --* **[REQUIRED]** 

                  A reference to an object that represents a TLS validation context.

                  

                
                  - **subjectAlternativeNames** *(dict) --* 

                    A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                    

                  
                    - **match** *(dict) --* **[REQUIRED]** 

                      An object that represents the criteria for determining a SANs match.

                      

                    
                      - **exact** *(list) --* **[REQUIRED]** 

                        The values sent must match the specified values exactly.

                        

                      
                        - *(string) --* 

                        
                    
                    
                  
                  - **trust** *(dict) --* **[REQUIRED]** 

                    A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                    

                  
                    - **acm** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                      

                    
                      - **certificateAuthorityArns** *(list) --* **[REQUIRED]** 

                        One or more ACM Amazon Resource Name (ARN)s.

                        

                      
                        - *(string) --* 

                        
                    
                    
                    - **file** *(dict) --* 

                      An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                      

                    
                      - **certificateChain** *(string) --* **[REQUIRED]** 

                        The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                        

                      
                    
                    - **sds** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                      

                    
                      - **secretName** *(string) --* **[REQUIRED]** 

                        A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        

                      
                    
                  
                
              
            
            - **virtualServiceName** *(string) --* **[REQUIRED]** 

              The name of the virtual service that is acting as a virtual node backend.

              

            
          
        
    
      - **listeners** *(list) --* 

        The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.

        

      
        - *(dict) --* 

          An object that represents a listener for a virtual node.

          

        
          - **connectionPool** *(dict) --* 

            The connection pool information for the listener.

            

          
            - **grpc** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
            - **http** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxConnections** *(integer) --* **[REQUIRED]** 

                Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                

              
              - **maxPendingRequests** *(integer) --* 

                Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                

              
            
            - **http2** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
            - **tcp** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxConnections** *(integer) --* **[REQUIRED]** 

                Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                

              
            
          
          - **healthCheck** *(dict) --* 

            The health check information for the listener.

            

          
            - **healthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive successful health checks that must occur before declaring listener healthy.

              

            
            - **intervalMillis** *(integer) --* **[REQUIRED]** 

              The time period in milliseconds between each health check execution.

              

            
            - **path** *(string) --* 

              The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

              

            
            - **port** *(integer) --* 

              The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

              

            
            - **timeoutMillis** *(integer) --* **[REQUIRED]** 

              The amount of time to wait when receiving a response from the health check, in milliseconds.

              

            
            - **unhealthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. 

              

            
          
          - **outlierDetection** *(dict) --* 

            The outlier detection information for the listener.

            

          
            - **baseEjectionDuration** *(dict) --* **[REQUIRED]** 

              The base amount of time for which a host is ejected.

              

            
              - **unit** *(string) --* 

                A unit of time.

                

              
              - **value** *(integer) --* 

                A number of time units.

                

              
            
            - **interval** *(dict) --* **[REQUIRED]** 

              The time interval between ejection sweep analysis.

              

            
              - **unit** *(string) --* 

                A unit of time.

                

              
              - **value** *(integer) --* 

                A number of time units.

                

              
            
            - **maxEjectionPercent** *(integer) --* **[REQUIRED]** 

              Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.

              

            
            - **maxServerErrors** *(integer) --* **[REQUIRED]** 

              Number of consecutive ``5xx`` errors required for ejection. 

              

            
          
          - **portMapping** *(dict) --* **[REQUIRED]** 

            The port mapping information for the listener.

            

          
            - **port** *(integer) --* **[REQUIRED]** 

              The port used for the port mapping.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol used for the port mapping. Specify one protocol.

              

            
          
          - **timeout** *(dict) --* 

            An object that represents timeouts for different protocols.

            

          
            - **grpc** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
              - **perRequest** *(dict) --* 

                An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
            - **http** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
              - **perRequest** *(dict) --* 

                An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
            - **http2** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
              - **perRequest** *(dict) --* 

                An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
            - **tcp** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
          
          - **tls** *(dict) --* 

            A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.

            

          
            - **certificate** *(dict) --* **[REQUIRED]** 

              A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.

              

            
              - **acm** *(dict) --* 

                A reference to an object that represents an AWS Certicate Manager (ACM) certificate.

                

              
                - **certificateArn** *(string) --* **[REQUIRED]** 

                  The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                  

                
              
              - **file** *(dict) --* 

                A reference to an object that represents a local file certificate.

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a listener's Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **mode** *(string) --* **[REQUIRED]** 

              Specify one of the following modes.

               

               
              * STRICT – Listener only accepts connections with TLS enabled.  
               
              * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
               
              * DISABLED – Listener only accepts connections without TLS.  
               

              

            
            - **validation** *(dict) --* 

              A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
    
      - **logging** *(dict) --* 

        The inbound and outbound access logging information for the virtual node.

        

      
        - **accessLog** *(dict) --* 

          The access log configuration for a virtual node.

          

        
          - **file** *(dict) --* 

            The file object to send virtual node access logs to.

            

          
            - **path** *(string) --* **[REQUIRED]** 

              The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

               

              .. note::

                 

                The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.

                 

              

            
          
        
      
      - **serviceDiscovery** *(dict) --* 

        The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a ``listener`` , then you must specify service discovery information.

        

      
        - **awsCloudMap** *(dict) --* 

          Specifies any Cloud Map information for the virtual node.

          

        
          - **attributes** *(list) --* 

            A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.

            

          
            - *(dict) --* 

              An object that represents the Cloud Map attribute information for your virtual node.

               

              .. note::

                 

                AWS Cloud Map is not available in the eu-south-1 Region.

                 

              

            
              - **key** *(string) --* **[REQUIRED]** 

                The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                

              
              - **value** *(string) --* **[REQUIRED]** 

                The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                

              
            
        
          - **namespaceName** *(string) --* **[REQUIRED]** 

            The name of the Cloud Map namespace to use.

            

          
          - **serviceName** *(string) --* **[REQUIRED]** 

            The name of the Cloud Map service to use.

            

          
        
        - **dns** *(dict) --* 

          Specifies the DNS information for the virtual node.

          

        
          - **hostname** *(string) --* **[REQUIRED]** 

            Specifies the DNS service discovery hostname for the virtual node. 

            

          
          - **responseType** *(string) --* 

            Specifies the DNS response type for the virtual node.

            

          
        
      
    
    :type tags: list
    :param tags: 

      Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    :type virtualNodeName: string
    :param virtualNodeName: **[REQUIRED]** 

      The name to use for the virtual node.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualNode': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'backends': [
                        {
                            'virtualService': {
                                'clientPolicy': {
                                    'tls': {
                                        'certificate': {
                                            'file': {
                                                'certificateChain': 'string',
                                                'privateKey': 'string'
                                            },
                                            'sds': {
                                                'secretName': 'string'
                                            }
                                        },
                                        'enforce': True|False,
                                        'ports': [
                                            123,
                                        ],
                                        'validation': {
                                            'subjectAlternativeNames': {
                                                'match': {
                                                    'exact': [
                                                        'string',
                                                    ]
                                                }
                                            },
                                            'trust': {
                                                'acm': {
                                                    'certificateAuthorityArns': [
                                                        'string',
                                                    ]
                                                },
                                                'file': {
                                                    'certificateChain': 'string'
                                                },
                                                'sds': {
                                                    'secretName': 'string'
                                                }
                                            }
                                        }
                                    }
                                },
                                'virtualServiceName': 'string'
                            }
                        },
                    ],
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                },
                                'tcp': {
                                    'maxConnections': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'outlierDetection': {
                                'baseEjectionDuration': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'interval': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'maxEjectionPercent': 123,
                                'maxServerErrors': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            },
                            'timeout': {
                                'grpc': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http2': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'tcp': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                }
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    },
                    'serviceDiscovery': {
                        'awsCloudMap': {
                            'attributes': [
                                {
                                    'key': 'string',
                                    'value': 'string'
                                },
                            ],
                            'namespaceName': 'string',
                            'serviceName': 'string'
                        },
                        'dns': {
                            'hostname': 'string',
                            'responseType': 'LOADBALANCER'|'ENDPOINTS'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualNodeName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualNode** *(dict) --* 

          The full description of your virtual node following the create call.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual node resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual node.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual node.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a client's TLS certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a TLS validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **backends** *(list) --* 

              The backends that the virtual node is expected to send outbound traffic to.

              
              

              - *(dict) --* 

                An object that represents the backends that a virtual node is expected to send outbound traffic to.

                
                

                - **virtualService** *(dict) --* 

                  Specifies a virtual service to use as a backend. 

                  
                  

                  - **clientPolicy** *(dict) --* 

                    A reference to an object that represents the client policy for a backend.

                    
                    

                    - **tls** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) client policy.

                      
                      

                      - **certificate** *(dict) --* 

                        A reference to an object that represents a client's TLS certificate.

                        
                        

                        - **file** *(dict) --* 

                          An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                          
                          

                          - **certificateChain** *(string) --* 

                            The certificate chain for the certificate.

                            
                          

                          - **privateKey** *(string) --* 

                            The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                            
                      
                        

                        - **sds** *(dict) --* 

                          A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                          
                          

                          - **secretName** *(string) --* 

                            A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                            
                      
                    
                      

                      - **enforce** *(boolean) --* 

                        Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                        
                      

                      - **ports** *(list) --* 

                        One or more ports that the policy is enforced for.

                        
                        

                        - *(integer) --* 
                    
                      

                      - **validation** *(dict) --* 

                        A reference to an object that represents a TLS validation context.

                        
                        

                        - **subjectAlternativeNames** *(dict) --* 

                          A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                          
                          

                          - **match** *(dict) --* 

                            An object that represents the criteria for determining a SANs match.

                            
                            

                            - **exact** *(list) --* 

                              The values sent must match the specified values exactly.

                              
                              

                              - *(string) --* 
                          
                        
                      
                        

                        - **trust** *(dict) --* 

                          A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                          
                          

                          - **acm** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                            
                            

                            - **certificateAuthorityArns** *(list) --* 

                              One or more ACM Amazon Resource Name (ARN)s.

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **file** *(dict) --* 

                            An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                            
                            

                            - **certificateChain** *(string) --* 

                              The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                              
                        
                          

                          - **sds** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                            
                            

                            - **secretName** *(string) --* 

                              A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                              
                        
                      
                    
                  
                
                  

                  - **virtualServiceName** *(string) --* 

                    The name of the virtual service that is acting as a virtual node backend.

                    
              
            
          
            

            - **listeners** *(list) --* 

              The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual node.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. 

                    
              
                

                - **outlierDetection** *(dict) --* 

                  The outlier detection information for the listener.

                  
                  

                  - **baseEjectionDuration** *(dict) --* 

                    The base amount of time for which a host is ejected.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **interval** *(dict) --* 

                    The time interval between ejection sweep analysis.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **maxEjectionPercent** *(integer) --* 

                    Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.

                    
                  

                  - **maxServerErrors** *(integer) --* 

                    Number of consecutive ``5xx`` errors required for ejection. 

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
                

                - **timeout** *(dict) --* 

                  An object that represents timeouts for different protocols.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http2** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an AWS Certicate Manager (ACM) certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              The inbound and outbound access logging information for the virtual node.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration for a virtual node.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual node access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                     

                    .. note::

                       

                      The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.

                       

                    
              
            
          
            

            - **serviceDiscovery** *(dict) --* 

              The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a ``listener`` , then you must specify service discovery information.

              
              

              - **awsCloudMap** *(dict) --* 

                Specifies any Cloud Map information for the virtual node.

                
                

                - **attributes** *(list) --* 

                  A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.

                  
                  

                  - *(dict) --* 

                    An object that represents the Cloud Map attribute information for your virtual node.

                     

                    .. note::

                       

                      AWS Cloud Map is not available in the eu-south-1 Region.

                       

                    
                    

                    - **key** *(string) --* 

                      The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                    

                    - **value** *(string) --* 

                      The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                
              
                

                - **namespaceName** *(string) --* 

                  The name of the Cloud Map namespace to use.

                  
                

                - **serviceName** *(string) --* 

                  The name of the Cloud Map service to use.

                  
            
              

              - **dns** *(dict) --* 

                Specifies the DNS information for the virtual node.

                
                

                - **hostname** *(string) --* 

                  Specifies the DNS service discovery hostname for the virtual node. 

                  
                

                - **responseType** *(string) --* 

                  Specifies the DNS response type for the virtual node.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status for the virtual node.

            
            

            - **status** *(string) --* 

              The current status of the virtual node.

              
        
          

          - **virtualNodeName** *(string) --* 

            The name of the virtual node.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_virtual_router(**kwargs)

    

    Creates a virtual router within a service mesh.

     

    Specify a ``listener`` for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.

     

    For more information about virtual routers, see `Virtual routers <https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/CreateVirtualRouter>`_    


    **Request Syntax** 
    ::

      response = client.create_virtual_router(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'listeners': [
                  {
                      'portMapping': {
                          'port': 123,
                          'protocol': 'http'|'tcp'|'http2'|'grpc'
                      }
                  },
              ]
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          virtualRouterName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to create the virtual router in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The virtual router specification to apply.

      

    
      - **listeners** *(list) --* 

        The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.

        

      
        - *(dict) --* 

          An object that represents a virtual router listener.

          

        
          - **portMapping** *(dict) --* **[REQUIRED]** 

            An object that represents a port mapping.

            

          
            - **port** *(integer) --* **[REQUIRED]** 

              The port used for the port mapping.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol used for the port mapping. Specify one protocol.

              

            
          
        
    
    
    :type tags: list
    :param tags: 

      Optional metadata that you can apply to the virtual router to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name to use for the virtual router.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualRouter': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'listeners': [
                        {
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            }
                        },
                    ]
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualRouter** *(dict) --* 

          The full description of your virtual router following the create call.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual router resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual router.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual router.

            
            

            - **listeners** *(list) --* 

              The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a virtual router listener.

                
                

                - **portMapping** *(dict) --* 

                  An object that represents a port mapping.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual router.

            
            

            - **status** *(string) --* 

              The current status of the virtual router.

              
        
          

          - **virtualRouterName** *(string) --* 

            The name of the virtual router.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_virtual_service(**kwargs)

    

    Creates a virtual service within a service mesh.

     

    A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its ``virtualServiceName`` , and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.

     

    For more information about virtual services, see `Virtual services <https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/CreateVirtualService>`_    


    **Request Syntax** 
    ::

      response = client.create_virtual_service(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'provider': {
                  'virtualNode': {
                      'virtualNodeName': 'string'
                  },
                  'virtualRouter': {
                      'virtualRouterName': 'string'
                  }
              }
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          virtualServiceName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to create the virtual service in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The virtual service specification to apply.

      

    
      - **provider** *(dict) --* 

        The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

        

      
        - **virtualNode** *(dict) --* 

          The virtual node associated with a virtual service.

          

        
          - **virtualNodeName** *(string) --* **[REQUIRED]** 

            The name of the virtual node that is acting as a service provider.

            

          
        
        - **virtualRouter** *(dict) --* 

          The virtual router associated with a virtual service.

          

        
          - **virtualRouterName** *(string) --* **[REQUIRED]** 

            The name of the virtual router that is acting as a service provider.

            

          
        
      
    
    :type tags: list
    :param tags: 

      Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    :type virtualServiceName: string
    :param virtualServiceName: **[REQUIRED]** 

      The name to use for the virtual service.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualService': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'provider': {
                        'virtualNode': {
                            'virtualNodeName': 'string'
                        },
                        'virtualRouter': {
                            'virtualRouterName': 'string'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualServiceName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualService** *(dict) --* 

          The full description of your virtual service following the create call.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual service resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual service.

            
            

            - **provider** *(dict) --* 

              The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

              
              

              - **virtualNode** *(dict) --* 

                The virtual node associated with a virtual service.

                
                

                - **virtualNodeName** *(string) --* 

                  The name of the virtual node that is acting as a service provider.

                  
            
              

              - **virtualRouter** *(dict) --* 

                The virtual router associated with a virtual service.

                
                

                - **virtualRouterName** *(string) --* 

                  The name of the virtual router that is acting as a service provider.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual service.

            
            

            - **status** *(string) --* 

              The current status of the virtual service.

              
        
          

          - **virtualServiceName** *(string) --* 

            The name of the virtual service.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: delete_gateway_route(**kwargs)

    

    Deletes an existing gateway route.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DeleteGatewayRoute>`_    


    **Request Syntax** 
    ::

      response = client.delete_gateway_route(
          gatewayRouteName='string',
          meshName='string',
          meshOwner='string',
          virtualGatewayName='string'
      )
    :type gatewayRouteName: string
    :param gatewayRouteName: **[REQUIRED]** 

      The name of the gateway route to delete.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to delete the gateway route from.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway to delete the route from.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayRoute': {
                'gatewayRouteName': 'string',
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'serviceName': 'string'
                        }
                    },
                    'http2Route': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'priority': 123
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayRoute** *(dict) --* 

          The gateway route that was deleted.

          
          

          - **gatewayRouteName** *(string) --* 

            The name of the gateway route.

            
          

          - **meshName** *(string) --* 

            The name of the service mesh that the resource resides in. 

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the gateway route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name of the gateway route to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **hostname** *(dict) --* 

                  The gateway route host name to be matched on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **metadata** *(list) --* 

                  The gateway route metadata to be matched on.

                  
                  

                  - *(dict) --* 

                    An object representing the metadata of the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The criteria for determining a metadata match.

                      
                      

                      - **exact** *(string) --* 

                        The exact method header to be matched on.

                        
                      

                      - **prefix** *(string) --* 

                        The specified beginning characters of the method header to be matched on.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The regex used to match the method header.

                        
                      

                      - **suffix** *(string) --* 

                        The specified ending characters of the method header to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the gateway route metadata.

                      
                
              
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **priority** *(integer) --* 

              The ordering of the gateway routes spec.

              
        
          

          - **status** *(dict) --* 

            The status of the gateway route.

            
            

            - **status** *(string) --* 

              The current status for the gateway route.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The virtual gateway that the gateway route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: delete_mesh(**kwargs)

    

    Deletes an existing service mesh.

     

    You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DeleteMesh>`_    


    **Request Syntax** 
    ::

      response = client.delete_mesh(
          meshName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'mesh': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'egressFilter': {
                        'type': 'ALLOW_ALL'|'DROP_ALL'
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **mesh** *(dict) --* 

          The service mesh that was deleted.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the service mesh.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The associated specification for the service mesh.

            
            

            - **egressFilter** *(dict) --* 

              The egress filter rules for the service mesh.

              
              

              - **type** *(string) --* 

                The egress filter type. By default, the type is ``DROP_ALL`` , which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to ``*.amazonaws.com`` for Amazon Web Services API calls). You can set the egress filter type to ``ALLOW_ALL`` to allow egress to any endpoint inside or outside of the service mesh.

                
          
        
          

          - **status** *(dict) --* 

            The status of the service mesh.

            
            

            - **status** *(string) --* 

              The current mesh status.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: delete_route(**kwargs)

    

    Deletes an existing route.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DeleteRoute>`_    


    **Request Syntax** 
    ::

      response = client.delete_route(
          meshName='string',
          meshOwner='string',
          routeName='string',
          virtualRouterName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to delete the route in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type routeName: string
    :param routeName: **[REQUIRED]** 

      The name of the route to delete.

      

    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router to delete the route in.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'route': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'routeName': 'string',
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'methodName': 'string',
                            'serviceName': 'string'
                        },
                        'retryPolicy': {
                            'grpcRetryEvents': [
                                'cancelled'|'deadline-exceeded'|'internal'|'resource-exhausted'|'unavailable',
                            ],
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'http2Route': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'priority': 123,
                    'tcpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **route** *(dict) --* 

          The route that was deleted.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the route resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the route.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **routeName** *(string) --* 

            The name of the route.

            
          

          - **spec** *(dict) --* 

            The specifications of the route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **metadata** *(list) --* 

                  An object that represents the data to match from the request.

                  
                  

                  - *(dict) --* 

                    An object that represents the match metadata for the route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the data to match from the request.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      The name of the route.

                      
                
              
                

                - **methodName** *(string) --* 

                  The method name to match from the request. If you specify a name, you must also specify a ``serviceName`` .

                  
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **grpcRetryEvents** *(list) --* 

                  Specify at least one of the valid values.

                  
                  

                  - *(string) --* 
              
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **priority** *(integer) --* 

              The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.

              
            

            - **tcpRoute** *(dict) --* 

              An object that represents the specification of a TCP route.

              
              

              - **action** *(dict) --* 

                The action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The status of the route.

            
            

            - **status** *(string) --* 

              The current status for the route.

              
        
          

          - **virtualRouterName** *(string) --* 

            The virtual router that the route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: delete_virtual_gateway(**kwargs)

    

    Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DeleteVirtualGateway>`_    


    **Request Syntax** 
    ::

      response = client.delete_virtual_gateway(
          meshName='string',
          meshOwner='string',
          virtualGatewayName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to delete the virtual gateway from.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualGateway': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc'
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualGateway** *(dict) --* 

          The virtual gateway that was deleted.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual gateway resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual gateway.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **listeners** *(list) --* 

              The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual gateway.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the virtual gateway listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool. 

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring the listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping. Specify one protocol.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping.

                    
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.

                  
                  

                  - **certificate** *(dict) --* 

                    An object that represents a Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an Certificate Manager certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              An object that represents logging information.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual gateway access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual gateway.

            
            

            - **status** *(string) --* 

              The current status.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The name of the virtual gateway.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: delete_virtual_node(**kwargs)

    

    Deletes an existing virtual node.

     

    You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DeleteVirtualNode>`_    


    **Request Syntax** 
    ::

      response = client.delete_virtual_node(
          meshName='string',
          meshOwner='string',
          virtualNodeName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to delete the virtual node in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualNodeName: string
    :param virtualNodeName: **[REQUIRED]** 

      The name of the virtual node to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualNode': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'backends': [
                        {
                            'virtualService': {
                                'clientPolicy': {
                                    'tls': {
                                        'certificate': {
                                            'file': {
                                                'certificateChain': 'string',
                                                'privateKey': 'string'
                                            },
                                            'sds': {
                                                'secretName': 'string'
                                            }
                                        },
                                        'enforce': True|False,
                                        'ports': [
                                            123,
                                        ],
                                        'validation': {
                                            'subjectAlternativeNames': {
                                                'match': {
                                                    'exact': [
                                                        'string',
                                                    ]
                                                }
                                            },
                                            'trust': {
                                                'acm': {
                                                    'certificateAuthorityArns': [
                                                        'string',
                                                    ]
                                                },
                                                'file': {
                                                    'certificateChain': 'string'
                                                },
                                                'sds': {
                                                    'secretName': 'string'
                                                }
                                            }
                                        }
                                    }
                                },
                                'virtualServiceName': 'string'
                            }
                        },
                    ],
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                },
                                'tcp': {
                                    'maxConnections': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'outlierDetection': {
                                'baseEjectionDuration': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'interval': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'maxEjectionPercent': 123,
                                'maxServerErrors': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            },
                            'timeout': {
                                'grpc': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http2': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'tcp': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                }
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    },
                    'serviceDiscovery': {
                        'awsCloudMap': {
                            'attributes': [
                                {
                                    'key': 'string',
                                    'value': 'string'
                                },
                            ],
                            'namespaceName': 'string',
                            'serviceName': 'string'
                        },
                        'dns': {
                            'hostname': 'string',
                            'responseType': 'LOADBALANCER'|'ENDPOINTS'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualNodeName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualNode** *(dict) --* 

          The virtual node that was deleted.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual node resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual node.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual node.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a client's TLS certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a TLS validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **backends** *(list) --* 

              The backends that the virtual node is expected to send outbound traffic to.

              
              

              - *(dict) --* 

                An object that represents the backends that a virtual node is expected to send outbound traffic to.

                
                

                - **virtualService** *(dict) --* 

                  Specifies a virtual service to use as a backend. 

                  
                  

                  - **clientPolicy** *(dict) --* 

                    A reference to an object that represents the client policy for a backend.

                    
                    

                    - **tls** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) client policy.

                      
                      

                      - **certificate** *(dict) --* 

                        A reference to an object that represents a client's TLS certificate.

                        
                        

                        - **file** *(dict) --* 

                          An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                          
                          

                          - **certificateChain** *(string) --* 

                            The certificate chain for the certificate.

                            
                          

                          - **privateKey** *(string) --* 

                            The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                            
                      
                        

                        - **sds** *(dict) --* 

                          A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                          
                          

                          - **secretName** *(string) --* 

                            A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                            
                      
                    
                      

                      - **enforce** *(boolean) --* 

                        Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                        
                      

                      - **ports** *(list) --* 

                        One or more ports that the policy is enforced for.

                        
                        

                        - *(integer) --* 
                    
                      

                      - **validation** *(dict) --* 

                        A reference to an object that represents a TLS validation context.

                        
                        

                        - **subjectAlternativeNames** *(dict) --* 

                          A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                          
                          

                          - **match** *(dict) --* 

                            An object that represents the criteria for determining a SANs match.

                            
                            

                            - **exact** *(list) --* 

                              The values sent must match the specified values exactly.

                              
                              

                              - *(string) --* 
                          
                        
                      
                        

                        - **trust** *(dict) --* 

                          A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                          
                          

                          - **acm** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                            
                            

                            - **certificateAuthorityArns** *(list) --* 

                              One or more ACM Amazon Resource Name (ARN)s.

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **file** *(dict) --* 

                            An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                            
                            

                            - **certificateChain** *(string) --* 

                              The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                              
                        
                          

                          - **sds** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                            
                            

                            - **secretName** *(string) --* 

                              A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                              
                        
                      
                    
                  
                
                  

                  - **virtualServiceName** *(string) --* 

                    The name of the virtual service that is acting as a virtual node backend.

                    
              
            
          
            

            - **listeners** *(list) --* 

              The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual node.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. 

                    
              
                

                - **outlierDetection** *(dict) --* 

                  The outlier detection information for the listener.

                  
                  

                  - **baseEjectionDuration** *(dict) --* 

                    The base amount of time for which a host is ejected.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **interval** *(dict) --* 

                    The time interval between ejection sweep analysis.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **maxEjectionPercent** *(integer) --* 

                    Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.

                    
                  

                  - **maxServerErrors** *(integer) --* 

                    Number of consecutive ``5xx`` errors required for ejection. 

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
                

                - **timeout** *(dict) --* 

                  An object that represents timeouts for different protocols.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http2** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an AWS Certicate Manager (ACM) certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              The inbound and outbound access logging information for the virtual node.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration for a virtual node.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual node access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                     

                    .. note::

                       

                      The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.

                       

                    
              
            
          
            

            - **serviceDiscovery** *(dict) --* 

              The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a ``listener`` , then you must specify service discovery information.

              
              

              - **awsCloudMap** *(dict) --* 

                Specifies any Cloud Map information for the virtual node.

                
                

                - **attributes** *(list) --* 

                  A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.

                  
                  

                  - *(dict) --* 

                    An object that represents the Cloud Map attribute information for your virtual node.

                     

                    .. note::

                       

                      AWS Cloud Map is not available in the eu-south-1 Region.

                       

                    
                    

                    - **key** *(string) --* 

                      The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                    

                    - **value** *(string) --* 

                      The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                
              
                

                - **namespaceName** *(string) --* 

                  The name of the Cloud Map namespace to use.

                  
                

                - **serviceName** *(string) --* 

                  The name of the Cloud Map service to use.

                  
            
              

              - **dns** *(dict) --* 

                Specifies the DNS information for the virtual node.

                
                

                - **hostname** *(string) --* 

                  Specifies the DNS service discovery hostname for the virtual node. 

                  
                

                - **responseType** *(string) --* 

                  Specifies the DNS response type for the virtual node.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status for the virtual node.

            
            

            - **status** *(string) --* 

              The current status of the virtual node.

              
        
          

          - **virtualNodeName** *(string) --* 

            The name of the virtual node.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: delete_virtual_router(**kwargs)

    

    Deletes an existing virtual router.

     

    You must delete any routes associated with the virtual router before you can delete the router itself.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DeleteVirtualRouter>`_    


    **Request Syntax** 
    ::

      response = client.delete_virtual_router(
          meshName='string',
          meshOwner='string',
          virtualRouterName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to delete the virtual router in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualRouter': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'listeners': [
                        {
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            }
                        },
                    ]
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualRouter** *(dict) --* 

          The virtual router that was deleted.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual router resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual router.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual router.

            
            

            - **listeners** *(list) --* 

              The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a virtual router listener.

                
                

                - **portMapping** *(dict) --* 

                  An object that represents a port mapping.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual router.

            
            

            - **status** *(string) --* 

              The current status of the virtual router.

              
        
          

          - **virtualRouterName** *(string) --* 

            The name of the virtual router.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: delete_virtual_service(**kwargs)

    

    Deletes an existing virtual service.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DeleteVirtualService>`_    


    **Request Syntax** 
    ::

      response = client.delete_virtual_service(
          meshName='string',
          meshOwner='string',
          virtualServiceName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to delete the virtual service in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualServiceName: string
    :param virtualServiceName: **[REQUIRED]** 

      The name of the virtual service to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualService': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'provider': {
                        'virtualNode': {
                            'virtualNodeName': 'string'
                        },
                        'virtualRouter': {
                            'virtualRouterName': 'string'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualServiceName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualService** *(dict) --* 

          The virtual service that was deleted.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual service resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual service.

            
            

            - **provider** *(dict) --* 

              The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

              
              

              - **virtualNode** *(dict) --* 

                The virtual node associated with a virtual service.

                
                

                - **virtualNodeName** *(string) --* 

                  The name of the virtual node that is acting as a service provider.

                  
            
              

              - **virtualRouter** *(dict) --* 

                The virtual router associated with a virtual service.

                
                

                - **virtualRouterName** *(string) --* 

                  The name of the virtual router that is acting as a service provider.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual service.

            
            

            - **status** *(string) --* 

              The current status of the virtual service.

              
        
          

          - **virtualServiceName** *(string) --* 

            The name of the virtual service.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: describe_gateway_route(**kwargs)

    

    Describes an existing gateway route.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DescribeGatewayRoute>`_    


    **Request Syntax** 
    ::

      response = client.describe_gateway_route(
          gatewayRouteName='string',
          meshName='string',
          meshOwner='string',
          virtualGatewayName='string'
      )
    :type gatewayRouteName: string
    :param gatewayRouteName: **[REQUIRED]** 

      The name of the gateway route to describe.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the gateway route resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway that the gateway route is associated with.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayRoute': {
                'gatewayRouteName': 'string',
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'serviceName': 'string'
                        }
                    },
                    'http2Route': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'priority': 123
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayRoute** *(dict) --* 

          The full description of your gateway route.

          
          

          - **gatewayRouteName** *(string) --* 

            The name of the gateway route.

            
          

          - **meshName** *(string) --* 

            The name of the service mesh that the resource resides in. 

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the gateway route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name of the gateway route to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **hostname** *(dict) --* 

                  The gateway route host name to be matched on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **metadata** *(list) --* 

                  The gateway route metadata to be matched on.

                  
                  

                  - *(dict) --* 

                    An object representing the metadata of the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The criteria for determining a metadata match.

                      
                      

                      - **exact** *(string) --* 

                        The exact method header to be matched on.

                        
                      

                      - **prefix** *(string) --* 

                        The specified beginning characters of the method header to be matched on.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The regex used to match the method header.

                        
                      

                      - **suffix** *(string) --* 

                        The specified ending characters of the method header to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the gateway route metadata.

                      
                
              
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **priority** *(integer) --* 

              The ordering of the gateway routes spec.

              
        
          

          - **status** *(dict) --* 

            The status of the gateway route.

            
            

            - **status** *(string) --* 

              The current status for the gateway route.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The virtual gateway that the gateway route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: describe_mesh(**kwargs)

    

    Describes an existing service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DescribeMesh>`_    


    **Request Syntax** 
    ::

      response = client.describe_mesh(
          meshName='string',
          meshOwner='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to describe.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'mesh': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'egressFilter': {
                        'type': 'ALLOW_ALL'|'DROP_ALL'
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **mesh** *(dict) --* 

          The full description of your service mesh.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the service mesh.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The associated specification for the service mesh.

            
            

            - **egressFilter** *(dict) --* 

              The egress filter rules for the service mesh.

              
              

              - **type** *(string) --* 

                The egress filter type. By default, the type is ``DROP_ALL`` , which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to ``*.amazonaws.com`` for Amazon Web Services API calls). You can set the egress filter type to ``ALLOW_ALL`` to allow egress to any endpoint inside or outside of the service mesh.

                
          
        
          

          - **status** *(dict) --* 

            The status of the service mesh.

            
            

            - **status** *(string) --* 

              The current mesh status.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: describe_route(**kwargs)

    

    Describes an existing route.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DescribeRoute>`_    


    **Request Syntax** 
    ::

      response = client.describe_route(
          meshName='string',
          meshOwner='string',
          routeName='string',
          virtualRouterName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the route resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type routeName: string
    :param routeName: **[REQUIRED]** 

      The name of the route to describe.

      

    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router that the route is associated with.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'route': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'routeName': 'string',
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'methodName': 'string',
                            'serviceName': 'string'
                        },
                        'retryPolicy': {
                            'grpcRetryEvents': [
                                'cancelled'|'deadline-exceeded'|'internal'|'resource-exhausted'|'unavailable',
                            ],
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'http2Route': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'priority': 123,
                    'tcpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **route** *(dict) --* 

          The full description of your route.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the route resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the route.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **routeName** *(string) --* 

            The name of the route.

            
          

          - **spec** *(dict) --* 

            The specifications of the route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **metadata** *(list) --* 

                  An object that represents the data to match from the request.

                  
                  

                  - *(dict) --* 

                    An object that represents the match metadata for the route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the data to match from the request.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      The name of the route.

                      
                
              
                

                - **methodName** *(string) --* 

                  The method name to match from the request. If you specify a name, you must also specify a ``serviceName`` .

                  
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **grpcRetryEvents** *(list) --* 

                  Specify at least one of the valid values.

                  
                  

                  - *(string) --* 
              
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **priority** *(integer) --* 

              The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.

              
            

            - **tcpRoute** *(dict) --* 

              An object that represents the specification of a TCP route.

              
              

              - **action** *(dict) --* 

                The action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The status of the route.

            
            

            - **status** *(string) --* 

              The current status for the route.

              
        
          

          - **virtualRouterName** *(string) --* 

            The virtual router that the route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: describe_virtual_gateway(**kwargs)

    

    Describes an existing virtual gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DescribeVirtualGateway>`_    


    **Request Syntax** 
    ::

      response = client.describe_virtual_gateway(
          meshName='string',
          meshOwner='string',
          virtualGatewayName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the gateway route resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualGateway': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc'
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualGateway** *(dict) --* 

          The full description of your virtual gateway.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual gateway resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual gateway.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **listeners** *(list) --* 

              The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual gateway.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the virtual gateway listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool. 

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring the listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping. Specify one protocol.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping.

                    
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.

                  
                  

                  - **certificate** *(dict) --* 

                    An object that represents a Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an Certificate Manager certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              An object that represents logging information.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual gateway access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual gateway.

            
            

            - **status** *(string) --* 

              The current status.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The name of the virtual gateway.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: describe_virtual_node(**kwargs)

    

    Describes an existing virtual node.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DescribeVirtualNode>`_    


    **Request Syntax** 
    ::

      response = client.describe_virtual_node(
          meshName='string',
          meshOwner='string',
          virtualNodeName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the virtual node resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualNodeName: string
    :param virtualNodeName: **[REQUIRED]** 

      The name of the virtual node to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualNode': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'backends': [
                        {
                            'virtualService': {
                                'clientPolicy': {
                                    'tls': {
                                        'certificate': {
                                            'file': {
                                                'certificateChain': 'string',
                                                'privateKey': 'string'
                                            },
                                            'sds': {
                                                'secretName': 'string'
                                            }
                                        },
                                        'enforce': True|False,
                                        'ports': [
                                            123,
                                        ],
                                        'validation': {
                                            'subjectAlternativeNames': {
                                                'match': {
                                                    'exact': [
                                                        'string',
                                                    ]
                                                }
                                            },
                                            'trust': {
                                                'acm': {
                                                    'certificateAuthorityArns': [
                                                        'string',
                                                    ]
                                                },
                                                'file': {
                                                    'certificateChain': 'string'
                                                },
                                                'sds': {
                                                    'secretName': 'string'
                                                }
                                            }
                                        }
                                    }
                                },
                                'virtualServiceName': 'string'
                            }
                        },
                    ],
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                },
                                'tcp': {
                                    'maxConnections': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'outlierDetection': {
                                'baseEjectionDuration': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'interval': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'maxEjectionPercent': 123,
                                'maxServerErrors': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            },
                            'timeout': {
                                'grpc': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http2': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'tcp': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                }
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    },
                    'serviceDiscovery': {
                        'awsCloudMap': {
                            'attributes': [
                                {
                                    'key': 'string',
                                    'value': 'string'
                                },
                            ],
                            'namespaceName': 'string',
                            'serviceName': 'string'
                        },
                        'dns': {
                            'hostname': 'string',
                            'responseType': 'LOADBALANCER'|'ENDPOINTS'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualNodeName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualNode** *(dict) --* 

          The full description of your virtual node.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual node resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual node.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual node.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a client's TLS certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a TLS validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **backends** *(list) --* 

              The backends that the virtual node is expected to send outbound traffic to.

              
              

              - *(dict) --* 

                An object that represents the backends that a virtual node is expected to send outbound traffic to.

                
                

                - **virtualService** *(dict) --* 

                  Specifies a virtual service to use as a backend. 

                  
                  

                  - **clientPolicy** *(dict) --* 

                    A reference to an object that represents the client policy for a backend.

                    
                    

                    - **tls** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) client policy.

                      
                      

                      - **certificate** *(dict) --* 

                        A reference to an object that represents a client's TLS certificate.

                        
                        

                        - **file** *(dict) --* 

                          An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                          
                          

                          - **certificateChain** *(string) --* 

                            The certificate chain for the certificate.

                            
                          

                          - **privateKey** *(string) --* 

                            The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                            
                      
                        

                        - **sds** *(dict) --* 

                          A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                          
                          

                          - **secretName** *(string) --* 

                            A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                            
                      
                    
                      

                      - **enforce** *(boolean) --* 

                        Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                        
                      

                      - **ports** *(list) --* 

                        One or more ports that the policy is enforced for.

                        
                        

                        - *(integer) --* 
                    
                      

                      - **validation** *(dict) --* 

                        A reference to an object that represents a TLS validation context.

                        
                        

                        - **subjectAlternativeNames** *(dict) --* 

                          A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                          
                          

                          - **match** *(dict) --* 

                            An object that represents the criteria for determining a SANs match.

                            
                            

                            - **exact** *(list) --* 

                              The values sent must match the specified values exactly.

                              
                              

                              - *(string) --* 
                          
                        
                      
                        

                        - **trust** *(dict) --* 

                          A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                          
                          

                          - **acm** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                            
                            

                            - **certificateAuthorityArns** *(list) --* 

                              One or more ACM Amazon Resource Name (ARN)s.

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **file** *(dict) --* 

                            An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                            
                            

                            - **certificateChain** *(string) --* 

                              The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                              
                        
                          

                          - **sds** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                            
                            

                            - **secretName** *(string) --* 

                              A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                              
                        
                      
                    
                  
                
                  

                  - **virtualServiceName** *(string) --* 

                    The name of the virtual service that is acting as a virtual node backend.

                    
              
            
          
            

            - **listeners** *(list) --* 

              The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual node.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. 

                    
              
                

                - **outlierDetection** *(dict) --* 

                  The outlier detection information for the listener.

                  
                  

                  - **baseEjectionDuration** *(dict) --* 

                    The base amount of time for which a host is ejected.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **interval** *(dict) --* 

                    The time interval between ejection sweep analysis.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **maxEjectionPercent** *(integer) --* 

                    Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.

                    
                  

                  - **maxServerErrors** *(integer) --* 

                    Number of consecutive ``5xx`` errors required for ejection. 

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
                

                - **timeout** *(dict) --* 

                  An object that represents timeouts for different protocols.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http2** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an AWS Certicate Manager (ACM) certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              The inbound and outbound access logging information for the virtual node.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration for a virtual node.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual node access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                     

                    .. note::

                       

                      The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.

                       

                    
              
            
          
            

            - **serviceDiscovery** *(dict) --* 

              The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a ``listener`` , then you must specify service discovery information.

              
              

              - **awsCloudMap** *(dict) --* 

                Specifies any Cloud Map information for the virtual node.

                
                

                - **attributes** *(list) --* 

                  A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.

                  
                  

                  - *(dict) --* 

                    An object that represents the Cloud Map attribute information for your virtual node.

                     

                    .. note::

                       

                      AWS Cloud Map is not available in the eu-south-1 Region.

                       

                    
                    

                    - **key** *(string) --* 

                      The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                    

                    - **value** *(string) --* 

                      The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                
              
                

                - **namespaceName** *(string) --* 

                  The name of the Cloud Map namespace to use.

                  
                

                - **serviceName** *(string) --* 

                  The name of the Cloud Map service to use.

                  
            
              

              - **dns** *(dict) --* 

                Specifies the DNS information for the virtual node.

                
                

                - **hostname** *(string) --* 

                  Specifies the DNS service discovery hostname for the virtual node. 

                  
                

                - **responseType** *(string) --* 

                  Specifies the DNS response type for the virtual node.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status for the virtual node.

            
            

            - **status** *(string) --* 

              The current status of the virtual node.

              
        
          

          - **virtualNodeName** *(string) --* 

            The name of the virtual node.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: describe_virtual_router(**kwargs)

    

    Describes an existing virtual router.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DescribeVirtualRouter>`_    


    **Request Syntax** 
    ::

      response = client.describe_virtual_router(
          meshName='string',
          meshOwner='string',
          virtualRouterName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the virtual router resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualRouter': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'listeners': [
                        {
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            }
                        },
                    ]
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualRouter** *(dict) --* 

          The full description of your virtual router.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual router resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual router.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual router.

            
            

            - **listeners** *(list) --* 

              The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a virtual router listener.

                
                

                - **portMapping** *(dict) --* 

                  An object that represents a port mapping.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual router.

            
            

            - **status** *(string) --* 

              The current status of the virtual router.

              
        
          

          - **virtualRouterName** *(string) --* 

            The name of the virtual router.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: describe_virtual_service(**kwargs)

    

    Describes an existing virtual service.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/DescribeVirtualService>`_    


    **Request Syntax** 
    ::

      response = client.describe_virtual_service(
          meshName='string',
          meshOwner='string',
          virtualServiceName='string'
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the virtual service resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualServiceName: string
    :param virtualServiceName: **[REQUIRED]** 

      The name of the virtual service to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualService': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'provider': {
                        'virtualNode': {
                            'virtualNodeName': 'string'
                        },
                        'virtualRouter': {
                            'virtualRouterName': 'string'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualServiceName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualService** *(dict) --* 

          The full description of your virtual service.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual service resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual service.

            
            

            - **provider** *(dict) --* 

              The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

              
              

              - **virtualNode** *(dict) --* 

                The virtual node associated with a virtual service.

                
                

                - **virtualNodeName** *(string) --* 

                  The name of the virtual node that is acting as a service provider.

                  
            
              

              - **virtualRouter** *(dict) --* 

                The virtual router associated with a virtual service.

                
                

                - **virtualRouterName** *(string) --* 

                  The name of the virtual router that is acting as a service provider.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual service.

            
            

            - **status** *(string) --* 

              The current status of the virtual service.

              
        
          

          - **virtualServiceName** *(string) --* 

            The name of the virtual service.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_gateway_routes(**kwargs)

    

    Returns a list of existing gateway routes that are associated to a virtual gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListGatewayRoutes>`_    


    **Request Syntax** 
    ::

      response = client.list_gateway_routes(
          limit=123,
          meshName='string',
          meshOwner='string',
          nextToken='string',
          virtualGatewayName='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of results returned by ``ListGatewayRoutes`` in paginated output. When you use this parameter, ``ListGatewayRoutes`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListGatewayRoutes`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListGatewayRoutes`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list gateway routes in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListGatewayRoutes`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

      

    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway to list gateway routes in.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayRoutes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'gatewayRouteName': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualGatewayName': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayRoutes** *(list) --* 

          The list of existing gateway routes for the specified service mesh and virtual gateway.

          
          

          - *(dict) --* 

            An object that represents a gateway route returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the gateway route.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **gatewayRouteName** *(string) --* 

              The name of the gateway route.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the resource resides in. 

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualGatewayName** *(string) --* 

              The virtual gateway that the gateway route is associated with.

              
        
      
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListGatewayRoutes`` request. When the results of a ``ListGatewayRoutes`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: list_meshes(**kwargs)

    

    Returns a list of existing service meshes.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListMeshes>`_    


    **Request Syntax** 
    ::

      response = client.list_meshes(
          limit=123,
          nextToken='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of results returned by ``ListMeshes`` in paginated output. When you use this parameter, ``ListMeshes`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListMeshes`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListMeshes`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListMeshes`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

       

      .. note::

         

        This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.

         

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'meshes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **meshes** *(list) --* 

          The list of existing service meshes.

          
          

          - *(dict) --* 

            An object that represents a service mesh returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) of the service mesh.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
      
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListMeshes`` request. When the results of a ``ListMeshes`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: list_routes(**kwargs)

    

    Returns a list of existing routes in a service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListRoutes>`_    


    **Request Syntax** 
    ::

      response = client.list_routes(
          limit=123,
          meshName='string',
          meshOwner='string',
          nextToken='string',
          virtualRouterName='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of results returned by ``ListRoutes`` in paginated output. When you use this parameter, ``ListRoutes`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListRoutes`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListRoutes`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list routes in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListRoutes`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

      

    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router to list routes in.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'routes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'routeName': 'string',
                    'version': 123,
                    'virtualRouterName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListRoutes`` request. When the results of a ``ListRoutes`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
        

        - **routes** *(list) --* 

          The list of existing routes for the specified service mesh and virtual router.

          
          

          - *(dict) --* 

            An object that represents a route returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the route.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the route resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **routeName** *(string) --* 

              The name of the route.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualRouterName** *(string) --* 

              The virtual router that the route is associated with.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    List the tags for an App Mesh resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          limit=123,
          nextToken='string',
          resourceArn='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of tag results returned by ``ListTagsForResource`` in paginated output. When this parameter is used, ``ListTagsForResource`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListTagsForResource`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListTagsForResource`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListTagsForResource`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

      

    
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) that identifies the resource to list the tags for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'tags': [
                {
                    'key': 'string',
                    'value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListTagsForResource`` request. When the results of a ``ListTagsForResource`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
        

        - **tags** *(list) --* 

          The tags for the resource.

          
          

          - *(dict) --* 

            Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

            
            

            - **key** *(string) --* 

              One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

              
            

            - **value** *(string) --* 

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: list_virtual_gateways(**kwargs)

    

    Returns a list of existing virtual gateways in a service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualGateways>`_    


    **Request Syntax** 
    ::

      response = client.list_virtual_gateways(
          limit=123,
          meshName='string',
          meshOwner='string',
          nextToken='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of results returned by ``ListVirtualGateways`` in paginated output. When you use this parameter, ``ListVirtualGateways`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListVirtualGateways`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListVirtualGateways`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual gateways in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListVirtualGateways`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'virtualGateways': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualGatewayName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListVirtualGateways`` request. When the results of a ``ListVirtualGateways`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
        

        - **virtualGateways** *(list) --* 

          The list of existing virtual gateways for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual gateway returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the resource resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualGatewayName** *(string) --* 

              The name of the resource.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: list_virtual_nodes(**kwargs)

    

    Returns a list of existing virtual nodes.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualNodes>`_    


    **Request Syntax** 
    ::

      response = client.list_virtual_nodes(
          limit=123,
          meshName='string',
          meshOwner='string',
          nextToken='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of results returned by ``ListVirtualNodes`` in paginated output. When you use this parameter, ``ListVirtualNodes`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListVirtualNodes`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListVirtualNodes`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual nodes in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListVirtualNodes`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'virtualNodes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualNodeName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListVirtualNodes`` request. When the results of a ``ListVirtualNodes`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
        

        - **virtualNodes** *(list) --* 

          The list of existing virtual nodes for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual node returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the virtual node.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the virtual node resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualNodeName** *(string) --* 

              The name of the virtual node.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: list_virtual_routers(**kwargs)

    

    Returns a list of existing virtual routers in a service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualRouters>`_    


    **Request Syntax** 
    ::

      response = client.list_virtual_routers(
          limit=123,
          meshName='string',
          meshOwner='string',
          nextToken='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of results returned by ``ListVirtualRouters`` in paginated output. When you use this parameter, ``ListVirtualRouters`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListVirtualRouters`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListVirtualRouters`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual routers in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListVirtualRouters`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'virtualRouters': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualRouterName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListVirtualRouters`` request. When the results of a ``ListVirtualRouters`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
        

        - **virtualRouters** *(list) --* 

          The list of existing virtual routers for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual router returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the virtual router.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the virtual router resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualRouterName** *(string) --* 

              The name of the virtual router.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: list_virtual_services(**kwargs)

    

    Returns a list of existing virtual services in a service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualServices>`_    


    **Request Syntax** 
    ::

      response = client.list_virtual_services(
          limit=123,
          meshName='string',
          meshOwner='string',
          nextToken='string'
      )
    :type limit: integer
    :param limit: 

      The maximum number of results returned by ``ListVirtualServices`` in paginated output. When you use this parameter, ``ListVirtualServices`` returns only ``limit`` results in a single page along with a ``nextToken`` response element. You can see the remaining results of the initial request by sending another ``ListVirtualServices`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If you don't use this parameter, ``ListVirtualServices`` returns up to 100 results and a ``nextToken`` value if applicable.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual services in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type nextToken: string
    :param nextToken: 

      The ``nextToken`` value returned from a previous paginated ``ListVirtualServices`` request where ``limit`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``nextToken`` value.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'virtualServices': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualServiceName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **nextToken** *(string) --* 

          The ``nextToken`` value to include in a future ``ListVirtualServices`` request. When the results of a ``ListVirtualServices`` request exceed ``limit`` , you can use this value to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
        

        - **virtualServices** *(list) --* 

          The list of existing virtual services for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual service returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the virtual service.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the virtual service resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualServiceName** *(string) --* 

              The name of the virtual service.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Associates the specified tags to a resource with the specified ``resourceArn`` . If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource to add tags to.

      

    
    :type tags: list
    :param tags: **[REQUIRED]** 

      The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

      

    
      - *(dict) --* 

        Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyTagsException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Deletes specified tags from a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource to delete tags from.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      The keys of the tags to be removed.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: update_gateway_route(**kwargs)

    

    Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateGatewayRoute>`_    


    **Request Syntax** 
    ::

      response = client.update_gateway_route(
          clientToken='string',
          gatewayRouteName='string',
          meshName='string',
          meshOwner='string',
          spec={
              'grpcRoute': {
                  'action': {
                      'rewrite': {
                          'hostname': {
                              'defaultTargetHostname': 'ENABLED'|'DISABLED'
                          }
                      },
                      'target': {
                          'virtualService': {
                              'virtualServiceName': 'string'
                          }
                      }
                  },
                  'match': {
                      'hostname': {
                          'exact': 'string',
                          'suffix': 'string'
                      },
                      'metadata': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'serviceName': 'string'
                  }
              },
              'http2Route': {
                  'action': {
                      'rewrite': {
                          'hostname': {
                              'defaultTargetHostname': 'ENABLED'|'DISABLED'
                          },
                          'path': {
                              'exact': 'string'
                          },
                          'prefix': {
                              'defaultPrefix': 'ENABLED'|'DISABLED',
                              'value': 'string'
                          }
                      },
                      'target': {
                          'virtualService': {
                              'virtualServiceName': 'string'
                          }
                      }
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'hostname': {
                          'exact': 'string',
                          'suffix': 'string'
                      },
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ]
                  }
              },
              'httpRoute': {
                  'action': {
                      'rewrite': {
                          'hostname': {
                              'defaultTargetHostname': 'ENABLED'|'DISABLED'
                          },
                          'path': {
                              'exact': 'string'
                          },
                          'prefix': {
                              'defaultPrefix': 'ENABLED'|'DISABLED',
                              'value': 'string'
                          }
                      },
                      'target': {
                          'virtualService': {
                              'virtualServiceName': 'string'
                          }
                      }
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'hostname': {
                          'exact': 'string',
                          'suffix': 'string'
                      },
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ]
                  }
              },
              'priority': 123
          },
          virtualGatewayName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type gatewayRouteName: string
    :param gatewayRouteName: **[REQUIRED]** 

      The name of the gateway route to update.

      

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the gateway route resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The new gateway route specification to apply. This overwrites the existing data.

      

    
      - **grpcRoute** *(dict) --* 

        An object that represents the specification of a gRPC gateway route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **rewrite** *(dict) --* 

            The gateway route action to rewrite.

            

          
            - **hostname** *(dict) --* 

              The host name of the gateway route to rewrite.

              

            
              - **defaultTargetHostname** *(string) --* 

                The default target host name to write to.

                

              
            
          
          - **target** *(dict) --* **[REQUIRED]** 

            An object that represents the target that traffic is routed to when a request matches the gateway route.

            

          
            - **virtualService** *(dict) --* **[REQUIRED]** 

              An object that represents a virtual service gateway route target.

              

            
              - **virtualServiceName** *(string) --* **[REQUIRED]** 

                The name of the virtual service that traffic is routed to.

                

              
            
          
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **hostname** *(dict) --* 

            The gateway route host name to be matched on.

            

          
            - **exact** *(string) --* 

              The exact host name to match on.

              

            
            - **suffix** *(string) --* 

              The specified ending characters of the host name to match on.

              

            
          
          - **metadata** *(list) --* 

            The gateway route metadata to be matched on.

            

          
            - *(dict) --* 

              An object representing the metadata of the gateway route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                The criteria for determining a metadata match.

                

              
                - **exact** *(string) --* 

                  The exact method header to be matched on.

                  

                
                - **prefix** *(string) --* 

                  The specified beginning characters of the method header to be matched on.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The regex used to match the method header.

                  

                
                - **suffix** *(string) --* 

                  The specified ending characters of the method header to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the gateway route metadata.

                

              
            
        
          - **serviceName** *(string) --* 

            The fully qualified domain name for the service to match from the request.

            

          
        
      
      - **http2Route** *(dict) --* 

        An object that represents the specification of an HTTP/2 gateway route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **rewrite** *(dict) --* 

            The gateway route action to rewrite.

            

          
            - **hostname** *(dict) --* 

              The host name to rewrite.

              

            
              - **defaultTargetHostname** *(string) --* 

                The default target host name to write to.

                

              
            
            - **path** *(dict) --* 

              The path to rewrite.

              

            
              - **exact** *(string) --* 

                The exact path to rewrite.

                

              
            
            - **prefix** *(dict) --* 

              The specified beginning characters to rewrite.

              

            
              - **defaultPrefix** *(string) --* 

                The default prefix used to replace the incoming route prefix when rewritten.

                

              
              - **value** *(string) --* 

                The value used to replace the incoming route prefix when rewritten.

                

              
            
          
          - **target** *(dict) --* **[REQUIRED]** 

            An object that represents the target that traffic is routed to when a request matches the gateway route.

            

          
            - **virtualService** *(dict) --* **[REQUIRED]** 

              An object that represents a virtual service gateway route target.

              

            
              - **virtualServiceName** *(string) --* **[REQUIRED]** 

                The name of the virtual service that traffic is routed to.

                

              
            
          
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the gateway route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the gateway route that will be matched on.

                

              
            
        
          - **hostname** *(dict) --* 

            The host name to match on.

            

          
            - **exact** *(string) --* 

              The exact host name to match on.

              

            
            - **suffix** *(string) --* 

              The specified ending characters of the host name to match on.

              

            
          
          - **method** *(string) --* 

            The method to match on.

            

          
          - **path** *(dict) --* 

            The path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The query parameter to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
        
      
      - **httpRoute** *(dict) --* 

        An object that represents the specification of an HTTP gateway route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **rewrite** *(dict) --* 

            The gateway route action to rewrite.

            

          
            - **hostname** *(dict) --* 

              The host name to rewrite.

              

            
              - **defaultTargetHostname** *(string) --* 

                The default target host name to write to.

                

              
            
            - **path** *(dict) --* 

              The path to rewrite.

              

            
              - **exact** *(string) --* 

                The exact path to rewrite.

                

              
            
            - **prefix** *(dict) --* 

              The specified beginning characters to rewrite.

              

            
              - **defaultPrefix** *(string) --* 

                The default prefix used to replace the incoming route prefix when rewritten.

                

              
              - **value** *(string) --* 

                The value used to replace the incoming route prefix when rewritten.

                

              
            
          
          - **target** *(dict) --* **[REQUIRED]** 

            An object that represents the target that traffic is routed to when a request matches the gateway route.

            

          
            - **virtualService** *(dict) --* **[REQUIRED]** 

              An object that represents a virtual service gateway route target.

              

            
              - **virtualServiceName** *(string) --* **[REQUIRED]** 

                The name of the virtual service that traffic is routed to.

                

              
            
          
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the gateway route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the gateway route that will be matched on.

                

              
            
        
          - **hostname** *(dict) --* 

            The host name to match on.

            

          
            - **exact** *(string) --* 

              The exact host name to match on.

              

            
            - **suffix** *(string) --* 

              The specified ending characters of the host name to match on.

              

            
          
          - **method** *(string) --* 

            The method to match on.

            

          
          - **path** *(dict) --* 

            The path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The query parameter to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
        
      
      - **priority** *(integer) --* 

        The ordering of the gateway routes spec.

        

      
    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway that the gateway route is associated with.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayRoute': {
                'gatewayRouteName': 'string',
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'serviceName': 'string'
                        }
                    },
                    'http2Route': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'rewrite': {
                                'hostname': {
                                    'defaultTargetHostname': 'ENABLED'|'DISABLED'
                                },
                                'path': {
                                    'exact': 'string'
                                },
                                'prefix': {
                                    'defaultPrefix': 'ENABLED'|'DISABLED',
                                    'value': 'string'
                                }
                            },
                            'target': {
                                'virtualService': {
                                    'virtualServiceName': 'string'
                                }
                            }
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'hostname': {
                                'exact': 'string',
                                'suffix': 'string'
                            },
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ]
                        }
                    },
                    'priority': 123
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayRoute** *(dict) --* 

          A full description of the gateway route that was updated.

          
          

          - **gatewayRouteName** *(string) --* 

            The name of the gateway route.

            
          

          - **meshName** *(string) --* 

            The name of the service mesh that the resource resides in. 

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the gateway route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name of the gateway route to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **hostname** *(dict) --* 

                  The gateway route host name to be matched on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **metadata** *(list) --* 

                  The gateway route metadata to be matched on.

                  
                  

                  - *(dict) --* 

                    An object representing the metadata of the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The criteria for determining a metadata match.

                      
                      

                      - **exact** *(string) --* 

                        The exact method header to be matched on.

                        
                      

                      - **prefix** *(string) --* 

                        The specified beginning characters of the method header to be matched on.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The regex used to match the method header.

                        
                      

                      - **suffix** *(string) --* 

                        The specified ending characters of the method header to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the gateway route metadata.

                      
                
              
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP gateway route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **rewrite** *(dict) --* 

                  The gateway route action to rewrite.

                  
                  

                  - **hostname** *(dict) --* 

                    The host name to rewrite.

                    
                    

                    - **defaultTargetHostname** *(string) --* 

                      The default target host name to write to.

                      
                
                  

                  - **path** *(dict) --* 

                    The path to rewrite.

                    
                    

                    - **exact** *(string) --* 

                      The exact path to rewrite.

                      
                
                  

                  - **prefix** *(dict) --* 

                    The specified beginning characters to rewrite.

                    
                    

                    - **defaultPrefix** *(string) --* 

                      The default prefix used to replace the incoming route prefix when rewritten.

                      
                    

                    - **value** *(string) --* 

                      The value used to replace the incoming route prefix when rewritten.

                      
                
              
                

                - **target** *(dict) --* 

                  An object that represents the target that traffic is routed to when a request matches the gateway route.

                  
                  

                  - **virtualService** *(dict) --* 

                    An object that represents a virtual service gateway route target.

                    
                    

                    - **virtualServiceName** *(string) --* 

                      The name of the virtual service that traffic is routed to.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the gateway route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the method and value to match with the header value sent in a request. Specify one match method.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the gateway route that will be matched on.

                      
                
              
                

                - **hostname** *(dict) --* 

                  The host name to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact host name to match on.

                    
                  

                  - **suffix** *(string) --* 

                    The specified ending characters of the host name to match on.

                    
              
                

                - **method** *(string) --* 

                  The method to match on.

                  
                

                - **path** *(dict) --* 

                  The path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The query parameter to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
            
          
            

            - **priority** *(integer) --* 

              The ordering of the gateway routes spec.

              
        
          

          - **status** *(dict) --* 

            The status of the gateway route.

            
            

            - **status** *(string) --* 

              The current status for the gateway route.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The virtual gateway that the gateway route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: update_mesh(**kwargs)

    

    Updates an existing service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateMesh>`_    


    **Request Syntax** 
    ::

      response = client.update_mesh(
          clientToken='string',
          meshName='string',
          spec={
              'egressFilter': {
                  'type': 'ALLOW_ALL'|'DROP_ALL'
              }
          }
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to update.

      

    
    :type spec: dict
    :param spec: 

      The service mesh specification to apply.

      

    
      - **egressFilter** *(dict) --* 

        The egress filter rules for the service mesh.

        

      
        - **type** *(string) --* **[REQUIRED]** 

          The egress filter type. By default, the type is ``DROP_ALL`` , which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to ``*.amazonaws.com`` for Amazon Web Services API calls). You can set the egress filter type to ``ALLOW_ALL`` to allow egress to any endpoint inside or outside of the service mesh.

          

        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'mesh': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'egressFilter': {
                        'type': 'ALLOW_ALL'|'DROP_ALL'
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **mesh** *(dict) --* 

          An object that represents a service mesh returned by a describe operation.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the service mesh.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The associated specification for the service mesh.

            
            

            - **egressFilter** *(dict) --* 

              The egress filter rules for the service mesh.

              
              

              - **type** *(string) --* 

                The egress filter type. By default, the type is ``DROP_ALL`` , which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to ``*.amazonaws.com`` for Amazon Web Services API calls). You can set the egress filter type to ``ALLOW_ALL`` to allow egress to any endpoint inside or outside of the service mesh.

                
          
        
          

          - **status** *(dict) --* 

            The status of the service mesh.

            
            

            - **status** *(string) --* 

              The current mesh status.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: update_route(**kwargs)

    

    Updates an existing route for a specified service mesh and virtual router.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateRoute>`_    


    **Request Syntax** 
    ::

      response = client.update_route(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          routeName='string',
          spec={
              'grpcRoute': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'match': {
                      'metadata': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'methodName': 'string',
                      'serviceName': 'string'
                  },
                  'retryPolicy': {
                      'grpcRetryEvents': [
                          'cancelled'|'deadline-exceeded'|'internal'|'resource-exhausted'|'unavailable',
                      ],
                      'httpRetryEvents': [
                          'string',
                      ],
                      'maxRetries': 123,
                      'perRetryTimeout': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'tcpRetryEvents': [
                          'connection-error',
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'perRequest': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              },
              'http2Route': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'scheme': 'http'|'https'
                  },
                  'retryPolicy': {
                      'httpRetryEvents': [
                          'string',
                      ],
                      'maxRetries': 123,
                      'perRetryTimeout': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'tcpRetryEvents': [
                          'connection-error',
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'perRequest': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              },
              'httpRoute': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'match': {
                      'headers': [
                          {
                              'invert': True|False,
                              'match': {
                                  'exact': 'string',
                                  'prefix': 'string',
                                  'range': {
                                      'end': 123,
                                      'start': 123
                                  },
                                  'regex': 'string',
                                  'suffix': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                      'path': {
                          'exact': 'string',
                          'regex': 'string'
                      },
                      'prefix': 'string',
                      'queryParameters': [
                          {
                              'match': {
                                  'exact': 'string'
                              },
                              'name': 'string'
                          },
                      ],
                      'scheme': 'http'|'https'
                  },
                  'retryPolicy': {
                      'httpRetryEvents': [
                          'string',
                      ],
                      'maxRetries': 123,
                      'perRetryTimeout': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'tcpRetryEvents': [
                          'connection-error',
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      },
                      'perRequest': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              },
              'priority': 123,
              'tcpRoute': {
                  'action': {
                      'weightedTargets': [
                          {
                              'virtualNode': 'string',
                              'weight': 123
                          },
                      ]
                  },
                  'timeout': {
                      'idle': {
                          'unit': 's'|'ms',
                          'value': 123
                      }
                  }
              }
          },
          virtualRouterName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the route resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type routeName: string
    :param routeName: **[REQUIRED]** 

      The name of the route to update.

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The new route specification to apply. This overwrites the existing data.

      

    
      - **grpcRoute** *(dict) --* 

        An object that represents the specification of a gRPC route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **metadata** *(list) --* 

            An object that represents the data to match from the request.

            

          
            - *(dict) --* 

              An object that represents the match metadata for the route.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                An object that represents the data to match from the request.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                The name of the route.

                

              
            
        
          - **methodName** *(string) --* 

            The method name to match from the request. If you specify a name, you must also specify a ``serviceName`` .

            

          
          - **serviceName** *(string) --* 

            The fully qualified domain name for the service to match from the request.

            

          
        
        - **retryPolicy** *(dict) --* 

          An object that represents a retry policy.

          

        
          - **grpcRetryEvents** *(list) --* 

            Specify at least one of the valid values.

            

          
            - *(string) --* 

            
        
          - **httpRetryEvents** *(list) --* 

            Specify at least one of the following values.

             

             
            * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
             
            * **gateway-error** – HTTP status codes 502, 503, and 504 
             
            * **client-error** – HTTP status code 409 
             
            * **stream-error** – Retry on refused stream 
             

            

          
            - *(string) --* 

            
        
          - **maxRetries** *(integer) --* **[REQUIRED]** 

            The maximum number of retry attempts.

            

          
          - **perRetryTimeout** *(dict) --* **[REQUIRED]** 

            The timeout for each retry attempt.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **tcpRetryEvents** *(list) --* 

            Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

            

          
            - *(string) --* 

            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **perRequest** *(dict) --* 

            An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
      - **http2Route** *(dict) --* 

        An object that represents the specification of an HTTP/2 route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the request.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                The ``HeaderMatchMethod`` object.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the client request that will be matched on.

                

              
            
        
          - **method** *(string) --* 

            The client request method to match on. Specify only one.

            

          
          - **path** *(dict) --* 

            The client request path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The client request query parameters to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
          - **scheme** *(string) --* 

            The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

            

          
        
        - **retryPolicy** *(dict) --* 

          An object that represents a retry policy.

          

        
          - **httpRetryEvents** *(list) --* 

            Specify at least one of the following values.

             

             
            * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
             
            * **gateway-error** – HTTP status codes 502, 503, and 504 
             
            * **client-error** – HTTP status code 409 
             
            * **stream-error** – Retry on refused stream 
             

            

          
            - *(string) --* 

            
        
          - **maxRetries** *(integer) --* **[REQUIRED]** 

            The maximum number of retry attempts.

            

          
          - **perRetryTimeout** *(dict) --* **[REQUIRED]** 

            The timeout for each retry attempt.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **tcpRetryEvents** *(list) --* 

            Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

            

          
            - *(string) --* 

            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **perRequest** *(dict) --* 

            An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
      - **httpRoute** *(dict) --* 

        An object that represents the specification of an HTTP route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          An object that represents the action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **match** *(dict) --* **[REQUIRED]** 

          An object that represents the criteria for determining a request match.

          

        
          - **headers** *(list) --* 

            The client request headers to match on.

            

          
            - *(dict) --* 

              An object that represents the HTTP header in the request.

              

            
              - **invert** *(boolean) --* 

                Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                

              
              - **match** *(dict) --* 

                The ``HeaderMatchMethod`` object.

                

              
                - **exact** *(string) --* 

                  The value sent by the client must match the specified value exactly.

                  

                
                - **prefix** *(string) --* 

                  The value sent by the client must begin with the specified characters.

                  

                
                - **range** *(dict) --* 

                  An object that represents the range of values to match on.

                  

                
                  - **end** *(integer) --* **[REQUIRED]** 

                    The end of the range.

                    

                  
                  - **start** *(integer) --* **[REQUIRED]** 

                    The start of the range.

                    

                  
                
                - **regex** *(string) --* 

                  The value sent by the client must include the specified characters.

                  

                
                - **suffix** *(string) --* 

                  The value sent by the client must end with the specified characters.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the HTTP header in the client request that will be matched on.

                

              
            
        
          - **method** *(string) --* 

            The client request method to match on. Specify only one.

            

          
          - **path** *(dict) --* 

            The client request path to match on.

            

          
            - **exact** *(string) --* 

              The exact path to match on.

              

            
            - **regex** *(string) --* 

              The regex used to match the path.

              

            
          
          - **prefix** *(string) --* 

            Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

            

          
          - **queryParameters** *(list) --* 

            The client request query parameters to match on.

            

          
            - *(dict) --* 

              An object that represents the query parameter in the request.

              

            
              - **match** *(dict) --* 

                The query parameter to match on.

                

              
                - **exact** *(string) --* 

                  The exact query parameter to match on.

                  

                
              
              - **name** *(string) --* **[REQUIRED]** 

                A name for the query parameter that will be matched on.

                

              
            
        
          - **scheme** *(string) --* 

            The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

            

          
        
        - **retryPolicy** *(dict) --* 

          An object that represents a retry policy.

          

        
          - **httpRetryEvents** *(list) --* 

            Specify at least one of the following values.

             

             
            * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
             
            * **gateway-error** – HTTP status codes 502, 503, and 504 
             
            * **client-error** – HTTP status code 409 
             
            * **stream-error** – Retry on refused stream 
             

            

          
            - *(string) --* 

            
        
          - **maxRetries** *(integer) --* **[REQUIRED]** 

            The maximum number of retry attempts.

            

          
          - **perRetryTimeout** *(dict) --* **[REQUIRED]** 

            The timeout for each retry attempt.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **tcpRetryEvents** *(list) --* 

            Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

            

          
            - *(string) --* 

            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
          - **perRequest** *(dict) --* 

            An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
      - **priority** *(integer) --* 

        The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.

        

      
      - **tcpRoute** *(dict) --* 

        An object that represents the specification of a TCP route.

        

      
        - **action** *(dict) --* **[REQUIRED]** 

          The action to take if a match is determined.

          

        
          - **weightedTargets** *(list) --* **[REQUIRED]** 

            An object that represents the targets that traffic is routed to when a request matches the route.

            

          
            - *(dict) --* 

              An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

              

            
              - **virtualNode** *(string) --* **[REQUIRED]** 

                The virtual node to associate with the weighted target.

                

              
              - **weight** *(integer) --* **[REQUIRED]** 

                The relative weight of the weighted target.

                

              
            
        
        
        - **timeout** *(dict) --* 

          An object that represents types of timeouts. 

          

        
          - **idle** *(dict) --* 

            An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

            

          
            - **unit** *(string) --* 

              A unit of time.

              

            
            - **value** *(integer) --* 

              A number of time units.

              

            
          
        
      
    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router that the route is associated with.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'route': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'routeName': 'string',
                'spec': {
                    'grpcRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'metadata': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'methodName': 'string',
                            'serviceName': 'string'
                        },
                        'retryPolicy': {
                            'grpcRetryEvents': [
                                'cancelled'|'deadline-exceeded'|'internal'|'resource-exhausted'|'unavailable',
                            ],
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'http2Route': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'httpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'match': {
                            'headers': [
                                {
                                    'invert': True|False,
                                    'match': {
                                        'exact': 'string',
                                        'prefix': 'string',
                                        'range': {
                                            'end': 123,
                                            'start': 123
                                        },
                                        'regex': 'string',
                                        'suffix': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'method': 'GET'|'HEAD'|'POST'|'PUT'|'DELETE'|'CONNECT'|'OPTIONS'|'TRACE'|'PATCH',
                            'path': {
                                'exact': 'string',
                                'regex': 'string'
                            },
                            'prefix': 'string',
                            'queryParameters': [
                                {
                                    'match': {
                                        'exact': 'string'
                                    },
                                    'name': 'string'
                                },
                            ],
                            'scheme': 'http'|'https'
                        },
                        'retryPolicy': {
                            'httpRetryEvents': [
                                'string',
                            ],
                            'maxRetries': 123,
                            'perRetryTimeout': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'tcpRetryEvents': [
                                'connection-error',
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            },
                            'perRequest': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    },
                    'priority': 123,
                    'tcpRoute': {
                        'action': {
                            'weightedTargets': [
                                {
                                    'virtualNode': 'string',
                                    'weight': 123
                                },
                            ]
                        },
                        'timeout': {
                            'idle': {
                                'unit': 's'|'ms',
                                'value': 123
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **route** *(dict) --* 

          A full description of the route that was updated.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the route resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the route.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **routeName** *(string) --* 

            The name of the route.

            
          

          - **spec** *(dict) --* 

            The specifications of the route.

            
            

            - **grpcRoute** *(dict) --* 

              An object that represents the specification of a gRPC route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **metadata** *(list) --* 

                  An object that represents the data to match from the request.

                  
                  

                  - *(dict) --* 

                    An object that represents the match metadata for the route.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      An object that represents the data to match from the request.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      The name of the route.

                      
                
              
                

                - **methodName** *(string) --* 

                  The method name to match from the request. If you specify a name, you must also specify a ``serviceName`` .

                  
                

                - **serviceName** *(string) --* 

                  The fully qualified domain name for the service to match from the request.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **grpcRetryEvents** *(list) --* 

                  Specify at least one of the valid values.

                  
                  

                  - *(string) --* 
              
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **http2Route** *(dict) --* 

              An object that represents the specification of an HTTP/2 route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **httpRoute** *(dict) --* 

              An object that represents the specification of an HTTP route.

              
              

              - **action** *(dict) --* 

                An object that represents the action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **match** *(dict) --* 

                An object that represents the criteria for determining a request match.

                
                

                - **headers** *(list) --* 

                  The client request headers to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the HTTP header in the request.

                    
                    

                    - **invert** *(boolean) --* 

                      Specify ``True`` to match anything except the match criteria. The default value is ``False`` .

                      
                    

                    - **match** *(dict) --* 

                      The ``HeaderMatchMethod`` object.

                      
                      

                      - **exact** *(string) --* 

                        The value sent by the client must match the specified value exactly.

                        
                      

                      - **prefix** *(string) --* 

                        The value sent by the client must begin with the specified characters.

                        
                      

                      - **range** *(dict) --* 

                        An object that represents the range of values to match on.

                        
                        

                        - **end** *(integer) --* 

                          The end of the range.

                          
                        

                        - **start** *(integer) --* 

                          The start of the range.

                          
                    
                      

                      - **regex** *(string) --* 

                        The value sent by the client must include the specified characters.

                        
                      

                      - **suffix** *(string) --* 

                        The value sent by the client must end with the specified characters.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the HTTP header in the client request that will be matched on.

                      
                
              
                

                - **method** *(string) --* 

                  The client request method to match on. Specify only one.

                  
                

                - **path** *(dict) --* 

                  The client request path to match on.

                  
                  

                  - **exact** *(string) --* 

                    The exact path to match on.

                    
                  

                  - **regex** *(string) --* 

                    The regex used to match the path.

                    
              
                

                - **prefix** *(string) --* 

                  Specifies the path to match requests with. This parameter must always start with ``/`` , which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is ``my-service.local`` and you want the route to match requests to ``my-service.local/metrics`` , your prefix should be ``/metrics`` .

                  
                

                - **queryParameters** *(list) --* 

                  The client request query parameters to match on.

                  
                  

                  - *(dict) --* 

                    An object that represents the query parameter in the request.

                    
                    

                    - **match** *(dict) --* 

                      The query parameter to match on.

                      
                      

                      - **exact** *(string) --* 

                        The exact query parameter to match on.

                        
                  
                    

                    - **name** *(string) --* 

                      A name for the query parameter that will be matched on.

                      
                
              
                

                - **scheme** *(string) --* 

                  The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.

                  
            
              

              - **retryPolicy** *(dict) --* 

                An object that represents a retry policy.

                
                

                - **httpRetryEvents** *(list) --* 

                  Specify at least one of the following values.

                   

                   
                  * **server-error** – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511 
                   
                  * **gateway-error** – HTTP status codes 502, 503, and 504 
                   
                  * **client-error** – HTTP status code 409 
                   
                  * **stream-error** – Retry on refused stream 
                   

                  
                  

                  - *(string) --* 
              
                

                - **maxRetries** *(integer) --* 

                  The maximum number of retry attempts.

                  
                

                - **perRetryTimeout** *(dict) --* 

                  The timeout for each retry attempt.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **tcpRetryEvents** *(list) --* 

                  Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.

                  
                  

                  - *(string) --* 
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
                

                - **perRequest** *(dict) --* 

                  An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
            

            - **priority** *(integer) --* 

              The priority for the route. Routes are matched based on the specified value, where 0 is the highest priority.

              
            

            - **tcpRoute** *(dict) --* 

              An object that represents the specification of a TCP route.

              
              

              - **action** *(dict) --* 

                The action to take if a match is determined.

                
                

                - **weightedTargets** *(list) --* 

                  An object that represents the targets that traffic is routed to when a request matches the route.

                  
                  

                  - *(dict) --* 

                    An object that represents a target and its relative weight. Traffic is distributed across targets according to their relative weight. For example, a weighted target with a relative weight of 50 receives five times as much traffic as one with a relative weight of 10. The total weight for all targets combined must be less than or equal to 100.

                    
                    

                    - **virtualNode** *(string) --* 

                      The virtual node to associate with the weighted target.

                      
                    

                    - **weight** *(integer) --* 

                      The relative weight of the weighted target.

                      
                
              
            
              

              - **timeout** *(dict) --* 

                An object that represents types of timeouts. 

                
                

                - **idle** *(dict) --* 

                  An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                  
                  

                  - **unit** *(string) --* 

                    A unit of time.

                    
                  

                  - **value** *(integer) --* 

                    A number of time units.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The status of the route.

            
            

            - **status** *(string) --* 

              The current status for the route.

              
        
          

          - **virtualRouterName** *(string) --* 

            The virtual router that the route is associated with.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: update_virtual_gateway(**kwargs)

    

    Updates an existing virtual gateway in a specified service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateVirtualGateway>`_    


    **Request Syntax** 
    ::

      response = client.update_virtual_gateway(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'backendDefaults': {
                  'clientPolicy': {
                      'tls': {
                          'certificate': {
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'enforce': True|False,
                          'ports': [
                              123,
                          ],
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'acm': {
                                      'certificateAuthorityArns': [
                                          'string',
                                      ]
                                  },
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  }
              },
              'listeners': [
                  {
                      'connectionPool': {
                          'grpc': {
                              'maxRequests': 123
                          },
                          'http': {
                              'maxConnections': 123,
                              'maxPendingRequests': 123
                          },
                          'http2': {
                              'maxRequests': 123
                          }
                      },
                      'healthCheck': {
                          'healthyThreshold': 123,
                          'intervalMillis': 123,
                          'path': 'string',
                          'port': 123,
                          'protocol': 'http'|'http2'|'grpc',
                          'timeoutMillis': 123,
                          'unhealthyThreshold': 123
                      },
                      'portMapping': {
                          'port': 123,
                          'protocol': 'http'|'http2'|'grpc'
                      },
                      'tls': {
                          'certificate': {
                              'acm': {
                                  'certificateArn': 'string'
                              },
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  },
              ],
              'logging': {
                  'accessLog': {
                      'file': {
                          'path': 'string'
                      }
                  }
              }
          },
          virtualGatewayName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the virtual gateway resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The new virtual gateway specification to apply. This overwrites the existing data.

      

    
      - **backendDefaults** *(dict) --* 

        A reference to an object that represents the defaults for backends.

        

      
        - **clientPolicy** *(dict) --* 

          A reference to an object that represents a client policy.

          

        
          - **tls** *(dict) --* 

            A reference to an object that represents a Transport Layer Security (TLS) client policy.

            

          
            - **certificate** *(dict) --* 

              A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.

              

            
              - **file** *(dict) --* 

                An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **enforce** *(boolean) --* 

              Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

              

            
            - **ports** *(list) --* 

              One or more ports that the policy is enforced for.

              

            
              - *(integer) --* 

              
          
            - **validation** *(dict) --* **[REQUIRED]** 

              A reference to an object that represents a Transport Layer Security (TLS) validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **acm** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                  

                
                  - **certificateAuthorityArns** *(list) --* **[REQUIRED]** 

                    One or more ACM Amazon Resource Name (ARN)s.

                    

                  
                    - *(string) --* 

                    
                
                
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
      
      - **listeners** *(list) --* **[REQUIRED]** 

        The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.

        

      
        - *(dict) --* 

          An object that represents a listener for a virtual gateway.

          

        
          - **connectionPool** *(dict) --* 

            The connection pool information for the virtual gateway listener.

            

          
            - **grpc** *(dict) --* 

              An object that represents a type of connection pool. 

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
            - **http** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxConnections** *(integer) --* **[REQUIRED]** 

                Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                

              
              - **maxPendingRequests** *(integer) --* 

                Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                

              
            
            - **http2** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
          
          - **healthCheck** *(dict) --* 

            The health check information for the listener.

            

          
            - **healthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive successful health checks that must occur before declaring the listener healthy.

              

            
            - **intervalMillis** *(integer) --* **[REQUIRED]** 

              The time period in milliseconds between each health check execution.

              

            
            - **path** *(string) --* 

              The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

              

            
            - **port** *(integer) --* 

              The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

              

            
            - **timeoutMillis** *(integer) --* **[REQUIRED]** 

              The amount of time to wait when receiving a response from the health check, in milliseconds.

              

            
            - **unhealthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.

              

            
          
          - **portMapping** *(dict) --* **[REQUIRED]** 

            The port mapping information for the listener.

            

          
            - **port** *(integer) --* **[REQUIRED]** 

              The port used for the port mapping. Specify one protocol.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol used for the port mapping.

              

            
          
          - **tls** *(dict) --* 

            A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.

            

          
            - **certificate** *(dict) --* **[REQUIRED]** 

              An object that represents a Transport Layer Security (TLS) certificate.

              

            
              - **acm** *(dict) --* 

                A reference to an object that represents an Certificate Manager certificate.

                

              
                - **certificateArn** *(string) --* **[REQUIRED]** 

                  The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                  

                
              
              - **file** *(dict) --* 

                A reference to an object that represents a local file certificate.

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **mode** *(string) --* **[REQUIRED]** 

              Specify one of the following modes.

               

               
              * STRICT – Listener only accepts connections with TLS enabled.  
               
              * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
               
              * DISABLED – Listener only accepts connections without TLS.  
               

              

            
            - **validation** *(dict) --* 

              A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
    
      - **logging** *(dict) --* 

        An object that represents logging information.

        

      
        - **accessLog** *(dict) --* 

          The access log configuration.

          

        
          - **file** *(dict) --* 

            The file object to send virtual gateway access logs to.

            

          
            - **path** *(string) --* **[REQUIRED]** 

              The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

              

            
          
        
      
    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualGateway': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'http2'|'grpc'
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualGatewayName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualGateway** *(dict) --* 

          A full description of the virtual gateway that was updated.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual gateway resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual gateway.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **listeners** *(list) --* 

              The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual gateway.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the virtual gateway listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool. 

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring the listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping. Specify one protocol.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping.

                    
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for the listener.

                  
                  

                  - **certificate** *(dict) --* 

                    An object that represents a Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an Certificate Manager certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a virtual gateway listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              An object that represents logging information.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual gateway access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual gateway.

            
            

            - **status** *(string) --* 

              The current status.

              
        
          

          - **virtualGatewayName** *(string) --* 

            The name of the virtual gateway.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: update_virtual_node(**kwargs)

    

    Updates an existing virtual node in a specified service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateVirtualNode>`_    


    **Request Syntax** 
    ::

      response = client.update_virtual_node(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'backendDefaults': {
                  'clientPolicy': {
                      'tls': {
                          'certificate': {
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'enforce': True|False,
                          'ports': [
                              123,
                          ],
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'acm': {
                                      'certificateAuthorityArns': [
                                          'string',
                                      ]
                                  },
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  }
              },
              'backends': [
                  {
                      'virtualService': {
                          'clientPolicy': {
                              'tls': {
                                  'certificate': {
                                      'file': {
                                          'certificateChain': 'string',
                                          'privateKey': 'string'
                                      },
                                      'sds': {
                                          'secretName': 'string'
                                      }
                                  },
                                  'enforce': True|False,
                                  'ports': [
                                      123,
                                  ],
                                  'validation': {
                                      'subjectAlternativeNames': {
                                          'match': {
                                              'exact': [
                                                  'string',
                                              ]
                                          }
                                      },
                                      'trust': {
                                          'acm': {
                                              'certificateAuthorityArns': [
                                                  'string',
                                              ]
                                          },
                                          'file': {
                                              'certificateChain': 'string'
                                          },
                                          'sds': {
                                              'secretName': 'string'
                                          }
                                      }
                                  }
                              }
                          },
                          'virtualServiceName': 'string'
                      }
                  },
              ],
              'listeners': [
                  {
                      'connectionPool': {
                          'grpc': {
                              'maxRequests': 123
                          },
                          'http': {
                              'maxConnections': 123,
                              'maxPendingRequests': 123
                          },
                          'http2': {
                              'maxRequests': 123
                          },
                          'tcp': {
                              'maxConnections': 123
                          }
                      },
                      'healthCheck': {
                          'healthyThreshold': 123,
                          'intervalMillis': 123,
                          'path': 'string',
                          'port': 123,
                          'protocol': 'http'|'tcp'|'http2'|'grpc',
                          'timeoutMillis': 123,
                          'unhealthyThreshold': 123
                      },
                      'outlierDetection': {
                          'baseEjectionDuration': {
                              'unit': 's'|'ms',
                              'value': 123
                          },
                          'interval': {
                              'unit': 's'|'ms',
                              'value': 123
                          },
                          'maxEjectionPercent': 123,
                          'maxServerErrors': 123
                      },
                      'portMapping': {
                          'port': 123,
                          'protocol': 'http'|'tcp'|'http2'|'grpc'
                      },
                      'timeout': {
                          'grpc': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              },
                              'perRequest': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          },
                          'http': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              },
                              'perRequest': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          },
                          'http2': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              },
                              'perRequest': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          },
                          'tcp': {
                              'idle': {
                                  'unit': 's'|'ms',
                                  'value': 123
                              }
                          }
                      },
                      'tls': {
                          'certificate': {
                              'acm': {
                                  'certificateArn': 'string'
                              },
                              'file': {
                                  'certificateChain': 'string',
                                  'privateKey': 'string'
                              },
                              'sds': {
                                  'secretName': 'string'
                              }
                          },
                          'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                          'validation': {
                              'subjectAlternativeNames': {
                                  'match': {
                                      'exact': [
                                          'string',
                                      ]
                                  }
                              },
                              'trust': {
                                  'file': {
                                      'certificateChain': 'string'
                                  },
                                  'sds': {
                                      'secretName': 'string'
                                  }
                              }
                          }
                      }
                  },
              ],
              'logging': {
                  'accessLog': {
                      'file': {
                          'path': 'string'
                      }
                  }
              },
              'serviceDiscovery': {
                  'awsCloudMap': {
                      'attributes': [
                          {
                              'key': 'string',
                              'value': 'string'
                          },
                      ],
                      'namespaceName': 'string',
                      'serviceName': 'string'
                  },
                  'dns': {
                      'hostname': 'string',
                      'responseType': 'LOADBALANCER'|'ENDPOINTS'
                  }
              }
          },
          virtualNodeName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the virtual node resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The new virtual node specification to apply. This overwrites the existing data.

      

    
      - **backendDefaults** *(dict) --* 

        A reference to an object that represents the defaults for backends.

        

      
        - **clientPolicy** *(dict) --* 

          A reference to an object that represents a client policy.

          

        
          - **tls** *(dict) --* 

            A reference to an object that represents a Transport Layer Security (TLS) client policy.

            

          
            - **certificate** *(dict) --* 

              A reference to an object that represents a client's TLS certificate.

              

            
              - **file** *(dict) --* 

                An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **enforce** *(boolean) --* 

              Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

              

            
            - **ports** *(list) --* 

              One or more ports that the policy is enforced for.

              

            
              - *(integer) --* 

              
          
            - **validation** *(dict) --* **[REQUIRED]** 

              A reference to an object that represents a TLS validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **acm** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                  

                
                  - **certificateAuthorityArns** *(list) --* **[REQUIRED]** 

                    One or more ACM Amazon Resource Name (ARN)s.

                    

                  
                    - *(string) --* 

                    
                
                
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
      
      - **backends** *(list) --* 

        The backends that the virtual node is expected to send outbound traffic to.

        

      
        - *(dict) --* 

          An object that represents the backends that a virtual node is expected to send outbound traffic to.

          

        
          - **virtualService** *(dict) --* 

            Specifies a virtual service to use as a backend. 

            

          
            - **clientPolicy** *(dict) --* 

              A reference to an object that represents the client policy for a backend.

              

            
              - **tls** *(dict) --* 

                A reference to an object that represents a Transport Layer Security (TLS) client policy.

                

              
                - **certificate** *(dict) --* 

                  A reference to an object that represents a client's TLS certificate.

                  

                
                  - **file** *(dict) --* 

                    An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                    

                  
                    - **certificateChain** *(string) --* **[REQUIRED]** 

                      The certificate chain for the certificate.

                      

                    
                    - **privateKey** *(string) --* **[REQUIRED]** 

                      The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                      

                    
                  
                  - **sds** *(dict) --* 

                    A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                    

                  
                    - **secretName** *(string) --* **[REQUIRED]** 

                      A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                      

                    
                  
                
                - **enforce** *(boolean) --* 

                  Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                  

                
                - **ports** *(list) --* 

                  One or more ports that the policy is enforced for.

                  

                
                  - *(integer) --* 

                  
              
                - **validation** *(dict) --* **[REQUIRED]** 

                  A reference to an object that represents a TLS validation context.

                  

                
                  - **subjectAlternativeNames** *(dict) --* 

                    A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                    

                  
                    - **match** *(dict) --* **[REQUIRED]** 

                      An object that represents the criteria for determining a SANs match.

                      

                    
                      - **exact** *(list) --* **[REQUIRED]** 

                        The values sent must match the specified values exactly.

                        

                      
                        - *(string) --* 

                        
                    
                    
                  
                  - **trust** *(dict) --* **[REQUIRED]** 

                    A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                    

                  
                    - **acm** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                      

                    
                      - **certificateAuthorityArns** *(list) --* **[REQUIRED]** 

                        One or more ACM Amazon Resource Name (ARN)s.

                        

                      
                        - *(string) --* 

                        
                    
                    
                    - **file** *(dict) --* 

                      An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                      

                    
                      - **certificateChain** *(string) --* **[REQUIRED]** 

                        The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                        

                      
                    
                    - **sds** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                      

                    
                      - **secretName** *(string) --* **[REQUIRED]** 

                        A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        

                      
                    
                  
                
              
            
            - **virtualServiceName** *(string) --* **[REQUIRED]** 

              The name of the virtual service that is acting as a virtual node backend.

              

            
          
        
    
      - **listeners** *(list) --* 

        The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.

        

      
        - *(dict) --* 

          An object that represents a listener for a virtual node.

          

        
          - **connectionPool** *(dict) --* 

            The connection pool information for the listener.

            

          
            - **grpc** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
            - **http** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxConnections** *(integer) --* **[REQUIRED]** 

                Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                

              
              - **maxPendingRequests** *(integer) --* 

                Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                

              
            
            - **http2** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxRequests** *(integer) --* **[REQUIRED]** 

                Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                

              
            
            - **tcp** *(dict) --* 

              An object that represents a type of connection pool.

              

            
              - **maxConnections** *(integer) --* **[REQUIRED]** 

                Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                

              
            
          
          - **healthCheck** *(dict) --* 

            The health check information for the listener.

            

          
            - **healthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive successful health checks that must occur before declaring listener healthy.

              

            
            - **intervalMillis** *(integer) --* **[REQUIRED]** 

              The time period in milliseconds between each health check execution.

              

            
            - **path** *(string) --* 

              The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

              

            
            - **port** *(integer) --* 

              The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

              

            
            - **timeoutMillis** *(integer) --* **[REQUIRED]** 

              The amount of time to wait when receiving a response from the health check, in milliseconds.

              

            
            - **unhealthyThreshold** *(integer) --* **[REQUIRED]** 

              The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. 

              

            
          
          - **outlierDetection** *(dict) --* 

            The outlier detection information for the listener.

            

          
            - **baseEjectionDuration** *(dict) --* **[REQUIRED]** 

              The base amount of time for which a host is ejected.

              

            
              - **unit** *(string) --* 

                A unit of time.

                

              
              - **value** *(integer) --* 

                A number of time units.

                

              
            
            - **interval** *(dict) --* **[REQUIRED]** 

              The time interval between ejection sweep analysis.

              

            
              - **unit** *(string) --* 

                A unit of time.

                

              
              - **value** *(integer) --* 

                A number of time units.

                

              
            
            - **maxEjectionPercent** *(integer) --* **[REQUIRED]** 

              Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.

              

            
            - **maxServerErrors** *(integer) --* **[REQUIRED]** 

              Number of consecutive ``5xx`` errors required for ejection. 

              

            
          
          - **portMapping** *(dict) --* **[REQUIRED]** 

            The port mapping information for the listener.

            

          
            - **port** *(integer) --* **[REQUIRED]** 

              The port used for the port mapping.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol used for the port mapping. Specify one protocol.

              

            
          
          - **timeout** *(dict) --* 

            An object that represents timeouts for different protocols.

            

          
            - **grpc** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
              - **perRequest** *(dict) --* 

                An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
            - **http** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
              - **perRequest** *(dict) --* 

                An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
            - **http2** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
              - **perRequest** *(dict) --* 

                An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
            - **tcp** *(dict) --* 

              An object that represents types of timeouts. 

              

            
              - **idle** *(dict) --* 

                An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                

              
                - **unit** *(string) --* 

                  A unit of time.

                  

                
                - **value** *(integer) --* 

                  A number of time units.

                  

                
              
            
          
          - **tls** *(dict) --* 

            A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.

            

          
            - **certificate** *(dict) --* **[REQUIRED]** 

              A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.

              

            
              - **acm** *(dict) --* 

                A reference to an object that represents an AWS Certicate Manager (ACM) certificate.

                

              
                - **certificateArn** *(string) --* **[REQUIRED]** 

                  The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                  

                
              
              - **file** *(dict) --* 

                A reference to an object that represents a local file certificate.

                

              
                - **certificateChain** *(string) --* **[REQUIRED]** 

                  The certificate chain for the certificate.

                  

                
                - **privateKey** *(string) --* **[REQUIRED]** 

                  The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                  

                
              
              - **sds** *(dict) --* 

                A reference to an object that represents a listener's Secret Discovery Service certificate.

                

              
                - **secretName** *(string) --* **[REQUIRED]** 

                  A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                  

                
              
            
            - **mode** *(string) --* **[REQUIRED]** 

              Specify one of the following modes.

               

               
              * STRICT – Listener only accepts connections with TLS enabled.  
               
              * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
               
              * DISABLED – Listener only accepts connections without TLS.  
               

              

            
            - **validation** *(dict) --* 

              A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.

              

            
              - **subjectAlternativeNames** *(dict) --* 

                A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context.

                

              
                - **match** *(dict) --* **[REQUIRED]** 

                  An object that represents the criteria for determining a SANs match.

                  

                
                  - **exact** *(list) --* **[REQUIRED]** 

                    The values sent must match the specified values exactly.

                    

                  
                    - *(string) --* 

                    
                
                
              
              - **trust** *(dict) --* **[REQUIRED]** 

                A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                

              
                - **file** *(dict) --* 

                  An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                  

                
                  - **certificateChain** *(string) --* **[REQUIRED]** 

                    The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                    

                  
                
                - **sds** *(dict) --* 

                  A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                  

                
                  - **secretName** *(string) --* **[REQUIRED]** 

                    A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                    

                  
                
              
            
          
        
    
      - **logging** *(dict) --* 

        The inbound and outbound access logging information for the virtual node.

        

      
        - **accessLog** *(dict) --* 

          The access log configuration for a virtual node.

          

        
          - **file** *(dict) --* 

            The file object to send virtual node access logs to.

            

          
            - **path** *(string) --* **[REQUIRED]** 

              The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

               

              .. note::

                 

                The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.

                 

              

            
          
        
      
      - **serviceDiscovery** *(dict) --* 

        The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a ``listener`` , then you must specify service discovery information.

        

      
        - **awsCloudMap** *(dict) --* 

          Specifies any Cloud Map information for the virtual node.

          

        
          - **attributes** *(list) --* 

            A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.

            

          
            - *(dict) --* 

              An object that represents the Cloud Map attribute information for your virtual node.

               

              .. note::

                 

                AWS Cloud Map is not available in the eu-south-1 Region.

                 

              

            
              - **key** *(string) --* **[REQUIRED]** 

                The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                

              
              - **value** *(string) --* **[REQUIRED]** 

                The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                

              
            
        
          - **namespaceName** *(string) --* **[REQUIRED]** 

            The name of the Cloud Map namespace to use.

            

          
          - **serviceName** *(string) --* **[REQUIRED]** 

            The name of the Cloud Map service to use.

            

          
        
        - **dns** *(dict) --* 

          Specifies the DNS information for the virtual node.

          

        
          - **hostname** *(string) --* **[REQUIRED]** 

            Specifies the DNS service discovery hostname for the virtual node. 

            

          
          - **responseType** *(string) --* 

            Specifies the DNS response type for the virtual node.

            

          
        
      
    
    :type virtualNodeName: string
    :param virtualNodeName: **[REQUIRED]** 

      The name of the virtual node to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualNode': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'backendDefaults': {
                        'clientPolicy': {
                            'tls': {
                                'certificate': {
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'enforce': True|False,
                                'ports': [
                                    123,
                                ],
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'acm': {
                                            'certificateAuthorityArns': [
                                                'string',
                                            ]
                                        },
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    'backends': [
                        {
                            'virtualService': {
                                'clientPolicy': {
                                    'tls': {
                                        'certificate': {
                                            'file': {
                                                'certificateChain': 'string',
                                                'privateKey': 'string'
                                            },
                                            'sds': {
                                                'secretName': 'string'
                                            }
                                        },
                                        'enforce': True|False,
                                        'ports': [
                                            123,
                                        ],
                                        'validation': {
                                            'subjectAlternativeNames': {
                                                'match': {
                                                    'exact': [
                                                        'string',
                                                    ]
                                                }
                                            },
                                            'trust': {
                                                'acm': {
                                                    'certificateAuthorityArns': [
                                                        'string',
                                                    ]
                                                },
                                                'file': {
                                                    'certificateChain': 'string'
                                                },
                                                'sds': {
                                                    'secretName': 'string'
                                                }
                                            }
                                        }
                                    }
                                },
                                'virtualServiceName': 'string'
                            }
                        },
                    ],
                    'listeners': [
                        {
                            'connectionPool': {
                                'grpc': {
                                    'maxRequests': 123
                                },
                                'http': {
                                    'maxConnections': 123,
                                    'maxPendingRequests': 123
                                },
                                'http2': {
                                    'maxRequests': 123
                                },
                                'tcp': {
                                    'maxConnections': 123
                                }
                            },
                            'healthCheck': {
                                'healthyThreshold': 123,
                                'intervalMillis': 123,
                                'path': 'string',
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc',
                                'timeoutMillis': 123,
                                'unhealthyThreshold': 123
                            },
                            'outlierDetection': {
                                'baseEjectionDuration': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'interval': {
                                    'unit': 's'|'ms',
                                    'value': 123
                                },
                                'maxEjectionPercent': 123,
                                'maxServerErrors': 123
                            },
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            },
                            'timeout': {
                                'grpc': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'http2': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    },
                                    'perRequest': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                },
                                'tcp': {
                                    'idle': {
                                        'unit': 's'|'ms',
                                        'value': 123
                                    }
                                }
                            },
                            'tls': {
                                'certificate': {
                                    'acm': {
                                        'certificateArn': 'string'
                                    },
                                    'file': {
                                        'certificateChain': 'string',
                                        'privateKey': 'string'
                                    },
                                    'sds': {
                                        'secretName': 'string'
                                    }
                                },
                                'mode': 'STRICT'|'PERMISSIVE'|'DISABLED',
                                'validation': {
                                    'subjectAlternativeNames': {
                                        'match': {
                                            'exact': [
                                                'string',
                                            ]
                                        }
                                    },
                                    'trust': {
                                        'file': {
                                            'certificateChain': 'string'
                                        },
                                        'sds': {
                                            'secretName': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'logging': {
                        'accessLog': {
                            'file': {
                                'path': 'string'
                            }
                        }
                    },
                    'serviceDiscovery': {
                        'awsCloudMap': {
                            'attributes': [
                                {
                                    'key': 'string',
                                    'value': 'string'
                                },
                            ],
                            'namespaceName': 'string',
                            'serviceName': 'string'
                        },
                        'dns': {
                            'hostname': 'string',
                            'responseType': 'LOADBALANCER'|'ENDPOINTS'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualNodeName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualNode** *(dict) --* 

          A full description of the virtual node that was updated.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual node resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual node.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual node.

            
            

            - **backendDefaults** *(dict) --* 

              A reference to an object that represents the defaults for backends.

              
              

              - **clientPolicy** *(dict) --* 

                A reference to an object that represents a client policy.

                
                

                - **tls** *(dict) --* 

                  A reference to an object that represents a Transport Layer Security (TLS) client policy.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a client's TLS certificate.

                    
                    

                    - **file** *(dict) --* 

                      An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **enforce** *(boolean) --* 

                    Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                    
                  

                  - **ports** *(list) --* 

                    One or more ports that the policy is enforced for.

                    
                    

                    - *(integer) --* 
                
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a TLS validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **acm** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                        
                        

                        - **certificateAuthorityArns** *(list) --* 

                          One or more ACM Amazon Resource Name (ARN)s.

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **backends** *(list) --* 

              The backends that the virtual node is expected to send outbound traffic to.

              
              

              - *(dict) --* 

                An object that represents the backends that a virtual node is expected to send outbound traffic to.

                
                

                - **virtualService** *(dict) --* 

                  Specifies a virtual service to use as a backend. 

                  
                  

                  - **clientPolicy** *(dict) --* 

                    A reference to an object that represents the client policy for a backend.

                    
                    

                    - **tls** *(dict) --* 

                      A reference to an object that represents a Transport Layer Security (TLS) client policy.

                      
                      

                      - **certificate** *(dict) --* 

                        A reference to an object that represents a client's TLS certificate.

                        
                        

                        - **file** *(dict) --* 

                          An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html>`__ .

                          
                          

                          - **certificateChain** *(string) --* 

                            The certificate chain for the certificate.

                            
                          

                          - **privateKey** *(string) --* 

                            The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                            
                      
                        

                        - **sds** *(dict) --* 

                          A reference to an object that represents a client's TLS Secret Discovery Service certificate.

                          
                          

                          - **secretName** *(string) --* 

                            A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                            
                      
                    
                      

                      - **enforce** *(boolean) --* 

                        Whether the policy is enforced. The default is ``True`` , if a value isn't specified.

                        
                      

                      - **ports** *(list) --* 

                        One or more ports that the policy is enforced for.

                        
                        

                        - *(integer) --* 
                    
                      

                      - **validation** *(dict) --* 

                        A reference to an object that represents a TLS validation context.

                        
                        

                        - **subjectAlternativeNames** *(dict) --* 

                          A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context.

                          
                          

                          - **match** *(dict) --* 

                            An object that represents the criteria for determining a SANs match.

                            
                            

                            - **exact** *(list) --* 

                              The values sent must match the specified values exactly.

                              
                              

                              - *(string) --* 
                          
                        
                      
                        

                        - **trust** *(dict) --* 

                          A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                          
                          

                          - **acm** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.

                            
                            

                            - **certificateAuthorityArns** *(list) --* 

                              One or more ACM Amazon Resource Name (ARN)s.

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **file** *(dict) --* 

                            An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                            
                            

                            - **certificateChain** *(string) --* 

                              The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                              
                        
                          

                          - **sds** *(dict) --* 

                            A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                            
                            

                            - **secretName** *(string) --* 

                              A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                              
                        
                      
                    
                  
                
                  

                  - **virtualServiceName** *(string) --* 

                    The name of the virtual service that is acting as a virtual node backend.

                    
              
            
          
            

            - **listeners** *(list) --* 

              The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a listener for a virtual node.

                
                

                - **connectionPool** *(dict) --* 

                  The connection pool information for the listener.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **http** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                    

                    - **maxPendingRequests** *(integer) --* 

                      Number of overflowing requests after ``max_connections`` Envoy will queue to upstream cluster.

                      
                
                  

                  - **http2** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxRequests** *(integer) --* 

                      Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster.

                      
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents a type of connection pool.

                    
                    

                    - **maxConnections** *(integer) --* 

                      Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster.

                      
                
              
                

                - **healthCheck** *(dict) --* 

                  The health check information for the listener.

                  
                  

                  - **healthyThreshold** *(integer) --* 

                    The number of consecutive successful health checks that must occur before declaring listener healthy.

                    
                  

                  - **intervalMillis** *(integer) --* 

                    The time period in milliseconds between each health check execution.

                    
                  

                  - **path** *(string) --* 

                    The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.

                    
                  

                  - **port** *(integer) --* 

                    The destination port for the health check request. This port must match the port defined in the  PortMapping for the listener.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol for the health check request. If you specify ``grpc`` , then your service must conform to the `GRPC Health Checking Protocol <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`__ .

                    
                  

                  - **timeoutMillis** *(integer) --* 

                    The amount of time to wait when receiving a response from the health check, in milliseconds.

                    
                  

                  - **unhealthyThreshold** *(integer) --* 

                    The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. 

                    
              
                

                - **outlierDetection** *(dict) --* 

                  The outlier detection information for the listener.

                  
                  

                  - **baseEjectionDuration** *(dict) --* 

                    The base amount of time for which a host is ejected.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **interval** *(dict) --* 

                    The time interval between ejection sweep analysis.

                    
                    

                    - **unit** *(string) --* 

                      A unit of time.

                      
                    

                    - **value** *(integer) --* 

                      A number of time units.

                      
                
                  

                  - **maxEjectionPercent** *(integer) --* 

                    Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.

                    
                  

                  - **maxServerErrors** *(integer) --* 

                    Number of consecutive ``5xx`` errors required for ejection. 

                    
              
                

                - **portMapping** *(dict) --* 

                  The port mapping information for the listener.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
                

                - **timeout** *(dict) --* 

                  An object that represents timeouts for different protocols.

                  
                  

                  - **grpc** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **http2** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                    

                    - **perRequest** *(dict) --* 

                      An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
                  

                  - **tcp** *(dict) --* 

                    An object that represents types of timeouts. 

                    
                    

                    - **idle** *(dict) --* 

                      An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.

                      
                      

                      - **unit** *(string) --* 

                        A unit of time.

                        
                      

                      - **value** *(integer) --* 

                        A number of time units.

                        
                  
                
              
                

                - **tls** *(dict) --* 

                  A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.

                  
                  

                  - **certificate** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.

                    
                    

                    - **acm** *(dict) --* 

                      A reference to an object that represents an AWS Certicate Manager (ACM) certificate.

                      
                      

                      - **certificateArn** *(string) --* 

                        The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see `Transport Layer Security (TLS) <https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites>`__ .

                        
                  
                    

                    - **file** *(dict) --* 

                      A reference to an object that represents a local file certificate.

                      
                      

                      - **certificateChain** *(string) --* 

                        The certificate chain for the certificate.

                        
                      

                      - **privateKey** *(string) --* 

                        The private key for a certificate stored on the file system of the virtual node that the proxy is running on.

                        
                  
                    

                    - **sds** *(dict) --* 

                      A reference to an object that represents a listener's Secret Discovery Service certificate.

                      
                      

                      - **secretName** *(string) --* 

                        A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.

                        
                  
                
                  

                  - **mode** *(string) --* 

                    Specify one of the following modes.

                     

                     
                    * STRICT – Listener only accepts connections with TLS enabled.  
                     
                    * PERMISSIVE – Listener accepts connections with or without TLS enabled. 
                     
                    * DISABLED – Listener only accepts connections without TLS.  
                     

                    
                  

                  - **validation** *(dict) --* 

                    A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.

                    
                    

                    - **subjectAlternativeNames** *(dict) --* 

                      A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context.

                      
                      

                      - **match** *(dict) --* 

                        An object that represents the criteria for determining a SANs match.

                        
                        

                        - **exact** *(list) --* 

                          The values sent must match the specified values exactly.

                          
                          

                          - *(string) --* 
                      
                    
                  
                    

                    - **trust** *(dict) --* 

                      A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate.

                      
                      

                      - **file** *(dict) --* 

                        An object that represents a Transport Layer Security (TLS) validation context trust for a local file.

                        
                        

                        - **certificateChain** *(string) --* 

                          The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.

                          
                    
                      

                      - **sds** *(dict) --* 

                        A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                        
                        

                        - **secretName** *(string) --* 

                          A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust.

                          
                    
                  
                
              
            
          
            

            - **logging** *(dict) --* 

              The inbound and outbound access logging information for the virtual node.

              
              

              - **accessLog** *(dict) --* 

                The access log configuration for a virtual node.

                
                

                - **file** *(dict) --* 

                  The file object to send virtual node access logs to.

                  
                  

                  - **path** *(string) --* 

                    The file path to write access logs to. You can use ``/dev/stdout`` to send access logs to standard out and configure your Envoy container to use a log driver, such as ``awslogs`` , to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.

                     

                    .. note::

                       

                      The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.

                       

                    
              
            
          
            

            - **serviceDiscovery** *(dict) --* 

              The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a ``listener`` , then you must specify service discovery information.

              
              

              - **awsCloudMap** *(dict) --* 

                Specifies any Cloud Map information for the virtual node.

                
                

                - **attributes** *(list) --* 

                  A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.

                  
                  

                  - *(dict) --* 

                    An object that represents the Cloud Map attribute information for your virtual node.

                     

                    .. note::

                       

                      AWS Cloud Map is not available in the eu-south-1 Region.

                       

                    
                    

                    - **key** *(string) --* 

                      The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                    

                    - **value** *(string) --* 

                      The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned.

                      
                
              
                

                - **namespaceName** *(string) --* 

                  The name of the Cloud Map namespace to use.

                  
                

                - **serviceName** *(string) --* 

                  The name of the Cloud Map service to use.

                  
            
              

              - **dns** *(dict) --* 

                Specifies the DNS information for the virtual node.

                
                

                - **hostname** *(string) --* 

                  Specifies the DNS service discovery hostname for the virtual node. 

                  
                

                - **responseType** *(string) --* 

                  Specifies the DNS response type for the virtual node.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status for the virtual node.

            
            

            - **status** *(string) --* 

              The current status of the virtual node.

              
        
          

          - **virtualNodeName** *(string) --* 

            The name of the virtual node.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: update_virtual_router(**kwargs)

    

    Updates an existing virtual router in a specified service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateVirtualRouter>`_    


    **Request Syntax** 
    ::

      response = client.update_virtual_router(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'listeners': [
                  {
                      'portMapping': {
                          'port': 123,
                          'protocol': 'http'|'tcp'|'http2'|'grpc'
                      }
                  },
              ]
          },
          virtualRouterName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the virtual router resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The new virtual router specification to apply. This overwrites the existing data.

      

    
      - **listeners** *(list) --* 

        The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.

        

      
        - *(dict) --* 

          An object that represents a virtual router listener.

          

        
          - **portMapping** *(dict) --* **[REQUIRED]** 

            An object that represents a port mapping.

            

          
            - **port** *(integer) --* **[REQUIRED]** 

              The port used for the port mapping.

              

            
            - **protocol** *(string) --* **[REQUIRED]** 

              The protocol used for the port mapping. Specify one protocol.

              

            
          
        
    
    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualRouter': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'listeners': [
                        {
                            'portMapping': {
                                'port': 123,
                                'protocol': 'http'|'tcp'|'http2'|'grpc'
                            }
                        },
                    ]
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualRouterName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualRouter** *(dict) --* 

          A full description of the virtual router that was updated.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual router resides in.

            
          

          - **metadata** *(dict) --* 

            The associated metadata for the virtual router.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual router.

            
            

            - **listeners** *(list) --* 

              The listeners that the virtual router is expected to receive inbound traffic from. You can specify one listener.

              
              

              - *(dict) --* 

                An object that represents a virtual router listener.

                
                

                - **portMapping** *(dict) --* 

                  An object that represents a port mapping.

                  
                  

                  - **port** *(integer) --* 

                    The port used for the port mapping.

                    
                  

                  - **protocol** *(string) --* 

                    The protocol used for the port mapping. Specify one protocol.

                    
              
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual router.

            
            

            - **status** *(string) --* 

              The current status of the virtual router.

              
        
          

          - **virtualRouterName** *(string) --* 

            The name of the virtual router.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

  .. py:method:: update_virtual_service(**kwargs)

    

    Updates an existing virtual service in a specified service mesh.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/UpdateVirtualService>`_    


    **Request Syntax** 
    ::

      response = client.update_virtual_service(
          clientToken='string',
          meshName='string',
          meshOwner='string',
          spec={
              'provider': {
                  'virtualNode': {
                      'virtualNodeName': 'string'
                  },
                  'virtualRouter': {
                      'virtualRouterName': 'string'
                  }
              }
          },
          virtualServiceName='string'
      )
    :type clientToken: string
    :param clientToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

      This field is autopopulated if not provided.

    
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh that the virtual service resides in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type spec: dict
    :param spec: **[REQUIRED]** 

      The new virtual service specification to apply. This overwrites the existing data.

      

    
      - **provider** *(dict) --* 

        The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

        

      
        - **virtualNode** *(dict) --* 

          The virtual node associated with a virtual service.

          

        
          - **virtualNodeName** *(string) --* **[REQUIRED]** 

            The name of the virtual node that is acting as a service provider.

            

          
        
        - **virtualRouter** *(dict) --* 

          The virtual router associated with a virtual service.

          

        
          - **virtualRouterName** *(string) --* **[REQUIRED]** 

            The name of the virtual router that is acting as a service provider.

            

          
        
      
    
    :type virtualServiceName: string
    :param virtualServiceName: **[REQUIRED]** 

      The name of the virtual service to update.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualService': {
                'meshName': 'string',
                'metadata': {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'uid': 'string',
                    'version': 123
                },
                'spec': {
                    'provider': {
                        'virtualNode': {
                            'virtualNodeName': 'string'
                        },
                        'virtualRouter': {
                            'virtualRouterName': 'string'
                        }
                    }
                },
                'status': {
                    'status': 'ACTIVE'|'INACTIVE'|'DELETED'
                },
                'virtualServiceName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualService** *(dict) --* 

          A full description of the virtual service that was updated.

          
          

          - **meshName** *(string) --* 

            The name of the service mesh that the virtual service resides in.

            
          

          - **metadata** *(dict) --* 

            An object that represents metadata for a resource.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **uid** *(string) --* 

              The unique identifier for the resource.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
          

          - **spec** *(dict) --* 

            The specifications of the virtual service.

            
            

            - **provider** *(dict) --* 

              The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

              
              

              - **virtualNode** *(dict) --* 

                The virtual node associated with a virtual service.

                
                

                - **virtualNodeName** *(string) --* 

                  The name of the virtual node that is acting as a service provider.

                  
            
              

              - **virtualRouter** *(dict) --* 

                The virtual router associated with a virtual service.

                
                

                - **virtualRouterName** *(string) --* 

                  The name of the virtual router that is acting as a service provider.

                  
            
          
        
          

          - **status** *(dict) --* 

            The current status of the virtual service.

            
            

            - **status** *(string) --* 

              The current status of the virtual service.

              
        
          

          - **virtualServiceName** *(string) --* 

            The name of the virtual service.

            
      
    
    **Exceptions** 
    
    *     :py:class:`AppMesh.Client.exceptions.NotFoundException`

    
    *     :py:class:`AppMesh.Client.exceptions.BadRequestException`

    
    *     :py:class:`AppMesh.Client.exceptions.ConflictException`

    
    *     :py:class:`AppMesh.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`AppMesh.Client.exceptions.ForbiddenException`

    
    *     :py:class:`AppMesh.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`AppMesh.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`AppMesh.Client.exceptions.LimitExceededException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`AppMesh.Paginator.ListGatewayRoutes`


* :py:class:`AppMesh.Paginator.ListMeshes`


* :py:class:`AppMesh.Paginator.ListRoutes`


* :py:class:`AppMesh.Paginator.ListTagsForResource`


* :py:class:`AppMesh.Paginator.ListVirtualGateways`


* :py:class:`AppMesh.Paginator.ListVirtualNodes`


* :py:class:`AppMesh.Paginator.ListVirtualRouters`


* :py:class:`AppMesh.Paginator.ListVirtualServices`



.. py:class:: AppMesh.Paginator.ListGatewayRoutes

  ::

    
    paginator = client.get_paginator('list_gateway_routes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_gateway_routes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListGatewayRoutes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          meshName='string',
          meshOwner='string',
          virtualGatewayName='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list gateway routes in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualGatewayName: string
    :param virtualGatewayName: **[REQUIRED]** 

      The name of the virtual gateway to list gateway routes in.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayRoutes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'gatewayRouteName': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualGatewayName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayRoutes** *(list) --* 

          The list of existing gateway routes for the specified service mesh and virtual gateway.

          
          

          - *(dict) --* 

            An object that represents a gateway route returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the gateway route.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **gatewayRouteName** *(string) --* 

              The name of the gateway route.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the resource resides in. 

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualGatewayName** *(string) --* 

              The virtual gateway that the gateway route is associated with.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppMesh.Paginator.ListMeshes

  ::

    
    paginator = client.get_paginator('list_meshes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_meshes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListMeshes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'meshes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **meshes** *(list) --* 

          The list of existing service meshes.

          
          

          - *(dict) --* 

            An object that represents a service mesh returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) of the service mesh.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppMesh.Paginator.ListRoutes

  ::

    
    paginator = client.get_paginator('list_routes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_routes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListRoutes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          meshName='string',
          meshOwner='string',
          virtualRouterName='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list routes in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type virtualRouterName: string
    :param virtualRouterName: **[REQUIRED]** 

      The name of the virtual router to list routes in.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'routes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'routeName': 'string',
                    'version': 123,
                    'virtualRouterName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **routes** *(list) --* 

          The list of existing routes for the specified service mesh and virtual router.

          
          

          - *(dict) --* 

            An object that represents a route returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the route.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the route resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **routeName** *(string) --* 

              The name of the route.

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualRouterName** *(string) --* 

              The virtual router that the route is associated with.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppMesh.Paginator.ListTagsForResource

  ::

    
    paginator = client.get_paginator('list_tags_for_resource')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_tags_for_resource`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          resourceArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) that identifies the resource to list the tags for.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': [
                {
                    'key': 'string',
                    'value': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(list) --* 

          The tags for the resource.

          
          

          - *(dict) --* 

            Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

            
            

            - **key** *(string) --* 

              One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.

              
            

            - **value** *(string) --* 

              The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppMesh.Paginator.ListVirtualGateways

  ::

    
    paginator = client.get_paginator('list_virtual_gateways')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_virtual_gateways`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualGateways>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          meshName='string',
          meshOwner='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual gateways in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualGateways': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualGatewayName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualGateways** *(list) --* 

          The list of existing virtual gateways for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual gateway returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the resource resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualGatewayName** *(string) --* 

              The name of the resource.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppMesh.Paginator.ListVirtualNodes

  ::

    
    paginator = client.get_paginator('list_virtual_nodes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_virtual_nodes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualNodes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          meshName='string',
          meshOwner='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual nodes in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualNodes': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualNodeName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualNodes** *(list) --* 

          The list of existing virtual nodes for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual node returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the virtual node.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the virtual node resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualNodeName** *(string) --* 

              The name of the virtual node.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppMesh.Paginator.ListVirtualRouters

  ::

    
    paginator = client.get_paginator('list_virtual_routers')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_virtual_routers`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualRouters>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          meshName='string',
          meshOwner='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual routers in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualRouters': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualRouterName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualRouters** *(list) --* 

          The list of existing virtual routers for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual router returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the virtual router.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the virtual router resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualRouterName** *(string) --* 

              The name of the virtual router.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: AppMesh.Paginator.ListVirtualServices

  ::

    
    paginator = client.get_paginator('list_virtual_services')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`AppMesh.Client.list_virtual_services`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/appmesh-2019-01-25/ListVirtualServices>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          meshName='string',
          meshOwner='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type meshName: string
    :param meshName: **[REQUIRED]** 

      The name of the service mesh to list virtual services in.

      

    
    :type meshOwner: string
    :param meshOwner: 

      The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'virtualServices': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'meshName': 'string',
                    'meshOwner': 'string',
                    'resourceOwner': 'string',
                    'version': 123,
                    'virtualServiceName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **virtualServices** *(list) --* 

          The list of existing virtual services for the specified service mesh.

          
          

          - *(dict) --* 

            An object that represents a virtual service returned by a list operation.

            
            

            - **arn** *(string) --* 

              The full Amazon Resource Name (ARN) for the virtual service.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was last updated.

              
            

            - **meshName** *(string) --* 

              The name of the service mesh that the virtual service resides in.

              
            

            - **meshOwner** *(string) --* 

              The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **resourceOwner** *(string) --* 

              The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's the ID of the mesh owner or of another account that the mesh is shared with. For more information about mesh sharing, see `Working with shared meshes <https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html>`__ .

              
            

            - **version** *(integer) --* 

              The version of the resource. Resources are created at version 1, and this version is incremented each time that they're updated.

              
            

            - **virtualServiceName** *(string) --* 

              The name of the virtual service.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    