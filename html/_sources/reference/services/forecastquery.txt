

********************
ForecastQueryService
********************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: ForecastQueryService.Client

  A low-level client representing Amazon Forecast Query Service
  

  Provides APIs for creating and managing Amazon Forecast resources.

  ::

    
    import boto3
    
    client = boto3.client('forecastquery')

  
  These are the available methods:
  
  *   :py:meth:`~ForecastQueryService.Client.can_paginate`

  
  *   :py:meth:`~ForecastQueryService.Client.generate_presigned_url`

  
  *   :py:meth:`~ForecastQueryService.Client.get_paginator`

  
  *   :py:meth:`~ForecastQueryService.Client.get_waiter`

  
  *   :py:meth:`~ForecastQueryService.Client.query_forecast`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: query_forecast(**kwargs)

    

    Retrieves a forecast for a single item, filtered by the supplied criteria.

     

    The criteria is a key-value pair. The key is either ``item_id`` (or the equivalent non-timestamp, non-target field) from the ``TARGET_TIME_SERIES`` dataset, or one of the forecast dimensions specified as part of the ``FeaturizationConfig`` object.

     

    By default, ``QueryForecast`` returns the complete date range for the filtered forecast. You can request a specific date range.

     

    To get the full forecast, use the `CreateForecastExportJob <https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html>`__ operation.

     

    .. note::

       

      The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/forecastquery-2018-06-26/QueryForecast>`_    


    **Request Syntax** 
    ::

      response = client.query_forecast(
          ForecastArn='string',
          StartDate='string',
          EndDate='string',
          Filters={
              'string': 'string'
          },
          NextToken='string'
      )
    :type ForecastArn: string
    :param ForecastArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the forecast to query.

      

    
    :type StartDate: string
    :param StartDate: 

      The start date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T08:00:00.

      

    
    :type EndDate: string
    :param EndDate: 

      The end date for the forecast. Specify the date using this format: yyyy-MM-dd'T'HH:mm:ss (ISO 8601 format). For example, 2015-01-01T20:00:00. 

      

    
    :type Filters: dict
    :param Filters: **[REQUIRED]** 

      The filtering criteria to apply when retrieving the forecast. For example, to get the forecast for ``client_21`` in the electricity usage dataset, specify the following:

       

       ``{"item_id" : "client_21"}``  

       

      To get the full forecast, use the `CreateForecastExportJob <https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html>`__ operation.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type NextToken: string
    :param NextToken: 

      If the result of the previous request was truncated, the response includes a ``NextToken`` . To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Forecast': {
                'Predictions': {
                    'string': [
                        {
                            'Timestamp': 'string',
                            'Value': 123.0
                        },
                    ]
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Forecast** *(dict) --* 

          The forecast.

          
          

          - **Predictions** *(dict) --* 

            The forecast.

             

            The *string* of the string-to-array map is one of the following values:

             

             
            * p10 
             
            * p50 
             
            * p90 
             

            
            

            - *(string) --* 
              

              - *(list) --* 
                

                - *(dict) --* 

                  The forecast value for a specific date. Part of the  Forecast object.

                  
                  

                  - **Timestamp** *(string) --* 

                    The timestamp of the specific forecast.

                    
                  

                  - **Value** *(float) --* 

                    The forecast value.

                    
              
            
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`ForecastQueryService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ForecastQueryService.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`ForecastQueryService.Client.exceptions.InvalidInputException`

    
    *     :py:class:`ForecastQueryService.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ForecastQueryService.Client.exceptions.InvalidNextTokenException`

    

==========
Paginators
==========


The available paginators are:
