

*********
MediaLive
*********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: MediaLive.Client

  A low-level client representing AWS Elemental MediaLive
  API for AWS Elemental MediaLive::

    
    import boto3
    
    client = boto3.client('medialive')

  
  These are the available methods:
  
  *   :py:meth:`~MediaLive.Client.accept_input_device_transfer`

  
  *   :py:meth:`~MediaLive.Client.batch_delete`

  
  *   :py:meth:`~MediaLive.Client.batch_start`

  
  *   :py:meth:`~MediaLive.Client.batch_stop`

  
  *   :py:meth:`~MediaLive.Client.batch_update_schedule`

  
  *   :py:meth:`~MediaLive.Client.can_paginate`

  
  *   :py:meth:`~MediaLive.Client.cancel_input_device_transfer`

  
  *   :py:meth:`~MediaLive.Client.create_channel`

  
  *   :py:meth:`~MediaLive.Client.create_input`

  
  *   :py:meth:`~MediaLive.Client.create_input_security_group`

  
  *   :py:meth:`~MediaLive.Client.create_multiplex`

  
  *   :py:meth:`~MediaLive.Client.create_multiplex_program`

  
  *   :py:meth:`~MediaLive.Client.create_partner_input`

  
  *   :py:meth:`~MediaLive.Client.create_tags`

  
  *   :py:meth:`~MediaLive.Client.delete_channel`

  
  *   :py:meth:`~MediaLive.Client.delete_input`

  
  *   :py:meth:`~MediaLive.Client.delete_input_security_group`

  
  *   :py:meth:`~MediaLive.Client.delete_multiplex`

  
  *   :py:meth:`~MediaLive.Client.delete_multiplex_program`

  
  *   :py:meth:`~MediaLive.Client.delete_reservation`

  
  *   :py:meth:`~MediaLive.Client.delete_schedule`

  
  *   :py:meth:`~MediaLive.Client.delete_tags`

  
  *   :py:meth:`~MediaLive.Client.describe_channel`

  
  *   :py:meth:`~MediaLive.Client.describe_input`

  
  *   :py:meth:`~MediaLive.Client.describe_input_device`

  
  *   :py:meth:`~MediaLive.Client.describe_input_device_thumbnail`

  
  *   :py:meth:`~MediaLive.Client.describe_input_security_group`

  
  *   :py:meth:`~MediaLive.Client.describe_multiplex`

  
  *   :py:meth:`~MediaLive.Client.describe_multiplex_program`

  
  *   :py:meth:`~MediaLive.Client.describe_offering`

  
  *   :py:meth:`~MediaLive.Client.describe_reservation`

  
  *   :py:meth:`~MediaLive.Client.describe_schedule`

  
  *   :py:meth:`~MediaLive.Client.generate_presigned_url`

  
  *   :py:meth:`~MediaLive.Client.get_paginator`

  
  *   :py:meth:`~MediaLive.Client.get_waiter`

  
  *   :py:meth:`~MediaLive.Client.list_channels`

  
  *   :py:meth:`~MediaLive.Client.list_input_device_transfers`

  
  *   :py:meth:`~MediaLive.Client.list_input_devices`

  
  *   :py:meth:`~MediaLive.Client.list_input_security_groups`

  
  *   :py:meth:`~MediaLive.Client.list_inputs`

  
  *   :py:meth:`~MediaLive.Client.list_multiplex_programs`

  
  *   :py:meth:`~MediaLive.Client.list_multiplexes`

  
  *   :py:meth:`~MediaLive.Client.list_offerings`

  
  *   :py:meth:`~MediaLive.Client.list_reservations`

  
  *   :py:meth:`~MediaLive.Client.list_tags_for_resource`

  
  *   :py:meth:`~MediaLive.Client.purchase_offering`

  
  *   :py:meth:`~MediaLive.Client.reject_input_device_transfer`

  
  *   :py:meth:`~MediaLive.Client.start_channel`

  
  *   :py:meth:`~MediaLive.Client.start_multiplex`

  
  *   :py:meth:`~MediaLive.Client.stop_channel`

  
  *   :py:meth:`~MediaLive.Client.stop_multiplex`

  
  *   :py:meth:`~MediaLive.Client.transfer_input_device`

  
  *   :py:meth:`~MediaLive.Client.update_channel`

  
  *   :py:meth:`~MediaLive.Client.update_channel_class`

  
  *   :py:meth:`~MediaLive.Client.update_input`

  
  *   :py:meth:`~MediaLive.Client.update_input_device`

  
  *   :py:meth:`~MediaLive.Client.update_input_security_group`

  
  *   :py:meth:`~MediaLive.Client.update_multiplex`

  
  *   :py:meth:`~MediaLive.Client.update_multiplex_program`

  
  *   :py:meth:`~MediaLive.Client.update_reservation`

  

  .. py:method:: accept_input_device_transfer(**kwargs)

    Accept an incoming input device transfer. The ownership of the device will transfer to your AWS account.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/AcceptInputDeviceTransfer>`_    


    **Request Syntax** 
    ::

      response = client.accept_input_device_transfer(
          InputDeviceId='string'
      )
    :type InputDeviceId: string
    :param InputDeviceId: **[REQUIRED]** The unique ID of the input device to accept. For example, hd-123456789abcdef.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* Your request to accept this device transfer has succeeded.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: batch_delete(**kwargs)

    Starts delete of resources.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/BatchDelete>`_    


    **Request Syntax** 
    ::

      response = client.batch_delete(
          ChannelIds=[
              'string',
          ],
          InputIds=[
              'string',
          ],
          InputSecurityGroupIds=[
              'string',
          ],
          MultiplexIds=[
              'string',
          ]
      )
    :type ChannelIds: list
    :param ChannelIds: List of channel IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type InputIds: list
    :param InputIds: List of input IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type InputSecurityGroupIds: list
    :param InputSecurityGroupIds: List of input security group IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type MultiplexIds: list
    :param MultiplexIds: List of multiplex IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Failed': [
                {
                    'Arn': 'string',
                    'Code': 'string',
                    'Id': 'string',
                    'Message': 'string'
                },
            ],
            'Successful': [
                {
                    'Arn': 'string',
                    'Id': 'string',
                    'State': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* Delete was successfully initiated.
        

        - **Failed** *(list) --* List of failed operations
          

          - *(dict) --* Details from a failed operation
            

            - **Arn** *(string) --* ARN of the resource
            

            - **Code** *(string) --* Error code for the failed operation
            

            - **Id** *(string) --* ID of the resource
            

            - **Message** *(string) --* Error message for the failed operation
        
      
        

        - **Successful** *(list) --* List of successful operations
          

          - *(dict) --* Details from a successful operation
            

            - **Arn** *(string) --* ARN of the resource
            

            - **Id** *(string) --* ID of the resource
            

            - **State** *(string) --* Current state of the resource
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: batch_start(**kwargs)

    Starts existing resources

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/BatchStart>`_    


    **Request Syntax** 
    ::

      response = client.batch_start(
          ChannelIds=[
              'string',
          ],
          MultiplexIds=[
              'string',
          ]
      )
    :type ChannelIds: list
    :param ChannelIds: List of channel IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type MultiplexIds: list
    :param MultiplexIds: List of multiplex IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Failed': [
                {
                    'Arn': 'string',
                    'Code': 'string',
                    'Id': 'string',
                    'Message': 'string'
                },
            ],
            'Successful': [
                {
                    'Arn': 'string',
                    'Id': 'string',
                    'State': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* Successfully initiated start of resources.
        

        - **Failed** *(list) --* List of failed operations
          

          - *(dict) --* Details from a failed operation
            

            - **Arn** *(string) --* ARN of the resource
            

            - **Code** *(string) --* Error code for the failed operation
            

            - **Id** *(string) --* ID of the resource
            

            - **Message** *(string) --* Error message for the failed operation
        
      
        

        - **Successful** *(list) --* List of successful operations
          

          - *(dict) --* Details from a successful operation
            

            - **Arn** *(string) --* ARN of the resource
            

            - **Id** *(string) --* ID of the resource
            

            - **State** *(string) --* Current state of the resource
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: batch_stop(**kwargs)

    Stops running resources

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/BatchStop>`_    


    **Request Syntax** 
    ::

      response = client.batch_stop(
          ChannelIds=[
              'string',
          ],
          MultiplexIds=[
              'string',
          ]
      )
    :type ChannelIds: list
    :param ChannelIds: List of channel IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type MultiplexIds: list
    :param MultiplexIds: List of multiplex IDs

    
      - *(string) --* Placeholder documentation for __string

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Failed': [
                {
                    'Arn': 'string',
                    'Code': 'string',
                    'Id': 'string',
                    'Message': 'string'
                },
            ],
            'Successful': [
                {
                    'Arn': 'string',
                    'Id': 'string',
                    'State': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* Successfully initiated stop of the resources.
        

        - **Failed** *(list) --* List of failed operations
          

          - *(dict) --* Details from a failed operation
            

            - **Arn** *(string) --* ARN of the resource
            

            - **Code** *(string) --* Error code for the failed operation
            

            - **Id** *(string) --* ID of the resource
            

            - **Message** *(string) --* Error message for the failed operation
        
      
        

        - **Successful** *(list) --* List of successful operations
          

          - *(dict) --* Details from a successful operation
            

            - **Arn** *(string) --* ARN of the resource
            

            - **Id** *(string) --* ID of the resource
            

            - **State** *(string) --* Current state of the resource
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: batch_update_schedule(**kwargs)

    Update a channel schedule

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/BatchUpdateSchedule>`_    


    **Request Syntax** 
    ::

      response = client.batch_update_schedule(
          ChannelId='string',
          Creates={
              'ScheduleActions': [
                  {
                      'ActionName': 'string',
                      'ScheduleActionSettings': {
                          'HlsId3SegmentTaggingSettings': {
                              'Tag': 'string'
                          },
                          'HlsTimedMetadataSettings': {
                              'Id3': 'string'
                          },
                          'InputPrepareSettings': {
                              'InputAttachmentNameReference': 'string',
                              'InputClippingSettings': {
                                  'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                  'StartTimecode': {
                                      'Timecode': 'string'
                                  },
                                  'StopTimecode': {
                                      'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                      'Timecode': 'string'
                                  }
                              },
                              'UrlPath': [
                                  'string',
                              ]
                          },
                          'InputSwitchSettings': {
                              'InputAttachmentNameReference': 'string',
                              'InputClippingSettings': {
                                  'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                  'StartTimecode': {
                                      'Timecode': 'string'
                                  },
                                  'StopTimecode': {
                                      'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                      'Timecode': 'string'
                                  }
                              },
                              'UrlPath': [
                                  'string',
                              ]
                          },
                          'MotionGraphicsImageActivateSettings': {
                              'Duration': 123,
                              'PasswordParam': 'string',
                              'Url': 'string',
                              'Username': 'string'
                          },
                          'MotionGraphicsImageDeactivateSettings': {}
                          ,
                          'PauseStateSettings': {
                              'Pipelines': [
                                  {
                                      'PipelineId': 'PIPELINE_0'|'PIPELINE_1'
                                  },
                              ]
                          },
                          'Scte35ReturnToNetworkSettings': {
                              'SpliceEventId': 123
                          },
                          'Scte35SpliceInsertSettings': {
                              'Duration': 123,
                              'SpliceEventId': 123
                          },
                          'Scte35TimeSignalSettings': {
                              'Scte35Descriptors': [
                                  {
                                      'Scte35DescriptorSettings': {
                                          'SegmentationDescriptorScte35DescriptorSettings': {
                                              'DeliveryRestrictions': {
                                                  'ArchiveAllowedFlag': 'ARCHIVE_NOT_ALLOWED'|'ARCHIVE_ALLOWED',
                                                  'DeviceRestrictions': 'NONE'|'RESTRICT_GROUP0'|'RESTRICT_GROUP1'|'RESTRICT_GROUP2',
                                                  'NoRegionalBlackoutFlag': 'REGIONAL_BLACKOUT'|'NO_REGIONAL_BLACKOUT',
                                                  'WebDeliveryAllowedFlag': 'WEB_DELIVERY_NOT_ALLOWED'|'WEB_DELIVERY_ALLOWED'
                                              },
                                              'SegmentNum': 123,
                                              'SegmentationCancelIndicator': 'SEGMENTATION_EVENT_NOT_CANCELED'|'SEGMENTATION_EVENT_CANCELED',
                                              'SegmentationDuration': 123,
                                              'SegmentationEventId': 123,
                                              'SegmentationTypeId': 123,
                                              'SegmentationUpid': 'string',
                                              'SegmentationUpidType': 123,
                                              'SegmentsExpected': 123,
                                              'SubSegmentNum': 123,
                                              'SubSegmentsExpected': 123
                                          }
                                      }
                                  },
                              ]
                          },
                          'StaticImageActivateSettings': {
                              'Duration': 123,
                              'FadeIn': 123,
                              'FadeOut': 123,
                              'Height': 123,
                              'Image': {
                                  'PasswordParam': 'string',
                                  'Uri': 'string',
                                  'Username': 'string'
                              },
                              'ImageX': 123,
                              'ImageY': 123,
                              'Layer': 123,
                              'Opacity': 123,
                              'Width': 123
                          },
                          'StaticImageDeactivateSettings': {
                              'FadeOut': 123,
                              'Layer': 123
                          }
                      },
                      'ScheduleActionStartSettings': {
                          'FixedModeScheduleActionStartSettings': {
                              'Time': 'string'
                          },
                          'FollowModeScheduleActionStartSettings': {
                              'FollowPoint': 'END'|'START',
                              'ReferenceActionName': 'string'
                          },
                          'ImmediateModeScheduleActionStartSettings': {}
                          
                      }
                  },
              ]
          },
          Deletes={
              'ActionNames': [
                  'string',
              ]
          }
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** Id of the channel whose schedule is being updated.

    
    :type Creates: dict
    :param Creates: Schedule actions to create in the schedule.

    
      - **ScheduleActions** *(list) --* **[REQUIRED]** A list of schedule actions to create.

      
        - *(dict) --* Contains information on a single schedule action.

        
          - **ActionName** *(string) --* **[REQUIRED]** The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.

          
          - **ScheduleActionSettings** *(dict) --* **[REQUIRED]** Settings for this schedule action.

          
            - **HlsId3SegmentTaggingSettings** *(dict) --* Action to insert HLS ID3 segment tagging

            
              - **Tag** *(string) --* **[REQUIRED]** ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html

              
            
            - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

            
              - **Id3** *(string) --* **[REQUIRED]** Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure

              
            
            - **InputPrepareSettings** *(dict) --* Action to prepare an input for a future immediate input switch

            
              - **InputAttachmentNameReference** *(string) --* The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.

              
              - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.

              
                - **InputTimecodeSource** *(string) --* **[REQUIRED]** The source of the timecodes in the source being clipped.

                
                - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                
                  - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

                  
                
                - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                
                  - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.

                  
                  - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

                  
                
              
              - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.

              
                - *(string) --* Placeholder documentation for __string

                
            
            
            - **InputSwitchSettings** *(dict) --* Action to switch the input

            
              - **InputAttachmentNameReference** *(string) --* **[REQUIRED]** The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.

              
              - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.

              
                - **InputTimecodeSource** *(string) --* **[REQUIRED]** The source of the timecodes in the source being clipped.

                
                - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                
                  - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

                  
                
                - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                
                  - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.

                  
                  - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

                  
                
              
              - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.

              
                - *(string) --* Placeholder documentation for __string

                
            
            
            - **MotionGraphicsImageActivateSettings** *(dict) --* Action to activate a motion graphics image overlay

            
              - **Duration** *(integer) --* Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.

              
              - **PasswordParam** *(string) --* Key used to extract the password from EC2 Parameter store

              
              - **Url** *(string) --* URI of the HTML5 content to be rendered into the live stream.

              
              - **Username** *(string) --* Documentation update needed

              
            
            - **MotionGraphicsImageDeactivateSettings** *(dict) --* Action to deactivate a motion graphics image overlay

            
            
            - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel pipelines

            
              - **Pipelines** *(list) --* Placeholder documentation for __listOfPipelinePauseStateSettings

              
                - *(dict) --* Settings for pausing a pipeline.

                
                  - **PipelineId** *(string) --* **[REQUIRED]** Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").

                  
                
            
            
            - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network message

            
              - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.

              
            
            - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message

            
              - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.

              
              - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.

              
            
            - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

            
              - **Scte35Descriptors** *(list) --* **[REQUIRED]** The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.

              
                - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                
                  - **Scte35DescriptorSettings** *(dict) --* **[REQUIRED]** SCTE-35 Descriptor Settings.

                  
                    - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* **[REQUIRED]** SCTE-35 Segmentation Descriptor.

                    
                      - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery restriction parameters.

                      
                        - **ArchiveAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to SCTE-35 archive_allowed_flag.

                        
                        - **DeviceRestrictions** *(string) --* **[REQUIRED]** Corresponds to SCTE-35 device_restrictions parameter.

                        
                        - **NoRegionalBlackoutFlag** *(string) --* **[REQUIRED]** Corresponds to SCTE-35 no_regional_blackout_flag parameter.

                        
                        - **WebDeliveryAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to SCTE-35 web_delivery_allowed_flag parameter.

                        
                      
                      - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.

                      
                      - **SegmentationCancelIndicator** *(string) --* **[REQUIRED]** Corresponds to SCTE-35 segmentation_event_cancel_indicator.

                      
                      - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.

                      
                      - **SegmentationEventId** *(integer) --* **[REQUIRED]** Corresponds to SCTE-35 segmentation_event_id. 

                      
                      - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").

                      
                      - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

                      
                      - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").

                      
                      - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.

                      
                      - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.

                      
                      - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.

                      
                    
                  
                
            
            
            - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

            
              - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.

              
              - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

              
              - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).

              
              - **Height** *(integer) --* The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.

              
              - **Image** *(dict) --* **[REQUIRED]** The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.

              
                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                
                - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                
                - **Username** *(string) --* Documentation update needed

                
              
              - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.

              
              - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.

              
              - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.

              
              - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.

              
              - **Width** *(integer) --* The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.

              
            
            - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay

            
              - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default is 0 (no fade-out).

              
              - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.

              
            
          
          - **ScheduleActionStartSettings** *(dict) --* **[REQUIRED]** The time for the action to start in the channel.

          
            - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start time for an action.

            
              - **Time** *(string) --* **[REQUIRED]** Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".

              
            
            - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action as relative to another action.

            
              - **FollowPoint** *(string) --* **[REQUIRED]** Identifies whether this action starts relative to the start or relative to the end of the reference action.

              
              - **ReferenceActionName** *(string) --* **[REQUIRED]** The action name of another action that this one refers to.

              
            
            - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an action that should be applied immediately.

            
            
          
        
    
    
    :type Deletes: dict
    :param Deletes: Schedule actions to delete from the schedule.

    
      - **ActionNames** *(list) --* **[REQUIRED]** A list of schedule actions to delete.

      
        - *(string) --* Placeholder documentation for __string

        
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Creates': {
                'ScheduleActions': [
                    {
                        'ActionName': 'string',
                        'ScheduleActionSettings': {
                            'HlsId3SegmentTaggingSettings': {
                                'Tag': 'string'
                            },
                            'HlsTimedMetadataSettings': {
                                'Id3': 'string'
                            },
                            'InputPrepareSettings': {
                                'InputAttachmentNameReference': 'string',
                                'InputClippingSettings': {
                                    'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                    'StartTimecode': {
                                        'Timecode': 'string'
                                    },
                                    'StopTimecode': {
                                        'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                        'Timecode': 'string'
                                    }
                                },
                                'UrlPath': [
                                    'string',
                                ]
                            },
                            'InputSwitchSettings': {
                                'InputAttachmentNameReference': 'string',
                                'InputClippingSettings': {
                                    'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                    'StartTimecode': {
                                        'Timecode': 'string'
                                    },
                                    'StopTimecode': {
                                        'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                        'Timecode': 'string'
                                    }
                                },
                                'UrlPath': [
                                    'string',
                                ]
                            },
                            'MotionGraphicsImageActivateSettings': {
                                'Duration': 123,
                                'PasswordParam': 'string',
                                'Url': 'string',
                                'Username': 'string'
                            },
                            'MotionGraphicsImageDeactivateSettings': {},
                            'PauseStateSettings': {
                                'Pipelines': [
                                    {
                                        'PipelineId': 'PIPELINE_0'|'PIPELINE_1'
                                    },
                                ]
                            },
                            'Scte35ReturnToNetworkSettings': {
                                'SpliceEventId': 123
                            },
                            'Scte35SpliceInsertSettings': {
                                'Duration': 123,
                                'SpliceEventId': 123
                            },
                            'Scte35TimeSignalSettings': {
                                'Scte35Descriptors': [
                                    {
                                        'Scte35DescriptorSettings': {
                                            'SegmentationDescriptorScte35DescriptorSettings': {
                                                'DeliveryRestrictions': {
                                                    'ArchiveAllowedFlag': 'ARCHIVE_NOT_ALLOWED'|'ARCHIVE_ALLOWED',
                                                    'DeviceRestrictions': 'NONE'|'RESTRICT_GROUP0'|'RESTRICT_GROUP1'|'RESTRICT_GROUP2',
                                                    'NoRegionalBlackoutFlag': 'REGIONAL_BLACKOUT'|'NO_REGIONAL_BLACKOUT',
                                                    'WebDeliveryAllowedFlag': 'WEB_DELIVERY_NOT_ALLOWED'|'WEB_DELIVERY_ALLOWED'
                                                },
                                                'SegmentNum': 123,
                                                'SegmentationCancelIndicator': 'SEGMENTATION_EVENT_NOT_CANCELED'|'SEGMENTATION_EVENT_CANCELED',
                                                'SegmentationDuration': 123,
                                                'SegmentationEventId': 123,
                                                'SegmentationTypeId': 123,
                                                'SegmentationUpid': 'string',
                                                'SegmentationUpidType': 123,
                                                'SegmentsExpected': 123,
                                                'SubSegmentNum': 123,
                                                'SubSegmentsExpected': 123
                                            }
                                        }
                                    },
                                ]
                            },
                            'StaticImageActivateSettings': {
                                'Duration': 123,
                                'FadeIn': 123,
                                'FadeOut': 123,
                                'Height': 123,
                                'Image': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'ImageX': 123,
                                'ImageY': 123,
                                'Layer': 123,
                                'Opacity': 123,
                                'Width': 123
                            },
                            'StaticImageDeactivateSettings': {
                                'FadeOut': 123,
                                'Layer': 123
                            }
                        },
                        'ScheduleActionStartSettings': {
                            'FixedModeScheduleActionStartSettings': {
                                'Time': 'string'
                            },
                            'FollowModeScheduleActionStartSettings': {
                                'FollowPoint': 'END'|'START',
                                'ReferenceActionName': 'string'
                            },
                            'ImmediateModeScheduleActionStartSettings': {}
                        }
                    },
                ]
            },
            'Deletes': {
                'ScheduleActions': [
                    {
                        'ActionName': 'string',
                        'ScheduleActionSettings': {
                            'HlsId3SegmentTaggingSettings': {
                                'Tag': 'string'
                            },
                            'HlsTimedMetadataSettings': {
                                'Id3': 'string'
                            },
                            'InputPrepareSettings': {
                                'InputAttachmentNameReference': 'string',
                                'InputClippingSettings': {
                                    'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                    'StartTimecode': {
                                        'Timecode': 'string'
                                    },
                                    'StopTimecode': {
                                        'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                        'Timecode': 'string'
                                    }
                                },
                                'UrlPath': [
                                    'string',
                                ]
                            },
                            'InputSwitchSettings': {
                                'InputAttachmentNameReference': 'string',
                                'InputClippingSettings': {
                                    'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                    'StartTimecode': {
                                        'Timecode': 'string'
                                    },
                                    'StopTimecode': {
                                        'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                        'Timecode': 'string'
                                    }
                                },
                                'UrlPath': [
                                    'string',
                                ]
                            },
                            'MotionGraphicsImageActivateSettings': {
                                'Duration': 123,
                                'PasswordParam': 'string',
                                'Url': 'string',
                                'Username': 'string'
                            },
                            'MotionGraphicsImageDeactivateSettings': {},
                            'PauseStateSettings': {
                                'Pipelines': [
                                    {
                                        'PipelineId': 'PIPELINE_0'|'PIPELINE_1'
                                    },
                                ]
                            },
                            'Scte35ReturnToNetworkSettings': {
                                'SpliceEventId': 123
                            },
                            'Scte35SpliceInsertSettings': {
                                'Duration': 123,
                                'SpliceEventId': 123
                            },
                            'Scte35TimeSignalSettings': {
                                'Scte35Descriptors': [
                                    {
                                        'Scte35DescriptorSettings': {
                                            'SegmentationDescriptorScte35DescriptorSettings': {
                                                'DeliveryRestrictions': {
                                                    'ArchiveAllowedFlag': 'ARCHIVE_NOT_ALLOWED'|'ARCHIVE_ALLOWED',
                                                    'DeviceRestrictions': 'NONE'|'RESTRICT_GROUP0'|'RESTRICT_GROUP1'|'RESTRICT_GROUP2',
                                                    'NoRegionalBlackoutFlag': 'REGIONAL_BLACKOUT'|'NO_REGIONAL_BLACKOUT',
                                                    'WebDeliveryAllowedFlag': 'WEB_DELIVERY_NOT_ALLOWED'|'WEB_DELIVERY_ALLOWED'
                                                },
                                                'SegmentNum': 123,
                                                'SegmentationCancelIndicator': 'SEGMENTATION_EVENT_NOT_CANCELED'|'SEGMENTATION_EVENT_CANCELED',
                                                'SegmentationDuration': 123,
                                                'SegmentationEventId': 123,
                                                'SegmentationTypeId': 123,
                                                'SegmentationUpid': 'string',
                                                'SegmentationUpidType': 123,
                                                'SegmentsExpected': 123,
                                                'SubSegmentNum': 123,
                                                'SubSegmentsExpected': 123
                                            }
                                        }
                                    },
                                ]
                            },
                            'StaticImageActivateSettings': {
                                'Duration': 123,
                                'FadeIn': 123,
                                'FadeOut': 123,
                                'Height': 123,
                                'Image': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'ImageX': 123,
                                'ImageY': 123,
                                'Layer': 123,
                                'Opacity': 123,
                                'Width': 123
                            },
                            'StaticImageDeactivateSettings': {
                                'FadeOut': 123,
                                'Layer': 123
                            }
                        },
                        'ScheduleActionStartSettings': {
                            'FixedModeScheduleActionStartSettings': {
                                'Time': 'string'
                            },
                            'FollowModeScheduleActionStartSettings': {
                                'FollowPoint': 'END'|'START',
                                'ReferenceActionName': 'string'
                            },
                            'ImmediateModeScheduleActionStartSettings': {}
                        }
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* Successful update of the schedule.
        

        - **Creates** *(dict) --* Schedule actions created in the schedule.
          

          - **ScheduleActions** *(list) --* List of actions that have been created in the schedule.
            

            - *(dict) --* Contains information on a single schedule action.
              

              - **ActionName** *(string) --* The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
              

              - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.
                

                - **HlsId3SegmentTaggingSettings** *(dict) --* Action to insert HLS ID3 segment tagging
                  

                  - **Tag** *(string) --* ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
              
                

                - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata
                  

                  - **Id3** *(string) --* Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
              
                

                - **InputPrepareSettings** *(dict) --* Action to prepare an input for a future immediate input switch
                  

                  - **InputAttachmentNameReference** *(string) --* The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.
                  

                  - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                    

                    - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                    

                    - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                    

                    - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                      

                      - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                
                  

                  - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                    

                    - *(string) --* Placeholder documentation for __string
                
              
                

                - **InputSwitchSettings** *(dict) --* Action to switch the input
                  

                  - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
                  

                  - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                    

                    - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                    

                    - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                    

                    - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                      

                      - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                
                  

                  - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                    

                    - *(string) --* Placeholder documentation for __string
                
              
                

                - **MotionGraphicsImageActivateSettings** *(dict) --* Action to activate a motion graphics image overlay
                  

                  - **Duration** *(integer) --* Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
                  

                  - **PasswordParam** *(string) --* Key used to extract the password from EC2 Parameter store
                  

                  - **Url** *(string) --* URI of the HTML5 content to be rendered into the live stream.
                  

                  - **Username** *(string) --* Documentation update needed
              
                

                - **MotionGraphicsImageDeactivateSettings** *(dict) --* Action to deactivate a motion graphics image overlay
              
                

                - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel pipelines
                  

                  - **Pipelines** *(list) --* Placeholder documentation for __listOfPipelinePauseStateSettings
                    

                    - *(dict) --* Settings for pausing a pipeline.
                      

                      - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
                  
                
              
                

                - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network message
                  

                  - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
              
                

                - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message
                  

                  - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
                  

                  - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
              
                

                - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message
                  

                  - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
                    

                    - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.
                      

                      - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.
                        

                        - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35 Segmentation Descriptor.
                          

                          - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery restriction parameters.
                            

                            - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35 archive_allowed_flag.
                            

                            - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35 device_restrictions parameter.
                            

                            - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35 no_regional_blackout_flag parameter.
                            

                            - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
                        
                          

                          - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
                          

                          - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35 segmentation_event_cancel_indicator.
                          

                          - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
                          

                          - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35 segmentation_event_id. 
                          

                          - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
                          

                          - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
                          

                          - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
                          

                          - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
                          

                          - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
                          

                          - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
                      
                    
                  
                
              
                

                - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay
                  

                  - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
                  

                  - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
                  

                  - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
                  

                  - **Height** *(integer) --* The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
                  

                  - **Image** *(dict) --* The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
                  

                  - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
                  

                  - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
                  

                  - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
                  

                  - **Width** *(integer) --* The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
              
                

                - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay
                  

                  - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
                  

                  - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
              
            
              

              - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the channel.
                

                - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start time for an action.
                  

                  - **Time** *(string) --* Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
              
                

                - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action as relative to another action.
                  

                  - **FollowPoint** *(string) --* Identifies whether this action starts relative to the start or relative to the end of the reference action.
                  

                  - **ReferenceActionName** *(string) --* The action name of another action that this one refers to.
              
                

                - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an action that should be applied immediately.
              
            
          
        
      
        

        - **Deletes** *(dict) --* Schedule actions deleted from the schedule.
          

          - **ScheduleActions** *(list) --* List of actions that have been deleted from the schedule.
            

            - *(dict) --* Contains information on a single schedule action.
              

              - **ActionName** *(string) --* The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
              

              - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.
                

                - **HlsId3SegmentTaggingSettings** *(dict) --* Action to insert HLS ID3 segment tagging
                  

                  - **Tag** *(string) --* ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
              
                

                - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata
                  

                  - **Id3** *(string) --* Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
              
                

                - **InputPrepareSettings** *(dict) --* Action to prepare an input for a future immediate input switch
                  

                  - **InputAttachmentNameReference** *(string) --* The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.
                  

                  - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                    

                    - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                    

                    - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                    

                    - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                      

                      - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                
                  

                  - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                    

                    - *(string) --* Placeholder documentation for __string
                
              
                

                - **InputSwitchSettings** *(dict) --* Action to switch the input
                  

                  - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
                  

                  - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                    

                    - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                    

                    - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                    

                    - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                      

                      - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                      

                      - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                  
                
                  

                  - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                    

                    - *(string) --* Placeholder documentation for __string
                
              
                

                - **MotionGraphicsImageActivateSettings** *(dict) --* Action to activate a motion graphics image overlay
                  

                  - **Duration** *(integer) --* Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
                  

                  - **PasswordParam** *(string) --* Key used to extract the password from EC2 Parameter store
                  

                  - **Url** *(string) --* URI of the HTML5 content to be rendered into the live stream.
                  

                  - **Username** *(string) --* Documentation update needed
              
                

                - **MotionGraphicsImageDeactivateSettings** *(dict) --* Action to deactivate a motion graphics image overlay
              
                

                - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel pipelines
                  

                  - **Pipelines** *(list) --* Placeholder documentation for __listOfPipelinePauseStateSettings
                    

                    - *(dict) --* Settings for pausing a pipeline.
                      

                      - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
                  
                
              
                

                - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network message
                  

                  - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
              
                

                - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message
                  

                  - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
                  

                  - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
              
                

                - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message
                  

                  - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
                    

                    - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.
                      

                      - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.
                        

                        - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35 Segmentation Descriptor.
                          

                          - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery restriction parameters.
                            

                            - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35 archive_allowed_flag.
                            

                            - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35 device_restrictions parameter.
                            

                            - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35 no_regional_blackout_flag parameter.
                            

                            - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
                        
                          

                          - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
                          

                          - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35 segmentation_event_cancel_indicator.
                          

                          - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
                          

                          - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35 segmentation_event_id. 
                          

                          - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
                          

                          - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
                          

                          - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
                          

                          - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
                          

                          - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
                          

                          - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
                      
                    
                  
                
              
                

                - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay
                  

                  - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
                  

                  - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
                  

                  - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
                  

                  - **Height** *(integer) --* The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
                  

                  - **Image** *(dict) --* The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
                  

                  - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
                  

                  - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
                  

                  - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
                  

                  - **Width** *(integer) --* The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
              
                

                - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay
                  

                  - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
                  

                  - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
              
            
              

              - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the channel.
                

                - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start time for an action.
                  

                  - **Time** *(string) --* Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
              
                

                - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action as relative to another action.
                  

                  - **FollowPoint** *(string) --* Identifies whether this action starts relative to the start or relative to the end of the reference action.
                  

                  - **ReferenceActionName** *(string) --* The action name of another action that this one refers to.
              
                

                - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an action that should be applied immediately.
              
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: cancel_input_device_transfer(**kwargs)

    Cancel an input device transfer that you have requested.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CancelInputDeviceTransfer>`_    


    **Request Syntax** 
    ::

      response = client.cancel_input_device_transfer(
          InputDeviceId='string'
      )
    :type InputDeviceId: string
    :param InputDeviceId: **[REQUIRED]** The unique ID of the input device to cancel. For example, hd-123456789abcdef.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* Your cancel request has succeeded.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: create_channel(**kwargs)

    Creates a new channel

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CreateChannel>`_    


    **Request Syntax** 
    ::

      response = client.create_channel(
          CdiInputSpecification={
              'Resolution': 'SD'|'HD'|'FHD'|'UHD'
          },
          ChannelClass='STANDARD'|'SINGLE_PIPELINE',
          Destinations=[
              {
                  'Id': 'string',
                  'MediaPackageSettings': [
                      {
                          'ChannelId': 'string'
                      },
                  ],
                  'MultiplexSettings': {
                      'MultiplexId': 'string',
                      'ProgramName': 'string'
                  },
                  'Settings': [
                      {
                          'PasswordParam': 'string',
                          'StreamName': 'string',
                          'Url': 'string',
                          'Username': 'string'
                      },
                  ]
              },
          ],
          EncoderSettings={
              'AudioDescriptions': [
                  {
                      'AudioNormalizationSettings': {
                          'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                          'AlgorithmControl': 'CORRECT_AUDIO',
                          'TargetLkfs': 123.0
                      },
                      'AudioSelectorName': 'string',
                      'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                      'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                      'CodecSettings': {
                          'AacSettings': {
                              'Bitrate': 123.0,
                              'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                              'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                              'Profile': 'HEV1'|'HEV2'|'LC',
                              'RateControlMode': 'CBR'|'VBR',
                              'RawFormat': 'LATM_LOAS'|'NONE',
                              'SampleRate': 123.0,
                              'Spec': 'MPEG2'|'MPEG4',
                              'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                          },
                          'Ac3Settings': {
                              'Bitrate': 123.0,
                              'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                              'Dialnorm': 123,
                              'DrcProfile': 'FILM_STANDARD'|'NONE',
                              'LfeFilter': 'DISABLED'|'ENABLED',
                              'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                          },
                          'Eac3Settings': {
                              'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                              'Bitrate': 123.0,
                              'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                              'DcFilter': 'DISABLED'|'ENABLED',
                              'Dialnorm': 123,
                              'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                              'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                              'LfeControl': 'LFE'|'NO_LFE',
                              'LfeFilter': 'DISABLED'|'ENABLED',
                              'LoRoCenterMixLevel': 123.0,
                              'LoRoSurroundMixLevel': 123.0,
                              'LtRtCenterMixLevel': 123.0,
                              'LtRtSurroundMixLevel': 123.0,
                              'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                              'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                              'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                              'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                              'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                              'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                          },
                          'Mp2Settings': {
                              'Bitrate': 123.0,
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                              'SampleRate': 123.0
                          },
                          'PassThroughSettings': {}
                          ,
                          'WavSettings': {
                              'BitDepth': 123.0,
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                              'SampleRate': 123.0
                          }
                      },
                      'LanguageCode': 'string',
                      'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                      'Name': 'string',
                      'RemixSettings': {
                          'ChannelMappings': [
                              {
                                  'InputChannelLevels': [
                                      {
                                          'Gain': 123,
                                          'InputChannel': 123
                                      },
                                  ],
                                  'OutputChannel': 123
                              },
                          ],
                          'ChannelsIn': 123,
                          'ChannelsOut': 123
                      },
                      'StreamName': 'string'
                  },
              ],
              'AvailBlanking': {
                  'AvailBlankingImage': {
                      'PasswordParam': 'string',
                      'Uri': 'string',
                      'Username': 'string'
                  },
                  'State': 'DISABLED'|'ENABLED'
              },
              'AvailConfiguration': {
                  'AvailSettings': {
                      'Scte35SpliceInsert': {
                          'AdAvailOffset': 123,
                          'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                          'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                      },
                      'Scte35TimeSignalApos': {
                          'AdAvailOffset': 123,
                          'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                          'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                      }
                  }
              },
              'BlackoutSlate': {
                  'BlackoutSlateImage': {
                      'PasswordParam': 'string',
                      'Uri': 'string',
                      'Username': 'string'
                  },
                  'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                  'NetworkEndBlackoutImage': {
                      'PasswordParam': 'string',
                      'Uri': 'string',
                      'Username': 'string'
                  },
                  'NetworkId': 'string',
                  'State': 'DISABLED'|'ENABLED'
              },
              'CaptionDescriptions': [
                  {
                      'CaptionSelectorName': 'string',
                      'DestinationSettings': {
                          'AribDestinationSettings': {}
                          ,
                          'BurnInDestinationSettings': {
                              'Alignment': 'CENTERED'|'LEFT'|'SMART',
                              'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                              'BackgroundOpacity': 123,
                              'Font': {
                                  'PasswordParam': 'string',
                                  'Uri': 'string',
                                  'Username': 'string'
                              },
                              'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'FontOpacity': 123,
                              'FontResolution': 123,
                              'FontSize': 'string',
                              'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'OutlineSize': 123,
                              'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                              'ShadowOpacity': 123,
                              'ShadowXOffset': 123,
                              'ShadowYOffset': 123,
                              'TeletextGridControl': 'FIXED'|'SCALED',
                              'XPosition': 123,
                              'YPosition': 123
                          },
                          'DvbSubDestinationSettings': {
                              'Alignment': 'CENTERED'|'LEFT'|'SMART',
                              'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                              'BackgroundOpacity': 123,
                              'Font': {
                                  'PasswordParam': 'string',
                                  'Uri': 'string',
                                  'Username': 'string'
                              },
                              'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'FontOpacity': 123,
                              'FontResolution': 123,
                              'FontSize': 'string',
                              'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'OutlineSize': 123,
                              'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                              'ShadowOpacity': 123,
                              'ShadowXOffset': 123,
                              'ShadowYOffset': 123,
                              'TeletextGridControl': 'FIXED'|'SCALED',
                              'XPosition': 123,
                              'YPosition': 123
                          },
                          'EbuTtDDestinationSettings': {
                              'CopyrightHolder': 'string',
                              'FillLineGap': 'DISABLED'|'ENABLED',
                              'FontFamily': 'string',
                              'StyleControl': 'EXCLUDE'|'INCLUDE'
                          },
                          'EmbeddedDestinationSettings': {}
                          ,
                          'EmbeddedPlusScte20DestinationSettings': {}
                          ,
                          'RtmpCaptionInfoDestinationSettings': {}
                          ,
                          'Scte20PlusEmbeddedDestinationSettings': {}
                          ,
                          'Scte27DestinationSettings': {}
                          ,
                          'SmpteTtDestinationSettings': {}
                          ,
                          'TeletextDestinationSettings': {}
                          ,
                          'TtmlDestinationSettings': {
                              'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                          },
                          'WebvttDestinationSettings': {
                              'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                          }
                      },
                      'LanguageCode': 'string',
                      'LanguageDescription': 'string',
                      'Name': 'string'
                  },
              ],
              'FeatureActivations': {
                  'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
              },
              'GlobalConfiguration': {
                  'InitialAudioGain': 123,
                  'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                  'InputLossBehavior': {
                      'BlackFrameMsec': 123,
                      'InputLossImageColor': 'string',
                      'InputLossImageSlate': {
                          'PasswordParam': 'string',
                          'Uri': 'string',
                          'Username': 'string'
                      },
                      'InputLossImageType': 'COLOR'|'SLATE',
                      'RepeatFrameMsec': 123
                  },
                  'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                  'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                  'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
              },
              'MotionGraphicsConfiguration': {
                  'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                  'MotionGraphicsSettings': {
                      'HtmlMotionGraphicsSettings': {}
                      
                  }
              },
              'NielsenConfiguration': {
                  'DistributorId': 'string',
                  'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
              },
              'OutputGroups': [
                  {
                      'Name': 'string',
                      'OutputGroupSettings': {
                          'ArchiveGroupSettings': {
                              'ArchiveCdnSettings': {
                                  'ArchiveS3Settings': {
                                      'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                  }
                              },
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'RolloverInterval': 123
                          },
                          'FrameCaptureGroupSettings': {
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'FrameCaptureCdnSettings': {
                                  'FrameCaptureS3Settings': {
                                      'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                  }
                              }
                          },
                          'HlsGroupSettings': {
                              'AdMarkers': [
                                  'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                              ],
                              'BaseUrlContent': 'string',
                              'BaseUrlContent1': 'string',
                              'BaseUrlManifest': 'string',
                              'BaseUrlManifest1': 'string',
                              'CaptionLanguageMappings': [
                                  {
                                      'CaptionChannel': 123,
                                      'LanguageCode': 'string',
                                      'LanguageDescription': 'string'
                                  },
                              ],
                              'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                              'ClientCache': 'DISABLED'|'ENABLED',
                              'CodecSpecification': 'RFC_4281'|'RFC_6381',
                              'ConstantIv': 'string',
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                              'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                              'EncryptionType': 'AES128'|'SAMPLE_AES',
                              'HlsCdnSettings': {
                                  'HlsAkamaiSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                      'NumRetries': 123,
                                      'RestartDelay': 123,
                                      'Salt': 'string',
                                      'Token': 'string'
                                  },
                                  'HlsBasicPutSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'NumRetries': 123,
                                      'RestartDelay': 123
                                  },
                                  'HlsMediaStoreSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'MediaStoreStorageClass': 'TEMPORAL',
                                      'NumRetries': 123,
                                      'RestartDelay': 123
                                  },
                                  'HlsS3Settings': {
                                      'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                  },
                                  'HlsWebdavSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                      'NumRetries': 123,
                                      'RestartDelay': 123
                                  }
                              },
                              'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                              'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                              'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                              'IndexNSegments': 123,
                              'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                              'IvInManifest': 'EXCLUDE'|'INCLUDE',
                              'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                              'KeepSegments': 123,
                              'KeyFormat': 'string',
                              'KeyFormatVersions': 'string',
                              'KeyProviderSettings': {
                                  'StaticKeySettings': {
                                      'KeyProviderServer': {
                                          'PasswordParam': 'string',
                                          'Uri': 'string',
                                          'Username': 'string'
                                      },
                                      'StaticKeyValue': 'string'
                                  }
                              },
                              'ManifestCompression': 'GZIP'|'NONE',
                              'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                              'MinSegmentLength': 123,
                              'Mode': 'LIVE'|'VOD',
                              'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                              'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                              'ProgramDateTimePeriod': 123,
                              'RedundantManifest': 'DISABLED'|'ENABLED',
                              'SegmentLength': 123,
                              'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                              'SegmentsPerSubdirectory': 123,
                              'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                              'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                              'TimedMetadataId3Period': 123,
                              'TimestampDeltaMilliseconds': 123,
                              'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                          },
                          'MediaPackageGroupSettings': {
                              'Destination': {
                                  'DestinationRefId': 'string'
                              }
                          },
                          'MsSmoothGroupSettings': {
                              'AcquisitionPointId': 'string',
                              'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                              'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                              'ConnectionRetryInterval': 123,
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'EventId': 'string',
                              'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                              'EventStopBehavior': 'NONE'|'SEND_EOS',
                              'FilecacheDuration': 123,
                              'FragmentLength': 123,
                              'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                              'NumRetries': 123,
                              'RestartDelay': 123,
                              'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                              'SendDelayMs': 123,
                              'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                              'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                              'TimestampOffset': 'string',
                              'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                          },
                          'MultiplexGroupSettings': {}
                          ,
                          'RtmpGroupSettings': {
                              'AdMarkers': [
                                  'ON_CUE_POINT_SCTE35',
                              ],
                              'AuthenticationScheme': 'AKAMAI'|'COMMON',
                              'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                              'CacheLength': 123,
                              'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                              'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                              'RestartDelay': 123
                          },
                          'UdpGroupSettings': {
                              'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                              'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                              'TimedMetadataId3Period': 123
                          }
                      },
                      'Outputs': [
                          {
                              'AudioDescriptionNames': [
                                  'string',
                              ],
                              'CaptionDescriptionNames': [
                                  'string',
                              ],
                              'OutputName': 'string',
                              'OutputSettings': {
                                  'ArchiveOutputSettings': {
                                      'ContainerSettings': {
                                          'M2tsSettings': {
                                              'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                              'Arib': 'DISABLED'|'ENABLED',
                                              'AribCaptionsPid': 'string',
                                              'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                              'AudioBufferModel': 'ATSC'|'DVB',
                                              'AudioFramesPerPes': 123,
                                              'AudioPids': 'string',
                                              'AudioStreamType': 'ATSC'|'DVB',
                                              'Bitrate': 123,
                                              'BufferModel': 'MULTIPLEX'|'NONE',
                                              'CcDescriptor': 'DISABLED'|'ENABLED',
                                              'DvbNitSettings': {
                                                  'NetworkId': 123,
                                                  'NetworkName': 'string',
                                                  'RepInterval': 123
                                              },
                                              'DvbSdtSettings': {
                                                  'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                  'RepInterval': 123,
                                                  'ServiceName': 'string',
                                                  'ServiceProviderName': 'string'
                                              },
                                              'DvbSubPids': 'string',
                                              'DvbTdtSettings': {
                                                  'RepInterval': 123
                                              },
                                              'DvbTeletextPid': 'string',
                                              'Ebif': 'NONE'|'PASSTHROUGH',
                                              'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                              'EbpLookaheadMs': 123,
                                              'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                              'EcmPid': 'string',
                                              'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                              'EtvPlatformPid': 'string',
                                              'EtvSignalPid': 'string',
                                              'FragmentTime': 123.0,
                                              'Klv': 'NONE'|'PASSTHROUGH',
                                              'KlvDataPids': 'string',
                                              'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'NullPacketBitrate': 123.0,
                                              'PatInterval': 123,
                                              'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                              'PcrPeriod': 123,
                                              'PcrPid': 'string',
                                              'PmtInterval': 123,
                                              'PmtPid': 'string',
                                              'ProgramNum': 123,
                                              'RateMode': 'CBR'|'VBR',
                                              'Scte27Pids': 'string',
                                              'Scte35Control': 'NONE'|'PASSTHROUGH',
                                              'Scte35Pid': 'string',
                                              'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                              'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                              'SegmentationTime': 123.0,
                                              'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'TimedMetadataPid': 'string',
                                              'TransportStreamId': 123,
                                              'VideoPid': 'string'
                                          },
                                          'RawSettings': {}
                                          
                                      },
                                      'Extension': 'string',
                                      'NameModifier': 'string'
                                  },
                                  'FrameCaptureOutputSettings': {
                                      'NameModifier': 'string'
                                  },
                                  'HlsOutputSettings': {
                                      'H265PackagingType': 'HEV1'|'HVC1',
                                      'HlsSettings': {
                                          'AudioOnlyHlsSettings': {
                                              'AudioGroupId': 'string',
                                              'AudioOnlyImage': {
                                                  'PasswordParam': 'string',
                                                  'Uri': 'string',
                                                  'Username': 'string'
                                              },
                                              'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                              'SegmentType': 'AAC'|'FMP4'
                                          },
                                          'Fmp4HlsSettings': {
                                              'AudioRenditionSets': 'string',
                                              'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                          },
                                          'FrameCaptureHlsSettings': {}
                                          ,
                                          'StandardHlsSettings': {
                                              'AudioRenditionSets': 'string',
                                              'M3u8Settings': {
                                                  'AudioFramesPerPes': 123,
                                                  'AudioPids': 'string',
                                                  'EcmPid': 'string',
                                                  'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                  'PatInterval': 123,
                                                  'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                  'PcrPeriod': 123,
                                                  'PcrPid': 'string',
                                                  'PmtInterval': 123,
                                                  'PmtPid': 'string',
                                                  'ProgramNum': 123,
                                                  'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                  'Scte35Pid': 'string',
                                                  'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                  'TimedMetadataPid': 'string',
                                                  'TransportStreamId': 123,
                                                  'VideoPid': 'string'
                                              }
                                          }
                                      },
                                      'NameModifier': 'string',
                                      'SegmentModifier': 'string'
                                  },
                                  'MediaPackageOutputSettings': {}
                                  ,
                                  'MsSmoothOutputSettings': {
                                      'H265PackagingType': 'HEV1'|'HVC1',
                                      'NameModifier': 'string'
                                  },
                                  'MultiplexOutputSettings': {
                                      'Destination': {
                                          'DestinationRefId': 'string'
                                      }
                                  },
                                  'RtmpOutputSettings': {
                                      'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                      'ConnectionRetryInterval': 123,
                                      'Destination': {
                                          'DestinationRefId': 'string'
                                      },
                                      'NumRetries': 123
                                  },
                                  'UdpOutputSettings': {
                                      'BufferMsec': 123,
                                      'ContainerSettings': {
                                          'M2tsSettings': {
                                              'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                              'Arib': 'DISABLED'|'ENABLED',
                                              'AribCaptionsPid': 'string',
                                              'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                              'AudioBufferModel': 'ATSC'|'DVB',
                                              'AudioFramesPerPes': 123,
                                              'AudioPids': 'string',
                                              'AudioStreamType': 'ATSC'|'DVB',
                                              'Bitrate': 123,
                                              'BufferModel': 'MULTIPLEX'|'NONE',
                                              'CcDescriptor': 'DISABLED'|'ENABLED',
                                              'DvbNitSettings': {
                                                  'NetworkId': 123,
                                                  'NetworkName': 'string',
                                                  'RepInterval': 123
                                              },
                                              'DvbSdtSettings': {
                                                  'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                  'RepInterval': 123,
                                                  'ServiceName': 'string',
                                                  'ServiceProviderName': 'string'
                                              },
                                              'DvbSubPids': 'string',
                                              'DvbTdtSettings': {
                                                  'RepInterval': 123
                                              },
                                              'DvbTeletextPid': 'string',
                                              'Ebif': 'NONE'|'PASSTHROUGH',
                                              'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                              'EbpLookaheadMs': 123,
                                              'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                              'EcmPid': 'string',
                                              'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                              'EtvPlatformPid': 'string',
                                              'EtvSignalPid': 'string',
                                              'FragmentTime': 123.0,
                                              'Klv': 'NONE'|'PASSTHROUGH',
                                              'KlvDataPids': 'string',
                                              'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'NullPacketBitrate': 123.0,
                                              'PatInterval': 123,
                                              'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                              'PcrPeriod': 123,
                                              'PcrPid': 'string',
                                              'PmtInterval': 123,
                                              'PmtPid': 'string',
                                              'ProgramNum': 123,
                                              'RateMode': 'CBR'|'VBR',
                                              'Scte27Pids': 'string',
                                              'Scte35Control': 'NONE'|'PASSTHROUGH',
                                              'Scte35Pid': 'string',
                                              'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                              'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                              'SegmentationTime': 123.0,
                                              'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'TimedMetadataPid': 'string',
                                              'TransportStreamId': 123,
                                              'VideoPid': 'string'
                                          }
                                      },
                                      'Destination': {
                                          'DestinationRefId': 'string'
                                      },
                                      'FecOutputSettings': {
                                          'ColumnDepth': 123,
                                          'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                          'RowLength': 123
                                      }
                                  }
                              },
                              'VideoDescriptionName': 'string'
                          },
                      ]
                  },
              ],
              'TimecodeConfig': {
                  'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                  'SyncThreshold': 123
              },
              'VideoDescriptions': [
                  {
                      'CodecSettings': {
                          'FrameCaptureSettings': {
                              'CaptureInterval': 123,
                              'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                          },
                          'H264Settings': {
                              'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                              'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                              'Bitrate': 123,
                              'BufFillPct': 123,
                              'BufSize': 123,
                              'ColorMetadata': 'IGNORE'|'INSERT',
                              'ColorSpaceSettings': {
                                  'ColorSpacePassthroughSettings': {}
                                  ,
                                  'Rec601Settings': {}
                                  ,
                                  'Rec709Settings': {}
                                  
                              },
                              'EntropyEncoding': 'CABAC'|'CAVLC',
                              'FilterSettings': {
                                  'TemporalFilterSettings': {
                                      'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                      'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                  }
                              },
                              'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                              'FlickerAq': 'DISABLED'|'ENABLED',
                              'ForceFieldPictures': 'DISABLED'|'ENABLED',
                              'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                              'FramerateDenominator': 123,
                              'FramerateNumerator': 123,
                              'GopBReference': 'DISABLED'|'ENABLED',
                              'GopClosedCadence': 123,
                              'GopNumBFrames': 123,
                              'GopSize': 123.0,
                              'GopSizeUnits': 'FRAMES'|'SECONDS',
                              'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                              'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                              'MaxBitrate': 123,
                              'MinIInterval': 123,
                              'NumRefFrames': 123,
                              'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                              'ParDenominator': 123,
                              'ParNumerator': 123,
                              'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                              'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                              'QvbrQualityLevel': 123,
                              'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                              'ScanType': 'INTERLACED'|'PROGRESSIVE',
                              'SceneChangeDetect': 'DISABLED'|'ENABLED',
                              'Slices': 123,
                              'Softness': 123,
                              'SpatialAq': 'DISABLED'|'ENABLED',
                              'SubgopLength': 'DYNAMIC'|'FIXED',
                              'Syntax': 'DEFAULT'|'RP2027',
                              'TemporalAq': 'DISABLED'|'ENABLED',
                              'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                          },
                          'H265Settings': {
                              'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                              'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                              'AlternativeTransferFunction': 'INSERT'|'OMIT',
                              'Bitrate': 123,
                              'BufSize': 123,
                              'ColorMetadata': 'IGNORE'|'INSERT',
                              'ColorSpaceSettings': {
                                  'ColorSpacePassthroughSettings': {}
                                  ,
                                  'Hdr10Settings': {
                                      'MaxCll': 123,
                                      'MaxFall': 123
                                  },
                                  'Rec601Settings': {}
                                  ,
                                  'Rec709Settings': {}
                                  
                              },
                              'FilterSettings': {
                                  'TemporalFilterSettings': {
                                      'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                      'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                  }
                              },
                              'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                              'FlickerAq': 'DISABLED'|'ENABLED',
                              'FramerateDenominator': 123,
                              'FramerateNumerator': 123,
                              'GopClosedCadence': 123,
                              'GopSize': 123.0,
                              'GopSizeUnits': 'FRAMES'|'SECONDS',
                              'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                              'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                              'MaxBitrate': 123,
                              'MinIInterval': 123,
                              'ParDenominator': 123,
                              'ParNumerator': 123,
                              'Profile': 'MAIN'|'MAIN_10BIT',
                              'QvbrQualityLevel': 123,
                              'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                              'ScanType': 'INTERLACED'|'PROGRESSIVE',
                              'SceneChangeDetect': 'DISABLED'|'ENABLED',
                              'Slices': 123,
                              'Tier': 'HIGH'|'MAIN',
                              'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                          },
                          'Mpeg2Settings': {
                              'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                              'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                              'ColorMetadata': 'IGNORE'|'INSERT',
                              'ColorSpace': 'AUTO'|'PASSTHROUGH',
                              'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                              'FilterSettings': {
                                  'TemporalFilterSettings': {
                                      'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                      'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                  }
                              },
                              'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                              'FramerateDenominator': 123,
                              'FramerateNumerator': 123,
                              'GopClosedCadence': 123,
                              'GopNumBFrames': 123,
                              'GopSize': 123.0,
                              'GopSizeUnits': 'FRAMES'|'SECONDS',
                              'ScanType': 'INTERLACED'|'PROGRESSIVE',
                              'SubgopLength': 'DYNAMIC'|'FIXED',
                              'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                          }
                      },
                      'Height': 123,
                      'Name': 'string',
                      'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                      'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                      'Sharpness': 123,
                      'Width': 123
                  },
              ]
          },
          InputAttachments=[
              {
                  'AutomaticInputFailoverSettings': {
                      'ErrorClearTimeMsec': 123,
                      'FailoverConditions': [
                          {
                              'FailoverConditionSettings': {
                                  'AudioSilenceSettings': {
                                      'AudioSelectorName': 'string',
                                      'AudioSilenceThresholdMsec': 123
                                  },
                                  'InputLossSettings': {
                                      'InputLossThresholdMsec': 123
                                  },
                                  'VideoBlackSettings': {
                                      'BlackDetectThreshold': 123.0,
                                      'VideoBlackThresholdMsec': 123
                                  }
                              }
                          },
                      ],
                      'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                      'SecondaryInputId': 'string'
                  },
                  'InputAttachmentName': 'string',
                  'InputId': 'string',
                  'InputSettings': {
                      'AudioSelectors': [
                          {
                              'Name': 'string',
                              'SelectorSettings': {
                                  'AudioHlsRenditionSelection': {
                                      'GroupId': 'string',
                                      'Name': 'string'
                                  },
                                  'AudioLanguageSelection': {
                                      'LanguageCode': 'string',
                                      'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                  },
                                  'AudioPidSelection': {
                                      'Pid': 123
                                  },
                                  'AudioTrackSelection': {
                                      'Tracks': [
                                          {
                                              'Track': 123
                                          },
                                      ]
                                  }
                              }
                          },
                      ],
                      'CaptionSelectors': [
                          {
                              'LanguageCode': 'string',
                              'Name': 'string',
                              'SelectorSettings': {
                                  'AncillarySourceSettings': {
                                      'SourceAncillaryChannelNumber': 123
                                  },
                                  'AribSourceSettings': {}
                                  ,
                                  'DvbSubSourceSettings': {
                                      'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                      'Pid': 123
                                  },
                                  'EmbeddedSourceSettings': {
                                      'Convert608To708': 'DISABLED'|'UPCONVERT',
                                      'Scte20Detection': 'AUTO'|'OFF',
                                      'Source608ChannelNumber': 123,
                                      'Source608TrackNumber': 123
                                  },
                                  'Scte20SourceSettings': {
                                      'Convert608To708': 'DISABLED'|'UPCONVERT',
                                      'Source608ChannelNumber': 123
                                  },
                                  'Scte27SourceSettings': {
                                      'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                      'Pid': 123
                                  },
                                  'TeletextSourceSettings': {
                                      'OutputRectangle': {
                                          'Height': 123.0,
                                          'LeftOffset': 123.0,
                                          'TopOffset': 123.0,
                                          'Width': 123.0
                                      },
                                      'PageNumber': 'string'
                                  }
                              }
                          },
                      ],
                      'DeblockFilter': 'DISABLED'|'ENABLED',
                      'DenoiseFilter': 'DISABLED'|'ENABLED',
                      'FilterStrength': 123,
                      'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                      'NetworkInputSettings': {
                          'HlsInputSettings': {
                              'Bandwidth': 123,
                              'BufferSegments': 123,
                              'Retries': 123,
                              'RetryInterval': 123,
                              'Scte35Source': 'MANIFEST'|'SEGMENTS'
                          },
                          'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                      },
                      'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                      'SourceEndBehavior': 'CONTINUE'|'LOOP',
                      'VideoSelector': {
                          'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                          'ColorSpaceSettings': {
                              'Hdr10Settings': {
                                  'MaxCll': 123,
                                  'MaxFall': 123
                              }
                          },
                          'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                          'SelectorSettings': {
                              'VideoSelectorPid': {
                                  'Pid': 123
                              },
                              'VideoSelectorProgramId': {
                                  'ProgramId': 123
                              }
                          }
                      }
                  }
              },
          ],
          InputSpecification={
              'Codec': 'MPEG2'|'AVC'|'HEVC',
              'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
              'Resolution': 'SD'|'HD'|'UHD'
          },
          LogLevel='ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
          Name='string',
          RequestId='string',
          Reserved='string',
          RoleArn='string',
          Tags={
              'string': 'string'
          },
          Vpc={
              'PublicAddressAllocationIds': [
                  'string',
              ],
              'SecurityGroupIds': [
                  'string',
              ],
              'SubnetIds': [
                  'string',
              ]
          }
      )
    :type CdiInputSpecification: dict
    :param CdiInputSpecification: Specification of CDI inputs for this channel

    
      - **Resolution** *(string) --* Maximum CDI input resolution

      
    
    :type ChannelClass: string
    :param ChannelClass: The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    
    :type Destinations: list
    :param Destinations: Placeholder documentation for __listOfOutputDestination

    
      - *(dict) --* Placeholder documentation for OutputDestination

      
        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        
        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.

        
          - *(dict) --* MediaPackage Output Destination Settings

          
            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.

            
          
      
        - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.

        
          - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.

          
          - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.

          
        
        - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.

        
          - *(dict) --* Placeholder documentation for OutputDestinationSettings

          
            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

            
            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

            
            - **Url** *(string) --* A URL specifying a destination

            
            - **Username** *(string) --* username for destination

            
          
      
      
  
    :type EncoderSettings: dict
    :param EncoderSettings: Encoder Settings

    
      - **AudioDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfAudioDescription

      
        - *(dict) --* Audio Description

        
          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          
            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            
            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.

            
            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.

            
          
          - **AudioSelectorName** *(string) --* **[REQUIRED]** The name of the AudioSelector used as the source for this AudioDescription.

          
          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.

          
          - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.

          
          - **CodecSettings** *(dict) --* Audio codec settings.

          
            - **AacSettings** *(dict) --* Aac Settings

            
              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.

              
              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

              
              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.

              
              - **Profile** *(string) --* AAC Profile.

              
              - **RateControlMode** *(string) --* Rate Control Mode.

              
              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              
              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.

              
              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.

              
              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.

              
            
            - **Ac3Settings** *(dict) --* Ac3 Settings

            
              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.

              
              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              
              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.

              
              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.

              
              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.

              
              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              
              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.

              
            
            - **Eac3Settings** *(dict) --* Eac3 Settings

            
              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.

              
              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.

              
              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              
              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.

              
              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.

              
              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.

              
              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              
              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.

              
              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel

              
              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              
              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.

              
              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.

              
              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.

              
              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.

              
              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.

              
              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.

              
              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.

              
              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.

              
              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.

              
              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.

              
            
            - **Mp2Settings** *(dict) --* Mp2 Settings

            
              - **Bitrate** *(float) --* Average bitrate in bits/second.

              
              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).

              
              - **SampleRate** *(float) --* Sample rate in Hz.

              
            
            - **PassThroughSettings** *(dict) --* Pass Through Settings

            
            
            - **WavSettings** *(dict) --* Wav Settings

            
              - **BitDepth** *(float) --* Bits per sample.

              
              - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.

              
              - **SampleRate** *(float) --* Sample rate in Hz.

              
            
          
          - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.

          
          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.

          
          - **Name** *(string) --* **[REQUIRED]** The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.

          
          - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.

          
            - **ChannelMappings** *(list) --* **[REQUIRED]** Mapping of input channels to output channels, with appropriate gain adjustments.

            
              - *(dict) --* Audio Channel Mapping

              
                - **InputChannelLevels** *(list) --* **[REQUIRED]** Indices and gain values for each input channel that should be remixed into this output channel.

                
                  - *(dict) --* Input Channel Level

                  
                    - **Gain** *(integer) --* **[REQUIRED]** Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.

                    
                    - **InputChannel** *(integer) --* **[REQUIRED]** The index of the input channel used as a source.

                    
                  
              
                - **OutputChannel** *(integer) --* **[REQUIRED]** The index of the output channel being produced.

                
              
          
            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            
            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8

            
          
          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).

          
        
    
      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      
        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.

        
          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          
          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          
          - **Username** *(string) --* Documentation update needed

          
        
        - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.

        
      
      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      
        - **AvailSettings** *(dict) --* Ad avail settings.

        
          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          
            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.

            
            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
          
          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          
            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.

            
            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
          
        
      
      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      
        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.

        
          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          
          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          
          - **Username** *(string) --* Documentation update needed

          
        
        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".

        
        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.

        
          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          
          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          
          - **Username** *(string) --* Documentation update needed

          
        
        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        
        - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.

        
      
      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      
        - *(dict) --* Caption Description

        
          - **CaptionSelectorName** *(string) --* **[REQUIRED]** Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.

          
          - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.

          
            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            
            
            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            
              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              
                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                
                - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                
                - **Username** *(string) --* Documentation update needed

                
              
              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              
              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.

              
              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.

              
              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.

              
              - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.

              
              - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.

              
            
            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            
              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              
                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                
                - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                
                - **Username** *(string) --* Documentation update needed

                
              
              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              
              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.

              
              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.

              
              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.

              
              - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
            
            - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings

            
              - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML

              
              - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.

              
              - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.

              
              - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.

              
            
            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            
            
            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings

            
            
            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings

            
            
            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings

            
            
            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            
            
            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            
            
            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            
            
            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            
              - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.

              
            
            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

            
              - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.

              
            
          
          - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/

          
          - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).

          
          - **Name** *(string) --* **[REQUIRED]** Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.

          
        
    
      - **FeatureActivations** *(dict) --* Feature Activations

      
        - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.

        
      
      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.

      
        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.

        
        - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).

        
        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        
          - **BlackFrameMsec** *(integer) --* Documentation update needed

          
          - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.

          
          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.

          
            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

            
            - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            
            - **Username** *(string) --* Documentation update needed

            
          
          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.

          
          - **RepeatFrameMsec** *(integer) --* Documentation update needed

          
        
        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.

        
        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.

        
        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.

        
      
      - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.

      
        - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion

        
        - **MotionGraphicsSettings** *(dict) --* **[REQUIRED]** Motion Graphics Settings

        
          - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings

          
          
        
      
      - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.

      
        - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.

        
        - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging

        
      
      - **OutputGroups** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutputGroup

      
        - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.

        
          - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.

          
          - **OutputGroupSettings** *(dict) --* **[REQUIRED]** Settings associated with the output group.

          
            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            
              - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              
                - **ArchiveS3Settings** *(dict) --* Archive S3 Settings

                
                  - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.

                  
                
              
              - **Destination** *(dict) --* **[REQUIRED]** A directory and base filename where archive files should be written.

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.

              
            
            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            
              - **Destination** *(dict) --* **[REQUIRED]** The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              
                - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings

                
                  - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.

                  
                
              
            
            - **HlsGroupSettings** *(dict) --* Hls Group Settings

            
              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.

              
                - *(string) --* Hls Ad Markers

                
            
              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.

              
              - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.

              
              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.

              
              - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.

              
              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              
                - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.

                
                  - **CaptionChannel** *(integer) --* **[REQUIRED]** The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)

                  
                  - **LanguageCode** *(string) --* **[REQUIRED]** Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)

                  
                  - **LanguageDescription** *(string) --* **[REQUIRED]** Textual description of language

                  
                
            
              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.

              
              - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.

              
              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.

              
              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.

              
              - **Destination** *(dict) --* **[REQUIRED]** A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              
              - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.

              
              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.

              
              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              
                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  
                  - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.

                  
                
                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                
                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                
                - **HlsS3Settings** *(dict) --* Hls S3 Settings

                
                  - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.

                  
                
                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                
              
              - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging

              
              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"

              
              - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.

              
              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.

              
              - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.

              
              - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.

              
              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.

              
              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.

              
              - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.

              
              - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).

              
              - **KeyProviderSettings** *(dict) --* The key provider settings.

              
                - **StaticKeySettings** *(dict) --* Static Key Settings

                
                  - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.

                  
                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                    
                    - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                    
                    - **Username** *(string) --* Documentation update needed

                    
                  
                  - **StaticKeyValue** *(string) --* **[REQUIRED]** Static key value as a 32 character hexadecimal string.

                  
                
              
              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              
              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.

              
              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.

              
              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.

              
              - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.

              
              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.

              
              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              
              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              
              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.

              
              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.

              
              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.

              
              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.

              
              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              
              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              
              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.

              
              - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.

              
            
            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            
              - **Destination** *(dict) --* **[REQUIRED]** MediaPackage channel destination.

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
            
            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            
              - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.

              
              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.

              
              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.

              
              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.

              
              - **Destination** *(dict) --* **[REQUIRED]** Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.

              
              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.

              
              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event

              
              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

              
              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.

              
              - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.

              
              - **NumRetries** *(integer) --* Number of retry attempts.

              
              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.

              
              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.

              
              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.

              
              - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.

              
              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.

              
              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.

              
              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset

              
            
            - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings

            
            
            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            
              - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.

              
                - *(string) --* Rtmp Ad Markers

                
            
              - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN

              
              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.

              
              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.

              
              - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.

              
              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.

              
              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

              
            
            - **UdpGroupSettings** *(dict) --* Udp Group Settings

            
              - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.

              
              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              
              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              
            
          
          - **Outputs** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutput

          
            - *(dict) --* Output settings. There can be multiple outputs within a group.

            
              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.

              
                - *(string) --* Placeholder documentation for __string

                
            
              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.

              
                - *(string) --* Placeholder documentation for __string

                
            
              - **OutputName** *(string) --* The name used to identify an output.

              
              - **OutputSettings** *(dict) --* **[REQUIRED]** Output type-specific settings.

              
                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                
                  - **ContainerSettings** *(dict) --* **[REQUIRED]** Settings specific to the container type of the file.

                  
                    - **M2tsSettings** *(dict) --* M2ts Settings

                    
                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.

                      
                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.

                      
                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.

                      
                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      
                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.

                      
                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                      
                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.

                      
                      - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.

                      
                      - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.

                      
                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.

                      
                        - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the Network Information Table (NIT).

                        
                        - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.

                      
                        - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                        - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                        - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                      
                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.

                      
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.

                      
                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.

                      
                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.

                      
                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                      
                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      
                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.

                      
                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.

                      
                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.

                      
                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                      
                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.

                      
                      - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.

                      
                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.

                      
                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.

                      
                      - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.

                      
                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.

                      
                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.

                      
                      - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.

                      
                      - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.

                      
                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.

                      
                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.

                      
                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                    
                    - **RawSettings** *(dict) --* Raw Settings

                    
                    
                  
                  - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.

                  
                  - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.

                  
                
                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                
                  - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.

                  
                
                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                
                  - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.

                  
                  - **HlsSettings** *(dict) --* **[REQUIRED]** Settings regarding the underlying stream. These settings are different for audio-only outputs.

                  
                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    
                      - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.

                      
                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      
                        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                        
                        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                        
                        - **Username** *(string) --* Documentation update needed

                        
                      
                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                      
                      - **SegmentType** *(string) --* Specifies the segment type.

                      
                    
                    - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings

                    
                      - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.

                      
                      - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                      
                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.

                      
                    
                    - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings

                    
                    
                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    
                      - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.

                      
                      - **M3u8Settings** *(dict) --* **[REQUIRED]** Settings information for the .m3u8 container

                      
                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.

                        
                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.

                        
                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        
                        - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                        
                        - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.

                        
                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.

                        
                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.

                        
                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.

                        
                        - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.

                        
                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.

                        
                        - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.

                        
                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.

                        
                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.

                        
                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.

                        
                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        
                        - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.

                        
                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.

                        
                      
                    
                  
                  - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.

                  
                  - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.

                  
                
                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                
                
                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                
                  - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.

                  
                  - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.

                  
                
                - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings

                
                  - **Destination** *(dict) --* **[REQUIRED]** Destination is a Multiplex.

                  
                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    
                  
                
                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                
                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.

                  
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.

                  
                  - **Destination** *(dict) --* **[REQUIRED]** The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.

                  
                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    
                  
                  - **NumRetries** *(integer) --* Number of retry attempts.

                  
                
                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                
                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.

                  
                  - **ContainerSettings** *(dict) --* **[REQUIRED]** Udp Container Settings

                  
                    - **M2tsSettings** *(dict) --* M2ts Settings

                    
                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.

                      
                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.

                      
                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.

                      
                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      
                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.

                      
                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                      
                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.

                      
                      - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.

                      
                      - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.

                      
                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.

                      
                        - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the Network Information Table (NIT).

                        
                        - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.

                      
                        - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                        - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                        - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                      
                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.

                      
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.

                      
                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.

                      
                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.

                      
                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                      
                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      
                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.

                      
                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.

                      
                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.

                      
                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                      
                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.

                      
                      - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.

                      
                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.

                      
                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.

                      
                      - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.

                      
                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.

                      
                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.

                      
                      - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.

                      
                      - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.

                      
                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.

                      
                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.

                      
                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                    
                  
                  - **Destination** *(dict) --* **[REQUIRED]** Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                  
                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    
                  
                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.

                  
                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.

                    
                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    
                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.

                    
                  
                
              
              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.

              
            
        
        
    
      - **TimecodeConfig** *(dict) --* **[REQUIRED]** Contains settings used to acquire and adjust timecode information from inputs.

      
        - **Source** *(string) --* **[REQUIRED]** Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

        
        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.

        
      
      - **VideoDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfVideoDescription

      
        - *(dict) --* Video settings for this stream.

        
          - **CodecSettings** *(dict) --* Video codec settings.

          
            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            
              - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.

              
              - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.

              
            
            - **H264Settings** *(dict) --* H264 Settings

            
              - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.

              
              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.

              
              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

              
              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).

              
              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              
              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              
              - **ColorSpaceSettings** *(dict) --* Color Space settings

              
                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output

                
                
                - **Rec601Settings** *(dict) --* Rec601 Settings

                
                
                - **Rec709Settings** *(dict) --* Rec709 Settings

                
                
              
              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.

              
              - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.

              
                - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings

                
                  - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.

                  
                  - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.

                  
                
              
              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.

              
              - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.

              
              - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.

              
              - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.

              
              - **FramerateDenominator** *(integer) --* Framerate denominator.

              
              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.

              
              - **GopBReference** *(string) --* Documentation update needed

              
              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.

              
              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              
              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.

              
              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.

              
              - **Level** *(string) --* H.264 Level.

              
              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.

              
              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.

              
              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

              
              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.

              
              - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.

              
              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              
              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              
              - **Profile** *(string) --* H.264 Profile.

              
              - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.

              
              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide

              
              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.

              
              - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.

              
              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.

              
              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.

              
              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.

              
              - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.

              
              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.

              
              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              
              - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.

              
              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config

              
            
            - **H265Settings** *(dict) --* H265 Settings

            
              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.

              
              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.

              
              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.

              
              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

              
              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              
              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              
              - **ColorSpaceSettings** *(dict) --* Color Space settings

              
                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output

                
                
                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                
                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.

                  
                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.

                  
                
                - **Rec601Settings** *(dict) --* Rec601 Settings

                
                
                - **Rec709Settings** *(dict) --* Rec709 Settings

                
                
              
              - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.

              
                - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings

                
                  - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.

                  
                  - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.

                  
                
              
              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.

              
              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.

              
              - **FramerateDenominator** *(integer) --* **[REQUIRED]** Framerate denominator.

              
              - **FramerateNumerator** *(integer) --* **[REQUIRED]** Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.

              
              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.

              
              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.

              
              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.

              
              - **Level** *(string) --* H.265 Level.

              
              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.

              
              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              
              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

              
              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              
              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              
              - **Profile** *(string) --* H.265 Profile.

              
              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M

              
              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.

              
              - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.

              
              - **SceneChangeDetect** *(string) --* Scene change detection.

              
              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.

              
              - **Tier** *(string) --* H.265 Tier.

              
              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config

              
            
            - **Mpeg2Settings** *(dict) --* Mpeg2 Settings

            
              - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.

              
              - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.

              
              - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.

              
              - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.

              
              - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.

              
              - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.

              
                - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings

                
                  - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.

                  
                  - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.

                  
                
              
              - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.

              
              - **FramerateDenominator** *(integer) --* **[REQUIRED]** description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.

              
              - **FramerateNumerator** *(integer) --* **[REQUIRED]** The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.

              
              - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.

              
              - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.

              
              - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.

              
              - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.

              
              - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).

              
              - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.

              
              - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.

              
            
          
          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.

          
          - **Name** *(string) --* **[REQUIRED]** The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.

          
          - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output

          
          - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.

          
          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.

          
          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.

          
        
    
    
    :type InputAttachments: list
    :param InputAttachments: List of input attachments for channel.

    
      - *(dict) --* Placeholder documentation for InputAttachment

      
        - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.

        
          - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.

          
          - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.

          
            - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.

            
              - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.

              
                - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.

                
                  - **AudioSelectorName** *(string) --* **[REQUIRED]** The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.

                  
                  - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.

                  
                
                - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.

                
                  - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.

                  
                
                - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.

                
                  - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.

                  
                  - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.

                  
                
              
            
        
          - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.

          
          - **SecondaryInputId** *(string) --* **[REQUIRED]** The input ID of the secondary input in the automatic input failover pair.

          
        
        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.

        
        - **InputId** *(string) --* The ID of the input

        
        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

        
          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.

          
            - *(dict) --* Audio Selector

            
              - **Name** *(string) --* **[REQUIRED]** The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.

              
              - **SelectorSettings** *(dict) --* The audio selector settings.

              
                - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection

                
                  - **GroupId** *(string) --* **[REQUIRED]** Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.

                  
                  - **Name** *(string) --* **[REQUIRED]** Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.

                  
                
                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                
                  - **LanguageCode** *(string) --* **[REQUIRED]** Selects a specific three-letter language code from within an audio source.

                  
                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.

                  
                
                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                
                  - **Pid** *(integer) --* **[REQUIRED]** Selects a specific PID from within a source.

                  
                
                - **AudioTrackSelection** *(dict) --* Audio Track Selection

                
                  - **Tracks** *(list) --* **[REQUIRED]** Selects one or more unique audio tracks from within a source.

                  
                    - *(dict) --* Audio Track

                    
                      - **Track** *(integer) --* **[REQUIRED]** 1-based integer value that maps to a specific audio track

                      
                    
                
                
              
            
        
          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.

          
            - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.

            
              - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.

              
              - **Name** *(string) --* **[REQUIRED]** Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.

              
              - **SelectorSettings** *(dict) --* Caption selector settings.

              
                - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings

                
                  - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.

                  
                
                - **AribSourceSettings** *(dict) --* Arib Source Settings

                
                
                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                
                  - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.

                  
                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.

                  
                
                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                
                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.

                  
                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  
                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.

                  
                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                  
                
                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                
                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.

                  
                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.

                  
                
                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                
                  - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.

                  
                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.

                  
                
                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                
                  - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed

                  
                    - **Height** *(float) --* **[REQUIRED]** See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.

                    
                    - **LeftOffset** *(float) --* **[REQUIRED]** Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.

                    
                    - **TopOffset** *(float) --* **[REQUIRED]** See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.

                    
                    - **Width** *(float) --* **[REQUIRED]** See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.

                    
                  
                  - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.

                  
                
              
            
        
          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          
          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          
          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).

          
          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type

          
          - **NetworkInputSettings** *(dict) --* Input settings.

          
            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.

            
              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.

              
              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.

              
              - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.

              
              - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.

              
              - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.

              
            
            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.

            
          
          - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.

          
          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.

          
          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.

          
            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.

            
            - **ColorSpaceSettings** *(dict) --* Color space settings

            
              - **Hdr10Settings** *(dict) --* Hdr10 Settings

              
                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.

                
                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.

                
              
            
            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.

            
            - **SelectorSettings** *(dict) --* The video selector settings.

            
              - **VideoSelectorPid** *(dict) --* Video Selector Pid

              
                - **Pid** *(integer) --* Selects a specific PID from within a video source.

                
              
              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

              
                - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.

                
              
            
          
        
      
  
    :type InputSpecification: dict
    :param InputSpecification: Specification of network and file inputs for this channel

    
      - **Codec** *(string) --* Input codec

      
      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      
      - **Resolution** *(string) --* Input resolution, categorized coarsely

      
    
    :type LogLevel: string
    :param LogLevel: The log level to write to CloudWatch Logs.

    
    :type Name: string
    :param Name: Name of channel.

    
    :type RequestId: string
    :param RequestId: Unique request ID to be specified. This is needed to prevent retries from creating multiple resources. This field is autopopulated if not provided.

    
    :type Reserved: string
    :param Reserved: Deprecated field that's only usable by whitelisted customers.

    
    :type RoleArn: string
    :param RoleArn: An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.

    
    :type Tags: dict
    :param Tags: A collection of key-value pairs.

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    :type Vpc: dict
    :param Vpc: Settings for VPC output

    
      - **PublicAddressAllocationIds** *(list) --* List of public address allocation ids to associate with ENIs that will be created in Output VPC. Must specify one for SINGLE_PIPELINE, two for STANDARD channels 

      
        - *(string) --* Placeholder documentation for __string

        
    
      - **SecurityGroupIds** *(list) --* A list of up to 5 EC2 VPC security group IDs to attach to the Output VPC network interfaces. If none are specified then the VPC default security group will be used 

      
        - *(string) --* Placeholder documentation for __string

        
    
      - **SubnetIds** *(list) --* **[REQUIRED]** A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 

      
        - *(string) --* Placeholder documentation for __string

        
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Channel': {
                'Arn': 'string',
                'CdiInputSpecification': {
                    'Resolution': 'SD'|'HD'|'FHD'|'UHD'
                },
                'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                'Destinations': [
                    {
                        'Id': 'string',
                        'MediaPackageSettings': [
                            {
                                'ChannelId': 'string'
                            },
                        ],
                        'MultiplexSettings': {
                            'MultiplexId': 'string',
                            'ProgramName': 'string'
                        },
                        'Settings': [
                            {
                                'PasswordParam': 'string',
                                'StreamName': 'string',
                                'Url': 'string',
                                'Username': 'string'
                            },
                        ]
                    },
                ],
                'EgressEndpoints': [
                    {
                        'SourceIp': 'string'
                    },
                ],
                'EncoderSettings': {
                    'AudioDescriptions': [
                        {
                            'AudioNormalizationSettings': {
                                'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                                'AlgorithmControl': 'CORRECT_AUDIO',
                                'TargetLkfs': 123.0
                            },
                            'AudioSelectorName': 'string',
                            'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                            'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                            'CodecSettings': {
                                'AacSettings': {
                                    'Bitrate': 123.0,
                                    'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                                    'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                                    'Profile': 'HEV1'|'HEV2'|'LC',
                                    'RateControlMode': 'CBR'|'VBR',
                                    'RawFormat': 'LATM_LOAS'|'NONE',
                                    'SampleRate': 123.0,
                                    'Spec': 'MPEG2'|'MPEG4',
                                    'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                                },
                                'Ac3Settings': {
                                    'Bitrate': 123.0,
                                    'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                                    'Dialnorm': 123,
                                    'DrcProfile': 'FILM_STANDARD'|'NONE',
                                    'LfeFilter': 'DISABLED'|'ENABLED',
                                    'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                                },
                                'Eac3Settings': {
                                    'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                                    'Bitrate': 123.0,
                                    'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                                    'DcFilter': 'DISABLED'|'ENABLED',
                                    'Dialnorm': 123,
                                    'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                    'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                    'LfeControl': 'LFE'|'NO_LFE',
                                    'LfeFilter': 'DISABLED'|'ENABLED',
                                    'LoRoCenterMixLevel': 123.0,
                                    'LoRoSurroundMixLevel': 123.0,
                                    'LtRtCenterMixLevel': 123.0,
                                    'LtRtSurroundMixLevel': 123.0,
                                    'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                                    'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                                    'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                                    'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                                    'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                                    'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                                },
                                'Mp2Settings': {
                                    'Bitrate': 123.0,
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                                    'SampleRate': 123.0
                                },
                                'PassThroughSettings': {},
                                'WavSettings': {
                                    'BitDepth': 123.0,
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                                    'SampleRate': 123.0
                                }
                            },
                            'LanguageCode': 'string',
                            'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                            'Name': 'string',
                            'RemixSettings': {
                                'ChannelMappings': [
                                    {
                                        'InputChannelLevels': [
                                            {
                                                'Gain': 123,
                                                'InputChannel': 123
                                            },
                                        ],
                                        'OutputChannel': 123
                                    },
                                ],
                                'ChannelsIn': 123,
                                'ChannelsOut': 123
                            },
                            'StreamName': 'string'
                        },
                    ],
                    'AvailBlanking': {
                        'AvailBlankingImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'State': 'DISABLED'|'ENABLED'
                    },
                    'AvailConfiguration': {
                        'AvailSettings': {
                            'Scte35SpliceInsert': {
                                'AdAvailOffset': 123,
                                'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                                'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                            },
                            'Scte35TimeSignalApos': {
                                'AdAvailOffset': 123,
                                'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                                'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                            }
                        }
                    },
                    'BlackoutSlate': {
                        'BlackoutSlateImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                        'NetworkEndBlackoutImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'NetworkId': 'string',
                        'State': 'DISABLED'|'ENABLED'
                    },
                    'CaptionDescriptions': [
                        {
                            'CaptionSelectorName': 'string',
                            'DestinationSettings': {
                                'AribDestinationSettings': {},
                                'BurnInDestinationSettings': {
                                    'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                    'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                    'BackgroundOpacity': 123,
                                    'Font': {
                                        'PasswordParam': 'string',
                                        'Uri': 'string',
                                        'Username': 'string'
                                    },
                                    'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'FontOpacity': 123,
                                    'FontResolution': 123,
                                    'FontSize': 'string',
                                    'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'OutlineSize': 123,
                                    'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                    'ShadowOpacity': 123,
                                    'ShadowXOffset': 123,
                                    'ShadowYOffset': 123,
                                    'TeletextGridControl': 'FIXED'|'SCALED',
                                    'XPosition': 123,
                                    'YPosition': 123
                                },
                                'DvbSubDestinationSettings': {
                                    'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                    'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                    'BackgroundOpacity': 123,
                                    'Font': {
                                        'PasswordParam': 'string',
                                        'Uri': 'string',
                                        'Username': 'string'
                                    },
                                    'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'FontOpacity': 123,
                                    'FontResolution': 123,
                                    'FontSize': 'string',
                                    'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'OutlineSize': 123,
                                    'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                    'ShadowOpacity': 123,
                                    'ShadowXOffset': 123,
                                    'ShadowYOffset': 123,
                                    'TeletextGridControl': 'FIXED'|'SCALED',
                                    'XPosition': 123,
                                    'YPosition': 123
                                },
                                'EbuTtDDestinationSettings': {
                                    'CopyrightHolder': 'string',
                                    'FillLineGap': 'DISABLED'|'ENABLED',
                                    'FontFamily': 'string',
                                    'StyleControl': 'EXCLUDE'|'INCLUDE'
                                },
                                'EmbeddedDestinationSettings': {},
                                'EmbeddedPlusScte20DestinationSettings': {},
                                'RtmpCaptionInfoDestinationSettings': {},
                                'Scte20PlusEmbeddedDestinationSettings': {},
                                'Scte27DestinationSettings': {},
                                'SmpteTtDestinationSettings': {},
                                'TeletextDestinationSettings': {},
                                'TtmlDestinationSettings': {
                                    'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                                },
                                'WebvttDestinationSettings': {
                                    'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                                }
                            },
                            'LanguageCode': 'string',
                            'LanguageDescription': 'string',
                            'Name': 'string'
                        },
                    ],
                    'FeatureActivations': {
                        'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
                    },
                    'GlobalConfiguration': {
                        'InitialAudioGain': 123,
                        'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                        'InputLossBehavior': {
                            'BlackFrameMsec': 123,
                            'InputLossImageColor': 'string',
                            'InputLossImageSlate': {
                                'PasswordParam': 'string',
                                'Uri': 'string',
                                'Username': 'string'
                            },
                            'InputLossImageType': 'COLOR'|'SLATE',
                            'RepeatFrameMsec': 123
                        },
                        'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                        'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                        'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
                    },
                    'MotionGraphicsConfiguration': {
                        'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                        'MotionGraphicsSettings': {
                            'HtmlMotionGraphicsSettings': {}
                        }
                    },
                    'NielsenConfiguration': {
                        'DistributorId': 'string',
                        'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
                    },
                    'OutputGroups': [
                        {
                            'Name': 'string',
                            'OutputGroupSettings': {
                                'ArchiveGroupSettings': {
                                    'ArchiveCdnSettings': {
                                        'ArchiveS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        }
                                    },
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'RolloverInterval': 123
                                },
                                'FrameCaptureGroupSettings': {
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'FrameCaptureCdnSettings': {
                                        'FrameCaptureS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        }
                                    }
                                },
                                'HlsGroupSettings': {
                                    'AdMarkers': [
                                        'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                                    ],
                                    'BaseUrlContent': 'string',
                                    'BaseUrlContent1': 'string',
                                    'BaseUrlManifest': 'string',
                                    'BaseUrlManifest1': 'string',
                                    'CaptionLanguageMappings': [
                                        {
                                            'CaptionChannel': 123,
                                            'LanguageCode': 'string',
                                            'LanguageDescription': 'string'
                                        },
                                    ],
                                    'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                                    'ClientCache': 'DISABLED'|'ENABLED',
                                    'CodecSpecification': 'RFC_4281'|'RFC_6381',
                                    'ConstantIv': 'string',
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                                    'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                                    'EncryptionType': 'AES128'|'SAMPLE_AES',
                                    'HlsCdnSettings': {
                                        'HlsAkamaiSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                            'NumRetries': 123,
                                            'RestartDelay': 123,
                                            'Salt': 'string',
                                            'Token': 'string'
                                        },
                                        'HlsBasicPutSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        },
                                        'HlsMediaStoreSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'MediaStoreStorageClass': 'TEMPORAL',
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        },
                                        'HlsS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        },
                                        'HlsWebdavSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        }
                                    },
                                    'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                                    'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                                    'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                                    'IndexNSegments': 123,
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'IvInManifest': 'EXCLUDE'|'INCLUDE',
                                    'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                                    'KeepSegments': 123,
                                    'KeyFormat': 'string',
                                    'KeyFormatVersions': 'string',
                                    'KeyProviderSettings': {
                                        'StaticKeySettings': {
                                            'KeyProviderServer': {
                                                'PasswordParam': 'string',
                                                'Uri': 'string',
                                                'Username': 'string'
                                            },
                                            'StaticKeyValue': 'string'
                                        }
                                    },
                                    'ManifestCompression': 'GZIP'|'NONE',
                                    'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                                    'MinSegmentLength': 123,
                                    'Mode': 'LIVE'|'VOD',
                                    'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                                    'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                                    'ProgramDateTimePeriod': 123,
                                    'RedundantManifest': 'DISABLED'|'ENABLED',
                                    'SegmentLength': 123,
                                    'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                    'SegmentsPerSubdirectory': 123,
                                    'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                                    'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                    'TimedMetadataId3Period': 123,
                                    'TimestampDeltaMilliseconds': 123,
                                    'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                                },
                                'MediaPackageGroupSettings': {
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    }
                                },
                                'MsSmoothGroupSettings': {
                                    'AcquisitionPointId': 'string',
                                    'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                                    'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                    'ConnectionRetryInterval': 123,
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'EventId': 'string',
                                    'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                                    'EventStopBehavior': 'NONE'|'SEND_EOS',
                                    'FilecacheDuration': 123,
                                    'FragmentLength': 123,
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'NumRetries': 123,
                                    'RestartDelay': 123,
                                    'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                    'SendDelayMs': 123,
                                    'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                                    'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                                    'TimestampOffset': 'string',
                                    'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                                },
                                'MultiplexGroupSettings': {},
                                'RtmpGroupSettings': {
                                    'AdMarkers': [
                                        'ON_CUE_POINT_SCTE35',
                                    ],
                                    'AuthenticationScheme': 'AKAMAI'|'COMMON',
                                    'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                                    'CacheLength': 123,
                                    'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'RestartDelay': 123
                                },
                                'UdpGroupSettings': {
                                    'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                                    'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                    'TimedMetadataId3Period': 123
                                }
                            },
                            'Outputs': [
                                {
                                    'AudioDescriptionNames': [
                                        'string',
                                    ],
                                    'CaptionDescriptionNames': [
                                        'string',
                                    ],
                                    'OutputName': 'string',
                                    'OutputSettings': {
                                        'ArchiveOutputSettings': {
                                            'ContainerSettings': {
                                                'M2tsSettings': {
                                                    'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                    'Arib': 'DISABLED'|'ENABLED',
                                                    'AribCaptionsPid': 'string',
                                                    'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                    'AudioBufferModel': 'ATSC'|'DVB',
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'AudioStreamType': 'ATSC'|'DVB',
                                                    'Bitrate': 123,
                                                    'BufferModel': 'MULTIPLEX'|'NONE',
                                                    'CcDescriptor': 'DISABLED'|'ENABLED',
                                                    'DvbNitSettings': {
                                                        'NetworkId': 123,
                                                        'NetworkName': 'string',
                                                        'RepInterval': 123
                                                    },
                                                    'DvbSdtSettings': {
                                                        'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                        'RepInterval': 123,
                                                        'ServiceName': 'string',
                                                        'ServiceProviderName': 'string'
                                                    },
                                                    'DvbSubPids': 'string',
                                                    'DvbTdtSettings': {
                                                        'RepInterval': 123
                                                    },
                                                    'DvbTeletextPid': 'string',
                                                    'Ebif': 'NONE'|'PASSTHROUGH',
                                                    'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                    'EbpLookaheadMs': 123,
                                                    'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                    'EcmPid': 'string',
                                                    'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                    'EtvPlatformPid': 'string',
                                                    'EtvSignalPid': 'string',
                                                    'FragmentTime': 123.0,
                                                    'Klv': 'NONE'|'PASSTHROUGH',
                                                    'KlvDataPids': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'NullPacketBitrate': 123.0,
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'RateMode': 'CBR'|'VBR',
                                                    'Scte27Pids': 'string',
                                                    'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                    'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                    'SegmentationTime': 123.0,
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                },
                                                'RawSettings': {}
                                            },
                                            'Extension': 'string',
                                            'NameModifier': 'string'
                                        },
                                        'FrameCaptureOutputSettings': {
                                            'NameModifier': 'string'
                                        },
                                        'HlsOutputSettings': {
                                            'H265PackagingType': 'HEV1'|'HVC1',
                                            'HlsSettings': {
                                                'AudioOnlyHlsSettings': {
                                                    'AudioGroupId': 'string',
                                                    'AudioOnlyImage': {
                                                        'PasswordParam': 'string',
                                                        'Uri': 'string',
                                                        'Username': 'string'
                                                    },
                                                    'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                                    'SegmentType': 'AAC'|'FMP4'
                                                },
                                                'Fmp4HlsSettings': {
                                                    'AudioRenditionSets': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                                },
                                                'FrameCaptureHlsSettings': {},
                                                'StandardHlsSettings': {
                                                    'AudioRenditionSets': 'string',
                                                    'M3u8Settings': {
                                                        'AudioFramesPerPes': 123,
                                                        'AudioPids': 'string',
                                                        'EcmPid': 'string',
                                                        'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'PatInterval': 123,
                                                        'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                        'PcrPeriod': 123,
                                                        'PcrPid': 'string',
                                                        'PmtInterval': 123,
                                                        'PmtPid': 'string',
                                                        'ProgramNum': 123,
                                                        'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'Scte35Pid': 'string',
                                                        'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'TimedMetadataPid': 'string',
                                                        'TransportStreamId': 123,
                                                        'VideoPid': 'string'
                                                    }
                                                }
                                            },
                                            'NameModifier': 'string',
                                            'SegmentModifier': 'string'
                                        },
                                        'MediaPackageOutputSettings': {},
                                        'MsSmoothOutputSettings': {
                                            'H265PackagingType': 'HEV1'|'HVC1',
                                            'NameModifier': 'string'
                                        },
                                        'MultiplexOutputSettings': {
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            }
                                        },
                                        'RtmpOutputSettings': {
                                            'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                            'ConnectionRetryInterval': 123,
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            },
                                            'NumRetries': 123
                                        },
                                        'UdpOutputSettings': {
                                            'BufferMsec': 123,
                                            'ContainerSettings': {
                                                'M2tsSettings': {
                                                    'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                    'Arib': 'DISABLED'|'ENABLED',
                                                    'AribCaptionsPid': 'string',
                                                    'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                    'AudioBufferModel': 'ATSC'|'DVB',
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'AudioStreamType': 'ATSC'|'DVB',
                                                    'Bitrate': 123,
                                                    'BufferModel': 'MULTIPLEX'|'NONE',
                                                    'CcDescriptor': 'DISABLED'|'ENABLED',
                                                    'DvbNitSettings': {
                                                        'NetworkId': 123,
                                                        'NetworkName': 'string',
                                                        'RepInterval': 123
                                                    },
                                                    'DvbSdtSettings': {
                                                        'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                        'RepInterval': 123,
                                                        'ServiceName': 'string',
                                                        'ServiceProviderName': 'string'
                                                    },
                                                    'DvbSubPids': 'string',
                                                    'DvbTdtSettings': {
                                                        'RepInterval': 123
                                                    },
                                                    'DvbTeletextPid': 'string',
                                                    'Ebif': 'NONE'|'PASSTHROUGH',
                                                    'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                    'EbpLookaheadMs': 123,
                                                    'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                    'EcmPid': 'string',
                                                    'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                    'EtvPlatformPid': 'string',
                                                    'EtvSignalPid': 'string',
                                                    'FragmentTime': 123.0,
                                                    'Klv': 'NONE'|'PASSTHROUGH',
                                                    'KlvDataPids': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'NullPacketBitrate': 123.0,
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'RateMode': 'CBR'|'VBR',
                                                    'Scte27Pids': 'string',
                                                    'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                    'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                    'SegmentationTime': 123.0,
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                }
                                            },
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            },
                                            'FecOutputSettings': {
                                                'ColumnDepth': 123,
                                                'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                                'RowLength': 123
                                            }
                                        }
                                    },
                                    'VideoDescriptionName': 'string'
                                },
                            ]
                        },
                    ],
                    'TimecodeConfig': {
                        'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                        'SyncThreshold': 123
                    },
                    'VideoDescriptions': [
                        {
                            'CodecSettings': {
                                'FrameCaptureSettings': {
                                    'CaptureInterval': 123,
                                    'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                                },
                                'H264Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'Bitrate': 123,
                                    'BufFillPct': 123,
                                    'BufSize': 123,
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpaceSettings': {
                                        'ColorSpacePassthroughSettings': {},
                                        'Rec601Settings': {},
                                        'Rec709Settings': {}
                                    },
                                    'EntropyEncoding': 'CABAC'|'CAVLC',
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FlickerAq': 'DISABLED'|'ENABLED',
                                    'ForceFieldPictures': 'DISABLED'|'ENABLED',
                                    'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopBReference': 'DISABLED'|'ENABLED',
                                    'GopClosedCadence': 123,
                                    'GopNumBFrames': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                                    'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                    'MaxBitrate': 123,
                                    'MinIInterval': 123,
                                    'NumRefFrames': 123,
                                    'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                    'ParDenominator': 123,
                                    'ParNumerator': 123,
                                    'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                                    'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                                    'QvbrQualityLevel': 123,
                                    'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                    'Slices': 123,
                                    'Softness': 123,
                                    'SpatialAq': 'DISABLED'|'ENABLED',
                                    'SubgopLength': 'DYNAMIC'|'FIXED',
                                    'Syntax': 'DEFAULT'|'RP2027',
                                    'TemporalAq': 'DISABLED'|'ENABLED',
                                    'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                                },
                                'H265Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'AlternativeTransferFunction': 'INSERT'|'OMIT',
                                    'Bitrate': 123,
                                    'BufSize': 123,
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpaceSettings': {
                                        'ColorSpacePassthroughSettings': {},
                                        'Hdr10Settings': {
                                            'MaxCll': 123,
                                            'MaxFall': 123
                                        },
                                        'Rec601Settings': {},
                                        'Rec709Settings': {}
                                    },
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FlickerAq': 'DISABLED'|'ENABLED',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopClosedCadence': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                                    'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                    'MaxBitrate': 123,
                                    'MinIInterval': 123,
                                    'ParDenominator': 123,
                                    'ParNumerator': 123,
                                    'Profile': 'MAIN'|'MAIN_10BIT',
                                    'QvbrQualityLevel': 123,
                                    'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                    'Slices': 123,
                                    'Tier': 'HIGH'|'MAIN',
                                    'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                                },
                                'Mpeg2Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpace': 'AUTO'|'PASSTHROUGH',
                                    'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopClosedCadence': 123,
                                    'GopNumBFrames': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SubgopLength': 'DYNAMIC'|'FIXED',
                                    'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                                }
                            },
                            'Height': 123,
                            'Name': 'string',
                            'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                            'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                            'Sharpness': 123,
                            'Width': 123
                        },
                    ]
                },
                'Id': 'string',
                'InputAttachments': [
                    {
                        'AutomaticInputFailoverSettings': {
                            'ErrorClearTimeMsec': 123,
                            'FailoverConditions': [
                                {
                                    'FailoverConditionSettings': {
                                        'AudioSilenceSettings': {
                                            'AudioSelectorName': 'string',
                                            'AudioSilenceThresholdMsec': 123
                                        },
                                        'InputLossSettings': {
                                            'InputLossThresholdMsec': 123
                                        },
                                        'VideoBlackSettings': {
                                            'BlackDetectThreshold': 123.0,
                                            'VideoBlackThresholdMsec': 123
                                        }
                                    }
                                },
                            ],
                            'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                            'SecondaryInputId': 'string'
                        },
                        'InputAttachmentName': 'string',
                        'InputId': 'string',
                        'InputSettings': {
                            'AudioSelectors': [
                                {
                                    'Name': 'string',
                                    'SelectorSettings': {
                                        'AudioHlsRenditionSelection': {
                                            'GroupId': 'string',
                                            'Name': 'string'
                                        },
                                        'AudioLanguageSelection': {
                                            'LanguageCode': 'string',
                                            'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                        },
                                        'AudioPidSelection': {
                                            'Pid': 123
                                        },
                                        'AudioTrackSelection': {
                                            'Tracks': [
                                                {
                                                    'Track': 123
                                                },
                                            ]
                                        }
                                    }
                                },
                            ],
                            'CaptionSelectors': [
                                {
                                    'LanguageCode': 'string',
                                    'Name': 'string',
                                    'SelectorSettings': {
                                        'AncillarySourceSettings': {
                                            'SourceAncillaryChannelNumber': 123
                                        },
                                        'AribSourceSettings': {},
                                        'DvbSubSourceSettings': {
                                            'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                            'Pid': 123
                                        },
                                        'EmbeddedSourceSettings': {
                                            'Convert608To708': 'DISABLED'|'UPCONVERT',
                                            'Scte20Detection': 'AUTO'|'OFF',
                                            'Source608ChannelNumber': 123,
                                            'Source608TrackNumber': 123
                                        },
                                        'Scte20SourceSettings': {
                                            'Convert608To708': 'DISABLED'|'UPCONVERT',
                                            'Source608ChannelNumber': 123
                                        },
                                        'Scte27SourceSettings': {
                                            'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                            'Pid': 123
                                        },
                                        'TeletextSourceSettings': {
                                            'OutputRectangle': {
                                                'Height': 123.0,
                                                'LeftOffset': 123.0,
                                                'TopOffset': 123.0,
                                                'Width': 123.0
                                            },
                                            'PageNumber': 'string'
                                        }
                                    }
                                },
                            ],
                            'DeblockFilter': 'DISABLED'|'ENABLED',
                            'DenoiseFilter': 'DISABLED'|'ENABLED',
                            'FilterStrength': 123,
                            'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                            'NetworkInputSettings': {
                                'HlsInputSettings': {
                                    'Bandwidth': 123,
                                    'BufferSegments': 123,
                                    'Retries': 123,
                                    'RetryInterval': 123,
                                    'Scte35Source': 'MANIFEST'|'SEGMENTS'
                                },
                                'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                            },
                            'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                            'SourceEndBehavior': 'CONTINUE'|'LOOP',
                            'VideoSelector': {
                                'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                                'ColorSpaceSettings': {
                                    'Hdr10Settings': {
                                        'MaxCll': 123,
                                        'MaxFall': 123
                                    }
                                },
                                'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                                'SelectorSettings': {
                                    'VideoSelectorPid': {
                                        'Pid': 123
                                    },
                                    'VideoSelectorProgramId': {
                                        'ProgramId': 123
                                    }
                                }
                            }
                        }
                    },
                ],
                'InputSpecification': {
                    'Codec': 'MPEG2'|'AVC'|'HEVC',
                    'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                    'Resolution': 'SD'|'HD'|'UHD'
                },
                'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
                'Name': 'string',
                'PipelineDetails': [
                    {
                        'ActiveInputAttachmentName': 'string',
                        'ActiveInputSwitchActionName': 'string',
                        'ActiveMotionGraphicsActionName': 'string',
                        'ActiveMotionGraphicsUri': 'string',
                        'PipelineId': 'string'
                    },
                ],
                'PipelinesRunningCount': 123,
                'RoleArn': 'string',
                'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
                'Tags': {
                    'string': 'string'
                },
                'Vpc': {
                    'AvailabilityZones': [
                        'string',
                    ],
                    'NetworkInterfaceIds': [
                        'string',
                    ],
                    'SecurityGroupIds': [
                        'string',
                    ],
                    'SubnetIds': [
                        'string',
                    ]
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* Creation of channel is started.
        

        - **Channel** *(dict) --* Placeholder documentation for Channel
          

          - **Arn** *(string) --* The unique arn of the channel.
          

          - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
            

            - **Resolution** *(string) --* Maximum CDI input resolution
        
          

          - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
          

          - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
            

            - *(dict) --* Placeholder documentation for OutputDestination
              

              - **Id** *(string) --* User-specified id. This is used in an output group or an output.
              

              - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
                

                - *(dict) --* MediaPackage Output Destination Settings
                  

                  - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
              
            
              

              - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
                

                - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
                

                - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
            
              

              - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
                

                - *(dict) --* Placeholder documentation for OutputDestinationSettings
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                  

                  - **Url** *(string) --* A URL specifying a destination
                  

                  - **Username** *(string) --* username for destination
              
            
          
        
          

          - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
            

            - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
              

              - **SourceIp** *(string) --* Public IP of where a channel's output comes from
          
        
          

          - **EncoderSettings** *(dict) --* Encoder Settings
            

            - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription
              

              - *(dict) --* Audio Description
                

                - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.
                  

                  - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
                  

                  - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
                  

                  - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
              
                

                - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source for this AudioDescription.
                

                - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
                

                - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
                

                - **CodecSettings** *(dict) --* Audio codec settings.
                  

                  - **AacSettings** *(dict) --* Aac Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.
                    

                    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
                    

                    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
                    

                    - **Profile** *(string) --* AAC Profile.
                    

                    - **RateControlMode** *(string) --* Rate Control Mode.
                    

                    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.
                    

                    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.
                    

                    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
                    

                    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.
                
                  

                  - **Ac3Settings** *(dict) --* Ac3 Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                    

                    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
                    

                    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.
                    

                    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
                    

                    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
                    

                    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
                    

                    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                
                  

                  - **Eac3Settings** *(dict) --* Eac3 Settings
                    

                    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                    

                    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
                    

                    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.
                    

                    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.
                    

                    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
                    

                    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.
                    

                    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
                    

                    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel
                    

                    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
                    

                    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.
                    

                    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.
                    

                    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.
                    

                    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.
                    

                    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                    

                    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
                    

                    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
                    

                    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.
                    

                    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
                    

                    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
                
                  

                  - **Mp2Settings** *(dict) --* Mp2 Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second.
                    

                    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
                    

                    - **SampleRate** *(float) --* Sample rate in Hz.
                
                  

                  - **PassThroughSettings** *(dict) --* Pass Through Settings
                
                  

                  - **WavSettings** *(dict) --* Wav Settings
                    

                    - **BitDepth** *(float) --* Bits per sample.
                    

                    - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
                    

                    - **SampleRate** *(float) --* Sample rate in Hz.
                
              
                

                - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
                

                - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
                

                - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
                

                - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.
                  

                  - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with appropriate gain adjustments.
                    

                    - *(dict) --* Audio Channel Mapping
                      

                      - **InputChannelLevels** *(list) --* Indices and gain values for each input channel that should be remixed into this output channel.
                        

                        - *(dict) --* Input Channel Level
                          

                          - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
                          

                          - **InputChannel** *(integer) --* The index of the input channel used as a source.
                      
                    
                      

                      - **OutputChannel** *(integer) --* The index of the output channel being produced.
                  
                
                  

                  - **ChannelsIn** *(integer) --* Number of input channels to be used.
                  

                  - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
              
                

                - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
            
          
            

            - **AvailBlanking** *(dict) --* Settings for ad avail blanking.
              

              - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
          
            

            - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.
              

              - **AvailSettings** *(dict) --* Ad avail settings.
                

                - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert
                  

                  - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                  

                  - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                  

                  - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
              
                

                - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos
                  

                  - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                  

                  - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                  

                  - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
              
            
          
            

            - **BlackoutSlate** *(dict) --* Settings for blackout slate.
              

              - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
              

              - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
              

              - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
          
            

            - **CaptionDescriptions** *(list) --* Settings for caption decriptions
              

              - *(dict) --* Caption Description
                

                - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
                

                - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.
                  

                  - **AribDestinationSettings** *(dict) --* Arib Destination Settings
                
                  

                  - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings
                    

                    - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                      

                      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                      

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                      

                      - **Username** *(string) --* Documentation update needed
                  
                    

                    - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                    

                    - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                    

                    - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
                    

                    - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
                
                  

                  - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings
                    

                    - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                      

                      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                      

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                      

                      - **Username** *(string) --* Documentation update needed
                  
                    

                    - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                    

                    - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                    

                    - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                
                  

                  - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings
                    

                    - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
                    

                    - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
                    

                    - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
                    

                    - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
                
                  

                  - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings
                
                  

                  - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings
                
                  

                  - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings
                
                  

                  - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings
                
                  

                  - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings
                
                  

                  - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings
                
                  

                  - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings
                
                  

                  - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings
                    

                    - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
                
                  

                  - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings
                    

                    - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
                
              
                

                - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
                

                - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).
                

                - **Name** *(string) --* Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
            
          
            

            - **FeatureActivations** *(dict) --* Feature Activations
              

              - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
          
            

            - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.
              

              - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.
              

              - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
              

              - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.
                

                - **BlackFrameMsec** *(integer) --* Documentation update needed
                

                - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
                

                - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                  

                  - **Username** *(string) --* Documentation update needed
              
                

                - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
                

                - **RepeatFrameMsec** *(integer) --* Documentation update needed
            
              

              - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
              

              - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
              

              - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
          
            

            - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.
              

              - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion
              

              - **MotionGraphicsSettings** *(dict) --* Motion Graphics Settings
                

                - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings
              
            
          
            

            - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.
              

              - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.
              

              - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging
          
            

            - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup
              

              - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                

                - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
                

                - **OutputGroupSettings** *(dict) --* Settings associated with the output group.
                  

                  - **ArchiveGroupSettings** *(dict) --* Archive Group Settings
                    

                    - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **ArchiveS3Settings** *(dict) --* Archive S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                  
                    

                    - **Destination** *(dict) --* A directory and base filename where archive files should be written.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.
                
                  

                  - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings
                    

                    - **Destination** *(dict) --* The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                  
                
                  

                  - **HlsGroupSettings** *(dict) --* Hls Group Settings
                    

                    - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
                      

                      - *(string) --* Hls Ad Markers
                  
                    

                    - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                    

                    - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
                    

                    - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                    

                    - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
                    

                    - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
                      

                      - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
                        

                        - **CaptionChannel** *(integer) --* The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
                        

                        - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
                        

                        - **LanguageDescription** *(string) --* Textual description of language
                    
                  
                    

                    - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
                    

                    - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
                    

                    - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
                    

                    - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
                    

                    - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **DirectoryStructure** *(string) --* Place segments in subdirectories.
                    

                    - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
                    

                    - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
                    

                    - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                        

                        - **Salt** *(string) --* Salt for authenticated Akamai.
                        

                        - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.
                    
                      

                      - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                      

                      - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                      

                      - **HlsS3Settings** *(dict) --* Hls S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                      

                      - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                  
                    

                    - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging
                    

                    - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
                    

                    - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
                    

                    - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
                    

                    - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                    

                    - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
                    

                    - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
                    

                    - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
                    

                    - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
                    

                    - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).
                    

                    - **KeyProviderSettings** *(dict) --* The key provider settings.
                      

                      - **StaticKeySettings** *(dict) --* Static Key Settings
                        

                        - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.
                          

                          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                          

                          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                          

                          - **Username** *(string) --* Documentation update needed
                      
                        

                        - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal string.
                    
                  
                    

                    - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.
                    

                    - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.
                    

                    - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
                    

                    - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
                    

                    - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
                    

                    - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
                    

                    - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
                    

                    - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
                    

                    - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
                    

                    - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                    

                    - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
                    

                    - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
                    

                    - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                    

                    - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                    

                    - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.
                    

                    - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
                
                  

                  - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings
                    

                    - **Destination** *(dict) --* MediaPackage channel destination.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                
                  

                  - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings
                    

                    - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
                    

                    - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
                    

                    - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
                    

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
                    

                    - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
                    

                    - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
                    

                    - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event
                    

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                    

                    - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
                    

                    - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                    

                    - **NumRetries** *(integer) --* Number of retry attempts.
                    

                    - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
                    

                    - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                    

                    - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.
                    

                    - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
                    

                    - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.
                    

                    - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
                    

                    - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
                
                  

                  - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings
                
                  

                  - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings
                    

                    - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
                      

                      - *(string) --* Rtmp Ad Markers
                  
                    

                    - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN
                    

                    - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
                    

                    - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.
                    

                    - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
                    

                    - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
                    

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                
                  

                  - **UdpGroupSettings** *(dict) --* Udp Group Settings
                    

                    - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
                    

                    - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                    

                    - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                
              
                

                - **Outputs** *(list) --* Placeholder documentation for __listOfOutput
                  

                  - *(dict) --* Output settings. There can be multiple outputs within a group.
                    

                    - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.
                      

                      - *(string) --* Placeholder documentation for __string
                  
                    

                    - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.
                      

                      - *(string) --* Placeholder documentation for __string
                  
                    

                    - **OutputName** *(string) --* The name used to identify an output.
                    

                    - **OutputSettings** *(dict) --* Output type-specific settings.
                      

                      - **ArchiveOutputSettings** *(dict) --* Archive Output Settings
                        

                        - **ContainerSettings** *(dict) --* Settings specific to the container type of the file.
                          

                          - **M2tsSettings** *(dict) --* M2ts Settings
                            

                            - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                            

                            - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                            

                            - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                            

                            - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                            

                            - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                            

                            - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                            

                            - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                            

                            - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                              

                              - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                              

                              - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                              

                              - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                              

                              - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                              

                              - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                          
                            

                            - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                            

                            - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                            

                            - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                            

                            - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                            

                            - **EcmPid** *(string) --* This field is unused and deprecated.
                            

                            - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                            

                            - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                            

                            - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                            

                            - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                            

                            - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                            

                            - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                            

                            - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                        
                          

                          - **RawSettings** *(dict) --* Raw Settings
                        
                      
                        

                        - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                    
                      

                      - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings
                        

                        - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.
                    
                      

                      - **HlsOutputSettings** *(dict) --* Hls Output Settings
                        

                        - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                        

                        - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These settings are different for audio-only outputs.
                          

                          - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings
                            

                            - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.
                            

                            - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
                              

                              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                              

                              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                              

                              - **Username** *(string) --* Documentation update needed
                          
                            

                            - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
                            

                            - **SegmentType** *(string) --* Specifies the segment type.
                        
                          

                          - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings
                            

                            - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                        
                          

                          - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings
                        
                          

                          - **StandardHlsSettings** *(dict) --* Standard Hls Settings
                            

                            - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                            

                            - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container
                              

                              - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                              

                              - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
                              

                              - **EcmPid** *(string) --* This parameter is unused and deprecated.
                              

                              - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                              

                              - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                              

                              - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                              

                              - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
                              

                              - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
                              

                              - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                              

                              - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                              

                              - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                              

                              - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.
                              

                              - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                              

                              - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                              

                              - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                              

                              - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                              

                              - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                          
                        
                      
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
                        

                        - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.
                    
                      

                      - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings
                    
                      

                      - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings
                        

                        - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                    
                      

                      - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings
                        

                        - **Destination** *(dict) --* Destination is a Multiplex.
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                    
                      

                      - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings
                        

                        - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
                        

                        - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                        

                        - **NumRetries** *(integer) --* Number of retry attempts.
                    
                      

                      - **UdpOutputSettings** *(dict) --* Udp Output Settings
                        

                        - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
                        

                        - **ContainerSettings** *(dict) --* Udp Container Settings
                          

                          - **M2tsSettings** *(dict) --* M2ts Settings
                            

                            - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                            

                            - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                            

                            - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                            

                            - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                            

                            - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                            

                            - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                            

                            - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                            

                            - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                              

                              - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                              

                              - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                              

                              - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                              

                              - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                              

                              - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                          
                            

                            - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                            

                            - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                            

                            - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                            

                            - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                            

                            - **EcmPid** *(string) --* This field is unused and deprecated.
                            

                            - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                            

                            - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                            

                            - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                            

                            - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                            

                            - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                            

                            - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                            

                            - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                        
                      
                        

                        - **Destination** *(dict) --* Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                        

                        - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.
                          

                          - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
                          

                          - **IncludeFec** *(string) --* Enables column only or column and row based FEC
                          

                          - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
                      
                    
                  
                    

                    - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.
                
              
            
          
            

            - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode information from inputs.
              

              - **Source** *(string) --* Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
              

              - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
          
            

            - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription
              

              - *(dict) --* Video settings for this stream.
                

                - **CodecSettings** *(dict) --* Video codec settings.
                  

                  - **FrameCaptureSettings** *(dict) --* Frame Capture Settings
                    

                    - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
                    

                    - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.
                
                  

                  - **H264Settings** *(dict) --* H264 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
                    

                    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                    

                    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                    

                    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).
                    

                    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                    

                    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                    

                    - **ColorSpaceSettings** *(dict) --* Color Space settings
                      

                      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                    
                      

                      - **Rec601Settings** *(dict) --* Rec601 Settings
                    
                      

                      - **Rec709Settings** *(dict) --* Rec709 Settings
                    
                  
                    

                    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
                    

                    - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                    

                    - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
                    

                    - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
                    

                    - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
                    

                    - **FramerateDenominator** *(integer) --* Framerate denominator.
                    

                    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                    

                    - **GopBReference** *(string) --* Documentation update needed
                    

                    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                    

                    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.
                    

                    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                    

                    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                    

                    - **Level** *(string) --* H.264 Level.
                    

                    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                    

                    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
                    

                    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                    

                    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
                    

                    - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
                    

                    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                    

                    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                    

                    - **Profile** *(string) --* H.264 Profile.
                    

                    - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.
                    

                    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
                    

                    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                    

                    - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                    

                    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.
                    

                    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                    

                    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
                    

                    - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
                    

                    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
                    

                    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.
                    

                    - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
                    

                    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
                
                  

                  - **H265Settings** *(dict) --* H265 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
                    

                    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                    

                    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
                    

                    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                    

                    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                    

                    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                    

                    - **ColorSpaceSettings** *(dict) --* Color Space settings
                      

                      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                    
                      

                      - **Hdr10Settings** *(dict) --* Hdr10 Settings
                        

                        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                        

                        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                    
                      

                      - **Rec601Settings** *(dict) --* Rec601 Settings
                    
                      

                      - **Rec709Settings** *(dict) --* Rec709 Settings
                    
                  
                    

                    - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                    

                    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
                    

                    - **FramerateDenominator** *(integer) --* Framerate denominator.
                    

                    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                    

                    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                    

                    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                    

                    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                    

                    - **Level** *(string) --* H.265 Level.
                    

                    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                    

                    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level
                    

                    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                    

                    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                    

                    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                    

                    - **Profile** *(string) --* H.265 Profile.
                    

                    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
                    

                    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                    

                    - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                    

                    - **SceneChangeDetect** *(string) --* Scene change detection.
                    

                    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                    

                    - **Tier** *(string) --* H.265 Tier.
                    

                    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
                
                  

                  - **Mpeg2Settings** *(dict) --* Mpeg2 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
                    

                    - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
                    

                    - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
                    

                    - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
                    

                    - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.
                    

                    - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
                    

                    - **FramerateDenominator** *(integer) --* description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                    

                    - **FramerateNumerator** *(integer) --* The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                    

                    - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.
                    

                    - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
                    

                    - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
                    

                    - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
                    

                    - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
                    

                    - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
                    

                    - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
                
              
                

                - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
                

                - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
                

                - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
                

                - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
                

                - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
                

                - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
            
          
        
          

          - **Id** *(string) --* The unique id of the channel.
          

          - **InputAttachments** *(list) --* List of input attachments for channel.
            

            - *(dict) --* Placeholder documentation for InputAttachment
              

              - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
                

                - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
                

                - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                  

                  - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                    

                    - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                      

                      - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                        

                        - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                        

                        - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                    
                      

                      - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                        

                        - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                    
                      

                      - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                        

                        - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                        

                        - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                    
                  
                
              
                

                - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
                

                - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
            
              

              - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
              

              - **InputId** *(string) --* The ID of the input
              

              - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
                

                - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                  

                  - *(dict) --* Audio Selector
                    

                    - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                    

                    - **SelectorSettings** *(dict) --* The audio selector settings.
                      

                      - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                        

                        - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                        

                        - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                    
                      

                      - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                        

                        - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                        

                        - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                    
                      

                      - **AudioPidSelection** *(dict) --* Audio Pid Selection
                        

                        - **Pid** *(integer) --* Selects a specific PID from within a source.
                    
                      

                      - **AudioTrackSelection** *(dict) --* Audio Track Selection
                        

                        - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                          

                          - *(dict) --* Audio Track
                            

                            - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                        
                      
                    
                  
                
              
                

                - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                  

                  - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                    

                    - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                    

                    - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                    

                    - **SelectorSettings** *(dict) --* Caption selector settings.
                      

                      - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                        

                        - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                    
                      

                      - **AribSourceSettings** *(dict) --* Arib Source Settings
                    
                      

                      - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                        

                        - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                        

                        - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                    
                      

                      - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                        

                        - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                        

                        - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                        

                        - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                        

                        - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                    
                      

                      - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                        

                        - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                        

                        - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                    
                      

                      - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                        

                        - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                        

                        - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                    
                      

                      - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                        

                        - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                          

                          - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                          

                          - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                          

                          - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                          

                          - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                      
                        

                        - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                    
                  
                
              
                

                - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
                

                - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
                

                - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
                

                - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
                

                - **NetworkInputSettings** *(dict) --* Input settings.
                  

                  - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                    

                    - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                    

                    - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                    

                    - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                    

                    - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                    

                    - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
                
                  

                  - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
              
                

                - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
                

                - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
                

                - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                  

                  - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                  

                  - **ColorSpaceSettings** *(dict) --* Color space settings
                    

                    - **Hdr10Settings** *(dict) --* Hdr10 Settings
                      

                      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                      

                      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                  
                
                  

                  - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                  

                  - **SelectorSettings** *(dict) --* The video selector settings.
                    

                    - **VideoSelectorPid** *(dict) --* Video Selector Pid
                      

                      - **Pid** *(integer) --* Selects a specific PID from within a video source.
                  
                    

                    - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                      

                      - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                  
                
              
            
          
        
          

          - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
            

            - **Codec** *(string) --* Input codec
            

            - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
            

            - **Resolution** *(string) --* Input resolution, categorized coarsely
        
          

          - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
          

          - **Name** *(string) --* The name of the channel. (user-mutable)
          

          - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.
            

            - *(dict) --* Runtime details of a pipeline when a channel is running.
              

              - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment currently being ingested by this pipeline.
              

              - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
              

              - **ActiveMotionGraphicsActionName** *(string) --* The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
              

              - **ActiveMotionGraphicsUri** *(string) --* The current URI being used for HTML5 motion graphics for this pipeline.
              

              - **PipelineId** *(string) --* Pipeline ID
          
        
          

          - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
          

          - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
          

          - **State** *(string) --* Placeholder documentation for ChannelState
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **Vpc** *(dict) --* Settings for VPC output
            

            - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
              

              - *(string) --* Placeholder documentation for __string
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: create_input(**kwargs)

    Create an input

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CreateInput>`_    


    **Request Syntax** 
    ::

      response = client.create_input(
          Destinations=[
              {
                  'StreamName': 'string'
              },
          ],
          InputDevices=[
              {
                  'Id': 'string'
              },
          ],
          InputSecurityGroups=[
              'string',
          ],
          MediaConnectFlows=[
              {
                  'FlowArn': 'string'
              },
          ],
          Name='string',
          RequestId='string',
          RoleArn='string',
          Sources=[
              {
                  'PasswordParam': 'string',
                  'Url': 'string',
                  'Username': 'string'
              },
          ],
          Tags={
              'string': 'string'
          },
          Type='UDP_PUSH'|'RTP_PUSH'|'RTMP_PUSH'|'RTMP_PULL'|'URL_PULL'|'MP4_FILE'|'MEDIACONNECT'|'INPUT_DEVICE'|'AWS_CDI',
          Vpc={
              'SecurityGroupIds': [
                  'string',
              ],
              'SubnetIds': [
                  'string',
              ]
          }
      )
    :type Destinations: list
    :param Destinations: Destination settings for PUSH type inputs.

    
      - *(dict) --* Endpoint settings for a PUSH type input.

      
        - **StreamName** *(string) --* A unique name for the location the RTMP stream is being pushed to. 

        
      
  
    :type InputDevices: list
    :param InputDevices: Settings for the devices.

    
      - *(dict) --* Settings for an input device.

      
        - **Id** *(string) --* The unique ID for the device.

        
      
  
    :type InputSecurityGroups: list
    :param InputSecurityGroups: A list of security groups referenced by IDs to attach to the input.

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type MediaConnectFlows: list
    :param MediaConnectFlows: A list of the MediaConnect Flows that you want to use in this input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues. 

    
      - *(dict) --* The settings for a MediaConnect Flow.

      
        - **FlowArn** *(string) --* The ARN of the MediaConnect Flow that you want to use as a source.

        
      
  
    :type Name: string
    :param Name: Name of the input.

    
    :type RequestId: string
    :param RequestId: Unique identifier of the request to ensure the request is handled exactly once in case of retries. This field is autopopulated if not provided.

    
    :type RoleArn: string
    :param RoleArn: The Amazon Resource Name (ARN) of the role this input assumes during and after creation.

    
    :type Sources: list
    :param Sources: The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty. 

    
      - *(dict) --* Settings for for a PULL type input.

      
        - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.

        
        - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 

        
        - **Username** *(string) --* The username for the input source.

        
      
  
    :type Tags: dict
    :param Tags: A collection of key-value pairs.

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    :type Type: string
    :param Type: Placeholder documentation for InputType

    
    :type Vpc: dict
    :param Vpc: Settings for a private VPC Input. When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses. This property requires setting the roleArn property on Input creation. Not compatible with the inputSecurityGroups property. 

    
      - **SecurityGroupIds** *(list) --* A list of up to 5 EC2 VPC security group IDs to attach to the Input VPC network interfaces. Requires subnetIds. If none are specified then the VPC default security group will be used. 

      
        - *(string) --* Placeholder documentation for __string

        
    
      - **SubnetIds** *(list) --* **[REQUIRED]** A list of 2 VPC subnet IDs from the same VPC. Subnet IDs must be mapped to two unique availability zones (AZ). 

      
        - *(string) --* Placeholder documentation for __string

        
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Input': {
                'Arn': 'string',
                'AttachedChannels': [
                    'string',
                ],
                'Destinations': [
                    {
                        'Ip': 'string',
                        'Port': 'string',
                        'Url': 'string',
                        'Vpc': {
                            'AvailabilityZone': 'string',
                            'NetworkInterfaceId': 'string'
                        }
                    },
                ],
                'Id': 'string',
                'InputClass': 'STANDARD'|'SINGLE_PIPELINE',
                'InputDevices': [
                    {
                        'Id': 'string'
                    },
                ],
                'InputPartnerIds': [
                    'string',
                ],
                'InputSourceType': 'STATIC'|'DYNAMIC',
                'MediaConnectFlows': [
                    {
                        'FlowArn': 'string'
                    },
                ],
                'Name': 'string',
                'RoleArn': 'string',
                'SecurityGroups': [
                    'string',
                ],
                'Sources': [
                    {
                        'PasswordParam': 'string',
                        'Url': 'string',
                        'Username': 'string'
                    },
                ],
                'State': 'CREATING'|'DETACHED'|'ATTACHED'|'DELETING'|'DELETED',
                'Tags': {
                    'string': 'string'
                },
                'Type': 'UDP_PUSH'|'RTP_PUSH'|'RTMP_PUSH'|'RTMP_PULL'|'URL_PULL'|'MP4_FILE'|'MEDIACONNECT'|'INPUT_DEVICE'|'AWS_CDI'
            }
        }
      **Response Structure** 

      

      - *(dict) --* Successfully created the input.
        

        - **Input** *(dict) --* Placeholder documentation for Input
          

          - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).
          

          - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).
            

            - *(dict) --* The settings for a PUSH type input.
              

              - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input. 
              

              - **Port** *(string) --* The port number for the input.
              

              - **Url** *(string) --* This represents the endpoint that the customer stream will be pushed to. 
              

              - **Vpc** *(dict) --* The properties for a VPC type input destination.
                

                - **AvailabilityZone** *(string) --* The availability zone of the Input destination. 
                

                - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination in the VPC. 
            
          
        
          

          - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).
          

          - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input. 
          

          - **InputDevices** *(list) --* Settings for the input devices.
            

            - *(dict) --* Settings for an input device.
              

              - **Id** *(string) --* The unique ID for the device.
          
        
          

          - **InputPartnerIds** *(list) --* A list of IDs for all Inputs which are partners of this one.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE inputs. 
          

          - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.
            

            - *(dict) --* The settings for a MediaConnect Flow.
              

              - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.
          
        
          

          - **Name** *(string) --* The user-assigned name (This is a mutable value).
          

          - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
          

          - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to the input.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Sources** *(list) --* A list of the sources of the input (PULL-type).
            

            - *(dict) --* The settings for a PULL type input.
              

              - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.
              

              - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 
              

              - **Username** *(string) --* The username for the input source.
          
        
          

          - **State** *(string) --* Placeholder documentation for InputState
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **Type** *(string) --* Placeholder documentation for InputType
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: create_input_security_group(**kwargs)

    Creates a Input Security Group

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CreateInputSecurityGroup>`_    


    **Request Syntax** 
    ::

      response = client.create_input_security_group(
          Tags={
              'string': 'string'
          },
          WhitelistRules=[
              {
                  'Cidr': 'string'
              },
          ]
      )
    :type Tags: dict
    :param Tags: A collection of key-value pairs.

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    :type WhitelistRules: list
    :param WhitelistRules: List of IPv4 CIDR addresses to whitelist

    
      - *(dict) --* An IPv4 CIDR to whitelist.

      
        - **Cidr** *(string) --* The IPv4 CIDR to whitelist.

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecurityGroup': {
                'Arn': 'string',
                'Id': 'string',
                'Inputs': [
                    'string',
                ],
                'State': 'IDLE'|'IN_USE'|'UPDATING'|'DELETED',
                'Tags': {
                    'string': 'string'
                },
                'WhitelistRules': [
                    {
                        'Cidr': 'string'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* Successfully created the Input Security Group.
        

        - **SecurityGroup** *(dict) --* An Input Security Group
          

          - **Arn** *(string) --* Unique ARN of Input Security Group
          

          - **Id** *(string) --* The Id of the Input Security Group
          

          - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **State** *(string) --* The current state of the Input Security Group.
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **WhitelistRules** *(list) --* Whitelist rules and their sync status
            

            - *(dict) --* Whitelist rule
              

              - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: create_multiplex(**kwargs)

    Create a new multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CreateMultiplex>`_    


    **Request Syntax** 
    ::

      response = client.create_multiplex(
          AvailabilityZones=[
              'string',
          ],
          MultiplexSettings={
              'MaximumVideoBufferDelayMilliseconds': 123,
              'TransportStreamBitrate': 123,
              'TransportStreamId': 123,
              'TransportStreamReservedBitrate': 123
          },
          Name='string',
          RequestId='string',
          Tags={
              'string': 'string'
          }
      )
    :type AvailabilityZones: list
    :param AvailabilityZones: **[REQUIRED]** A list of availability zones for the multiplex. You must specify exactly two.

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type MultiplexSettings: dict
    :param MultiplexSettings: **[REQUIRED]** Configuration for a multiplex event.

    
      - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.

      
      - **TransportStreamBitrate** *(integer) --* **[REQUIRED]** Transport stream bit rate.

      
      - **TransportStreamId** *(integer) --* **[REQUIRED]** Transport stream ID.

      
      - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.

      
    
    :type Name: string
    :param Name: **[REQUIRED]** Name of multiplex.

    
    :type RequestId: string
    :param RequestId: **[REQUIRED]** Unique request ID. This prevents retries from creating multiple resources. This field is autopopulated if not provided.

    
    :type Tags: dict
    :param Tags: A collection of key-value pairs.

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Multiplex': {
                'Arn': 'string',
                'AvailabilityZones': [
                    'string',
                ],
                'Destinations': [
                    {
                        'MediaConnectSettings': {
                            'EntitlementArn': 'string'
                        }
                    },
                ],
                'Id': 'string',
                'MultiplexSettings': {
                    'MaximumVideoBufferDelayMilliseconds': 123,
                    'TransportStreamBitrate': 123,
                    'TransportStreamId': 123,
                    'TransportStreamReservedBitrate': 123
                },
                'Name': 'string',
                'PipelinesRunningCount': 123,
                'ProgramCount': 123,
                'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* Creation of the multiplex is in progress.
        

        - **Multiplex** *(dict) --* The newly created multiplex.
          

          - **Arn** *(string) --* The unique arn of the multiplex.
          

          - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Destinations** *(list) --* A list of the multiplex output destinations.
            

            - *(dict) --* Multiplex output destination settings
              

              - **MediaConnectSettings** *(dict) --* Multiplex MediaConnect output destination settings.
                

                - **EntitlementArn** *(string) --* The MediaConnect entitlement ARN available as a Flow source.
            
          
        
          

          - **Id** *(string) --* The unique id of the multiplex.
          

          - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
            

            - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.
            

            - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
            

            - **TransportStreamId** *(integer) --* Transport stream ID.
            

            - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.
        
          

          - **Name** *(string) --* The name of the multiplex.
          

          - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
          

          - **ProgramCount** *(integer) --* The number of programs in the multiplex.
          

          - **State** *(string) --* The current state of the multiplex.
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: create_multiplex_program(**kwargs)

    Create a new program in the multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CreateMultiplexProgram>`_    


    **Request Syntax** 
    ::

      response = client.create_multiplex_program(
          MultiplexId='string',
          MultiplexProgramSettings={
              'PreferredChannelPipeline': 'CURRENTLY_ACTIVE'|'PIPELINE_0'|'PIPELINE_1',
              'ProgramNumber': 123,
              'ServiceDescriptor': {
                  'ProviderName': 'string',
                  'ServiceName': 'string'
              },
              'VideoSettings': {
                  'ConstantBitrate': 123,
                  'StatmuxSettings': {
                      'MaximumBitrate': 123,
                      'MinimumBitrate': 123,
                      'Priority': 123
                  }
              }
          },
          ProgramName='string',
          RequestId='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** ID of the multiplex where the program is to be created.

    
    :type MultiplexProgramSettings: dict
    :param MultiplexProgramSettings: **[REQUIRED]** The settings for this multiplex program.

    
      - **PreferredChannelPipeline** *(string) --* Indicates which pipeline is preferred by the multiplex for program ingest.

      
      - **ProgramNumber** *(integer) --* **[REQUIRED]** Unique program number.

      
      - **ServiceDescriptor** *(dict) --* Transport stream service descriptor configuration for the Multiplex program.

      
        - **ProviderName** *(string) --* **[REQUIRED]** Name of the provider.

        
        - **ServiceName** *(string) --* **[REQUIRED]** Name of the service.

        
      
      - **VideoSettings** *(dict) --* Program video settings configuration.

      
        - **ConstantBitrate** *(integer) --* The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.

        
        - **StatmuxSettings** *(dict) --* Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.

        
          - **MaximumBitrate** *(integer) --* Maximum statmux bitrate.

          
          - **MinimumBitrate** *(integer) --* Minimum statmux bitrate.

          
          - **Priority** *(integer) --* The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.

          
        
      
    
    :type ProgramName: string
    :param ProgramName: **[REQUIRED]** Name of multiplex program.

    
    :type RequestId: string
    :param RequestId: **[REQUIRED]** Unique request ID. This prevents retries from creating multiple resources. This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MultiplexProgram': {
                'ChannelId': 'string',
                'MultiplexProgramSettings': {
                    'PreferredChannelPipeline': 'CURRENTLY_ACTIVE'|'PIPELINE_0'|'PIPELINE_1',
                    'ProgramNumber': 123,
                    'ServiceDescriptor': {
                        'ProviderName': 'string',
                        'ServiceName': 'string'
                    },
                    'VideoSettings': {
                        'ConstantBitrate': 123,
                        'StatmuxSettings': {
                            'MaximumBitrate': 123,
                            'MinimumBitrate': 123,
                            'Priority': 123
                        }
                    }
                },
                'PacketIdentifiersMap': {
                    'AudioPids': [
                        123,
                    ],
                    'DvbSubPids': [
                        123,
                    ],
                    'DvbTeletextPid': 123,
                    'EtvPlatformPid': 123,
                    'EtvSignalPid': 123,
                    'KlvDataPids': [
                        123,
                    ],
                    'PcrPid': 123,
                    'PmtPid': 123,
                    'PrivateMetadataPid': 123,
                    'Scte27Pids': [
                        123,
                    ],
                    'Scte35Pid': 123,
                    'TimedMetadataPid': 123,
                    'VideoPid': 123
                },
                'PipelineDetails': [
                    {
                        'ActiveChannelPipeline': 'string',
                        'PipelineId': 'string'
                    },
                ],
                'ProgramName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* Creation of the program is in progress.
        

        - **MultiplexProgram** *(dict) --* The newly created multiplex program.
          

          - **ChannelId** *(string) --* The MediaLive channel associated with the program.
          

          - **MultiplexProgramSettings** *(dict) --* The settings for this multiplex program.
            

            - **PreferredChannelPipeline** *(string) --* Indicates which pipeline is preferred by the multiplex for program ingest.
            

            - **ProgramNumber** *(integer) --* Unique program number.
            

            - **ServiceDescriptor** *(dict) --* Transport stream service descriptor configuration for the Multiplex program.
              

              - **ProviderName** *(string) --* Name of the provider.
              

              - **ServiceName** *(string) --* Name of the service.
          
            

            - **VideoSettings** *(dict) --* Program video settings configuration.
              

              - **ConstantBitrate** *(integer) --* The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.
              

              - **StatmuxSettings** *(dict) --* Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.
                

                - **MaximumBitrate** *(integer) --* Maximum statmux bitrate.
                

                - **MinimumBitrate** *(integer) --* Minimum statmux bitrate.
                

                - **Priority** *(integer) --* The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
            
          
        
          

          - **PacketIdentifiersMap** *(dict) --* The packet identifier map for this multiplex program.
            

            - **AudioPids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **DvbSubPids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **DvbTeletextPid** *(integer) --* Placeholder documentation for __integer
            

            - **EtvPlatformPid** *(integer) --* Placeholder documentation for __integer
            

            - **EtvSignalPid** *(integer) --* Placeholder documentation for __integer
            

            - **KlvDataPids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **PcrPid** *(integer) --* Placeholder documentation for __integer
            

            - **PmtPid** *(integer) --* Placeholder documentation for __integer
            

            - **PrivateMetadataPid** *(integer) --* Placeholder documentation for __integer
            

            - **Scte27Pids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **Scte35Pid** *(integer) --* Placeholder documentation for __integer
            

            - **TimedMetadataPid** *(integer) --* Placeholder documentation for __integer
            

            - **VideoPid** *(integer) --* Placeholder documentation for __integer
        
          

          - **PipelineDetails** *(list) --* Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
            

            - *(dict) --* The current source for one of the pipelines in the multiplex.
              

              - **ActiveChannelPipeline** *(string) --* Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
              

              - **PipelineId** *(string) --* Identifies a specific pipeline in the multiplex.
          
        
          

          - **ProgramName** *(string) --* The name of the multiplex program.
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: create_partner_input(**kwargs)

    Create a partner input

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CreatePartnerInput>`_    


    **Request Syntax** 
    ::

      response = client.create_partner_input(
          InputId='string',
          RequestId='string',
          Tags={
              'string': 'string'
          }
      )
    :type InputId: string
    :param InputId: **[REQUIRED]** Unique ID of the input.

    
    :type RequestId: string
    :param RequestId: Unique identifier of the request to ensure the request is handled exactly once in case of retries. This field is autopopulated if not provided.

    
    :type Tags: dict
    :param Tags: A collection of key-value pairs.

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Input': {
                'Arn': 'string',
                'AttachedChannels': [
                    'string',
                ],
                'Destinations': [
                    {
                        'Ip': 'string',
                        'Port': 'string',
                        'Url': 'string',
                        'Vpc': {
                            'AvailabilityZone': 'string',
                            'NetworkInterfaceId': 'string'
                        }
                    },
                ],
                'Id': 'string',
                'InputClass': 'STANDARD'|'SINGLE_PIPELINE',
                'InputDevices': [
                    {
                        'Id': 'string'
                    },
                ],
                'InputPartnerIds': [
                    'string',
                ],
                'InputSourceType': 'STATIC'|'DYNAMIC',
                'MediaConnectFlows': [
                    {
                        'FlowArn': 'string'
                    },
                ],
                'Name': 'string',
                'RoleArn': 'string',
                'SecurityGroups': [
                    'string',
                ],
                'Sources': [
                    {
                        'PasswordParam': 'string',
                        'Url': 'string',
                        'Username': 'string'
                    },
                ],
                'State': 'CREATING'|'DETACHED'|'ATTACHED'|'DELETING'|'DELETED',
                'Tags': {
                    'string': 'string'
                },
                'Type': 'UDP_PUSH'|'RTP_PUSH'|'RTMP_PUSH'|'RTMP_PULL'|'URL_PULL'|'MP4_FILE'|'MEDIACONNECT'|'INPUT_DEVICE'|'AWS_CDI'
            }
        }
      **Response Structure** 

      

      - *(dict) --* Successfully created the input.
        

        - **Input** *(dict) --* Placeholder documentation for Input
          

          - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).
          

          - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).
            

            - *(dict) --* The settings for a PUSH type input.
              

              - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input. 
              

              - **Port** *(string) --* The port number for the input.
              

              - **Url** *(string) --* This represents the endpoint that the customer stream will be pushed to. 
              

              - **Vpc** *(dict) --* The properties for a VPC type input destination.
                

                - **AvailabilityZone** *(string) --* The availability zone of the Input destination. 
                

                - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination in the VPC. 
            
          
        
          

          - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).
          

          - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input. 
          

          - **InputDevices** *(list) --* Settings for the input devices.
            

            - *(dict) --* Settings for an input device.
              

              - **Id** *(string) --* The unique ID for the device.
          
        
          

          - **InputPartnerIds** *(list) --* A list of IDs for all Inputs which are partners of this one.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE inputs. 
          

          - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.
            

            - *(dict) --* The settings for a MediaConnect Flow.
              

              - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.
          
        
          

          - **Name** *(string) --* The user-assigned name (This is a mutable value).
          

          - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
          

          - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to the input.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Sources** *(list) --* A list of the sources of the input (PULL-type).
            

            - *(dict) --* The settings for a PULL type input.
              

              - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.
              

              - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 
              

              - **Username** *(string) --* The username for the input source.
          
        
          

          - **State** *(string) --* Placeholder documentation for InputState
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **Type** *(string) --* Placeholder documentation for InputType
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: create_tags(**kwargs)

    Create tags for a resource

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/CreateTags>`_    


    **Request Syntax** 
    ::

      response = client.create_tags(
          ResourceArn='string',
          Tags={
              'string': 'string'
          }
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** Placeholder documentation for __string

    
    :type Tags: dict
    :param Tags: Placeholder documentation for Tags

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    

  .. py:method:: delete_channel(**kwargs)

    Starts deletion of channel. The associated outputs are also deleted.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteChannel>`_    


    **Request Syntax** 
    ::

      response = client.delete_channel(
          ChannelId='string'
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** Unique ID of the channel.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CdiInputSpecification': {
                'Resolution': 'SD'|'HD'|'FHD'|'UHD'
            },
            'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
            'Destinations': [
                {
                    'Id': 'string',
                    'MediaPackageSettings': [
                        {
                            'ChannelId': 'string'
                        },
                    ],
                    'MultiplexSettings': {
                        'MultiplexId': 'string',
                        'ProgramName': 'string'
                    },
                    'Settings': [
                        {
                            'PasswordParam': 'string',
                            'StreamName': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                    ]
                },
            ],
            'EgressEndpoints': [
                {
                    'SourceIp': 'string'
                },
            ],
            'EncoderSettings': {
                'AudioDescriptions': [
                    {
                        'AudioNormalizationSettings': {
                            'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                            'AlgorithmControl': 'CORRECT_AUDIO',
                            'TargetLkfs': 123.0
                        },
                        'AudioSelectorName': 'string',
                        'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                        'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'CodecSettings': {
                            'AacSettings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                                'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                                'Profile': 'HEV1'|'HEV2'|'LC',
                                'RateControlMode': 'CBR'|'VBR',
                                'RawFormat': 'LATM_LOAS'|'NONE',
                                'SampleRate': 123.0,
                                'Spec': 'MPEG2'|'MPEG4',
                                'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                            },
                            'Ac3Settings': {
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                                'Dialnorm': 123,
                                'DrcProfile': 'FILM_STANDARD'|'NONE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                            },
                            'Eac3Settings': {
                                'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                                'DcFilter': 'DISABLED'|'ENABLED',
                                'Dialnorm': 123,
                                'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'LfeControl': 'LFE'|'NO_LFE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'LoRoCenterMixLevel': 123.0,
                                'LoRoSurroundMixLevel': 123.0,
                                'LtRtCenterMixLevel': 123.0,
                                'LtRtSurroundMixLevel': 123.0,
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                                'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                                'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                                'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                                'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                                'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                            },
                            'Mp2Settings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                                'SampleRate': 123.0
                            },
                            'PassThroughSettings': {},
                            'WavSettings': {
                                'BitDepth': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                                'SampleRate': 123.0
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'Name': 'string',
                        'RemixSettings': {
                            'ChannelMappings': [
                                {
                                    'InputChannelLevels': [
                                        {
                                            'Gain': 123,
                                            'InputChannel': 123
                                        },
                                    ],
                                    'OutputChannel': 123
                                },
                            ],
                            'ChannelsIn': 123,
                            'ChannelsOut': 123
                        },
                        'StreamName': 'string'
                    },
                ],
                'AvailBlanking': {
                    'AvailBlankingImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'State': 'DISABLED'|'ENABLED'
                },
                'AvailConfiguration': {
                    'AvailSettings': {
                        'Scte35SpliceInsert': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        },
                        'Scte35TimeSignalApos': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        }
                    }
                },
                'BlackoutSlate': {
                    'BlackoutSlateImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                    'NetworkEndBlackoutImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkId': 'string',
                    'State': 'DISABLED'|'ENABLED'
                },
                'CaptionDescriptions': [
                    {
                        'CaptionSelectorName': 'string',
                        'DestinationSettings': {
                            'AribDestinationSettings': {},
                            'BurnInDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'DvbSubDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'EbuTtDDestinationSettings': {
                                'CopyrightHolder': 'string',
                                'FillLineGap': 'DISABLED'|'ENABLED',
                                'FontFamily': 'string',
                                'StyleControl': 'EXCLUDE'|'INCLUDE'
                            },
                            'EmbeddedDestinationSettings': {},
                            'EmbeddedPlusScte20DestinationSettings': {},
                            'RtmpCaptionInfoDestinationSettings': {},
                            'Scte20PlusEmbeddedDestinationSettings': {},
                            'Scte27DestinationSettings': {},
                            'SmpteTtDestinationSettings': {},
                            'TeletextDestinationSettings': {},
                            'TtmlDestinationSettings': {
                                'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                            },
                            'WebvttDestinationSettings': {
                                'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageDescription': 'string',
                        'Name': 'string'
                    },
                ],
                'FeatureActivations': {
                    'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
                },
                'GlobalConfiguration': {
                    'InitialAudioGain': 123,
                    'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                    'InputLossBehavior': {
                        'BlackFrameMsec': 123,
                        'InputLossImageColor': 'string',
                        'InputLossImageSlate': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'InputLossImageType': 'COLOR'|'SLATE',
                        'RepeatFrameMsec': 123
                    },
                    'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                    'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                    'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
                },
                'MotionGraphicsConfiguration': {
                    'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                    'MotionGraphicsSettings': {
                        'HtmlMotionGraphicsSettings': {}
                    }
                },
                'NielsenConfiguration': {
                    'DistributorId': 'string',
                    'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
                },
                'OutputGroups': [
                    {
                        'Name': 'string',
                        'OutputGroupSettings': {
                            'ArchiveGroupSettings': {
                                'ArchiveCdnSettings': {
                                    'ArchiveS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                },
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'RolloverInterval': 123
                            },
                            'FrameCaptureGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'FrameCaptureCdnSettings': {
                                    'FrameCaptureS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                }
                            },
                            'HlsGroupSettings': {
                                'AdMarkers': [
                                    'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                                ],
                                'BaseUrlContent': 'string',
                                'BaseUrlContent1': 'string',
                                'BaseUrlManifest': 'string',
                                'BaseUrlManifest1': 'string',
                                'CaptionLanguageMappings': [
                                    {
                                        'CaptionChannel': 123,
                                        'LanguageCode': 'string',
                                        'LanguageDescription': 'string'
                                    },
                                ],
                                'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                                'ClientCache': 'DISABLED'|'ENABLED',
                                'CodecSpecification': 'RFC_4281'|'RFC_6381',
                                'ConstantIv': 'string',
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                                'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                                'EncryptionType': 'AES128'|'SAMPLE_AES',
                                'HlsCdnSettings': {
                                    'HlsAkamaiSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123,
                                        'Salt': 'string',
                                        'Token': 'string'
                                    },
                                    'HlsBasicPutSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsMediaStoreSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'MediaStoreStorageClass': 'TEMPORAL',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    },
                                    'HlsWebdavSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    }
                                },
                                'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                                'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                                'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                                'IndexNSegments': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'IvInManifest': 'EXCLUDE'|'INCLUDE',
                                'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                                'KeepSegments': 123,
                                'KeyFormat': 'string',
                                'KeyFormatVersions': 'string',
                                'KeyProviderSettings': {
                                    'StaticKeySettings': {
                                        'KeyProviderServer': {
                                            'PasswordParam': 'string',
                                            'Uri': 'string',
                                            'Username': 'string'
                                        },
                                        'StaticKeyValue': 'string'
                                    }
                                },
                                'ManifestCompression': 'GZIP'|'NONE',
                                'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                                'MinSegmentLength': 123,
                                'Mode': 'LIVE'|'VOD',
                                'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                                'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                                'ProgramDateTimePeriod': 123,
                                'RedundantManifest': 'DISABLED'|'ENABLED',
                                'SegmentLength': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SegmentsPerSubdirectory': 123,
                                'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123,
                                'TimestampDeltaMilliseconds': 123,
                                'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                            },
                            'MediaPackageGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                }
                            },
                            'MsSmoothGroupSettings': {
                                'AcquisitionPointId': 'string',
                                'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                                'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                'ConnectionRetryInterval': 123,
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'EventId': 'string',
                                'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                                'EventStopBehavior': 'NONE'|'SEND_EOS',
                                'FilecacheDuration': 123,
                                'FragmentLength': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'NumRetries': 123,
                                'RestartDelay': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SendDelayMs': 123,
                                'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                                'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                                'TimestampOffset': 'string',
                                'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                            },
                            'MultiplexGroupSettings': {},
                            'RtmpGroupSettings': {
                                'AdMarkers': [
                                    'ON_CUE_POINT_SCTE35',
                                ],
                                'AuthenticationScheme': 'AKAMAI'|'COMMON',
                                'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                                'CacheLength': 123,
                                'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'RestartDelay': 123
                            },
                            'UdpGroupSettings': {
                                'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123
                            }
                        },
                        'Outputs': [
                            {
                                'AudioDescriptionNames': [
                                    'string',
                                ],
                                'CaptionDescriptionNames': [
                                    'string',
                                ],
                                'OutputName': 'string',
                                'OutputSettings': {
                                    'ArchiveOutputSettings': {
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            },
                                            'RawSettings': {}
                                        },
                                        'Extension': 'string',
                                        'NameModifier': 'string'
                                    },
                                    'FrameCaptureOutputSettings': {
                                        'NameModifier': 'string'
                                    },
                                    'HlsOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'HlsSettings': {
                                            'AudioOnlyHlsSettings': {
                                                'AudioGroupId': 'string',
                                                'AudioOnlyImage': {
                                                    'PasswordParam': 'string',
                                                    'Uri': 'string',
                                                    'Username': 'string'
                                                },
                                                'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                                'SegmentType': 'AAC'|'FMP4'
                                            },
                                            'Fmp4HlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                            },
                                            'FrameCaptureHlsSettings': {},
                                            'StandardHlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'M3u8Settings': {
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'EcmPid': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                }
                                            }
                                        },
                                        'NameModifier': 'string',
                                        'SegmentModifier': 'string'
                                    },
                                    'MediaPackageOutputSettings': {},
                                    'MsSmoothOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'NameModifier': 'string'
                                    },
                                    'MultiplexOutputSettings': {
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        }
                                    },
                                    'RtmpOutputSettings': {
                                        'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                        'ConnectionRetryInterval': 123,
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'NumRetries': 123
                                    },
                                    'UdpOutputSettings': {
                                        'BufferMsec': 123,
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            }
                                        },
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'FecOutputSettings': {
                                            'ColumnDepth': 123,
                                            'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                            'RowLength': 123
                                        }
                                    }
                                },
                                'VideoDescriptionName': 'string'
                            },
                        ]
                    },
                ],
                'TimecodeConfig': {
                    'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                    'SyncThreshold': 123
                },
                'VideoDescriptions': [
                    {
                        'CodecSettings': {
                            'FrameCaptureSettings': {
                                'CaptureInterval': 123,
                                'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                            },
                            'H264Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'Bitrate': 123,
                                'BufFillPct': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'EntropyEncoding': 'CABAC'|'CAVLC',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'ForceFieldPictures': 'DISABLED'|'ENABLED',
                                'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopBReference': 'DISABLED'|'ENABLED',
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'NumRefFrames': 123,
                                'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                                'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Softness': 123,
                                'SpatialAq': 'DISABLED'|'ENABLED',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'Syntax': 'DEFAULT'|'RP2027',
                                'TemporalAq': 'DISABLED'|'ENABLED',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'H265Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'AlternativeTransferFunction': 'INSERT'|'OMIT',
                                'Bitrate': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Hdr10Settings': {
                                        'MaxCll': 123,
                                        'MaxFall': 123
                                    },
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'MAIN'|'MAIN_10BIT',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Tier': 'HIGH'|'MAIN',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'Mpeg2Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpace': 'AUTO'|'PASSTHROUGH',
                                'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                            }
                        },
                        'Height': 123,
                        'Name': 'string',
                        'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                        'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                        'Sharpness': 123,
                        'Width': 123
                    },
                ]
            },
            'Id': 'string',
            'InputAttachments': [
                {
                    'AutomaticInputFailoverSettings': {
                        'ErrorClearTimeMsec': 123,
                        'FailoverConditions': [
                            {
                                'FailoverConditionSettings': {
                                    'AudioSilenceSettings': {
                                        'AudioSelectorName': 'string',
                                        'AudioSilenceThresholdMsec': 123
                                    },
                                    'InputLossSettings': {
                                        'InputLossThresholdMsec': 123
                                    },
                                    'VideoBlackSettings': {
                                        'BlackDetectThreshold': 123.0,
                                        'VideoBlackThresholdMsec': 123
                                    }
                                }
                            },
                        ],
                        'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                        'SecondaryInputId': 'string'
                    },
                    'InputAttachmentName': 'string',
                    'InputId': 'string',
                    'InputSettings': {
                        'AudioSelectors': [
                            {
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AudioHlsRenditionSelection': {
                                        'GroupId': 'string',
                                        'Name': 'string'
                                    },
                                    'AudioLanguageSelection': {
                                        'LanguageCode': 'string',
                                        'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                    },
                                    'AudioPidSelection': {
                                        'Pid': 123
                                    },
                                    'AudioTrackSelection': {
                                        'Tracks': [
                                            {
                                                'Track': 123
                                            },
                                        ]
                                    }
                                }
                            },
                        ],
                        'CaptionSelectors': [
                            {
                                'LanguageCode': 'string',
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AncillarySourceSettings': {
                                        'SourceAncillaryChannelNumber': 123
                                    },
                                    'AribSourceSettings': {},
                                    'DvbSubSourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'EmbeddedSourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Scte20Detection': 'AUTO'|'OFF',
                                        'Source608ChannelNumber': 123,
                                        'Source608TrackNumber': 123
                                    },
                                    'Scte20SourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Source608ChannelNumber': 123
                                    },
                                    'Scte27SourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'TeletextSourceSettings': {
                                        'OutputRectangle': {
                                            'Height': 123.0,
                                            'LeftOffset': 123.0,
                                            'TopOffset': 123.0,
                                            'Width': 123.0
                                        },
                                        'PageNumber': 'string'
                                    }
                                }
                            },
                        ],
                        'DeblockFilter': 'DISABLED'|'ENABLED',
                        'DenoiseFilter': 'DISABLED'|'ENABLED',
                        'FilterStrength': 123,
                        'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                        'NetworkInputSettings': {
                            'HlsInputSettings': {
                                'Bandwidth': 123,
                                'BufferSegments': 123,
                                'Retries': 123,
                                'RetryInterval': 123,
                                'Scte35Source': 'MANIFEST'|'SEGMENTS'
                            },
                            'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                        },
                        'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                        'SourceEndBehavior': 'CONTINUE'|'LOOP',
                        'VideoSelector': {
                            'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                            'ColorSpaceSettings': {
                                'Hdr10Settings': {
                                    'MaxCll': 123,
                                    'MaxFall': 123
                                }
                            },
                            'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                            'SelectorSettings': {
                                'VideoSelectorPid': {
                                    'Pid': 123
                                },
                                'VideoSelectorProgramId': {
                                    'ProgramId': 123
                                }
                            }
                        }
                    }
                },
            ],
            'InputSpecification': {
                'Codec': 'MPEG2'|'AVC'|'HEVC',
                'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                'Resolution': 'SD'|'HD'|'UHD'
            },
            'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
            'Name': 'string',
            'PipelineDetails': [
                {
                    'ActiveInputAttachmentName': 'string',
                    'ActiveInputSwitchActionName': 'string',
                    'ActiveMotionGraphicsActionName': 'string',
                    'ActiveMotionGraphicsUri': 'string',
                    'PipelineId': 'string'
                },
            ],
            'PipelinesRunningCount': 123,
            'RoleArn': 'string',
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
            'Tags': {
                'string': 'string'
            },
            'Vpc': {
                'AvailabilityZones': [
                    'string',
                ],
                'NetworkInterfaceIds': [
                    'string',
                ],
                'SecurityGroupIds': [
                    'string',
                ],
                'SubnetIds': [
                    'string',
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* Deletion was successfully initiated.
        

        - **Arn** *(string) --* The unique arn of the channel.
        

        - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
          

          - **Resolution** *(string) --* Maximum CDI input resolution
      
        

        - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        

        - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
          

          - *(dict) --* Placeholder documentation for OutputDestination
            

            - **Id** *(string) --* User-specified id. This is used in an output group or an output.
            

            - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
              

              - *(dict) --* MediaPackage Output Destination Settings
                

                - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
            
          
            

            - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
              

              - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
              

              - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
          
            

            - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
              

              - *(dict) --* Placeholder documentation for OutputDestinationSettings
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                

                - **Url** *(string) --* A URL specifying a destination
                

                - **Username** *(string) --* username for destination
            
          
        
      
        

        - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
          

          - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
            

            - **SourceIp** *(string) --* Public IP of where a channel's output comes from
        
      
        

        - **EncoderSettings** *(dict) --* Encoder Settings
          

          - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription
            

            - *(dict) --* Audio Description
              

              - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.
                

                - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
                

                - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
                

                - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
            
              

              - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source for this AudioDescription.
              

              - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
              

              - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
              

              - **CodecSettings** *(dict) --* Audio codec settings.
                

                - **AacSettings** *(dict) --* Aac Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.
                  

                  - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
                  

                  - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
                  

                  - **Profile** *(string) --* AAC Profile.
                  

                  - **RateControlMode** *(string) --* Rate Control Mode.
                  

                  - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.
                  

                  - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
                  

                  - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.
              
                

                - **Ac3Settings** *(dict) --* Ac3 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
                  

                  - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
                  

                  - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
              
                

                - **Eac3Settings** *(dict) --* Eac3 Settings
                  

                  - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.
                  

                  - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
                  

                  - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.
                  

                  - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
                  

                  - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
                  

                  - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.
                  

                  - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.
                  

                  - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                  

                  - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
                  

                  - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
                  

                  - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.
                  

                  - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
                  

                  - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
              
                

                - **Mp2Settings** *(dict) --* Mp2 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second.
                  

                  - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
                

                - **PassThroughSettings** *(dict) --* Pass Through Settings
              
                

                - **WavSettings** *(dict) --* Wav Settings
                  

                  - **BitDepth** *(float) --* Bits per sample.
                  

                  - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
            
              

              - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
              

              - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
              

              - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
              

              - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.
                

                - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with appropriate gain adjustments.
                  

                  - *(dict) --* Audio Channel Mapping
                    

                    - **InputChannelLevels** *(list) --* Indices and gain values for each input channel that should be remixed into this output channel.
                      

                      - *(dict) --* Input Channel Level
                        

                        - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
                        

                        - **InputChannel** *(integer) --* The index of the input channel used as a source.
                    
                  
                    

                    - **OutputChannel** *(integer) --* The index of the output channel being produced.
                
              
                

                - **ChannelsIn** *(integer) --* Number of input channels to be used.
                

                - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
            
              

              - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
          
        
          

          - **AvailBlanking** *(dict) --* Settings for ad avail blanking.
            

            - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
        
          

          - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.
            

            - **AvailSettings** *(dict) --* Ad avail settings.
              

              - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
              

              - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
          
        
          

          - **BlackoutSlate** *(dict) --* Settings for blackout slate.
            

            - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
            

            - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
        
          

          - **CaptionDescriptions** *(list) --* Settings for caption decriptions
            

            - *(dict) --* Caption Description
              

              - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
              

              - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.
                

                - **AribDestinationSettings** *(dict) --* Arib Destination Settings
              
                

                - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
              
                

                - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
              
                

                - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings
                  

                  - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
                  

                  - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
                  

                  - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
                  

                  - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
              
                

                - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings
              
                

                - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings
              
                

                - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings
              
                

                - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings
              
                

                - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings
              
                

                - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings
              
                

                - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings
              
                

                - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings
                  

                  - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
              
                

                - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings
                  

                  - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
              
            
              

              - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
              

              - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).
              

              - **Name** *(string) --* Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
          
        
          

          - **FeatureActivations** *(dict) --* Feature Activations
            

            - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
        
          

          - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.
            

            - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.
            

            - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
            

            - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.
              

              - **BlackFrameMsec** *(integer) --* Documentation update needed
              

              - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
              

              - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
              

              - **RepeatFrameMsec** *(integer) --* Documentation update needed
          
            

            - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
            

            - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
            

            - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
        
          

          - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.
            

            - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion
            

            - **MotionGraphicsSettings** *(dict) --* Motion Graphics Settings
              

              - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings
            
          
        
          

          - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.
            

            - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.
            

            - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging
        
          

          - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup
            

            - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
              

              - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
              

              - **OutputGroupSettings** *(dict) --* Settings associated with the output group.
                

                - **ArchiveGroupSettings** *(dict) --* Archive Group Settings
                  

                  - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **ArchiveS3Settings** *(dict) --* Archive S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
                  

                  - **Destination** *(dict) --* A directory and base filename where archive files should be written.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.
              
                

                - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings
                  

                  - **Destination** *(dict) --* The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
              
                

                - **HlsGroupSettings** *(dict) --* Hls Group Settings
                  

                  - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
                    

                    - *(string) --* Hls Ad Markers
                
                  

                  - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
                  

                  - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
                  

                  - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
                    

                    - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
                      

                      - **CaptionChannel** *(integer) --* The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
                      

                      - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
                      

                      - **LanguageDescription** *(string) --* Textual description of language
                  
                
                  

                  - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
                  

                  - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
                  

                  - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
                  

                  - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
                  

                  - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **DirectoryStructure** *(string) --* Place segments in subdirectories.
                  

                  - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
                  

                  - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
                  

                  - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                      

                      - **Salt** *(string) --* Salt for authenticated Akamai.
                      

                      - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.
                  
                    

                    - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsS3Settings** *(dict) --* Hls S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                    

                    - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                
                  

                  - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging
                  

                  - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
                  

                  - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
                  

                  - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
                  

                  - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
                  

                  - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
                  

                  - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
                  

                  - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).
                  

                  - **KeyProviderSettings** *(dict) --* The key provider settings.
                    

                    - **StaticKeySettings** *(dict) --* Static Key Settings
                      

                      - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.
                        

                        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                        

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                        

                        - **Username** *(string) --* Documentation update needed
                    
                      

                      - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal string.
                  
                
                  

                  - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.
                  

                  - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.
                  

                  - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
                  

                  - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
                  

                  - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
                  

                  - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
                  

                  - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
                  

                  - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
                  

                  - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
                  

                  - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                  

                  - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.
                  

                  - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
              
                

                - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings
                  

                  - **Destination** *(dict) --* MediaPackage channel destination.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
              
                

                - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings
                  

                  - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
                  

                  - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
                  

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
                  

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
                  

                  - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
                  

                  - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
                  

                  - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event
                  

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                  

                  - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **NumRetries** *(integer) --* Number of retry attempts.
                  

                  - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.
                  

                  - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
                  

                  - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.
                  

                  - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
                  

                  - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
              
                

                - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings
              
                

                - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings
                  

                  - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
                    

                    - *(string) --* Rtmp Ad Markers
                
                  

                  - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN
                  

                  - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
                  

                  - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.
                  

                  - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
                  

                  - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
                  

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
              
                

                - **UdpGroupSettings** *(dict) --* Udp Group Settings
                  

                  - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
              
            
              

              - **Outputs** *(list) --* Placeholder documentation for __listOfOutput
                

                - *(dict) --* Output settings. There can be multiple outputs within a group.
                  

                  - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **OutputName** *(string) --* The name used to identify an output.
                  

                  - **OutputSettings** *(dict) --* Output type-specific settings.
                    

                    - **ArchiveOutputSettings** *(dict) --* Archive Output Settings
                      

                      - **ContainerSettings** *(dict) --* Settings specific to the container type of the file.
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                        

                        - **RawSettings** *(dict) --* Raw Settings
                      
                    
                      

                      - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings
                      

                      - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.
                  
                    

                    - **HlsOutputSettings** *(dict) --* Hls Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These settings are different for audio-only outputs.
                        

                        - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings
                          

                          - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.
                          

                          - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
                            

                            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                            

                            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                            

                            - **Username** *(string) --* Documentation update needed
                        
                          

                          - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
                          

                          - **SegmentType** *(string) --* Specifies the segment type.
                      
                        

                        - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                      
                        

                        - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings
                      
                        

                        - **StandardHlsSettings** *(dict) --* Standard Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
                            

                            - **EcmPid** *(string) --* This parameter is unused and deprecated.
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                        
                      
                    
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
                      

                      - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.
                  
                    

                    - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings
                  
                    

                    - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings
                      

                      - **Destination** *(dict) --* Destination is a Multiplex.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                  
                    

                    - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings
                      

                      - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
                      

                      - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **NumRetries** *(integer) --* Number of retry attempts.
                  
                    

                    - **UdpOutputSettings** *(dict) --* Udp Output Settings
                      

                      - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
                      

                      - **ContainerSettings** *(dict) --* Udp Container Settings
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                    
                      

                      - **Destination** *(dict) --* Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.
                        

                        - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
                        

                        - **IncludeFec** *(string) --* Enables column only or column and row based FEC
                        

                        - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
                    
                  
                
                  

                  - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.
              
            
          
        
          

          - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode information from inputs.
            

            - **Source** *(string) --* Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
            

            - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
        
          

          - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription
            

            - *(dict) --* Video settings for this stream.
              

              - **CodecSettings** *(dict) --* Video codec settings.
                

                - **FrameCaptureSettings** *(dict) --* Frame Capture Settings
                  

                  - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
                  

                  - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.
              
                

                - **H264Settings** *(dict) --* H264 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
                  

                  - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
                  

                  - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopBReference** *(string) --* Documentation update needed
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.264 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
                  

                  - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.264 Profile.
                  

                  - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
                  

                  - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
                  

                  - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
                  

                  - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.
                  

                  - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **H265Settings** *(dict) --* H265 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Hdr10Settings** *(dict) --* Hdr10 Settings
                      

                      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                      

                      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.265 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.265 Profile.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Tier** *(string) --* H.265 Tier.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **Mpeg2Settings** *(dict) --* Mpeg2 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
                  

                  - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
                  

                  - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
                  

                  - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.
                  

                  - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
                  

                  - **FramerateDenominator** *(integer) --* description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **FramerateNumerator** *(integer) --* The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.
                  

                  - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
                  

                  - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
                  

                  - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
                  

                  - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
                  

                  - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
                  

                  - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
              
            
              

              - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
              

              - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
              

              - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
              

              - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
              

              - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
              

              - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
          
        
      
        

        - **Id** *(string) --* The unique id of the channel.
        

        - **InputAttachments** *(list) --* List of input attachments for channel.
          

          - *(dict) --* Placeholder documentation for InputAttachment
            

            - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
              

              - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
              

              - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                

                - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                  

                  - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                    

                    - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                      

                      - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                      

                      - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                  
                    

                    - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                      

                      - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                  
                    

                    - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                      

                      - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                      

                      - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                  
                
              
            
              

              - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
              

              - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
          
            

            - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
            

            - **InputId** *(string) --* The ID of the input
            

            - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
              

              - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                

                - *(dict) --* Audio Selector
                  

                  - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                  

                  - **SelectorSettings** *(dict) --* The audio selector settings.
                    

                    - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                      

                      - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                      

                      - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                  
                    

                    - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                      

                      - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                      

                      - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                  
                    

                    - **AudioPidSelection** *(dict) --* Audio Pid Selection
                      

                      - **Pid** *(integer) --* Selects a specific PID from within a source.
                  
                    

                    - **AudioTrackSelection** *(dict) --* Audio Track Selection
                      

                      - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                        

                        - *(dict) --* Audio Track
                          

                          - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                      
                    
                  
                
              
            
              

              - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                

                - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                  

                  - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                  

                  - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                  

                  - **SelectorSettings** *(dict) --* Caption selector settings.
                    

                    - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                      

                      - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                  
                    

                    - **AribSourceSettings** *(dict) --* Arib Source Settings
                  
                    

                    - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                  
                    

                    - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                      

                      - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                  
                    

                    - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                  
                    

                    - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                  
                    

                    - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                      

                      - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                        

                        - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                        

                        - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                        

                        - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                        

                        - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                    
                      

                      - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                  
                
              
            
              

              - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
              

              - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
              

              - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
              

              - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
              

              - **NetworkInputSettings** *(dict) --* Input settings.
                

                - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                  

                  - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                  

                  - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                  

                  - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                  

                  - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                  

                  - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
              
                

                - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
            
              

              - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
              

              - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
              

              - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                

                - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                

                - **ColorSpaceSettings** *(dict) --* Color space settings
                  

                  - **Hdr10Settings** *(dict) --* Hdr10 Settings
                    

                    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                    

                    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                
              
                

                - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                

                - **SelectorSettings** *(dict) --* The video selector settings.
                  

                  - **VideoSelectorPid** *(dict) --* Video Selector Pid
                    

                    - **Pid** *(integer) --* Selects a specific PID from within a video source.
                
                  

                  - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                    

                    - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                
              
            
          
        
      
        

        - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
          

          - **Codec** *(string) --* Input codec
          

          - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
          

          - **Resolution** *(string) --* Input resolution, categorized coarsely
      
        

        - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
        

        - **Name** *(string) --* The name of the channel. (user-mutable)
        

        - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.
          

          - *(dict) --* Runtime details of a pipeline when a channel is running.
            

            - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment currently being ingested by this pipeline.
            

            - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
            

            - **ActiveMotionGraphicsActionName** *(string) --* The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
            

            - **ActiveMotionGraphicsUri** *(string) --* The current URI being used for HTML5 motion graphics for this pipeline.
            

            - **PipelineId** *(string) --* Pipeline ID
        
      
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        

        - **State** *(string) --* Placeholder documentation for ChannelState
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **Vpc** *(dict) --* Settings for VPC output
          

          - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
            

            - *(string) --* Placeholder documentation for __string
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: delete_input(**kwargs)

    Deletes the input end point

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteInput>`_    


    **Request Syntax** 
    ::

      response = client.delete_input(
          InputId='string'
      )
    :type InputId: string
    :param InputId: **[REQUIRED]** Unique ID of the input

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* Successful deletion
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: delete_input_security_group(**kwargs)

    Deletes an Input Security Group

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteInputSecurityGroup>`_    


    **Request Syntax** 
    ::

      response = client.delete_input_security_group(
          InputSecurityGroupId='string'
      )
    :type InputSecurityGroupId: string
    :param InputSecurityGroupId: **[REQUIRED]** The Input Security Group to delete

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* An Input Security Group
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: delete_multiplex(**kwargs)

    Delete a multiplex. The multiplex must be idle.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteMultiplex>`_    


    **Request Syntax** 
    ::

      response = client.delete_multiplex(
          MultiplexId='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'AvailabilityZones': [
                'string',
            ],
            'Destinations': [
                {
                    'MediaConnectSettings': {
                        'EntitlementArn': 'string'
                    }
                },
            ],
            'Id': 'string',
            'MultiplexSettings': {
                'MaximumVideoBufferDelayMilliseconds': 123,
                'TransportStreamBitrate': 123,
                'TransportStreamId': 123,
                'TransportStreamReservedBitrate': 123
            },
            'Name': 'string',
            'PipelinesRunningCount': 123,
            'ProgramCount': 123,
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* Deletion of the multiplex is in progress.
        

        - **Arn** *(string) --* The unique arn of the multiplex.
        

        - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **Destinations** *(list) --* A list of the multiplex output destinations.
          

          - *(dict) --* Multiplex output destination settings
            

            - **MediaConnectSettings** *(dict) --* Multiplex MediaConnect output destination settings.
              

              - **EntitlementArn** *(string) --* The MediaConnect entitlement ARN available as a Flow source.
          
        
      
        

        - **Id** *(string) --* The unique id of the multiplex.
        

        - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
          

          - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.
          

          - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
          

          - **TransportStreamId** *(integer) --* Transport stream ID.
          

          - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.
      
        

        - **Name** *(string) --* The name of the multiplex.
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **ProgramCount** *(integer) --* The number of programs in the multiplex.
        

        - **State** *(string) --* The current state of the multiplex.
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: delete_multiplex_program(**kwargs)

    Delete a program from a multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteMultiplexProgram>`_    


    **Request Syntax** 
    ::

      response = client.delete_multiplex_program(
          MultiplexId='string',
          ProgramName='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex that the program belongs to.

    
    :type ProgramName: string
    :param ProgramName: **[REQUIRED]** The multiplex program name.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ChannelId': 'string',
            'MultiplexProgramSettings': {
                'PreferredChannelPipeline': 'CURRENTLY_ACTIVE'|'PIPELINE_0'|'PIPELINE_1',
                'ProgramNumber': 123,
                'ServiceDescriptor': {
                    'ProviderName': 'string',
                    'ServiceName': 'string'
                },
                'VideoSettings': {
                    'ConstantBitrate': 123,
                    'StatmuxSettings': {
                        'MaximumBitrate': 123,
                        'MinimumBitrate': 123,
                        'Priority': 123
                    }
                }
            },
            'PacketIdentifiersMap': {
                'AudioPids': [
                    123,
                ],
                'DvbSubPids': [
                    123,
                ],
                'DvbTeletextPid': 123,
                'EtvPlatformPid': 123,
                'EtvSignalPid': 123,
                'KlvDataPids': [
                    123,
                ],
                'PcrPid': 123,
                'PmtPid': 123,
                'PrivateMetadataPid': 123,
                'Scte27Pids': [
                    123,
                ],
                'Scte35Pid': 123,
                'TimedMetadataPid': 123,
                'VideoPid': 123
            },
            'PipelineDetails': [
                {
                    'ActiveChannelPipeline': 'string',
                    'PipelineId': 'string'
                },
            ],
            'ProgramName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* Deletion of the program is in progress.
        

        - **ChannelId** *(string) --* The MediaLive channel associated with the program.
        

        - **MultiplexProgramSettings** *(dict) --* The settings for this multiplex program.
          

          - **PreferredChannelPipeline** *(string) --* Indicates which pipeline is preferred by the multiplex for program ingest.
          

          - **ProgramNumber** *(integer) --* Unique program number.
          

          - **ServiceDescriptor** *(dict) --* Transport stream service descriptor configuration for the Multiplex program.
            

            - **ProviderName** *(string) --* Name of the provider.
            

            - **ServiceName** *(string) --* Name of the service.
        
          

          - **VideoSettings** *(dict) --* Program video settings configuration.
            

            - **ConstantBitrate** *(integer) --* The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.
            

            - **StatmuxSettings** *(dict) --* Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.
              

              - **MaximumBitrate** *(integer) --* Maximum statmux bitrate.
              

              - **MinimumBitrate** *(integer) --* Minimum statmux bitrate.
              

              - **Priority** *(integer) --* The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
          
        
      
        

        - **PacketIdentifiersMap** *(dict) --* The packet identifier map for this multiplex program.
          

          - **AudioPids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **DvbSubPids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **DvbTeletextPid** *(integer) --* Placeholder documentation for __integer
          

          - **EtvPlatformPid** *(integer) --* Placeholder documentation for __integer
          

          - **EtvSignalPid** *(integer) --* Placeholder documentation for __integer
          

          - **KlvDataPids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **PcrPid** *(integer) --* Placeholder documentation for __integer
          

          - **PmtPid** *(integer) --* Placeholder documentation for __integer
          

          - **PrivateMetadataPid** *(integer) --* Placeholder documentation for __integer
          

          - **Scte27Pids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **Scte35Pid** *(integer) --* Placeholder documentation for __integer
          

          - **TimedMetadataPid** *(integer) --* Placeholder documentation for __integer
          

          - **VideoPid** *(integer) --* Placeholder documentation for __integer
      
        

        - **PipelineDetails** *(list) --* Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
          

          - *(dict) --* The current source for one of the pipelines in the multiplex.
            

            - **ActiveChannelPipeline** *(string) --* Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
            

            - **PipelineId** *(string) --* Identifies a specific pipeline in the multiplex.
        
      
        

        - **ProgramName** *(string) --* The name of the multiplex program.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: delete_reservation(**kwargs)

    Delete an expired reservation.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteReservation>`_    


    **Request Syntax** 
    ::

      response = client.delete_reservation(
          ReservationId='string'
      )
    :type ReservationId: string
    :param ReservationId: **[REQUIRED]** Unique reservation ID, e.g. '1234567'

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Count': 123,
            'CurrencyCode': 'string',
            'Duration': 123,
            'DurationUnits': 'MONTHS',
            'End': 'string',
            'FixedPrice': 123.0,
            'Name': 'string',
            'OfferingDescription': 'string',
            'OfferingId': 'string',
            'OfferingType': 'NO_UPFRONT',
            'Region': 'string',
            'ReservationId': 'string',
            'ResourceSpecification': {
                'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
            },
            'Start': 'string',
            'State': 'ACTIVE'|'EXPIRED'|'CANCELED'|'DELETED',
            'Tags': {
                'string': 'string'
            },
            'UsagePrice': 123.0
        }
      **Response Structure** 

      

      - *(dict) --* Deleted reservation
        

        - **Arn** *(string) --* Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
        

        - **Count** *(integer) --* Number of reserved resources
        

        - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        

        - **Duration** *(integer) --* Lease duration, e.g. '12'
        

        - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
        

        - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
        

        - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        

        - **Name** *(string) --* User specified reservation name
        

        - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        

        - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
        

        - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
        

        - **Region** *(string) --* AWS region, e.g. 'us-west-2'
        

        - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'
        

        - **ResourceSpecification** *(dict) --* Resource configuration details
          

          - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
          

          - **Codec** *(string) --* Codec, e.g. 'AVC'
          

          - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
          

          - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
          

          - **Resolution** *(string) --* Resolution, e.g. 'HD'
          

          - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
          

          - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
          

          - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
      
        

        - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
        

        - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'
        

        - **Tags** *(dict) --* A collection of key-value pairs
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: delete_schedule(**kwargs)

    Delete all schedule actions on a channel.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteSchedule>`_    


    **Request Syntax** 
    ::

      response = client.delete_schedule(
          ChannelId='string'
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** Id of the channel whose schedule is being deleted.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* Successful delete of the schedule.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: delete_tags(**kwargs)

    Removes tags for a resource

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DeleteTags>`_    


    **Request Syntax** 
    ::

      response = client.delete_tags(
          ResourceArn='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** Placeholder documentation for __string

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** An array of tag keys to delete

    
      - *(string) --* Placeholder documentation for __string

      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    

  .. py:method:: describe_channel(**kwargs)

    Gets details about a channel

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeChannel>`_    


    **Request Syntax** 
    ::

      response = client.describe_channel(
          ChannelId='string'
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** channel ID

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CdiInputSpecification': {
                'Resolution': 'SD'|'HD'|'FHD'|'UHD'
            },
            'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
            'Destinations': [
                {
                    'Id': 'string',
                    'MediaPackageSettings': [
                        {
                            'ChannelId': 'string'
                        },
                    ],
                    'MultiplexSettings': {
                        'MultiplexId': 'string',
                        'ProgramName': 'string'
                    },
                    'Settings': [
                        {
                            'PasswordParam': 'string',
                            'StreamName': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                    ]
                },
            ],
            'EgressEndpoints': [
                {
                    'SourceIp': 'string'
                },
            ],
            'EncoderSettings': {
                'AudioDescriptions': [
                    {
                        'AudioNormalizationSettings': {
                            'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                            'AlgorithmControl': 'CORRECT_AUDIO',
                            'TargetLkfs': 123.0
                        },
                        'AudioSelectorName': 'string',
                        'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                        'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'CodecSettings': {
                            'AacSettings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                                'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                                'Profile': 'HEV1'|'HEV2'|'LC',
                                'RateControlMode': 'CBR'|'VBR',
                                'RawFormat': 'LATM_LOAS'|'NONE',
                                'SampleRate': 123.0,
                                'Spec': 'MPEG2'|'MPEG4',
                                'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                            },
                            'Ac3Settings': {
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                                'Dialnorm': 123,
                                'DrcProfile': 'FILM_STANDARD'|'NONE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                            },
                            'Eac3Settings': {
                                'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                                'DcFilter': 'DISABLED'|'ENABLED',
                                'Dialnorm': 123,
                                'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'LfeControl': 'LFE'|'NO_LFE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'LoRoCenterMixLevel': 123.0,
                                'LoRoSurroundMixLevel': 123.0,
                                'LtRtCenterMixLevel': 123.0,
                                'LtRtSurroundMixLevel': 123.0,
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                                'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                                'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                                'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                                'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                                'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                            },
                            'Mp2Settings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                                'SampleRate': 123.0
                            },
                            'PassThroughSettings': {},
                            'WavSettings': {
                                'BitDepth': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                                'SampleRate': 123.0
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'Name': 'string',
                        'RemixSettings': {
                            'ChannelMappings': [
                                {
                                    'InputChannelLevels': [
                                        {
                                            'Gain': 123,
                                            'InputChannel': 123
                                        },
                                    ],
                                    'OutputChannel': 123
                                },
                            ],
                            'ChannelsIn': 123,
                            'ChannelsOut': 123
                        },
                        'StreamName': 'string'
                    },
                ],
                'AvailBlanking': {
                    'AvailBlankingImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'State': 'DISABLED'|'ENABLED'
                },
                'AvailConfiguration': {
                    'AvailSettings': {
                        'Scte35SpliceInsert': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        },
                        'Scte35TimeSignalApos': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        }
                    }
                },
                'BlackoutSlate': {
                    'BlackoutSlateImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                    'NetworkEndBlackoutImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkId': 'string',
                    'State': 'DISABLED'|'ENABLED'
                },
                'CaptionDescriptions': [
                    {
                        'CaptionSelectorName': 'string',
                        'DestinationSettings': {
                            'AribDestinationSettings': {},
                            'BurnInDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'DvbSubDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'EbuTtDDestinationSettings': {
                                'CopyrightHolder': 'string',
                                'FillLineGap': 'DISABLED'|'ENABLED',
                                'FontFamily': 'string',
                                'StyleControl': 'EXCLUDE'|'INCLUDE'
                            },
                            'EmbeddedDestinationSettings': {},
                            'EmbeddedPlusScte20DestinationSettings': {},
                            'RtmpCaptionInfoDestinationSettings': {},
                            'Scte20PlusEmbeddedDestinationSettings': {},
                            'Scte27DestinationSettings': {},
                            'SmpteTtDestinationSettings': {},
                            'TeletextDestinationSettings': {},
                            'TtmlDestinationSettings': {
                                'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                            },
                            'WebvttDestinationSettings': {
                                'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageDescription': 'string',
                        'Name': 'string'
                    },
                ],
                'FeatureActivations': {
                    'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
                },
                'GlobalConfiguration': {
                    'InitialAudioGain': 123,
                    'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                    'InputLossBehavior': {
                        'BlackFrameMsec': 123,
                        'InputLossImageColor': 'string',
                        'InputLossImageSlate': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'InputLossImageType': 'COLOR'|'SLATE',
                        'RepeatFrameMsec': 123
                    },
                    'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                    'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                    'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
                },
                'MotionGraphicsConfiguration': {
                    'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                    'MotionGraphicsSettings': {
                        'HtmlMotionGraphicsSettings': {}
                    }
                },
                'NielsenConfiguration': {
                    'DistributorId': 'string',
                    'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
                },
                'OutputGroups': [
                    {
                        'Name': 'string',
                        'OutputGroupSettings': {
                            'ArchiveGroupSettings': {
                                'ArchiveCdnSettings': {
                                    'ArchiveS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                },
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'RolloverInterval': 123
                            },
                            'FrameCaptureGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'FrameCaptureCdnSettings': {
                                    'FrameCaptureS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                }
                            },
                            'HlsGroupSettings': {
                                'AdMarkers': [
                                    'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                                ],
                                'BaseUrlContent': 'string',
                                'BaseUrlContent1': 'string',
                                'BaseUrlManifest': 'string',
                                'BaseUrlManifest1': 'string',
                                'CaptionLanguageMappings': [
                                    {
                                        'CaptionChannel': 123,
                                        'LanguageCode': 'string',
                                        'LanguageDescription': 'string'
                                    },
                                ],
                                'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                                'ClientCache': 'DISABLED'|'ENABLED',
                                'CodecSpecification': 'RFC_4281'|'RFC_6381',
                                'ConstantIv': 'string',
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                                'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                                'EncryptionType': 'AES128'|'SAMPLE_AES',
                                'HlsCdnSettings': {
                                    'HlsAkamaiSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123,
                                        'Salt': 'string',
                                        'Token': 'string'
                                    },
                                    'HlsBasicPutSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsMediaStoreSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'MediaStoreStorageClass': 'TEMPORAL',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    },
                                    'HlsWebdavSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    }
                                },
                                'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                                'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                                'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                                'IndexNSegments': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'IvInManifest': 'EXCLUDE'|'INCLUDE',
                                'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                                'KeepSegments': 123,
                                'KeyFormat': 'string',
                                'KeyFormatVersions': 'string',
                                'KeyProviderSettings': {
                                    'StaticKeySettings': {
                                        'KeyProviderServer': {
                                            'PasswordParam': 'string',
                                            'Uri': 'string',
                                            'Username': 'string'
                                        },
                                        'StaticKeyValue': 'string'
                                    }
                                },
                                'ManifestCompression': 'GZIP'|'NONE',
                                'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                                'MinSegmentLength': 123,
                                'Mode': 'LIVE'|'VOD',
                                'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                                'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                                'ProgramDateTimePeriod': 123,
                                'RedundantManifest': 'DISABLED'|'ENABLED',
                                'SegmentLength': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SegmentsPerSubdirectory': 123,
                                'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123,
                                'TimestampDeltaMilliseconds': 123,
                                'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                            },
                            'MediaPackageGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                }
                            },
                            'MsSmoothGroupSettings': {
                                'AcquisitionPointId': 'string',
                                'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                                'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                'ConnectionRetryInterval': 123,
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'EventId': 'string',
                                'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                                'EventStopBehavior': 'NONE'|'SEND_EOS',
                                'FilecacheDuration': 123,
                                'FragmentLength': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'NumRetries': 123,
                                'RestartDelay': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SendDelayMs': 123,
                                'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                                'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                                'TimestampOffset': 'string',
                                'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                            },
                            'MultiplexGroupSettings': {},
                            'RtmpGroupSettings': {
                                'AdMarkers': [
                                    'ON_CUE_POINT_SCTE35',
                                ],
                                'AuthenticationScheme': 'AKAMAI'|'COMMON',
                                'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                                'CacheLength': 123,
                                'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'RestartDelay': 123
                            },
                            'UdpGroupSettings': {
                                'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123
                            }
                        },
                        'Outputs': [
                            {
                                'AudioDescriptionNames': [
                                    'string',
                                ],
                                'CaptionDescriptionNames': [
                                    'string',
                                ],
                                'OutputName': 'string',
                                'OutputSettings': {
                                    'ArchiveOutputSettings': {
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            },
                                            'RawSettings': {}
                                        },
                                        'Extension': 'string',
                                        'NameModifier': 'string'
                                    },
                                    'FrameCaptureOutputSettings': {
                                        'NameModifier': 'string'
                                    },
                                    'HlsOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'HlsSettings': {
                                            'AudioOnlyHlsSettings': {
                                                'AudioGroupId': 'string',
                                                'AudioOnlyImage': {
                                                    'PasswordParam': 'string',
                                                    'Uri': 'string',
                                                    'Username': 'string'
                                                },
                                                'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                                'SegmentType': 'AAC'|'FMP4'
                                            },
                                            'Fmp4HlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                            },
                                            'FrameCaptureHlsSettings': {},
                                            'StandardHlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'M3u8Settings': {
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'EcmPid': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                }
                                            }
                                        },
                                        'NameModifier': 'string',
                                        'SegmentModifier': 'string'
                                    },
                                    'MediaPackageOutputSettings': {},
                                    'MsSmoothOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'NameModifier': 'string'
                                    },
                                    'MultiplexOutputSettings': {
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        }
                                    },
                                    'RtmpOutputSettings': {
                                        'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                        'ConnectionRetryInterval': 123,
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'NumRetries': 123
                                    },
                                    'UdpOutputSettings': {
                                        'BufferMsec': 123,
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            }
                                        },
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'FecOutputSettings': {
                                            'ColumnDepth': 123,
                                            'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                            'RowLength': 123
                                        }
                                    }
                                },
                                'VideoDescriptionName': 'string'
                            },
                        ]
                    },
                ],
                'TimecodeConfig': {
                    'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                    'SyncThreshold': 123
                },
                'VideoDescriptions': [
                    {
                        'CodecSettings': {
                            'FrameCaptureSettings': {
                                'CaptureInterval': 123,
                                'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                            },
                            'H264Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'Bitrate': 123,
                                'BufFillPct': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'EntropyEncoding': 'CABAC'|'CAVLC',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'ForceFieldPictures': 'DISABLED'|'ENABLED',
                                'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopBReference': 'DISABLED'|'ENABLED',
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'NumRefFrames': 123,
                                'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                                'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Softness': 123,
                                'SpatialAq': 'DISABLED'|'ENABLED',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'Syntax': 'DEFAULT'|'RP2027',
                                'TemporalAq': 'DISABLED'|'ENABLED',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'H265Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'AlternativeTransferFunction': 'INSERT'|'OMIT',
                                'Bitrate': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Hdr10Settings': {
                                        'MaxCll': 123,
                                        'MaxFall': 123
                                    },
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'MAIN'|'MAIN_10BIT',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Tier': 'HIGH'|'MAIN',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'Mpeg2Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpace': 'AUTO'|'PASSTHROUGH',
                                'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                            }
                        },
                        'Height': 123,
                        'Name': 'string',
                        'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                        'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                        'Sharpness': 123,
                        'Width': 123
                    },
                ]
            },
            'Id': 'string',
            'InputAttachments': [
                {
                    'AutomaticInputFailoverSettings': {
                        'ErrorClearTimeMsec': 123,
                        'FailoverConditions': [
                            {
                                'FailoverConditionSettings': {
                                    'AudioSilenceSettings': {
                                        'AudioSelectorName': 'string',
                                        'AudioSilenceThresholdMsec': 123
                                    },
                                    'InputLossSettings': {
                                        'InputLossThresholdMsec': 123
                                    },
                                    'VideoBlackSettings': {
                                        'BlackDetectThreshold': 123.0,
                                        'VideoBlackThresholdMsec': 123
                                    }
                                }
                            },
                        ],
                        'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                        'SecondaryInputId': 'string'
                    },
                    'InputAttachmentName': 'string',
                    'InputId': 'string',
                    'InputSettings': {
                        'AudioSelectors': [
                            {
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AudioHlsRenditionSelection': {
                                        'GroupId': 'string',
                                        'Name': 'string'
                                    },
                                    'AudioLanguageSelection': {
                                        'LanguageCode': 'string',
                                        'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                    },
                                    'AudioPidSelection': {
                                        'Pid': 123
                                    },
                                    'AudioTrackSelection': {
                                        'Tracks': [
                                            {
                                                'Track': 123
                                            },
                                        ]
                                    }
                                }
                            },
                        ],
                        'CaptionSelectors': [
                            {
                                'LanguageCode': 'string',
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AncillarySourceSettings': {
                                        'SourceAncillaryChannelNumber': 123
                                    },
                                    'AribSourceSettings': {},
                                    'DvbSubSourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'EmbeddedSourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Scte20Detection': 'AUTO'|'OFF',
                                        'Source608ChannelNumber': 123,
                                        'Source608TrackNumber': 123
                                    },
                                    'Scte20SourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Source608ChannelNumber': 123
                                    },
                                    'Scte27SourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'TeletextSourceSettings': {
                                        'OutputRectangle': {
                                            'Height': 123.0,
                                            'LeftOffset': 123.0,
                                            'TopOffset': 123.0,
                                            'Width': 123.0
                                        },
                                        'PageNumber': 'string'
                                    }
                                }
                            },
                        ],
                        'DeblockFilter': 'DISABLED'|'ENABLED',
                        'DenoiseFilter': 'DISABLED'|'ENABLED',
                        'FilterStrength': 123,
                        'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                        'NetworkInputSettings': {
                            'HlsInputSettings': {
                                'Bandwidth': 123,
                                'BufferSegments': 123,
                                'Retries': 123,
                                'RetryInterval': 123,
                                'Scte35Source': 'MANIFEST'|'SEGMENTS'
                            },
                            'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                        },
                        'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                        'SourceEndBehavior': 'CONTINUE'|'LOOP',
                        'VideoSelector': {
                            'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                            'ColorSpaceSettings': {
                                'Hdr10Settings': {
                                    'MaxCll': 123,
                                    'MaxFall': 123
                                }
                            },
                            'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                            'SelectorSettings': {
                                'VideoSelectorPid': {
                                    'Pid': 123
                                },
                                'VideoSelectorProgramId': {
                                    'ProgramId': 123
                                }
                            }
                        }
                    }
                },
            ],
            'InputSpecification': {
                'Codec': 'MPEG2'|'AVC'|'HEVC',
                'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                'Resolution': 'SD'|'HD'|'UHD'
            },
            'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
            'Name': 'string',
            'PipelineDetails': [
                {
                    'ActiveInputAttachmentName': 'string',
                    'ActiveInputSwitchActionName': 'string',
                    'ActiveMotionGraphicsActionName': 'string',
                    'ActiveMotionGraphicsUri': 'string',
                    'PipelineId': 'string'
                },
            ],
            'PipelinesRunningCount': 123,
            'RoleArn': 'string',
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
            'Tags': {
                'string': 'string'
            },
            'Vpc': {
                'AvailabilityZones': [
                    'string',
                ],
                'NetworkInterfaceIds': [
                    'string',
                ],
                'SecurityGroupIds': [
                    'string',
                ],
                'SubnetIds': [
                    'string',
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* Channel details
        

        - **Arn** *(string) --* The unique arn of the channel.
        

        - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
          

          - **Resolution** *(string) --* Maximum CDI input resolution
      
        

        - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        

        - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
          

          - *(dict) --* Placeholder documentation for OutputDestination
            

            - **Id** *(string) --* User-specified id. This is used in an output group or an output.
            

            - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
              

              - *(dict) --* MediaPackage Output Destination Settings
                

                - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
            
          
            

            - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
              

              - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
              

              - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
          
            

            - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
              

              - *(dict) --* Placeholder documentation for OutputDestinationSettings
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                

                - **Url** *(string) --* A URL specifying a destination
                

                - **Username** *(string) --* username for destination
            
          
        
      
        

        - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
          

          - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
            

            - **SourceIp** *(string) --* Public IP of where a channel's output comes from
        
      
        

        - **EncoderSettings** *(dict) --* Encoder Settings
          

          - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription
            

            - *(dict) --* Audio Description
              

              - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.
                

                - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
                

                - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
                

                - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
            
              

              - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source for this AudioDescription.
              

              - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
              

              - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
              

              - **CodecSettings** *(dict) --* Audio codec settings.
                

                - **AacSettings** *(dict) --* Aac Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.
                  

                  - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
                  

                  - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
                  

                  - **Profile** *(string) --* AAC Profile.
                  

                  - **RateControlMode** *(string) --* Rate Control Mode.
                  

                  - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.
                  

                  - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
                  

                  - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.
              
                

                - **Ac3Settings** *(dict) --* Ac3 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
                  

                  - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
                  

                  - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
              
                

                - **Eac3Settings** *(dict) --* Eac3 Settings
                  

                  - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.
                  

                  - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
                  

                  - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.
                  

                  - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
                  

                  - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
                  

                  - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.
                  

                  - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.
                  

                  - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                  

                  - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
                  

                  - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
                  

                  - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.
                  

                  - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
                  

                  - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
              
                

                - **Mp2Settings** *(dict) --* Mp2 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second.
                  

                  - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
                

                - **PassThroughSettings** *(dict) --* Pass Through Settings
              
                

                - **WavSettings** *(dict) --* Wav Settings
                  

                  - **BitDepth** *(float) --* Bits per sample.
                  

                  - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
            
              

              - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
              

              - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
              

              - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
              

              - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.
                

                - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with appropriate gain adjustments.
                  

                  - *(dict) --* Audio Channel Mapping
                    

                    - **InputChannelLevels** *(list) --* Indices and gain values for each input channel that should be remixed into this output channel.
                      

                      - *(dict) --* Input Channel Level
                        

                        - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
                        

                        - **InputChannel** *(integer) --* The index of the input channel used as a source.
                    
                  
                    

                    - **OutputChannel** *(integer) --* The index of the output channel being produced.
                
              
                

                - **ChannelsIn** *(integer) --* Number of input channels to be used.
                

                - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
            
              

              - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
          
        
          

          - **AvailBlanking** *(dict) --* Settings for ad avail blanking.
            

            - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
        
          

          - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.
            

            - **AvailSettings** *(dict) --* Ad avail settings.
              

              - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
              

              - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
          
        
          

          - **BlackoutSlate** *(dict) --* Settings for blackout slate.
            

            - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
            

            - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
        
          

          - **CaptionDescriptions** *(list) --* Settings for caption decriptions
            

            - *(dict) --* Caption Description
              

              - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
              

              - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.
                

                - **AribDestinationSettings** *(dict) --* Arib Destination Settings
              
                

                - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
              
                

                - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
              
                

                - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings
                  

                  - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
                  

                  - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
                  

                  - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
                  

                  - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
              
                

                - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings
              
                

                - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings
              
                

                - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings
              
                

                - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings
              
                

                - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings
              
                

                - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings
              
                

                - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings
              
                

                - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings
                  

                  - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
              
                

                - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings
                  

                  - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
              
            
              

              - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
              

              - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).
              

              - **Name** *(string) --* Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
          
        
          

          - **FeatureActivations** *(dict) --* Feature Activations
            

            - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
        
          

          - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.
            

            - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.
            

            - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
            

            - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.
              

              - **BlackFrameMsec** *(integer) --* Documentation update needed
              

              - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
              

              - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
              

              - **RepeatFrameMsec** *(integer) --* Documentation update needed
          
            

            - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
            

            - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
            

            - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
        
          

          - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.
            

            - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion
            

            - **MotionGraphicsSettings** *(dict) --* Motion Graphics Settings
              

              - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings
            
          
        
          

          - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.
            

            - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.
            

            - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging
        
          

          - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup
            

            - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
              

              - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
              

              - **OutputGroupSettings** *(dict) --* Settings associated with the output group.
                

                - **ArchiveGroupSettings** *(dict) --* Archive Group Settings
                  

                  - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **ArchiveS3Settings** *(dict) --* Archive S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
                  

                  - **Destination** *(dict) --* A directory and base filename where archive files should be written.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.
              
                

                - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings
                  

                  - **Destination** *(dict) --* The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
              
                

                - **HlsGroupSettings** *(dict) --* Hls Group Settings
                  

                  - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
                    

                    - *(string) --* Hls Ad Markers
                
                  

                  - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
                  

                  - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
                  

                  - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
                    

                    - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
                      

                      - **CaptionChannel** *(integer) --* The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
                      

                      - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
                      

                      - **LanguageDescription** *(string) --* Textual description of language
                  
                
                  

                  - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
                  

                  - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
                  

                  - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
                  

                  - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
                  

                  - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **DirectoryStructure** *(string) --* Place segments in subdirectories.
                  

                  - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
                  

                  - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
                  

                  - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                      

                      - **Salt** *(string) --* Salt for authenticated Akamai.
                      

                      - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.
                  
                    

                    - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsS3Settings** *(dict) --* Hls S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                    

                    - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                
                  

                  - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging
                  

                  - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
                  

                  - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
                  

                  - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
                  

                  - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
                  

                  - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
                  

                  - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
                  

                  - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).
                  

                  - **KeyProviderSettings** *(dict) --* The key provider settings.
                    

                    - **StaticKeySettings** *(dict) --* Static Key Settings
                      

                      - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.
                        

                        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                        

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                        

                        - **Username** *(string) --* Documentation update needed
                    
                      

                      - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal string.
                  
                
                  

                  - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.
                  

                  - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.
                  

                  - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
                  

                  - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
                  

                  - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
                  

                  - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
                  

                  - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
                  

                  - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
                  

                  - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
                  

                  - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                  

                  - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.
                  

                  - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
              
                

                - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings
                  

                  - **Destination** *(dict) --* MediaPackage channel destination.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
              
                

                - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings
                  

                  - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
                  

                  - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
                  

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
                  

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
                  

                  - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
                  

                  - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
                  

                  - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event
                  

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                  

                  - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **NumRetries** *(integer) --* Number of retry attempts.
                  

                  - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.
                  

                  - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
                  

                  - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.
                  

                  - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
                  

                  - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
              
                

                - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings
              
                

                - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings
                  

                  - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
                    

                    - *(string) --* Rtmp Ad Markers
                
                  

                  - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN
                  

                  - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
                  

                  - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.
                  

                  - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
                  

                  - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
                  

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
              
                

                - **UdpGroupSettings** *(dict) --* Udp Group Settings
                  

                  - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
              
            
              

              - **Outputs** *(list) --* Placeholder documentation for __listOfOutput
                

                - *(dict) --* Output settings. There can be multiple outputs within a group.
                  

                  - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **OutputName** *(string) --* The name used to identify an output.
                  

                  - **OutputSettings** *(dict) --* Output type-specific settings.
                    

                    - **ArchiveOutputSettings** *(dict) --* Archive Output Settings
                      

                      - **ContainerSettings** *(dict) --* Settings specific to the container type of the file.
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                        

                        - **RawSettings** *(dict) --* Raw Settings
                      
                    
                      

                      - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings
                      

                      - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.
                  
                    

                    - **HlsOutputSettings** *(dict) --* Hls Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These settings are different for audio-only outputs.
                        

                        - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings
                          

                          - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.
                          

                          - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
                            

                            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                            

                            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                            

                            - **Username** *(string) --* Documentation update needed
                        
                          

                          - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
                          

                          - **SegmentType** *(string) --* Specifies the segment type.
                      
                        

                        - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                      
                        

                        - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings
                      
                        

                        - **StandardHlsSettings** *(dict) --* Standard Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
                            

                            - **EcmPid** *(string) --* This parameter is unused and deprecated.
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                        
                      
                    
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
                      

                      - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.
                  
                    

                    - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings
                  
                    

                    - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings
                      

                      - **Destination** *(dict) --* Destination is a Multiplex.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                  
                    

                    - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings
                      

                      - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
                      

                      - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **NumRetries** *(integer) --* Number of retry attempts.
                  
                    

                    - **UdpOutputSettings** *(dict) --* Udp Output Settings
                      

                      - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
                      

                      - **ContainerSettings** *(dict) --* Udp Container Settings
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                    
                      

                      - **Destination** *(dict) --* Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.
                        

                        - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
                        

                        - **IncludeFec** *(string) --* Enables column only or column and row based FEC
                        

                        - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
                    
                  
                
                  

                  - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.
              
            
          
        
          

          - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode information from inputs.
            

            - **Source** *(string) --* Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
            

            - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
        
          

          - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription
            

            - *(dict) --* Video settings for this stream.
              

              - **CodecSettings** *(dict) --* Video codec settings.
                

                - **FrameCaptureSettings** *(dict) --* Frame Capture Settings
                  

                  - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
                  

                  - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.
              
                

                - **H264Settings** *(dict) --* H264 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
                  

                  - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
                  

                  - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopBReference** *(string) --* Documentation update needed
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.264 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
                  

                  - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.264 Profile.
                  

                  - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
                  

                  - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
                  

                  - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
                  

                  - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.
                  

                  - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **H265Settings** *(dict) --* H265 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Hdr10Settings** *(dict) --* Hdr10 Settings
                      

                      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                      

                      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.265 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.265 Profile.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Tier** *(string) --* H.265 Tier.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **Mpeg2Settings** *(dict) --* Mpeg2 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
                  

                  - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
                  

                  - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
                  

                  - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.
                  

                  - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
                  

                  - **FramerateDenominator** *(integer) --* description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **FramerateNumerator** *(integer) --* The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.
                  

                  - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
                  

                  - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
                  

                  - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
                  

                  - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
                  

                  - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
                  

                  - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
              
            
              

              - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
              

              - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
              

              - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
              

              - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
              

              - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
              

              - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
          
        
      
        

        - **Id** *(string) --* The unique id of the channel.
        

        - **InputAttachments** *(list) --* List of input attachments for channel.
          

          - *(dict) --* Placeholder documentation for InputAttachment
            

            - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
              

              - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
              

              - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                

                - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                  

                  - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                    

                    - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                      

                      - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                      

                      - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                  
                    

                    - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                      

                      - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                  
                    

                    - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                      

                      - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                      

                      - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                  
                
              
            
              

              - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
              

              - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
          
            

            - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
            

            - **InputId** *(string) --* The ID of the input
            

            - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
              

              - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                

                - *(dict) --* Audio Selector
                  

                  - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                  

                  - **SelectorSettings** *(dict) --* The audio selector settings.
                    

                    - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                      

                      - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                      

                      - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                  
                    

                    - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                      

                      - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                      

                      - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                  
                    

                    - **AudioPidSelection** *(dict) --* Audio Pid Selection
                      

                      - **Pid** *(integer) --* Selects a specific PID from within a source.
                  
                    

                    - **AudioTrackSelection** *(dict) --* Audio Track Selection
                      

                      - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                        

                        - *(dict) --* Audio Track
                          

                          - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                      
                    
                  
                
              
            
              

              - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                

                - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                  

                  - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                  

                  - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                  

                  - **SelectorSettings** *(dict) --* Caption selector settings.
                    

                    - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                      

                      - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                  
                    

                    - **AribSourceSettings** *(dict) --* Arib Source Settings
                  
                    

                    - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                  
                    

                    - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                      

                      - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                  
                    

                    - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                  
                    

                    - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                  
                    

                    - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                      

                      - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                        

                        - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                        

                        - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                        

                        - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                        

                        - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                    
                      

                      - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                  
                
              
            
              

              - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
              

              - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
              

              - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
              

              - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
              

              - **NetworkInputSettings** *(dict) --* Input settings.
                

                - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                  

                  - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                  

                  - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                  

                  - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                  

                  - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                  

                  - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
              
                

                - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
            
              

              - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
              

              - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
              

              - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                

                - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                

                - **ColorSpaceSettings** *(dict) --* Color space settings
                  

                  - **Hdr10Settings** *(dict) --* Hdr10 Settings
                    

                    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                    

                    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                
              
                

                - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                

                - **SelectorSettings** *(dict) --* The video selector settings.
                  

                  - **VideoSelectorPid** *(dict) --* Video Selector Pid
                    

                    - **Pid** *(integer) --* Selects a specific PID from within a video source.
                
                  

                  - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                    

                    - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                
              
            
          
        
      
        

        - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
          

          - **Codec** *(string) --* Input codec
          

          - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
          

          - **Resolution** *(string) --* Input resolution, categorized coarsely
      
        

        - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
        

        - **Name** *(string) --* The name of the channel. (user-mutable)
        

        - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.
          

          - *(dict) --* Runtime details of a pipeline when a channel is running.
            

            - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment currently being ingested by this pipeline.
            

            - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
            

            - **ActiveMotionGraphicsActionName** *(string) --* The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
            

            - **ActiveMotionGraphicsUri** *(string) --* The current URI being used for HTML5 motion graphics for this pipeline.
            

            - **PipelineId** *(string) --* Pipeline ID
        
      
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        

        - **State** *(string) --* Placeholder documentation for ChannelState
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **Vpc** *(dict) --* Settings for VPC output
          

          - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
            

            - *(string) --* Placeholder documentation for __string
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_input(**kwargs)

    Produces details about an input

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeInput>`_    


    **Request Syntax** 
    ::

      response = client.describe_input(
          InputId='string'
      )
    :type InputId: string
    :param InputId: **[REQUIRED]** Unique ID of the input

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'AttachedChannels': [
                'string',
            ],
            'Destinations': [
                {
                    'Ip': 'string',
                    'Port': 'string',
                    'Url': 'string',
                    'Vpc': {
                        'AvailabilityZone': 'string',
                        'NetworkInterfaceId': 'string'
                    }
                },
            ],
            'Id': 'string',
            'InputClass': 'STANDARD'|'SINGLE_PIPELINE',
            'InputDevices': [
                {
                    'Id': 'string'
                },
            ],
            'InputPartnerIds': [
                'string',
            ],
            'InputSourceType': 'STATIC'|'DYNAMIC',
            'MediaConnectFlows': [
                {
                    'FlowArn': 'string'
                },
            ],
            'Name': 'string',
            'RoleArn': 'string',
            'SecurityGroups': [
                'string',
            ],
            'Sources': [
                {
                    'PasswordParam': 'string',
                    'Url': 'string',
                    'Username': 'string'
                },
            ],
            'State': 'CREATING'|'DETACHED'|'ATTACHED'|'DELETING'|'DELETED',
            'Tags': {
                'string': 'string'
            },
            'Type': 'UDP_PUSH'|'RTP_PUSH'|'RTMP_PUSH'|'RTMP_PULL'|'URL_PULL'|'MP4_FILE'|'MEDIACONNECT'|'INPUT_DEVICE'|'AWS_CDI'
        }
      **Response Structure** 

      

      - *(dict) --* Input details
        

        - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).
        

        - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).
          

          - *(dict) --* The settings for a PUSH type input.
            

            - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input. 
            

            - **Port** *(string) --* The port number for the input.
            

            - **Url** *(string) --* This represents the endpoint that the customer stream will be pushed to. 
            

            - **Vpc** *(dict) --* The properties for a VPC type input destination.
              

              - **AvailabilityZone** *(string) --* The availability zone of the Input destination. 
              

              - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination in the VPC. 
          
        
      
        

        - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).
        

        - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input. 
        

        - **InputDevices** *(list) --* Settings for the input devices.
          

          - *(dict) --* Settings for an input device.
            

            - **Id** *(string) --* The unique ID for the device.
        
      
        

        - **InputPartnerIds** *(list) --* A list of IDs for all Inputs which are partners of this one.
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE inputs. 
        

        - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.
          

          - *(dict) --* The settings for a MediaConnect Flow.
            

            - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.
        
      
        

        - **Name** *(string) --* The user-assigned name (This is a mutable value).
        

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
        

        - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to the input.
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **Sources** *(list) --* A list of the sources of the input (PULL-type).
          

          - *(dict) --* The settings for a PULL type input.
            

            - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.
            

            - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 
            

            - **Username** *(string) --* The username for the input source.
        
      
        

        - **State** *(string) --* Placeholder documentation for InputState
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **Type** *(string) --* Placeholder documentation for InputType
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_input_device(**kwargs)

    Gets the details for the input device

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeInputDevice>`_    


    **Request Syntax** 
    ::

      response = client.describe_input_device(
          InputDeviceId='string'
      )
    :type InputDeviceId: string
    :param InputDeviceId: **[REQUIRED]** The unique ID of this input device. For example, hd-123456789abcdef.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'ConnectionState': 'DISCONNECTED'|'CONNECTED',
            'DeviceSettingsSyncState': 'SYNCED'|'SYNCING',
            'DeviceUpdateStatus': 'UP_TO_DATE'|'NOT_UP_TO_DATE',
            'HdDeviceSettings': {
                'ActiveInput': 'HDMI'|'SDI',
                'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                'DeviceState': 'IDLE'|'STREAMING',
                'Framerate': 123.0,
                'Height': 123,
                'MaxBitrate': 123,
                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                'Width': 123
            },
            'Id': 'string',
            'MacAddress': 'string',
            'Name': 'string',
            'NetworkSettings': {
                'DnsAddresses': [
                    'string',
                ],
                'Gateway': 'string',
                'IpAddress': 'string',
                'IpScheme': 'STATIC'|'DHCP',
                'SubnetMask': 'string'
            },
            'SerialNumber': 'string',
            'Type': 'HD',
            'UhdDeviceSettings': {
                'ActiveInput': 'HDMI'|'SDI',
                'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                'DeviceState': 'IDLE'|'STREAMING',
                'Framerate': 123.0,
                'Height': 123,
                'MaxBitrate': 123,
                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                'Width': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* Details for the input device.
        

        - **Arn** *(string) --* The unique ARN of the input device.
        

        - **ConnectionState** *(string) --* The state of the connection between the input device and AWS.
        

        - **DeviceSettingsSyncState** *(string) --* The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
        

        - **DeviceUpdateStatus** *(string) --* The status of software on the input device.
        

        - **HdDeviceSettings** *(dict) --* Settings that describe an input device that is type HD.
          

          - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
          

          - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
          

          - **DeviceState** *(string) --* The state of the input device.
          

          - **Framerate** *(float) --* The frame rate of the video source.
          

          - **Height** *(integer) --* The height of the video source, in pixels.
          

          - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
          

          - **ScanType** *(string) --* The scan type of the video source.
          

          - **Width** *(integer) --* The width of the video source, in pixels.
      
        

        - **Id** *(string) --* The unique ID of the input device.
        

        - **MacAddress** *(string) --* The network MAC address of the input device.
        

        - **Name** *(string) --* A name that you specify for the input device.
        

        - **NetworkSettings** *(dict) --* The network settings for the input device.
          

          - **DnsAddresses** *(list) --* The DNS addresses of the input device.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Gateway** *(string) --* The network gateway IP address.
          

          - **IpAddress** *(string) --* The IP address of the input device.
          

          - **IpScheme** *(string) --* Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
          

          - **SubnetMask** *(string) --* The subnet mask of the input device.
      
        

        - **SerialNumber** *(string) --* The unique serial number of the input device.
        

        - **Type** *(string) --* The type of the input device.
        

        - **UhdDeviceSettings** *(dict) --* Settings that describe an input device that is type UHD.
          

          - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
          

          - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
          

          - **DeviceState** *(string) --* The state of the input device.
          

          - **Framerate** *(float) --* The frame rate of the video source.
          

          - **Height** *(integer) --* The height of the video source, in pixels.
          

          - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
          

          - **ScanType** *(string) --* The scan type of the video source.
          

          - **Width** *(integer) --* The width of the video source, in pixels.
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_input_device_thumbnail(**kwargs)

    Get the latest thumbnail data for the input device.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeInputDeviceThumbnail>`_    


    **Request Syntax** 
    ::

      response = client.describe_input_device_thumbnail(
          InputDeviceId='string',
          Accept='image/jpeg'
      )
    :type InputDeviceId: string
    :param InputDeviceId: **[REQUIRED]** The unique ID of this input device. For example, hd-123456789abcdef.

    
    :type Accept: string
    :param Accept: **[REQUIRED]** The HTTP Accept header. Indicates the requested type for the thumbnail.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Body': StreamingBody(),
            'ContentType': 'image/jpeg',
            'ContentLength': 123,
            'ETag': 'string',
            'LastModified': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* Latest InputDevice Thumbnail
        

        - **Body** (:class:`.StreamingBody`) -- The binary data for the thumbnail that the Link device has most recently sent to MediaLive.
        

        - **ContentType** *(string) --* Specifies the media type of the thumbnail.
        

        - **ContentLength** *(integer) --* The length of the content.
        

        - **ETag** *(string) --* The unique, cacheable version of this thumbnail.
        

        - **LastModified** *(datetime) --* The date and time the thumbnail was last updated at the device.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_input_security_group(**kwargs)

    Produces a summary of an Input Security Group

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeInputSecurityGroup>`_    


    **Request Syntax** 
    ::

      response = client.describe_input_security_group(
          InputSecurityGroupId='string'
      )
    :type InputSecurityGroupId: string
    :param InputSecurityGroupId: **[REQUIRED]** The id of the Input Security Group to describe

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Id': 'string',
            'Inputs': [
                'string',
            ],
            'State': 'IDLE'|'IN_USE'|'UPDATING'|'DELETED',
            'Tags': {
                'string': 'string'
            },
            'WhitelistRules': [
                {
                    'Cidr': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* An Input Security Group
        

        - **Arn** *(string) --* Unique ARN of Input Security Group
        

        - **Id** *(string) --* The Id of the Input Security Group
        

        - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **State** *(string) --* The current state of the Input Security Group.
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **WhitelistRules** *(list) --* Whitelist rules and their sync status
          

          - *(dict) --* Whitelist rule
            

            - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_multiplex(**kwargs)

    Gets details about a multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeMultiplex>`_    


    **Request Syntax** 
    ::

      response = client.describe_multiplex(
          MultiplexId='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'AvailabilityZones': [
                'string',
            ],
            'Destinations': [
                {
                    'MediaConnectSettings': {
                        'EntitlementArn': 'string'
                    }
                },
            ],
            'Id': 'string',
            'MultiplexSettings': {
                'MaximumVideoBufferDelayMilliseconds': 123,
                'TransportStreamBitrate': 123,
                'TransportStreamId': 123,
                'TransportStreamReservedBitrate': 123
            },
            'Name': 'string',
            'PipelinesRunningCount': 123,
            'ProgramCount': 123,
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* Details for one multiplex.
        

        - **Arn** *(string) --* The unique arn of the multiplex.
        

        - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **Destinations** *(list) --* A list of the multiplex output destinations.
          

          - *(dict) --* Multiplex output destination settings
            

            - **MediaConnectSettings** *(dict) --* Multiplex MediaConnect output destination settings.
              

              - **EntitlementArn** *(string) --* The MediaConnect entitlement ARN available as a Flow source.
          
        
      
        

        - **Id** *(string) --* The unique id of the multiplex.
        

        - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
          

          - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.
          

          - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
          

          - **TransportStreamId** *(integer) --* Transport stream ID.
          

          - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.
      
        

        - **Name** *(string) --* The name of the multiplex.
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **ProgramCount** *(integer) --* The number of programs in the multiplex.
        

        - **State** *(string) --* The current state of the multiplex.
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_multiplex_program(**kwargs)

    Get the details for a program in a multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeMultiplexProgram>`_    


    **Request Syntax** 
    ::

      response = client.describe_multiplex_program(
          MultiplexId='string',
          ProgramName='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex that the program belongs to.

    
    :type ProgramName: string
    :param ProgramName: **[REQUIRED]** The name of the program.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ChannelId': 'string',
            'MultiplexProgramSettings': {
                'PreferredChannelPipeline': 'CURRENTLY_ACTIVE'|'PIPELINE_0'|'PIPELINE_1',
                'ProgramNumber': 123,
                'ServiceDescriptor': {
                    'ProviderName': 'string',
                    'ServiceName': 'string'
                },
                'VideoSettings': {
                    'ConstantBitrate': 123,
                    'StatmuxSettings': {
                        'MaximumBitrate': 123,
                        'MinimumBitrate': 123,
                        'Priority': 123
                    }
                }
            },
            'PacketIdentifiersMap': {
                'AudioPids': [
                    123,
                ],
                'DvbSubPids': [
                    123,
                ],
                'DvbTeletextPid': 123,
                'EtvPlatformPid': 123,
                'EtvSignalPid': 123,
                'KlvDataPids': [
                    123,
                ],
                'PcrPid': 123,
                'PmtPid': 123,
                'PrivateMetadataPid': 123,
                'Scte27Pids': [
                    123,
                ],
                'Scte35Pid': 123,
                'TimedMetadataPid': 123,
                'VideoPid': 123
            },
            'PipelineDetails': [
                {
                    'ActiveChannelPipeline': 'string',
                    'PipelineId': 'string'
                },
            ],
            'ProgramName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* The details of one program.
        

        - **ChannelId** *(string) --* The MediaLive channel associated with the program.
        

        - **MultiplexProgramSettings** *(dict) --* The settings for this multiplex program.
          

          - **PreferredChannelPipeline** *(string) --* Indicates which pipeline is preferred by the multiplex for program ingest.
          

          - **ProgramNumber** *(integer) --* Unique program number.
          

          - **ServiceDescriptor** *(dict) --* Transport stream service descriptor configuration for the Multiplex program.
            

            - **ProviderName** *(string) --* Name of the provider.
            

            - **ServiceName** *(string) --* Name of the service.
        
          

          - **VideoSettings** *(dict) --* Program video settings configuration.
            

            - **ConstantBitrate** *(integer) --* The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.
            

            - **StatmuxSettings** *(dict) --* Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.
              

              - **MaximumBitrate** *(integer) --* Maximum statmux bitrate.
              

              - **MinimumBitrate** *(integer) --* Minimum statmux bitrate.
              

              - **Priority** *(integer) --* The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
          
        
      
        

        - **PacketIdentifiersMap** *(dict) --* The packet identifier map for this multiplex program.
          

          - **AudioPids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **DvbSubPids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **DvbTeletextPid** *(integer) --* Placeholder documentation for __integer
          

          - **EtvPlatformPid** *(integer) --* Placeholder documentation for __integer
          

          - **EtvSignalPid** *(integer) --* Placeholder documentation for __integer
          

          - **KlvDataPids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **PcrPid** *(integer) --* Placeholder documentation for __integer
          

          - **PmtPid** *(integer) --* Placeholder documentation for __integer
          

          - **PrivateMetadataPid** *(integer) --* Placeholder documentation for __integer
          

          - **Scte27Pids** *(list) --* Placeholder documentation for __listOf__integer
            

            - *(integer) --* Placeholder documentation for __integer
        
          

          - **Scte35Pid** *(integer) --* Placeholder documentation for __integer
          

          - **TimedMetadataPid** *(integer) --* Placeholder documentation for __integer
          

          - **VideoPid** *(integer) --* Placeholder documentation for __integer
      
        

        - **PipelineDetails** *(list) --* Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
          

          - *(dict) --* The current source for one of the pipelines in the multiplex.
            

            - **ActiveChannelPipeline** *(string) --* Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
            

            - **PipelineId** *(string) --* Identifies a specific pipeline in the multiplex.
        
      
        

        - **ProgramName** *(string) --* The name of the multiplex program.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_offering(**kwargs)

    Get details for an offering.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeOffering>`_    


    **Request Syntax** 
    ::

      response = client.describe_offering(
          OfferingId='string'
      )
    :type OfferingId: string
    :param OfferingId: **[REQUIRED]** Unique offering ID, e.g. '87654321'

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CurrencyCode': 'string',
            'Duration': 123,
            'DurationUnits': 'MONTHS',
            'FixedPrice': 123.0,
            'OfferingDescription': 'string',
            'OfferingId': 'string',
            'OfferingType': 'NO_UPFRONT',
            'Region': 'string',
            'ResourceSpecification': {
                'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
            },
            'UsagePrice': 123.0
        }
      **Response Structure** 

      

      - *(dict) --* Offering details
        

        - **Arn** *(string) --* Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
        

        - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        

        - **Duration** *(integer) --* Lease duration, e.g. '12'
        

        - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
        

        - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        

        - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        

        - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
        

        - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
        

        - **Region** *(string) --* AWS region, e.g. 'us-west-2'
        

        - **ResourceSpecification** *(dict) --* Resource configuration details
          

          - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
          

          - **Codec** *(string) --* Codec, e.g. 'AVC'
          

          - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
          

          - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
          

          - **Resolution** *(string) --* Resolution, e.g. 'HD'
          

          - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
          

          - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
          

          - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
      
        

        - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_reservation(**kwargs)

    Get details for a reservation.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeReservation>`_    


    **Request Syntax** 
    ::

      response = client.describe_reservation(
          ReservationId='string'
      )
    :type ReservationId: string
    :param ReservationId: **[REQUIRED]** Unique reservation ID, e.g. '1234567'

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Count': 123,
            'CurrencyCode': 'string',
            'Duration': 123,
            'DurationUnits': 'MONTHS',
            'End': 'string',
            'FixedPrice': 123.0,
            'Name': 'string',
            'OfferingDescription': 'string',
            'OfferingId': 'string',
            'OfferingType': 'NO_UPFRONT',
            'Region': 'string',
            'ReservationId': 'string',
            'ResourceSpecification': {
                'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
            },
            'Start': 'string',
            'State': 'ACTIVE'|'EXPIRED'|'CANCELED'|'DELETED',
            'Tags': {
                'string': 'string'
            },
            'UsagePrice': 123.0
        }
      **Response Structure** 

      

      - *(dict) --* Reservation details
        

        - **Arn** *(string) --* Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
        

        - **Count** *(integer) --* Number of reserved resources
        

        - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
        

        - **Duration** *(integer) --* Lease duration, e.g. '12'
        

        - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
        

        - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
        

        - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
        

        - **Name** *(string) --* User specified reservation name
        

        - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
        

        - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
        

        - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
        

        - **Region** *(string) --* AWS region, e.g. 'us-west-2'
        

        - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'
        

        - **ResourceSpecification** *(dict) --* Resource configuration details
          

          - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
          

          - **Codec** *(string) --* Codec, e.g. 'AVC'
          

          - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
          

          - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
          

          - **Resolution** *(string) --* Resolution, e.g. 'HD'
          

          - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
          

          - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
          

          - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
      
        

        - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
        

        - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'
        

        - **Tags** *(dict) --* A collection of key-value pairs
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: describe_schedule(**kwargs)

    Get a channel schedule

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeSchedule>`_    


    **Request Syntax** 
    ::

      response = client.describe_schedule(
          ChannelId='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** Id of the channel whose schedule is being updated.

    
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'ScheduleActions': [
                {
                    'ActionName': 'string',
                    'ScheduleActionSettings': {
                        'HlsId3SegmentTaggingSettings': {
                            'Tag': 'string'
                        },
                        'HlsTimedMetadataSettings': {
                            'Id3': 'string'
                        },
                        'InputPrepareSettings': {
                            'InputAttachmentNameReference': 'string',
                            'InputClippingSettings': {
                                'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                'StartTimecode': {
                                    'Timecode': 'string'
                                },
                                'StopTimecode': {
                                    'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                    'Timecode': 'string'
                                }
                            },
                            'UrlPath': [
                                'string',
                            ]
                        },
                        'InputSwitchSettings': {
                            'InputAttachmentNameReference': 'string',
                            'InputClippingSettings': {
                                'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                'StartTimecode': {
                                    'Timecode': 'string'
                                },
                                'StopTimecode': {
                                    'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                    'Timecode': 'string'
                                }
                            },
                            'UrlPath': [
                                'string',
                            ]
                        },
                        'MotionGraphicsImageActivateSettings': {
                            'Duration': 123,
                            'PasswordParam': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                        'MotionGraphicsImageDeactivateSettings': {},
                        'PauseStateSettings': {
                            'Pipelines': [
                                {
                                    'PipelineId': 'PIPELINE_0'|'PIPELINE_1'
                                },
                            ]
                        },
                        'Scte35ReturnToNetworkSettings': {
                            'SpliceEventId': 123
                        },
                        'Scte35SpliceInsertSettings': {
                            'Duration': 123,
                            'SpliceEventId': 123
                        },
                        'Scte35TimeSignalSettings': {
                            'Scte35Descriptors': [
                                {
                                    'Scte35DescriptorSettings': {
                                        'SegmentationDescriptorScte35DescriptorSettings': {
                                            'DeliveryRestrictions': {
                                                'ArchiveAllowedFlag': 'ARCHIVE_NOT_ALLOWED'|'ARCHIVE_ALLOWED',
                                                'DeviceRestrictions': 'NONE'|'RESTRICT_GROUP0'|'RESTRICT_GROUP1'|'RESTRICT_GROUP2',
                                                'NoRegionalBlackoutFlag': 'REGIONAL_BLACKOUT'|'NO_REGIONAL_BLACKOUT',
                                                'WebDeliveryAllowedFlag': 'WEB_DELIVERY_NOT_ALLOWED'|'WEB_DELIVERY_ALLOWED'
                                            },
                                            'SegmentNum': 123,
                                            'SegmentationCancelIndicator': 'SEGMENTATION_EVENT_NOT_CANCELED'|'SEGMENTATION_EVENT_CANCELED',
                                            'SegmentationDuration': 123,
                                            'SegmentationEventId': 123,
                                            'SegmentationTypeId': 123,
                                            'SegmentationUpid': 'string',
                                            'SegmentationUpidType': 123,
                                            'SegmentsExpected': 123,
                                            'SubSegmentNum': 123,
                                            'SubSegmentsExpected': 123
                                        }
                                    }
                                },
                            ]
                        },
                        'StaticImageActivateSettings': {
                            'Duration': 123,
                            'FadeIn': 123,
                            'FadeOut': 123,
                            'Height': 123,
                            'Image': {
                                'PasswordParam': 'string',
                                'Uri': 'string',
                                'Username': 'string'
                            },
                            'ImageX': 123,
                            'ImageY': 123,
                            'Layer': 123,
                            'Opacity': 123,
                            'Width': 123
                        },
                        'StaticImageDeactivateSettings': {
                            'FadeOut': 123,
                            'Layer': 123
                        }
                    },
                    'ScheduleActionStartSettings': {
                        'FixedModeScheduleActionStartSettings': {
                            'Time': 'string'
                        },
                        'FollowModeScheduleActionStartSettings': {
                            'FollowPoint': 'END'|'START',
                            'ReferenceActionName': 'string'
                        },
                        'ImmediateModeScheduleActionStartSettings': {}
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* An array of channel schedule actions.
        

        - **NextToken** *(string) --* The next token; for use in pagination.
        

        - **ScheduleActions** *(list) --* The list of actions in the schedule.
          

          - *(dict) --* Contains information on a single schedule action.
            

            - **ActionName** *(string) --* The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
            

            - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.
              

              - **HlsId3SegmentTaggingSettings** *(dict) --* Action to insert HLS ID3 segment tagging
                

                - **Tag** *(string) --* ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
            
              

              - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata
                

                - **Id3** *(string) --* Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
            
              

              - **InputPrepareSettings** *(dict) --* Action to prepare an input for a future immediate input switch
                

                - **InputAttachmentNameReference** *(string) --* The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.
                

                - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                  

                  - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                  

                  - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
                  

                  - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                    

                    - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
              
                

                - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                  

                  - *(string) --* Placeholder documentation for __string
              
            
              

              - **InputSwitchSettings** *(dict) --* Action to switch the input
                

                - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
                

                - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                  

                  - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                  

                  - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
                  

                  - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                    

                    - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
              
                

                - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                  

                  - *(string) --* Placeholder documentation for __string
              
            
              

              - **MotionGraphicsImageActivateSettings** *(dict) --* Action to activate a motion graphics image overlay
                

                - **Duration** *(integer) --* Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
                

                - **PasswordParam** *(string) --* Key used to extract the password from EC2 Parameter store
                

                - **Url** *(string) --* URI of the HTML5 content to be rendered into the live stream.
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **MotionGraphicsImageDeactivateSettings** *(dict) --* Action to deactivate a motion graphics image overlay
            
              

              - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel pipelines
                

                - **Pipelines** *(list) --* Placeholder documentation for __listOfPipelinePauseStateSettings
                  

                  - *(dict) --* Settings for pausing a pipeline.
                    

                    - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
                
              
            
              

              - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network message
                

                - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
            
              

              - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message
                

                - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
                

                - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
            
              

              - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message
                

                - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
                  

                  - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.
                    

                    - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.
                      

                      - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35 Segmentation Descriptor.
                        

                        - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery restriction parameters.
                          

                          - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35 archive_allowed_flag.
                          

                          - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35 device_restrictions parameter.
                          

                          - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35 no_regional_blackout_flag parameter.
                          

                          - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
                      
                        

                        - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
                        

                        - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35 segmentation_event_cancel_indicator.
                        

                        - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
                        

                        - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35 segmentation_event_id. 
                        

                        - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
                        

                        - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
                        

                        - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
                        

                        - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
                        

                        - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
                        

                        - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
                    
                  
                
              
            
              

              - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay
                

                - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
                

                - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
                

                - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
                

                - **Height** *(integer) --* The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
                

                - **Image** *(dict) --* The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                  

                  - **Username** *(string) --* Documentation update needed
              
                

                - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
                

                - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
                

                - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
                

                - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
                

                - **Width** *(integer) --* The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
            
              

              - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay
                

                - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
                

                - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
            
          
            

            - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the channel.
              

              - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start time for an action.
                

                - **Time** *(string) --* Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
            
              

              - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action as relative to another action.
                

                - **FollowPoint** *(string) --* Identifies whether this action starts relative to the start or relative to the end of the reference action.
                

                - **ReferenceActionName** *(string) --* The action name of another action that this one refers to.
            
              

              - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an action that should be applied immediately.
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_channels(**kwargs)

    Produces list of channels that have been created

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListChannels>`_    


    **Request Syntax** 
    ::

      response = client.list_channels(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Channels': [
                {
                    'Arn': 'string',
                    'CdiInputSpecification': {
                        'Resolution': 'SD'|'HD'|'FHD'|'UHD'
                    },
                    'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                    'Destinations': [
                        {
                            'Id': 'string',
                            'MediaPackageSettings': [
                                {
                                    'ChannelId': 'string'
                                },
                            ],
                            'MultiplexSettings': {
                                'MultiplexId': 'string',
                                'ProgramName': 'string'
                            },
                            'Settings': [
                                {
                                    'PasswordParam': 'string',
                                    'StreamName': 'string',
                                    'Url': 'string',
                                    'Username': 'string'
                                },
                            ]
                        },
                    ],
                    'EgressEndpoints': [
                        {
                            'SourceIp': 'string'
                        },
                    ],
                    'Id': 'string',
                    'InputAttachments': [
                        {
                            'AutomaticInputFailoverSettings': {
                                'ErrorClearTimeMsec': 123,
                                'FailoverConditions': [
                                    {
                                        'FailoverConditionSettings': {
                                            'AudioSilenceSettings': {
                                                'AudioSelectorName': 'string',
                                                'AudioSilenceThresholdMsec': 123
                                            },
                                            'InputLossSettings': {
                                                'InputLossThresholdMsec': 123
                                            },
                                            'VideoBlackSettings': {
                                                'BlackDetectThreshold': 123.0,
                                                'VideoBlackThresholdMsec': 123
                                            }
                                        }
                                    },
                                ],
                                'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                                'SecondaryInputId': 'string'
                            },
                            'InputAttachmentName': 'string',
                            'InputId': 'string',
                            'InputSettings': {
                                'AudioSelectors': [
                                    {
                                        'Name': 'string',
                                        'SelectorSettings': {
                                            'AudioHlsRenditionSelection': {
                                                'GroupId': 'string',
                                                'Name': 'string'
                                            },
                                            'AudioLanguageSelection': {
                                                'LanguageCode': 'string',
                                                'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                            },
                                            'AudioPidSelection': {
                                                'Pid': 123
                                            },
                                            'AudioTrackSelection': {
                                                'Tracks': [
                                                    {
                                                        'Track': 123
                                                    },
                                                ]
                                            }
                                        }
                                    },
                                ],
                                'CaptionSelectors': [
                                    {
                                        'LanguageCode': 'string',
                                        'Name': 'string',
                                        'SelectorSettings': {
                                            'AncillarySourceSettings': {
                                                'SourceAncillaryChannelNumber': 123
                                            },
                                            'AribSourceSettings': {},
                                            'DvbSubSourceSettings': {
                                                'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                                'Pid': 123
                                            },
                                            'EmbeddedSourceSettings': {
                                                'Convert608To708': 'DISABLED'|'UPCONVERT',
                                                'Scte20Detection': 'AUTO'|'OFF',
                                                'Source608ChannelNumber': 123,
                                                'Source608TrackNumber': 123
                                            },
                                            'Scte20SourceSettings': {
                                                'Convert608To708': 'DISABLED'|'UPCONVERT',
                                                'Source608ChannelNumber': 123
                                            },
                                            'Scte27SourceSettings': {
                                                'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                                'Pid': 123
                                            },
                                            'TeletextSourceSettings': {
                                                'OutputRectangle': {
                                                    'Height': 123.0,
                                                    'LeftOffset': 123.0,
                                                    'TopOffset': 123.0,
                                                    'Width': 123.0
                                                },
                                                'PageNumber': 'string'
                                            }
                                        }
                                    },
                                ],
                                'DeblockFilter': 'DISABLED'|'ENABLED',
                                'DenoiseFilter': 'DISABLED'|'ENABLED',
                                'FilterStrength': 123,
                                'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                                'NetworkInputSettings': {
                                    'HlsInputSettings': {
                                        'Bandwidth': 123,
                                        'BufferSegments': 123,
                                        'Retries': 123,
                                        'RetryInterval': 123,
                                        'Scte35Source': 'MANIFEST'|'SEGMENTS'
                                    },
                                    'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                                },
                                'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                                'SourceEndBehavior': 'CONTINUE'|'LOOP',
                                'VideoSelector': {
                                    'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                                    'ColorSpaceSettings': {
                                        'Hdr10Settings': {
                                            'MaxCll': 123,
                                            'MaxFall': 123
                                        }
                                    },
                                    'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                                    'SelectorSettings': {
                                        'VideoSelectorPid': {
                                            'Pid': 123
                                        },
                                        'VideoSelectorProgramId': {
                                            'ProgramId': 123
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'InputSpecification': {
                        'Codec': 'MPEG2'|'AVC'|'HEVC',
                        'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                        'Resolution': 'SD'|'HD'|'UHD'
                    },
                    'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
                    'Name': 'string',
                    'PipelinesRunningCount': 123,
                    'RoleArn': 'string',
                    'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
                    'Tags': {
                        'string': 'string'
                    },
                    'Vpc': {
                        'AvailabilityZones': [
                            'string',
                        ],
                        'NetworkInterfaceIds': [
                            'string',
                        ],
                        'SecurityGroupIds': [
                            'string',
                        ],
                        'SubnetIds': [
                            'string',
                        ]
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* An array of channels
        

        - **Channels** *(list) --* Placeholder documentation for __listOfChannelSummary
          

          - *(dict) --* Placeholder documentation for ChannelSummary
            

            - **Arn** *(string) --* The unique arn of the channel.
            

            - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
              

              - **Resolution** *(string) --* Maximum CDI input resolution
          
            

            - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
            

            - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
              

              - *(dict) --* Placeholder documentation for OutputDestination
                

                - **Id** *(string) --* User-specified id. This is used in an output group or an output.
                

                - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
                  

                  - *(dict) --* MediaPackage Output Destination Settings
                    

                    - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
                
              
                

                - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
                  

                  - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
                  

                  - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
              
                

                - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
                  

                  - *(dict) --* Placeholder documentation for OutputDestinationSettings
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                    

                    - **Url** *(string) --* A URL specifying a destination
                    

                    - **Username** *(string) --* username for destination
                
              
            
          
            

            - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
              

              - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
                

                - **SourceIp** *(string) --* Public IP of where a channel's output comes from
            
          
            

            - **Id** *(string) --* The unique id of the channel.
            

            - **InputAttachments** *(list) --* List of input attachments for channel.
              

              - *(dict) --* Placeholder documentation for InputAttachment
                

                - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
                  

                  - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
                  

                  - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                    

                    - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                      

                      - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                        

                        - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                          

                          - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                          

                          - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                      
                        

                        - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                          

                          - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                      
                        

                        - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                          

                          - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                          

                          - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                      
                    
                  
                
                  

                  - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
                  

                  - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
              
                

                - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
                

                - **InputId** *(string) --* The ID of the input
                

                - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
                  

                  - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                    

                    - *(dict) --* Audio Selector
                      

                      - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                      

                      - **SelectorSettings** *(dict) --* The audio selector settings.
                        

                        - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                          

                          - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                          

                          - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                      
                        

                        - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                          

                          - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                          

                          - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                      
                        

                        - **AudioPidSelection** *(dict) --* Audio Pid Selection
                          

                          - **Pid** *(integer) --* Selects a specific PID from within a source.
                      
                        

                        - **AudioTrackSelection** *(dict) --* Audio Track Selection
                          

                          - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                            

                            - *(dict) --* Audio Track
                              

                              - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                          
                        
                      
                    
                  
                
                  

                  - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                    

                    - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                      

                      - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                      

                      - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                      

                      - **SelectorSettings** *(dict) --* Caption selector settings.
                        

                        - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                          

                          - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                      
                        

                        - **AribSourceSettings** *(dict) --* Arib Source Settings
                      
                        

                        - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                          

                          - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                          

                          - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                      
                        

                        - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                          

                          - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                          

                          - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                          

                          - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                          

                          - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                      
                        

                        - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                          

                          - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                          

                          - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                      
                        

                        - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                          

                          - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                          

                          - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                      
                        

                        - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                          

                          - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                            

                            - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                            

                            - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                            

                            - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                            

                            - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                        
                          

                          - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                      
                    
                  
                
                  

                  - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
                  

                  - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
                  

                  - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
                  

                  - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
                  

                  - **NetworkInputSettings** *(dict) --* Input settings.
                    

                    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                      

                      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                      

                      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                      

                      - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                      

                      - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                      

                      - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
                  
                    

                    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
                
                  

                  - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
                  

                  - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
                  

                  - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                    

                    - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                    

                    - **ColorSpaceSettings** *(dict) --* Color space settings
                      

                      - **Hdr10Settings** *(dict) --* Hdr10 Settings
                        

                        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                        

                        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                    
                  
                    

                    - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                    

                    - **SelectorSettings** *(dict) --* The video selector settings.
                      

                      - **VideoSelectorPid** *(dict) --* Video Selector Pid
                        

                        - **Pid** *(integer) --* Selects a specific PID from within a video source.
                    
                      

                      - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                        

                        - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                    
                  
                
              
            
          
            

            - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
              

              - **Codec** *(string) --* Input codec
              

              - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
              

              - **Resolution** *(string) --* Input resolution, categorized coarsely
          
            

            - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
            

            - **Name** *(string) --* The name of the channel. (user-mutable)
            

            - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
            

            - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
            

            - **State** *(string) --* Placeholder documentation for ChannelState
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **Vpc** *(dict) --* Settings for VPC output
              

              - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
                

                - *(string) --* Placeholder documentation for __string
            
          
        
      
        

        - **NextToken** *(string) --* Placeholder documentation for __string
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_input_device_transfers(**kwargs)

    List input devices that are currently being transferred. List input devices that you are transferring from your AWS account or input devices that another AWS account is transferring to you.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputDeviceTransfers>`_    


    **Request Syntax** 
    ::

      response = client.list_input_device_transfers(
          MaxResults=123,
          NextToken='string',
          TransferType='string'
      )
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    :type TransferType: string
    :param TransferType: **[REQUIRED]** Placeholder documentation for __string

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InputDeviceTransfers': [
                {
                    'Id': 'string',
                    'Message': 'string',
                    'TargetCustomerId': 'string',
                    'TransferType': 'OUTGOING'|'INCOMING'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* An array of input devices that are currently being transferred.
        

        - **InputDeviceTransfers** *(list) --* The list of devices that you are transferring or are being transferred to you.
          

          - *(dict) --* Details about the input device that is being transferred.
            

            - **Id** *(string) --* The unique ID of the input device.
            

            - **Message** *(string) --* The optional message that the sender has attached to the transfer.
            

            - **TargetCustomerId** *(string) --* The AWS account ID for the recipient of the input device transfer.
            

            - **TransferType** *(string) --* The type (direction) of the input device transfer.
        
      
        

        - **NextToken** *(string) --* A token to get additional list results.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_input_devices(**kwargs)

    List input devices

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputDevices>`_    


    **Request Syntax** 
    ::

      response = client.list_input_devices(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InputDevices': [
                {
                    'Arn': 'string',
                    'ConnectionState': 'DISCONNECTED'|'CONNECTED',
                    'DeviceSettingsSyncState': 'SYNCED'|'SYNCING',
                    'DeviceUpdateStatus': 'UP_TO_DATE'|'NOT_UP_TO_DATE',
                    'HdDeviceSettings': {
                        'ActiveInput': 'HDMI'|'SDI',
                        'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                        'DeviceState': 'IDLE'|'STREAMING',
                        'Framerate': 123.0,
                        'Height': 123,
                        'MaxBitrate': 123,
                        'ScanType': 'INTERLACED'|'PROGRESSIVE',
                        'Width': 123
                    },
                    'Id': 'string',
                    'MacAddress': 'string',
                    'Name': 'string',
                    'NetworkSettings': {
                        'DnsAddresses': [
                            'string',
                        ],
                        'Gateway': 'string',
                        'IpAddress': 'string',
                        'IpScheme': 'STATIC'|'DHCP',
                        'SubnetMask': 'string'
                    },
                    'SerialNumber': 'string',
                    'Type': 'HD',
                    'UhdDeviceSettings': {
                        'ActiveInput': 'HDMI'|'SDI',
                        'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                        'DeviceState': 'IDLE'|'STREAMING',
                        'Framerate': 123.0,
                        'Height': 123,
                        'MaxBitrate': 123,
                        'ScanType': 'INTERLACED'|'PROGRESSIVE',
                        'Width': 123
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* An array of input devices.
        

        - **InputDevices** *(list) --* The list of input devices.
          

          - *(dict) --* Details of the input device.
            

            - **Arn** *(string) --* The unique ARN of the input device.
            

            - **ConnectionState** *(string) --* The state of the connection between the input device and AWS.
            

            - **DeviceSettingsSyncState** *(string) --* The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
            

            - **DeviceUpdateStatus** *(string) --* The status of software on the input device.
            

            - **HdDeviceSettings** *(dict) --* Settings that describe an input device that is type HD.
              

              - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
              

              - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
              

              - **DeviceState** *(string) --* The state of the input device.
              

              - **Framerate** *(float) --* The frame rate of the video source.
              

              - **Height** *(integer) --* The height of the video source, in pixels.
              

              - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
              

              - **ScanType** *(string) --* The scan type of the video source.
              

              - **Width** *(integer) --* The width of the video source, in pixels.
          
            

            - **Id** *(string) --* The unique ID of the input device.
            

            - **MacAddress** *(string) --* The network MAC address of the input device.
            

            - **Name** *(string) --* A name that you specify for the input device.
            

            - **NetworkSettings** *(dict) --* Network settings for the input device.
              

              - **DnsAddresses** *(list) --* The DNS addresses of the input device.
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **Gateway** *(string) --* The network gateway IP address.
              

              - **IpAddress** *(string) --* The IP address of the input device.
              

              - **IpScheme** *(string) --* Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
              

              - **SubnetMask** *(string) --* The subnet mask of the input device.
          
            

            - **SerialNumber** *(string) --* The unique serial number of the input device.
            

            - **Type** *(string) --* The type of the input device.
            

            - **UhdDeviceSettings** *(dict) --* Settings that describe an input device that is type UHD.
              

              - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
              

              - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
              

              - **DeviceState** *(string) --* The state of the input device.
              

              - **Framerate** *(float) --* The frame rate of the video source.
              

              - **Height** *(integer) --* The height of the video source, in pixels.
              

              - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
              

              - **ScanType** *(string) --* The scan type of the video source.
              

              - **Width** *(integer) --* The width of the video source, in pixels.
          
        
      
        

        - **NextToken** *(string) --* A token to get additional list results.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_input_security_groups(**kwargs)

    Produces a list of Input Security Groups for an account

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputSecurityGroups>`_    


    **Request Syntax** 
    ::

      response = client.list_input_security_groups(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InputSecurityGroups': [
                {
                    'Arn': 'string',
                    'Id': 'string',
                    'Inputs': [
                        'string',
                    ],
                    'State': 'IDLE'|'IN_USE'|'UPDATING'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    },
                    'WhitelistRules': [
                        {
                            'Cidr': 'string'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* An array of Input Security Groups
        

        - **InputSecurityGroups** *(list) --* List of input security groups
          

          - *(dict) --* An Input Security Group
            

            - **Arn** *(string) --* Unique ARN of Input Security Group
            

            - **Id** *(string) --* The Id of the Input Security Group
            

            - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **State** *(string) --* The current state of the Input Security Group.
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **WhitelistRules** *(list) --* Whitelist rules and their sync status
              

              - *(dict) --* Whitelist rule
                

                - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
            
          
        
      
        

        - **NextToken** *(string) --* Placeholder documentation for __string
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_inputs(**kwargs)

    Produces list of inputs that have been created

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputs>`_    


    **Request Syntax** 
    ::

      response = client.list_inputs(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Inputs': [
                {
                    'Arn': 'string',
                    'AttachedChannels': [
                        'string',
                    ],
                    'Destinations': [
                        {
                            'Ip': 'string',
                            'Port': 'string',
                            'Url': 'string',
                            'Vpc': {
                                'AvailabilityZone': 'string',
                                'NetworkInterfaceId': 'string'
                            }
                        },
                    ],
                    'Id': 'string',
                    'InputClass': 'STANDARD'|'SINGLE_PIPELINE',
                    'InputDevices': [
                        {
                            'Id': 'string'
                        },
                    ],
                    'InputPartnerIds': [
                        'string',
                    ],
                    'InputSourceType': 'STATIC'|'DYNAMIC',
                    'MediaConnectFlows': [
                        {
                            'FlowArn': 'string'
                        },
                    ],
                    'Name': 'string',
                    'RoleArn': 'string',
                    'SecurityGroups': [
                        'string',
                    ],
                    'Sources': [
                        {
                            'PasswordParam': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                    ],
                    'State': 'CREATING'|'DETACHED'|'ATTACHED'|'DELETING'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    },
                    'Type': 'UDP_PUSH'|'RTP_PUSH'|'RTMP_PUSH'|'RTMP_PULL'|'URL_PULL'|'MP4_FILE'|'MEDIACONNECT'|'INPUT_DEVICE'|'AWS_CDI'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* An array of inputs
        

        - **Inputs** *(list) --* Placeholder documentation for __listOfInput
          

          - *(dict) --* Placeholder documentation for Input
            

            - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).
            

            - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).
              

              - *(dict) --* The settings for a PUSH type input.
                

                - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input. 
                

                - **Port** *(string) --* The port number for the input.
                

                - **Url** *(string) --* This represents the endpoint that the customer stream will be pushed to. 
                

                - **Vpc** *(dict) --* The properties for a VPC type input destination.
                  

                  - **AvailabilityZone** *(string) --* The availability zone of the Input destination. 
                  

                  - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination in the VPC. 
              
            
          
            

            - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).
            

            - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input. 
            

            - **InputDevices** *(list) --* Settings for the input devices.
              

              - *(dict) --* Settings for an input device.
                

                - **Id** *(string) --* The unique ID for the device.
            
          
            

            - **InputPartnerIds** *(list) --* A list of IDs for all Inputs which are partners of this one.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE inputs. 
            

            - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.
              

              - *(dict) --* The settings for a MediaConnect Flow.
                

                - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.
            
          
            

            - **Name** *(string) --* The user-assigned name (This is a mutable value).
            

            - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
            

            - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to the input.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **Sources** *(list) --* A list of the sources of the input (PULL-type).
              

              - *(dict) --* The settings for a PULL type input.
                

                - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.
                

                - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 
                

                - **Username** *(string) --* The username for the input source.
            
          
            

            - **State** *(string) --* Placeholder documentation for InputState
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **Type** *(string) --* Placeholder documentation for InputType
        
      
        

        - **NextToken** *(string) --* Placeholder documentation for __string
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_multiplex_programs(**kwargs)

    List the programs that currently exist for a specific multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListMultiplexPrograms>`_    


    **Request Syntax** 
    ::

      response = client.list_multiplex_programs(
          MaxResults=123,
          MultiplexId='string',
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: The maximum number of items to return.

    
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex that the programs belong to.

    
    :type NextToken: string
    :param NextToken: The token to retrieve the next page of results.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MultiplexPrograms': [
                {
                    'ChannelId': 'string',
                    'ProgramName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* An array of the programs for one multiplex.
        

        - **MultiplexPrograms** *(list) --* List of multiplex programs.
          

          - *(dict) --* Placeholder documentation for MultiplexProgramSummary
            

            - **ChannelId** *(string) --* The MediaLive Channel associated with the program.
            

            - **ProgramName** *(string) --* The name of the multiplex program.
        
      
        

        - **NextToken** *(string) --* Token for the next ListMultiplexProgram request.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_multiplexes(**kwargs)

    Retrieve a list of the existing multiplexes.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListMultiplexes>`_    


    **Request Syntax** 
    ::

      response = client.list_multiplexes(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: The maximum number of items to return.

    
    :type NextToken: string
    :param NextToken: The token to retrieve the next page of results.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Multiplexes': [
                {
                    'Arn': 'string',
                    'AvailabilityZones': [
                        'string',
                    ],
                    'Id': 'string',
                    'MultiplexSettings': {
                        'TransportStreamBitrate': 123
                    },
                    'Name': 'string',
                    'PipelinesRunningCount': 123,
                    'ProgramCount': 123,
                    'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* An array of multiplexes.
        

        - **Multiplexes** *(list) --* List of multiplexes.
          

          - *(dict) --* Placeholder documentation for MultiplexSummary
            

            - **Arn** *(string) --* The unique arn of the multiplex.
            

            - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **Id** *(string) --* The unique id of the multiplex.
            

            - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
              

              - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
          
            

            - **Name** *(string) --* The name of the multiplex.
            

            - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
            

            - **ProgramCount** *(integer) --* The number of programs in the multiplex.
            

            - **State** *(string) --* The current state of the multiplex.
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
        
      
        

        - **NextToken** *(string) --* Token for the next ListMultiplexes request.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_offerings(**kwargs)

    List offerings available for purchase.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListOfferings>`_    


    **Request Syntax** 
    ::

      response = client.list_offerings(
          ChannelClass='string',
          ChannelConfiguration='string',
          Codec='string',
          Duration='string',
          MaxResults=123,
          MaximumBitrate='string',
          MaximumFramerate='string',
          NextToken='string',
          Resolution='string',
          ResourceType='string',
          SpecialFeature='string',
          VideoQuality='string'
      )
    :type ChannelClass: string
    :param ChannelClass: Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE' 

    
    :type ChannelConfiguration: string
    :param ChannelConfiguration: Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID) 

    
    :type Codec: string
    :param Codec: Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'

    
    :type Duration: string
    :param Duration: Filter by offering duration, e.g. '12'

    
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type MaximumBitrate: string
    :param MaximumBitrate: Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS' 

    
    :type MaximumFramerate: string
    :param MaximumFramerate: Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    :type Resolution: string
    :param Resolution: Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'

    
    :type ResourceType: string
    :param ResourceType: Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'

    
    :type SpecialFeature: string
    :param SpecialFeature: Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION' 

    
    :type VideoQuality: string
    :param VideoQuality: Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM' 

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Offerings': [
                {
                    'Arn': 'string',
                    'CurrencyCode': 'string',
                    'Duration': 123,
                    'DurationUnits': 'MONTHS',
                    'FixedPrice': 123.0,
                    'OfferingDescription': 'string',
                    'OfferingId': 'string',
                    'OfferingType': 'NO_UPFRONT',
                    'Region': 'string',
                    'ResourceSpecification': {
                        'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                        'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                        'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                        'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                        'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                        'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                        'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                        'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
                    },
                    'UsagePrice': 123.0
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* List of offerings
        

        - **NextToken** *(string) --* Token to retrieve the next page of results
        

        - **Offerings** *(list) --* List of offerings
          

          - *(dict) --* Reserved resources available for purchase
            

            - **Arn** *(string) --* Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
            

            - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
            

            - **Duration** *(integer) --* Lease duration, e.g. '12'
            

            - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
            

            - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
            

            - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
            

            - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
            

            - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
            

            - **Region** *(string) --* AWS region, e.g. 'us-west-2'
            

            - **ResourceSpecification** *(dict) --* Resource configuration details
              

              - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
              

              - **Codec** *(string) --* Codec, e.g. 'AVC'
              

              - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
              

              - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
              

              - **Resolution** *(string) --* Resolution, e.g. 'HD'
              

              - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
              

              - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
              

              - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
          
            

            - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_reservations(**kwargs)

    List purchased reservations.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListReservations>`_    


    **Request Syntax** 
    ::

      response = client.list_reservations(
          ChannelClass='string',
          Codec='string',
          MaxResults=123,
          MaximumBitrate='string',
          MaximumFramerate='string',
          NextToken='string',
          Resolution='string',
          ResourceType='string',
          SpecialFeature='string',
          VideoQuality='string'
      )
    :type ChannelClass: string
    :param ChannelClass: Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE' 

    
    :type Codec: string
    :param Codec: Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'

    
    :type MaxResults: integer
    :param MaxResults: Placeholder documentation for MaxResults

    
    :type MaximumBitrate: string
    :param MaximumBitrate: Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS' 

    
    :type MaximumFramerate: string
    :param MaximumFramerate: Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'

    
    :type NextToken: string
    :param NextToken: Placeholder documentation for __string

    
    :type Resolution: string
    :param Resolution: Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'

    
    :type ResourceType: string
    :param ResourceType: Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'

    
    :type SpecialFeature: string
    :param SpecialFeature: Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION' 

    
    :type VideoQuality: string
    :param VideoQuality: Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM' 

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Reservations': [
                {
                    'Arn': 'string',
                    'Count': 123,
                    'CurrencyCode': 'string',
                    'Duration': 123,
                    'DurationUnits': 'MONTHS',
                    'End': 'string',
                    'FixedPrice': 123.0,
                    'Name': 'string',
                    'OfferingDescription': 'string',
                    'OfferingId': 'string',
                    'OfferingType': 'NO_UPFRONT',
                    'Region': 'string',
                    'ReservationId': 'string',
                    'ResourceSpecification': {
                        'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                        'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                        'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                        'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                        'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                        'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                        'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                        'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
                    },
                    'Start': 'string',
                    'State': 'ACTIVE'|'EXPIRED'|'CANCELED'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    },
                    'UsagePrice': 123.0
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* List of reservations
        

        - **NextToken** *(string) --* Token to retrieve the next page of results
        

        - **Reservations** *(list) --* List of reservations
          

          - *(dict) --* Reserved resources available to use
            

            - **Arn** *(string) --* Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
            

            - **Count** *(integer) --* Number of reserved resources
            

            - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
            

            - **Duration** *(integer) --* Lease duration, e.g. '12'
            

            - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
            

            - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
            

            - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
            

            - **Name** *(string) --* User specified reservation name
            

            - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
            

            - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
            

            - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
            

            - **Region** *(string) --* AWS region, e.g. 'us-west-2'
            

            - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'
            

            - **ResourceSpecification** *(dict) --* Resource configuration details
              

              - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
              

              - **Codec** *(string) --* Codec, e.g. 'AVC'
              

              - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
              

              - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
              

              - **Resolution** *(string) --* Resolution, e.g. 'HD'
              

              - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
              

              - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
              

              - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
          
            

            - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
            

            - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'
            

            - **Tags** *(dict) --* A collection of key-value pairs
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    Produces list of tags that have been created for a resource

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** Placeholder documentation for __string

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* An array of tags
        

        - **Tags** *(dict) --* Placeholder documentation for Tags
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    

  .. py:method:: purchase_offering(**kwargs)

    Purchase an offering and create a reservation.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/PurchaseOffering>`_    


    **Request Syntax** 
    ::

      response = client.purchase_offering(
          Count=123,
          Name='string',
          OfferingId='string',
          RequestId='string',
          Start='string',
          Tags={
              'string': 'string'
          }
      )
    :type Count: integer
    :param Count: **[REQUIRED]** Number of resources

    
    :type Name: string
    :param Name: Name for the new reservation

    
    :type OfferingId: string
    :param OfferingId: **[REQUIRED]** Offering to purchase, e.g. '87654321'

    
    :type RequestId: string
    :param RequestId: Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.This field is autopopulated if not provided.

    
    :type Start: string
    :param Start: Requested reservation start time (UTC) in ISO-8601 format. The specified time must be between the first day of the current month and one year from now. If no value is given, the default is now.

    
    :type Tags: dict
    :param Tags: A collection of key-value pairs

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Reservation': {
                'Arn': 'string',
                'Count': 123,
                'CurrencyCode': 'string',
                'Duration': 123,
                'DurationUnits': 'MONTHS',
                'End': 'string',
                'FixedPrice': 123.0,
                'Name': 'string',
                'OfferingDescription': 'string',
                'OfferingId': 'string',
                'OfferingType': 'NO_UPFRONT',
                'Region': 'string',
                'ReservationId': 'string',
                'ResourceSpecification': {
                    'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                    'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                    'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                    'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                    'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                    'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                    'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                    'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
                },
                'Start': 'string',
                'State': 'ACTIVE'|'EXPIRED'|'CANCELED'|'DELETED',
                'Tags': {
                    'string': 'string'
                },
                'UsagePrice': 123.0
            }
        }
      **Response Structure** 

      

      - *(dict) --* Purchased reservation
        

        - **Reservation** *(dict) --* Reserved resources available to use
          

          - **Arn** *(string) --* Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
          

          - **Count** *(integer) --* Number of reserved resources
          

          - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
          

          - **Duration** *(integer) --* Lease duration, e.g. '12'
          

          - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
          

          - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
          

          - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
          

          - **Name** *(string) --* User specified reservation name
          

          - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
          

          - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
          

          - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
          

          - **Region** *(string) --* AWS region, e.g. 'us-west-2'
          

          - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'
          

          - **ResourceSpecification** *(dict) --* Resource configuration details
            

            - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
            

            - **Codec** *(string) --* Codec, e.g. 'AVC'
            

            - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
            

            - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
            

            - **Resolution** *(string) --* Resolution, e.g. 'HD'
            

            - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
            

            - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
            

            - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
        
          

          - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
          

          - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'
          

          - **Tags** *(dict) --* A collection of key-value pairs
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: reject_input_device_transfer(**kwargs)

    Reject the transfer of the specified input device to your AWS account.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/RejectInputDeviceTransfer>`_    


    **Request Syntax** 
    ::

      response = client.reject_input_device_transfer(
          InputDeviceId='string'
      )
    :type InputDeviceId: string
    :param InputDeviceId: **[REQUIRED]** The unique ID of the input device to reject. For example, hd-123456789abcdef.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* Your reject request has succeeded.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: start_channel(**kwargs)

    Starts an existing channel

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/StartChannel>`_    


    **Request Syntax** 
    ::

      response = client.start_channel(
          ChannelId='string'
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** A request to start a channel

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CdiInputSpecification': {
                'Resolution': 'SD'|'HD'|'FHD'|'UHD'
            },
            'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
            'Destinations': [
                {
                    'Id': 'string',
                    'MediaPackageSettings': [
                        {
                            'ChannelId': 'string'
                        },
                    ],
                    'MultiplexSettings': {
                        'MultiplexId': 'string',
                        'ProgramName': 'string'
                    },
                    'Settings': [
                        {
                            'PasswordParam': 'string',
                            'StreamName': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                    ]
                },
            ],
            'EgressEndpoints': [
                {
                    'SourceIp': 'string'
                },
            ],
            'EncoderSettings': {
                'AudioDescriptions': [
                    {
                        'AudioNormalizationSettings': {
                            'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                            'AlgorithmControl': 'CORRECT_AUDIO',
                            'TargetLkfs': 123.0
                        },
                        'AudioSelectorName': 'string',
                        'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                        'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'CodecSettings': {
                            'AacSettings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                                'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                                'Profile': 'HEV1'|'HEV2'|'LC',
                                'RateControlMode': 'CBR'|'VBR',
                                'RawFormat': 'LATM_LOAS'|'NONE',
                                'SampleRate': 123.0,
                                'Spec': 'MPEG2'|'MPEG4',
                                'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                            },
                            'Ac3Settings': {
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                                'Dialnorm': 123,
                                'DrcProfile': 'FILM_STANDARD'|'NONE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                            },
                            'Eac3Settings': {
                                'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                                'DcFilter': 'DISABLED'|'ENABLED',
                                'Dialnorm': 123,
                                'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'LfeControl': 'LFE'|'NO_LFE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'LoRoCenterMixLevel': 123.0,
                                'LoRoSurroundMixLevel': 123.0,
                                'LtRtCenterMixLevel': 123.0,
                                'LtRtSurroundMixLevel': 123.0,
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                                'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                                'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                                'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                                'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                                'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                            },
                            'Mp2Settings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                                'SampleRate': 123.0
                            },
                            'PassThroughSettings': {},
                            'WavSettings': {
                                'BitDepth': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                                'SampleRate': 123.0
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'Name': 'string',
                        'RemixSettings': {
                            'ChannelMappings': [
                                {
                                    'InputChannelLevels': [
                                        {
                                            'Gain': 123,
                                            'InputChannel': 123
                                        },
                                    ],
                                    'OutputChannel': 123
                                },
                            ],
                            'ChannelsIn': 123,
                            'ChannelsOut': 123
                        },
                        'StreamName': 'string'
                    },
                ],
                'AvailBlanking': {
                    'AvailBlankingImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'State': 'DISABLED'|'ENABLED'
                },
                'AvailConfiguration': {
                    'AvailSettings': {
                        'Scte35SpliceInsert': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        },
                        'Scte35TimeSignalApos': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        }
                    }
                },
                'BlackoutSlate': {
                    'BlackoutSlateImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                    'NetworkEndBlackoutImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkId': 'string',
                    'State': 'DISABLED'|'ENABLED'
                },
                'CaptionDescriptions': [
                    {
                        'CaptionSelectorName': 'string',
                        'DestinationSettings': {
                            'AribDestinationSettings': {},
                            'BurnInDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'DvbSubDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'EbuTtDDestinationSettings': {
                                'CopyrightHolder': 'string',
                                'FillLineGap': 'DISABLED'|'ENABLED',
                                'FontFamily': 'string',
                                'StyleControl': 'EXCLUDE'|'INCLUDE'
                            },
                            'EmbeddedDestinationSettings': {},
                            'EmbeddedPlusScte20DestinationSettings': {},
                            'RtmpCaptionInfoDestinationSettings': {},
                            'Scte20PlusEmbeddedDestinationSettings': {},
                            'Scte27DestinationSettings': {},
                            'SmpteTtDestinationSettings': {},
                            'TeletextDestinationSettings': {},
                            'TtmlDestinationSettings': {
                                'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                            },
                            'WebvttDestinationSettings': {
                                'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageDescription': 'string',
                        'Name': 'string'
                    },
                ],
                'FeatureActivations': {
                    'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
                },
                'GlobalConfiguration': {
                    'InitialAudioGain': 123,
                    'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                    'InputLossBehavior': {
                        'BlackFrameMsec': 123,
                        'InputLossImageColor': 'string',
                        'InputLossImageSlate': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'InputLossImageType': 'COLOR'|'SLATE',
                        'RepeatFrameMsec': 123
                    },
                    'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                    'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                    'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
                },
                'MotionGraphicsConfiguration': {
                    'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                    'MotionGraphicsSettings': {
                        'HtmlMotionGraphicsSettings': {}
                    }
                },
                'NielsenConfiguration': {
                    'DistributorId': 'string',
                    'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
                },
                'OutputGroups': [
                    {
                        'Name': 'string',
                        'OutputGroupSettings': {
                            'ArchiveGroupSettings': {
                                'ArchiveCdnSettings': {
                                    'ArchiveS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                },
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'RolloverInterval': 123
                            },
                            'FrameCaptureGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'FrameCaptureCdnSettings': {
                                    'FrameCaptureS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                }
                            },
                            'HlsGroupSettings': {
                                'AdMarkers': [
                                    'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                                ],
                                'BaseUrlContent': 'string',
                                'BaseUrlContent1': 'string',
                                'BaseUrlManifest': 'string',
                                'BaseUrlManifest1': 'string',
                                'CaptionLanguageMappings': [
                                    {
                                        'CaptionChannel': 123,
                                        'LanguageCode': 'string',
                                        'LanguageDescription': 'string'
                                    },
                                ],
                                'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                                'ClientCache': 'DISABLED'|'ENABLED',
                                'CodecSpecification': 'RFC_4281'|'RFC_6381',
                                'ConstantIv': 'string',
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                                'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                                'EncryptionType': 'AES128'|'SAMPLE_AES',
                                'HlsCdnSettings': {
                                    'HlsAkamaiSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123,
                                        'Salt': 'string',
                                        'Token': 'string'
                                    },
                                    'HlsBasicPutSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsMediaStoreSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'MediaStoreStorageClass': 'TEMPORAL',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    },
                                    'HlsWebdavSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    }
                                },
                                'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                                'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                                'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                                'IndexNSegments': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'IvInManifest': 'EXCLUDE'|'INCLUDE',
                                'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                                'KeepSegments': 123,
                                'KeyFormat': 'string',
                                'KeyFormatVersions': 'string',
                                'KeyProviderSettings': {
                                    'StaticKeySettings': {
                                        'KeyProviderServer': {
                                            'PasswordParam': 'string',
                                            'Uri': 'string',
                                            'Username': 'string'
                                        },
                                        'StaticKeyValue': 'string'
                                    }
                                },
                                'ManifestCompression': 'GZIP'|'NONE',
                                'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                                'MinSegmentLength': 123,
                                'Mode': 'LIVE'|'VOD',
                                'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                                'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                                'ProgramDateTimePeriod': 123,
                                'RedundantManifest': 'DISABLED'|'ENABLED',
                                'SegmentLength': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SegmentsPerSubdirectory': 123,
                                'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123,
                                'TimestampDeltaMilliseconds': 123,
                                'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                            },
                            'MediaPackageGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                }
                            },
                            'MsSmoothGroupSettings': {
                                'AcquisitionPointId': 'string',
                                'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                                'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                'ConnectionRetryInterval': 123,
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'EventId': 'string',
                                'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                                'EventStopBehavior': 'NONE'|'SEND_EOS',
                                'FilecacheDuration': 123,
                                'FragmentLength': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'NumRetries': 123,
                                'RestartDelay': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SendDelayMs': 123,
                                'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                                'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                                'TimestampOffset': 'string',
                                'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                            },
                            'MultiplexGroupSettings': {},
                            'RtmpGroupSettings': {
                                'AdMarkers': [
                                    'ON_CUE_POINT_SCTE35',
                                ],
                                'AuthenticationScheme': 'AKAMAI'|'COMMON',
                                'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                                'CacheLength': 123,
                                'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'RestartDelay': 123
                            },
                            'UdpGroupSettings': {
                                'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123
                            }
                        },
                        'Outputs': [
                            {
                                'AudioDescriptionNames': [
                                    'string',
                                ],
                                'CaptionDescriptionNames': [
                                    'string',
                                ],
                                'OutputName': 'string',
                                'OutputSettings': {
                                    'ArchiveOutputSettings': {
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            },
                                            'RawSettings': {}
                                        },
                                        'Extension': 'string',
                                        'NameModifier': 'string'
                                    },
                                    'FrameCaptureOutputSettings': {
                                        'NameModifier': 'string'
                                    },
                                    'HlsOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'HlsSettings': {
                                            'AudioOnlyHlsSettings': {
                                                'AudioGroupId': 'string',
                                                'AudioOnlyImage': {
                                                    'PasswordParam': 'string',
                                                    'Uri': 'string',
                                                    'Username': 'string'
                                                },
                                                'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                                'SegmentType': 'AAC'|'FMP4'
                                            },
                                            'Fmp4HlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                            },
                                            'FrameCaptureHlsSettings': {},
                                            'StandardHlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'M3u8Settings': {
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'EcmPid': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                }
                                            }
                                        },
                                        'NameModifier': 'string',
                                        'SegmentModifier': 'string'
                                    },
                                    'MediaPackageOutputSettings': {},
                                    'MsSmoothOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'NameModifier': 'string'
                                    },
                                    'MultiplexOutputSettings': {
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        }
                                    },
                                    'RtmpOutputSettings': {
                                        'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                        'ConnectionRetryInterval': 123,
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'NumRetries': 123
                                    },
                                    'UdpOutputSettings': {
                                        'BufferMsec': 123,
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            }
                                        },
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'FecOutputSettings': {
                                            'ColumnDepth': 123,
                                            'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                            'RowLength': 123
                                        }
                                    }
                                },
                                'VideoDescriptionName': 'string'
                            },
                        ]
                    },
                ],
                'TimecodeConfig': {
                    'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                    'SyncThreshold': 123
                },
                'VideoDescriptions': [
                    {
                        'CodecSettings': {
                            'FrameCaptureSettings': {
                                'CaptureInterval': 123,
                                'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                            },
                            'H264Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'Bitrate': 123,
                                'BufFillPct': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'EntropyEncoding': 'CABAC'|'CAVLC',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'ForceFieldPictures': 'DISABLED'|'ENABLED',
                                'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopBReference': 'DISABLED'|'ENABLED',
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'NumRefFrames': 123,
                                'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                                'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Softness': 123,
                                'SpatialAq': 'DISABLED'|'ENABLED',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'Syntax': 'DEFAULT'|'RP2027',
                                'TemporalAq': 'DISABLED'|'ENABLED',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'H265Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'AlternativeTransferFunction': 'INSERT'|'OMIT',
                                'Bitrate': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Hdr10Settings': {
                                        'MaxCll': 123,
                                        'MaxFall': 123
                                    },
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'MAIN'|'MAIN_10BIT',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Tier': 'HIGH'|'MAIN',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'Mpeg2Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpace': 'AUTO'|'PASSTHROUGH',
                                'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                            }
                        },
                        'Height': 123,
                        'Name': 'string',
                        'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                        'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                        'Sharpness': 123,
                        'Width': 123
                    },
                ]
            },
            'Id': 'string',
            'InputAttachments': [
                {
                    'AutomaticInputFailoverSettings': {
                        'ErrorClearTimeMsec': 123,
                        'FailoverConditions': [
                            {
                                'FailoverConditionSettings': {
                                    'AudioSilenceSettings': {
                                        'AudioSelectorName': 'string',
                                        'AudioSilenceThresholdMsec': 123
                                    },
                                    'InputLossSettings': {
                                        'InputLossThresholdMsec': 123
                                    },
                                    'VideoBlackSettings': {
                                        'BlackDetectThreshold': 123.0,
                                        'VideoBlackThresholdMsec': 123
                                    }
                                }
                            },
                        ],
                        'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                        'SecondaryInputId': 'string'
                    },
                    'InputAttachmentName': 'string',
                    'InputId': 'string',
                    'InputSettings': {
                        'AudioSelectors': [
                            {
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AudioHlsRenditionSelection': {
                                        'GroupId': 'string',
                                        'Name': 'string'
                                    },
                                    'AudioLanguageSelection': {
                                        'LanguageCode': 'string',
                                        'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                    },
                                    'AudioPidSelection': {
                                        'Pid': 123
                                    },
                                    'AudioTrackSelection': {
                                        'Tracks': [
                                            {
                                                'Track': 123
                                            },
                                        ]
                                    }
                                }
                            },
                        ],
                        'CaptionSelectors': [
                            {
                                'LanguageCode': 'string',
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AncillarySourceSettings': {
                                        'SourceAncillaryChannelNumber': 123
                                    },
                                    'AribSourceSettings': {},
                                    'DvbSubSourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'EmbeddedSourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Scte20Detection': 'AUTO'|'OFF',
                                        'Source608ChannelNumber': 123,
                                        'Source608TrackNumber': 123
                                    },
                                    'Scte20SourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Source608ChannelNumber': 123
                                    },
                                    'Scte27SourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'TeletextSourceSettings': {
                                        'OutputRectangle': {
                                            'Height': 123.0,
                                            'LeftOffset': 123.0,
                                            'TopOffset': 123.0,
                                            'Width': 123.0
                                        },
                                        'PageNumber': 'string'
                                    }
                                }
                            },
                        ],
                        'DeblockFilter': 'DISABLED'|'ENABLED',
                        'DenoiseFilter': 'DISABLED'|'ENABLED',
                        'FilterStrength': 123,
                        'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                        'NetworkInputSettings': {
                            'HlsInputSettings': {
                                'Bandwidth': 123,
                                'BufferSegments': 123,
                                'Retries': 123,
                                'RetryInterval': 123,
                                'Scte35Source': 'MANIFEST'|'SEGMENTS'
                            },
                            'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                        },
                        'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                        'SourceEndBehavior': 'CONTINUE'|'LOOP',
                        'VideoSelector': {
                            'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                            'ColorSpaceSettings': {
                                'Hdr10Settings': {
                                    'MaxCll': 123,
                                    'MaxFall': 123
                                }
                            },
                            'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                            'SelectorSettings': {
                                'VideoSelectorPid': {
                                    'Pid': 123
                                },
                                'VideoSelectorProgramId': {
                                    'ProgramId': 123
                                }
                            }
                        }
                    }
                },
            ],
            'InputSpecification': {
                'Codec': 'MPEG2'|'AVC'|'HEVC',
                'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                'Resolution': 'SD'|'HD'|'UHD'
            },
            'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
            'Name': 'string',
            'PipelineDetails': [
                {
                    'ActiveInputAttachmentName': 'string',
                    'ActiveInputSwitchActionName': 'string',
                    'ActiveMotionGraphicsActionName': 'string',
                    'ActiveMotionGraphicsUri': 'string',
                    'PipelineId': 'string'
                },
            ],
            'PipelinesRunningCount': 123,
            'RoleArn': 'string',
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
            'Tags': {
                'string': 'string'
            },
            'Vpc': {
                'AvailabilityZones': [
                    'string',
                ],
                'NetworkInterfaceIds': [
                    'string',
                ],
                'SecurityGroupIds': [
                    'string',
                ],
                'SubnetIds': [
                    'string',
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* Successfully initiated start of the channel.
        

        - **Arn** *(string) --* The unique arn of the channel.
        

        - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
          

          - **Resolution** *(string) --* Maximum CDI input resolution
      
        

        - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        

        - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
          

          - *(dict) --* Placeholder documentation for OutputDestination
            

            - **Id** *(string) --* User-specified id. This is used in an output group or an output.
            

            - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
              

              - *(dict) --* MediaPackage Output Destination Settings
                

                - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
            
          
            

            - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
              

              - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
              

              - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
          
            

            - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
              

              - *(dict) --* Placeholder documentation for OutputDestinationSettings
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                

                - **Url** *(string) --* A URL specifying a destination
                

                - **Username** *(string) --* username for destination
            
          
        
      
        

        - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
          

          - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
            

            - **SourceIp** *(string) --* Public IP of where a channel's output comes from
        
      
        

        - **EncoderSettings** *(dict) --* Encoder Settings
          

          - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription
            

            - *(dict) --* Audio Description
              

              - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.
                

                - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
                

                - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
                

                - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
            
              

              - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source for this AudioDescription.
              

              - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
              

              - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
              

              - **CodecSettings** *(dict) --* Audio codec settings.
                

                - **AacSettings** *(dict) --* Aac Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.
                  

                  - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
                  

                  - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
                  

                  - **Profile** *(string) --* AAC Profile.
                  

                  - **RateControlMode** *(string) --* Rate Control Mode.
                  

                  - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.
                  

                  - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
                  

                  - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.
              
                

                - **Ac3Settings** *(dict) --* Ac3 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
                  

                  - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
                  

                  - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
              
                

                - **Eac3Settings** *(dict) --* Eac3 Settings
                  

                  - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.
                  

                  - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
                  

                  - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.
                  

                  - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
                  

                  - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
                  

                  - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.
                  

                  - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.
                  

                  - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                  

                  - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
                  

                  - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
                  

                  - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.
                  

                  - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
                  

                  - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
              
                

                - **Mp2Settings** *(dict) --* Mp2 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second.
                  

                  - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
                

                - **PassThroughSettings** *(dict) --* Pass Through Settings
              
                

                - **WavSettings** *(dict) --* Wav Settings
                  

                  - **BitDepth** *(float) --* Bits per sample.
                  

                  - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
            
              

              - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
              

              - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
              

              - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
              

              - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.
                

                - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with appropriate gain adjustments.
                  

                  - *(dict) --* Audio Channel Mapping
                    

                    - **InputChannelLevels** *(list) --* Indices and gain values for each input channel that should be remixed into this output channel.
                      

                      - *(dict) --* Input Channel Level
                        

                        - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
                        

                        - **InputChannel** *(integer) --* The index of the input channel used as a source.
                    
                  
                    

                    - **OutputChannel** *(integer) --* The index of the output channel being produced.
                
              
                

                - **ChannelsIn** *(integer) --* Number of input channels to be used.
                

                - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
            
              

              - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
          
        
          

          - **AvailBlanking** *(dict) --* Settings for ad avail blanking.
            

            - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
        
          

          - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.
            

            - **AvailSettings** *(dict) --* Ad avail settings.
              

              - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
              

              - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
          
        
          

          - **BlackoutSlate** *(dict) --* Settings for blackout slate.
            

            - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
            

            - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
        
          

          - **CaptionDescriptions** *(list) --* Settings for caption decriptions
            

            - *(dict) --* Caption Description
              

              - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
              

              - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.
                

                - **AribDestinationSettings** *(dict) --* Arib Destination Settings
              
                

                - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
              
                

                - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
              
                

                - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings
                  

                  - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
                  

                  - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
                  

                  - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
                  

                  - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
              
                

                - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings
              
                

                - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings
              
                

                - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings
              
                

                - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings
              
                

                - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings
              
                

                - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings
              
                

                - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings
              
                

                - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings
                  

                  - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
              
                

                - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings
                  

                  - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
              
            
              

              - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
              

              - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).
              

              - **Name** *(string) --* Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
          
        
          

          - **FeatureActivations** *(dict) --* Feature Activations
            

            - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
        
          

          - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.
            

            - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.
            

            - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
            

            - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.
              

              - **BlackFrameMsec** *(integer) --* Documentation update needed
              

              - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
              

              - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
              

              - **RepeatFrameMsec** *(integer) --* Documentation update needed
          
            

            - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
            

            - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
            

            - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
        
          

          - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.
            

            - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion
            

            - **MotionGraphicsSettings** *(dict) --* Motion Graphics Settings
              

              - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings
            
          
        
          

          - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.
            

            - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.
            

            - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging
        
          

          - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup
            

            - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
              

              - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
              

              - **OutputGroupSettings** *(dict) --* Settings associated with the output group.
                

                - **ArchiveGroupSettings** *(dict) --* Archive Group Settings
                  

                  - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **ArchiveS3Settings** *(dict) --* Archive S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
                  

                  - **Destination** *(dict) --* A directory and base filename where archive files should be written.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.
              
                

                - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings
                  

                  - **Destination** *(dict) --* The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
              
                

                - **HlsGroupSettings** *(dict) --* Hls Group Settings
                  

                  - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
                    

                    - *(string) --* Hls Ad Markers
                
                  

                  - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
                  

                  - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
                  

                  - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
                    

                    - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
                      

                      - **CaptionChannel** *(integer) --* The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
                      

                      - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
                      

                      - **LanguageDescription** *(string) --* Textual description of language
                  
                
                  

                  - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
                  

                  - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
                  

                  - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
                  

                  - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
                  

                  - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **DirectoryStructure** *(string) --* Place segments in subdirectories.
                  

                  - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
                  

                  - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
                  

                  - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                      

                      - **Salt** *(string) --* Salt for authenticated Akamai.
                      

                      - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.
                  
                    

                    - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsS3Settings** *(dict) --* Hls S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                    

                    - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                
                  

                  - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging
                  

                  - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
                  

                  - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
                  

                  - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
                  

                  - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
                  

                  - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
                  

                  - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
                  

                  - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).
                  

                  - **KeyProviderSettings** *(dict) --* The key provider settings.
                    

                    - **StaticKeySettings** *(dict) --* Static Key Settings
                      

                      - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.
                        

                        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                        

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                        

                        - **Username** *(string) --* Documentation update needed
                    
                      

                      - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal string.
                  
                
                  

                  - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.
                  

                  - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.
                  

                  - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
                  

                  - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
                  

                  - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
                  

                  - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
                  

                  - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
                  

                  - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
                  

                  - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
                  

                  - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                  

                  - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.
                  

                  - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
              
                

                - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings
                  

                  - **Destination** *(dict) --* MediaPackage channel destination.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
              
                

                - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings
                  

                  - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
                  

                  - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
                  

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
                  

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
                  

                  - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
                  

                  - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
                  

                  - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event
                  

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                  

                  - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **NumRetries** *(integer) --* Number of retry attempts.
                  

                  - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.
                  

                  - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
                  

                  - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.
                  

                  - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
                  

                  - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
              
                

                - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings
              
                

                - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings
                  

                  - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
                    

                    - *(string) --* Rtmp Ad Markers
                
                  

                  - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN
                  

                  - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
                  

                  - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.
                  

                  - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
                  

                  - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
                  

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
              
                

                - **UdpGroupSettings** *(dict) --* Udp Group Settings
                  

                  - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
              
            
              

              - **Outputs** *(list) --* Placeholder documentation for __listOfOutput
                

                - *(dict) --* Output settings. There can be multiple outputs within a group.
                  

                  - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **OutputName** *(string) --* The name used to identify an output.
                  

                  - **OutputSettings** *(dict) --* Output type-specific settings.
                    

                    - **ArchiveOutputSettings** *(dict) --* Archive Output Settings
                      

                      - **ContainerSettings** *(dict) --* Settings specific to the container type of the file.
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                        

                        - **RawSettings** *(dict) --* Raw Settings
                      
                    
                      

                      - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings
                      

                      - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.
                  
                    

                    - **HlsOutputSettings** *(dict) --* Hls Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These settings are different for audio-only outputs.
                        

                        - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings
                          

                          - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.
                          

                          - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
                            

                            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                            

                            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                            

                            - **Username** *(string) --* Documentation update needed
                        
                          

                          - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
                          

                          - **SegmentType** *(string) --* Specifies the segment type.
                      
                        

                        - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                      
                        

                        - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings
                      
                        

                        - **StandardHlsSettings** *(dict) --* Standard Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
                            

                            - **EcmPid** *(string) --* This parameter is unused and deprecated.
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                        
                      
                    
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
                      

                      - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.
                  
                    

                    - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings
                  
                    

                    - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings
                      

                      - **Destination** *(dict) --* Destination is a Multiplex.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                  
                    

                    - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings
                      

                      - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
                      

                      - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **NumRetries** *(integer) --* Number of retry attempts.
                  
                    

                    - **UdpOutputSettings** *(dict) --* Udp Output Settings
                      

                      - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
                      

                      - **ContainerSettings** *(dict) --* Udp Container Settings
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                    
                      

                      - **Destination** *(dict) --* Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.
                        

                        - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
                        

                        - **IncludeFec** *(string) --* Enables column only or column and row based FEC
                        

                        - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
                    
                  
                
                  

                  - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.
              
            
          
        
          

          - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode information from inputs.
            

            - **Source** *(string) --* Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
            

            - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
        
          

          - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription
            

            - *(dict) --* Video settings for this stream.
              

              - **CodecSettings** *(dict) --* Video codec settings.
                

                - **FrameCaptureSettings** *(dict) --* Frame Capture Settings
                  

                  - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
                  

                  - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.
              
                

                - **H264Settings** *(dict) --* H264 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
                  

                  - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
                  

                  - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopBReference** *(string) --* Documentation update needed
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.264 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
                  

                  - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.264 Profile.
                  

                  - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
                  

                  - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
                  

                  - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
                  

                  - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.
                  

                  - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **H265Settings** *(dict) --* H265 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Hdr10Settings** *(dict) --* Hdr10 Settings
                      

                      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                      

                      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.265 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.265 Profile.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Tier** *(string) --* H.265 Tier.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **Mpeg2Settings** *(dict) --* Mpeg2 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
                  

                  - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
                  

                  - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
                  

                  - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.
                  

                  - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
                  

                  - **FramerateDenominator** *(integer) --* description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **FramerateNumerator** *(integer) --* The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.
                  

                  - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
                  

                  - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
                  

                  - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
                  

                  - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
                  

                  - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
                  

                  - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
              
            
              

              - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
              

              - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
              

              - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
              

              - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
              

              - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
              

              - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
          
        
      
        

        - **Id** *(string) --* The unique id of the channel.
        

        - **InputAttachments** *(list) --* List of input attachments for channel.
          

          - *(dict) --* Placeholder documentation for InputAttachment
            

            - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
              

              - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
              

              - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                

                - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                  

                  - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                    

                    - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                      

                      - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                      

                      - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                  
                    

                    - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                      

                      - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                  
                    

                    - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                      

                      - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                      

                      - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                  
                
              
            
              

              - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
              

              - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
          
            

            - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
            

            - **InputId** *(string) --* The ID of the input
            

            - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
              

              - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                

                - *(dict) --* Audio Selector
                  

                  - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                  

                  - **SelectorSettings** *(dict) --* The audio selector settings.
                    

                    - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                      

                      - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                      

                      - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                  
                    

                    - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                      

                      - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                      

                      - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                  
                    

                    - **AudioPidSelection** *(dict) --* Audio Pid Selection
                      

                      - **Pid** *(integer) --* Selects a specific PID from within a source.
                  
                    

                    - **AudioTrackSelection** *(dict) --* Audio Track Selection
                      

                      - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                        

                        - *(dict) --* Audio Track
                          

                          - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                      
                    
                  
                
              
            
              

              - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                

                - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                  

                  - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                  

                  - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                  

                  - **SelectorSettings** *(dict) --* Caption selector settings.
                    

                    - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                      

                      - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                  
                    

                    - **AribSourceSettings** *(dict) --* Arib Source Settings
                  
                    

                    - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                  
                    

                    - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                      

                      - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                  
                    

                    - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                  
                    

                    - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                  
                    

                    - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                      

                      - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                        

                        - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                        

                        - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                        

                        - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                        

                        - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                    
                      

                      - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                  
                
              
            
              

              - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
              

              - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
              

              - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
              

              - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
              

              - **NetworkInputSettings** *(dict) --* Input settings.
                

                - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                  

                  - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                  

                  - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                  

                  - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                  

                  - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                  

                  - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
              
                

                - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
            
              

              - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
              

              - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
              

              - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                

                - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                

                - **ColorSpaceSettings** *(dict) --* Color space settings
                  

                  - **Hdr10Settings** *(dict) --* Hdr10 Settings
                    

                    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                    

                    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                
              
                

                - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                

                - **SelectorSettings** *(dict) --* The video selector settings.
                  

                  - **VideoSelectorPid** *(dict) --* Video Selector Pid
                    

                    - **Pid** *(integer) --* Selects a specific PID from within a video source.
                
                  

                  - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                    

                    - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                
              
            
          
        
      
        

        - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
          

          - **Codec** *(string) --* Input codec
          

          - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
          

          - **Resolution** *(string) --* Input resolution, categorized coarsely
      
        

        - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
        

        - **Name** *(string) --* The name of the channel. (user-mutable)
        

        - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.
          

          - *(dict) --* Runtime details of a pipeline when a channel is running.
            

            - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment currently being ingested by this pipeline.
            

            - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
            

            - **ActiveMotionGraphicsActionName** *(string) --* The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
            

            - **ActiveMotionGraphicsUri** *(string) --* The current URI being used for HTML5 motion graphics for this pipeline.
            

            - **PipelineId** *(string) --* Pipeline ID
        
      
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        

        - **State** *(string) --* Placeholder documentation for ChannelState
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **Vpc** *(dict) --* Settings for VPC output
          

          - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
            

            - *(string) --* Placeholder documentation for __string
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: start_multiplex(**kwargs)

    Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/StartMultiplex>`_    


    **Request Syntax** 
    ::

      response = client.start_multiplex(
          MultiplexId='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'AvailabilityZones': [
                'string',
            ],
            'Destinations': [
                {
                    'MediaConnectSettings': {
                        'EntitlementArn': 'string'
                    }
                },
            ],
            'Id': 'string',
            'MultiplexSettings': {
                'MaximumVideoBufferDelayMilliseconds': 123,
                'TransportStreamBitrate': 123,
                'TransportStreamId': 123,
                'TransportStreamReservedBitrate': 123
            },
            'Name': 'string',
            'PipelinesRunningCount': 123,
            'ProgramCount': 123,
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* The action to start the multiplex is in progress.
        

        - **Arn** *(string) --* The unique arn of the multiplex.
        

        - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **Destinations** *(list) --* A list of the multiplex output destinations.
          

          - *(dict) --* Multiplex output destination settings
            

            - **MediaConnectSettings** *(dict) --* Multiplex MediaConnect output destination settings.
              

              - **EntitlementArn** *(string) --* The MediaConnect entitlement ARN available as a Flow source.
          
        
      
        

        - **Id** *(string) --* The unique id of the multiplex.
        

        - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
          

          - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.
          

          - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
          

          - **TransportStreamId** *(integer) --* Transport stream ID.
          

          - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.
      
        

        - **Name** *(string) --* The name of the multiplex.
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **ProgramCount** *(integer) --* The number of programs in the multiplex.
        

        - **State** *(string) --* The current state of the multiplex.
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: stop_channel(**kwargs)

    Stops a running channel

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/StopChannel>`_    


    **Request Syntax** 
    ::

      response = client.stop_channel(
          ChannelId='string'
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** A request to stop a running channel

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CdiInputSpecification': {
                'Resolution': 'SD'|'HD'|'FHD'|'UHD'
            },
            'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
            'Destinations': [
                {
                    'Id': 'string',
                    'MediaPackageSettings': [
                        {
                            'ChannelId': 'string'
                        },
                    ],
                    'MultiplexSettings': {
                        'MultiplexId': 'string',
                        'ProgramName': 'string'
                    },
                    'Settings': [
                        {
                            'PasswordParam': 'string',
                            'StreamName': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                    ]
                },
            ],
            'EgressEndpoints': [
                {
                    'SourceIp': 'string'
                },
            ],
            'EncoderSettings': {
                'AudioDescriptions': [
                    {
                        'AudioNormalizationSettings': {
                            'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                            'AlgorithmControl': 'CORRECT_AUDIO',
                            'TargetLkfs': 123.0
                        },
                        'AudioSelectorName': 'string',
                        'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                        'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'CodecSettings': {
                            'AacSettings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                                'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                                'Profile': 'HEV1'|'HEV2'|'LC',
                                'RateControlMode': 'CBR'|'VBR',
                                'RawFormat': 'LATM_LOAS'|'NONE',
                                'SampleRate': 123.0,
                                'Spec': 'MPEG2'|'MPEG4',
                                'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                            },
                            'Ac3Settings': {
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                                'Dialnorm': 123,
                                'DrcProfile': 'FILM_STANDARD'|'NONE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                            },
                            'Eac3Settings': {
                                'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                                'Bitrate': 123.0,
                                'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                                'DcFilter': 'DISABLED'|'ENABLED',
                                'Dialnorm': 123,
                                'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                'LfeControl': 'LFE'|'NO_LFE',
                                'LfeFilter': 'DISABLED'|'ENABLED',
                                'LoRoCenterMixLevel': 123.0,
                                'LoRoSurroundMixLevel': 123.0,
                                'LtRtCenterMixLevel': 123.0,
                                'LtRtSurroundMixLevel': 123.0,
                                'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                                'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                                'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                                'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                                'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                                'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                            },
                            'Mp2Settings': {
                                'Bitrate': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                                'SampleRate': 123.0
                            },
                            'PassThroughSettings': {},
                            'WavSettings': {
                                'BitDepth': 123.0,
                                'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                                'SampleRate': 123.0
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                        'Name': 'string',
                        'RemixSettings': {
                            'ChannelMappings': [
                                {
                                    'InputChannelLevels': [
                                        {
                                            'Gain': 123,
                                            'InputChannel': 123
                                        },
                                    ],
                                    'OutputChannel': 123
                                },
                            ],
                            'ChannelsIn': 123,
                            'ChannelsOut': 123
                        },
                        'StreamName': 'string'
                    },
                ],
                'AvailBlanking': {
                    'AvailBlankingImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'State': 'DISABLED'|'ENABLED'
                },
                'AvailConfiguration': {
                    'AvailSettings': {
                        'Scte35SpliceInsert': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        },
                        'Scte35TimeSignalApos': {
                            'AdAvailOffset': 123,
                            'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                            'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                        }
                    }
                },
                'BlackoutSlate': {
                    'BlackoutSlateImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                    'NetworkEndBlackoutImage': {
                        'PasswordParam': 'string',
                        'Uri': 'string',
                        'Username': 'string'
                    },
                    'NetworkId': 'string',
                    'State': 'DISABLED'|'ENABLED'
                },
                'CaptionDescriptions': [
                    {
                        'CaptionSelectorName': 'string',
                        'DestinationSettings': {
                            'AribDestinationSettings': {},
                            'BurnInDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'DvbSubDestinationSettings': {
                                'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                'BackgroundOpacity': 123,
                                'Font': {
                                    'PasswordParam': 'string',
                                    'Uri': 'string',
                                    'Username': 'string'
                                },
                                'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'FontOpacity': 123,
                                'FontResolution': 123,
                                'FontSize': 'string',
                                'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                'OutlineSize': 123,
                                'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                'ShadowOpacity': 123,
                                'ShadowXOffset': 123,
                                'ShadowYOffset': 123,
                                'TeletextGridControl': 'FIXED'|'SCALED',
                                'XPosition': 123,
                                'YPosition': 123
                            },
                            'EbuTtDDestinationSettings': {
                                'CopyrightHolder': 'string',
                                'FillLineGap': 'DISABLED'|'ENABLED',
                                'FontFamily': 'string',
                                'StyleControl': 'EXCLUDE'|'INCLUDE'
                            },
                            'EmbeddedDestinationSettings': {},
                            'EmbeddedPlusScte20DestinationSettings': {},
                            'RtmpCaptionInfoDestinationSettings': {},
                            'Scte20PlusEmbeddedDestinationSettings': {},
                            'Scte27DestinationSettings': {},
                            'SmpteTtDestinationSettings': {},
                            'TeletextDestinationSettings': {},
                            'TtmlDestinationSettings': {
                                'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                            },
                            'WebvttDestinationSettings': {
                                'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                            }
                        },
                        'LanguageCode': 'string',
                        'LanguageDescription': 'string',
                        'Name': 'string'
                    },
                ],
                'FeatureActivations': {
                    'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
                },
                'GlobalConfiguration': {
                    'InitialAudioGain': 123,
                    'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                    'InputLossBehavior': {
                        'BlackFrameMsec': 123,
                        'InputLossImageColor': 'string',
                        'InputLossImageSlate': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'InputLossImageType': 'COLOR'|'SLATE',
                        'RepeatFrameMsec': 123
                    },
                    'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                    'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                    'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
                },
                'MotionGraphicsConfiguration': {
                    'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                    'MotionGraphicsSettings': {
                        'HtmlMotionGraphicsSettings': {}
                    }
                },
                'NielsenConfiguration': {
                    'DistributorId': 'string',
                    'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
                },
                'OutputGroups': [
                    {
                        'Name': 'string',
                        'OutputGroupSettings': {
                            'ArchiveGroupSettings': {
                                'ArchiveCdnSettings': {
                                    'ArchiveS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                },
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'RolloverInterval': 123
                            },
                            'FrameCaptureGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'FrameCaptureCdnSettings': {
                                    'FrameCaptureS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    }
                                }
                            },
                            'HlsGroupSettings': {
                                'AdMarkers': [
                                    'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                                ],
                                'BaseUrlContent': 'string',
                                'BaseUrlContent1': 'string',
                                'BaseUrlManifest': 'string',
                                'BaseUrlManifest1': 'string',
                                'CaptionLanguageMappings': [
                                    {
                                        'CaptionChannel': 123,
                                        'LanguageCode': 'string',
                                        'LanguageDescription': 'string'
                                    },
                                ],
                                'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                                'ClientCache': 'DISABLED'|'ENABLED',
                                'CodecSpecification': 'RFC_4281'|'RFC_6381',
                                'ConstantIv': 'string',
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                                'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                                'EncryptionType': 'AES128'|'SAMPLE_AES',
                                'HlsCdnSettings': {
                                    'HlsAkamaiSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123,
                                        'Salt': 'string',
                                        'Token': 'string'
                                    },
                                    'HlsBasicPutSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsMediaStoreSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'MediaStoreStorageClass': 'TEMPORAL',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    },
                                    'HlsS3Settings': {
                                        'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                    },
                                    'HlsWebdavSettings': {
                                        'ConnectionRetryInterval': 123,
                                        'FilecacheDuration': 123,
                                        'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                        'NumRetries': 123,
                                        'RestartDelay': 123
                                    }
                                },
                                'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                                'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                                'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                                'IndexNSegments': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'IvInManifest': 'EXCLUDE'|'INCLUDE',
                                'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                                'KeepSegments': 123,
                                'KeyFormat': 'string',
                                'KeyFormatVersions': 'string',
                                'KeyProviderSettings': {
                                    'StaticKeySettings': {
                                        'KeyProviderServer': {
                                            'PasswordParam': 'string',
                                            'Uri': 'string',
                                            'Username': 'string'
                                        },
                                        'StaticKeyValue': 'string'
                                    }
                                },
                                'ManifestCompression': 'GZIP'|'NONE',
                                'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                                'MinSegmentLength': 123,
                                'Mode': 'LIVE'|'VOD',
                                'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                                'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                                'ProgramDateTimePeriod': 123,
                                'RedundantManifest': 'DISABLED'|'ENABLED',
                                'SegmentLength': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SegmentsPerSubdirectory': 123,
                                'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123,
                                'TimestampDeltaMilliseconds': 123,
                                'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                            },
                            'MediaPackageGroupSettings': {
                                'Destination': {
                                    'DestinationRefId': 'string'
                                }
                            },
                            'MsSmoothGroupSettings': {
                                'AcquisitionPointId': 'string',
                                'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                                'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                'ConnectionRetryInterval': 123,
                                'Destination': {
                                    'DestinationRefId': 'string'
                                },
                                'EventId': 'string',
                                'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                                'EventStopBehavior': 'NONE'|'SEND_EOS',
                                'FilecacheDuration': 123,
                                'FragmentLength': 123,
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'NumRetries': 123,
                                'RestartDelay': 123,
                                'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                'SendDelayMs': 123,
                                'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                                'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                                'TimestampOffset': 'string',
                                'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                            },
                            'MultiplexGroupSettings': {},
                            'RtmpGroupSettings': {
                                'AdMarkers': [
                                    'ON_CUE_POINT_SCTE35',
                                ],
                                'AuthenticationScheme': 'AKAMAI'|'COMMON',
                                'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                                'CacheLength': 123,
                                'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                                'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                'RestartDelay': 123
                            },
                            'UdpGroupSettings': {
                                'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                                'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                'TimedMetadataId3Period': 123
                            }
                        },
                        'Outputs': [
                            {
                                'AudioDescriptionNames': [
                                    'string',
                                ],
                                'CaptionDescriptionNames': [
                                    'string',
                                ],
                                'OutputName': 'string',
                                'OutputSettings': {
                                    'ArchiveOutputSettings': {
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            },
                                            'RawSettings': {}
                                        },
                                        'Extension': 'string',
                                        'NameModifier': 'string'
                                    },
                                    'FrameCaptureOutputSettings': {
                                        'NameModifier': 'string'
                                    },
                                    'HlsOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'HlsSettings': {
                                            'AudioOnlyHlsSettings': {
                                                'AudioGroupId': 'string',
                                                'AudioOnlyImage': {
                                                    'PasswordParam': 'string',
                                                    'Uri': 'string',
                                                    'Username': 'string'
                                                },
                                                'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                                'SegmentType': 'AAC'|'FMP4'
                                            },
                                            'Fmp4HlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                            },
                                            'FrameCaptureHlsSettings': {},
                                            'StandardHlsSettings': {
                                                'AudioRenditionSets': 'string',
                                                'M3u8Settings': {
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'EcmPid': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                }
                                            }
                                        },
                                        'NameModifier': 'string',
                                        'SegmentModifier': 'string'
                                    },
                                    'MediaPackageOutputSettings': {},
                                    'MsSmoothOutputSettings': {
                                        'H265PackagingType': 'HEV1'|'HVC1',
                                        'NameModifier': 'string'
                                    },
                                    'MultiplexOutputSettings': {
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        }
                                    },
                                    'RtmpOutputSettings': {
                                        'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                        'ConnectionRetryInterval': 123,
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'NumRetries': 123
                                    },
                                    'UdpOutputSettings': {
                                        'BufferMsec': 123,
                                        'ContainerSettings': {
                                            'M2tsSettings': {
                                                'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                'Arib': 'DISABLED'|'ENABLED',
                                                'AribCaptionsPid': 'string',
                                                'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                'AudioBufferModel': 'ATSC'|'DVB',
                                                'AudioFramesPerPes': 123,
                                                'AudioPids': 'string',
                                                'AudioStreamType': 'ATSC'|'DVB',
                                                'Bitrate': 123,
                                                'BufferModel': 'MULTIPLEX'|'NONE',
                                                'CcDescriptor': 'DISABLED'|'ENABLED',
                                                'DvbNitSettings': {
                                                    'NetworkId': 123,
                                                    'NetworkName': 'string',
                                                    'RepInterval': 123
                                                },
                                                'DvbSdtSettings': {
                                                    'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                    'RepInterval': 123,
                                                    'ServiceName': 'string',
                                                    'ServiceProviderName': 'string'
                                                },
                                                'DvbSubPids': 'string',
                                                'DvbTdtSettings': {
                                                    'RepInterval': 123
                                                },
                                                'DvbTeletextPid': 'string',
                                                'Ebif': 'NONE'|'PASSTHROUGH',
                                                'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                'EbpLookaheadMs': 123,
                                                'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                'EcmPid': 'string',
                                                'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                'EtvPlatformPid': 'string',
                                                'EtvSignalPid': 'string',
                                                'FragmentTime': 123.0,
                                                'Klv': 'NONE'|'PASSTHROUGH',
                                                'KlvDataPids': 'string',
                                                'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'NullPacketBitrate': 123.0,
                                                'PatInterval': 123,
                                                'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                'PcrPeriod': 123,
                                                'PcrPid': 'string',
                                                'PmtInterval': 123,
                                                'PmtPid': 'string',
                                                'ProgramNum': 123,
                                                'RateMode': 'CBR'|'VBR',
                                                'Scte27Pids': 'string',
                                                'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                'Scte35Pid': 'string',
                                                'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                'SegmentationTime': 123.0,
                                                'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                'TimedMetadataPid': 'string',
                                                'TransportStreamId': 123,
                                                'VideoPid': 'string'
                                            }
                                        },
                                        'Destination': {
                                            'DestinationRefId': 'string'
                                        },
                                        'FecOutputSettings': {
                                            'ColumnDepth': 123,
                                            'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                            'RowLength': 123
                                        }
                                    }
                                },
                                'VideoDescriptionName': 'string'
                            },
                        ]
                    },
                ],
                'TimecodeConfig': {
                    'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                    'SyncThreshold': 123
                },
                'VideoDescriptions': [
                    {
                        'CodecSettings': {
                            'FrameCaptureSettings': {
                                'CaptureInterval': 123,
                                'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                            },
                            'H264Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'Bitrate': 123,
                                'BufFillPct': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'EntropyEncoding': 'CABAC'|'CAVLC',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'ForceFieldPictures': 'DISABLED'|'ENABLED',
                                'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopBReference': 'DISABLED'|'ENABLED',
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'NumRefFrames': 123,
                                'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                                'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Softness': 123,
                                'SpatialAq': 'DISABLED'|'ENABLED',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'Syntax': 'DEFAULT'|'RP2027',
                                'TemporalAq': 'DISABLED'|'ENABLED',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'H265Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'AlternativeTransferFunction': 'INSERT'|'OMIT',
                                'Bitrate': 123,
                                'BufSize': 123,
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpaceSettings': {
                                    'ColorSpacePassthroughSettings': {},
                                    'Hdr10Settings': {
                                        'MaxCll': 123,
                                        'MaxFall': 123
                                    },
                                    'Rec601Settings': {},
                                    'Rec709Settings': {}
                                },
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FlickerAq': 'DISABLED'|'ENABLED',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                                'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                'MaxBitrate': 123,
                                'MinIInterval': 123,
                                'ParDenominator': 123,
                                'ParNumerator': 123,
                                'Profile': 'MAIN'|'MAIN_10BIT',
                                'QvbrQualityLevel': 123,
                                'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                'Slices': 123,
                                'Tier': 'HIGH'|'MAIN',
                                'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                            },
                            'Mpeg2Settings': {
                                'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                                'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                'ColorMetadata': 'IGNORE'|'INSERT',
                                'ColorSpace': 'AUTO'|'PASSTHROUGH',
                                'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                                'FilterSettings': {
                                    'TemporalFilterSettings': {
                                        'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                        'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                    }
                                },
                                'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                'FramerateDenominator': 123,
                                'FramerateNumerator': 123,
                                'GopClosedCadence': 123,
                                'GopNumBFrames': 123,
                                'GopSize': 123.0,
                                'GopSizeUnits': 'FRAMES'|'SECONDS',
                                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                'SubgopLength': 'DYNAMIC'|'FIXED',
                                'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                            }
                        },
                        'Height': 123,
                        'Name': 'string',
                        'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                        'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                        'Sharpness': 123,
                        'Width': 123
                    },
                ]
            },
            'Id': 'string',
            'InputAttachments': [
                {
                    'AutomaticInputFailoverSettings': {
                        'ErrorClearTimeMsec': 123,
                        'FailoverConditions': [
                            {
                                'FailoverConditionSettings': {
                                    'AudioSilenceSettings': {
                                        'AudioSelectorName': 'string',
                                        'AudioSilenceThresholdMsec': 123
                                    },
                                    'InputLossSettings': {
                                        'InputLossThresholdMsec': 123
                                    },
                                    'VideoBlackSettings': {
                                        'BlackDetectThreshold': 123.0,
                                        'VideoBlackThresholdMsec': 123
                                    }
                                }
                            },
                        ],
                        'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                        'SecondaryInputId': 'string'
                    },
                    'InputAttachmentName': 'string',
                    'InputId': 'string',
                    'InputSettings': {
                        'AudioSelectors': [
                            {
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AudioHlsRenditionSelection': {
                                        'GroupId': 'string',
                                        'Name': 'string'
                                    },
                                    'AudioLanguageSelection': {
                                        'LanguageCode': 'string',
                                        'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                    },
                                    'AudioPidSelection': {
                                        'Pid': 123
                                    },
                                    'AudioTrackSelection': {
                                        'Tracks': [
                                            {
                                                'Track': 123
                                            },
                                        ]
                                    }
                                }
                            },
                        ],
                        'CaptionSelectors': [
                            {
                                'LanguageCode': 'string',
                                'Name': 'string',
                                'SelectorSettings': {
                                    'AncillarySourceSettings': {
                                        'SourceAncillaryChannelNumber': 123
                                    },
                                    'AribSourceSettings': {},
                                    'DvbSubSourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'EmbeddedSourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Scte20Detection': 'AUTO'|'OFF',
                                        'Source608ChannelNumber': 123,
                                        'Source608TrackNumber': 123
                                    },
                                    'Scte20SourceSettings': {
                                        'Convert608To708': 'DISABLED'|'UPCONVERT',
                                        'Source608ChannelNumber': 123
                                    },
                                    'Scte27SourceSettings': {
                                        'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                        'Pid': 123
                                    },
                                    'TeletextSourceSettings': {
                                        'OutputRectangle': {
                                            'Height': 123.0,
                                            'LeftOffset': 123.0,
                                            'TopOffset': 123.0,
                                            'Width': 123.0
                                        },
                                        'PageNumber': 'string'
                                    }
                                }
                            },
                        ],
                        'DeblockFilter': 'DISABLED'|'ENABLED',
                        'DenoiseFilter': 'DISABLED'|'ENABLED',
                        'FilterStrength': 123,
                        'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                        'NetworkInputSettings': {
                            'HlsInputSettings': {
                                'Bandwidth': 123,
                                'BufferSegments': 123,
                                'Retries': 123,
                                'RetryInterval': 123,
                                'Scte35Source': 'MANIFEST'|'SEGMENTS'
                            },
                            'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                        },
                        'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                        'SourceEndBehavior': 'CONTINUE'|'LOOP',
                        'VideoSelector': {
                            'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                            'ColorSpaceSettings': {
                                'Hdr10Settings': {
                                    'MaxCll': 123,
                                    'MaxFall': 123
                                }
                            },
                            'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                            'SelectorSettings': {
                                'VideoSelectorPid': {
                                    'Pid': 123
                                },
                                'VideoSelectorProgramId': {
                                    'ProgramId': 123
                                }
                            }
                        }
                    }
                },
            ],
            'InputSpecification': {
                'Codec': 'MPEG2'|'AVC'|'HEVC',
                'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                'Resolution': 'SD'|'HD'|'UHD'
            },
            'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
            'Name': 'string',
            'PipelineDetails': [
                {
                    'ActiveInputAttachmentName': 'string',
                    'ActiveInputSwitchActionName': 'string',
                    'ActiveMotionGraphicsActionName': 'string',
                    'ActiveMotionGraphicsUri': 'string',
                    'PipelineId': 'string'
                },
            ],
            'PipelinesRunningCount': 123,
            'RoleArn': 'string',
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
            'Tags': {
                'string': 'string'
            },
            'Vpc': {
                'AvailabilityZones': [
                    'string',
                ],
                'NetworkInterfaceIds': [
                    'string',
                ],
                'SecurityGroupIds': [
                    'string',
                ],
                'SubnetIds': [
                    'string',
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* Successfully initiated stop of the channel.
        

        - **Arn** *(string) --* The unique arn of the channel.
        

        - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
          

          - **Resolution** *(string) --* Maximum CDI input resolution
      
        

        - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        

        - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
          

          - *(dict) --* Placeholder documentation for OutputDestination
            

            - **Id** *(string) --* User-specified id. This is used in an output group or an output.
            

            - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
              

              - *(dict) --* MediaPackage Output Destination Settings
                

                - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
            
          
            

            - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
              

              - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
              

              - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
          
            

            - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
              

              - *(dict) --* Placeholder documentation for OutputDestinationSettings
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                

                - **Url** *(string) --* A URL specifying a destination
                

                - **Username** *(string) --* username for destination
            
          
        
      
        

        - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
          

          - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
            

            - **SourceIp** *(string) --* Public IP of where a channel's output comes from
        
      
        

        - **EncoderSettings** *(dict) --* Encoder Settings
          

          - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription
            

            - *(dict) --* Audio Description
              

              - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.
                

                - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
                

                - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
                

                - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
            
              

              - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source for this AudioDescription.
              

              - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
              

              - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
              

              - **CodecSettings** *(dict) --* Audio codec settings.
                

                - **AacSettings** *(dict) --* Aac Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.
                  

                  - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
                  

                  - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
                  

                  - **Profile** *(string) --* AAC Profile.
                  

                  - **RateControlMode** *(string) --* Rate Control Mode.
                  

                  - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.
                  

                  - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
                  

                  - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.
              
                

                - **Ac3Settings** *(dict) --* Ac3 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
                  

                  - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
                  

                  - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
              
                

                - **Eac3Settings** *(dict) --* Eac3 Settings
                  

                  - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                  

                  - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
                  

                  - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.
                  

                  - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.
                  

                  - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
                  

                  - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.
                  

                  - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
                  

                  - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel
                  

                  - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
                  

                  - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.
                  

                  - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.
                  

                  - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.
                  

                  - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                  

                  - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
                  

                  - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
                  

                  - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.
                  

                  - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
                  

                  - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
              
                

                - **Mp2Settings** *(dict) --* Mp2 Settings
                  

                  - **Bitrate** *(float) --* Average bitrate in bits/second.
                  

                  - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
                

                - **PassThroughSettings** *(dict) --* Pass Through Settings
              
                

                - **WavSettings** *(dict) --* Wav Settings
                  

                  - **BitDepth** *(float) --* Bits per sample.
                  

                  - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
                  

                  - **SampleRate** *(float) --* Sample rate in Hz.
              
            
              

              - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
              

              - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
              

              - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
              

              - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.
                

                - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with appropriate gain adjustments.
                  

                  - *(dict) --* Audio Channel Mapping
                    

                    - **InputChannelLevels** *(list) --* Indices and gain values for each input channel that should be remixed into this output channel.
                      

                      - *(dict) --* Input Channel Level
                        

                        - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
                        

                        - **InputChannel** *(integer) --* The index of the input channel used as a source.
                    
                  
                    

                    - **OutputChannel** *(integer) --* The index of the output channel being produced.
                
              
                

                - **ChannelsIn** *(integer) --* Number of input channels to be used.
                

                - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
            
              

              - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
          
        
          

          - **AvailBlanking** *(dict) --* Settings for ad avail blanking.
            

            - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
        
          

          - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.
            

            - **AvailSettings** *(dict) --* Ad avail settings.
              

              - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
              

              - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos
                

                - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                

                - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                

                - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
            
          
        
          

          - **BlackoutSlate** *(dict) --* Settings for blackout slate.
            

            - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
            

            - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
              

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
              

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
              

              - **Username** *(string) --* Documentation update needed
          
            

            - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
            

            - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
        
          

          - **CaptionDescriptions** *(list) --* Settings for caption decriptions
            

            - *(dict) --* Caption Description
              

              - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
              

              - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.
                

                - **AribDestinationSettings** *(dict) --* Arib Destination Settings
              
                

                - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
              
                

                - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings
                  

                  - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                    

                    - **Username** *(string) --* Documentation update needed
                
                  

                  - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                  

                  - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                  

                  - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                  

                  - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                  

                  - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                  

                  - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
              
                

                - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings
                  

                  - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
                  

                  - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
                  

                  - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
                  

                  - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
              
                

                - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings
              
                

                - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings
              
                

                - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings
              
                

                - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings
              
                

                - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings
              
                

                - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings
              
                

                - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings
              
                

                - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings
                  

                  - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
              
                

                - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings
                  

                  - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
              
            
              

              - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
              

              - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).
              

              - **Name** *(string) --* Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
          
        
          

          - **FeatureActivations** *(dict) --* Feature Activations
            

            - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
        
          

          - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.
            

            - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.
            

            - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
            

            - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.
              

              - **BlackFrameMsec** *(integer) --* Documentation update needed
              

              - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
              

              - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
              

              - **RepeatFrameMsec** *(integer) --* Documentation update needed
          
            

            - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
            

            - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
            

            - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
        
          

          - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.
            

            - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion
            

            - **MotionGraphicsSettings** *(dict) --* Motion Graphics Settings
              

              - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings
            
          
        
          

          - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.
            

            - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.
            

            - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging
        
          

          - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup
            

            - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
              

              - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
              

              - **OutputGroupSettings** *(dict) --* Settings associated with the output group.
                

                - **ArchiveGroupSettings** *(dict) --* Archive Group Settings
                  

                  - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **ArchiveS3Settings** *(dict) --* Archive S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
                  

                  - **Destination** *(dict) --* A directory and base filename where archive files should be written.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.
              
                

                - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings
                  

                  - **Destination** *(dict) --* The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                
              
                

                - **HlsGroupSettings** *(dict) --* Hls Group Settings
                  

                  - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
                    

                    - *(string) --* Hls Ad Markers
                
                  

                  - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
                  

                  - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                  

                  - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
                  

                  - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
                    

                    - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
                      

                      - **CaptionChannel** *(integer) --* The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
                      

                      - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
                      

                      - **LanguageDescription** *(string) --* Textual description of language
                  
                
                  

                  - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
                  

                  - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
                  

                  - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
                  

                  - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
                  

                  - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **DirectoryStructure** *(string) --* Place segments in subdirectories.
                  

                  - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
                  

                  - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
                  

                  - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                    

                    - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                      

                      - **Salt** *(string) --* Salt for authenticated Akamai.
                      

                      - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.
                  
                    

                    - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                    

                    - **HlsS3Settings** *(dict) --* Hls S3 Settings
                      

                      - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                  
                    

                    - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                      

                      - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                      

                      - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.
                      

                      - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                      

                      - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                  
                
                  

                  - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging
                  

                  - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
                  

                  - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
                  

                  - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
                  

                  - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
                  

                  - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
                  

                  - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
                  

                  - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).
                  

                  - **KeyProviderSettings** *(dict) --* The key provider settings.
                    

                    - **StaticKeySettings** *(dict) --* Static Key Settings
                      

                      - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.
                        

                        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                        

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                        

                        - **Username** *(string) --* Documentation update needed
                    
                      

                      - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal string.
                  
                
                  

                  - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.
                  

                  - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.
                  

                  - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
                  

                  - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
                  

                  - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
                  

                  - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
                  

                  - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
                  

                  - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
                  

                  - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
                  

                  - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                  

                  - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.
                  

                  - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
              
                

                - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings
                  

                  - **Destination** *(dict) --* MediaPackage channel destination.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
              
                

                - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings
                  

                  - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
                  

                  - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
                  

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
                  

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
                  

                  - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
                    

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string
                
                  

                  - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
                  

                  - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
                  

                  - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event
                  

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                  

                  - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
                  

                  - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                  

                  - **NumRetries** *(integer) --* Number of retry attempts.
                  

                  - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
                  

                  - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                  

                  - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.
                  

                  - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
                  

                  - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.
                  

                  - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
                  

                  - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
              
                

                - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings
              
                

                - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings
                  

                  - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
                    

                    - *(string) --* Rtmp Ad Markers
                
                  

                  - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN
                  

                  - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
                  

                  - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.
                  

                  - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
                  

                  - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
                  

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
              
                

                - **UdpGroupSettings** *(dict) --* Udp Group Settings
                  

                  - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
                  

                  - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                  

                  - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
              
            
              

              - **Outputs** *(list) --* Placeholder documentation for __listOfOutput
                

                - *(dict) --* Output settings. There can be multiple outputs within a group.
                  

                  - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.
                    

                    - *(string) --* Placeholder documentation for __string
                
                  

                  - **OutputName** *(string) --* The name used to identify an output.
                  

                  - **OutputSettings** *(dict) --* Output type-specific settings.
                    

                    - **ArchiveOutputSettings** *(dict) --* Archive Output Settings
                      

                      - **ContainerSettings** *(dict) --* Settings specific to the container type of the file.
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                        

                        - **RawSettings** *(dict) --* Raw Settings
                      
                    
                      

                      - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings
                      

                      - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.
                  
                    

                    - **HlsOutputSettings** *(dict) --* Hls Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These settings are different for audio-only outputs.
                        

                        - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings
                          

                          - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.
                          

                          - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
                            

                            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                            

                            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                            

                            - **Username** *(string) --* Documentation update needed
                        
                          

                          - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
                          

                          - **SegmentType** *(string) --* Specifies the segment type.
                      
                        

                        - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                      
                        

                        - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings
                      
                        

                        - **StandardHlsSettings** *(dict) --* Standard Hls Settings
                          

                          - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                          

                          - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
                            

                            - **EcmPid** *(string) --* This parameter is unused and deprecated.
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                        
                      
                    
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
                      

                      - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.
                  
                    

                    - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings
                  
                    

                    - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings
                      

                      - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                      

                      - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                  
                    

                    - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings
                      

                      - **Destination** *(dict) --* Destination is a Multiplex.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                  
                    

                    - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings
                      

                      - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
                      

                      - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
                      

                      - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **NumRetries** *(integer) --* Number of retry attempts.
                  
                    

                    - **UdpOutputSettings** *(dict) --* Udp Output Settings
                      

                      - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
                      

                      - **ContainerSettings** *(dict) --* Udp Container Settings
                        

                        - **M2tsSettings** *(dict) --* M2ts Settings
                          

                          - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                          

                          - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                          

                          - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                          

                          - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                          

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                          

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                          

                          - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                          

                          - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                          

                          - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                          

                          - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                            

                            - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                            

                            - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                            

                            - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                            

                            - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                            

                            - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                        
                          

                          - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                            

                            - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                        
                          

                          - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                          

                          - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                          

                          - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                          

                          - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                          

                          - **EcmPid** *(string) --* This field is unused and deprecated.
                          

                          - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                          

                          - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                          

                          - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                          

                          - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                          

                          - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                          

                          - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                          

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                          

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                          

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                          

                          - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                          

                          - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                          

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                          

                          - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                          

                          - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                          

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                          

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                          

                          - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                          

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                      
                    
                      

                      - **Destination** *(dict) --* Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
                        

                        - **DestinationRefId** *(string) --* Placeholder documentation for __string
                    
                      

                      - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.
                        

                        - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
                        

                        - **IncludeFec** *(string) --* Enables column only or column and row based FEC
                        

                        - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
                    
                  
                
                  

                  - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.
              
            
          
        
          

          - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode information from inputs.
            

            - **Source** *(string) --* Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
            

            - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
        
          

          - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription
            

            - *(dict) --* Video settings for this stream.
              

              - **CodecSettings** *(dict) --* Video codec settings.
                

                - **FrameCaptureSettings** *(dict) --* Frame Capture Settings
                  

                  - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
                  

                  - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.
              
                

                - **H264Settings** *(dict) --* H264 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
                  

                  - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
                  

                  - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopBReference** *(string) --* Documentation update needed
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.264 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
                  

                  - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.264 Profile.
                  

                  - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
                  

                  - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
                  

                  - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
                  

                  - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.
                  

                  - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **H265Settings** *(dict) --* H265 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                  

                  - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
                  

                  - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                  

                  - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                  

                  - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                  

                  - **ColorSpaceSettings** *(dict) --* Color Space settings
                    

                    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                  
                    

                    - **Hdr10Settings** *(dict) --* Hdr10 Settings
                      

                      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                      

                      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                  
                    

                    - **Rec601Settings** *(dict) --* Rec601 Settings
                  
                    

                    - **Rec709Settings** *(dict) --* Rec709 Settings
                  
                
                  

                  - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                  

                  - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
                  

                  - **FramerateDenominator** *(integer) --* Framerate denominator.
                  

                  - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                  

                  - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                  

                  - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                  

                  - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                  

                  - **Level** *(string) --* H.265 Level.
                  

                  - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                  

                  - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level
                  

                  - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                  

                  - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                  

                  - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                  

                  - **Profile** *(string) --* H.265 Profile.
                  

                  - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
                  

                  - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                  

                  - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                  

                  - **SceneChangeDetect** *(string) --* Scene change detection.
                  

                  - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                  

                  - **Tier** *(string) --* H.265 Tier.
                  

                  - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
              
                

                - **Mpeg2Settings** *(dict) --* Mpeg2 Settings
                  

                  - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
                  

                  - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
                  

                  - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
                  

                  - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
                  

                  - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.
                  

                  - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
                    

                    - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                      

                      - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                      

                      - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                  
                
                  

                  - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
                  

                  - **FramerateDenominator** *(integer) --* description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **FramerateNumerator** *(integer) --* The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                  

                  - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.
                  

                  - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
                  

                  - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
                  

                  - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
                  

                  - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
                  

                  - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
                  

                  - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
              
            
              

              - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
              

              - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
              

              - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
              

              - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
              

              - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
              

              - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
          
        
      
        

        - **Id** *(string) --* The unique id of the channel.
        

        - **InputAttachments** *(list) --* List of input attachments for channel.
          

          - *(dict) --* Placeholder documentation for InputAttachment
            

            - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
              

              - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
              

              - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                

                - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                  

                  - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                    

                    - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                      

                      - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                      

                      - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                  
                    

                    - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                      

                      - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                  
                    

                    - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                      

                      - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                      

                      - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                  
                
              
            
              

              - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
              

              - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
          
            

            - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
            

            - **InputId** *(string) --* The ID of the input
            

            - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
              

              - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                

                - *(dict) --* Audio Selector
                  

                  - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                  

                  - **SelectorSettings** *(dict) --* The audio selector settings.
                    

                    - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                      

                      - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                      

                      - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                  
                    

                    - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                      

                      - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                      

                      - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                  
                    

                    - **AudioPidSelection** *(dict) --* Audio Pid Selection
                      

                      - **Pid** *(integer) --* Selects a specific PID from within a source.
                  
                    

                    - **AudioTrackSelection** *(dict) --* Audio Track Selection
                      

                      - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                        

                        - *(dict) --* Audio Track
                          

                          - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                      
                    
                  
                
              
            
              

              - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                

                - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                  

                  - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                  

                  - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                  

                  - **SelectorSettings** *(dict) --* Caption selector settings.
                    

                    - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                      

                      - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                  
                    

                    - **AribSourceSettings** *(dict) --* Arib Source Settings
                  
                    

                    - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                  
                    

                    - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                      

                      - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                  
                    

                    - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                      

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                      

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                  
                    

                    - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                      

                      - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                      

                      - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                  
                    

                    - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                      

                      - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                        

                        - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                        

                        - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                        

                        - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                        

                        - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                    
                      

                      - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                  
                
              
            
              

              - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
              

              - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
              

              - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
              

              - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
              

              - **NetworkInputSettings** *(dict) --* Input settings.
                

                - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                  

                  - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                  

                  - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                  

                  - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                  

                  - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                  

                  - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
              
                

                - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
            
              

              - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
              

              - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
              

              - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                

                - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                

                - **ColorSpaceSettings** *(dict) --* Color space settings
                  

                  - **Hdr10Settings** *(dict) --* Hdr10 Settings
                    

                    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                    

                    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                
              
                

                - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                

                - **SelectorSettings** *(dict) --* The video selector settings.
                  

                  - **VideoSelectorPid** *(dict) --* Video Selector Pid
                    

                    - **Pid** *(integer) --* Selects a specific PID from within a video source.
                
                  

                  - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                    

                    - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                
              
            
          
        
      
        

        - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
          

          - **Codec** *(string) --* Input codec
          

          - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
          

          - **Resolution** *(string) --* Input resolution, categorized coarsely
      
        

        - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
        

        - **Name** *(string) --* The name of the channel. (user-mutable)
        

        - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.
          

          - *(dict) --* Runtime details of a pipeline when a channel is running.
            

            - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment currently being ingested by this pipeline.
            

            - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
            

            - **ActiveMotionGraphicsActionName** *(string) --* The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
            

            - **ActiveMotionGraphicsUri** *(string) --* The current URI being used for HTML5 motion graphics for this pipeline.
            

            - **PipelineId** *(string) --* Pipeline ID
        
      
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        

        - **State** *(string) --* Placeholder documentation for ChannelState
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
        

        - **Vpc** *(dict) --* Settings for VPC output
          

          - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
            

            - *(string) --* Placeholder documentation for __string
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: stop_multiplex(**kwargs)

    Stops a running multiplex. If the multiplex isn't running, this action has no effect.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/StopMultiplex>`_    


    **Request Syntax** 
    ::

      response = client.stop_multiplex(
          MultiplexId='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'AvailabilityZones': [
                'string',
            ],
            'Destinations': [
                {
                    'MediaConnectSettings': {
                        'EntitlementArn': 'string'
                    }
                },
            ],
            'Id': 'string',
            'MultiplexSettings': {
                'MaximumVideoBufferDelayMilliseconds': 123,
                'TransportStreamBitrate': 123,
                'TransportStreamId': 123,
                'TransportStreamReservedBitrate': 123
            },
            'Name': 'string',
            'PipelinesRunningCount': 123,
            'ProgramCount': 123,
            'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* The action to stop the multiplex is in progress.
        

        - **Arn** *(string) --* The unique arn of the multiplex.
        

        - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
          

          - *(string) --* Placeholder documentation for __string
      
        

        - **Destinations** *(list) --* A list of the multiplex output destinations.
          

          - *(dict) --* Multiplex output destination settings
            

            - **MediaConnectSettings** *(dict) --* Multiplex MediaConnect output destination settings.
              

              - **EntitlementArn** *(string) --* The MediaConnect entitlement ARN available as a Flow source.
          
        
      
        

        - **Id** *(string) --* The unique id of the multiplex.
        

        - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
          

          - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.
          

          - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
          

          - **TransportStreamId** *(integer) --* Transport stream ID.
          

          - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.
      
        

        - **Name** *(string) --* The name of the multiplex.
        

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
        

        - **ProgramCount** *(integer) --* The number of programs in the multiplex.
        

        - **State** *(string) --* The current state of the multiplex.
        

        - **Tags** *(dict) --* A collection of key-value pairs.
          

          - *(string) --* Placeholder documentation for __string
            

            - *(string) --* Placeholder documentation for __string
      
    
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: transfer_input_device(**kwargs)

    Start an input device transfer to another AWS account. After you make the request, the other account must accept or reject the transfer.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/TransferInputDevice>`_    


    **Request Syntax** 
    ::

      response = client.transfer_input_device(
          InputDeviceId='string',
          TargetCustomerId='string',
          TargetRegion='string',
          TransferMessage='string'
      )
    :type InputDeviceId: string
    :param InputDeviceId: **[REQUIRED]** The unique ID of this input device. For example, hd-123456789abcdef.

    
    :type TargetCustomerId: string
    :param TargetCustomerId: The AWS account ID (12 digits) for the recipient of the device transfer.

    
    :type TargetRegion: string
    :param TargetRegion: The target AWS region to transfer the device.

    
    :type TransferMessage: string
    :param TransferMessage: An optional message for the recipient. Maximum 280 characters.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* The device transfer request has started.
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: update_channel(**kwargs)

    Updates a channel.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateChannel>`_    


    **Request Syntax** 
    ::

      response = client.update_channel(
          CdiInputSpecification={
              'Resolution': 'SD'|'HD'|'FHD'|'UHD'
          },
          ChannelId='string',
          Destinations=[
              {
                  'Id': 'string',
                  'MediaPackageSettings': [
                      {
                          'ChannelId': 'string'
                      },
                  ],
                  'MultiplexSettings': {
                      'MultiplexId': 'string',
                      'ProgramName': 'string'
                  },
                  'Settings': [
                      {
                          'PasswordParam': 'string',
                          'StreamName': 'string',
                          'Url': 'string',
                          'Username': 'string'
                      },
                  ]
              },
          ],
          EncoderSettings={
              'AudioDescriptions': [
                  {
                      'AudioNormalizationSettings': {
                          'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                          'AlgorithmControl': 'CORRECT_AUDIO',
                          'TargetLkfs': 123.0
                      },
                      'AudioSelectorName': 'string',
                      'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                      'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                      'CodecSettings': {
                          'AacSettings': {
                              'Bitrate': 123.0,
                              'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                              'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                              'Profile': 'HEV1'|'HEV2'|'LC',
                              'RateControlMode': 'CBR'|'VBR',
                              'RawFormat': 'LATM_LOAS'|'NONE',
                              'SampleRate': 123.0,
                              'Spec': 'MPEG2'|'MPEG4',
                              'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                          },
                          'Ac3Settings': {
                              'Bitrate': 123.0,
                              'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                              'Dialnorm': 123,
                              'DrcProfile': 'FILM_STANDARD'|'NONE',
                              'LfeFilter': 'DISABLED'|'ENABLED',
                              'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                          },
                          'Eac3Settings': {
                              'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                              'Bitrate': 123.0,
                              'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                              'DcFilter': 'DISABLED'|'ENABLED',
                              'Dialnorm': 123,
                              'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                              'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                              'LfeControl': 'LFE'|'NO_LFE',
                              'LfeFilter': 'DISABLED'|'ENABLED',
                              'LoRoCenterMixLevel': 123.0,
                              'LoRoSurroundMixLevel': 123.0,
                              'LtRtCenterMixLevel': 123.0,
                              'LtRtSurroundMixLevel': 123.0,
                              'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                              'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                              'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                              'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                              'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                              'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                          },
                          'Mp2Settings': {
                              'Bitrate': 123.0,
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                              'SampleRate': 123.0
                          },
                          'PassThroughSettings': {}
                          ,
                          'WavSettings': {
                              'BitDepth': 123.0,
                              'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                              'SampleRate': 123.0
                          }
                      },
                      'LanguageCode': 'string',
                      'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                      'Name': 'string',
                      'RemixSettings': {
                          'ChannelMappings': [
                              {
                                  'InputChannelLevels': [
                                      {
                                          'Gain': 123,
                                          'InputChannel': 123
                                      },
                                  ],
                                  'OutputChannel': 123
                              },
                          ],
                          'ChannelsIn': 123,
                          'ChannelsOut': 123
                      },
                      'StreamName': 'string'
                  },
              ],
              'AvailBlanking': {
                  'AvailBlankingImage': {
                      'PasswordParam': 'string',
                      'Uri': 'string',
                      'Username': 'string'
                  },
                  'State': 'DISABLED'|'ENABLED'
              },
              'AvailConfiguration': {
                  'AvailSettings': {
                      'Scte35SpliceInsert': {
                          'AdAvailOffset': 123,
                          'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                          'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                      },
                      'Scte35TimeSignalApos': {
                          'AdAvailOffset': 123,
                          'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                          'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                      }
                  }
              },
              'BlackoutSlate': {
                  'BlackoutSlateImage': {
                      'PasswordParam': 'string',
                      'Uri': 'string',
                      'Username': 'string'
                  },
                  'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                  'NetworkEndBlackoutImage': {
                      'PasswordParam': 'string',
                      'Uri': 'string',
                      'Username': 'string'
                  },
                  'NetworkId': 'string',
                  'State': 'DISABLED'|'ENABLED'
              },
              'CaptionDescriptions': [
                  {
                      'CaptionSelectorName': 'string',
                      'DestinationSettings': {
                          'AribDestinationSettings': {}
                          ,
                          'BurnInDestinationSettings': {
                              'Alignment': 'CENTERED'|'LEFT'|'SMART',
                              'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                              'BackgroundOpacity': 123,
                              'Font': {
                                  'PasswordParam': 'string',
                                  'Uri': 'string',
                                  'Username': 'string'
                              },
                              'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'FontOpacity': 123,
                              'FontResolution': 123,
                              'FontSize': 'string',
                              'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'OutlineSize': 123,
                              'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                              'ShadowOpacity': 123,
                              'ShadowXOffset': 123,
                              'ShadowYOffset': 123,
                              'TeletextGridControl': 'FIXED'|'SCALED',
                              'XPosition': 123,
                              'YPosition': 123
                          },
                          'DvbSubDestinationSettings': {
                              'Alignment': 'CENTERED'|'LEFT'|'SMART',
                              'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                              'BackgroundOpacity': 123,
                              'Font': {
                                  'PasswordParam': 'string',
                                  'Uri': 'string',
                                  'Username': 'string'
                              },
                              'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'FontOpacity': 123,
                              'FontResolution': 123,
                              'FontSize': 'string',
                              'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                              'OutlineSize': 123,
                              'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                              'ShadowOpacity': 123,
                              'ShadowXOffset': 123,
                              'ShadowYOffset': 123,
                              'TeletextGridControl': 'FIXED'|'SCALED',
                              'XPosition': 123,
                              'YPosition': 123
                          },
                          'EbuTtDDestinationSettings': {
                              'CopyrightHolder': 'string',
                              'FillLineGap': 'DISABLED'|'ENABLED',
                              'FontFamily': 'string',
                              'StyleControl': 'EXCLUDE'|'INCLUDE'
                          },
                          'EmbeddedDestinationSettings': {}
                          ,
                          'EmbeddedPlusScte20DestinationSettings': {}
                          ,
                          'RtmpCaptionInfoDestinationSettings': {}
                          ,
                          'Scte20PlusEmbeddedDestinationSettings': {}
                          ,
                          'Scte27DestinationSettings': {}
                          ,
                          'SmpteTtDestinationSettings': {}
                          ,
                          'TeletextDestinationSettings': {}
                          ,
                          'TtmlDestinationSettings': {
                              'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                          },
                          'WebvttDestinationSettings': {
                              'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                          }
                      },
                      'LanguageCode': 'string',
                      'LanguageDescription': 'string',
                      'Name': 'string'
                  },
              ],
              'FeatureActivations': {
                  'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
              },
              'GlobalConfiguration': {
                  'InitialAudioGain': 123,
                  'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                  'InputLossBehavior': {
                      'BlackFrameMsec': 123,
                      'InputLossImageColor': 'string',
                      'InputLossImageSlate': {
                          'PasswordParam': 'string',
                          'Uri': 'string',
                          'Username': 'string'
                      },
                      'InputLossImageType': 'COLOR'|'SLATE',
                      'RepeatFrameMsec': 123
                  },
                  'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                  'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                  'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
              },
              'MotionGraphicsConfiguration': {
                  'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                  'MotionGraphicsSettings': {
                      'HtmlMotionGraphicsSettings': {}
                      
                  }
              },
              'NielsenConfiguration': {
                  'DistributorId': 'string',
                  'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
              },
              'OutputGroups': [
                  {
                      'Name': 'string',
                      'OutputGroupSettings': {
                          'ArchiveGroupSettings': {
                              'ArchiveCdnSettings': {
                                  'ArchiveS3Settings': {
                                      'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                  }
                              },
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'RolloverInterval': 123
                          },
                          'FrameCaptureGroupSettings': {
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'FrameCaptureCdnSettings': {
                                  'FrameCaptureS3Settings': {
                                      'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                  }
                              }
                          },
                          'HlsGroupSettings': {
                              'AdMarkers': [
                                  'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                              ],
                              'BaseUrlContent': 'string',
                              'BaseUrlContent1': 'string',
                              'BaseUrlManifest': 'string',
                              'BaseUrlManifest1': 'string',
                              'CaptionLanguageMappings': [
                                  {
                                      'CaptionChannel': 123,
                                      'LanguageCode': 'string',
                                      'LanguageDescription': 'string'
                                  },
                              ],
                              'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                              'ClientCache': 'DISABLED'|'ENABLED',
                              'CodecSpecification': 'RFC_4281'|'RFC_6381',
                              'ConstantIv': 'string',
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                              'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                              'EncryptionType': 'AES128'|'SAMPLE_AES',
                              'HlsCdnSettings': {
                                  'HlsAkamaiSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                      'NumRetries': 123,
                                      'RestartDelay': 123,
                                      'Salt': 'string',
                                      'Token': 'string'
                                  },
                                  'HlsBasicPutSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'NumRetries': 123,
                                      'RestartDelay': 123
                                  },
                                  'HlsMediaStoreSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'MediaStoreStorageClass': 'TEMPORAL',
                                      'NumRetries': 123,
                                      'RestartDelay': 123
                                  },
                                  'HlsS3Settings': {
                                      'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                  },
                                  'HlsWebdavSettings': {
                                      'ConnectionRetryInterval': 123,
                                      'FilecacheDuration': 123,
                                      'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                      'NumRetries': 123,
                                      'RestartDelay': 123
                                  }
                              },
                              'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                              'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                              'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                              'IndexNSegments': 123,
                              'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                              'IvInManifest': 'EXCLUDE'|'INCLUDE',
                              'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                              'KeepSegments': 123,
                              'KeyFormat': 'string',
                              'KeyFormatVersions': 'string',
                              'KeyProviderSettings': {
                                  'StaticKeySettings': {
                                      'KeyProviderServer': {
                                          'PasswordParam': 'string',
                                          'Uri': 'string',
                                          'Username': 'string'
                                      },
                                      'StaticKeyValue': 'string'
                                  }
                              },
                              'ManifestCompression': 'GZIP'|'NONE',
                              'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                              'MinSegmentLength': 123,
                              'Mode': 'LIVE'|'VOD',
                              'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                              'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                              'ProgramDateTimePeriod': 123,
                              'RedundantManifest': 'DISABLED'|'ENABLED',
                              'SegmentLength': 123,
                              'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                              'SegmentsPerSubdirectory': 123,
                              'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                              'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                              'TimedMetadataId3Period': 123,
                              'TimestampDeltaMilliseconds': 123,
                              'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                          },
                          'MediaPackageGroupSettings': {
                              'Destination': {
                                  'DestinationRefId': 'string'
                              }
                          },
                          'MsSmoothGroupSettings': {
                              'AcquisitionPointId': 'string',
                              'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                              'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                              'ConnectionRetryInterval': 123,
                              'Destination': {
                                  'DestinationRefId': 'string'
                              },
                              'EventId': 'string',
                              'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                              'EventStopBehavior': 'NONE'|'SEND_EOS',
                              'FilecacheDuration': 123,
                              'FragmentLength': 123,
                              'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                              'NumRetries': 123,
                              'RestartDelay': 123,
                              'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                              'SendDelayMs': 123,
                              'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                              'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                              'TimestampOffset': 'string',
                              'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                          },
                          'MultiplexGroupSettings': {}
                          ,
                          'RtmpGroupSettings': {
                              'AdMarkers': [
                                  'ON_CUE_POINT_SCTE35',
                              ],
                              'AuthenticationScheme': 'AKAMAI'|'COMMON',
                              'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                              'CacheLength': 123,
                              'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                              'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                              'RestartDelay': 123
                          },
                          'UdpGroupSettings': {
                              'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                              'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                              'TimedMetadataId3Period': 123
                          }
                      },
                      'Outputs': [
                          {
                              'AudioDescriptionNames': [
                                  'string',
                              ],
                              'CaptionDescriptionNames': [
                                  'string',
                              ],
                              'OutputName': 'string',
                              'OutputSettings': {
                                  'ArchiveOutputSettings': {
                                      'ContainerSettings': {
                                          'M2tsSettings': {
                                              'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                              'Arib': 'DISABLED'|'ENABLED',
                                              'AribCaptionsPid': 'string',
                                              'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                              'AudioBufferModel': 'ATSC'|'DVB',
                                              'AudioFramesPerPes': 123,
                                              'AudioPids': 'string',
                                              'AudioStreamType': 'ATSC'|'DVB',
                                              'Bitrate': 123,
                                              'BufferModel': 'MULTIPLEX'|'NONE',
                                              'CcDescriptor': 'DISABLED'|'ENABLED',
                                              'DvbNitSettings': {
                                                  'NetworkId': 123,
                                                  'NetworkName': 'string',
                                                  'RepInterval': 123
                                              },
                                              'DvbSdtSettings': {
                                                  'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                  'RepInterval': 123,
                                                  'ServiceName': 'string',
                                                  'ServiceProviderName': 'string'
                                              },
                                              'DvbSubPids': 'string',
                                              'DvbTdtSettings': {
                                                  'RepInterval': 123
                                              },
                                              'DvbTeletextPid': 'string',
                                              'Ebif': 'NONE'|'PASSTHROUGH',
                                              'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                              'EbpLookaheadMs': 123,
                                              'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                              'EcmPid': 'string',
                                              'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                              'EtvPlatformPid': 'string',
                                              'EtvSignalPid': 'string',
                                              'FragmentTime': 123.0,
                                              'Klv': 'NONE'|'PASSTHROUGH',
                                              'KlvDataPids': 'string',
                                              'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'NullPacketBitrate': 123.0,
                                              'PatInterval': 123,
                                              'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                              'PcrPeriod': 123,
                                              'PcrPid': 'string',
                                              'PmtInterval': 123,
                                              'PmtPid': 'string',
                                              'ProgramNum': 123,
                                              'RateMode': 'CBR'|'VBR',
                                              'Scte27Pids': 'string',
                                              'Scte35Control': 'NONE'|'PASSTHROUGH',
                                              'Scte35Pid': 'string',
                                              'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                              'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                              'SegmentationTime': 123.0,
                                              'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'TimedMetadataPid': 'string',
                                              'TransportStreamId': 123,
                                              'VideoPid': 'string'
                                          },
                                          'RawSettings': {}
                                          
                                      },
                                      'Extension': 'string',
                                      'NameModifier': 'string'
                                  },
                                  'FrameCaptureOutputSettings': {
                                      'NameModifier': 'string'
                                  },
                                  'HlsOutputSettings': {
                                      'H265PackagingType': 'HEV1'|'HVC1',
                                      'HlsSettings': {
                                          'AudioOnlyHlsSettings': {
                                              'AudioGroupId': 'string',
                                              'AudioOnlyImage': {
                                                  'PasswordParam': 'string',
                                                  'Uri': 'string',
                                                  'Username': 'string'
                                              },
                                              'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                              'SegmentType': 'AAC'|'FMP4'
                                          },
                                          'Fmp4HlsSettings': {
                                              'AudioRenditionSets': 'string',
                                              'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                          },
                                          'FrameCaptureHlsSettings': {}
                                          ,
                                          'StandardHlsSettings': {
                                              'AudioRenditionSets': 'string',
                                              'M3u8Settings': {
                                                  'AudioFramesPerPes': 123,
                                                  'AudioPids': 'string',
                                                  'EcmPid': 'string',
                                                  'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                  'PatInterval': 123,
                                                  'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                  'PcrPeriod': 123,
                                                  'PcrPid': 'string',
                                                  'PmtInterval': 123,
                                                  'PmtPid': 'string',
                                                  'ProgramNum': 123,
                                                  'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                  'Scte35Pid': 'string',
                                                  'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                  'TimedMetadataPid': 'string',
                                                  'TransportStreamId': 123,
                                                  'VideoPid': 'string'
                                              }
                                          }
                                      },
                                      'NameModifier': 'string',
                                      'SegmentModifier': 'string'
                                  },
                                  'MediaPackageOutputSettings': {}
                                  ,
                                  'MsSmoothOutputSettings': {
                                      'H265PackagingType': 'HEV1'|'HVC1',
                                      'NameModifier': 'string'
                                  },
                                  'MultiplexOutputSettings': {
                                      'Destination': {
                                          'DestinationRefId': 'string'
                                      }
                                  },
                                  'RtmpOutputSettings': {
                                      'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                      'ConnectionRetryInterval': 123,
                                      'Destination': {
                                          'DestinationRefId': 'string'
                                      },
                                      'NumRetries': 123
                                  },
                                  'UdpOutputSettings': {
                                      'BufferMsec': 123,
                                      'ContainerSettings': {
                                          'M2tsSettings': {
                                              'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                              'Arib': 'DISABLED'|'ENABLED',
                                              'AribCaptionsPid': 'string',
                                              'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                              'AudioBufferModel': 'ATSC'|'DVB',
                                              'AudioFramesPerPes': 123,
                                              'AudioPids': 'string',
                                              'AudioStreamType': 'ATSC'|'DVB',
                                              'Bitrate': 123,
                                              'BufferModel': 'MULTIPLEX'|'NONE',
                                              'CcDescriptor': 'DISABLED'|'ENABLED',
                                              'DvbNitSettings': {
                                                  'NetworkId': 123,
                                                  'NetworkName': 'string',
                                                  'RepInterval': 123
                                              },
                                              'DvbSdtSettings': {
                                                  'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                  'RepInterval': 123,
                                                  'ServiceName': 'string',
                                                  'ServiceProviderName': 'string'
                                              },
                                              'DvbSubPids': 'string',
                                              'DvbTdtSettings': {
                                                  'RepInterval': 123
                                              },
                                              'DvbTeletextPid': 'string',
                                              'Ebif': 'NONE'|'PASSTHROUGH',
                                              'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                              'EbpLookaheadMs': 123,
                                              'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                              'EcmPid': 'string',
                                              'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                              'EtvPlatformPid': 'string',
                                              'EtvSignalPid': 'string',
                                              'FragmentTime': 123.0,
                                              'Klv': 'NONE'|'PASSTHROUGH',
                                              'KlvDataPids': 'string',
                                              'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'NullPacketBitrate': 123.0,
                                              'PatInterval': 123,
                                              'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                              'PcrPeriod': 123,
                                              'PcrPid': 'string',
                                              'PmtInterval': 123,
                                              'PmtPid': 'string',
                                              'ProgramNum': 123,
                                              'RateMode': 'CBR'|'VBR',
                                              'Scte27Pids': 'string',
                                              'Scte35Control': 'NONE'|'PASSTHROUGH',
                                              'Scte35Pid': 'string',
                                              'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                              'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                              'SegmentationTime': 123.0,
                                              'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                              'TimedMetadataPid': 'string',
                                              'TransportStreamId': 123,
                                              'VideoPid': 'string'
                                          }
                                      },
                                      'Destination': {
                                          'DestinationRefId': 'string'
                                      },
                                      'FecOutputSettings': {
                                          'ColumnDepth': 123,
                                          'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                          'RowLength': 123
                                      }
                                  }
                              },
                              'VideoDescriptionName': 'string'
                          },
                      ]
                  },
              ],
              'TimecodeConfig': {
                  'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                  'SyncThreshold': 123
              },
              'VideoDescriptions': [
                  {
                      'CodecSettings': {
                          'FrameCaptureSettings': {
                              'CaptureInterval': 123,
                              'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                          },
                          'H264Settings': {
                              'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                              'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                              'Bitrate': 123,
                              'BufFillPct': 123,
                              'BufSize': 123,
                              'ColorMetadata': 'IGNORE'|'INSERT',
                              'ColorSpaceSettings': {
                                  'ColorSpacePassthroughSettings': {}
                                  ,
                                  'Rec601Settings': {}
                                  ,
                                  'Rec709Settings': {}
                                  
                              },
                              'EntropyEncoding': 'CABAC'|'CAVLC',
                              'FilterSettings': {
                                  'TemporalFilterSettings': {
                                      'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                      'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                  }
                              },
                              'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                              'FlickerAq': 'DISABLED'|'ENABLED',
                              'ForceFieldPictures': 'DISABLED'|'ENABLED',
                              'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                              'FramerateDenominator': 123,
                              'FramerateNumerator': 123,
                              'GopBReference': 'DISABLED'|'ENABLED',
                              'GopClosedCadence': 123,
                              'GopNumBFrames': 123,
                              'GopSize': 123.0,
                              'GopSizeUnits': 'FRAMES'|'SECONDS',
                              'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                              'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                              'MaxBitrate': 123,
                              'MinIInterval': 123,
                              'NumRefFrames': 123,
                              'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                              'ParDenominator': 123,
                              'ParNumerator': 123,
                              'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                              'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                              'QvbrQualityLevel': 123,
                              'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                              'ScanType': 'INTERLACED'|'PROGRESSIVE',
                              'SceneChangeDetect': 'DISABLED'|'ENABLED',
                              'Slices': 123,
                              'Softness': 123,
                              'SpatialAq': 'DISABLED'|'ENABLED',
                              'SubgopLength': 'DYNAMIC'|'FIXED',
                              'Syntax': 'DEFAULT'|'RP2027',
                              'TemporalAq': 'DISABLED'|'ENABLED',
                              'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                          },
                          'H265Settings': {
                              'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                              'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                              'AlternativeTransferFunction': 'INSERT'|'OMIT',
                              'Bitrate': 123,
                              'BufSize': 123,
                              'ColorMetadata': 'IGNORE'|'INSERT',
                              'ColorSpaceSettings': {
                                  'ColorSpacePassthroughSettings': {}
                                  ,
                                  'Hdr10Settings': {
                                      'MaxCll': 123,
                                      'MaxFall': 123
                                  },
                                  'Rec601Settings': {}
                                  ,
                                  'Rec709Settings': {}
                                  
                              },
                              'FilterSettings': {
                                  'TemporalFilterSettings': {
                                      'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                      'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                  }
                              },
                              'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                              'FlickerAq': 'DISABLED'|'ENABLED',
                              'FramerateDenominator': 123,
                              'FramerateNumerator': 123,
                              'GopClosedCadence': 123,
                              'GopSize': 123.0,
                              'GopSizeUnits': 'FRAMES'|'SECONDS',
                              'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                              'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                              'MaxBitrate': 123,
                              'MinIInterval': 123,
                              'ParDenominator': 123,
                              'ParNumerator': 123,
                              'Profile': 'MAIN'|'MAIN_10BIT',
                              'QvbrQualityLevel': 123,
                              'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                              'ScanType': 'INTERLACED'|'PROGRESSIVE',
                              'SceneChangeDetect': 'DISABLED'|'ENABLED',
                              'Slices': 123,
                              'Tier': 'HIGH'|'MAIN',
                              'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                          },
                          'Mpeg2Settings': {
                              'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                              'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                              'ColorMetadata': 'IGNORE'|'INSERT',
                              'ColorSpace': 'AUTO'|'PASSTHROUGH',
                              'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                              'FilterSettings': {
                                  'TemporalFilterSettings': {
                                      'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                      'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                  }
                              },
                              'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                              'FramerateDenominator': 123,
                              'FramerateNumerator': 123,
                              'GopClosedCadence': 123,
                              'GopNumBFrames': 123,
                              'GopSize': 123.0,
                              'GopSizeUnits': 'FRAMES'|'SECONDS',
                              'ScanType': 'INTERLACED'|'PROGRESSIVE',
                              'SubgopLength': 'DYNAMIC'|'FIXED',
                              'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                          }
                      },
                      'Height': 123,
                      'Name': 'string',
                      'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                      'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                      'Sharpness': 123,
                      'Width': 123
                  },
              ]
          },
          InputAttachments=[
              {
                  'AutomaticInputFailoverSettings': {
                      'ErrorClearTimeMsec': 123,
                      'FailoverConditions': [
                          {
                              'FailoverConditionSettings': {
                                  'AudioSilenceSettings': {
                                      'AudioSelectorName': 'string',
                                      'AudioSilenceThresholdMsec': 123
                                  },
                                  'InputLossSettings': {
                                      'InputLossThresholdMsec': 123
                                  },
                                  'VideoBlackSettings': {
                                      'BlackDetectThreshold': 123.0,
                                      'VideoBlackThresholdMsec': 123
                                  }
                              }
                          },
                      ],
                      'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                      'SecondaryInputId': 'string'
                  },
                  'InputAttachmentName': 'string',
                  'InputId': 'string',
                  'InputSettings': {
                      'AudioSelectors': [
                          {
                              'Name': 'string',
                              'SelectorSettings': {
                                  'AudioHlsRenditionSelection': {
                                      'GroupId': 'string',
                                      'Name': 'string'
                                  },
                                  'AudioLanguageSelection': {
                                      'LanguageCode': 'string',
                                      'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                  },
                                  'AudioPidSelection': {
                                      'Pid': 123
                                  },
                                  'AudioTrackSelection': {
                                      'Tracks': [
                                          {
                                              'Track': 123
                                          },
                                      ]
                                  }
                              }
                          },
                      ],
                      'CaptionSelectors': [
                          {
                              'LanguageCode': 'string',
                              'Name': 'string',
                              'SelectorSettings': {
                                  'AncillarySourceSettings': {
                                      'SourceAncillaryChannelNumber': 123
                                  },
                                  'AribSourceSettings': {}
                                  ,
                                  'DvbSubSourceSettings': {
                                      'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                      'Pid': 123
                                  },
                                  'EmbeddedSourceSettings': {
                                      'Convert608To708': 'DISABLED'|'UPCONVERT',
                                      'Scte20Detection': 'AUTO'|'OFF',
                                      'Source608ChannelNumber': 123,
                                      'Source608TrackNumber': 123
                                  },
                                  'Scte20SourceSettings': {
                                      'Convert608To708': 'DISABLED'|'UPCONVERT',
                                      'Source608ChannelNumber': 123
                                  },
                                  'Scte27SourceSettings': {
                                      'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                      'Pid': 123
                                  },
                                  'TeletextSourceSettings': {
                                      'OutputRectangle': {
                                          'Height': 123.0,
                                          'LeftOffset': 123.0,
                                          'TopOffset': 123.0,
                                          'Width': 123.0
                                      },
                                      'PageNumber': 'string'
                                  }
                              }
                          },
                      ],
                      'DeblockFilter': 'DISABLED'|'ENABLED',
                      'DenoiseFilter': 'DISABLED'|'ENABLED',
                      'FilterStrength': 123,
                      'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                      'NetworkInputSettings': {
                          'HlsInputSettings': {
                              'Bandwidth': 123,
                              'BufferSegments': 123,
                              'Retries': 123,
                              'RetryInterval': 123,
                              'Scte35Source': 'MANIFEST'|'SEGMENTS'
                          },
                          'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                      },
                      'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                      'SourceEndBehavior': 'CONTINUE'|'LOOP',
                      'VideoSelector': {
                          'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                          'ColorSpaceSettings': {
                              'Hdr10Settings': {
                                  'MaxCll': 123,
                                  'MaxFall': 123
                              }
                          },
                          'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                          'SelectorSettings': {
                              'VideoSelectorPid': {
                                  'Pid': 123
                              },
                              'VideoSelectorProgramId': {
                                  'ProgramId': 123
                              }
                          }
                      }
                  }
              },
          ],
          InputSpecification={
              'Codec': 'MPEG2'|'AVC'|'HEVC',
              'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
              'Resolution': 'SD'|'HD'|'UHD'
          },
          LogLevel='ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
          Name='string',
          RoleArn='string'
      )
    :type CdiInputSpecification: dict
    :param CdiInputSpecification: Specification of CDI inputs for this channel

    
      - **Resolution** *(string) --* Maximum CDI input resolution

      
    
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** channel ID

    
    :type Destinations: list
    :param Destinations: A list of output destinations for this channel.

    
      - *(dict) --* Placeholder documentation for OutputDestination

      
        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        
        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.

        
          - *(dict) --* MediaPackage Output Destination Settings

          
            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.

            
          
      
        - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.

        
          - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.

          
          - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.

          
        
        - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.

        
          - *(dict) --* Placeholder documentation for OutputDestinationSettings

          
            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

            
            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

            
            - **Url** *(string) --* A URL specifying a destination

            
            - **Username** *(string) --* username for destination

            
          
      
      
  
    :type EncoderSettings: dict
    :param EncoderSettings: The encoder settings for this channel.

    
      - **AudioDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfAudioDescription

      
        - *(dict) --* Audio Description

        
          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          
            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            
            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.

            
            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.

            
          
          - **AudioSelectorName** *(string) --* **[REQUIRED]** The name of the AudioSelector used as the source for this AudioDescription.

          
          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.

          
          - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.

          
          - **CodecSettings** *(dict) --* Audio codec settings.

          
            - **AacSettings** *(dict) --* Aac Settings

            
              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.

              
              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

              
              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.

              
              - **Profile** *(string) --* AAC Profile.

              
              - **RateControlMode** *(string) --* Rate Control Mode.

              
              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              
              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.

              
              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.

              
              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.

              
            
            - **Ac3Settings** *(dict) --* Ac3 Settings

            
              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.

              
              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              
              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.

              
              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.

              
              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.

              
              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              
              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.

              
            
            - **Eac3Settings** *(dict) --* Eac3 Settings

            
              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.

              
              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.

              
              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              
              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.

              
              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.

              
              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.

              
              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              
              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.

              
              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel

              
              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              
              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.

              
              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.

              
              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.

              
              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.

              
              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.

              
              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.

              
              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.

              
              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.

              
              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.

              
              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.

              
            
            - **Mp2Settings** *(dict) --* Mp2 Settings

            
              - **Bitrate** *(float) --* Average bitrate in bits/second.

              
              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).

              
              - **SampleRate** *(float) --* Sample rate in Hz.

              
            
            - **PassThroughSettings** *(dict) --* Pass Through Settings

            
            
            - **WavSettings** *(dict) --* Wav Settings

            
              - **BitDepth** *(float) --* Bits per sample.

              
              - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.

              
              - **SampleRate** *(float) --* Sample rate in Hz.

              
            
          
          - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.

          
          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.

          
          - **Name** *(string) --* **[REQUIRED]** The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.

          
          - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.

          
            - **ChannelMappings** *(list) --* **[REQUIRED]** Mapping of input channels to output channels, with appropriate gain adjustments.

            
              - *(dict) --* Audio Channel Mapping

              
                - **InputChannelLevels** *(list) --* **[REQUIRED]** Indices and gain values for each input channel that should be remixed into this output channel.

                
                  - *(dict) --* Input Channel Level

                  
                    - **Gain** *(integer) --* **[REQUIRED]** Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.

                    
                    - **InputChannel** *(integer) --* **[REQUIRED]** The index of the input channel used as a source.

                    
                  
              
                - **OutputChannel** *(integer) --* **[REQUIRED]** The index of the output channel being produced.

                
              
          
            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            
            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8

            
          
          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).

          
        
    
      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      
        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.

        
          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          
          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          
          - **Username** *(string) --* Documentation update needed

          
        
        - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.

        
      
      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      
        - **AvailSettings** *(dict) --* Ad avail settings.

        
          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          
            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.

            
            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
          
          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          
            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.

            
            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            
          
        
      
      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      
        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.

        
          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          
          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          
          - **Username** *(string) --* Documentation update needed

          
        
        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".

        
        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.

        
          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          
          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          
          - **Username** *(string) --* Documentation update needed

          
        
        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        
        - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.

        
      
      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      
        - *(dict) --* Caption Description

        
          - **CaptionSelectorName** *(string) --* **[REQUIRED]** Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.

          
          - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.

          
            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            
            
            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            
              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              
                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                
                - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                
                - **Username** *(string) --* Documentation update needed

                
              
              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              
              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.

              
              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.

              
              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.

              
              - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.

              
              - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.

              
            
            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            
              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.

              
              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              
                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                
                - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                
                - **Username** *(string) --* Documentation update needed

                
              
              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              
              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.

              
              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              
              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.

              
              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.

              
              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.

              
              - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
              - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

              
            
            - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings

            
              - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML

              
              - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.

              
              - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.

              
              - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.

              
            
            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            
            
            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings

            
            
            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings

            
            
            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings

            
            
            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            
            
            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            
            
            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            
            
            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            
              - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.

              
            
            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

            
              - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.

              
            
          
          - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/

          
          - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).

          
          - **Name** *(string) --* **[REQUIRED]** Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.

          
        
    
      - **FeatureActivations** *(dict) --* Feature Activations

      
        - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.

        
      
      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.

      
        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.

        
        - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).

        
        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        
          - **BlackFrameMsec** *(integer) --* Documentation update needed

          
          - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.

          
          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.

          
            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

            
            - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            
            - **Username** *(string) --* Documentation update needed

            
          
          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.

          
          - **RepeatFrameMsec** *(integer) --* Documentation update needed

          
        
        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.

        
        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.

        
        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.

        
      
      - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.

      
        - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion

        
        - **MotionGraphicsSettings** *(dict) --* **[REQUIRED]** Motion Graphics Settings

        
          - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings

          
          
        
      
      - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.

      
        - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.

        
        - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging

        
      
      - **OutputGroups** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutputGroup

      
        - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.

        
          - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.

          
          - **OutputGroupSettings** *(dict) --* **[REQUIRED]** Settings associated with the output group.

          
            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            
              - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              
                - **ArchiveS3Settings** *(dict) --* Archive S3 Settings

                
                  - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.

                  
                
              
              - **Destination** *(dict) --* **[REQUIRED]** A directory and base filename where archive files should be written.

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.

              
            
            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            
              - **Destination** *(dict) --* **[REQUIRED]** The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              
                - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings

                
                  - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.

                  
                
              
            
            - **HlsGroupSettings** *(dict) --* Hls Group Settings

            
              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.

              
                - *(string) --* Hls Ad Markers

                
            
              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.

              
              - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.

              
              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.

              
              - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.

              
              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              
                - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.

                
                  - **CaptionChannel** *(integer) --* **[REQUIRED]** The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)

                  
                  - **LanguageCode** *(string) --* **[REQUIRED]** Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)

                  
                  - **LanguageDescription** *(string) --* **[REQUIRED]** Textual description of language

                  
                
            
              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.

              
              - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.

              
              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.

              
              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.

              
              - **Destination** *(dict) --* **[REQUIRED]** A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              
              - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.

              
              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.

              
              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              
                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  
                  - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.

                  
                
                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                
                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                
                - **HlsS3Settings** *(dict) --* Hls S3 Settings

                
                  - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.

                  
                
                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.

                  
                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

                  
                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.

                  
                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.

                  
                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

                  
                
              
              - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging

              
              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"

              
              - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.

              
              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.

              
              - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.

              
              - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.

              
              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.

              
              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.

              
              - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.

              
              - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).

              
              - **KeyProviderSettings** *(dict) --* The key provider settings.

              
                - **StaticKeySettings** *(dict) --* Static Key Settings

                
                  - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.

                  
                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                    
                    - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                    
                    - **Username** *(string) --* Documentation update needed

                    
                  
                  - **StaticKeyValue** *(string) --* **[REQUIRED]** Static key value as a 32 character hexadecimal string.

                  
                
              
              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              
              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.

              
              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.

              
              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.

              
              - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.

              
              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.

              
              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              
              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              
              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.

              
              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.

              
              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.

              
              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.

              
              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              
              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              
              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.

              
              - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.

              
            
            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            
              - **Destination** *(dict) --* **[REQUIRED]** MediaPackage channel destination.

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
            
            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            
              - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.

              
              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.

              
              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.

              
              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.

              
              - **Destination** *(dict) --* **[REQUIRED]** Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.

              
                - **DestinationRefId** *(string) --* Placeholder documentation for __string

                
              
              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.

              
              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.

              
              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event

              
              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.

              
              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.

              
              - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.

              
              - **NumRetries** *(integer) --* Number of retry attempts.

              
              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.

              
              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.

              
              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.

              
              - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.

              
              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.

              
              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.

              
              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset

              
            
            - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings

            
            
            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            
              - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.

              
                - *(string) --* Rtmp Ad Markers

                
            
              - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN

              
              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.

              
              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.

              
              - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.

              
              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.

              
              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.

              
            
            - **UdpGroupSettings** *(dict) --* Udp Group Settings

            
              - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.

              
              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              
              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              
            
          
          - **Outputs** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutput

          
            - *(dict) --* Output settings. There can be multiple outputs within a group.

            
              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.

              
                - *(string) --* Placeholder documentation for __string

                
            
              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.

              
                - *(string) --* Placeholder documentation for __string

                
            
              - **OutputName** *(string) --* The name used to identify an output.

              
              - **OutputSettings** *(dict) --* **[REQUIRED]** Output type-specific settings.

              
                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                
                  - **ContainerSettings** *(dict) --* **[REQUIRED]** Settings specific to the container type of the file.

                  
                    - **M2tsSettings** *(dict) --* M2ts Settings

                    
                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.

                      
                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.

                      
                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.

                      
                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      
                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.

                      
                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                      
                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.

                      
                      - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.

                      
                      - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.

                      
                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.

                      
                        - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the Network Information Table (NIT).

                        
                        - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.

                      
                        - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                        - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                        - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                      
                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.

                      
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.

                      
                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.

                      
                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.

                      
                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                      
                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      
                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.

                      
                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.

                      
                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.

                      
                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                      
                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.

                      
                      - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.

                      
                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.

                      
                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.

                      
                      - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.

                      
                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.

                      
                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.

                      
                      - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.

                      
                      - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.

                      
                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.

                      
                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.

                      
                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                    
                    - **RawSettings** *(dict) --* Raw Settings

                    
                    
                  
                  - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.

                  
                  - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.

                  
                
                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                
                  - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.

                  
                
                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                
                  - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.

                  
                  - **HlsSettings** *(dict) --* **[REQUIRED]** Settings regarding the underlying stream. These settings are different for audio-only outputs.

                  
                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    
                      - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.

                      
                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      
                        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

                        
                        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

                        
                        - **Username** *(string) --* Documentation update needed

                        
                      
                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                      
                      - **SegmentType** *(string) --* Specifies the segment type.

                      
                    
                    - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings

                    
                      - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.

                      
                      - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                      
                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.

                      
                    
                    - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings

                    
                    
                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    
                      - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.

                      
                      - **M3u8Settings** *(dict) --* **[REQUIRED]** Settings information for the .m3u8 container

                      
                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.

                        
                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.

                        
                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        
                        - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                        
                        - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.

                        
                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.

                        
                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.

                        
                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.

                        
                        - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.

                        
                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.

                        
                        - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.

                        
                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.

                        
                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.

                        
                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.

                        
                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        
                        - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.

                        
                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.

                        
                      
                    
                  
                  - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.

                  
                  - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.

                  
                
                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                
                
                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                
                  - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.

                  
                  - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.

                  
                
                - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings

                
                  - **Destination** *(dict) --* **[REQUIRED]** Destination is a Multiplex.

                  
                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    
                  
                
                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                
                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.

                  
                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.

                  
                  - **Destination** *(dict) --* **[REQUIRED]** The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.

                  
                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    
                  
                  - **NumRetries** *(integer) --* Number of retry attempts.

                  
                
                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                
                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.

                  
                  - **ContainerSettings** *(dict) --* **[REQUIRED]** Udp Container Settings

                  
                    - **M2tsSettings** *(dict) --* M2ts Settings

                    
                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.

                      
                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.

                      
                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.

                      
                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      
                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.

                      
                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                      
                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.

                      
                      - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.

                      
                      - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.

                      
                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.

                      
                        - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the Network Information Table (NIT).

                        
                        - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.

                      
                        - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.

                        
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                        - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                        - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.

                        
                      
                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.

                      
                        - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.

                        
                      
                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.

                      
                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.

                      
                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.

                      
                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                      
                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      
                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.

                      
                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.

                      
                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.

                      
                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.

                      
                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.

                      
                      - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.

                      
                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.

                      
                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.

                      
                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.

                      
                      - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.

                      
                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.

                      
                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.

                      
                      - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.

                      
                      - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.

                      
                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.

                      
                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                      - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.

                      
                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      
                    
                  
                  - **Destination** *(dict) --* **[REQUIRED]** Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                  
                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    
                  
                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.

                  
                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.

                    
                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    
                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.

                    
                  
                
              
              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.

              
            
        
        
    
      - **TimecodeConfig** *(dict) --* **[REQUIRED]** Contains settings used to acquire and adjust timecode information from inputs.

      
        - **Source** *(string) --* **[REQUIRED]** Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

        
        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.

        
      
      - **VideoDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfVideoDescription

      
        - *(dict) --* Video settings for this stream.

        
          - **CodecSettings** *(dict) --* Video codec settings.

          
            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            
              - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.

              
              - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.

              
            
            - **H264Settings** *(dict) --* H264 Settings

            
              - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.

              
              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.

              
              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

              
              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).

              
              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              
              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              
              - **ColorSpaceSettings** *(dict) --* Color Space settings

              
                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output

                
                
                - **Rec601Settings** *(dict) --* Rec601 Settings

                
                
                - **Rec709Settings** *(dict) --* Rec709 Settings

                
                
              
              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.

              
              - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.

              
                - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings

                
                  - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.

                  
                  - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.

                  
                
              
              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.

              
              - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.

              
              - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.

              
              - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.

              
              - **FramerateDenominator** *(integer) --* Framerate denominator.

              
              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.

              
              - **GopBReference** *(string) --* Documentation update needed

              
              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.

              
              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              
              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.

              
              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.

              
              - **Level** *(string) --* H.264 Level.

              
              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.

              
              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.

              
              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

              
              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.

              
              - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.

              
              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              
              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              
              - **Profile** *(string) --* H.264 Profile.

              
              - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.

              
              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide

              
              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.

              
              - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.

              
              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.

              
              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.

              
              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.

              
              - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.

              
              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.

              
              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              
              - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.

              
              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config

              
            
            - **H265Settings** *(dict) --* H265 Settings

            
              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.

              
              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.

              
              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.

              
              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

              
              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              
              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              
              - **ColorSpaceSettings** *(dict) --* Color Space settings

              
                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output

                
                
                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                
                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.

                  
                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.

                  
                
                - **Rec601Settings** *(dict) --* Rec601 Settings

                
                
                - **Rec709Settings** *(dict) --* Rec709 Settings

                
                
              
              - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.

              
                - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings

                
                  - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.

                  
                  - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.

                  
                
              
              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.

              
              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.

              
              - **FramerateDenominator** *(integer) --* **[REQUIRED]** Framerate denominator.

              
              - **FramerateNumerator** *(integer) --* **[REQUIRED]** Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.

              
              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.

              
              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.

              
              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.

              
              - **Level** *(string) --* H.265 Level.

              
              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.

              
              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              
              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

              
              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              
              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              
              - **Profile** *(string) --* H.265 Profile.

              
              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M

              
              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.

              
              - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.

              
              - **SceneChangeDetect** *(string) --* Scene change detection.

              
              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.

              
              - **Tier** *(string) --* H.265 Tier.

              
              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config

              
            
            - **Mpeg2Settings** *(dict) --* Mpeg2 Settings

            
              - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.

              
              - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.

              
              - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.

              
              - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.

              
              - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.

              
              - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.

              
                - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings

                
                  - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.

                  
                  - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.

                  
                
              
              - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.

              
              - **FramerateDenominator** *(integer) --* **[REQUIRED]** description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.

              
              - **FramerateNumerator** *(integer) --* **[REQUIRED]** The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.

              
              - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.

              
              - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.

              
              - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.

              
              - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.

              
              - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).

              
              - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.

              
              - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.

              
            
          
          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.

          
          - **Name** *(string) --* **[REQUIRED]** The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.

          
          - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output

          
          - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.

          
          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.

          
          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.

          
        
    
    
    :type InputAttachments: list
    :param InputAttachments: Placeholder documentation for __listOfInputAttachment

    
      - *(dict) --* Placeholder documentation for InputAttachment

      
        - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.

        
          - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.

          
          - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.

          
            - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.

            
              - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.

              
                - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.

                
                  - **AudioSelectorName** *(string) --* **[REQUIRED]** The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.

                  
                  - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.

                  
                
                - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.

                
                  - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.

                  
                
                - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.

                
                  - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.

                  
                  - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.

                  
                
              
            
        
          - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.

          
          - **SecondaryInputId** *(string) --* **[REQUIRED]** The input ID of the secondary input in the automatic input failover pair.

          
        
        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.

        
        - **InputId** *(string) --* The ID of the input

        
        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

        
          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.

          
            - *(dict) --* Audio Selector

            
              - **Name** *(string) --* **[REQUIRED]** The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.

              
              - **SelectorSettings** *(dict) --* The audio selector settings.

              
                - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection

                
                  - **GroupId** *(string) --* **[REQUIRED]** Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.

                  
                  - **Name** *(string) --* **[REQUIRED]** Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.

                  
                
                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                
                  - **LanguageCode** *(string) --* **[REQUIRED]** Selects a specific three-letter language code from within an audio source.

                  
                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.

                  
                
                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                
                  - **Pid** *(integer) --* **[REQUIRED]** Selects a specific PID from within a source.

                  
                
                - **AudioTrackSelection** *(dict) --* Audio Track Selection

                
                  - **Tracks** *(list) --* **[REQUIRED]** Selects one or more unique audio tracks from within a source.

                  
                    - *(dict) --* Audio Track

                    
                      - **Track** *(integer) --* **[REQUIRED]** 1-based integer value that maps to a specific audio track

                      
                    
                
                
              
            
        
          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.

          
            - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.

            
              - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.

              
              - **Name** *(string) --* **[REQUIRED]** Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.

              
              - **SelectorSettings** *(dict) --* Caption selector settings.

              
                - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings

                
                  - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.

                  
                
                - **AribSourceSettings** *(dict) --* Arib Source Settings

                
                
                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                
                  - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.

                  
                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.

                  
                
                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                
                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.

                  
                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  
                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.

                  
                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                  
                
                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                
                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.

                  
                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.

                  
                
                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                
                  - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.

                  
                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.

                  
                
                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                
                  - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed

                  
                    - **Height** *(float) --* **[REQUIRED]** See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.

                    
                    - **LeftOffset** *(float) --* **[REQUIRED]** Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.

                    
                    - **TopOffset** *(float) --* **[REQUIRED]** See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.

                    
                    - **Width** *(float) --* **[REQUIRED]** See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.

                    
                  
                  - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.

                  
                
              
            
        
          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          
          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          
          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).

          
          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type

          
          - **NetworkInputSettings** *(dict) --* Input settings.

          
            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.

            
              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.

              
              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.

              
              - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.

              
              - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.

              
              - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.

              
            
            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.

            
          
          - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.

          
          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.

          
          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.

          
            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.

            
            - **ColorSpaceSettings** *(dict) --* Color space settings

            
              - **Hdr10Settings** *(dict) --* Hdr10 Settings

              
                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.

                
                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.

                
              
            
            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.

            
            - **SelectorSettings** *(dict) --* The video selector settings.

            
              - **VideoSelectorPid** *(dict) --* Video Selector Pid

              
                - **Pid** *(integer) --* Selects a specific PID from within a video source.

                
              
              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

              
                - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.

                
              
            
          
        
      
  
    :type InputSpecification: dict
    :param InputSpecification: Specification of network and file inputs for this channel

    
      - **Codec** *(string) --* Input codec

      
      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      
      - **Resolution** *(string) --* Input resolution, categorized coarsely

      
    
    :type LogLevel: string
    :param LogLevel: The log level to write to CloudWatch Logs.

    
    :type Name: string
    :param Name: The name of the channel.

    
    :type RoleArn: string
    :param RoleArn: An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Channel': {
                'Arn': 'string',
                'CdiInputSpecification': {
                    'Resolution': 'SD'|'HD'|'FHD'|'UHD'
                },
                'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                'Destinations': [
                    {
                        'Id': 'string',
                        'MediaPackageSettings': [
                            {
                                'ChannelId': 'string'
                            },
                        ],
                        'MultiplexSettings': {
                            'MultiplexId': 'string',
                            'ProgramName': 'string'
                        },
                        'Settings': [
                            {
                                'PasswordParam': 'string',
                                'StreamName': 'string',
                                'Url': 'string',
                                'Username': 'string'
                            },
                        ]
                    },
                ],
                'EgressEndpoints': [
                    {
                        'SourceIp': 'string'
                    },
                ],
                'EncoderSettings': {
                    'AudioDescriptions': [
                        {
                            'AudioNormalizationSettings': {
                                'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                                'AlgorithmControl': 'CORRECT_AUDIO',
                                'TargetLkfs': 123.0
                            },
                            'AudioSelectorName': 'string',
                            'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                            'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                            'CodecSettings': {
                                'AacSettings': {
                                    'Bitrate': 123.0,
                                    'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                                    'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                                    'Profile': 'HEV1'|'HEV2'|'LC',
                                    'RateControlMode': 'CBR'|'VBR',
                                    'RawFormat': 'LATM_LOAS'|'NONE',
                                    'SampleRate': 123.0,
                                    'Spec': 'MPEG2'|'MPEG4',
                                    'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                                },
                                'Ac3Settings': {
                                    'Bitrate': 123.0,
                                    'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                                    'Dialnorm': 123,
                                    'DrcProfile': 'FILM_STANDARD'|'NONE',
                                    'LfeFilter': 'DISABLED'|'ENABLED',
                                    'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                                },
                                'Eac3Settings': {
                                    'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                                    'Bitrate': 123.0,
                                    'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                                    'DcFilter': 'DISABLED'|'ENABLED',
                                    'Dialnorm': 123,
                                    'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                    'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                    'LfeControl': 'LFE'|'NO_LFE',
                                    'LfeFilter': 'DISABLED'|'ENABLED',
                                    'LoRoCenterMixLevel': 123.0,
                                    'LoRoSurroundMixLevel': 123.0,
                                    'LtRtCenterMixLevel': 123.0,
                                    'LtRtSurroundMixLevel': 123.0,
                                    'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                                    'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                                    'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                                    'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                                    'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                                    'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                                },
                                'Mp2Settings': {
                                    'Bitrate': 123.0,
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                                    'SampleRate': 123.0
                                },
                                'PassThroughSettings': {},
                                'WavSettings': {
                                    'BitDepth': 123.0,
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                                    'SampleRate': 123.0
                                }
                            },
                            'LanguageCode': 'string',
                            'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                            'Name': 'string',
                            'RemixSettings': {
                                'ChannelMappings': [
                                    {
                                        'InputChannelLevels': [
                                            {
                                                'Gain': 123,
                                                'InputChannel': 123
                                            },
                                        ],
                                        'OutputChannel': 123
                                    },
                                ],
                                'ChannelsIn': 123,
                                'ChannelsOut': 123
                            },
                            'StreamName': 'string'
                        },
                    ],
                    'AvailBlanking': {
                        'AvailBlankingImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'State': 'DISABLED'|'ENABLED'
                    },
                    'AvailConfiguration': {
                        'AvailSettings': {
                            'Scte35SpliceInsert': {
                                'AdAvailOffset': 123,
                                'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                                'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                            },
                            'Scte35TimeSignalApos': {
                                'AdAvailOffset': 123,
                                'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                                'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                            }
                        }
                    },
                    'BlackoutSlate': {
                        'BlackoutSlateImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                        'NetworkEndBlackoutImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'NetworkId': 'string',
                        'State': 'DISABLED'|'ENABLED'
                    },
                    'CaptionDescriptions': [
                        {
                            'CaptionSelectorName': 'string',
                            'DestinationSettings': {
                                'AribDestinationSettings': {},
                                'BurnInDestinationSettings': {
                                    'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                    'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                    'BackgroundOpacity': 123,
                                    'Font': {
                                        'PasswordParam': 'string',
                                        'Uri': 'string',
                                        'Username': 'string'
                                    },
                                    'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'FontOpacity': 123,
                                    'FontResolution': 123,
                                    'FontSize': 'string',
                                    'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'OutlineSize': 123,
                                    'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                    'ShadowOpacity': 123,
                                    'ShadowXOffset': 123,
                                    'ShadowYOffset': 123,
                                    'TeletextGridControl': 'FIXED'|'SCALED',
                                    'XPosition': 123,
                                    'YPosition': 123
                                },
                                'DvbSubDestinationSettings': {
                                    'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                    'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                    'BackgroundOpacity': 123,
                                    'Font': {
                                        'PasswordParam': 'string',
                                        'Uri': 'string',
                                        'Username': 'string'
                                    },
                                    'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'FontOpacity': 123,
                                    'FontResolution': 123,
                                    'FontSize': 'string',
                                    'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'OutlineSize': 123,
                                    'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                    'ShadowOpacity': 123,
                                    'ShadowXOffset': 123,
                                    'ShadowYOffset': 123,
                                    'TeletextGridControl': 'FIXED'|'SCALED',
                                    'XPosition': 123,
                                    'YPosition': 123
                                },
                                'EbuTtDDestinationSettings': {
                                    'CopyrightHolder': 'string',
                                    'FillLineGap': 'DISABLED'|'ENABLED',
                                    'FontFamily': 'string',
                                    'StyleControl': 'EXCLUDE'|'INCLUDE'
                                },
                                'EmbeddedDestinationSettings': {},
                                'EmbeddedPlusScte20DestinationSettings': {},
                                'RtmpCaptionInfoDestinationSettings': {},
                                'Scte20PlusEmbeddedDestinationSettings': {},
                                'Scte27DestinationSettings': {},
                                'SmpteTtDestinationSettings': {},
                                'TeletextDestinationSettings': {},
                                'TtmlDestinationSettings': {
                                    'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                                },
                                'WebvttDestinationSettings': {
                                    'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                                }
                            },
                            'LanguageCode': 'string',
                            'LanguageDescription': 'string',
                            'Name': 'string'
                        },
                    ],
                    'FeatureActivations': {
                        'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
                    },
                    'GlobalConfiguration': {
                        'InitialAudioGain': 123,
                        'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                        'InputLossBehavior': {
                            'BlackFrameMsec': 123,
                            'InputLossImageColor': 'string',
                            'InputLossImageSlate': {
                                'PasswordParam': 'string',
                                'Uri': 'string',
                                'Username': 'string'
                            },
                            'InputLossImageType': 'COLOR'|'SLATE',
                            'RepeatFrameMsec': 123
                        },
                        'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                        'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                        'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
                    },
                    'MotionGraphicsConfiguration': {
                        'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                        'MotionGraphicsSettings': {
                            'HtmlMotionGraphicsSettings': {}
                        }
                    },
                    'NielsenConfiguration': {
                        'DistributorId': 'string',
                        'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
                    },
                    'OutputGroups': [
                        {
                            'Name': 'string',
                            'OutputGroupSettings': {
                                'ArchiveGroupSettings': {
                                    'ArchiveCdnSettings': {
                                        'ArchiveS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        }
                                    },
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'RolloverInterval': 123
                                },
                                'FrameCaptureGroupSettings': {
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'FrameCaptureCdnSettings': {
                                        'FrameCaptureS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        }
                                    }
                                },
                                'HlsGroupSettings': {
                                    'AdMarkers': [
                                        'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                                    ],
                                    'BaseUrlContent': 'string',
                                    'BaseUrlContent1': 'string',
                                    'BaseUrlManifest': 'string',
                                    'BaseUrlManifest1': 'string',
                                    'CaptionLanguageMappings': [
                                        {
                                            'CaptionChannel': 123,
                                            'LanguageCode': 'string',
                                            'LanguageDescription': 'string'
                                        },
                                    ],
                                    'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                                    'ClientCache': 'DISABLED'|'ENABLED',
                                    'CodecSpecification': 'RFC_4281'|'RFC_6381',
                                    'ConstantIv': 'string',
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                                    'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                                    'EncryptionType': 'AES128'|'SAMPLE_AES',
                                    'HlsCdnSettings': {
                                        'HlsAkamaiSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                            'NumRetries': 123,
                                            'RestartDelay': 123,
                                            'Salt': 'string',
                                            'Token': 'string'
                                        },
                                        'HlsBasicPutSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        },
                                        'HlsMediaStoreSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'MediaStoreStorageClass': 'TEMPORAL',
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        },
                                        'HlsS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        },
                                        'HlsWebdavSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        }
                                    },
                                    'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                                    'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                                    'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                                    'IndexNSegments': 123,
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'IvInManifest': 'EXCLUDE'|'INCLUDE',
                                    'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                                    'KeepSegments': 123,
                                    'KeyFormat': 'string',
                                    'KeyFormatVersions': 'string',
                                    'KeyProviderSettings': {
                                        'StaticKeySettings': {
                                            'KeyProviderServer': {
                                                'PasswordParam': 'string',
                                                'Uri': 'string',
                                                'Username': 'string'
                                            },
                                            'StaticKeyValue': 'string'
                                        }
                                    },
                                    'ManifestCompression': 'GZIP'|'NONE',
                                    'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                                    'MinSegmentLength': 123,
                                    'Mode': 'LIVE'|'VOD',
                                    'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                                    'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                                    'ProgramDateTimePeriod': 123,
                                    'RedundantManifest': 'DISABLED'|'ENABLED',
                                    'SegmentLength': 123,
                                    'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                    'SegmentsPerSubdirectory': 123,
                                    'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                                    'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                    'TimedMetadataId3Period': 123,
                                    'TimestampDeltaMilliseconds': 123,
                                    'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                                },
                                'MediaPackageGroupSettings': {
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    }
                                },
                                'MsSmoothGroupSettings': {
                                    'AcquisitionPointId': 'string',
                                    'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                                    'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                    'ConnectionRetryInterval': 123,
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'EventId': 'string',
                                    'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                                    'EventStopBehavior': 'NONE'|'SEND_EOS',
                                    'FilecacheDuration': 123,
                                    'FragmentLength': 123,
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'NumRetries': 123,
                                    'RestartDelay': 123,
                                    'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                    'SendDelayMs': 123,
                                    'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                                    'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                                    'TimestampOffset': 'string',
                                    'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                                },
                                'MultiplexGroupSettings': {},
                                'RtmpGroupSettings': {
                                    'AdMarkers': [
                                        'ON_CUE_POINT_SCTE35',
                                    ],
                                    'AuthenticationScheme': 'AKAMAI'|'COMMON',
                                    'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                                    'CacheLength': 123,
                                    'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'RestartDelay': 123
                                },
                                'UdpGroupSettings': {
                                    'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                                    'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                    'TimedMetadataId3Period': 123
                                }
                            },
                            'Outputs': [
                                {
                                    'AudioDescriptionNames': [
                                        'string',
                                    ],
                                    'CaptionDescriptionNames': [
                                        'string',
                                    ],
                                    'OutputName': 'string',
                                    'OutputSettings': {
                                        'ArchiveOutputSettings': {
                                            'ContainerSettings': {
                                                'M2tsSettings': {
                                                    'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                    'Arib': 'DISABLED'|'ENABLED',
                                                    'AribCaptionsPid': 'string',
                                                    'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                    'AudioBufferModel': 'ATSC'|'DVB',
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'AudioStreamType': 'ATSC'|'DVB',
                                                    'Bitrate': 123,
                                                    'BufferModel': 'MULTIPLEX'|'NONE',
                                                    'CcDescriptor': 'DISABLED'|'ENABLED',
                                                    'DvbNitSettings': {
                                                        'NetworkId': 123,
                                                        'NetworkName': 'string',
                                                        'RepInterval': 123
                                                    },
                                                    'DvbSdtSettings': {
                                                        'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                        'RepInterval': 123,
                                                        'ServiceName': 'string',
                                                        'ServiceProviderName': 'string'
                                                    },
                                                    'DvbSubPids': 'string',
                                                    'DvbTdtSettings': {
                                                        'RepInterval': 123
                                                    },
                                                    'DvbTeletextPid': 'string',
                                                    'Ebif': 'NONE'|'PASSTHROUGH',
                                                    'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                    'EbpLookaheadMs': 123,
                                                    'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                    'EcmPid': 'string',
                                                    'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                    'EtvPlatformPid': 'string',
                                                    'EtvSignalPid': 'string',
                                                    'FragmentTime': 123.0,
                                                    'Klv': 'NONE'|'PASSTHROUGH',
                                                    'KlvDataPids': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'NullPacketBitrate': 123.0,
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'RateMode': 'CBR'|'VBR',
                                                    'Scte27Pids': 'string',
                                                    'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                    'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                    'SegmentationTime': 123.0,
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                },
                                                'RawSettings': {}
                                            },
                                            'Extension': 'string',
                                            'NameModifier': 'string'
                                        },
                                        'FrameCaptureOutputSettings': {
                                            'NameModifier': 'string'
                                        },
                                        'HlsOutputSettings': {
                                            'H265PackagingType': 'HEV1'|'HVC1',
                                            'HlsSettings': {
                                                'AudioOnlyHlsSettings': {
                                                    'AudioGroupId': 'string',
                                                    'AudioOnlyImage': {
                                                        'PasswordParam': 'string',
                                                        'Uri': 'string',
                                                        'Username': 'string'
                                                    },
                                                    'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                                    'SegmentType': 'AAC'|'FMP4'
                                                },
                                                'Fmp4HlsSettings': {
                                                    'AudioRenditionSets': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                                },
                                                'FrameCaptureHlsSettings': {},
                                                'StandardHlsSettings': {
                                                    'AudioRenditionSets': 'string',
                                                    'M3u8Settings': {
                                                        'AudioFramesPerPes': 123,
                                                        'AudioPids': 'string',
                                                        'EcmPid': 'string',
                                                        'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'PatInterval': 123,
                                                        'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                        'PcrPeriod': 123,
                                                        'PcrPid': 'string',
                                                        'PmtInterval': 123,
                                                        'PmtPid': 'string',
                                                        'ProgramNum': 123,
                                                        'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'Scte35Pid': 'string',
                                                        'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'TimedMetadataPid': 'string',
                                                        'TransportStreamId': 123,
                                                        'VideoPid': 'string'
                                                    }
                                                }
                                            },
                                            'NameModifier': 'string',
                                            'SegmentModifier': 'string'
                                        },
                                        'MediaPackageOutputSettings': {},
                                        'MsSmoothOutputSettings': {
                                            'H265PackagingType': 'HEV1'|'HVC1',
                                            'NameModifier': 'string'
                                        },
                                        'MultiplexOutputSettings': {
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            }
                                        },
                                        'RtmpOutputSettings': {
                                            'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                            'ConnectionRetryInterval': 123,
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            },
                                            'NumRetries': 123
                                        },
                                        'UdpOutputSettings': {
                                            'BufferMsec': 123,
                                            'ContainerSettings': {
                                                'M2tsSettings': {
                                                    'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                    'Arib': 'DISABLED'|'ENABLED',
                                                    'AribCaptionsPid': 'string',
                                                    'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                    'AudioBufferModel': 'ATSC'|'DVB',
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'AudioStreamType': 'ATSC'|'DVB',
                                                    'Bitrate': 123,
                                                    'BufferModel': 'MULTIPLEX'|'NONE',
                                                    'CcDescriptor': 'DISABLED'|'ENABLED',
                                                    'DvbNitSettings': {
                                                        'NetworkId': 123,
                                                        'NetworkName': 'string',
                                                        'RepInterval': 123
                                                    },
                                                    'DvbSdtSettings': {
                                                        'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                        'RepInterval': 123,
                                                        'ServiceName': 'string',
                                                        'ServiceProviderName': 'string'
                                                    },
                                                    'DvbSubPids': 'string',
                                                    'DvbTdtSettings': {
                                                        'RepInterval': 123
                                                    },
                                                    'DvbTeletextPid': 'string',
                                                    'Ebif': 'NONE'|'PASSTHROUGH',
                                                    'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                    'EbpLookaheadMs': 123,
                                                    'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                    'EcmPid': 'string',
                                                    'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                    'EtvPlatformPid': 'string',
                                                    'EtvSignalPid': 'string',
                                                    'FragmentTime': 123.0,
                                                    'Klv': 'NONE'|'PASSTHROUGH',
                                                    'KlvDataPids': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'NullPacketBitrate': 123.0,
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'RateMode': 'CBR'|'VBR',
                                                    'Scte27Pids': 'string',
                                                    'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                    'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                    'SegmentationTime': 123.0,
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                }
                                            },
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            },
                                            'FecOutputSettings': {
                                                'ColumnDepth': 123,
                                                'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                                'RowLength': 123
                                            }
                                        }
                                    },
                                    'VideoDescriptionName': 'string'
                                },
                            ]
                        },
                    ],
                    'TimecodeConfig': {
                        'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                        'SyncThreshold': 123
                    },
                    'VideoDescriptions': [
                        {
                            'CodecSettings': {
                                'FrameCaptureSettings': {
                                    'CaptureInterval': 123,
                                    'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                                },
                                'H264Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'Bitrate': 123,
                                    'BufFillPct': 123,
                                    'BufSize': 123,
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpaceSettings': {
                                        'ColorSpacePassthroughSettings': {},
                                        'Rec601Settings': {},
                                        'Rec709Settings': {}
                                    },
                                    'EntropyEncoding': 'CABAC'|'CAVLC',
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FlickerAq': 'DISABLED'|'ENABLED',
                                    'ForceFieldPictures': 'DISABLED'|'ENABLED',
                                    'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopBReference': 'DISABLED'|'ENABLED',
                                    'GopClosedCadence': 123,
                                    'GopNumBFrames': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                                    'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                    'MaxBitrate': 123,
                                    'MinIInterval': 123,
                                    'NumRefFrames': 123,
                                    'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                    'ParDenominator': 123,
                                    'ParNumerator': 123,
                                    'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                                    'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                                    'QvbrQualityLevel': 123,
                                    'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                    'Slices': 123,
                                    'Softness': 123,
                                    'SpatialAq': 'DISABLED'|'ENABLED',
                                    'SubgopLength': 'DYNAMIC'|'FIXED',
                                    'Syntax': 'DEFAULT'|'RP2027',
                                    'TemporalAq': 'DISABLED'|'ENABLED',
                                    'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                                },
                                'H265Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'AlternativeTransferFunction': 'INSERT'|'OMIT',
                                    'Bitrate': 123,
                                    'BufSize': 123,
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpaceSettings': {
                                        'ColorSpacePassthroughSettings': {},
                                        'Hdr10Settings': {
                                            'MaxCll': 123,
                                            'MaxFall': 123
                                        },
                                        'Rec601Settings': {},
                                        'Rec709Settings': {}
                                    },
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FlickerAq': 'DISABLED'|'ENABLED',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopClosedCadence': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                                    'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                    'MaxBitrate': 123,
                                    'MinIInterval': 123,
                                    'ParDenominator': 123,
                                    'ParNumerator': 123,
                                    'Profile': 'MAIN'|'MAIN_10BIT',
                                    'QvbrQualityLevel': 123,
                                    'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                    'Slices': 123,
                                    'Tier': 'HIGH'|'MAIN',
                                    'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                                },
                                'Mpeg2Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpace': 'AUTO'|'PASSTHROUGH',
                                    'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopClosedCadence': 123,
                                    'GopNumBFrames': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SubgopLength': 'DYNAMIC'|'FIXED',
                                    'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                                }
                            },
                            'Height': 123,
                            'Name': 'string',
                            'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                            'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                            'Sharpness': 123,
                            'Width': 123
                        },
                    ]
                },
                'Id': 'string',
                'InputAttachments': [
                    {
                        'AutomaticInputFailoverSettings': {
                            'ErrorClearTimeMsec': 123,
                            'FailoverConditions': [
                                {
                                    'FailoverConditionSettings': {
                                        'AudioSilenceSettings': {
                                            'AudioSelectorName': 'string',
                                            'AudioSilenceThresholdMsec': 123
                                        },
                                        'InputLossSettings': {
                                            'InputLossThresholdMsec': 123
                                        },
                                        'VideoBlackSettings': {
                                            'BlackDetectThreshold': 123.0,
                                            'VideoBlackThresholdMsec': 123
                                        }
                                    }
                                },
                            ],
                            'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                            'SecondaryInputId': 'string'
                        },
                        'InputAttachmentName': 'string',
                        'InputId': 'string',
                        'InputSettings': {
                            'AudioSelectors': [
                                {
                                    'Name': 'string',
                                    'SelectorSettings': {
                                        'AudioHlsRenditionSelection': {
                                            'GroupId': 'string',
                                            'Name': 'string'
                                        },
                                        'AudioLanguageSelection': {
                                            'LanguageCode': 'string',
                                            'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                        },
                                        'AudioPidSelection': {
                                            'Pid': 123
                                        },
                                        'AudioTrackSelection': {
                                            'Tracks': [
                                                {
                                                    'Track': 123
                                                },
                                            ]
                                        }
                                    }
                                },
                            ],
                            'CaptionSelectors': [
                                {
                                    'LanguageCode': 'string',
                                    'Name': 'string',
                                    'SelectorSettings': {
                                        'AncillarySourceSettings': {
                                            'SourceAncillaryChannelNumber': 123
                                        },
                                        'AribSourceSettings': {},
                                        'DvbSubSourceSettings': {
                                            'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                            'Pid': 123
                                        },
                                        'EmbeddedSourceSettings': {
                                            'Convert608To708': 'DISABLED'|'UPCONVERT',
                                            'Scte20Detection': 'AUTO'|'OFF',
                                            'Source608ChannelNumber': 123,
                                            'Source608TrackNumber': 123
                                        },
                                        'Scte20SourceSettings': {
                                            'Convert608To708': 'DISABLED'|'UPCONVERT',
                                            'Source608ChannelNumber': 123
                                        },
                                        'Scte27SourceSettings': {
                                            'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                            'Pid': 123
                                        },
                                        'TeletextSourceSettings': {
                                            'OutputRectangle': {
                                                'Height': 123.0,
                                                'LeftOffset': 123.0,
                                                'TopOffset': 123.0,
                                                'Width': 123.0
                                            },
                                            'PageNumber': 'string'
                                        }
                                    }
                                },
                            ],
                            'DeblockFilter': 'DISABLED'|'ENABLED',
                            'DenoiseFilter': 'DISABLED'|'ENABLED',
                            'FilterStrength': 123,
                            'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                            'NetworkInputSettings': {
                                'HlsInputSettings': {
                                    'Bandwidth': 123,
                                    'BufferSegments': 123,
                                    'Retries': 123,
                                    'RetryInterval': 123,
                                    'Scte35Source': 'MANIFEST'|'SEGMENTS'
                                },
                                'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                            },
                            'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                            'SourceEndBehavior': 'CONTINUE'|'LOOP',
                            'VideoSelector': {
                                'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                                'ColorSpaceSettings': {
                                    'Hdr10Settings': {
                                        'MaxCll': 123,
                                        'MaxFall': 123
                                    }
                                },
                                'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                                'SelectorSettings': {
                                    'VideoSelectorPid': {
                                        'Pid': 123
                                    },
                                    'VideoSelectorProgramId': {
                                        'ProgramId': 123
                                    }
                                }
                            }
                        }
                    },
                ],
                'InputSpecification': {
                    'Codec': 'MPEG2'|'AVC'|'HEVC',
                    'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                    'Resolution': 'SD'|'HD'|'UHD'
                },
                'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
                'Name': 'string',
                'PipelineDetails': [
                    {
                        'ActiveInputAttachmentName': 'string',
                        'ActiveInputSwitchActionName': 'string',
                        'ActiveMotionGraphicsActionName': 'string',
                        'ActiveMotionGraphicsUri': 'string',
                        'PipelineId': 'string'
                    },
                ],
                'PipelinesRunningCount': 123,
                'RoleArn': 'string',
                'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
                'Tags': {
                    'string': 'string'
                },
                'Vpc': {
                    'AvailabilityZones': [
                        'string',
                    ],
                    'NetworkInterfaceIds': [
                        'string',
                    ],
                    'SecurityGroupIds': [
                        'string',
                    ],
                    'SubnetIds': [
                        'string',
                    ]
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* Channel is successfully updated.
        

        - **Channel** *(dict) --* Placeholder documentation for Channel
          

          - **Arn** *(string) --* The unique arn of the channel.
          

          - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
            

            - **Resolution** *(string) --* Maximum CDI input resolution
        
          

          - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
          

          - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
            

            - *(dict) --* Placeholder documentation for OutputDestination
              

              - **Id** *(string) --* User-specified id. This is used in an output group or an output.
              

              - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
                

                - *(dict) --* MediaPackage Output Destination Settings
                  

                  - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
              
            
              

              - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
                

                - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
                

                - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
            
              

              - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
                

                - *(dict) --* Placeholder documentation for OutputDestinationSettings
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                  

                  - **Url** *(string) --* A URL specifying a destination
                  

                  - **Username** *(string) --* username for destination
              
            
          
        
          

          - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
            

            - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
              

              - **SourceIp** *(string) --* Public IP of where a channel's output comes from
          
        
          

          - **EncoderSettings** *(dict) --* Encoder Settings
            

            - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription
              

              - *(dict) --* Audio Description
                

                - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.
                  

                  - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
                  

                  - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
                  

                  - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
              
                

                - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source for this AudioDescription.
                

                - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
                

                - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
                

                - **CodecSettings** *(dict) --* Audio codec settings.
                  

                  - **AacSettings** *(dict) --* Aac Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.
                    

                    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
                    

                    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
                    

                    - **Profile** *(string) --* AAC Profile.
                    

                    - **RateControlMode** *(string) --* Rate Control Mode.
                    

                    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.
                    

                    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.
                    

                    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
                    

                    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.
                
                  

                  - **Ac3Settings** *(dict) --* Ac3 Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                    

                    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
                    

                    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.
                    

                    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
                    

                    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
                    

                    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
                    

                    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                
                  

                  - **Eac3Settings** *(dict) --* Eac3 Settings
                    

                    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                    

                    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
                    

                    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.
                    

                    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.
                    

                    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
                    

                    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.
                    

                    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
                    

                    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel
                    

                    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
                    

                    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.
                    

                    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.
                    

                    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.
                    

                    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.
                    

                    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                    

                    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
                    

                    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
                    

                    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.
                    

                    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
                    

                    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
                
                  

                  - **Mp2Settings** *(dict) --* Mp2 Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second.
                    

                    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
                    

                    - **SampleRate** *(float) --* Sample rate in Hz.
                
                  

                  - **PassThroughSettings** *(dict) --* Pass Through Settings
                
                  

                  - **WavSettings** *(dict) --* Wav Settings
                    

                    - **BitDepth** *(float) --* Bits per sample.
                    

                    - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
                    

                    - **SampleRate** *(float) --* Sample rate in Hz.
                
              
                

                - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
                

                - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
                

                - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
                

                - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.
                  

                  - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with appropriate gain adjustments.
                    

                    - *(dict) --* Audio Channel Mapping
                      

                      - **InputChannelLevels** *(list) --* Indices and gain values for each input channel that should be remixed into this output channel.
                        

                        - *(dict) --* Input Channel Level
                          

                          - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
                          

                          - **InputChannel** *(integer) --* The index of the input channel used as a source.
                      
                    
                      

                      - **OutputChannel** *(integer) --* The index of the output channel being produced.
                  
                
                  

                  - **ChannelsIn** *(integer) --* Number of input channels to be used.
                  

                  - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
              
                

                - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
            
          
            

            - **AvailBlanking** *(dict) --* Settings for ad avail blanking.
              

              - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
          
            

            - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.
              

              - **AvailSettings** *(dict) --* Ad avail settings.
                

                - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert
                  

                  - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                  

                  - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                  

                  - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
              
                

                - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos
                  

                  - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                  

                  - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                  

                  - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
              
            
          
            

            - **BlackoutSlate** *(dict) --* Settings for blackout slate.
              

              - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
              

              - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
              

              - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
          
            

            - **CaptionDescriptions** *(list) --* Settings for caption decriptions
              

              - *(dict) --* Caption Description
                

                - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
                

                - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.
                  

                  - **AribDestinationSettings** *(dict) --* Arib Destination Settings
                
                  

                  - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings
                    

                    - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                      

                      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                      

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                      

                      - **Username** *(string) --* Documentation update needed
                  
                    

                    - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                    

                    - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                    

                    - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
                    

                    - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
                
                  

                  - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings
                    

                    - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                      

                      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                      

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                      

                      - **Username** *(string) --* Documentation update needed
                  
                    

                    - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                    

                    - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                    

                    - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                
                  

                  - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings
                    

                    - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
                    

                    - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
                    

                    - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
                    

                    - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
                
                  

                  - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings
                
                  

                  - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings
                
                  

                  - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings
                
                  

                  - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings
                
                  

                  - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings
                
                  

                  - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings
                
                  

                  - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings
                
                  

                  - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings
                    

                    - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
                
                  

                  - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings
                    

                    - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
                
              
                

                - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
                

                - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).
                

                - **Name** *(string) --* Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
            
          
            

            - **FeatureActivations** *(dict) --* Feature Activations
              

              - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
          
            

            - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.
              

              - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.
              

              - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
              

              - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.
                

                - **BlackFrameMsec** *(integer) --* Documentation update needed
                

                - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
                

                - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                  

                  - **Username** *(string) --* Documentation update needed
              
                

                - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
                

                - **RepeatFrameMsec** *(integer) --* Documentation update needed
            
              

              - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
              

              - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
              

              - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
          
            

            - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.
              

              - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion
              

              - **MotionGraphicsSettings** *(dict) --* Motion Graphics Settings
                

                - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings
              
            
          
            

            - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.
              

              - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.
              

              - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging
          
            

            - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup
              

              - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                

                - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
                

                - **OutputGroupSettings** *(dict) --* Settings associated with the output group.
                  

                  - **ArchiveGroupSettings** *(dict) --* Archive Group Settings
                    

                    - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **ArchiveS3Settings** *(dict) --* Archive S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                  
                    

                    - **Destination** *(dict) --* A directory and base filename where archive files should be written.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.
                
                  

                  - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings
                    

                    - **Destination** *(dict) --* The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                  
                
                  

                  - **HlsGroupSettings** *(dict) --* Hls Group Settings
                    

                    - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
                      

                      - *(string) --* Hls Ad Markers
                  
                    

                    - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                    

                    - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
                    

                    - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                    

                    - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
                    

                    - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
                      

                      - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
                        

                        - **CaptionChannel** *(integer) --* The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
                        

                        - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
                        

                        - **LanguageDescription** *(string) --* Textual description of language
                    
                  
                    

                    - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
                    

                    - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
                    

                    - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
                    

                    - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
                    

                    - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **DirectoryStructure** *(string) --* Place segments in subdirectories.
                    

                    - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
                    

                    - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
                    

                    - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                        

                        - **Salt** *(string) --* Salt for authenticated Akamai.
                        

                        - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.
                    
                      

                      - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                      

                      - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                      

                      - **HlsS3Settings** *(dict) --* Hls S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                      

                      - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                  
                    

                    - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging
                    

                    - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
                    

                    - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
                    

                    - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
                    

                    - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                    

                    - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
                    

                    - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
                    

                    - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
                    

                    - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
                    

                    - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).
                    

                    - **KeyProviderSettings** *(dict) --* The key provider settings.
                      

                      - **StaticKeySettings** *(dict) --* Static Key Settings
                        

                        - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.
                          

                          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                          

                          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                          

                          - **Username** *(string) --* Documentation update needed
                      
                        

                        - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal string.
                    
                  
                    

                    - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.
                    

                    - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.
                    

                    - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
                    

                    - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
                    

                    - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
                    

                    - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
                    

                    - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
                    

                    - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
                    

                    - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
                    

                    - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                    

                    - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
                    

                    - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
                    

                    - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                    

                    - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                    

                    - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.
                    

                    - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
                
                  

                  - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings
                    

                    - **Destination** *(dict) --* MediaPackage channel destination.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                
                  

                  - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings
                    

                    - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
                    

                    - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
                    

                    - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
                    

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
                    

                    - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
                    

                    - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
                    

                    - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event
                    

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                    

                    - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
                    

                    - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                    

                    - **NumRetries** *(integer) --* Number of retry attempts.
                    

                    - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
                    

                    - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                    

                    - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.
                    

                    - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
                    

                    - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.
                    

                    - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
                    

                    - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
                
                  

                  - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings
                
                  

                  - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings
                    

                    - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
                      

                      - *(string) --* Rtmp Ad Markers
                  
                    

                    - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN
                    

                    - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
                    

                    - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.
                    

                    - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
                    

                    - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
                    

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                
                  

                  - **UdpGroupSettings** *(dict) --* Udp Group Settings
                    

                    - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
                    

                    - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                    

                    - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                
              
                

                - **Outputs** *(list) --* Placeholder documentation for __listOfOutput
                  

                  - *(dict) --* Output settings. There can be multiple outputs within a group.
                    

                    - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.
                      

                      - *(string) --* Placeholder documentation for __string
                  
                    

                    - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.
                      

                      - *(string) --* Placeholder documentation for __string
                  
                    

                    - **OutputName** *(string) --* The name used to identify an output.
                    

                    - **OutputSettings** *(dict) --* Output type-specific settings.
                      

                      - **ArchiveOutputSettings** *(dict) --* Archive Output Settings
                        

                        - **ContainerSettings** *(dict) --* Settings specific to the container type of the file.
                          

                          - **M2tsSettings** *(dict) --* M2ts Settings
                            

                            - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                            

                            - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                            

                            - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                            

                            - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                            

                            - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                            

                            - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                            

                            - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                            

                            - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                              

                              - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                              

                              - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                              

                              - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                              

                              - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                              

                              - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                          
                            

                            - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                            

                            - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                            

                            - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                            

                            - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                            

                            - **EcmPid** *(string) --* This field is unused and deprecated.
                            

                            - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                            

                            - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                            

                            - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                            

                            - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                            

                            - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                            

                            - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                            

                            - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                        
                          

                          - **RawSettings** *(dict) --* Raw Settings
                        
                      
                        

                        - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                    
                      

                      - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings
                        

                        - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.
                    
                      

                      - **HlsOutputSettings** *(dict) --* Hls Output Settings
                        

                        - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                        

                        - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These settings are different for audio-only outputs.
                          

                          - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings
                            

                            - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.
                            

                            - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
                              

                              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                              

                              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                              

                              - **Username** *(string) --* Documentation update needed
                          
                            

                            - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
                            

                            - **SegmentType** *(string) --* Specifies the segment type.
                        
                          

                          - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings
                            

                            - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                        
                          

                          - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings
                        
                          

                          - **StandardHlsSettings** *(dict) --* Standard Hls Settings
                            

                            - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                            

                            - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container
                              

                              - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                              

                              - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
                              

                              - **EcmPid** *(string) --* This parameter is unused and deprecated.
                              

                              - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                              

                              - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                              

                              - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                              

                              - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
                              

                              - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
                              

                              - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                              

                              - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                              

                              - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                              

                              - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.
                              

                              - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                              

                              - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                              

                              - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                              

                              - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                              

                              - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                          
                        
                      
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
                        

                        - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.
                    
                      

                      - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings
                    
                      

                      - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings
                        

                        - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                    
                      

                      - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings
                        

                        - **Destination** *(dict) --* Destination is a Multiplex.
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                    
                      

                      - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings
                        

                        - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
                        

                        - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                        

                        - **NumRetries** *(integer) --* Number of retry attempts.
                    
                      

                      - **UdpOutputSettings** *(dict) --* Udp Output Settings
                        

                        - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
                        

                        - **ContainerSettings** *(dict) --* Udp Container Settings
                          

                          - **M2tsSettings** *(dict) --* M2ts Settings
                            

                            - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                            

                            - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                            

                            - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                            

                            - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                            

                            - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                            

                            - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                            

                            - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                            

                            - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                              

                              - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                              

                              - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                              

                              - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                              

                              - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                              

                              - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                          
                            

                            - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                            

                            - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                            

                            - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                            

                            - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                            

                            - **EcmPid** *(string) --* This field is unused and deprecated.
                            

                            - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                            

                            - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                            

                            - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                            

                            - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                            

                            - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                            

                            - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                            

                            - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                        
                      
                        

                        - **Destination** *(dict) --* Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                        

                        - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.
                          

                          - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
                          

                          - **IncludeFec** *(string) --* Enables column only or column and row based FEC
                          

                          - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
                      
                    
                  
                    

                    - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.
                
              
            
          
            

            - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode information from inputs.
              

              - **Source** *(string) --* Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
              

              - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
          
            

            - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription
              

              - *(dict) --* Video settings for this stream.
                

                - **CodecSettings** *(dict) --* Video codec settings.
                  

                  - **FrameCaptureSettings** *(dict) --* Frame Capture Settings
                    

                    - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
                    

                    - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.
                
                  

                  - **H264Settings** *(dict) --* H264 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
                    

                    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                    

                    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                    

                    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).
                    

                    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                    

                    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                    

                    - **ColorSpaceSettings** *(dict) --* Color Space settings
                      

                      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                    
                      

                      - **Rec601Settings** *(dict) --* Rec601 Settings
                    
                      

                      - **Rec709Settings** *(dict) --* Rec709 Settings
                    
                  
                    

                    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
                    

                    - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                    

                    - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
                    

                    - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
                    

                    - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
                    

                    - **FramerateDenominator** *(integer) --* Framerate denominator.
                    

                    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                    

                    - **GopBReference** *(string) --* Documentation update needed
                    

                    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                    

                    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.
                    

                    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                    

                    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                    

                    - **Level** *(string) --* H.264 Level.
                    

                    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                    

                    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
                    

                    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                    

                    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
                    

                    - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
                    

                    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                    

                    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                    

                    - **Profile** *(string) --* H.264 Profile.
                    

                    - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.
                    

                    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
                    

                    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                    

                    - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                    

                    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.
                    

                    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                    

                    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
                    

                    - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
                    

                    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
                    

                    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.
                    

                    - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
                    

                    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
                
                  

                  - **H265Settings** *(dict) --* H265 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
                    

                    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                    

                    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
                    

                    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                    

                    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                    

                    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                    

                    - **ColorSpaceSettings** *(dict) --* Color Space settings
                      

                      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                    
                      

                      - **Hdr10Settings** *(dict) --* Hdr10 Settings
                        

                        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                        

                        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                    
                      

                      - **Rec601Settings** *(dict) --* Rec601 Settings
                    
                      

                      - **Rec709Settings** *(dict) --* Rec709 Settings
                    
                  
                    

                    - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                    

                    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
                    

                    - **FramerateDenominator** *(integer) --* Framerate denominator.
                    

                    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                    

                    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                    

                    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                    

                    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                    

                    - **Level** *(string) --* H.265 Level.
                    

                    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                    

                    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level
                    

                    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                    

                    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                    

                    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                    

                    - **Profile** *(string) --* H.265 Profile.
                    

                    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
                    

                    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                    

                    - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                    

                    - **SceneChangeDetect** *(string) --* Scene change detection.
                    

                    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                    

                    - **Tier** *(string) --* H.265 Tier.
                    

                    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
                
                  

                  - **Mpeg2Settings** *(dict) --* Mpeg2 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
                    

                    - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
                    

                    - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
                    

                    - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
                    

                    - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.
                    

                    - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
                    

                    - **FramerateDenominator** *(integer) --* description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                    

                    - **FramerateNumerator** *(integer) --* The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                    

                    - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.
                    

                    - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
                    

                    - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
                    

                    - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
                    

                    - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
                    

                    - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
                    

                    - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
                
              
                

                - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
                

                - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
                

                - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
                

                - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
                

                - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
                

                - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
            
          
        
          

          - **Id** *(string) --* The unique id of the channel.
          

          - **InputAttachments** *(list) --* List of input attachments for channel.
            

            - *(dict) --* Placeholder documentation for InputAttachment
              

              - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
                

                - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
                

                - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                  

                  - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                    

                    - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                      

                      - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                        

                        - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                        

                        - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                    
                      

                      - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                        

                        - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                    
                      

                      - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                        

                        - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                        

                        - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                    
                  
                
              
                

                - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
                

                - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
            
              

              - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
              

              - **InputId** *(string) --* The ID of the input
              

              - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
                

                - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                  

                  - *(dict) --* Audio Selector
                    

                    - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                    

                    - **SelectorSettings** *(dict) --* The audio selector settings.
                      

                      - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                        

                        - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                        

                        - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                    
                      

                      - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                        

                        - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                        

                        - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                    
                      

                      - **AudioPidSelection** *(dict) --* Audio Pid Selection
                        

                        - **Pid** *(integer) --* Selects a specific PID from within a source.
                    
                      

                      - **AudioTrackSelection** *(dict) --* Audio Track Selection
                        

                        - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                          

                          - *(dict) --* Audio Track
                            

                            - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                        
                      
                    
                  
                
              
                

                - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                  

                  - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                    

                    - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                    

                    - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                    

                    - **SelectorSettings** *(dict) --* Caption selector settings.
                      

                      - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                        

                        - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                    
                      

                      - **AribSourceSettings** *(dict) --* Arib Source Settings
                    
                      

                      - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                        

                        - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                        

                        - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                    
                      

                      - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                        

                        - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                        

                        - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                        

                        - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                        

                        - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                    
                      

                      - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                        

                        - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                        

                        - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                    
                      

                      - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                        

                        - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                        

                        - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                    
                      

                      - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                        

                        - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                          

                          - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                          

                          - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                          

                          - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                          

                          - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                      
                        

                        - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                    
                  
                
              
                

                - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
                

                - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
                

                - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
                

                - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
                

                - **NetworkInputSettings** *(dict) --* Input settings.
                  

                  - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                    

                    - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                    

                    - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                    

                    - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                    

                    - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                    

                    - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
                
                  

                  - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
              
                

                - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
                

                - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
                

                - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                  

                  - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                  

                  - **ColorSpaceSettings** *(dict) --* Color space settings
                    

                    - **Hdr10Settings** *(dict) --* Hdr10 Settings
                      

                      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                      

                      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                  
                
                  

                  - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                  

                  - **SelectorSettings** *(dict) --* The video selector settings.
                    

                    - **VideoSelectorPid** *(dict) --* Video Selector Pid
                      

                      - **Pid** *(integer) --* Selects a specific PID from within a video source.
                  
                    

                    - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                      

                      - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                  
                
              
            
          
        
          

          - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
            

            - **Codec** *(string) --* Input codec
            

            - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
            

            - **Resolution** *(string) --* Input resolution, categorized coarsely
        
          

          - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
          

          - **Name** *(string) --* The name of the channel. (user-mutable)
          

          - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.
            

            - *(dict) --* Runtime details of a pipeline when a channel is running.
              

              - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment currently being ingested by this pipeline.
              

              - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
              

              - **ActiveMotionGraphicsActionName** *(string) --* The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
              

              - **ActiveMotionGraphicsUri** *(string) --* The current URI being used for HTML5 motion graphics for this pipeline.
              

              - **PipelineId** *(string) --* Pipeline ID
          
        
          

          - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
          

          - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
          

          - **State** *(string) --* Placeholder documentation for ChannelState
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **Vpc** *(dict) --* Settings for VPC output
            

            - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
              

              - *(string) --* Placeholder documentation for __string
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: update_channel_class(**kwargs)

    Changes the class of the channel.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateChannelClass>`_    


    **Request Syntax** 
    ::

      response = client.update_channel_class(
          ChannelClass='STANDARD'|'SINGLE_PIPELINE',
          ChannelId='string',
          Destinations=[
              {
                  'Id': 'string',
                  'MediaPackageSettings': [
                      {
                          'ChannelId': 'string'
                      },
                  ],
                  'MultiplexSettings': {
                      'MultiplexId': 'string',
                      'ProgramName': 'string'
                  },
                  'Settings': [
                      {
                          'PasswordParam': 'string',
                          'StreamName': 'string',
                          'Url': 'string',
                          'Username': 'string'
                      },
                  ]
              },
          ]
      )
    :type ChannelClass: string
    :param ChannelClass: **[REQUIRED]** The channel class that you wish to update this channel to use.

    
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** Channel Id of the channel whose class should be updated.

    
    :type Destinations: list
    :param Destinations: A list of output destinations for this channel.

    
      - *(dict) --* Placeholder documentation for OutputDestination

      
        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        
        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.

        
          - *(dict) --* MediaPackage Output Destination Settings

          
            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.

            
          
      
        - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.

        
          - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.

          
          - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.

          
        
        - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.

        
          - *(dict) --* Placeholder documentation for OutputDestinationSettings

          
            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

            
            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

            
            - **Url** *(string) --* A URL specifying a destination

            
            - **Username** *(string) --* username for destination

            
          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Channel': {
                'Arn': 'string',
                'CdiInputSpecification': {
                    'Resolution': 'SD'|'HD'|'FHD'|'UHD'
                },
                'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                'Destinations': [
                    {
                        'Id': 'string',
                        'MediaPackageSettings': [
                            {
                                'ChannelId': 'string'
                            },
                        ],
                        'MultiplexSettings': {
                            'MultiplexId': 'string',
                            'ProgramName': 'string'
                        },
                        'Settings': [
                            {
                                'PasswordParam': 'string',
                                'StreamName': 'string',
                                'Url': 'string',
                                'Username': 'string'
                            },
                        ]
                    },
                ],
                'EgressEndpoints': [
                    {
                        'SourceIp': 'string'
                    },
                ],
                'EncoderSettings': {
                    'AudioDescriptions': [
                        {
                            'AudioNormalizationSettings': {
                                'Algorithm': 'ITU_1770_1'|'ITU_1770_2',
                                'AlgorithmControl': 'CORRECT_AUDIO',
                                'TargetLkfs': 123.0
                            },
                            'AudioSelectorName': 'string',
                            'AudioType': 'CLEAN_EFFECTS'|'HEARING_IMPAIRED'|'UNDEFINED'|'VISUAL_IMPAIRED_COMMENTARY',
                            'AudioTypeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                            'CodecSettings': {
                                'AacSettings': {
                                    'Bitrate': 123.0,
                                    'CodingMode': 'AD_RECEIVER_MIX'|'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_5_1',
                                    'InputType': 'BROADCASTER_MIXED_AD'|'NORMAL',
                                    'Profile': 'HEV1'|'HEV2'|'LC',
                                    'RateControlMode': 'CBR'|'VBR',
                                    'RawFormat': 'LATM_LOAS'|'NONE',
                                    'SampleRate': 123.0,
                                    'Spec': 'MPEG2'|'MPEG4',
                                    'VbrQuality': 'HIGH'|'LOW'|'MEDIUM_HIGH'|'MEDIUM_LOW'
                                },
                                'Ac3Settings': {
                                    'Bitrate': 123.0,
                                    'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'DIALOGUE'|'EMERGENCY'|'HEARING_IMPAIRED'|'MUSIC_AND_EFFECTS'|'VISUALLY_IMPAIRED'|'VOICE_OVER',
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_1_1'|'CODING_MODE_2_0'|'CODING_MODE_3_2_LFE',
                                    'Dialnorm': 123,
                                    'DrcProfile': 'FILM_STANDARD'|'NONE',
                                    'LfeFilter': 'DISABLED'|'ENABLED',
                                    'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED'
                                },
                                'Eac3Settings': {
                                    'AttenuationControl': 'ATTENUATE_3_DB'|'NONE',
                                    'Bitrate': 123.0,
                                    'BitstreamMode': 'COMMENTARY'|'COMPLETE_MAIN'|'EMERGENCY'|'HEARING_IMPAIRED'|'VISUALLY_IMPAIRED',
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_3_2',
                                    'DcFilter': 'DISABLED'|'ENABLED',
                                    'Dialnorm': 123,
                                    'DrcLine': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                    'DrcRf': 'FILM_LIGHT'|'FILM_STANDARD'|'MUSIC_LIGHT'|'MUSIC_STANDARD'|'NONE'|'SPEECH',
                                    'LfeControl': 'LFE'|'NO_LFE',
                                    'LfeFilter': 'DISABLED'|'ENABLED',
                                    'LoRoCenterMixLevel': 123.0,
                                    'LoRoSurroundMixLevel': 123.0,
                                    'LtRtCenterMixLevel': 123.0,
                                    'LtRtSurroundMixLevel': 123.0,
                                    'MetadataControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                                    'PassthroughControl': 'NO_PASSTHROUGH'|'WHEN_POSSIBLE',
                                    'PhaseControl': 'NO_SHIFT'|'SHIFT_90_DEGREES',
                                    'StereoDownmix': 'DPL2'|'LO_RO'|'LT_RT'|'NOT_INDICATED',
                                    'SurroundExMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED',
                                    'SurroundMode': 'DISABLED'|'ENABLED'|'NOT_INDICATED'
                                },
                                'Mp2Settings': {
                                    'Bitrate': 123.0,
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0',
                                    'SampleRate': 123.0
                                },
                                'PassThroughSettings': {},
                                'WavSettings': {
                                    'BitDepth': 123.0,
                                    'CodingMode': 'CODING_MODE_1_0'|'CODING_MODE_2_0'|'CODING_MODE_4_0'|'CODING_MODE_8_0',
                                    'SampleRate': 123.0
                                }
                            },
                            'LanguageCode': 'string',
                            'LanguageCodeControl': 'FOLLOW_INPUT'|'USE_CONFIGURED',
                            'Name': 'string',
                            'RemixSettings': {
                                'ChannelMappings': [
                                    {
                                        'InputChannelLevels': [
                                            {
                                                'Gain': 123,
                                                'InputChannel': 123
                                            },
                                        ],
                                        'OutputChannel': 123
                                    },
                                ],
                                'ChannelsIn': 123,
                                'ChannelsOut': 123
                            },
                            'StreamName': 'string'
                        },
                    ],
                    'AvailBlanking': {
                        'AvailBlankingImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'State': 'DISABLED'|'ENABLED'
                    },
                    'AvailConfiguration': {
                        'AvailSettings': {
                            'Scte35SpliceInsert': {
                                'AdAvailOffset': 123,
                                'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                                'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                            },
                            'Scte35TimeSignalApos': {
                                'AdAvailOffset': 123,
                                'NoRegionalBlackoutFlag': 'FOLLOW'|'IGNORE',
                                'WebDeliveryAllowedFlag': 'FOLLOW'|'IGNORE'
                            }
                        }
                    },
                    'BlackoutSlate': {
                        'BlackoutSlateImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'NetworkEndBlackout': 'DISABLED'|'ENABLED',
                        'NetworkEndBlackoutImage': {
                            'PasswordParam': 'string',
                            'Uri': 'string',
                            'Username': 'string'
                        },
                        'NetworkId': 'string',
                        'State': 'DISABLED'|'ENABLED'
                    },
                    'CaptionDescriptions': [
                        {
                            'CaptionSelectorName': 'string',
                            'DestinationSettings': {
                                'AribDestinationSettings': {},
                                'BurnInDestinationSettings': {
                                    'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                    'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                    'BackgroundOpacity': 123,
                                    'Font': {
                                        'PasswordParam': 'string',
                                        'Uri': 'string',
                                        'Username': 'string'
                                    },
                                    'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'FontOpacity': 123,
                                    'FontResolution': 123,
                                    'FontSize': 'string',
                                    'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'OutlineSize': 123,
                                    'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                    'ShadowOpacity': 123,
                                    'ShadowXOffset': 123,
                                    'ShadowYOffset': 123,
                                    'TeletextGridControl': 'FIXED'|'SCALED',
                                    'XPosition': 123,
                                    'YPosition': 123
                                },
                                'DvbSubDestinationSettings': {
                                    'Alignment': 'CENTERED'|'LEFT'|'SMART',
                                    'BackgroundColor': 'BLACK'|'NONE'|'WHITE',
                                    'BackgroundOpacity': 123,
                                    'Font': {
                                        'PasswordParam': 'string',
                                        'Uri': 'string',
                                        'Username': 'string'
                                    },
                                    'FontColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'FontOpacity': 123,
                                    'FontResolution': 123,
                                    'FontSize': 'string',
                                    'OutlineColor': 'BLACK'|'BLUE'|'GREEN'|'RED'|'WHITE'|'YELLOW',
                                    'OutlineSize': 123,
                                    'ShadowColor': 'BLACK'|'NONE'|'WHITE',
                                    'ShadowOpacity': 123,
                                    'ShadowXOffset': 123,
                                    'ShadowYOffset': 123,
                                    'TeletextGridControl': 'FIXED'|'SCALED',
                                    'XPosition': 123,
                                    'YPosition': 123
                                },
                                'EbuTtDDestinationSettings': {
                                    'CopyrightHolder': 'string',
                                    'FillLineGap': 'DISABLED'|'ENABLED',
                                    'FontFamily': 'string',
                                    'StyleControl': 'EXCLUDE'|'INCLUDE'
                                },
                                'EmbeddedDestinationSettings': {},
                                'EmbeddedPlusScte20DestinationSettings': {},
                                'RtmpCaptionInfoDestinationSettings': {},
                                'Scte20PlusEmbeddedDestinationSettings': {},
                                'Scte27DestinationSettings': {},
                                'SmpteTtDestinationSettings': {},
                                'TeletextDestinationSettings': {},
                                'TtmlDestinationSettings': {
                                    'StyleControl': 'PASSTHROUGH'|'USE_CONFIGURED'
                                },
                                'WebvttDestinationSettings': {
                                    'StyleControl': 'NO_STYLE_DATA'|'PASSTHROUGH'
                                }
                            },
                            'LanguageCode': 'string',
                            'LanguageDescription': 'string',
                            'Name': 'string'
                        },
                    ],
                    'FeatureActivations': {
                        'InputPrepareScheduleActions': 'DISABLED'|'ENABLED'
                    },
                    'GlobalConfiguration': {
                        'InitialAudioGain': 123,
                        'InputEndAction': 'NONE'|'SWITCH_AND_LOOP_INPUTS',
                        'InputLossBehavior': {
                            'BlackFrameMsec': 123,
                            'InputLossImageColor': 'string',
                            'InputLossImageSlate': {
                                'PasswordParam': 'string',
                                'Uri': 'string',
                                'Username': 'string'
                            },
                            'InputLossImageType': 'COLOR'|'SLATE',
                            'RepeatFrameMsec': 123
                        },
                        'OutputLockingMode': 'EPOCH_LOCKING'|'PIPELINE_LOCKING',
                        'OutputTimingSource': 'INPUT_CLOCK'|'SYSTEM_CLOCK',
                        'SupportLowFramerateInputs': 'DISABLED'|'ENABLED'
                    },
                    'MotionGraphicsConfiguration': {
                        'MotionGraphicsInsertion': 'DISABLED'|'ENABLED',
                        'MotionGraphicsSettings': {
                            'HtmlMotionGraphicsSettings': {}
                        }
                    },
                    'NielsenConfiguration': {
                        'DistributorId': 'string',
                        'NielsenPcmToId3Tagging': 'DISABLED'|'ENABLED'
                    },
                    'OutputGroups': [
                        {
                            'Name': 'string',
                            'OutputGroupSettings': {
                                'ArchiveGroupSettings': {
                                    'ArchiveCdnSettings': {
                                        'ArchiveS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        }
                                    },
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'RolloverInterval': 123
                                },
                                'FrameCaptureGroupSettings': {
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'FrameCaptureCdnSettings': {
                                        'FrameCaptureS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        }
                                    }
                                },
                                'HlsGroupSettings': {
                                    'AdMarkers': [
                                        'ADOBE'|'ELEMENTAL'|'ELEMENTAL_SCTE35',
                                    ],
                                    'BaseUrlContent': 'string',
                                    'BaseUrlContent1': 'string',
                                    'BaseUrlManifest': 'string',
                                    'BaseUrlManifest1': 'string',
                                    'CaptionLanguageMappings': [
                                        {
                                            'CaptionChannel': 123,
                                            'LanguageCode': 'string',
                                            'LanguageDescription': 'string'
                                        },
                                    ],
                                    'CaptionLanguageSetting': 'INSERT'|'NONE'|'OMIT',
                                    'ClientCache': 'DISABLED'|'ENABLED',
                                    'CodecSpecification': 'RFC_4281'|'RFC_6381',
                                    'ConstantIv': 'string',
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'DirectoryStructure': 'SINGLE_DIRECTORY'|'SUBDIRECTORY_PER_STREAM',
                                    'DiscontinuityTags': 'INSERT'|'NEVER_INSERT',
                                    'EncryptionType': 'AES128'|'SAMPLE_AES',
                                    'HlsCdnSettings': {
                                        'HlsAkamaiSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                            'NumRetries': 123,
                                            'RestartDelay': 123,
                                            'Salt': 'string',
                                            'Token': 'string'
                                        },
                                        'HlsBasicPutSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        },
                                        'HlsMediaStoreSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'MediaStoreStorageClass': 'TEMPORAL',
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        },
                                        'HlsS3Settings': {
                                            'CannedAcl': 'AUTHENTICATED_READ'|'BUCKET_OWNER_FULL_CONTROL'|'BUCKET_OWNER_READ'|'PUBLIC_READ'
                                        },
                                        'HlsWebdavSettings': {
                                            'ConnectionRetryInterval': 123,
                                            'FilecacheDuration': 123,
                                            'HttpTransferMode': 'CHUNKED'|'NON_CHUNKED',
                                            'NumRetries': 123,
                                            'RestartDelay': 123
                                        }
                                    },
                                    'HlsId3SegmentTagging': 'DISABLED'|'ENABLED',
                                    'IFrameOnlyPlaylists': 'DISABLED'|'STANDARD',
                                    'IncompleteSegmentBehavior': 'AUTO'|'SUPPRESS',
                                    'IndexNSegments': 123,
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'IvInManifest': 'EXCLUDE'|'INCLUDE',
                                    'IvSource': 'EXPLICIT'|'FOLLOWS_SEGMENT_NUMBER',
                                    'KeepSegments': 123,
                                    'KeyFormat': 'string',
                                    'KeyFormatVersions': 'string',
                                    'KeyProviderSettings': {
                                        'StaticKeySettings': {
                                            'KeyProviderServer': {
                                                'PasswordParam': 'string',
                                                'Uri': 'string',
                                                'Username': 'string'
                                            },
                                            'StaticKeyValue': 'string'
                                        }
                                    },
                                    'ManifestCompression': 'GZIP'|'NONE',
                                    'ManifestDurationFormat': 'FLOATING_POINT'|'INTEGER',
                                    'MinSegmentLength': 123,
                                    'Mode': 'LIVE'|'VOD',
                                    'OutputSelection': 'MANIFESTS_AND_SEGMENTS'|'SEGMENTS_ONLY'|'VARIANT_MANIFESTS_AND_SEGMENTS',
                                    'ProgramDateTime': 'EXCLUDE'|'INCLUDE',
                                    'ProgramDateTimePeriod': 123,
                                    'RedundantManifest': 'DISABLED'|'ENABLED',
                                    'SegmentLength': 123,
                                    'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                    'SegmentsPerSubdirectory': 123,
                                    'StreamInfResolution': 'EXCLUDE'|'INCLUDE',
                                    'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                    'TimedMetadataId3Period': 123,
                                    'TimestampDeltaMilliseconds': 123,
                                    'TsFileMode': 'SEGMENTED_FILES'|'SINGLE_FILE'
                                },
                                'MediaPackageGroupSettings': {
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    }
                                },
                                'MsSmoothGroupSettings': {
                                    'AcquisitionPointId': 'string',
                                    'AudioOnlyTimecodeControl': 'PASSTHROUGH'|'USE_CONFIGURED_CLOCK',
                                    'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                    'ConnectionRetryInterval': 123,
                                    'Destination': {
                                        'DestinationRefId': 'string'
                                    },
                                    'EventId': 'string',
                                    'EventIdMode': 'NO_EVENT_ID'|'USE_CONFIGURED'|'USE_TIMESTAMP',
                                    'EventStopBehavior': 'NONE'|'SEND_EOS',
                                    'FilecacheDuration': 123,
                                    'FragmentLength': 123,
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'NumRetries': 123,
                                    'RestartDelay': 123,
                                    'SegmentationMode': 'USE_INPUT_SEGMENTATION'|'USE_SEGMENT_DURATION',
                                    'SendDelayMs': 123,
                                    'SparseTrackType': 'NONE'|'SCTE_35'|'SCTE_35_WITHOUT_SEGMENTATION',
                                    'StreamManifestBehavior': 'DO_NOT_SEND'|'SEND',
                                    'TimestampOffset': 'string',
                                    'TimestampOffsetMode': 'USE_CONFIGURED_OFFSET'|'USE_EVENT_START_DATE'
                                },
                                'MultiplexGroupSettings': {},
                                'RtmpGroupSettings': {
                                    'AdMarkers': [
                                        'ON_CUE_POINT_SCTE35',
                                    ],
                                    'AuthenticationScheme': 'AKAMAI'|'COMMON',
                                    'CacheFullBehavior': 'DISCONNECT_IMMEDIATELY'|'WAIT_FOR_SERVER',
                                    'CacheLength': 123,
                                    'CaptionData': 'ALL'|'FIELD1_608'|'FIELD1_AND_FIELD2_608',
                                    'InputLossAction': 'EMIT_OUTPUT'|'PAUSE_OUTPUT',
                                    'RestartDelay': 123
                                },
                                'UdpGroupSettings': {
                                    'InputLossAction': 'DROP_PROGRAM'|'DROP_TS'|'EMIT_PROGRAM',
                                    'TimedMetadataId3Frame': 'NONE'|'PRIV'|'TDRL',
                                    'TimedMetadataId3Period': 123
                                }
                            },
                            'Outputs': [
                                {
                                    'AudioDescriptionNames': [
                                        'string',
                                    ],
                                    'CaptionDescriptionNames': [
                                        'string',
                                    ],
                                    'OutputName': 'string',
                                    'OutputSettings': {
                                        'ArchiveOutputSettings': {
                                            'ContainerSettings': {
                                                'M2tsSettings': {
                                                    'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                    'Arib': 'DISABLED'|'ENABLED',
                                                    'AribCaptionsPid': 'string',
                                                    'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                    'AudioBufferModel': 'ATSC'|'DVB',
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'AudioStreamType': 'ATSC'|'DVB',
                                                    'Bitrate': 123,
                                                    'BufferModel': 'MULTIPLEX'|'NONE',
                                                    'CcDescriptor': 'DISABLED'|'ENABLED',
                                                    'DvbNitSettings': {
                                                        'NetworkId': 123,
                                                        'NetworkName': 'string',
                                                        'RepInterval': 123
                                                    },
                                                    'DvbSdtSettings': {
                                                        'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                        'RepInterval': 123,
                                                        'ServiceName': 'string',
                                                        'ServiceProviderName': 'string'
                                                    },
                                                    'DvbSubPids': 'string',
                                                    'DvbTdtSettings': {
                                                        'RepInterval': 123
                                                    },
                                                    'DvbTeletextPid': 'string',
                                                    'Ebif': 'NONE'|'PASSTHROUGH',
                                                    'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                    'EbpLookaheadMs': 123,
                                                    'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                    'EcmPid': 'string',
                                                    'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                    'EtvPlatformPid': 'string',
                                                    'EtvSignalPid': 'string',
                                                    'FragmentTime': 123.0,
                                                    'Klv': 'NONE'|'PASSTHROUGH',
                                                    'KlvDataPids': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'NullPacketBitrate': 123.0,
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'RateMode': 'CBR'|'VBR',
                                                    'Scte27Pids': 'string',
                                                    'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                    'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                    'SegmentationTime': 123.0,
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                },
                                                'RawSettings': {}
                                            },
                                            'Extension': 'string',
                                            'NameModifier': 'string'
                                        },
                                        'FrameCaptureOutputSettings': {
                                            'NameModifier': 'string'
                                        },
                                        'HlsOutputSettings': {
                                            'H265PackagingType': 'HEV1'|'HVC1',
                                            'HlsSettings': {
                                                'AudioOnlyHlsSettings': {
                                                    'AudioGroupId': 'string',
                                                    'AudioOnlyImage': {
                                                        'PasswordParam': 'string',
                                                        'Uri': 'string',
                                                        'Username': 'string'
                                                    },
                                                    'AudioTrackType': 'ALTERNATE_AUDIO_AUTO_SELECT'|'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'|'ALTERNATE_AUDIO_NOT_AUTO_SELECT'|'AUDIO_ONLY_VARIANT_STREAM',
                                                    'SegmentType': 'AAC'|'FMP4'
                                                },
                                                'Fmp4HlsSettings': {
                                                    'AudioRenditionSets': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH'
                                                },
                                                'FrameCaptureHlsSettings': {},
                                                'StandardHlsSettings': {
                                                    'AudioRenditionSets': 'string',
                                                    'M3u8Settings': {
                                                        'AudioFramesPerPes': 123,
                                                        'AudioPids': 'string',
                                                        'EcmPid': 'string',
                                                        'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'PatInterval': 123,
                                                        'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                        'PcrPeriod': 123,
                                                        'PcrPid': 'string',
                                                        'PmtInterval': 123,
                                                        'PmtPid': 'string',
                                                        'ProgramNum': 123,
                                                        'Scte35Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'Scte35Pid': 'string',
                                                        'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                        'TimedMetadataPid': 'string',
                                                        'TransportStreamId': 123,
                                                        'VideoPid': 'string'
                                                    }
                                                }
                                            },
                                            'NameModifier': 'string',
                                            'SegmentModifier': 'string'
                                        },
                                        'MediaPackageOutputSettings': {},
                                        'MsSmoothOutputSettings': {
                                            'H265PackagingType': 'HEV1'|'HVC1',
                                            'NameModifier': 'string'
                                        },
                                        'MultiplexOutputSettings': {
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            }
                                        },
                                        'RtmpOutputSettings': {
                                            'CertificateMode': 'SELF_SIGNED'|'VERIFY_AUTHENTICITY',
                                            'ConnectionRetryInterval': 123,
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            },
                                            'NumRetries': 123
                                        },
                                        'UdpOutputSettings': {
                                            'BufferMsec': 123,
                                            'ContainerSettings': {
                                                'M2tsSettings': {
                                                    'AbsentInputAudioBehavior': 'DROP'|'ENCODE_SILENCE',
                                                    'Arib': 'DISABLED'|'ENABLED',
                                                    'AribCaptionsPid': 'string',
                                                    'AribCaptionsPidControl': 'AUTO'|'USE_CONFIGURED',
                                                    'AudioBufferModel': 'ATSC'|'DVB',
                                                    'AudioFramesPerPes': 123,
                                                    'AudioPids': 'string',
                                                    'AudioStreamType': 'ATSC'|'DVB',
                                                    'Bitrate': 123,
                                                    'BufferModel': 'MULTIPLEX'|'NONE',
                                                    'CcDescriptor': 'DISABLED'|'ENABLED',
                                                    'DvbNitSettings': {
                                                        'NetworkId': 123,
                                                        'NetworkName': 'string',
                                                        'RepInterval': 123
                                                    },
                                                    'DvbSdtSettings': {
                                                        'OutputSdt': 'SDT_FOLLOW'|'SDT_FOLLOW_IF_PRESENT'|'SDT_MANUAL'|'SDT_NONE',
                                                        'RepInterval': 123,
                                                        'ServiceName': 'string',
                                                        'ServiceProviderName': 'string'
                                                    },
                                                    'DvbSubPids': 'string',
                                                    'DvbTdtSettings': {
                                                        'RepInterval': 123
                                                    },
                                                    'DvbTeletextPid': 'string',
                                                    'Ebif': 'NONE'|'PASSTHROUGH',
                                                    'EbpAudioInterval': 'VIDEO_AND_FIXED_INTERVALS'|'VIDEO_INTERVAL',
                                                    'EbpLookaheadMs': 123,
                                                    'EbpPlacement': 'VIDEO_AND_AUDIO_PIDS'|'VIDEO_PID',
                                                    'EcmPid': 'string',
                                                    'EsRateInPes': 'EXCLUDE'|'INCLUDE',
                                                    'EtvPlatformPid': 'string',
                                                    'EtvSignalPid': 'string',
                                                    'FragmentTime': 123.0,
                                                    'Klv': 'NONE'|'PASSTHROUGH',
                                                    'KlvDataPids': 'string',
                                                    'NielsenId3Behavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'NullPacketBitrate': 123.0,
                                                    'PatInterval': 123,
                                                    'PcrControl': 'CONFIGURED_PCR_PERIOD'|'PCR_EVERY_PES_PACKET',
                                                    'PcrPeriod': 123,
                                                    'PcrPid': 'string',
                                                    'PmtInterval': 123,
                                                    'PmtPid': 'string',
                                                    'ProgramNum': 123,
                                                    'RateMode': 'CBR'|'VBR',
                                                    'Scte27Pids': 'string',
                                                    'Scte35Control': 'NONE'|'PASSTHROUGH',
                                                    'Scte35Pid': 'string',
                                                    'SegmentationMarkers': 'EBP'|'EBP_LEGACY'|'NONE'|'PSI_SEGSTART'|'RAI_ADAPT'|'RAI_SEGSTART',
                                                    'SegmentationStyle': 'MAINTAIN_CADENCE'|'RESET_CADENCE',
                                                    'SegmentationTime': 123.0,
                                                    'TimedMetadataBehavior': 'NO_PASSTHROUGH'|'PASSTHROUGH',
                                                    'TimedMetadataPid': 'string',
                                                    'TransportStreamId': 123,
                                                    'VideoPid': 'string'
                                                }
                                            },
                                            'Destination': {
                                                'DestinationRefId': 'string'
                                            },
                                            'FecOutputSettings': {
                                                'ColumnDepth': 123,
                                                'IncludeFec': 'COLUMN'|'COLUMN_AND_ROW',
                                                'RowLength': 123
                                            }
                                        }
                                    },
                                    'VideoDescriptionName': 'string'
                                },
                            ]
                        },
                    ],
                    'TimecodeConfig': {
                        'Source': 'EMBEDDED'|'SYSTEMCLOCK'|'ZEROBASED',
                        'SyncThreshold': 123
                    },
                    'VideoDescriptions': [
                        {
                            'CodecSettings': {
                                'FrameCaptureSettings': {
                                    'CaptureInterval': 123,
                                    'CaptureIntervalUnits': 'MILLISECONDS'|'SECONDS'
                                },
                                'H264Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'Bitrate': 123,
                                    'BufFillPct': 123,
                                    'BufSize': 123,
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpaceSettings': {
                                        'ColorSpacePassthroughSettings': {},
                                        'Rec601Settings': {},
                                        'Rec709Settings': {}
                                    },
                                    'EntropyEncoding': 'CABAC'|'CAVLC',
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FlickerAq': 'DISABLED'|'ENABLED',
                                    'ForceFieldPictures': 'DISABLED'|'ENABLED',
                                    'FramerateControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopBReference': 'DISABLED'|'ENABLED',
                                    'GopClosedCadence': 123,
                                    'GopNumBFrames': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'Level': 'H264_LEVEL_1'|'H264_LEVEL_1_1'|'H264_LEVEL_1_2'|'H264_LEVEL_1_3'|'H264_LEVEL_2'|'H264_LEVEL_2_1'|'H264_LEVEL_2_2'|'H264_LEVEL_3'|'H264_LEVEL_3_1'|'H264_LEVEL_3_2'|'H264_LEVEL_4'|'H264_LEVEL_4_1'|'H264_LEVEL_4_2'|'H264_LEVEL_5'|'H264_LEVEL_5_1'|'H264_LEVEL_5_2'|'H264_LEVEL_AUTO',
                                    'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                    'MaxBitrate': 123,
                                    'MinIInterval': 123,
                                    'NumRefFrames': 123,
                                    'ParControl': 'INITIALIZE_FROM_SOURCE'|'SPECIFIED',
                                    'ParDenominator': 123,
                                    'ParNumerator': 123,
                                    'Profile': 'BASELINE'|'HIGH'|'HIGH_10BIT'|'HIGH_422'|'HIGH_422_10BIT'|'MAIN',
                                    'QualityLevel': 'ENHANCED_QUALITY'|'STANDARD_QUALITY',
                                    'QvbrQualityLevel': 123,
                                    'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR'|'VBR',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                    'Slices': 123,
                                    'Softness': 123,
                                    'SpatialAq': 'DISABLED'|'ENABLED',
                                    'SubgopLength': 'DYNAMIC'|'FIXED',
                                    'Syntax': 'DEFAULT'|'RP2027',
                                    'TemporalAq': 'DISABLED'|'ENABLED',
                                    'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                                },
                                'H265Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'HIGHER'|'LOW'|'MAX'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'AlternativeTransferFunction': 'INSERT'|'OMIT',
                                    'Bitrate': 123,
                                    'BufSize': 123,
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpaceSettings': {
                                        'ColorSpacePassthroughSettings': {},
                                        'Hdr10Settings': {
                                            'MaxCll': 123,
                                            'MaxFall': 123
                                        },
                                        'Rec601Settings': {},
                                        'Rec709Settings': {}
                                    },
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FlickerAq': 'DISABLED'|'ENABLED',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopClosedCadence': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'Level': 'H265_LEVEL_1'|'H265_LEVEL_2'|'H265_LEVEL_2_1'|'H265_LEVEL_3'|'H265_LEVEL_3_1'|'H265_LEVEL_4'|'H265_LEVEL_4_1'|'H265_LEVEL_5'|'H265_LEVEL_5_1'|'H265_LEVEL_5_2'|'H265_LEVEL_6'|'H265_LEVEL_6_1'|'H265_LEVEL_6_2'|'H265_LEVEL_AUTO',
                                    'LookAheadRateControl': 'HIGH'|'LOW'|'MEDIUM',
                                    'MaxBitrate': 123,
                                    'MinIInterval': 123,
                                    'ParDenominator': 123,
                                    'ParNumerator': 123,
                                    'Profile': 'MAIN'|'MAIN_10BIT',
                                    'QvbrQualityLevel': 123,
                                    'RateControlMode': 'CBR'|'MULTIPLEX'|'QVBR',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SceneChangeDetect': 'DISABLED'|'ENABLED',
                                    'Slices': 123,
                                    'Tier': 'HIGH'|'MAIN',
                                    'TimecodeInsertion': 'DISABLED'|'PIC_TIMING_SEI'
                                },
                                'Mpeg2Settings': {
                                    'AdaptiveQuantization': 'AUTO'|'HIGH'|'LOW'|'MEDIUM'|'OFF',
                                    'AfdSignaling': 'AUTO'|'FIXED'|'NONE',
                                    'ColorMetadata': 'IGNORE'|'INSERT',
                                    'ColorSpace': 'AUTO'|'PASSTHROUGH',
                                    'DisplayAspectRatio': 'DISPLAYRATIO16X9'|'DISPLAYRATIO4X3',
                                    'FilterSettings': {
                                        'TemporalFilterSettings': {
                                            'PostFilterSharpening': 'AUTO'|'DISABLED'|'ENABLED',
                                            'Strength': 'AUTO'|'STRENGTH_1'|'STRENGTH_2'|'STRENGTH_3'|'STRENGTH_4'|'STRENGTH_5'|'STRENGTH_6'|'STRENGTH_7'|'STRENGTH_8'|'STRENGTH_9'|'STRENGTH_10'|'STRENGTH_11'|'STRENGTH_12'|'STRENGTH_13'|'STRENGTH_14'|'STRENGTH_15'|'STRENGTH_16'
                                        }
                                    },
                                    'FixedAfd': 'AFD_0000'|'AFD_0010'|'AFD_0011'|'AFD_0100'|'AFD_1000'|'AFD_1001'|'AFD_1010'|'AFD_1011'|'AFD_1101'|'AFD_1110'|'AFD_1111',
                                    'FramerateDenominator': 123,
                                    'FramerateNumerator': 123,
                                    'GopClosedCadence': 123,
                                    'GopNumBFrames': 123,
                                    'GopSize': 123.0,
                                    'GopSizeUnits': 'FRAMES'|'SECONDS',
                                    'ScanType': 'INTERLACED'|'PROGRESSIVE',
                                    'SubgopLength': 'DYNAMIC'|'FIXED',
                                    'TimecodeInsertion': 'DISABLED'|'GOP_TIMECODE'
                                }
                            },
                            'Height': 123,
                            'Name': 'string',
                            'RespondToAfd': 'NONE'|'PASSTHROUGH'|'RESPOND',
                            'ScalingBehavior': 'DEFAULT'|'STRETCH_TO_OUTPUT',
                            'Sharpness': 123,
                            'Width': 123
                        },
                    ]
                },
                'Id': 'string',
                'InputAttachments': [
                    {
                        'AutomaticInputFailoverSettings': {
                            'ErrorClearTimeMsec': 123,
                            'FailoverConditions': [
                                {
                                    'FailoverConditionSettings': {
                                        'AudioSilenceSettings': {
                                            'AudioSelectorName': 'string',
                                            'AudioSilenceThresholdMsec': 123
                                        },
                                        'InputLossSettings': {
                                            'InputLossThresholdMsec': 123
                                        },
                                        'VideoBlackSettings': {
                                            'BlackDetectThreshold': 123.0,
                                            'VideoBlackThresholdMsec': 123
                                        }
                                    }
                                },
                            ],
                            'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                            'SecondaryInputId': 'string'
                        },
                        'InputAttachmentName': 'string',
                        'InputId': 'string',
                        'InputSettings': {
                            'AudioSelectors': [
                                {
                                    'Name': 'string',
                                    'SelectorSettings': {
                                        'AudioHlsRenditionSelection': {
                                            'GroupId': 'string',
                                            'Name': 'string'
                                        },
                                        'AudioLanguageSelection': {
                                            'LanguageCode': 'string',
                                            'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                        },
                                        'AudioPidSelection': {
                                            'Pid': 123
                                        },
                                        'AudioTrackSelection': {
                                            'Tracks': [
                                                {
                                                    'Track': 123
                                                },
                                            ]
                                        }
                                    }
                                },
                            ],
                            'CaptionSelectors': [
                                {
                                    'LanguageCode': 'string',
                                    'Name': 'string',
                                    'SelectorSettings': {
                                        'AncillarySourceSettings': {
                                            'SourceAncillaryChannelNumber': 123
                                        },
                                        'AribSourceSettings': {},
                                        'DvbSubSourceSettings': {
                                            'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                            'Pid': 123
                                        },
                                        'EmbeddedSourceSettings': {
                                            'Convert608To708': 'DISABLED'|'UPCONVERT',
                                            'Scte20Detection': 'AUTO'|'OFF',
                                            'Source608ChannelNumber': 123,
                                            'Source608TrackNumber': 123
                                        },
                                        'Scte20SourceSettings': {
                                            'Convert608To708': 'DISABLED'|'UPCONVERT',
                                            'Source608ChannelNumber': 123
                                        },
                                        'Scte27SourceSettings': {
                                            'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                            'Pid': 123
                                        },
                                        'TeletextSourceSettings': {
                                            'OutputRectangle': {
                                                'Height': 123.0,
                                                'LeftOffset': 123.0,
                                                'TopOffset': 123.0,
                                                'Width': 123.0
                                            },
                                            'PageNumber': 'string'
                                        }
                                    }
                                },
                            ],
                            'DeblockFilter': 'DISABLED'|'ENABLED',
                            'DenoiseFilter': 'DISABLED'|'ENABLED',
                            'FilterStrength': 123,
                            'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                            'NetworkInputSettings': {
                                'HlsInputSettings': {
                                    'Bandwidth': 123,
                                    'BufferSegments': 123,
                                    'Retries': 123,
                                    'RetryInterval': 123,
                                    'Scte35Source': 'MANIFEST'|'SEGMENTS'
                                },
                                'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                            },
                            'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                            'SourceEndBehavior': 'CONTINUE'|'LOOP',
                            'VideoSelector': {
                                'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                                'ColorSpaceSettings': {
                                    'Hdr10Settings': {
                                        'MaxCll': 123,
                                        'MaxFall': 123
                                    }
                                },
                                'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                                'SelectorSettings': {
                                    'VideoSelectorPid': {
                                        'Pid': 123
                                    },
                                    'VideoSelectorProgramId': {
                                        'ProgramId': 123
                                    }
                                }
                            }
                        }
                    },
                ],
                'InputSpecification': {
                    'Codec': 'MPEG2'|'AVC'|'HEVC',
                    'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                    'Resolution': 'SD'|'HD'|'UHD'
                },
                'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
                'Name': 'string',
                'PipelineDetails': [
                    {
                        'ActiveInputAttachmentName': 'string',
                        'ActiveInputSwitchActionName': 'string',
                        'ActiveMotionGraphicsActionName': 'string',
                        'ActiveMotionGraphicsUri': 'string',
                        'PipelineId': 'string'
                    },
                ],
                'PipelinesRunningCount': 123,
                'RoleArn': 'string',
                'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
                'Tags': {
                    'string': 'string'
                },
                'Vpc': {
                    'AvailabilityZones': [
                        'string',
                    ],
                    'NetworkInterfaceIds': [
                        'string',
                    ],
                    'SecurityGroupIds': [
                        'string',
                    ],
                    'SubnetIds': [
                        'string',
                    ]
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* The class of the channel has been successfully updated.
        

        - **Channel** *(dict) --* Placeholder documentation for Channel
          

          - **Arn** *(string) --* The unique arn of the channel.
          

          - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
            

            - **Resolution** *(string) --* Maximum CDI input resolution
        
          

          - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
          

          - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
            

            - *(dict) --* Placeholder documentation for OutputDestination
              

              - **Id** *(string) --* User-specified id. This is used in an output group or an output.
              

              - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
                

                - *(dict) --* MediaPackage Output Destination Settings
                  

                  - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
              
            
              

              - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
                

                - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
                

                - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
            
              

              - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
                

                - *(dict) --* Placeholder documentation for OutputDestinationSettings
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                  

                  - **Url** *(string) --* A URL specifying a destination
                  

                  - **Username** *(string) --* username for destination
              
            
          
        
          

          - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
            

            - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
              

              - **SourceIp** *(string) --* Public IP of where a channel's output comes from
          
        
          

          - **EncoderSettings** *(dict) --* Encoder Settings
            

            - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription
              

              - *(dict) --* Audio Description
                

                - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.
                  

                  - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.
                  

                  - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected using the chosen algorithm. If set to measureOnly, the audio will be measured but not adjusted.
                  

                  - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is entered, a default value will be used according to the chosen algorithm. The CALM Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a target of -23 LKFS.
              
                

                - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source for this AudioDescription.
                

                - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
                

                - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If the input contains an ISO 639 audioType, then that value is passed through to the output. If the input contains no ISO 639 audioType, the value in Audio Type is included in the output. useConfigured: The value in Audio Type is included in the output. Note that this field and audioType are both ignored if inputType is broadcasterMixedAd.
                

                - **CodecSettings** *(dict) --* Audio codec settings.
                  

                  - **AacSettings** *(dict) --* Aac Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate control mode and profile.
                    

                    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. The adReceiverMix setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
                    

                    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. The values in audioTypeControl and audioType (in AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio + AD.
                    

                    - **Profile** *(string) --* AAC Profile.
                    

                    - **RateControlMode** *(string) --* Rate Control Mode.
                    

                    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.
                    

                    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode and profile.
                    

                    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
                    

                    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.
                
                  

                  - **Ac3Settings** *(dict) --* Ac3 Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                    

                    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted AC-3 stream. See ATSC A/52-2012 for background on these values.
                    

                    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.
                    

                    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input audio is Dolby Digital, dialnorm will be passed through.
                    

                    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
                    

                    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.
                    

                    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                
                  

                  - **Eac3Settings** *(dict) --* Eac3 Settings
                    

                    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the coding mode.
                    

                    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
                    

                    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of channels.
                    

                    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all input channels.
                    

                    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
                    

                    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.
                    

                    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
                    

                    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE channel
                    

                    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
                    

                    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used for 3/2 coding mode.
                    

                    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only used for 3/2 coding mode.
                    

                    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used for 3/2 coding mode.
                    

                    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only used for 3/2 coding mode.
                    

                    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
                    

                    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
                    

                    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
                    

                    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding mode.
                    

                    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
                    

                    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
                
                  

                  - **Mp2Settings** *(dict) --* Mp2 Settings
                    

                    - **Bitrate** *(float) --* Average bitrate in bits/second.
                    

                    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10 (for mono) or codingMode20 (for stereo).
                    

                    - **SampleRate** *(float) --* Sample rate in Hz.
                
                  

                  - **PassThroughSettings** *(dict) --* Pass Through Settings
                
                  

                  - **WavSettings** *(dict) --* Wav Settings
                    

                    - **BitDepth** *(float) --* Bits per sample.
                    

                    - **CodingMode** *(string) --* The audio coding mode for the WAV audio. The mode determines the number of channels in the audio.
                    

                    - **SampleRate** *(float) --* Sample rate in Hz.
                
              
                

                - **LanguageCode** *(string) --* RFC 5646 language code representing the language of the audio output track. Only used if languageControlMode is useConfigured, or there is no ISO 639 language code specified in the input.
                

                - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language code of the output to follow the ISO 639 language code of the input. The languageCode will be used when useConfigured is set, or when followInput is selected but there is no ISO 639 language code specified by the input.
                

                - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to uniquely identify this AudioDescription. Description names should be unique within this Live Event.
                

                - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed into the output audio channels.
                  

                  - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with appropriate gain adjustments.
                    

                    - *(dict) --* Audio Channel Mapping
                      

                      - **InputChannelLevels** *(list) --* Indices and gain values for each input channel that should be remixed into this output channel.
                        

                        - *(dict) --* Input Channel Level
                          

                          - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values are within the range from -60 (mute) and 6 dB.
                          

                          - **InputChannel** *(integer) --* The index of the input channel used as a source.
                      
                    
                      

                      - **OutputChannel** *(integer) --* The index of the output channel being produced.
                  
                
                  

                  - **ChannelsIn** *(integer) --* Number of input channels to be used.
                  

                  - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1, 2, 4, 6, 8
              
                

                - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name displayed by the player (eg. English, or Director Commentary).
            
          
            

            - **AvailBlanking** *(dict) --* Settings for ad avail blanking.
              

              - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black. Only bmp and png images are supported.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
          
            

            - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.
              

              - **AvailSettings** *(dict) --* Ad avail settings.
                

                - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert
                  

                  - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                  

                  - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                  

                  - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
              
                

                - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos
                  

                  - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does not apply to OOB messages.
                  

                  - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates
                  

                  - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
              
            
          
            

            - **BlackoutSlate** *(dict) --* Settings for blackout slate.
              

              - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid black. Only bmp and png images are supported.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted when the Network Start Segmentation Descriptor is encountered. The Network End and Network Start descriptors must contain a network ID that matches the value entered in "Network ID".
              

              - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout image. Image will be scaled to fill the entire output raster.
                

                - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g., "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").
              

              - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked when indicated by program metadata.
          
            

            - **CaptionDescriptions** *(list) --* Settings for caption decriptions
              

              - *(dict) --* Caption Description
                

                - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as a caption source when generating output captions. This field should match a captionSelector name.
                

                - **DestinationSettings** *(dict) --* Additional settings for captions destination that depend on the destination type.
                  

                  - **AribDestinationSettings** *(dict) --* Arib Destination Settings
                
                  

                  - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings
                    

                    - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                      

                      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                      

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                      

                      - **Username** *(string) --* Documentation update needed
                  
                    

                    - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                    

                    - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                    

                    - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. All burn-in and DVB-Sub font settings must match.
                    

                    - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings must match.
                
                  

                  - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings
                    

                    - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. Selecting "smart" justification will left-justify live subtitles and center-justify pre-recorded subtitles. This option is not valid for source captions that are STL or 608/embedded. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **Font** *(dict) --* External font file used for caption burn-in. File extension must be 'ttf' or 'tte'. Although the user can select output fonts for many different types of input captions, embedded, STL and teletext sources use a strict grid system. Using external fonts with these caption sources could cause unexpected display of proportional fonts. All burn-in and DVB-Sub font settings must match.
                      

                      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                      

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                      

                      - **Username** *(string) --* Documentation update needed
                  
                    

                    - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96 dpi. All burn-in and DVB-Sub font settings must match.
                    

                    - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size of the output. Giving a positive integer will specify the exact font size in points. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left. All burn-in and DVB-Sub font settings must match.
                    

                    - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. All burn-in and DVB-Sub font settings must match.
                    

                    - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used to generate the output subtitles bitmap. Only applicable for Teletext inputs and DVB-Sub/Burn-in outputs.
                    

                    - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit xPosition is provided, the horizontal caption position will be determined by the alignment parameter. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                    

                    - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit yPosition is provided, the caption will be positioned towards the bottom of the output. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
                
                  

                  - **EbuTtDDestinationSettings** *(dict) --* Ebu Tt DDestination Settings
                    

                    - **CopyrightHolder** *(string) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. Complete this field if you want to include the name of the copyright holder in the copyright metadata tag in the TTML
                    

                    - **FillLineGap** *(string) --* Specifies how to handle the gap between the lines (in multi-line captions). - enabled: Fill with the captions background color (as specified in the input captions). - disabled: Leave the gap unfilled.
                    

                    - **FontFamily** *(string) --* Specifies the font family to include in the font data attached to the EBU-TT captions. Valid only if styleControl is set to include. If you leave this field empty, the font family is set to "monospaced". (If styleControl is set to exclude, the font family is always set to "monospaced".) You specify only the font family. All other style information (color, bold, position and so on) is copied from the input captions. The size is always set to 100% to allow the downstream player to choose the size. - Enter a list of font families, as a comma-separated list of font names, in order of preference. The name can be a font family (such as “Arial”), or a generic font family (such as “serif”), or “default” (to let the downstream player choose the font). - Leave blank to set the family to “monospace”.
                    

                    - **StyleControl** *(string) --* Specifies the style information (font color, font position, and so on) to include in the font data that is attached to the EBU-TT captions. - include: Take the style information (font color, font position, and so on) from the source captions and include that information in the font data attached to the EBU-TT captions. This option is valid only if the source captions are Embedded or Teletext. - exclude: In the font data attached to the EBU-TT captions, set the font family to "monospaced". Do not include any other style information.
                
                  

                  - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings
                
                  

                  - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination Settings
                
                  

                  - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings
                
                  

                  - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination Settings
                
                  

                  - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings
                
                  

                  - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings
                
                  

                  - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings
                
                  

                  - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings
                    

                    - **StyleControl** *(string) --* When set to passthrough, passes through style and position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT output or TTML output.
                
                  

                  - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings
                    

                    - **StyleControl** *(string) --* Controls whether the color and position of the source captions is passed through to the WebVTT output captions. PASSTHROUGH - Valid only if the source captions are EMBEDDED or TELETEXT. NO_STYLE_DATA - Don't pass through the style. The output captions will not contain any font styling information.
                
              
                

                - **LanguageCode** *(string) --* ISO 639-2 three-digit code: http://www.loc.gov/standards/iso639-2/
                

                - **LanguageDescription** *(string) --* Human readable information to indicate captions available for players (eg. English, or Spanish).
                

                - **Name** *(string) --* Name of the caption description. Used to associate a caption description with an output. Names must be unique within an event.
            
          
            

            - **FeatureActivations** *(dict) --* Feature Activations
              

              - **InputPrepareScheduleActions** *(string) --* Enables the Input Prepare feature. You can create Input Prepare actions in the schedule only if this feature is enabled. If you disable the feature on an existing schedule, make sure that you first delete all input prepare actions from the schedule.
          
            

            - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.
              

              - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.
              

              - **InputEndAction** *(string) --* Indicates the action to take when the current input completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart at the beginning of the first input. When "none" is configured the encoder will transcode either black, a solid color, or a user specified slate images per the "Input Loss Behavior" configuration until the next input switch occurs (which is controlled through the Channel Schedule API).
              

              - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.
                

                - **BlackFrameMsec** *(integer) --* Documentation update needed
                

                - **InputLossImageColor** *(string) --* When input loss image type is "color" this field specifies the color to use. Value: 6 hex characters representing the values of RGB.
                

                - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields specify the parameters for accessing the slate.
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                  

                  - **Username** *(string) --* Documentation update needed
              
                

                - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a slate into the output after input loss exceeds blackFrameMsec.
                

                - **RepeatFrameMsec** *(integer) --* Documentation update needed
            
              

              - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized. PIPELINE_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the other. EPOCH_LOCKING - MediaLive will attempt to synchronize the output of each pipeline to the Unix epoch.
              

              - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live encoder should be paced by its system clock (which optionally may be locked to another source via NTP) or should be locked to the clock of the source that is providing the input stream.
              

              - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very low video framerates. This is commonly set to enabled for music channels with less than one video frame per second.
          
            

            - **MotionGraphicsConfiguration** *(dict) --* Settings for motion graphics.
              

              - **MotionGraphicsInsertion** *(string) --* Motion Graphics Insertion
              

              - **MotionGraphicsSettings** *(dict) --* Motion Graphics Settings
                

                - **HtmlMotionGraphicsSettings** *(dict) --* Html Motion Graphics Settings
              
            
          
            

            - **NielsenConfiguration** *(dict) --* Nielsen configuration settings.
              

              - **DistributorId** *(string) --* Enter the Distributor ID assigned to your organization by Nielsen.
              

              - **NielsenPcmToId3Tagging** *(string) --* Enables Nielsen PCM to ID3 tagging
          
            

            - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup
              

              - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                

                - **Name** *(string) --* Custom output group name optionally defined by the user. Only letters, numbers, and the underscore character allowed; only 32 characters allowed.
                

                - **OutputGroupSettings** *(dict) --* Settings associated with the output group.
                  

                  - **ArchiveGroupSettings** *(dict) --* Archive Group Settings
                    

                    - **ArchiveCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **ArchiveS3Settings** *(dict) --* Archive S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                  
                    

                    - **Destination** *(dict) --* A directory and base filename where archive files should be written.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before closing and starting a new one.
                
                  

                  - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings
                    

                    - **Destination** *(dict) --* The destination for the frame capture files. Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example, s3ssl://sportsDelivery/highlights/20180820/curling-) or the URI for a MediaStore container, plus a file name prefix (for example, mediastoressl://sportsDelivery/20180820/curling-). The final file names consist of the prefix from the destination field (for example, "curling-") + name modifier + the counter (5 digits, starting from 00001) + extension (which is always .jpg). For example, curling-low.00001.jpg
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **FrameCaptureCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **FrameCaptureS3Settings** *(dict) --* Frame Capture S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                  
                
                  

                  - **HlsGroupSettings** *(dict) --* Hls Group Settings
                    

                    - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
                      

                      - *(string) --* Hls Ad Markers
                  
                    

                    - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                    

                    - **BaseUrlContent1** *(string) --* Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
                    

                    - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
                    

                    - **BaseUrlManifest1** *(string) --* Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
                    

                    - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
                      

                      - *(dict) --* Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
                        

                        - **CaptionChannel** *(integer) --* The closed caption channel being described by this CaptionLanguageMapping. Each channel mapping must have a unique channel number (maximum of 4)
                        

                        - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see http://www.loc.gov/standards/iso639-2)
                        

                        - **LanguageDescription** *(string) --* Textual description of language
                    
                  
                    

                    - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
                    

                    - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
                    

                    - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
                    

                    - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
                    

                    - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **DirectoryStructure** *(string) --* Place segments in subdirectories.
                    

                    - **DiscontinuityTags** *(string) --* Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
                    

                    - **EncryptionType** *(string) --* Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
                    

                    - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.
                      

                      - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to Akamai. User should contact Akamai to enable this feature.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                        

                        - **Salt** *(string) --* Salt for authenticated Akamai.
                        

                        - **Token** *(string) --* Token parameter for authenticated akamai. If not specified, _gda_ is used.
                    
                      

                      - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                      

                      - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are stored in non-persistent memory for faster reading and writing.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                      

                      - **HlsS3Settings** *(dict) --* Hls S3 Settings
                        

                        - **CannedAcl** *(string) --* Specify the canned ACL to apply to each S3 request. Defaults to none.
                    
                      

                      - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the CDN if the connection is lost.
                        

                        - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                        

                        - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer encoding to WebDAV.
                        

                        - **NumRetries** *(integer) --* Number of retry attempts that will be made before the Live Event is put into an error state.
                        

                        - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                    
                  
                    

                    - **HlsId3SegmentTagging** *(string) --* State of HLS ID3 Segment Tagging
                    

                    - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
                    

                    - **IncompleteSegmentBehavior** *(string) --* Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
                    

                    - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
                    

                    - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                    

                    - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
                    

                    - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
                    

                    - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
                    

                    - **KeyFormat** *(string) --* The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
                    

                    - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a slash delimited list of version values (1/2/3).
                    

                    - **KeyProviderSettings** *(dict) --* The key provider settings.
                      

                      - **StaticKeySettings** *(dict) --* Static Key Settings
                        

                        - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting content.
                          

                          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                          

                          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                          

                          - **Username** *(string) --* Documentation update needed
                      
                        

                        - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal string.
                    
                  
                    

                    - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.
                    

                    - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should use floating point or integer values for segment duration.
                    

                    - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
                    

                    - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
                    

                    - **OutputSelection** *(string) --* MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
                    

                    - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestampOffset.
                    

                    - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
                    

                    - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
                    

                    - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
                    

                    - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                    

                    - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
                    

                    - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
                    

                    - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                    

                    - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                    

                    - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta offset to fine tune the timestamps.
                    

                    - **TsFileMode** *(string) --* SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
                
                  

                  - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings
                    

                    - **Destination** *(dict) --* MediaPackage channel destination.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                
                  

                  - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings
                    

                    - **AcquisitionPointId** *(string) --* The ID to include in each message in the sparse track. Ignored if sparseTrackType is NONE.
                    

                    - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS Smooth output, the fragment absolute time will be set to the current timecode. This option does not write timecodes to the audio elementary stream.
                    

                    - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https certificate chain to a trusted Certificate Authority (CA). This will cause https outputs to self-signed certificates to fail.
                    

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying connection to the IIS server if the connection is lost. Content will be cached during this time and the cache will be be delivered to the IIS server once the connection is re-established.
                    

                    - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server. Elemental Live acts as a "Push" encoder to IIS.
                      

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string
                  
                    

                    - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only be specified if eventIdMode is set to useConfigured.
                    

                    - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS server. If no event ID is sent and the same Live Event is used without changing the publishing point, clients might see cached video from the previous run. Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send an event ID based on the current timestamp - "noEventId" - do not send an event ID to the IIS server.
                    

                    - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server when stopping the event
                    

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming outputs.
                    

                    - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds). Fragment length must be compatible with GOP size and framerate.
                    

                    - **InputLossAction** *(string) --* Parameter that control output group behavior on input loss.
                    

                    - **NumRetries** *(integer) --* Number of retry attempts.
                    

                    - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to output failure, due to exhausting the numRetries on one segment, or exceeding filecacheDuration.
                    

                    - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The configured segment size is always used.
                    

                    - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the second pipeline.
                    

                    - **SparseTrackType** *(string) --* Identifies the type of data to place in the sparse track: - SCTE35: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame to start a new segment. - SCTE35_WITHOUT_SEGMENTATION: Insert SCTE-35 messages from the source content. With each message, insert an IDR frame but don't start a new segment. - NONE: Don't generate a sparse track for any outputs in this output group.
                    

                    - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so publishing point doesn't start until all streams start.
                    

                    - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if timestampOffsetMode is set to useConfiguredOffset.
                    

                    - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. - useEventStartDate: Use the date the event was started as the offset - useConfiguredOffset: Use an explicitly configured date as the offset
                
                  

                  - **MultiplexGroupSettings** *(dict) --* Multiplex Group Settings
                
                  

                  - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings
                    

                    - **AdMarkers** *(list) --* Choose the ad marker type for this output group. MediaLive will create a message based on the content of each SCTE-35 message, format it for that marker type, and insert it in the datastream.
                      

                      - *(string) --* Rtmp Ad Markers
                  
                    

                    - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting with CDN
                    

                    - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If remote origin server stalls the RTMP connection and does not accept content fast enough the 'Media Cache' will fill up. When the cache reaches the duration specified by cacheLength the cache will stop accepting new content. If set to disconnectImmediately, the RTMP output will force a disconnect. Clear the media cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes to allow the origin server to begin accepting data again.
                    

                    - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer size.
                    

                    - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields will be passed. If set to 'field1608' then only the data carried in 608 from field 1 video will be passed.
                    

                    - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop transmitting data until input returns. This does not close the underlying RTMP connection.
                    

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait until a restart is initiated. A value of 0 means never restart.
                
                  

                  - **UdpGroupSettings** *(dict) --* Udp Group Settings
                    

                    - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is lost, and no more backup inputs are available. When dropTs is selected the entire transport stream will stop being emitted. When dropProgram is selected the program can be dropped from the transport stream (and replaced with null packets to meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream will continue to be produced normally with repeat frames, black frames, or slate frames substituted for the absent input video.
                    

                    - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.
                    

                    - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.
                
              
                

                - **Outputs** *(list) --* Placeholder documentation for __listOfOutput
                  

                  - *(dict) --* Output settings. There can be multiple outputs within a group.
                    

                    - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio sources for this output.
                      

                      - *(string) --* Placeholder documentation for __string
                  
                    

                    - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as caption sources for this output.
                      

                      - *(string) --* Placeholder documentation for __string
                  
                    

                    - **OutputName** *(string) --* The name used to identify an output.
                    

                    - **OutputSettings** *(dict) --* Output type-specific settings.
                      

                      - **ArchiveOutputSettings** *(dict) --* Archive Output Settings
                        

                        - **ContainerSettings** *(dict) --* Settings specific to the container type of the file.
                          

                          - **M2tsSettings** *(dict) --* M2ts Settings
                            

                            - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                            

                            - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                            

                            - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                            

                            - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                            

                            - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                            

                            - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                            

                            - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                            

                            - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                              

                              - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                              

                              - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                              

                              - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                              

                              - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                              

                              - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                          
                            

                            - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                            

                            - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                            

                            - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                            

                            - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                            

                            - **EcmPid** *(string) --* This field is unused and deprecated.
                            

                            - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                            

                            - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                            

                            - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                            

                            - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                            

                            - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                            

                            - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                            

                            - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                        
                          

                          - **RawSettings** *(dict) --* Raw Settings
                        
                      
                        

                        - **Extension** *(string) --* Output file extension. If excluded, this will be auto-selected from the container type.
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                    
                      

                      - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings
                        

                        - **NameModifier** *(string) --* Required if the output group contains more than one output. This modifier forms part of the output file name.
                    
                      

                      - **HlsOutputSettings** *(dict) --* Hls Output Settings
                        

                        - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                        

                        - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These settings are different for audio-only outputs.
                          

                          - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings
                            

                            - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition belongs.
                            

                            - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to use as the cover art for an audio-only output. We recommend a low bit-size file because the image increases the output audio bandwidth. The image is attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.
                              

                              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                              

                              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                              

                              - **Username** *(string) --* Documentation update needed
                          
                            

                            - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
                            

                            - **SegmentType** *(string) --* Specifies the segment type.
                        
                          

                          - **Fmp4HlsSettings** *(dict) --* Fmp4 Hls Settings
                            

                            - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                        
                          

                          - **FrameCaptureHlsSettings** *(dict) --* Frame Capture Hls Settings
                        
                          

                          - **StandardHlsSettings** *(dict) --* Standard Hls Settings
                            

                            - **AudioRenditionSets** *(string) --* List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
                            

                            - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container
                              

                              - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                              

                              - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values.
                              

                              - **EcmPid** *(string) --* This parameter is unused and deprecated.
                              

                              - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                              

                              - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                              

                              - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                              

                              - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock References (PCRs) inserted into the transport stream.
                              

                              - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value.
                              

                              - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. A value of \"0\" writes out the PMT once per segment file.
                              

                              - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                              

                              - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                              

                              - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35 signals from the input source to this output.
                              

                              - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                              

                              - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata is passed through from input to output.
                              

                              - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                              

                              - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                              

                              - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                          
                        
                      
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Accepts \"Format Identifiers\":#formatIdentifierParameters.
                        

                        - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.
                    
                      

                      - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings
                    
                      

                      - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings
                        

                        - **H265PackagingType** *(string) --* Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
                        

                        - **NameModifier** *(string) --* String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
                    
                      

                      - **MultiplexOutputSettings** *(dict) --* Multiplex Output Settings
                        

                        - **Destination** *(dict) --* Destination is a Multiplex.
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                    
                      

                      - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings
                        

                        - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls certificate chain to a trusted Certificate Authority (CA). This will cause rtmps outputs with self-signed certificates to fail.
                        

                        - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying a connection to the Flash Media server if the connection is lost.
                        

                        - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg. rtmp://host/appname). For connection to Akamai, a username and password must be supplied. URI fields accept format identifiers.
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                        

                        - **NumRetries** *(integer) --* Number of retry attempts.
                    
                      

                      - **UdpOutputSettings** *(dict) --* Udp Output Settings
                        

                        - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values increase latency through the transcoder but simultaneously assist the transcoder in maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery, input switching, input disruptions, picture reordering, etc.
                        

                        - **ContainerSettings** *(dict) --* Udp Container Settings
                          

                          - **M2tsSettings** *(dict) --* M2ts Settings
                            

                            - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio streams will be removed from the program if the selected input audio stream is removed from the input. This allows the output audio configuration to dynamically change based on input configuration. If this is set to encodeSilence, all output audio streams will output encoded silence when not connected to an active input stream.
                            

                            - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing and removes video descriptor.
                            

                            - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for ARIB Captions will be auto-selected from unused pids. If set to useConfigured, ARIB Captions will be on the configured pid number.
                            

                            - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for Dolby Digital audio. When set to atsc, the ATSC model is used.
                            

                            - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for each PES packet.
                            

                            - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.
                            

                            - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits per second. Setting to 0 lets the muxer automatically determine the appropriate bitrate.
                            

                            - **BufferModel** *(string) --* Controls the timing accuracy for output network traffic. Leave as MULTIPLEX to ensure accurate network packet timing. Or set to NONE, which might result in lower latency but will result in more variability in output network packet timing. This variability might cause interruptions, jitter, or bursty behavior in your playback or receiving devices.
                            

                            - **CcDescriptor** *(string) --* When set to enabled, generates captionServiceDescriptor in PMT.
                            

                            - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
                              

                              - **NetworkId** *(integer) --* The numeric value placed in the Network Information Table (NIT).
                              

                              - **NetworkName** *(string) --* The network name text placed in the networkNameDescriptor inside the Network Information Table. Maximum length is 256 characters.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at the specified table repetition interval.
                              

                              - **OutputSdt** *(string) --* Selects method of inserting SDT information into output stream. The sdtFollow setting copies SDT information from input stream to output stream. The sdtFollowIfPresent setting copies SDT information from input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. The sdtManual setting means user will enter the SDT information. The sdtNone setting means output stream will not contain SDT information.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                              

                              - **ServiceName** *(string) --* The service name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                              

                              - **ServiceProviderName** *(string) --* The service provider name placed in the serviceDescriptor in the Service Description Table. Maximum length is 256 characters.
                          
                            

                            - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB Subtitle data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
                              

                              - **RepInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream.
                          
                            

                            - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB Teletext data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the input source to this output.
                            

                            - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. Only available when EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will always follow the video interval.
                            

                            - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary Points do not come within the specified time interval of each other by looking ahead at input video. If another EBP is going to come in within the specified time interval, the current EBP is not emitted, and the segment is "stretched" to the next marker. The lookahead value does not add latency to the system. The Live Event must be configured elsewhere to create sufficient latency to make the lookahead accurate.
                            

                            - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set to videoAndAudioPids, EBP markers will be placed on the video PID and all audio PIDs. If set to videoPid, EBP markers will be placed on only the video PID.
                            

                            - **EcmPid** *(string) --* This field is unused and deprecated.
                            

                            - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES header.
                            

                            - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV Platform data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV Signal data to this output. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used with EBP markers.
                            

                            - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input source to this output.
                            

                            - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **NielsenId3Behavior** *(string) --* If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
                            

                            - **NullPacketBitrate** *(float) --* Value in bits per second of extra null packets to insert into the transport stream. This can be used if a downstream encryption system requires periodic null packets.
                            

                            - **PatInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
                            

                            - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock Reference (PCRs) inserted into the transport stream.
                            

                            - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **PmtInterval** *(integer) --* The number of milliseconds between instances of this table in the output transport stream. Valid values are 0, 10..1000.
                            

                            - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **ProgramNum** *(integer) --* The value of the program number field in the Program Map Table.
                            

                            - **RateMode** *(string) --* When vbr, does not insert null packets into transport stream to fill specified bitrate. The bitrate setting acts as the maximum bitrate when vbr is set.
                            

                            - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27 data to this output. Multiple values are accepted, and can be entered in ranges and/or by comma separation. Can be entered as decimal or hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input source to this output.
                            

                            - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each segmentationTime period. raiSegstart sets the Random Access Indicator bit in the adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the private data bytes. psiSegstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
                            

                            - **SegmentationStyle** *(string) --* The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "resetCadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of $segmentationTime seconds. When a segmentation style of "maintainCadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentationTime seconds. Note that EBP lookahead is a slight exception to this rule.
                            

                            - **SegmentationTime** *(float) --* The length in seconds of each segment. Required unless markers is set to _none_.
                            

                            - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata will be passed through from input to output.
                            

                            - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed metadata stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                            

                            - **TransportStreamId** *(integer) --* The value of the transport stream ID field in the Program Map Table.
                            

                            - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video stream in the transport stream. Can be entered as a decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).
                        
                      
                        

                        - **Destination** *(dict) --* Destination address and port number for RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).
                          

                          - **DestinationRefId** *(string) --* Placeholder documentation for __string
                      
                        

                        - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error Correction on UDP outputs.
                          

                          - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the FEC protection matrix. The number of transport stream packets per column error correction packet. Must be between 4 and 20, inclusive.
                          

                          - **IncludeFec** *(string) --* Enables column only or column and row based FEC
                          

                          - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used, then larger values increase robustness. If Row FEC is used, then this is the number of transport stream packets per row error correction packet, and the value must be between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is column, this value must be 1 to 20, inclusive.
                      
                    
                  
                    

                    - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the source for this output.
                
              
            
          
            

            - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode information from inputs.
              

              - **Source** *(string) --* Identifies the source for the timecode that will be associated with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode from the the source. If no embedded timecode is detected in the source, the system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.
              

              - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.
          
            

            - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription
              

              - *(dict) --* Video settings for this stream.
                

                - **CodecSettings** *(dict) --* Video codec settings.
                  

                  - **FrameCaptureSettings** *(dict) --* Frame Capture Settings
                    

                    - **CaptureInterval** *(integer) --* The frequency at which to capture frames for inclusion in the output. May be specified in either seconds or milliseconds, as specified by captureIntervalUnits.
                    

                    - **CaptureIntervalUnits** *(string) --* Unit for the frame capture interval.
                
                  

                  - **H264Settings** *(dict) --* H264 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Enables or disables adaptive quantization, which is a technique MediaLive can apply to video on a frame-by-frame basis to produce more compression without losing quality. There are three types of adaptive quantization: flicker, spatial, and temporal. Set the field in one of these ways: Set to Auto. Recommended. For each type of AQ, MediaLive will determine if AQ is needed, and if so, the appropriate strength. Set a strength (a value other than Auto or Disable). This strength will apply to any of the AQ fields that you choose to enable. Set to Disabled to disable all types of adaptive quantization.
                    

                    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                    

                    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                    

                    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled (HRD buffer model).
                    

                    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                    

                    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                    

                    - **ColorSpaceSettings** *(dict) --* Color Space settings
                      

                      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                    
                      

                      - **Rec601Settings** *(dict) --* Rec601 Settings
                    
                      

                      - **Rec709Settings** *(dict) --* Rec709 Settings
                    
                  
                    

                    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or High profile) or cavlc.
                    

                    - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                    

                    - **FlickerAq** *(string) --* Flicker AQ makes adjustments within each frame to reduce flicker or 'pop' on I-frames. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if flicker AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply flicker AQ using the specified strength. Disabled: MediaLive won't apply flicker AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply flicker AQ.
                    

                    - **ForceFieldPictures** *(string) --* This setting applies only when scan type is "interlaced." It controls whether coding is performed on a field basis or on a frame basis. (When the video is progressive, the coding is always performed on a frame basis.) enabled: Force MediaLive to code on a field basis, so that odd and even sets of fields are coded separately. disabled: Code the two sets of fields separately (on a field basis) or together (on a frame basis using PAFF), depending on what is most appropriate for the content.
                    

                    - **FramerateControl** *(string) --* This field indicates how the output video frame rate is specified. If "specified" is selected then the output video frame rate is determined by framerateNumerator and framerateDenominator, else if "initializeFromSource" is selected then the output video frame rate will be set equal to the input video frame rate of the first input.
                    

                    - **FramerateDenominator** *(integer) --* Framerate denominator.
                    

                    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                    

                    - **GopBReference** *(string) --* Documentation update needed
                    

                    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                    

                    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.
                    

                    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                    

                    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                    

                    - **Level** *(string) --* H.264 Level.
                    

                    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                    

                    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
                    

                    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                    

                    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use more than requested if using B-frames and/or interlaced encoding.
                    

                    - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is specified. If "specified" is selected then the output video pixel aspect ratio is determined by parNumerator and parDenominator, else if "initializeFromSource" is selected then the output pixsel aspect ratio will be set equal to the input video pixel aspect ratio of the first input.
                    

                    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                    

                    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                    

                    - **Profile** *(string) --* H.264 Profile.
                    

                    - **QualityLevel** *(string) --* Leave as STANDARD_QUALITY or choose a different value (which might result in additional costs to run the channel). - ENHANCED_QUALITY: Produces a slightly better video quality without an increase in the bitrate. Has an effect only when the Rate control mode is QVBR or CBR. If this channel is in a MediaLive multiplex, the value must be ENHANCED_QUALITY. - STANDARD_QUALITY: Valid for any Rate control mode.
                    

                    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. You can set a target quality or you can let MediaLive determine the best quality. To set a target quality, enter values in the QVBR quality level field and the Max bitrate field. Enter values that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M To let MediaLive decide, leave the QVBR quality level field empty, and in Max bitrate enter the maximum rate you want in the video. For more information, see the section called "Video - rate control mode" in the MediaLive user guide
                    

                    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the video complexity. Recommended instead of QVBR if you want to maintain a specific average bitrate over the duration of the channel. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                    

                    - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                    

                    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when scene change is detected. - Off: does not force an I-frame when scene change is detected.
                    

                    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                    

                    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce high-frequency content in the encoded image. If not set to zero, must be greater than 15.
                    

                    - **SpatialAq** *(string) --* Spatial AQ makes adjustments within each frame based on spatial variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if spatial AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply spatial AQ using the specified strength. Disabled: MediaLive won't apply spatial AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply spatial AQ.
                    

                    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve visual quality.
                    

                    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.
                    

                    - **TemporalAq** *(string) --* Temporal makes adjustments within each frame based on temporal variation of content complexity. The value to enter in this field depends on the value in the Adaptive quantization field: If you have set the Adaptive quantization field to Auto, MediaLive ignores any value in this field. MediaLive will determine if temporal AQ is appropriate and will apply the appropriate strength. If you have set the Adaptive quantization field to a strength, you can set this field to Enabled or Disabled. Enabled: MediaLive will apply temporal AQ using the specified strength. Disabled: MediaLive won't apply temporal AQ. If you have set the Adaptive quantization to Disabled, MediaLive ignores any value in this field and doesn't apply temporal AQ.
                    

                    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
                
                  

                  - **H265Settings** *(dict) --* H265 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
                    

                    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the output stream. If afdSignaling is "auto", the system will try to preserve the input AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value will be the value configured in the fixedAfd parameter.
                    

                    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an Alternative Transfer Function SEI message to support backwards compatibility with non-HDR decoders and displays.
                    

                    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.
                    

                    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.
                    

                    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.
                    

                    - **ColorSpaceSettings** *(dict) --* Color Space settings
                      

                      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space conversion to the output
                    
                      

                      - **Hdr10Settings** *(dict) --* Hdr10 Settings
                        

                        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                        

                        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                    
                      

                      - **Rec601Settings** *(dict) --* Rec601 Settings
                    
                      

                      - **Rec709Settings** *(dict) --* Rec709 Settings
                    
                  
                    

                    - **FilterSettings** *(dict) --* Optional filters that you can apply to an encode.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the output stream. Only valid when afdSignaling is set to 'Fixed'.
                    

                    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
                    

                    - **FramerateDenominator** *(integer) --* Framerate denominator.
                    

                    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction, e.g. 24000 / 1001 = 23.976 fps.
                    

                    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming applications, it is recommended that this be set to 1 so a decoder joining mid-stream will receive an IDR frame as quickly as possible. Setting this value to 0 will break output segmenting.
                    

                    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or seconds per gopSizeUnits. If gopSizeUnits is frames, gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, gopSize must be greater than 0, but need not be an integer.
                    

                    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or seconds. If seconds the system will convert the gopSize into a frame count at run time.
                    

                    - **Level** *(string) --* H.265 Level.
                    

                    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease latency and memory usage, while high can produce better quality for certain content.
                    

                    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level
                    

                    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled. Defaults to 5 if multiplex rate control is used. Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene Change Detection. If a scene change I-frame is within I-interval frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1
                    

                    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.
                    

                    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.
                    

                    - **Profile** *(string) --* H.265 Profile.
                    

                    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode. Applies only when the rate control mode is QVBR. Set values for the QVBR quality level field and Max bitrate field that suit your most important viewing devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M to 1.5M
                    

                    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the specified quality level except when it is constrained by the maximum bitrate. Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video complexity. Recommended only if you distribute your assets to devices that cannot handle variable bitrates. Multiplex: This rate control mode is only supported (and is required) when the video is being delivered to a MediaLive Multiplex in which case the rate control configuration is controlled by the properties within the Multiplex Program.
                    

                    - **ScanType** *(string) --* Sets the scan type of the output to progressive or top-field-first interlaced.
                    

                    - **SceneChangeDetect** *(string) --* Scene change detection.
                    

                    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to the number of macroblock rows for progressive pictures, and less than or equal to half the number of macroblock rows for interlaced pictures. This field is optional; when no value is specified the encoder will choose the number of slices based on encode resolution.
                    

                    - **Tier** *(string) --* H.265 Tier.
                    

                    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei': Pass through picture timing SEI messages from the source specified in Timecode Config
                
                  

                  - **Mpeg2Settings** *(dict) --* Mpeg2 Settings
                    

                    - **AdaptiveQuantization** *(string) --* Choose Off to disable adaptive quantization. Or choose another value to enable the quantizer and set its strength. The strengths are: Auto, Off, Low, Medium, High. When you enable this field, MediaLive allows intra-frame quantizers to vary, which might improve visual quality.
                    

                    - **AfdSignaling** *(string) --* Indicates the AFD values that MediaLive will write into the video encode. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose AUTO. AUTO: MediaLive will try to preserve the input AFD value (in cases where multiple AFD values are valid). FIXED: MediaLive will use the value you specify in fixedAFD.
                    

                    - **ColorMetadata** *(string) --* Specifies whether to include the color space metadata. The metadata describes the color space that applies to the video (the colorSpace field). We recommend that you insert the metadata.
                    

                    - **ColorSpace** *(string) --* Choose the type of color space conversion to apply to the output. For detailed information on setting up both the input and the output to obtain the desired color space in the output, see the section on \"MediaLive Features - Video - color space\" in the MediaLive User Guide. PASSTHROUGH: Keep the color space of the input content - do not convert it. AUTO:Convert all content that is SD to rec 601, and convert all content that is HD to rec 709.
                    

                    - **DisplayAspectRatio** *(string) --* Sets the pixel aspect ratio for the encode.
                    

                    - **FilterSettings** *(dict) --* Optionally specify a noise reduction filter, which can improve quality of compressed content. If you do not choose a filter, no filter will be applied. TEMPORAL: This filter is useful for both source content that is noisy (when it has excessive digital artifacts) and source content that is clean. When the content is noisy, the filter cleans up the source content before the encoding phase, with these two effects: First, it improves the output video quality because the content has been cleaned up. Secondly, it decreases the bandwidth because MediaLive does not waste bits on encoding noise. When the content is reasonably clean, the filter tends to decrease the bitrate.
                      

                      - **TemporalFilterSettings** *(dict) --* Temporal Filter Settings
                        

                        - **PostFilterSharpening** *(string) --* If you enable this filter, the results are the following: - If the source content is noisy (it contains excessive digital artifacts), the filter cleans up the source. - If the source content is already clean, the filter tends to decrease the bitrate, especially when the rate control mode is QVBR.
                        

                        - **Strength** *(string) --* Choose a filter strength. We recommend a strength of 1 or 2. A higher strength might take out good information, resulting in an image that is overly soft.
                    
                  
                    

                    - **FixedAfd** *(string) --* Complete this field only when afdSignaling is set to FIXED. Enter the AFD value (4 bits) to write on all frames of the video encode.
                    

                    - **FramerateDenominator** *(integer) --* description": "The framerate denominator. For example, 1001. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                    

                    - **FramerateNumerator** *(integer) --* The framerate numerator. For example, 24000. The framerate is the numerator divided by the denominator. For example, 24000 / 1001 = 23.976 FPS.
                    

                    - **GopClosedCadence** *(integer) --* MPEG2: default is open GOP.
                    

                    - **GopNumBFrames** *(integer) --* Relates to the GOP structure. The number of B-frames between reference frames. If you do not know what a B-frame is, use the default.
                    

                    - **GopSize** *(float) --* Relates to the GOP structure. The GOP size (keyframe interval) in the units specified in gopSizeUnits. If you do not know what GOP is, use the default. If gopSizeUnits is frames, then the gopSize must be an integer and must be greater than or equal to 1. If gopSizeUnits is seconds, the gopSize must be greater than 0, but does not need to be an integer.
                    

                    - **GopSizeUnits** *(string) --* Relates to the GOP structure. Specifies whether the gopSize is specified in frames or seconds. If you do not plan to change the default gopSize, leave the default. If you specify SECONDS, MediaLive will internally convert the gop size to a frame count.
                    

                    - **ScanType** *(string) --* Set the scan type of the output to PROGRESSIVE or INTERLACED (top field first).
                    

                    - **SubgopLength** *(string) --* Relates to the GOP structure. If you do not know what GOP is, use the default. FIXED: Set the number of B-frames in each sub-GOP to the value in gopNumBFrames. DYNAMIC: Let MediaLive optimize the number of B-frames in each sub-GOP, to improve visual quality.
                    

                    - **TimecodeInsertion** *(string) --* Determines how MediaLive inserts timecodes in the output video. For detailed information about setting up the input and the output for a timecode, see the section on \"MediaLive Features - Timecode configuration\" in the MediaLive User Guide. DISABLED: do not include timecodes. GOP_TIMECODE: Include timecode metadata in the GOP header.
                
              
                

                - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most codecs, you can leave this field and width blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
                

                - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to uniquely identify this Description. Description names should be unique within this Live Event.
                

                - **RespondToAfd** *(string) --* Indicates how MediaLive will respond to the AFD values that might be in the input video. If you do not know what AFD signaling is, or if your downstream system has not given you guidance, choose PASSTHROUGH. RESPOND: MediaLive clips the input video using a formula that uses the AFD values (configured in afdSignaling ), the input display aspect ratio, and the output display aspect ratio. MediaLive also includes the AFD values in the output, unless the codec for this encode is FRAME_CAPTURE. PASSTHROUGH: MediaLive ignores the AFD values and does not clip the video. But MediaLive does include the values in the output. NONE: MediaLive does not clip the input video and does not include the AFD values in the output
                

                - **ScalingBehavior** *(string) --* STRETCH_TO_OUTPUT configures the output position to stretch the video to the specified output resolution (height and width). This option will override any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the video to provide the specified output resolution.
                

                - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for most content.
                

                - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most codecs, you can leave this field and height blank in order to use the height and width (resolution) from the source. Note, however, that leaving blank is not recommended. For the Frame Capture codec, height and width are required.
            
          
        
          

          - **Id** *(string) --* The unique id of the channel.
          

          - **InputAttachments** *(list) --* List of input attachments for channel.
            

            - *(dict) --* Placeholder documentation for InputAttachment
              

              - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
                

                - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
                

                - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                  

                  - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                    

                    - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                      

                      - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                        

                        - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                        

                        - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                    
                      

                      - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                        

                        - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                    
                      

                      - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                        

                        - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                        

                        - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                    
                  
                
              
                

                - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
                

                - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
            
              

              - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
              

              - **InputId** *(string) --* The ID of the input
              

              - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
                

                - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                  

                  - *(dict) --* Audio Selector
                    

                    - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                    

                    - **SelectorSettings** *(dict) --* The audio selector settings.
                      

                      - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                        

                        - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                        

                        - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                    
                      

                      - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                        

                        - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                        

                        - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                    
                      

                      - **AudioPidSelection** *(dict) --* Audio Pid Selection
                        

                        - **Pid** *(integer) --* Selects a specific PID from within a source.
                    
                      

                      - **AudioTrackSelection** *(dict) --* Audio Track Selection
                        

                        - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                          

                          - *(dict) --* Audio Track
                            

                            - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                        
                      
                    
                  
                
              
                

                - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                  

                  - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                    

                    - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                    

                    - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                    

                    - **SelectorSettings** *(dict) --* Caption selector settings.
                      

                      - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                        

                        - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                    
                      

                      - **AribSourceSettings** *(dict) --* Arib Source Settings
                    
                      

                      - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                        

                        - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                        

                        - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                    
                      

                      - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                        

                        - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                        

                        - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                        

                        - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                        

                        - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                    
                      

                      - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                        

                        - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                        

                        - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                    
                      

                      - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                        

                        - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                        

                        - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                    
                      

                      - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                        

                        - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                          

                          - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                          

                          - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                          

                          - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                          

                          - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                      
                        

                        - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                    
                  
                
              
                

                - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
                

                - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
                

                - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
                

                - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
                

                - **NetworkInputSettings** *(dict) --* Input settings.
                  

                  - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                    

                    - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                    

                    - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                    

                    - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                    

                    - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                    

                    - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
                
                  

                  - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
              
                

                - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
                

                - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
                

                - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                  

                  - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                  

                  - **ColorSpaceSettings** *(dict) --* Color space settings
                    

                    - **Hdr10Settings** *(dict) --* Hdr10 Settings
                      

                      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                      

                      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                  
                
                  

                  - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                  

                  - **SelectorSettings** *(dict) --* The video selector settings.
                    

                    - **VideoSelectorPid** *(dict) --* Video Selector Pid
                      

                      - **Pid** *(integer) --* Selects a specific PID from within a video source.
                  
                    

                    - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                      

                      - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                  
                
              
            
          
        
          

          - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
            

            - **Codec** *(string) --* Input codec
            

            - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
            

            - **Resolution** *(string) --* Input resolution, categorized coarsely
        
          

          - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
          

          - **Name** *(string) --* The name of the channel. (user-mutable)
          

          - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.
            

            - *(dict) --* Runtime details of a pipeline when a channel is running.
              

              - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment currently being ingested by this pipeline.
              

              - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule action that occurred most recently and that resulted in the switch to the current input attachment for this pipeline.
              

              - **ActiveMotionGraphicsActionName** *(string) --* The name of the motion graphics activate action that occurred most recently and that resulted in the current graphics URI for this pipeline.
              

              - **ActiveMotionGraphicsUri** *(string) --* The current URI being used for HTML5 motion graphics for this pipeline.
              

              - **PipelineId** *(string) --* Pipeline ID
          
        
          

          - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
          

          - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
          

          - **State** *(string) --* Placeholder documentation for ChannelState
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **Vpc** *(dict) --* Settings for VPC output
            

            - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
              

              - *(string) --* Placeholder documentation for __string
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: update_input(**kwargs)

    Updates an input.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateInput>`_    


    **Request Syntax** 
    ::

      response = client.update_input(
          Destinations=[
              {
                  'StreamName': 'string'
              },
          ],
          InputDevices=[
              {
                  'Id': 'string'
              },
          ],
          InputId='string',
          InputSecurityGroups=[
              'string',
          ],
          MediaConnectFlows=[
              {
                  'FlowArn': 'string'
              },
          ],
          Name='string',
          RoleArn='string',
          Sources=[
              {
                  'PasswordParam': 'string',
                  'Url': 'string',
                  'Username': 'string'
              },
          ]
      )
    :type Destinations: list
    :param Destinations: Destination settings for PUSH type inputs.

    
      - *(dict) --* Endpoint settings for a PUSH type input.

      
        - **StreamName** *(string) --* A unique name for the location the RTMP stream is being pushed to. 

        
      
  
    :type InputDevices: list
    :param InputDevices: Settings for the devices.

    
      - *(dict) --* Settings for an input device.

      
        - **Id** *(string) --* The unique ID for the device.

        
      
  
    :type InputId: string
    :param InputId: **[REQUIRED]** Unique ID of the input.

    
    :type InputSecurityGroups: list
    :param InputSecurityGroups: A list of security groups referenced by IDs to attach to the input.

    
      - *(string) --* Placeholder documentation for __string

      
  
    :type MediaConnectFlows: list
    :param MediaConnectFlows: A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a separate Availability Zone as this ensures your EML input is redundant to AZ issues. 

    
      - *(dict) --* The settings for a MediaConnect Flow.

      
        - **FlowArn** *(string) --* The ARN of the MediaConnect Flow that you want to use as a source.

        
      
  
    :type Name: string
    :param Name: Name of the input.

    
    :type RoleArn: string
    :param RoleArn: The Amazon Resource Name (ARN) of the role this input assumes during and after creation.

    
    :type Sources: list
    :param Sources: The source URLs for a PULL-type input. Every PULL type input needs exactly two source URLs for redundancy. Only specify sources for PULL type Inputs. Leave Destinations empty. 

    
      - *(dict) --* Settings for for a PULL type input.

      
        - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.

        
        - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 

        
        - **Username** *(string) --* The username for the input source.

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Input': {
                'Arn': 'string',
                'AttachedChannels': [
                    'string',
                ],
                'Destinations': [
                    {
                        'Ip': 'string',
                        'Port': 'string',
                        'Url': 'string',
                        'Vpc': {
                            'AvailabilityZone': 'string',
                            'NetworkInterfaceId': 'string'
                        }
                    },
                ],
                'Id': 'string',
                'InputClass': 'STANDARD'|'SINGLE_PIPELINE',
                'InputDevices': [
                    {
                        'Id': 'string'
                    },
                ],
                'InputPartnerIds': [
                    'string',
                ],
                'InputSourceType': 'STATIC'|'DYNAMIC',
                'MediaConnectFlows': [
                    {
                        'FlowArn': 'string'
                    },
                ],
                'Name': 'string',
                'RoleArn': 'string',
                'SecurityGroups': [
                    'string',
                ],
                'Sources': [
                    {
                        'PasswordParam': 'string',
                        'Url': 'string',
                        'Username': 'string'
                    },
                ],
                'State': 'CREATING'|'DETACHED'|'ATTACHED'|'DELETING'|'DELETED',
                'Tags': {
                    'string': 'string'
                },
                'Type': 'UDP_PUSH'|'RTP_PUSH'|'RTMP_PUSH'|'RTMP_PULL'|'URL_PULL'|'MP4_FILE'|'MEDIACONNECT'|'INPUT_DEVICE'|'AWS_CDI'
            }
        }
      **Response Structure** 

      

      - *(dict) --* The input update is successfully initiated.
        

        - **Input** *(dict) --* Placeholder documentation for Input
          

          - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).
          

          - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).
            

            - *(dict) --* The settings for a PUSH type input.
              

              - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input. 
              

              - **Port** *(string) --* The port number for the input.
              

              - **Url** *(string) --* This represents the endpoint that the customer stream will be pushed to. 
              

              - **Vpc** *(dict) --* The properties for a VPC type input destination.
                

                - **AvailabilityZone** *(string) --* The availability zone of the Input destination. 
                

                - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination in the VPC. 
            
          
        
          

          - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).
          

          - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input. 
          

          - **InputDevices** *(list) --* Settings for the input devices.
            

            - *(dict) --* Settings for an input device.
              

              - **Id** *(string) --* The unique ID for the device.
          
        
          

          - **InputPartnerIds** *(list) --* A list of IDs for all Inputs which are partners of this one.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE inputs. 
          

          - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.
            

            - *(dict) --* The settings for a MediaConnect Flow.
              

              - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.
          
        
          

          - **Name** *(string) --* The user-assigned name (This is a mutable value).
          

          - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
          

          - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to the input.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Sources** *(list) --* A list of the sources of the input (PULL-type).
            

            - *(dict) --* The settings for a PULL type input.
              

              - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.
              

              - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 
              

              - **Username** *(string) --* The username for the input source.
          
        
          

          - **State** *(string) --* Placeholder documentation for InputState
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **Type** *(string) --* Placeholder documentation for InputType
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: update_input_device(**kwargs)

    Updates the parameters for the input device.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateInputDevice>`_    


    **Request Syntax** 
    ::

      response = client.update_input_device(
          HdDeviceSettings={
              'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
              'MaxBitrate': 123
          },
          InputDeviceId='string',
          Name='string',
          UhdDeviceSettings={
              'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
              'MaxBitrate': 123
          }
      )
    :type HdDeviceSettings: dict
    :param HdDeviceSettings: The settings that you want to apply to the HD input device.

    
      - **ConfiguredInput** *(string) --* The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.

      
      - **MaxBitrate** *(integer) --* The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.

      
    
    :type InputDeviceId: string
    :param InputDeviceId: **[REQUIRED]** The unique ID of the input device. For example, hd-123456789abcdef.

    
    :type Name: string
    :param Name: The name that you assigned to this input device (not the unique ID).

    
    :type UhdDeviceSettings: dict
    :param UhdDeviceSettings: The settings that you want to apply to the UHD input device.

    
      - **ConfiguredInput** *(string) --* The input source that you want to use. If the device has a source connected to only one of its input ports, or if you don't care which source the device sends, specify Auto. If the device has sources connected to both its input ports, and you want to use a specific source, specify the source.

      
      - **MaxBitrate** *(integer) --* The maximum bitrate in bits per second. Set a value here to throttle the bitrate of the source video.

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'ConnectionState': 'DISCONNECTED'|'CONNECTED',
            'DeviceSettingsSyncState': 'SYNCED'|'SYNCING',
            'DeviceUpdateStatus': 'UP_TO_DATE'|'NOT_UP_TO_DATE',
            'HdDeviceSettings': {
                'ActiveInput': 'HDMI'|'SDI',
                'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                'DeviceState': 'IDLE'|'STREAMING',
                'Framerate': 123.0,
                'Height': 123,
                'MaxBitrate': 123,
                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                'Width': 123
            },
            'Id': 'string',
            'MacAddress': 'string',
            'Name': 'string',
            'NetworkSettings': {
                'DnsAddresses': [
                    'string',
                ],
                'Gateway': 'string',
                'IpAddress': 'string',
                'IpScheme': 'STATIC'|'DHCP',
                'SubnetMask': 'string'
            },
            'SerialNumber': 'string',
            'Type': 'HD',
            'UhdDeviceSettings': {
                'ActiveInput': 'HDMI'|'SDI',
                'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                'DeviceState': 'IDLE'|'STREAMING',
                'Framerate': 123.0,
                'Height': 123,
                'MaxBitrate': 123,
                'ScanType': 'INTERLACED'|'PROGRESSIVE',
                'Width': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* Input device update is in progress.
        

        - **Arn** *(string) --* The unique ARN of the input device.
        

        - **ConnectionState** *(string) --* The state of the connection between the input device and AWS.
        

        - **DeviceSettingsSyncState** *(string) --* The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
        

        - **DeviceUpdateStatus** *(string) --* The status of software on the input device.
        

        - **HdDeviceSettings** *(dict) --* Settings that describe an input device that is type HD.
          

          - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
          

          - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
          

          - **DeviceState** *(string) --* The state of the input device.
          

          - **Framerate** *(float) --* The frame rate of the video source.
          

          - **Height** *(integer) --* The height of the video source, in pixels.
          

          - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
          

          - **ScanType** *(string) --* The scan type of the video source.
          

          - **Width** *(integer) --* The width of the video source, in pixels.
      
        

        - **Id** *(string) --* The unique ID of the input device.
        

        - **MacAddress** *(string) --* The network MAC address of the input device.
        

        - **Name** *(string) --* A name that you specify for the input device.
        

        - **NetworkSettings** *(dict) --* The network settings for the input device.
          

          - **DnsAddresses** *(list) --* The DNS addresses of the input device.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Gateway** *(string) --* The network gateway IP address.
          

          - **IpAddress** *(string) --* The IP address of the input device.
          

          - **IpScheme** *(string) --* Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
          

          - **SubnetMask** *(string) --* The subnet mask of the input device.
      
        

        - **SerialNumber** *(string) --* The unique serial number of the input device.
        

        - **Type** *(string) --* The type of the input device.
        

        - **UhdDeviceSettings** *(dict) --* Settings that describe an input device that is type UHD.
          

          - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
          

          - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
          

          - **DeviceState** *(string) --* The state of the input device.
          

          - **Framerate** *(float) --* The frame rate of the video source.
          

          - **Height** *(integer) --* The height of the video source, in pixels.
          

          - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
          

          - **ScanType** *(string) --* The scan type of the video source.
          

          - **Width** *(integer) --* The width of the video source, in pixels.
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: update_input_security_group(**kwargs)

    Update an Input Security Group's Whilelists.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateInputSecurityGroup>`_    


    **Request Syntax** 
    ::

      response = client.update_input_security_group(
          InputSecurityGroupId='string',
          Tags={
              'string': 'string'
          },
          WhitelistRules=[
              {
                  'Cidr': 'string'
              },
          ]
      )
    :type InputSecurityGroupId: string
    :param InputSecurityGroupId: **[REQUIRED]** The id of the Input Security Group to update.

    
    :type Tags: dict
    :param Tags: A collection of key-value pairs.

    
      - *(string) --* Placeholder documentation for __string

      
        - *(string) --* Placeholder documentation for __string

        
  

    :type WhitelistRules: list
    :param WhitelistRules: List of IPv4 CIDR addresses to whitelist

    
      - *(dict) --* An IPv4 CIDR to whitelist.

      
        - **Cidr** *(string) --* The IPv4 CIDR to whitelist.

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecurityGroup': {
                'Arn': 'string',
                'Id': 'string',
                'Inputs': [
                    'string',
                ],
                'State': 'IDLE'|'IN_USE'|'UPDATING'|'DELETED',
                'Tags': {
                    'string': 'string'
                },
                'WhitelistRules': [
                    {
                        'Cidr': 'string'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* Successfully initiated the update of the Input Security Group.
        

        - **SecurityGroup** *(dict) --* An Input Security Group
          

          - **Arn** *(string) --* Unique ARN of Input Security Group
          

          - **Id** *(string) --* The Id of the Input Security Group
          

          - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **State** *(string) --* The current state of the Input Security Group.
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **WhitelistRules** *(list) --* Whitelist rules and their sync status
            

            - *(dict) --* Whitelist rule
              

              - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: update_multiplex(**kwargs)

    Updates a multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateMultiplex>`_    


    **Request Syntax** 
    ::

      response = client.update_multiplex(
          MultiplexId='string',
          MultiplexSettings={
              'MaximumVideoBufferDelayMilliseconds': 123,
              'TransportStreamBitrate': 123,
              'TransportStreamId': 123,
              'TransportStreamReservedBitrate': 123
          },
          Name='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** ID of the multiplex to update.

    
    :type MultiplexSettings: dict
    :param MultiplexSettings: The new settings for a multiplex.

    
      - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.

      
      - **TransportStreamBitrate** *(integer) --* **[REQUIRED]** Transport stream bit rate.

      
      - **TransportStreamId** *(integer) --* **[REQUIRED]** Transport stream ID.

      
      - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.

      
    
    :type Name: string
    :param Name: Name of the multiplex.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Multiplex': {
                'Arn': 'string',
                'AvailabilityZones': [
                    'string',
                ],
                'Destinations': [
                    {
                        'MediaConnectSettings': {
                            'EntitlementArn': 'string'
                        }
                    },
                ],
                'Id': 'string',
                'MultiplexSettings': {
                    'MaximumVideoBufferDelayMilliseconds': 123,
                    'TransportStreamBitrate': 123,
                    'TransportStreamId': 123,
                    'TransportStreamReservedBitrate': 123
                },
                'Name': 'string',
                'PipelinesRunningCount': 123,
                'ProgramCount': 123,
                'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* The update to the multiplex has succeeded.
        

        - **Multiplex** *(dict) --* The updated multiplex.
          

          - **Arn** *(string) --* The unique arn of the multiplex.
          

          - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
            

            - *(string) --* Placeholder documentation for __string
        
          

          - **Destinations** *(list) --* A list of the multiplex output destinations.
            

            - *(dict) --* Multiplex output destination settings
              

              - **MediaConnectSettings** *(dict) --* Multiplex MediaConnect output destination settings.
                

                - **EntitlementArn** *(string) --* The MediaConnect entitlement ARN available as a Flow source.
            
          
        
          

          - **Id** *(string) --* The unique id of the multiplex.
          

          - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
            

            - **MaximumVideoBufferDelayMilliseconds** *(integer) --* Maximum video buffer delay in milliseconds.
            

            - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
            

            - **TransportStreamId** *(integer) --* Transport stream ID.
            

            - **TransportStreamReservedBitrate** *(integer) --* Transport stream reserved bit rate.
        
          

          - **Name** *(string) --* The name of the multiplex.
          

          - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
          

          - **ProgramCount** *(integer) --* The number of programs in the multiplex.
          

          - **State** *(string) --* The current state of the multiplex.
          

          - **Tags** *(dict) --* A collection of key-value pairs.
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: update_multiplex_program(**kwargs)

    Update a program in a multiplex.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateMultiplexProgram>`_    


    **Request Syntax** 
    ::

      response = client.update_multiplex_program(
          MultiplexId='string',
          MultiplexProgramSettings={
              'PreferredChannelPipeline': 'CURRENTLY_ACTIVE'|'PIPELINE_0'|'PIPELINE_1',
              'ProgramNumber': 123,
              'ServiceDescriptor': {
                  'ProviderName': 'string',
                  'ServiceName': 'string'
              },
              'VideoSettings': {
                  'ConstantBitrate': 123,
                  'StatmuxSettings': {
                      'MaximumBitrate': 123,
                      'MinimumBitrate': 123,
                      'Priority': 123
                  }
              }
          },
          ProgramName='string'
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex of the program to update.

    
    :type MultiplexProgramSettings: dict
    :param MultiplexProgramSettings: The new settings for a multiplex program.

    
      - **PreferredChannelPipeline** *(string) --* Indicates which pipeline is preferred by the multiplex for program ingest.

      
      - **ProgramNumber** *(integer) --* **[REQUIRED]** Unique program number.

      
      - **ServiceDescriptor** *(dict) --* Transport stream service descriptor configuration for the Multiplex program.

      
        - **ProviderName** *(string) --* **[REQUIRED]** Name of the provider.

        
        - **ServiceName** *(string) --* **[REQUIRED]** Name of the service.

        
      
      - **VideoSettings** *(dict) --* Program video settings configuration.

      
        - **ConstantBitrate** *(integer) --* The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.

        
        - **StatmuxSettings** *(dict) --* Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.

        
          - **MaximumBitrate** *(integer) --* Maximum statmux bitrate.

          
          - **MinimumBitrate** *(integer) --* Minimum statmux bitrate.

          
          - **Priority** *(integer) --* The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.

          
        
      
    
    :type ProgramName: string
    :param ProgramName: **[REQUIRED]** The name of the program to update.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MultiplexProgram': {
                'ChannelId': 'string',
                'MultiplexProgramSettings': {
                    'PreferredChannelPipeline': 'CURRENTLY_ACTIVE'|'PIPELINE_0'|'PIPELINE_1',
                    'ProgramNumber': 123,
                    'ServiceDescriptor': {
                        'ProviderName': 'string',
                        'ServiceName': 'string'
                    },
                    'VideoSettings': {
                        'ConstantBitrate': 123,
                        'StatmuxSettings': {
                            'MaximumBitrate': 123,
                            'MinimumBitrate': 123,
                            'Priority': 123
                        }
                    }
                },
                'PacketIdentifiersMap': {
                    'AudioPids': [
                        123,
                    ],
                    'DvbSubPids': [
                        123,
                    ],
                    'DvbTeletextPid': 123,
                    'EtvPlatformPid': 123,
                    'EtvSignalPid': 123,
                    'KlvDataPids': [
                        123,
                    ],
                    'PcrPid': 123,
                    'PmtPid': 123,
                    'PrivateMetadataPid': 123,
                    'Scte27Pids': [
                        123,
                    ],
                    'Scte35Pid': 123,
                    'TimedMetadataPid': 123,
                    'VideoPid': 123
                },
                'PipelineDetails': [
                    {
                        'ActiveChannelPipeline': 'string',
                        'PipelineId': 'string'
                    },
                ],
                'ProgramName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* The update to the program has succeeded.
        

        - **MultiplexProgram** *(dict) --* The updated multiplex program.
          

          - **ChannelId** *(string) --* The MediaLive channel associated with the program.
          

          - **MultiplexProgramSettings** *(dict) --* The settings for this multiplex program.
            

            - **PreferredChannelPipeline** *(string) --* Indicates which pipeline is preferred by the multiplex for program ingest.
            

            - **ProgramNumber** *(integer) --* Unique program number.
            

            - **ServiceDescriptor** *(dict) --* Transport stream service descriptor configuration for the Multiplex program.
              

              - **ProviderName** *(string) --* Name of the provider.
              

              - **ServiceName** *(string) --* Name of the service.
          
            

            - **VideoSettings** *(dict) --* Program video settings configuration.
              

              - **ConstantBitrate** *(integer) --* The constant bitrate configuration for the video encode. When this field is defined, StatmuxSettings must be undefined.
              

              - **StatmuxSettings** *(dict) --* Statmux rate control settings. When this field is defined, ConstantBitrate must be undefined.
                

                - **MaximumBitrate** *(integer) --* Maximum statmux bitrate.
                

                - **MinimumBitrate** *(integer) --* Minimum statmux bitrate.
                

                - **Priority** *(integer) --* The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
            
          
        
          

          - **PacketIdentifiersMap** *(dict) --* The packet identifier map for this multiplex program.
            

            - **AudioPids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **DvbSubPids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **DvbTeletextPid** *(integer) --* Placeholder documentation for __integer
            

            - **EtvPlatformPid** *(integer) --* Placeholder documentation for __integer
            

            - **EtvSignalPid** *(integer) --* Placeholder documentation for __integer
            

            - **KlvDataPids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **PcrPid** *(integer) --* Placeholder documentation for __integer
            

            - **PmtPid** *(integer) --* Placeholder documentation for __integer
            

            - **PrivateMetadataPid** *(integer) --* Placeholder documentation for __integer
            

            - **Scte27Pids** *(list) --* Placeholder documentation for __listOf__integer
              

              - *(integer) --* Placeholder documentation for __integer
          
            

            - **Scte35Pid** *(integer) --* Placeholder documentation for __integer
            

            - **TimedMetadataPid** *(integer) --* Placeholder documentation for __integer
            

            - **VideoPid** *(integer) --* Placeholder documentation for __integer
        
          

          - **PipelineDetails** *(list) --* Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
            

            - *(dict) --* The current source for one of the pipelines in the multiplex.
              

              - **ActiveChannelPipeline** *(string) --* Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
              

              - **PipelineId** *(string) --* Identifies a specific pipeline in the multiplex.
          
        
          

          - **ProgramName** *(string) --* The name of the multiplex program.
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.UnprocessableEntityException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

  .. py:method:: update_reservation(**kwargs)

    Update reservation.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/UpdateReservation>`_    


    **Request Syntax** 
    ::

      response = client.update_reservation(
          Name='string',
          ReservationId='string'
      )
    :type Name: string
    :param Name: Name of the reservation

    
    :type ReservationId: string
    :param ReservationId: **[REQUIRED]** Unique reservation ID, e.g. '1234567'

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Reservation': {
                'Arn': 'string',
                'Count': 123,
                'CurrencyCode': 'string',
                'Duration': 123,
                'DurationUnits': 'MONTHS',
                'End': 'string',
                'FixedPrice': 123.0,
                'Name': 'string',
                'OfferingDescription': 'string',
                'OfferingId': 'string',
                'OfferingType': 'NO_UPFRONT',
                'Region': 'string',
                'ReservationId': 'string',
                'ResourceSpecification': {
                    'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                    'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                    'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                    'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                    'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                    'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                    'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                    'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
                },
                'Start': 'string',
                'State': 'ACTIVE'|'EXPIRED'|'CANCELED'|'DELETED',
                'Tags': {
                    'string': 'string'
                },
                'UsagePrice': 123.0
            }
        }
      **Response Structure** 

      

      - *(dict) --* Updated reservation
        

        - **Reservation** *(dict) --* Reserved resources available to use
          

          - **Arn** *(string) --* Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
          

          - **Count** *(integer) --* Number of reserved resources
          

          - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
          

          - **Duration** *(integer) --* Lease duration, e.g. '12'
          

          - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
          

          - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
          

          - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
          

          - **Name** *(string) --* User specified reservation name
          

          - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
          

          - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
          

          - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
          

          - **Region** *(string) --* AWS region, e.g. 'us-west-2'
          

          - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'
          

          - **ResourceSpecification** *(dict) --* Resource configuration details
            

            - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
            

            - **Codec** *(string) --* Codec, e.g. 'AVC'
            

            - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
            

            - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
            

            - **Resolution** *(string) --* Resolution, e.g. 'HD'
            

            - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
            

            - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
            

            - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
        
          

          - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
          

          - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'
          

          - **Tags** *(dict) --* A collection of key-value pairs
            

            - *(string) --* Placeholder documentation for __string
              

              - *(string) --* Placeholder documentation for __string
        
      
          

          - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
      
    
    **Exceptions** 
    
    *     :py:class:`MediaLive.Client.exceptions.BadRequestException`

    
    *     :py:class:`MediaLive.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`MediaLive.Client.exceptions.ForbiddenException`

    
    *     :py:class:`MediaLive.Client.exceptions.BadGatewayException`

    
    *     :py:class:`MediaLive.Client.exceptions.NotFoundException`

    
    *     :py:class:`MediaLive.Client.exceptions.GatewayTimeoutException`

    
    *     :py:class:`MediaLive.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`MediaLive.Client.exceptions.ConflictException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`MediaLive.Paginator.DescribeSchedule`


* :py:class:`MediaLive.Paginator.ListChannels`


* :py:class:`MediaLive.Paginator.ListInputDeviceTransfers`


* :py:class:`MediaLive.Paginator.ListInputDevices`


* :py:class:`MediaLive.Paginator.ListInputSecurityGroups`


* :py:class:`MediaLive.Paginator.ListInputs`


* :py:class:`MediaLive.Paginator.ListMultiplexPrograms`


* :py:class:`MediaLive.Paginator.ListMultiplexes`


* :py:class:`MediaLive.Paginator.ListOfferings`


* :py:class:`MediaLive.Paginator.ListReservations`



.. py:class:: MediaLive.Paginator.DescribeSchedule

  ::

    
    paginator = client.get_paginator('describe_schedule')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.describe_schedule`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeSchedule>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ChannelId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** Id of the channel whose schedule is being updated.

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ScheduleActions': [
                {
                    'ActionName': 'string',
                    'ScheduleActionSettings': {
                        'HlsId3SegmentTaggingSettings': {
                            'Tag': 'string'
                        },
                        'HlsTimedMetadataSettings': {
                            'Id3': 'string'
                        },
                        'InputPrepareSettings': {
                            'InputAttachmentNameReference': 'string',
                            'InputClippingSettings': {
                                'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                'StartTimecode': {
                                    'Timecode': 'string'
                                },
                                'StopTimecode': {
                                    'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                    'Timecode': 'string'
                                }
                            },
                            'UrlPath': [
                                'string',
                            ]
                        },
                        'InputSwitchSettings': {
                            'InputAttachmentNameReference': 'string',
                            'InputClippingSettings': {
                                'InputTimecodeSource': 'ZEROBASED'|'EMBEDDED',
                                'StartTimecode': {
                                    'Timecode': 'string'
                                },
                                'StopTimecode': {
                                    'LastFrameClippingBehavior': 'EXCLUDE_LAST_FRAME'|'INCLUDE_LAST_FRAME',
                                    'Timecode': 'string'
                                }
                            },
                            'UrlPath': [
                                'string',
                            ]
                        },
                        'MotionGraphicsImageActivateSettings': {
                            'Duration': 123,
                            'PasswordParam': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                        'MotionGraphicsImageDeactivateSettings': {},
                        'PauseStateSettings': {
                            'Pipelines': [
                                {
                                    'PipelineId': 'PIPELINE_0'|'PIPELINE_1'
                                },
                            ]
                        },
                        'Scte35ReturnToNetworkSettings': {
                            'SpliceEventId': 123
                        },
                        'Scte35SpliceInsertSettings': {
                            'Duration': 123,
                            'SpliceEventId': 123
                        },
                        'Scte35TimeSignalSettings': {
                            'Scte35Descriptors': [
                                {
                                    'Scte35DescriptorSettings': {
                                        'SegmentationDescriptorScte35DescriptorSettings': {
                                            'DeliveryRestrictions': {
                                                'ArchiveAllowedFlag': 'ARCHIVE_NOT_ALLOWED'|'ARCHIVE_ALLOWED',
                                                'DeviceRestrictions': 'NONE'|'RESTRICT_GROUP0'|'RESTRICT_GROUP1'|'RESTRICT_GROUP2',
                                                'NoRegionalBlackoutFlag': 'REGIONAL_BLACKOUT'|'NO_REGIONAL_BLACKOUT',
                                                'WebDeliveryAllowedFlag': 'WEB_DELIVERY_NOT_ALLOWED'|'WEB_DELIVERY_ALLOWED'
                                            },
                                            'SegmentNum': 123,
                                            'SegmentationCancelIndicator': 'SEGMENTATION_EVENT_NOT_CANCELED'|'SEGMENTATION_EVENT_CANCELED',
                                            'SegmentationDuration': 123,
                                            'SegmentationEventId': 123,
                                            'SegmentationTypeId': 123,
                                            'SegmentationUpid': 'string',
                                            'SegmentationUpidType': 123,
                                            'SegmentsExpected': 123,
                                            'SubSegmentNum': 123,
                                            'SubSegmentsExpected': 123
                                        }
                                    }
                                },
                            ]
                        },
                        'StaticImageActivateSettings': {
                            'Duration': 123,
                            'FadeIn': 123,
                            'FadeOut': 123,
                            'Height': 123,
                            'Image': {
                                'PasswordParam': 'string',
                                'Uri': 'string',
                                'Username': 'string'
                            },
                            'ImageX': 123,
                            'ImageY': 123,
                            'Layer': 123,
                            'Opacity': 123,
                            'Width': 123
                        },
                        'StaticImageDeactivateSettings': {
                            'FadeOut': 123,
                            'Layer': 123
                        }
                    },
                    'ScheduleActionStartSettings': {
                        'FixedModeScheduleActionStartSettings': {
                            'Time': 'string'
                        },
                        'FollowModeScheduleActionStartSettings': {
                            'FollowPoint': 'END'|'START',
                            'ReferenceActionName': 'string'
                        },
                        'ImmediateModeScheduleActionStartSettings': {}
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* An array of channel schedule actions.
        

        - **ScheduleActions** *(list) --* The list of actions in the schedule.
          

          - *(dict) --* Contains information on a single schedule action.
            

            - **ActionName** *(string) --* The name of the action, must be unique within the schedule. This name provides the main reference to an action once it is added to the schedule. A name is unique if it is no longer in the schedule. The schedule is automatically cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at that point a name can be reused.
            

            - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.
              

              - **HlsId3SegmentTaggingSettings** *(dict) --* Action to insert HLS ID3 segment tagging
                

                - **Tag** *(string) --* ID3 tag to insert into each segment. Supports special keyword identifiers to substitute in segment-related values.\nSupported keyword identifiers: https://docs.aws.amazon.com/medialive/latest/ug/variable-data-identifiers.html
            
              

              - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata
                

                - **Id3** *(string) --* Base64 string formatted according to the ID3 specification: http://id3.org/id3v2.4.0-structure
            
              

              - **InputPrepareSettings** *(dict) --* Action to prepare an input for a future immediate input switch
                

                - **InputAttachmentNameReference** *(string) --* The name of the input attachment that should be prepared by this action. If no name is provided, the action will stop the most recent prepare (if any) when activated.
                

                - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                  

                  - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                  

                  - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
                  

                  - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                    

                    - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
              
                

                - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                  

                  - *(string) --* Placeholder documentation for __string
              
            
              

              - **InputSwitchSettings** *(dict) --* Action to switch the input
                

                - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not the name of the input!) to switch to. The name is specified in the channel configuration.
                

                - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
                  

                  - **InputTimecodeSource** *(string) --* The source of the timecodes in the source being clipped.
                  

                  - **StartTimecode** *(dict) --* Settings to identify the start of the clip.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to start the clip. Optional; if not specified, the clip starts at first frame in the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
                  

                  - **StopTimecode** *(dict) --* Settings to identify the end of the clip.
                    

                    - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
                    

                    - **Timecode** *(string) --* The timecode for the frame where you want to stop the clip. Optional; if not specified, the clip continues to the end of the file. Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.
                
              
                

                - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic input, for this instance of the input. Each time you use the same dynamic input in an input switch action, you can provide a different value, in order to connect the input to a different content source.
                  

                  - *(string) --* Placeholder documentation for __string
              
            
              

              - **MotionGraphicsImageActivateSettings** *(dict) --* Action to activate a motion graphics image overlay
                

                - **Duration** *(integer) --* Duration (in milliseconds) that motion graphics should render on to the video stream. Leaving out this property or setting to 0 will result in rendering continuing until a deactivate action is processed.
                

                - **PasswordParam** *(string) --* Key used to extract the password from EC2 Parameter store
                

                - **Url** *(string) --* URI of the HTML5 content to be rendered into the live stream.
                

                - **Username** *(string) --* Documentation update needed
            
              

              - **MotionGraphicsImageDeactivateSettings** *(dict) --* Action to deactivate a motion graphics image overlay
            
              

              - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel pipelines
                

                - **Pipelines** *(list) --* Placeholder documentation for __listOfPipelinePauseStateSettings
                  

                  - *(dict) --* Settings for pausing a pipeline.
                    

                    - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").
                
              
            
              

              - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network message
                

                - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
            
              

              - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message
                

                - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a duration, there is an expectation that the downstream system can read the duration and cue in at that time. If you do not enter a duration, the splice_insert will continue indefinitely and there is an expectation that you will enter a return_to_network to end the splice_insert at the appropriate time.
                

                - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert, as defined in SCTE-35.
            
              

              - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message
                

                - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the SCTE-35 time_signal.
                  

                  - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.
                    

                    - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.
                      

                      - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35 Segmentation Descriptor.
                        

                        - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery restriction parameters.
                          

                          - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35 archive_allowed_flag.
                          

                          - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35 device_restrictions parameter.
                          

                          - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35 no_regional_blackout_flag parameter.
                          

                          - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35 web_delivery_allowed_flag parameter.
                      
                        

                        - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that is valid for the specified segmentation_type_id.
                        

                        - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35 segmentation_event_cancel_indicator.
                        

                        - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35 segmentation_duration. Optional. The duration for the time_signal, in 90 KHz ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in 90 KHz clock ticks. If you do not enter a duration, the time_signal will continue until you insert a cancellation message.
                        

                        - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35 segmentation_event_id. 
                        

                        - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35 segmentation_type_id. One of the segmentation_type_id values listed in the SCTE-35 specification. On the console, enter the ID in decimal (for example, "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or decimal (for example, "52").
                        

                        - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid. Enter a string containing the hexadecimal representation of the characters that make up the SCTE-35 segmentation_upid value. Must contain an even number of hex characters. Do not include spaces between each hex pair. For example, the ASCII "ADS Information" becomes hex "41445320496e666f726d6174696f6e.
                        

                        - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35 segmentation_upid_type. On the console, enter one of the types listed in the SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the types listed in the SCTE-35 specification, in either hex (for example, "0x0C" ) or in decimal (for example, "12").
                        

                        - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A value that is valid for the specified segmentation_type_id.
                        

                        - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A value that is valid for the specified segmentation_type_id.
                        

                        - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35 sub_segments_expected. A value that is valid for the specified segmentation_type_id.
                    
                  
                
              
            
              

              - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay
                

                - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the video. If omitted or set to 0 the duration is unlimited and the image will remain until it is explicitly deactivated.
                

                - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The fade-in starts at the start time of the overlay. Default is 0 (no fade-in).
                

                - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in milliseconds for the image to fade out. The fade-out starts when the duration time is hit, so it effectively extends the duration. Default is 0 (no fade-out).
                

                - **Height** *(integer) --* The height of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified height. Leave blank to use the native height of the overlay.
                

                - **Image** *(dict) --* The location and filename of the image file to overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in pixels) than the input video.
                  

                  - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                  

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file accessible to the Live system (eg. a http:// URI) depending on the output type. For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".
                  

                  - **Username** *(string) --* Documentation update needed
              
                

                - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame. If the placement causes the overlay to extend beyond the right edge of the underlying video, then the overlay is cropped on the right.
                

                - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the placement causes the overlay to extend beyond the bottom edge of the underlying video, then the overlay is cropped on the bottom.
                

                - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can be overlaid on the video, each layer with a different image. The layers are in Z order, which means that overlays with higher values of layer are inserted on top of overlays with lower values of layer. Default is 0.
                

                - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully opaque. Default is 100.
                

                - **Width** *(integer) --* The width of the image when inserted into the video, in pixels. The overlay will be scaled up or down to the specified width. Leave blank to use the native width of the overlay.
            
              

              - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay
                

                - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default is 0 (no fade-out).
                

                - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
            
          
            

            - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the channel.
              

              - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start time for an action.
                

                - **Time** *(string) --* Start time for the action to start in the channel. (Not the time for the action to be added to the schedule: actions are always added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits (for example, mm might be 01) except for the two constants "T" for time and "Z" for "UTC format".
            
              

              - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action as relative to another action.
                

                - **FollowPoint** *(string) --* Identifies whether this action starts relative to the start or relative to the end of the reference action.
                

                - **ReferenceActionName** *(string) --* The action name of another action that this one refers to.
            
              

              - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an action that should be applied immediately.
            
          
        
      
    

.. py:class:: MediaLive.Paginator.ListChannels

  ::

    
    paginator = client.get_paginator('list_channels')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_channels`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListChannels>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Channels': [
                {
                    'Arn': 'string',
                    'CdiInputSpecification': {
                        'Resolution': 'SD'|'HD'|'FHD'|'UHD'
                    },
                    'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                    'Destinations': [
                        {
                            'Id': 'string',
                            'MediaPackageSettings': [
                                {
                                    'ChannelId': 'string'
                                },
                            ],
                            'MultiplexSettings': {
                                'MultiplexId': 'string',
                                'ProgramName': 'string'
                            },
                            'Settings': [
                                {
                                    'PasswordParam': 'string',
                                    'StreamName': 'string',
                                    'Url': 'string',
                                    'Username': 'string'
                                },
                            ]
                        },
                    ],
                    'EgressEndpoints': [
                        {
                            'SourceIp': 'string'
                        },
                    ],
                    'Id': 'string',
                    'InputAttachments': [
                        {
                            'AutomaticInputFailoverSettings': {
                                'ErrorClearTimeMsec': 123,
                                'FailoverConditions': [
                                    {
                                        'FailoverConditionSettings': {
                                            'AudioSilenceSettings': {
                                                'AudioSelectorName': 'string',
                                                'AudioSilenceThresholdMsec': 123
                                            },
                                            'InputLossSettings': {
                                                'InputLossThresholdMsec': 123
                                            },
                                            'VideoBlackSettings': {
                                                'BlackDetectThreshold': 123.0,
                                                'VideoBlackThresholdMsec': 123
                                            }
                                        }
                                    },
                                ],
                                'InputPreference': 'EQUAL_INPUT_PREFERENCE'|'PRIMARY_INPUT_PREFERRED',
                                'SecondaryInputId': 'string'
                            },
                            'InputAttachmentName': 'string',
                            'InputId': 'string',
                            'InputSettings': {
                                'AudioSelectors': [
                                    {
                                        'Name': 'string',
                                        'SelectorSettings': {
                                            'AudioHlsRenditionSelection': {
                                                'GroupId': 'string',
                                                'Name': 'string'
                                            },
                                            'AudioLanguageSelection': {
                                                'LanguageCode': 'string',
                                                'LanguageSelectionPolicy': 'LOOSE'|'STRICT'
                                            },
                                            'AudioPidSelection': {
                                                'Pid': 123
                                            },
                                            'AudioTrackSelection': {
                                                'Tracks': [
                                                    {
                                                        'Track': 123
                                                    },
                                                ]
                                            }
                                        }
                                    },
                                ],
                                'CaptionSelectors': [
                                    {
                                        'LanguageCode': 'string',
                                        'Name': 'string',
                                        'SelectorSettings': {
                                            'AncillarySourceSettings': {
                                                'SourceAncillaryChannelNumber': 123
                                            },
                                            'AribSourceSettings': {},
                                            'DvbSubSourceSettings': {
                                                'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                                'Pid': 123
                                            },
                                            'EmbeddedSourceSettings': {
                                                'Convert608To708': 'DISABLED'|'UPCONVERT',
                                                'Scte20Detection': 'AUTO'|'OFF',
                                                'Source608ChannelNumber': 123,
                                                'Source608TrackNumber': 123
                                            },
                                            'Scte20SourceSettings': {
                                                'Convert608To708': 'DISABLED'|'UPCONVERT',
                                                'Source608ChannelNumber': 123
                                            },
                                            'Scte27SourceSettings': {
                                                'OcrLanguage': 'DEU'|'ENG'|'FRA'|'NLD'|'POR'|'SPA',
                                                'Pid': 123
                                            },
                                            'TeletextSourceSettings': {
                                                'OutputRectangle': {
                                                    'Height': 123.0,
                                                    'LeftOffset': 123.0,
                                                    'TopOffset': 123.0,
                                                    'Width': 123.0
                                                },
                                                'PageNumber': 'string'
                                            }
                                        }
                                    },
                                ],
                                'DeblockFilter': 'DISABLED'|'ENABLED',
                                'DenoiseFilter': 'DISABLED'|'ENABLED',
                                'FilterStrength': 123,
                                'InputFilter': 'AUTO'|'DISABLED'|'FORCED',
                                'NetworkInputSettings': {
                                    'HlsInputSettings': {
                                        'Bandwidth': 123,
                                        'BufferSegments': 123,
                                        'Retries': 123,
                                        'RetryInterval': 123,
                                        'Scte35Source': 'MANIFEST'|'SEGMENTS'
                                    },
                                    'ServerValidation': 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'|'CHECK_CRYPTOGRAPHY_ONLY'
                                },
                                'Smpte2038DataPreference': 'IGNORE'|'PREFER',
                                'SourceEndBehavior': 'CONTINUE'|'LOOP',
                                'VideoSelector': {
                                    'ColorSpace': 'FOLLOW'|'HDR10'|'HLG_2020'|'REC_601'|'REC_709',
                                    'ColorSpaceSettings': {
                                        'Hdr10Settings': {
                                            'MaxCll': 123,
                                            'MaxFall': 123
                                        }
                                    },
                                    'ColorSpaceUsage': 'FALLBACK'|'FORCE',
                                    'SelectorSettings': {
                                        'VideoSelectorPid': {
                                            'Pid': 123
                                        },
                                        'VideoSelectorProgramId': {
                                            'ProgramId': 123
                                        }
                                    }
                                }
                            }
                        },
                    ],
                    'InputSpecification': {
                        'Codec': 'MPEG2'|'AVC'|'HEVC',
                        'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                        'Resolution': 'SD'|'HD'|'UHD'
                    },
                    'LogLevel': 'ERROR'|'WARNING'|'INFO'|'DEBUG'|'DISABLED',
                    'Name': 'string',
                    'PipelinesRunningCount': 123,
                    'RoleArn': 'string',
                    'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED'|'UPDATING'|'UPDATE_FAILED',
                    'Tags': {
                        'string': 'string'
                    },
                    'Vpc': {
                        'AvailabilityZones': [
                            'string',
                        ],
                        'NetworkInterfaceIds': [
                            'string',
                        ],
                        'SecurityGroupIds': [
                            'string',
                        ],
                        'SubnetIds': [
                            'string',
                        ]
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* An array of channels
        

        - **Channels** *(list) --* Placeholder documentation for __listOfChannelSummary
          

          - *(dict) --* Placeholder documentation for ChannelSummary
            

            - **Arn** *(string) --* The unique arn of the channel.
            

            - **CdiInputSpecification** *(dict) --* Specification of CDI inputs for this channel
              

              - **Resolution** *(string) --* Maximum CDI input resolution
          
            

            - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
            

            - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager. 
              

              - *(dict) --* Placeholder documentation for OutputDestination
                

                - **Id** *(string) --* User-specified id. This is used in an output group or an output.
                

                - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one destination for both encoders.
                  

                  - *(dict) --* MediaPackage Output Destination Settings
                    

                    - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for this output group. You do not need to specify the individual inputs in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in the same region.
                
              
                

                - **MultiplexSettings** *(dict) --* Destination settings for a Multiplex output; one destination for both encoders.
                  

                  - **MultiplexId** *(string) --* The ID of the Multiplex that the encoder is providing output to. You do not need to specify the individual inputs to the Multiplex; MediaLive will handle the connection of the two MediaLive pipelines to the two Multiplex instances. The Multiplex must be in the same region as the Channel.
                  

                  - **ProgramName** *(string) --* The program name of the Multiplex program that the encoder is providing output to.
              
                

                - **Settings** *(list) --* Destination settings for a standard output; one destination for each redundant encoder.
                  

                  - *(dict) --* Placeholder documentation for OutputDestinationSettings
                    

                    - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store
                    

                    - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)
                    

                    - **Url** *(string) --* A URL specifying a destination
                    

                    - **Username** *(string) --* username for destination
                
              
            
          
            

            - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from
              

              - *(dict) --* Placeholder documentation for ChannelEgressEndpoint
                

                - **SourceIp** *(string) --* Public IP of where a channel's output comes from
            
          
            

            - **Id** *(string) --* The unique id of the channel.
            

            - **InputAttachments** *(list) --* List of input attachments for channel.
              

              - *(dict) --* Placeholder documentation for InputAttachment
                

                - **AutomaticInputFailoverSettings** *(dict) --* User-specified settings for defining what the conditions are for declaring the input unhealthy and failing over to a different input.
                  

                  - **ErrorClearTimeMsec** *(integer) --* This clear time defines the requirement a recovered input must meet to be considered healthy. The input must have no failover conditions for this length of time. Enter a time in milliseconds. This value is particularly important if the input_preference for the failover pair is set to PRIMARY_INPUT_PREFERRED, because after this time, MediaLive will switch back to the primary input.
                  

                  - **FailoverConditions** *(list) --* A list of failover conditions. If any of these conditions occur, MediaLive will perform a failover to the other input.
                    

                    - *(dict) --* Failover Condition settings. There can be multiple failover conditions inside AutomaticInputFailoverSettings.
                      

                      - **FailoverConditionSettings** *(dict) --* Failover condition type-specific settings.
                        

                        - **AudioSilenceSettings** *(dict) --* MediaLive will perform a failover if the specified audio selector is silent for the specified period.
                          

                          - **AudioSelectorName** *(string) --* The name of the audio selector in the input that MediaLive should monitor to detect silence. Select your most important rendition. If you didn't create an audio selector in this input, leave blank.
                          

                          - **AudioSilenceThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be silent before automatic input failover occurs. Silence is defined as audio loss or audio quieter than -50 dBFS.
                      
                        

                        - **InputLossSettings** *(dict) --* MediaLive will perform a failover if content is not detected in this input for the specified period.
                          

                          - **InputLossThresholdMsec** *(integer) --* The amount of time (in milliseconds) that no input is detected. After that time, an input failover will occur.
                      
                        

                        - **VideoBlackSettings** *(dict) --* MediaLive will perform a failover if content is considered black for the specified period.
                          

                          - **BlackDetectThreshold** *(float) --* A value used in calculating the threshold below which MediaLive considers a pixel to be 'black'. For the input to be considered black, every pixel in a frame must be below this threshold. The threshold is calculated as a percentage (expressed as a decimal) of white. Therefore .1 means 10% white (or 90% black). Note how the formula works for any color depth. For example, if you set this field to 0.1 in 10-bit color depth: (1023*0.1=102.3), which means a pixel value of 102 or less is 'black'. If you set this field to .1 in an 8-bit color depth: (255*0.1=25.5), which means a pixel value of 25 or less is 'black'. The range is 0.0 to 1.0, with any number of decimal places.
                          

                          - **VideoBlackThresholdMsec** *(integer) --* The amount of time (in milliseconds) that the active input must be black before automatic input failover occurs.
                      
                    
                  
                
                  

                  - **InputPreference** *(string) --* Input preference when deciding which input to make active when a previously failed input has recovered.
                  

                  - **SecondaryInputId** *(string) --* The input ID of the secondary input in the automatic input failover pair.
              
                

                - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is required if the user wants to use this input in an input switch action.
                

                - **InputId** *(string) --* The ID of the input
                

                - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)
                  

                  - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that have multiple available.
                    

                    - *(dict) --* Audio Selector
                      

                      - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use this name to uniquely identify this Selector. Selector names should be unique per input.
                      

                      - **SelectorSettings** *(dict) --* The audio selector settings.
                        

                        - **AudioHlsRenditionSelection** *(dict) --* Audio Hls Rendition Selection
                          

                          - **GroupId** *(string) --* Specifies the GROUP-ID in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                          

                          - **Name** *(string) --* Specifies the NAME in the #EXT-X-MEDIA tag of the target HLS audio rendition.
                      
                        

                        - **AudioLanguageSelection** *(dict) --* Audio Language Selection
                          

                          - **LanguageCode** *(string) --* Selects a specific three-letter language code from within an audio source.
                          

                          - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport stream demux strictly identifies audio streams by their language descriptor. If a PMT update occurs such that an audio stream matching the initially selected language is no longer present then mute will be encoded until the language returns. If "loose", then on a PMT update the demux will choose another audio stream in the program with the same stream type if it can't find one with the same language.
                      
                        

                        - **AudioPidSelection** *(dict) --* Audio Pid Selection
                          

                          - **Pid** *(integer) --* Selects a specific PID from within a source.
                      
                        

                        - **AudioTrackSelection** *(dict) --* Audio Track Selection
                          

                          - **Tracks** *(list) --* Selects one or more unique audio tracks from within a source.
                            

                            - *(dict) --* Audio Track
                              

                              - **Track** *(integer) --* 1-based integer value that maps to a specific audio track
                          
                        
                      
                    
                  
                
                  

                  - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that have multiple available.
                    

                    - *(dict) --* Output groups for this Live Event. Output groups contain information about where streams should be distributed.
                      

                      - **LanguageCode** *(string) --* When specified this field indicates the three letter language code of the caption track to extract from the source.
                      

                      - **Name** *(string) --* Name identifier for a caption selector. This name is used to associate this caption selector with one or more caption descriptions. Names must be unique within an event.
                      

                      - **SelectorSettings** *(dict) --* Caption selector settings.
                        

                        - **AncillarySourceSettings** *(dict) --* Ancillary Source Settings
                          

                          - **SourceAncillaryChannelNumber** *(integer) --* Specifies the number (1 to 4) of the captions channel you want to extract from the ancillary captions. If you plan to convert the ancillary captions to another format, complete this field. If you plan to choose Embedded as the captions destination in the output (to pass through all the channels in the ancillary captions), leave this field blank because MediaLive ignores the field.
                      
                        

                        - **AribSourceSettings** *(dict) --* Arib Source Settings
                      
                        

                        - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings
                          

                          - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                          

                          - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed through, regardless of selectors.
                      
                        

                        - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings
                          

                          - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                          

                          - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent and/or non-aligned SCTE-20 and Embedded captions.
                          

                          - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                          

                          - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.
                      
                        

                        - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings
                          

                          - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via the "608 compatibility bytes" fields of the 708 wrapper as well as translated into 708. 708 data present in the source content will be discarded.
                          

                          - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number within the video track from which to extract captions. Unused for passthrough.
                      
                        

                        - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings
                          

                          - **OcrLanguage** *(string) --* If you will configure a WebVTT caption description that references this caption selector, use this field to provide the language to consider when translating the image-based source to text.
                          

                          - **Pid** *(integer) --* The pid field is used in conjunction with the caption selector languageCode field as follows: - Specify PID and Language: Extracts captions from that PID; the language is "informational". - Specify PID and omit Language: Extracts the specified PID. - Omit PID and specify Language: Extracts the specified language, whichever PID that happens to be. - Omit PID and omit Language: Valid only if source is DVB-Sub that is being passed through; all languages will be passed through.
                      
                        

                        - **TeletextSourceSettings** *(dict) --* Teletext Source Settings
                          

                          - **OutputRectangle** *(dict) --* Optionally defines a region where TTML style captions will be displayed
                            

                            - **Height** *(float) --* See the description in leftOffset. For height, specify the entire height of the rectangle as a percentage of the underlying frame height. For example, \"80\" means the rectangle height is 80% of the underlying frame height. The topOffset and rectangleHeight must add up to 100% or less. This field corresponds to tts:extent - Y in the TTML standard.
                            

                            - **LeftOffset** *(float) --* Applies only if you plan to convert these source captions to EBU-TT-D or TTML in an output. (Make sure to leave the default if you don't have either of these formats in the output.) You can define a display rectangle for the captions that is smaller than the underlying video frame. You define the rectangle by specifying the position of the left edge, top edge, bottom edge, and right edge of the rectangle, all within the underlying video frame. The units for the measurements are percentages. If you specify a value for one of these fields, you must specify a value for all of them. For leftOffset, specify the position of the left edge of the rectangle, as a percentage of the underlying frame width, and relative to the left edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame width. The rectangle left edge starts at that position from the left edge of the frame. This field corresponds to tts:origin - X in the TTML standard.
                            

                            - **TopOffset** *(float) --* See the description in leftOffset. For topOffset, specify the position of the top edge of the rectangle, as a percentage of the underlying frame height, and relative to the top edge of the frame. For example, \"10\" means the measurement is 10% of the underlying frame height. The rectangle top edge starts at that position from the top edge of the frame. This field corresponds to tts:origin - Y in the TTML standard.
                            

                            - **Width** *(float) --* See the description in leftOffset. For width, specify the entire width of the rectangle as a percentage of the underlying frame width. For example, \"80\" means the rectangle width is 80% of the underlying frame width. The leftOffset and rectangleWidth must add up to 100% or less. This field corresponds to tts:extent - X in the TTML standard.
                        
                          

                          - **PageNumber** *(string) --* Specifies the teletext page number within the data stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.
                      
                    
                  
                
                  

                  - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.
                  

                  - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.
                  

                  - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
                  

                  - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the deblocking filter enabled by default. 1) auto - filtering will be applied depending on input type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering will be applied regardless of input type
                  

                  - **NetworkInputSettings** *(dict) --* Input settings.
                    

                    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS manifest.
                      

                      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that most closely matches this value will be chosen, otherwise the highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS manifest.
                      

                      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin this many buffer segments from the end (most recently written segment). When not specified, the HLS input will begin with the first segment specified in the m3u8.
                      

                      - **Retries** *(integer) --* The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
                      

                      - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt to read a manifest or segment fails.
                      

                      - **Scte35Source** *(string) --* Identifies the source for the SCTE-35 messages that MediaLive will ingest. Messages can be ingested from the content segments (in the stream) or from tags in the playlist (the HLS manifest). MediaLive ignores SCTE-35 information in the source that is not selected.
                  
                    

                    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to checkCryptographyOnly, cryptography in the certificate will be checked, but not the server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do not strictly match the corresponding certificate's wildcard pattern and would otherwise cause the event to error. This setting is ignored for protocols that do not use https.
                
                  

                  - **Smpte2038DataPreference** *(string) --* Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in this input. Applicable data types are captions, timecode, AFD, and SCTE-104 messages. - PREFER: Extract from SMPTE-2038 if present in this input, otherwise extract from another source (if any). - IGNORE: Never extract any ancillary data from SMPTE-2038.
                  

                  - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to be streamed indefinitely.
                  

                  - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input types that have multiple available.
                    

                    - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine if any conversion will be performed.
                    

                    - **ColorSpaceSettings** *(dict) --* Color space settings
                      

                      - **Hdr10Settings** *(dict) --* Hdr10 Settings
                        

                        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value defining the maximum light level, in nits, of any single pixel within an encoded HDR video stream or file.
                        

                        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata value defining the maximum average light level, in nits, for any single frame within an encoded HDR video stream or file.
                    
                  
                    

                    - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than follow. This field controls how the value in the colorSpace field will be used. fallback means that when the input does include color space data, that data will be used, but when the input has no color space data, the value in colorSpace will be used. Choose fallback if your input is sometimes missing color space data, but when it does have color space data, that data is correct. force means to always use the value in colorSpace. Choose force if your input usually has no color space data or might have unreliable color space data.
                    

                    - **SelectorSettings** *(dict) --* The video selector settings.
                      

                      - **VideoSelectorPid** *(dict) --* Video Selector Pid
                        

                        - **Pid** *(integer) --* Selects a specific PID from within a video source.
                    
                      

                      - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id
                        

                        - **ProgramId** *(integer) --* Selects a specific program from within a multi-program transport stream. If the program doesn't exist, the first program within the transport stream will be selected by default.
                    
                  
                
              
            
          
            

            - **InputSpecification** *(dict) --* Specification of network and file inputs for this channel
              

              - **Codec** *(string) --* Input codec
              

              - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely
              

              - **Resolution** *(string) --* Input resolution, categorized coarsely
          
            

            - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.
            

            - **Name** *(string) --* The name of the channel. (user-mutable)
            

            - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
            

            - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the Channel.
            

            - **State** *(string) --* Placeholder documentation for ChannelState
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **Vpc** *(dict) --* Settings for VPC output
              

              - **AvailabilityZones** *(list) --* The Availability Zones where the vpc subnets are located. The first Availability Zone applies to the first subnet in the list of subnets. The second Availability Zone applies to the second subnet. 
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **NetworkInterfaceIds** *(list) --* A list of Elastic Network Interfaces created by MediaLive in the customer's VPC 
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **SecurityGroupIds** *(list) --* A list of up EC2 VPC security group IDs attached to the Output VPC network interfaces. 
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **SubnetIds** *(list) --* A list of VPC subnet IDs from the same VPC. If STANDARD channel, subnet IDs must be mapped to two unique availability zones (AZ). 
                

                - *(string) --* Placeholder documentation for __string
            
          
        
      
    

.. py:class:: MediaLive.Paginator.ListInputDeviceTransfers

  ::

    
    paginator = client.get_paginator('list_input_device_transfers')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_input_device_transfers`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputDeviceTransfers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          TransferType='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type TransferType: string
    :param TransferType: **[REQUIRED]** Placeholder documentation for __string

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InputDeviceTransfers': [
                {
                    'Id': 'string',
                    'Message': 'string',
                    'TargetCustomerId': 'string',
                    'TransferType': 'OUTGOING'|'INCOMING'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* An array of input devices that are currently being transferred.
        

        - **InputDeviceTransfers** *(list) --* The list of devices that you are transferring or are being transferred to you.
          

          - *(dict) --* Details about the input device that is being transferred.
            

            - **Id** *(string) --* The unique ID of the input device.
            

            - **Message** *(string) --* The optional message that the sender has attached to the transfer.
            

            - **TargetCustomerId** *(string) --* The AWS account ID for the recipient of the input device transfer.
            

            - **TransferType** *(string) --* The type (direction) of the input device transfer.
        
      
    

.. py:class:: MediaLive.Paginator.ListInputDevices

  ::

    
    paginator = client.get_paginator('list_input_devices')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_input_devices`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputDevices>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InputDevices': [
                {
                    'Arn': 'string',
                    'ConnectionState': 'DISCONNECTED'|'CONNECTED',
                    'DeviceSettingsSyncState': 'SYNCED'|'SYNCING',
                    'DeviceUpdateStatus': 'UP_TO_DATE'|'NOT_UP_TO_DATE',
                    'HdDeviceSettings': {
                        'ActiveInput': 'HDMI'|'SDI',
                        'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                        'DeviceState': 'IDLE'|'STREAMING',
                        'Framerate': 123.0,
                        'Height': 123,
                        'MaxBitrate': 123,
                        'ScanType': 'INTERLACED'|'PROGRESSIVE',
                        'Width': 123
                    },
                    'Id': 'string',
                    'MacAddress': 'string',
                    'Name': 'string',
                    'NetworkSettings': {
                        'DnsAddresses': [
                            'string',
                        ],
                        'Gateway': 'string',
                        'IpAddress': 'string',
                        'IpScheme': 'STATIC'|'DHCP',
                        'SubnetMask': 'string'
                    },
                    'SerialNumber': 'string',
                    'Type': 'HD',
                    'UhdDeviceSettings': {
                        'ActiveInput': 'HDMI'|'SDI',
                        'ConfiguredInput': 'AUTO'|'HDMI'|'SDI',
                        'DeviceState': 'IDLE'|'STREAMING',
                        'Framerate': 123.0,
                        'Height': 123,
                        'MaxBitrate': 123,
                        'ScanType': 'INTERLACED'|'PROGRESSIVE',
                        'Width': 123
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* An array of input devices.
        

        - **InputDevices** *(list) --* The list of input devices.
          

          - *(dict) --* Details of the input device.
            

            - **Arn** *(string) --* The unique ARN of the input device.
            

            - **ConnectionState** *(string) --* The state of the connection between the input device and AWS.
            

            - **DeviceSettingsSyncState** *(string) --* The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
            

            - **DeviceUpdateStatus** *(string) --* The status of software on the input device.
            

            - **HdDeviceSettings** *(dict) --* Settings that describe an input device that is type HD.
              

              - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
              

              - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
              

              - **DeviceState** *(string) --* The state of the input device.
              

              - **Framerate** *(float) --* The frame rate of the video source.
              

              - **Height** *(integer) --* The height of the video source, in pixels.
              

              - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
              

              - **ScanType** *(string) --* The scan type of the video source.
              

              - **Width** *(integer) --* The width of the video source, in pixels.
          
            

            - **Id** *(string) --* The unique ID of the input device.
            

            - **MacAddress** *(string) --* The network MAC address of the input device.
            

            - **Name** *(string) --* A name that you specify for the input device.
            

            - **NetworkSettings** *(dict) --* Network settings for the input device.
              

              - **DnsAddresses** *(list) --* The DNS addresses of the input device.
                

                - *(string) --* Placeholder documentation for __string
            
              

              - **Gateway** *(string) --* The network gateway IP address.
              

              - **IpAddress** *(string) --* The IP address of the input device.
              

              - **IpScheme** *(string) --* Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
              

              - **SubnetMask** *(string) --* The subnet mask of the input device.
          
            

            - **SerialNumber** *(string) --* The unique serial number of the input device.
            

            - **Type** *(string) --* The type of the input device.
            

            - **UhdDeviceSettings** *(dict) --* Settings that describe an input device that is type UHD.
              

              - **ActiveInput** *(string) --* If you specified Auto as the configured input, specifies which of the sources is currently active (SDI or HDMI).
              

              - **ConfiguredInput** *(string) --* The source at the input device that is currently active. You can specify this source.
              

              - **DeviceState** *(string) --* The state of the input device.
              

              - **Framerate** *(float) --* The frame rate of the video source.
              

              - **Height** *(integer) --* The height of the video source, in pixels.
              

              - **MaxBitrate** *(integer) --* The current maximum bitrate for ingesting this source, in bits per second. You can specify this maximum.
              

              - **ScanType** *(string) --* The scan type of the video source.
              

              - **Width** *(integer) --* The width of the video source, in pixels.
          
        
      
    

.. py:class:: MediaLive.Paginator.ListInputSecurityGroups

  ::

    
    paginator = client.get_paginator('list_input_security_groups')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_input_security_groups`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputSecurityGroups>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InputSecurityGroups': [
                {
                    'Arn': 'string',
                    'Id': 'string',
                    'Inputs': [
                        'string',
                    ],
                    'State': 'IDLE'|'IN_USE'|'UPDATING'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    },
                    'WhitelistRules': [
                        {
                            'Cidr': 'string'
                        },
                    ]
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* An array of Input Security Groups
        

        - **InputSecurityGroups** *(list) --* List of input security groups
          

          - *(dict) --* An Input Security Group
            

            - **Arn** *(string) --* Unique ARN of Input Security Group
            

            - **Id** *(string) --* The Id of the Input Security Group
            

            - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **State** *(string) --* The current state of the Input Security Group.
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **WhitelistRules** *(list) --* Whitelist rules and their sync status
              

              - *(dict) --* Whitelist rule
                

                - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
            
          
        
      
    

.. py:class:: MediaLive.Paginator.ListInputs

  ::

    
    paginator = client.get_paginator('list_inputs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_inputs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListInputs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Inputs': [
                {
                    'Arn': 'string',
                    'AttachedChannels': [
                        'string',
                    ],
                    'Destinations': [
                        {
                            'Ip': 'string',
                            'Port': 'string',
                            'Url': 'string',
                            'Vpc': {
                                'AvailabilityZone': 'string',
                                'NetworkInterfaceId': 'string'
                            }
                        },
                    ],
                    'Id': 'string',
                    'InputClass': 'STANDARD'|'SINGLE_PIPELINE',
                    'InputDevices': [
                        {
                            'Id': 'string'
                        },
                    ],
                    'InputPartnerIds': [
                        'string',
                    ],
                    'InputSourceType': 'STATIC'|'DYNAMIC',
                    'MediaConnectFlows': [
                        {
                            'FlowArn': 'string'
                        },
                    ],
                    'Name': 'string',
                    'RoleArn': 'string',
                    'SecurityGroups': [
                        'string',
                    ],
                    'Sources': [
                        {
                            'PasswordParam': 'string',
                            'Url': 'string',
                            'Username': 'string'
                        },
                    ],
                    'State': 'CREATING'|'DETACHED'|'ATTACHED'|'DELETING'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    },
                    'Type': 'UDP_PUSH'|'RTP_PUSH'|'RTMP_PUSH'|'RTMP_PULL'|'URL_PULL'|'MP4_FILE'|'MEDIACONNECT'|'INPUT_DEVICE'|'AWS_CDI'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* An array of inputs
        

        - **Inputs** *(list) --* Placeholder documentation for __listOfInput
          

          - *(dict) --* Placeholder documentation for Input
            

            - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).
            

            - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).
              

              - *(dict) --* The settings for a PUSH type input.
                

                - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed for the lifetime of the input. 
                

                - **Port** *(string) --* The port number for the input.
                

                - **Url** *(string) --* This represents the endpoint that the customer stream will be pushed to. 
                

                - **Vpc** *(dict) --* The properties for a VPC type input destination.
                  

                  - **AvailabilityZone** *(string) --* The availability zone of the Input destination. 
                  

                  - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination in the VPC. 
              
            
          
            

            - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).
            

            - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input. 
            

            - **InputDevices** *(list) --* Settings for the input devices.
              

              - *(dict) --* Settings for an input device.
                

                - **Id** *(string) --* The unique ID for the device.
            
          
            

            - **InputPartnerIds** *(list) --* A list of IDs for all Inputs which are partners of this one.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE inputs. 
            

            - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.
              

              - *(dict) --* The settings for a MediaConnect Flow.
                

                - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.
            
          
            

            - **Name** *(string) --* The user-assigned name (This is a mutable value).
            

            - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
            

            - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to the input.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **Sources** *(list) --* A list of the sources of the input (PULL-type).
              

              - *(dict) --* The settings for a PULL type input.
                

                - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter store.
                

                - **Url** *(string) --* This represents the customer's source URL where stream is pulled from. 
                

                - **Username** *(string) --* The username for the input source.
            
          
            

            - **State** *(string) --* Placeholder documentation for InputState
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **Type** *(string) --* Placeholder documentation for InputType
        
      
    

.. py:class:: MediaLive.Paginator.ListMultiplexPrograms

  ::

    
    paginator = client.get_paginator('list_multiplex_programs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_multiplex_programs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListMultiplexPrograms>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          MultiplexId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex that the programs belong to.

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MultiplexPrograms': [
                {
                    'ChannelId': 'string',
                    'ProgramName': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* An array of the programs for one multiplex.
        

        - **MultiplexPrograms** *(list) --* List of multiplex programs.
          

          - *(dict) --* Placeholder documentation for MultiplexProgramSummary
            

            - **ChannelId** *(string) --* The MediaLive Channel associated with the program.
            

            - **ProgramName** *(string) --* The name of the multiplex program.
        
      
    

.. py:class:: MediaLive.Paginator.ListMultiplexes

  ::

    
    paginator = client.get_paginator('list_multiplexes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_multiplexes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListMultiplexes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Multiplexes': [
                {
                    'Arn': 'string',
                    'AvailabilityZones': [
                        'string',
                    ],
                    'Id': 'string',
                    'MultiplexSettings': {
                        'TransportStreamBitrate': 123
                    },
                    'Name': 'string',
                    'PipelinesRunningCount': 123,
                    'ProgramCount': 123,
                    'State': 'CREATING'|'CREATE_FAILED'|'IDLE'|'STARTING'|'RUNNING'|'RECOVERING'|'STOPPING'|'DELETING'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* An array of multiplexes.
        

        - **Multiplexes** *(list) --* List of multiplexes.
          

          - *(dict) --* Placeholder documentation for MultiplexSummary
            

            - **Arn** *(string) --* The unique arn of the multiplex.
            

            - **AvailabilityZones** *(list) --* A list of availability zones for the multiplex.
              

              - *(string) --* Placeholder documentation for __string
          
            

            - **Id** *(string) --* The unique id of the multiplex.
            

            - **MultiplexSettings** *(dict) --* Configuration for a multiplex event.
              

              - **TransportStreamBitrate** *(integer) --* Transport stream bit rate.
          
            

            - **Name** *(string) --* The name of the multiplex.
            

            - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.
            

            - **ProgramCount** *(integer) --* The number of programs in the multiplex.
            

            - **State** *(string) --* The current state of the multiplex.
            

            - **Tags** *(dict) --* A collection of key-value pairs.
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
        
      
    

.. py:class:: MediaLive.Paginator.ListOfferings

  ::

    
    paginator = client.get_paginator('list_offerings')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_offerings`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListOfferings>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ChannelClass='string',
          ChannelConfiguration='string',
          Codec='string',
          Duration='string',
          MaximumBitrate='string',
          MaximumFramerate='string',
          Resolution='string',
          ResourceType='string',
          SpecialFeature='string',
          VideoQuality='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ChannelClass: string
    :param ChannelClass: Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE' 

    
    :type ChannelConfiguration: string
    :param ChannelConfiguration: Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID) 

    
    :type Codec: string
    :param Codec: Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'

    
    :type Duration: string
    :param Duration: Filter by offering duration, e.g. '12'

    
    :type MaximumBitrate: string
    :param MaximumBitrate: Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS' 

    
    :type MaximumFramerate: string
    :param MaximumFramerate: Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'

    
    :type Resolution: string
    :param Resolution: Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'

    
    :type ResourceType: string
    :param ResourceType: Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'

    
    :type SpecialFeature: string
    :param SpecialFeature: Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION' 

    
    :type VideoQuality: string
    :param VideoQuality: Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM' 

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Offerings': [
                {
                    'Arn': 'string',
                    'CurrencyCode': 'string',
                    'Duration': 123,
                    'DurationUnits': 'MONTHS',
                    'FixedPrice': 123.0,
                    'OfferingDescription': 'string',
                    'OfferingId': 'string',
                    'OfferingType': 'NO_UPFRONT',
                    'Region': 'string',
                    'ResourceSpecification': {
                        'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                        'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                        'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                        'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                        'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                        'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                        'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                        'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
                    },
                    'UsagePrice': 123.0
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* List of offerings
        

        - **Offerings** *(list) --* List of offerings
          

          - *(dict) --* Reserved resources available for purchase
            

            - **Arn** *(string) --* Unique offering ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:offering:87654321'
            

            - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
            

            - **Duration** *(integer) --* Lease duration, e.g. '12'
            

            - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
            

            - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
            

            - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
            

            - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
            

            - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
            

            - **Region** *(string) --* AWS region, e.g. 'us-west-2'
            

            - **ResourceSpecification** *(dict) --* Resource configuration details
              

              - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
              

              - **Codec** *(string) --* Codec, e.g. 'AVC'
              

              - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
              

              - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
              

              - **Resolution** *(string) --* Resolution, e.g. 'HD'
              

              - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
              

              - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
              

              - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
          
            

            - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
        
      
    

.. py:class:: MediaLive.Paginator.ListReservations

  ::

    
    paginator = client.get_paginator('list_reservations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaLive.Client.list_reservations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/ListReservations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ChannelClass='string',
          Codec='string',
          MaximumBitrate='string',
          MaximumFramerate='string',
          Resolution='string',
          ResourceType='string',
          SpecialFeature='string',
          VideoQuality='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ChannelClass: string
    :param ChannelClass: Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE' 

    
    :type Codec: string
    :param Codec: Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'

    
    :type MaximumBitrate: string
    :param MaximumBitrate: Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS' 

    
    :type MaximumFramerate: string
    :param MaximumFramerate: Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'

    
    :type Resolution: string
    :param Resolution: Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'

    
    :type ResourceType: string
    :param ResourceType: Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'

    
    :type SpecialFeature: string
    :param SpecialFeature: Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION' 

    
    :type VideoQuality: string
    :param VideoQuality: Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM' 

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Reservations': [
                {
                    'Arn': 'string',
                    'Count': 123,
                    'CurrencyCode': 'string',
                    'Duration': 123,
                    'DurationUnits': 'MONTHS',
                    'End': 'string',
                    'FixedPrice': 123.0,
                    'Name': 'string',
                    'OfferingDescription': 'string',
                    'OfferingId': 'string',
                    'OfferingType': 'NO_UPFRONT',
                    'Region': 'string',
                    'ReservationId': 'string',
                    'ResourceSpecification': {
                        'ChannelClass': 'STANDARD'|'SINGLE_PIPELINE',
                        'Codec': 'MPEG2'|'AVC'|'HEVC'|'AUDIO'|'LINK',
                        'MaximumBitrate': 'MAX_10_MBPS'|'MAX_20_MBPS'|'MAX_50_MBPS',
                        'MaximumFramerate': 'MAX_30_FPS'|'MAX_60_FPS',
                        'Resolution': 'SD'|'HD'|'FHD'|'UHD',
                        'ResourceType': 'INPUT'|'OUTPUT'|'MULTIPLEX'|'CHANNEL',
                        'SpecialFeature': 'ADVANCED_AUDIO'|'AUDIO_NORMALIZATION'|'MGHD'|'MGUHD',
                        'VideoQuality': 'STANDARD'|'ENHANCED'|'PREMIUM'
                    },
                    'Start': 'string',
                    'State': 'ACTIVE'|'EXPIRED'|'CANCELED'|'DELETED',
                    'Tags': {
                        'string': 'string'
                    },
                    'UsagePrice': 123.0
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* List of reservations
        

        - **Reservations** *(list) --* List of reservations
          

          - *(dict) --* Reserved resources available to use
            

            - **Arn** *(string) --* Unique reservation ARN, e.g. 'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'
            

            - **Count** *(integer) --* Number of reserved resources
            

            - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217 format, e.g. 'USD'
            

            - **Duration** *(integer) --* Lease duration, e.g. '12'
            

            - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'
            

            - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g. '2019-03-01T00:00:00'
            

            - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a NO_UPFRONT offering
            

            - **Name** *(string) --* User specified reservation name
            

            - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20 Mbps, 30 fps, and standard VQ in US West (Oregon)'
            

            - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'
            

            - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'
            

            - **Region** *(string) --* AWS region, e.g. 'us-west-2'
            

            - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'
            

            - **ResourceSpecification** *(dict) --* Resource configuration details
              

              - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'
              

              - **Codec** *(string) --* Codec, e.g. 'AVC'
              

              - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'
              

              - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)
              

              - **Resolution** *(string) --* Resolution, e.g. 'HD'
              

              - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
              

              - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)
              

              - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
          
            

            - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g. '2018-03-01T00:00:00'
            

            - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'
            

            - **Tags** *(dict) --* A collection of key-value pairs
              

              - *(string) --* Placeholder documentation for __string
                

                - *(string) --* Placeholder documentation for __string
          
        
            

            - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
        
      
    

=======
Waiters
=======


The available waiters are:

* :py:class:`MediaLive.Waiter.ChannelCreated`


* :py:class:`MediaLive.Waiter.ChannelDeleted`


* :py:class:`MediaLive.Waiter.ChannelRunning`


* :py:class:`MediaLive.Waiter.ChannelStopped`


* :py:class:`MediaLive.Waiter.InputAttached`


* :py:class:`MediaLive.Waiter.InputDeleted`


* :py:class:`MediaLive.Waiter.InputDetached`


* :py:class:`MediaLive.Waiter.MultiplexCreated`


* :py:class:`MediaLive.Waiter.MultiplexDeleted`


* :py:class:`MediaLive.Waiter.MultiplexRunning`


* :py:class:`MediaLive.Waiter.MultiplexStopped`



.. py:class:: MediaLive.Waiter.ChannelCreated

  ::

    
    waiter = client.get_waiter('channel_created')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_channel` every 3 seconds until a successful state is reached. An error is returned after 5 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeChannel>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          ChannelId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** channel ID

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 5

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.ChannelDeleted

  ::

    
    waiter = client.get_waiter('channel_deleted')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_channel` every 5 seconds until a successful state is reached. An error is returned after 84 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeChannel>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          ChannelId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** channel ID

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 84

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.ChannelRunning

  ::

    
    waiter = client.get_waiter('channel_running')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_channel` every 5 seconds until a successful state is reached. An error is returned after 120 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeChannel>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          ChannelId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** channel ID

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 120

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.ChannelStopped

  ::

    
    waiter = client.get_waiter('channel_stopped')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_channel` every 5 seconds until a successful state is reached. An error is returned after 60 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeChannel>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          ChannelId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type ChannelId: string
    :param ChannelId: **[REQUIRED]** channel ID

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 60

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.InputAttached

  ::

    
    waiter = client.get_waiter('input_attached')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_input` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeInput>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          InputId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type InputId: string
    :param InputId: **[REQUIRED]** Unique ID of the input

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.InputDeleted

  ::

    
    waiter = client.get_waiter('input_deleted')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_input` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeInput>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          InputId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type InputId: string
    :param InputId: **[REQUIRED]** Unique ID of the input

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.InputDetached

  ::

    
    waiter = client.get_waiter('input_detached')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_input` every 5 seconds until a successful state is reached. An error is returned after 84 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeInput>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          InputId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type InputId: string
    :param InputId: **[REQUIRED]** Unique ID of the input

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 84

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.MultiplexCreated

  ::

    
    waiter = client.get_waiter('multiplex_created')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_multiplex` every 3 seconds until a successful state is reached. An error is returned after 5 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeMultiplex>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          MultiplexId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 5

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.MultiplexDeleted

  ::

    
    waiter = client.get_waiter('multiplex_deleted')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_multiplex` every 5 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeMultiplex>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          MultiplexId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.MultiplexRunning

  ::

    
    waiter = client.get_waiter('multiplex_running')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_multiplex` every 5 seconds until a successful state is reached. An error is returned after 120 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeMultiplex>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          MultiplexId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 120

        

      
    
    
    :returns: None

.. py:class:: MediaLive.Waiter.MultiplexStopped

  ::

    
    waiter = client.get_waiter('multiplex_stopped')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`MediaLive.Client.describe_multiplex` every 5 seconds until a successful state is reached. An error is returned after 28 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/medialive-2017-10-14/DescribeMultiplex>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          MultiplexId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type MultiplexId: string
    :param MultiplexId: **[REQUIRED]** The ID of the multiplex.

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 5

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 28

        

      
    
    
    :returns: None