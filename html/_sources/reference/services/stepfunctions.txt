

***
SFN
***

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: SFN.Client

  A low-level client representing AWS Step Functions (SFN)
   

  AWS Step Functions is a service that lets you coordinate the components of distributed applications and microservices using visual workflows.

   

  You can use Step Functions to build applications from individual components, each of which performs a discrete function, or *task* , allowing you to scale and change applications quickly. Step Functions provides a console that helps visualize the components of your application as a series of steps. Step Functions automatically triggers and tracks each step, and retries steps when there are errors, so your application executes predictably and in the right order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any issues.

   

  Step Functions manages operations and underlying infrastructure to ensure your application is available at any scale. You can run tasks on AWS, your own servers, or any system that has access to AWS. You can access and use Step Functions using the console, the AWS SDKs, or an HTTP API. For more information about Step Functions, see the * `AWS Step Functions Developer Guide <https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html>`__ * .

  ::

    
    import boto3
    
    client = boto3.client('stepfunctions')

  
  These are the available methods:
  
  *   :py:meth:`~SFN.Client.can_paginate`

  
  *   :py:meth:`~SFN.Client.create_activity`

  
  *   :py:meth:`~SFN.Client.create_state_machine`

  
  *   :py:meth:`~SFN.Client.delete_activity`

  
  *   :py:meth:`~SFN.Client.delete_state_machine`

  
  *   :py:meth:`~SFN.Client.describe_activity`

  
  *   :py:meth:`~SFN.Client.describe_execution`

  
  *   :py:meth:`~SFN.Client.describe_state_machine`

  
  *   :py:meth:`~SFN.Client.describe_state_machine_for_execution`

  
  *   :py:meth:`~SFN.Client.generate_presigned_url`

  
  *   :py:meth:`~SFN.Client.get_activity_task`

  
  *   :py:meth:`~SFN.Client.get_execution_history`

  
  *   :py:meth:`~SFN.Client.get_paginator`

  
  *   :py:meth:`~SFN.Client.get_waiter`

  
  *   :py:meth:`~SFN.Client.list_activities`

  
  *   :py:meth:`~SFN.Client.list_executions`

  
  *   :py:meth:`~SFN.Client.list_state_machines`

  
  *   :py:meth:`~SFN.Client.list_tags_for_resource`

  
  *   :py:meth:`~SFN.Client.send_task_failure`

  
  *   :py:meth:`~SFN.Client.send_task_heartbeat`

  
  *   :py:meth:`~SFN.Client.send_task_success`

  
  *   :py:meth:`~SFN.Client.start_execution`

  
  *   :py:meth:`~SFN.Client.start_sync_execution`

  
  *   :py:meth:`~SFN.Client.stop_execution`

  
  *   :py:meth:`~SFN.Client.tag_resource`

  
  *   :py:meth:`~SFN.Client.untag_resource`

  
  *   :py:meth:`~SFN.Client.update_state_machine`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_activity(**kwargs)

    

    Creates an activity. An activity is a task that you write in any programming language and host on any machine that has access to AWS Step Functions. Activities must poll Step Functions using the ``GetActivityTask`` API action and respond using ``SendTask*`` API actions. This function lets Step Functions know the existence of your activity and returns an identifier for use in a state machine and when polling from the activity.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

     

    .. note::

       

       ``CreateActivity`` is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. ``CreateActivity`` 's idempotency check is based on the activity ``name`` . If a following request has different ``tags`` values, Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, ``tags`` will not be updated, even if they are different.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/CreateActivity>`_    


    **Request Syntax** 
    ::

      response = client.create_activity(
          name='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the activity to create. This name must be unique for your AWS account and region for 90 days. For more information, see `Limits Related to State Machine Executions <https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions>`__ in the *AWS Step Functions Developer Guide* .

       

      A name must *not* contain:

       

       
      * white space 
       
      * brackets ``< > { } [ ]``   
       
      * wildcard characters ``? *``   
       
      * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
       
      * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
       

       

      To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

      

    
    :type tags: list
    :param tags: 

      The list of tags to add to a resource.

       

      An array of key-value pairs. For more information, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ in the *AWS Billing and Cost Management User Guide* , and `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`__ .

       

      Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

      

    
      - *(dict) --* 

        Tags are key-value pairs that can be associated with Step Functions state machines and activities.

         

        An array of key-value pairs. For more information, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ in the *AWS Billing and Cost Management User Guide* , and `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`__ .

         

        Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

        

      
        - **key** *(string) --* 

          The key of a tag.

          

        
        - **value** *(string) --* 

          The value of a tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'activityArn': 'string',
            'creationDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **activityArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the created activity.

          
        

        - **creationDate** *(datetime) --* 

          The date the activity is created.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ActivityLimitExceeded`

    
    *     :py:class:`SFN.Client.exceptions.InvalidName`

    
    *     :py:class:`SFN.Client.exceptions.TooManyTags`

    

  .. py:method:: create_state_machine(**kwargs)

    

    Creates a state machine. A state machine consists of a collection of states that can do work (``Task`` states), determine to which states to transition next (``Choice`` states), stop an execution with an error (``Fail`` states), and so on. State machines are specified using a JSON-based, structured language. For more information, see `Amazon States Language <https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html>`__ in the AWS Step Functions User Guide.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

     

    .. note::

       

       ``CreateStateMachine`` is an idempotent API. Subsequent requests won’t create a duplicate resource if it was already created. ``CreateStateMachine`` 's idempotency check is based on the state machine ``name`` , ``definition`` , ``type`` , ``LoggingConfiguration`` and ``TracingConfiguration`` . If a following request has a different ``roleArn`` or ``tags`` , Step Functions will ignore these differences and treat it as an idempotent request of the previous. In this case, ``roleArn`` and ``tags`` will not be updated, even if they are different.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/CreateStateMachine>`_    


    **Request Syntax** 
    ::

      response = client.create_state_machine(
          name='string',
          definition='string',
          roleArn='string',
          type='STANDARD'|'EXPRESS',
          loggingConfiguration={
              'level': 'ALL'|'ERROR'|'FATAL'|'OFF',
              'includeExecutionData': True|False,
              'destinations': [
                  {
                      'cloudWatchLogsLogGroup': {
                          'logGroupArn': 'string'
                      }
                  },
              ]
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          tracingConfiguration={
              'enabled': True|False
          }
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the state machine. 

       

      A name must *not* contain:

       

       
      * white space 
       
      * brackets ``< > { } [ ]``   
       
      * wildcard characters ``? *``   
       
      * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
       
      * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
       

       

      To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

      

    
    :type definition: string
    :param definition: **[REQUIRED]** 

      The Amazon States Language definition of the state machine. See `Amazon States Language <https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html>`__ .

      

    
    :type roleArn: string
    :param roleArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the IAM role to use for this state machine.

      

    
    :type type: string
    :param type: 

      Determines whether a Standard or Express state machine is created. The default is ``STANDARD`` . You cannot update the ``type`` of a state machine once it has been created.

      

    
    :type loggingConfiguration: dict
    :param loggingConfiguration: 

      Defines what execution history events are logged and where they are logged.

       

      .. note::

         

        By default, the ``level`` is set to ``OFF`` . For more information see `Log Levels <https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html>`__ in the AWS Step Functions User Guide.

         

      

    
      - **level** *(string) --* 

        Defines which category of execution history events are logged.

        

      
      - **includeExecutionData** *(boolean) --* 

        Determines whether execution data is included in your log. When set to ``false`` , data is excluded.

        

      
      - **destinations** *(list) --* 

        An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to ``OFF`` .

        

      
        - *(dict) --* 

          

          

        
          - **cloudWatchLogsLogGroup** *(dict) --* 

            An object describing a CloudWatch log group. For more information, see `AWS\:\:Logs\:\:LogGroup <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html>`__ in the AWS CloudFormation User Guide.

            

          
            - **logGroupArn** *(string) --* 

              The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with ``:*``  

              

            
          
        
    
    
    :type tags: list
    :param tags: 

      Tags to be added when creating a state machine.

       

      An array of key-value pairs. For more information, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ in the *AWS Billing and Cost Management User Guide* , and `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`__ .

       

      Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

      

    
      - *(dict) --* 

        Tags are key-value pairs that can be associated with Step Functions state machines and activities.

         

        An array of key-value pairs. For more information, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ in the *AWS Billing and Cost Management User Guide* , and `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`__ .

         

        Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

        

      
        - **key** *(string) --* 

          The key of a tag.

          

        
        - **value** *(string) --* 

          The value of a tag.

          

        
      
  
    :type tracingConfiguration: dict
    :param tracingConfiguration: 

      Selects whether AWS X-Ray tracing is enabled.

      

    
      - **enabled** *(boolean) --* 

        When set to ``true`` , AWS X-Ray tracing is enabled.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stateMachineArn': 'string',
            'creationDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **stateMachineArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the created state machine.

          
        

        - **creationDate** *(datetime) --* 

          The date the state machine is created.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.InvalidDefinition`

    
    *     :py:class:`SFN.Client.exceptions.InvalidName`

    
    *     :py:class:`SFN.Client.exceptions.InvalidLoggingConfiguration`

    
    *     :py:class:`SFN.Client.exceptions.InvalidTracingConfiguration`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineAlreadyExists`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDeleting`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineLimitExceeded`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineTypeNotSupported`

    
    *     :py:class:`SFN.Client.exceptions.TooManyTags`

    

  .. py:method:: delete_activity(**kwargs)

    

    Deletes an activity.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/DeleteActivity>`_    


    **Request Syntax** 
    ::

      response = client.delete_activity(
          activityArn='string'
      )
    :type activityArn: string
    :param activityArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the activity to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    

  .. py:method:: delete_state_machine(**kwargs)

    

    Deletes a state machine. This is an asynchronous operation: It sets the state machine's status to ``DELETING`` and begins the deletion process. 

     

    .. note::

       

      For ``EXPRESS`` state machines, the deletion will happen eventually (usually less than a minute). Running executions may emit logs after ``DeleteStateMachine`` API is called.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/DeleteStateMachine>`_    


    **Request Syntax** 
    ::

      response = client.delete_state_machine(
          stateMachineArn='string'
      )
    :type stateMachineArn: string
    :param stateMachineArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the state machine to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    

  .. py:method:: describe_activity(**kwargs)

    

    Describes an activity.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/DescribeActivity>`_    


    **Request Syntax** 
    ::

      response = client.describe_activity(
          activityArn='string'
      )
    :type activityArn: string
    :param activityArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the activity to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'activityArn': 'string',
            'name': 'string',
            'creationDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **activityArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the activity.

          
        

        - **name** *(string) --* 

          The name of the activity.

           

          A name must *not* contain:

           

           
          * white space 
           
          * brackets ``< > { } [ ]``   
           
          * wildcard characters ``? *``   
           
          * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
           
          * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
           

           

          To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

          
        

        - **creationDate** *(datetime) --* 

          The date the activity is created.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ActivityDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    

  .. py:method:: describe_execution(**kwargs)

    

    Describes an execution.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

     

    This API action is not supported by ``EXPRESS`` state machines.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/DescribeExecution>`_    


    **Request Syntax** 
    ::

      response = client.describe_execution(
          executionArn='string'
      )
    :type executionArn: string
    :param executionArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the execution to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'executionArn': 'string',
            'stateMachineArn': 'string',
            'name': 'string',
            'status': 'RUNNING'|'SUCCEEDED'|'FAILED'|'TIMED_OUT'|'ABORTED',
            'startDate': datetime(2015, 1, 1),
            'stopDate': datetime(2015, 1, 1),
            'input': 'string',
            'inputDetails': {
                'included': True|False
            },
            'output': 'string',
            'outputDetails': {
                'included': True|False
            },
            'traceHeader': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **executionArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the execution.

          
        

        - **stateMachineArn** *(string) --* 

          The Amazon Resource Name (ARN) of the executed stated machine.

          
        

        - **name** *(string) --* 

          The name of the execution.

           

          A name must *not* contain:

           

           
          * white space 
           
          * brackets ``< > { } [ ]``   
           
          * wildcard characters ``? *``   
           
          * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
           
          * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
           

           

          To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

          
        

        - **status** *(string) --* 

          The current status of the execution.

          
        

        - **startDate** *(datetime) --* 

          The date the execution is started.

          
        

        - **stopDate** *(datetime) --* 

          If the execution has already ended, the date the execution stopped.

          
        

        - **input** *(string) --* 

          The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

          
        

        - **inputDetails** *(dict) --* 

          Provides details about execution input or output.

          
          

          - **included** *(boolean) --* 

            Indicates whether input or output was included in the response. Always ``true`` for API calls. 

            
      
        

        - **output** *(string) --* 

          The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

           

          .. note::

             

            This field is set only if the execution succeeds. If the execution fails, this field is null.

             

          
        

        - **outputDetails** *(dict) --* 

          Provides details about execution input or output.

          
          

          - **included** *(boolean) --* 

            Indicates whether input or output was included in the response. Always ``true`` for API calls. 

            
      
        

        - **traceHeader** *(string) --* 

          The AWS X-Ray trace header that was passed to the execution.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ExecutionDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    

  .. py:method:: describe_state_machine(**kwargs)

    

    Describes a state machine.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/DescribeStateMachine>`_    


    **Request Syntax** 
    ::

      response = client.describe_state_machine(
          stateMachineArn='string'
      )
    :type stateMachineArn: string
    :param stateMachineArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the state machine to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stateMachineArn': 'string',
            'name': 'string',
            'status': 'ACTIVE'|'DELETING',
            'definition': 'string',
            'roleArn': 'string',
            'type': 'STANDARD'|'EXPRESS',
            'creationDate': datetime(2015, 1, 1),
            'loggingConfiguration': {
                'level': 'ALL'|'ERROR'|'FATAL'|'OFF',
                'includeExecutionData': True|False,
                'destinations': [
                    {
                        'cloudWatchLogsLogGroup': {
                            'logGroupArn': 'string'
                        }
                    },
                ]
            },
            'tracingConfiguration': {
                'enabled': True|False
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **stateMachineArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the state machine.

          
        

        - **name** *(string) --* 

          The name of the state machine.

           

          A name must *not* contain:

           

           
          * white space 
           
          * brackets ``< > { } [ ]``   
           
          * wildcard characters ``? *``   
           
          * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
           
          * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
           

           

          To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

          
        

        - **status** *(string) --* 

          The current status of the state machine.

          
        

        - **definition** *(string) --* 

          The Amazon States Language definition of the state machine. See `Amazon States Language <https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html>`__ .

          
        

        - **roleArn** *(string) --* 

          The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. (The IAM role maintains security by granting Step Functions access to AWS resources.)

          
        

        - **type** *(string) --* 

          The ``type`` of the state machine (``STANDARD`` or ``EXPRESS`` ).

          
        

        - **creationDate** *(datetime) --* 

          The date the state machine is created.

          
        

        - **loggingConfiguration** *(dict) --* 

          The ``LoggingConfiguration`` data type is used to set CloudWatch Logs options.

          
          

          - **level** *(string) --* 

            Defines which category of execution history events are logged.

            
          

          - **includeExecutionData** *(boolean) --* 

            Determines whether execution data is included in your log. When set to ``false`` , data is excluded.

            
          

          - **destinations** *(list) --* 

            An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to ``OFF`` .

            
            

            - *(dict) --* 

              

              
              

              - **cloudWatchLogsLogGroup** *(dict) --* 

                An object describing a CloudWatch log group. For more information, see `AWS\:\:Logs\:\:LogGroup <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html>`__ in the AWS CloudFormation User Guide.

                
                

                - **logGroupArn** *(string) --* 

                  The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with ``:*``  

                  
            
          
        
      
        

        - **tracingConfiguration** *(dict) --* 

          Selects whether AWS X-Ray tracing is enabled.

          
          

          - **enabled** *(boolean) --* 

            When set to ``true`` , AWS X-Ray tracing is enabled.

            
      
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDoesNotExist`

    

  .. py:method:: describe_state_machine_for_execution(**kwargs)

    

    Describes the state machine associated with a specific execution.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

     

    This API action is not supported by ``EXPRESS`` state machines.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/DescribeStateMachineForExecution>`_    


    **Request Syntax** 
    ::

      response = client.describe_state_machine_for_execution(
          executionArn='string'
      )
    :type executionArn: string
    :param executionArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the execution you want state machine information for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stateMachineArn': 'string',
            'name': 'string',
            'definition': 'string',
            'roleArn': 'string',
            'updateDate': datetime(2015, 1, 1),
            'loggingConfiguration': {
                'level': 'ALL'|'ERROR'|'FATAL'|'OFF',
                'includeExecutionData': True|False,
                'destinations': [
                    {
                        'cloudWatchLogsLogGroup': {
                            'logGroupArn': 'string'
                        }
                    },
                ]
            },
            'tracingConfiguration': {
                'enabled': True|False
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **stateMachineArn** *(string) --* 

          The Amazon Resource Name (ARN) of the state machine associated with the execution.

          
        

        - **name** *(string) --* 

          The name of the state machine associated with the execution.

          
        

        - **definition** *(string) --* 

          The Amazon States Language definition of the state machine. See `Amazon States Language <https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html>`__ .

          
        

        - **roleArn** *(string) --* 

          The Amazon Resource Name (ARN) of the IAM role of the State Machine for the execution. 

          
        

        - **updateDate** *(datetime) --* 

          The date and time the state machine associated with an execution was updated. For a newly created state machine, this is the creation date.

          
        

        - **loggingConfiguration** *(dict) --* 

          The ``LoggingConfiguration`` data type is used to set CloudWatch Logs options.

          
          

          - **level** *(string) --* 

            Defines which category of execution history events are logged.

            
          

          - **includeExecutionData** *(boolean) --* 

            Determines whether execution data is included in your log. When set to ``false`` , data is excluded.

            
          

          - **destinations** *(list) --* 

            An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to ``OFF`` .

            
            

            - *(dict) --* 

              

              
              

              - **cloudWatchLogsLogGroup** *(dict) --* 

                An object describing a CloudWatch log group. For more information, see `AWS\:\:Logs\:\:LogGroup <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html>`__ in the AWS CloudFormation User Guide.

                
                

                - **logGroupArn** *(string) --* 

                  The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with ``:*``  

                  
            
          
        
      
        

        - **tracingConfiguration** *(dict) --* 

          Selects whether AWS X-Ray tracing is enabled.

          
          

          - **enabled** *(boolean) --* 

            When set to ``true`` , AWS X-Ray tracing is enabled.

            
      
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ExecutionDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_activity_task(**kwargs)

    

    Used by workers to retrieve a task (with the specified activity ARN) which has been scheduled for execution by a running state machine. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available (i.e. an execution of a task of this type is needed.) The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll returns a ``taskToken`` with a null string.

     

    .. warning::

       

      Workers should set their client side socket timeout to at least 65 seconds (5 seconds higher than the maximum time the service may hold the poll request).

       

      Polling with ``GetActivityTask`` can cause latency in some implementations. See `Avoid Latency When Polling for Activity Tasks <https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html>`__ in the Step Functions Developer Guide.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/GetActivityTask>`_    


    **Request Syntax** 
    ::

      response = client.get_activity_task(
          activityArn='string',
          workerName='string'
      )
    :type activityArn: string
    :param activityArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the activity to retrieve tasks from (assigned when you create the task using  CreateActivity .)

      

    
    :type workerName: string
    :param workerName: 

      You can provide an arbitrary name in order to identify the worker that the task is assigned to. This name is used when it is logged in the execution history.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'taskToken': 'string',
            'input': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **taskToken** *(string) --* 

          A token that identifies the scheduled task. This token must be copied and included in subsequent calls to  SendTaskHeartbeat ,  SendTaskSuccess or  SendTaskFailure in order to report the progress or completion of the task.

          
        

        - **input** *(string) --* 

          The string that contains the JSON input data for the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ActivityDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.ActivityWorkerLimitExceeded`

    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    

  .. py:method:: get_execution_history(**kwargs)

    

    Returns the history of the specified execution as a list of events. By default, the results are returned in ascending order of the ``timeStamp`` of the events. Use the ``reverseOrder`` parameter to get the latest events first.

     

    If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

     

    This API action is not supported by ``EXPRESS`` state machines.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/GetExecutionHistory>`_    


    **Request Syntax** 
    ::

      response = client.get_execution_history(
          executionArn='string',
          maxResults=123,
          reverseOrder=True|False,
          nextToken='string',
          includeExecutionData=True|False
      )
    :type executionArn: string
    :param executionArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the execution.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results that are returned per call. You can use ``nextToken`` to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.

       

      This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.

      

    
    :type reverseOrder: boolean
    :param reverseOrder: 

      Lists events in descending order of their ``timeStamp`` .

      

    
    :type nextToken: string
    :param nextToken: 

      If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

      

    
    :type includeExecutionData: boolean
    :param includeExecutionData: 

      You can select whether execution data (input or output of a history event) is returned. The default is ``true`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'events': [
                {
                    'timestamp': datetime(2015, 1, 1),
                    'type': 'ActivityFailed'|'ActivityScheduled'|'ActivityScheduleFailed'|'ActivityStarted'|'ActivitySucceeded'|'ActivityTimedOut'|'ChoiceStateEntered'|'ChoiceStateExited'|'ExecutionAborted'|'ExecutionFailed'|'ExecutionStarted'|'ExecutionSucceeded'|'ExecutionTimedOut'|'FailStateEntered'|'LambdaFunctionFailed'|'LambdaFunctionScheduled'|'LambdaFunctionScheduleFailed'|'LambdaFunctionStarted'|'LambdaFunctionStartFailed'|'LambdaFunctionSucceeded'|'LambdaFunctionTimedOut'|'MapIterationAborted'|'MapIterationFailed'|'MapIterationStarted'|'MapIterationSucceeded'|'MapStateAborted'|'MapStateEntered'|'MapStateExited'|'MapStateFailed'|'MapStateStarted'|'MapStateSucceeded'|'ParallelStateAborted'|'ParallelStateEntered'|'ParallelStateExited'|'ParallelStateFailed'|'ParallelStateStarted'|'ParallelStateSucceeded'|'PassStateEntered'|'PassStateExited'|'SucceedStateEntered'|'SucceedStateExited'|'TaskFailed'|'TaskScheduled'|'TaskStarted'|'TaskStartFailed'|'TaskStateAborted'|'TaskStateEntered'|'TaskStateExited'|'TaskSubmitFailed'|'TaskSubmitted'|'TaskSucceeded'|'TaskTimedOut'|'WaitStateAborted'|'WaitStateEntered'|'WaitStateExited',
                    'id': 123,
                    'previousEventId': 123,
                    'activityFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'activityScheduleFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'activityScheduledEventDetails': {
                        'resource': 'string',
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        },
                        'timeoutInSeconds': 123,
                        'heartbeatInSeconds': 123
                    },
                    'activityStartedEventDetails': {
                        'workerName': 'string'
                    },
                    'activitySucceededEventDetails': {
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'activityTimedOutEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskFailedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskScheduledEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'region': 'string',
                        'parameters': 'string',
                        'timeoutInSeconds': 123,
                        'heartbeatInSeconds': 123
                    },
                    'taskStartFailedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskStartedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string'
                    },
                    'taskSubmitFailedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskSubmittedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'taskSucceededEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'taskTimedOutEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'executionFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'executionStartedEventDetails': {
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        },
                        'roleArn': 'string'
                    },
                    'executionSucceededEventDetails': {
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'executionAbortedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'executionTimedOutEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'mapStateStartedEventDetails': {
                        'length': 123
                    },
                    'mapIterationStartedEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'mapIterationSucceededEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'mapIterationFailedEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'mapIterationAbortedEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'lambdaFunctionFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'lambdaFunctionScheduleFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'lambdaFunctionScheduledEventDetails': {
                        'resource': 'string',
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        },
                        'timeoutInSeconds': 123
                    },
                    'lambdaFunctionStartFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'lambdaFunctionSucceededEventDetails': {
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'lambdaFunctionTimedOutEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'stateEnteredEventDetails': {
                        'name': 'string',
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        }
                    },
                    'stateExitedEventDetails': {
                        'name': 'string',
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **events** *(list) --* 

          The list of events that occurred in the execution.

          
          

          - *(dict) --* 

            Contains details about the events of an execution.

            
            

            - **timestamp** *(datetime) --* 

              The date and time the event occurred.

              
            

            - **type** *(string) --* 

              The type of the event.

              
            

            - **id** *(integer) --* 

              The id of the event. Events are numbered sequentially, starting at one.

              
            

            - **previousEventId** *(integer) --* 

              The id of the previous event.

              
            

            - **activityFailedEventDetails** *(dict) --* 

              Contains details about an activity that failed during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **activityScheduleFailedEventDetails** *(dict) --* 

              Contains details about an activity schedule event that failed during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **activityScheduledEventDetails** *(dict) --* 

              Contains details about an activity scheduled during an execution.

              
              

              - **resource** *(string) --* 

                The Amazon Resource Name (ARN) of the scheduled activity.

                
              

              - **input** *(string) --* 

                The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about the input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
              

              - **timeoutInSeconds** *(integer) --* 

                The maximum allowed duration of the activity task.

                
              

              - **heartbeatInSeconds** *(integer) --* 

                The maximum allowed duration between two heartbeats for the activity task.

                
          
            

            - **activityStartedEventDetails** *(dict) --* 

              Contains details about the start of an activity during an execution.

              
              

              - **workerName** *(string) --* 

                The name of the worker that the task is assigned to. These names are provided by the workers when calling  GetActivityTask .

                
          
            

            - **activitySucceededEventDetails** *(dict) --* 

              Contains details about an activity that successfully terminated during an execution.

              
              

              - **output** *(string) --* 

                The JSON data output by the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **activityTimedOutEventDetails** *(dict) --* 

              Contains details about an activity timeout that occurred during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the timeout.

                
          
            

            - **taskFailedEventDetails** *(dict) --* 

              Contains details about the failure of a task.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **taskScheduledEventDetails** *(dict) --* 

              Contains details about a task that was scheduled.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **region** *(string) --* 

                The region of the scheduled task

                
              

              - **parameters** *(string) --* 

                The JSON data passed to the resource referenced in a task state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **timeoutInSeconds** *(integer) --* 

                The maximum allowed duration of the task.

                
              

              - **heartbeatInSeconds** *(integer) --* 

                The maximum allowed duration between two heartbeats for the task.

                
          
            

            - **taskStartFailedEventDetails** *(dict) --* 

              Contains details about a task that failed to start.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **taskStartedEventDetails** *(dict) --* 

              Contains details about a task that was started.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
          
            

            - **taskSubmitFailedEventDetails** *(dict) --* 

              Contains details about a task that where the submit failed.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **taskSubmittedEventDetails** *(dict) --* 

              Contains details about a submitted task.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **output** *(string) --* 

                The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **taskSucceededEventDetails** *(dict) --* 

              Contains details about a task that succeeded.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **output** *(string) --* 

                The full JSON response from a resource when a task has succeeded. This response becomes the output of the related task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **taskTimedOutEventDetails** *(dict) --* 

              Contains details about a task that timed out.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **executionFailedEventDetails** *(dict) --* 

              Contains details about an execution failure event.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **executionStartedEventDetails** *(dict) --* 

              Contains details about the start of the execution.

              
              

              - **input** *(string) --* 

                The JSON data input to the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about the input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
              

              - **roleArn** *(string) --* 

                The Amazon Resource Name (ARN) of the IAM role used for executing AWS Lambda tasks.

                
          
            

            - **executionSucceededEventDetails** *(dict) --* 

              Contains details about the successful termination of the execution.

              
              

              - **output** *(string) --* 

                The JSON data output by the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **executionAbortedEventDetails** *(dict) --* 

              Contains details about an abort of an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **executionTimedOutEventDetails** *(dict) --* 

              Contains details about the execution timeout that occurred during the execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the timeout.

                
          
            

            - **mapStateStartedEventDetails** *(dict) --* 

              Contains details about Map state that was started.

              
              

              - **length** *(integer) --* 

                The size of the array for Map state iterations.

                
          
            

            - **mapIterationStartedEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that was started.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **mapIterationSucceededEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that succeeded.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **mapIterationFailedEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that failed.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **mapIterationAbortedEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that was aborted.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **lambdaFunctionFailedEventDetails** *(dict) --* 

              Contains details about a lambda function that failed during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **lambdaFunctionScheduleFailedEventDetails** *(dict) --* 

              Contains details about a failed lambda function schedule event that occurred during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **lambdaFunctionScheduledEventDetails** *(dict) --* 

              Contains details about a lambda function scheduled during an execution.

              
              

              - **resource** *(string) --* 

                The Amazon Resource Name (ARN) of the scheduled lambda function.

                
              

              - **input** *(string) --* 

                The JSON data input to the lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
              

              - **timeoutInSeconds** *(integer) --* 

                The maximum allowed duration of the lambda function.

                
          
            

            - **lambdaFunctionStartFailedEventDetails** *(dict) --* 

              Contains details about a lambda function that failed to start during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **lambdaFunctionSucceededEventDetails** *(dict) --* 

              Contains details about a lambda function that terminated successfully during an execution.

              
              

              - **output** *(string) --* 

                The JSON data output by the lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **lambdaFunctionTimedOutEventDetails** *(dict) --* 

              Contains details about a lambda function timeout that occurred during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the timeout.

                
          
            

            - **stateEnteredEventDetails** *(dict) --* 

              Contains details about a state entered during an execution.

              
              

              - **name** *(string) --* 

                The name of the state.

                
              

              - **input** *(string) --* 

                The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about the input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **stateExitedEventDetails** *(dict) --* 

              Contains details about an exit from a state during an execution.

              
              

              - **name** *(string) --* 

                The name of the state.

                 

                A name must *not* contain:

                 

                 
                * white space 
                 
                * brackets ``< > { } [ ]``   
                 
                * wildcard characters ``? *``   
                 
                * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
                 
                * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
                 

                 

                To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

                
              

              - **output** *(string) --* 

                The JSON output data of the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
        
      
        

        - **nextToken** *(string) --* 

          If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ExecutionDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.InvalidToken`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_activities(**kwargs)

    

    Lists the existing activities.

     

    If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/ListActivities>`_    


    **Request Syntax** 
    ::

      response = client.list_activities(
          maxResults=123,
          nextToken='string'
      )
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results that are returned per call. You can use ``nextToken`` to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.

       

      This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.

      

    
    :type nextToken: string
    :param nextToken: 

      If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'activities': [
                {
                    'activityArn': 'string',
                    'name': 'string',
                    'creationDate': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **activities** *(list) --* 

          The list of activities.

          
          

          - *(dict) --* 

            Contains details about an activity.

            
            

            - **activityArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the activity.

              
            

            - **name** *(string) --* 

              The name of the activity.

               

              A name must *not* contain:

               

               
              * white space 
               
              * brackets ``< > { } [ ]``   
               
              * wildcard characters ``? *``   
               
              * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
               
              * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
               

               

              To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

              
            

            - **creationDate** *(datetime) --* 

              The date the activity is created.

              
        
      
        

        - **nextToken** *(string) --* 

          If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidToken`

    

  .. py:method:: list_executions(**kwargs)

    

    Lists the executions of a state machine that meet the filtering criteria. Results are sorted by time, with the most recent execution first.

     

    If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

     

    This API action is not supported by ``EXPRESS`` state machines.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/ListExecutions>`_    


    **Request Syntax** 
    ::

      response = client.list_executions(
          stateMachineArn='string',
          statusFilter='RUNNING'|'SUCCEEDED'|'FAILED'|'TIMED_OUT'|'ABORTED',
          maxResults=123,
          nextToken='string'
      )
    :type stateMachineArn: string
    :param stateMachineArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the state machine whose executions is listed.

      

    
    :type statusFilter: string
    :param statusFilter: 

      If specified, only list the executions whose current execution status matches the given filter.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results that are returned per call. You can use ``nextToken`` to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.

       

      This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.

      

    
    :type nextToken: string
    :param nextToken: 

      If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'executions': [
                {
                    'executionArn': 'string',
                    'stateMachineArn': 'string',
                    'name': 'string',
                    'status': 'RUNNING'|'SUCCEEDED'|'FAILED'|'TIMED_OUT'|'ABORTED',
                    'startDate': datetime(2015, 1, 1),
                    'stopDate': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **executions** *(list) --* 

          The list of matching executions.

          
          

          - *(dict) --* 

            Contains details about an execution.

            
            

            - **executionArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the execution.

              
            

            - **stateMachineArn** *(string) --* 

              The Amazon Resource Name (ARN) of the executed state machine.

              
            

            - **name** *(string) --* 

              The name of the execution.

               

              A name must *not* contain:

               

               
              * white space 
               
              * brackets ``< > { } [ ]``   
               
              * wildcard characters ``? *``   
               
              * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
               
              * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
               

               

              To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

              
            

            - **status** *(string) --* 

              The current status of the execution.

              
            

            - **startDate** *(datetime) --* 

              The date the execution started.

              
            

            - **stopDate** *(datetime) --* 

              If the execution already ended, the date the execution stopped.

              
        
      
        

        - **nextToken** *(string) --* 

          If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.InvalidToken`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineTypeNotSupported`

    

  .. py:method:: list_state_machines(**kwargs)

    

    Lists the existing state machines.

     

    If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

     

    .. note::

       

      This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/ListStateMachines>`_    


    **Request Syntax** 
    ::

      response = client.list_state_machines(
          maxResults=123,
          nextToken='string'
      )
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results that are returned per call. You can use ``nextToken`` to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.

       

      This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.

      

    
    :type nextToken: string
    :param nextToken: 

      If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stateMachines': [
                {
                    'stateMachineArn': 'string',
                    'name': 'string',
                    'type': 'STANDARD'|'EXPRESS',
                    'creationDate': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **stateMachines** *(list) --* 
          

          - *(dict) --* 

            Contains details about the state machine.

            
            

            - **stateMachineArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the state machine.

              
            

            - **name** *(string) --* 

              The name of the state machine.

               

              A name must *not* contain:

               

               
              * white space 
               
              * brackets ``< > { } [ ]``   
               
              * wildcard characters ``? *``   
               
              * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
               
              * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
               

               

              To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

              
            

            - **type** *(string) --* 

              

              
            

            - **creationDate** *(datetime) --* 

              The date the state machine is created.

              
        
      
        

        - **nextToken** *(string) --* 

          If ``nextToken`` is returned, there are more results available. The value of ``nextToken`` is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an *HTTP 400 InvalidToken* error.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidToken`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    List tags for a given resource.

     

    Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the Step Functions state machine or activity.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': [
                {
                    'key': 'string',
                    'value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(list) --* 

          An array of tags associated with the resource.

          
          

          - *(dict) --* 

            Tags are key-value pairs that can be associated with Step Functions state machines and activities.

             

            An array of key-value pairs. For more information, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ in the *AWS Billing and Cost Management User Guide* , and `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`__ .

             

            Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

            
            

            - **key** *(string) --* 

              The key of a tag.

              
            

            - **value** *(string) --* 

              The value of a tag.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.ResourceNotFound`

    

  .. py:method:: send_task_failure(**kwargs)

    

    Used by activity workers and task states using the `callback <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token>`__ pattern to report that the task identified by the ``taskToken`` failed.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/SendTaskFailure>`_    


    **Request Syntax** 
    ::

      response = client.send_task_failure(
          taskToken='string',
          error='string',
          cause='string'
      )
    :type taskToken: string
    :param taskToken: **[REQUIRED]** 

      The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the `context object <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html>`__ when a workflow enters a task state. See  GetActivityTaskOutput$taskToken .

      

    
    :type error: string
    :param error: 

      The error code of the failure.

      

    
    :type cause: string
    :param cause: 

      A more detailed explanation of the cause of the failure.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.TaskDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidToken`

    
    *     :py:class:`SFN.Client.exceptions.TaskTimedOut`

    

  .. py:method:: send_task_heartbeat(**kwargs)

    

    Used by activity workers and task states using the `callback <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token>`__ pattern to report to Step Functions that the task represented by the specified ``taskToken`` is still making progress. This action resets the ``Heartbeat`` clock. The ``Heartbeat`` threshold is specified in the state machine's Amazon States Language definition (``HeartbeatSeconds`` ). This action does not in itself create an event in the execution history. However, if the task times out, the execution history contains an ``ActivityTimedOut`` entry for activities, or a ``TaskTimedOut`` entry for for tasks using the `job run <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync>`__ or `callback <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token>`__ pattern.

     

    .. note::

       

      The ``Timeout`` of a task, defined in the state machine's Amazon States Language definition, is its maximum allowed duration, regardless of the number of  SendTaskHeartbeat requests received. Use ``HeartbeatSeconds`` to configure the timeout interval for heartbeats.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/SendTaskHeartbeat>`_    


    **Request Syntax** 
    ::

      response = client.send_task_heartbeat(
          taskToken='string'
      )
    :type taskToken: string
    :param taskToken: **[REQUIRED]** 

      The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the `context object <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html>`__ when a workflow enters a task state. See  GetActivityTaskOutput$taskToken .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.TaskDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidToken`

    
    *     :py:class:`SFN.Client.exceptions.TaskTimedOut`

    

  .. py:method:: send_task_success(**kwargs)

    

    Used by activity workers and task states using the `callback <https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token>`__ pattern to report that the task identified by the ``taskToken`` completed successfully.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/SendTaskSuccess>`_    


    **Request Syntax** 
    ::

      response = client.send_task_success(
          taskToken='string',
          output='string'
      )
    :type taskToken: string
    :param taskToken: **[REQUIRED]** 

      The token that represents this task. Task tokens are generated by Step Functions when tasks are assigned to a worker, or in the `context object <https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html>`__ when a workflow enters a task state. See  GetActivityTaskOutput$taskToken .

      

    
    :type output: string
    :param output: **[REQUIRED]** 

      The JSON output of the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.TaskDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidOutput`

    
    *     :py:class:`SFN.Client.exceptions.InvalidToken`

    
    *     :py:class:`SFN.Client.exceptions.TaskTimedOut`

    

  .. py:method:: start_execution(**kwargs)

    

    Starts a state machine execution.

     

    .. note::

       

       ``StartExecution`` is idempotent. If ``StartExecution`` is called with the same name and input as a running execution, the call will succeed and return the same response as the original request. If the execution is closed or if the input is different, it will return a 400 ``ExecutionAlreadyExists`` error. Names can be reused after 90 days. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/StartExecution>`_    


    **Request Syntax** 
    ::

      response = client.start_execution(
          stateMachineArn='string',
          name='string',
          input='string',
          traceHeader='string'
      )
    :type stateMachineArn: string
    :param stateMachineArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the state machine to execute.

      

    
    :type name: string
    :param name: 

      The name of the execution. This name must be unique for your AWS account, region, and state machine for 90 days. For more information, see `Limits Related to State Machine Executions <https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions>`__ in the *AWS Step Functions Developer Guide* .

       

      A name must *not* contain:

       

       
      * white space 
       
      * brackets ``< > { } [ ]``   
       
      * wildcard characters ``? *``   
       
      * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
       
      * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
       

       

      To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

      

    
    :type input: string
    :param input: 

      The string that contains the JSON input data for the execution, for example:

       

       ``"input": "{\"first_name\" : \"test\"}"``  

       

      .. note::

         

        If you don't include any JSON input data, you still must include the two braces, for example: ``"input": "{}"``  

         

       

      Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

      

    
    :type traceHeader: string
    :param traceHeader: 

      Passes the AWS X-Ray trace header. The trace header can also be passed in the request payload.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'executionArn': 'string',
            'startDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **executionArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the execution.

          
        

        - **startDate** *(datetime) --* 

          The date the execution is started.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ExecutionLimitExceeded`

    
    *     :py:class:`SFN.Client.exceptions.ExecutionAlreadyExists`

    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.InvalidExecutionInput`

    
    *     :py:class:`SFN.Client.exceptions.InvalidName`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDeleting`

    

  .. py:method:: start_sync_execution(**kwargs)

    

    Starts a Synchronous Express state machine execution.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/StartSyncExecution>`_    


    **Request Syntax** 
    ::

      response = client.start_sync_execution(
          stateMachineArn='string',
          name='string',
          input='string',
          traceHeader='string'
      )
    :type stateMachineArn: string
    :param stateMachineArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the state machine to execute.

      

    
    :type name: string
    :param name: 

      The name of the execution.

      

    
    :type input: string
    :param input: 

      The string that contains the JSON input data for the execution, for example:

       

       ``"input": "{\"first_name\" : \"test\"}"``  

       

      .. note::

         

        If you don't include any JSON input data, you still must include the two braces, for example: ``"input": "{}"``  

         

       

      Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

      

    
    :type traceHeader: string
    :param traceHeader: 

      Passes the AWS X-Ray trace header. The trace header can also be passed in the request payload.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'executionArn': 'string',
            'stateMachineArn': 'string',
            'name': 'string',
            'startDate': datetime(2015, 1, 1),
            'stopDate': datetime(2015, 1, 1),
            'status': 'SUCCEEDED'|'FAILED'|'TIMED_OUT',
            'error': 'string',
            'cause': 'string',
            'input': 'string',
            'inputDetails': {
                'included': True|False
            },
            'output': 'string',
            'outputDetails': {
                'included': True|False
            },
            'traceHeader': 'string',
            'billingDetails': {
                'billedMemoryUsedInMB': 123,
                'billedDurationInMilliseconds': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **executionArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the execution.

          
        

        - **stateMachineArn** *(string) --* 

          The Amazon Resource Name (ARN) that identifies the state machine.

          
        

        - **name** *(string) --* 

          The name of the execution.

          
        

        - **startDate** *(datetime) --* 

          The date the execution is started.

          
        

        - **stopDate** *(datetime) --* 

          If the execution has already ended, the date the execution stopped.

          
        

        - **status** *(string) --* 

          The current status of the execution.

          
        

        - **error** *(string) --* 

          The error code of the failure.

          
        

        - **cause** *(string) --* 

          A more detailed explanation of the cause of the failure.

          
        

        - **input** *(string) --* 

          The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

          
        

        - **inputDetails** *(dict) --* 

          Provides details about execution input or output.

          
          

          - **included** *(boolean) --* 

            Indicates whether input or output was included in the response. Always ``true`` for API calls. 

            
      
        

        - **output** *(string) --* 

          The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

           

          .. note::

             

            This field is set only if the execution succeeds. If the execution fails, this field is null.

             

          
        

        - **outputDetails** *(dict) --* 

          Provides details about execution input or output.

          
          

          - **included** *(boolean) --* 

            Indicates whether input or output was included in the response. Always ``true`` for API calls. 

            
      
        

        - **traceHeader** *(string) --* 

          The AWS X-Ray trace header that was passed to the execution.

          
        

        - **billingDetails** *(dict) --* 

          An object that describes workflow billing details, including billed duration and memory use.

          
          

          - **billedMemoryUsedInMB** *(integer) --* 

            Billed memory consumption of your workflow, in MB.

            
          

          - **billedDurationInMilliseconds** *(integer) --* 

            Billed duration of your workflow, in milliseconds.

            
      
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.InvalidExecutionInput`

    
    *     :py:class:`SFN.Client.exceptions.InvalidName`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDeleting`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineTypeNotSupported`

    

  .. py:method:: stop_execution(**kwargs)

    

    Stops an execution.

     

    This API action is not supported by ``EXPRESS`` state machines.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/StopExecution>`_    


    **Request Syntax** 
    ::

      response = client.stop_execution(
          executionArn='string',
          error='string',
          cause='string'
      )
    :type executionArn: string
    :param executionArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the execution to stop.

      

    
    :type error: string
    :param error: 

      The error code of the failure.

      

    
    :type cause: string
    :param cause: 

      A more detailed explanation of the cause of the failure.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stopDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **stopDate** *(datetime) --* 

          The date the execution is stopped.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.ExecutionDoesNotExist`

    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    

  .. py:method:: tag_resource(**kwargs)

    

    Add a tag to a Step Functions resource.

     

    An array of key-value pairs. For more information, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ in the *AWS Billing and Cost Management User Guide* , and `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`__ .

     

    Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the Step Functions state machine or activity.

      

    
    :type tags: list
    :param tags: **[REQUIRED]** 

      The list of tags to add to a resource.

       

      Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

      

    
      - *(dict) --* 

        Tags are key-value pairs that can be associated with Step Functions state machines and activities.

         

        An array of key-value pairs. For more information, see `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html>`__ in the *AWS Billing and Cost Management User Guide* , and `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`__ .

         

        Tags may only contain Unicode letters, digits, white space, or these symbols: ``_ . : / = + - @`` .

        

      
        - **key** *(string) --* 

          The key of a tag.

          

        
        - **value** *(string) --* 

          The value of a tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.ResourceNotFound`

    
    *     :py:class:`SFN.Client.exceptions.TooManyTags`

    

  .. py:method:: untag_resource(**kwargs)

    

    Remove a tag from a Step Functions resource

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the Step Functions state machine or activity.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      The list of tags to remove from the resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.ResourceNotFound`

    

  .. py:method:: update_state_machine(**kwargs)

    

    Updates an existing state machine by modifying its ``definition`` , ``roleArn`` , or ``loggingConfiguration`` . Running executions will continue to use the previous ``definition`` and ``roleArn`` . You must include at least one of ``definition`` or ``roleArn`` or you will receive a ``MissingRequiredParameter`` error.

     

    .. note::

       

      All ``StartExecution`` calls within a few seconds will use the updated ``definition`` and ``roleArn`` . Executions started immediately after calling ``UpdateStateMachine`` may use the previous state machine ``definition`` and ``roleArn`` . 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/UpdateStateMachine>`_    


    **Request Syntax** 
    ::

      response = client.update_state_machine(
          stateMachineArn='string',
          definition='string',
          roleArn='string',
          loggingConfiguration={
              'level': 'ALL'|'ERROR'|'FATAL'|'OFF',
              'includeExecutionData': True|False,
              'destinations': [
                  {
                      'cloudWatchLogsLogGroup': {
                          'logGroupArn': 'string'
                      }
                  },
              ]
          },
          tracingConfiguration={
              'enabled': True|False
          }
      )
    :type stateMachineArn: string
    :param stateMachineArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the state machine.

      

    
    :type definition: string
    :param definition: 

      The Amazon States Language definition of the state machine. See `Amazon States Language <https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html>`__ .

      

    
    :type roleArn: string
    :param roleArn: 

      The Amazon Resource Name (ARN) of the IAM role of the state machine.

      

    
    :type loggingConfiguration: dict
    :param loggingConfiguration: 

      The ``LoggingConfiguration`` data type is used to set CloudWatch Logs options.

      

    
      - **level** *(string) --* 

        Defines which category of execution history events are logged.

        

      
      - **includeExecutionData** *(boolean) --* 

        Determines whether execution data is included in your log. When set to ``false`` , data is excluded.

        

      
      - **destinations** *(list) --* 

        An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to ``OFF`` .

        

      
        - *(dict) --* 

          

          

        
          - **cloudWatchLogsLogGroup** *(dict) --* 

            An object describing a CloudWatch log group. For more information, see `AWS\:\:Logs\:\:LogGroup <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html>`__ in the AWS CloudFormation User Guide.

            

          
            - **logGroupArn** *(string) --* 

              The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with ``:*``  

              

            
          
        
    
    
    :type tracingConfiguration: dict
    :param tracingConfiguration: 

      Selects whether AWS X-Ray tracing is enabled.

      

    
      - **enabled** *(boolean) --* 

        When set to ``true`` , AWS X-Ray tracing is enabled.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'updateDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **updateDate** *(datetime) --* 

          The date and time the state machine was updated.

          
    
    **Exceptions** 
    
    *     :py:class:`SFN.Client.exceptions.InvalidArn`

    
    *     :py:class:`SFN.Client.exceptions.InvalidDefinition`

    
    *     :py:class:`SFN.Client.exceptions.InvalidLoggingConfiguration`

    
    *     :py:class:`SFN.Client.exceptions.InvalidTracingConfiguration`

    
    *     :py:class:`SFN.Client.exceptions.MissingRequiredParameter`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDeleting`

    
    *     :py:class:`SFN.Client.exceptions.StateMachineDoesNotExist`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`SFN.Paginator.GetExecutionHistory`


* :py:class:`SFN.Paginator.ListActivities`


* :py:class:`SFN.Paginator.ListExecutions`


* :py:class:`SFN.Paginator.ListStateMachines`



.. py:class:: SFN.Paginator.GetExecutionHistory

  ::

    
    paginator = client.get_paginator('get_execution_history')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`SFN.Client.get_execution_history`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/GetExecutionHistory>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          executionArn='string',
          reverseOrder=True|False,
          includeExecutionData=True|False,
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type executionArn: string
    :param executionArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the execution.

      

    
    :type reverseOrder: boolean
    :param reverseOrder: 

      Lists events in descending order of their ``timeStamp`` .

      

    
    :type includeExecutionData: boolean
    :param includeExecutionData: 

      You can select whether execution data (input or output of a history event) is returned. The default is ``true`` .

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'events': [
                {
                    'timestamp': datetime(2015, 1, 1),
                    'type': 'ActivityFailed'|'ActivityScheduled'|'ActivityScheduleFailed'|'ActivityStarted'|'ActivitySucceeded'|'ActivityTimedOut'|'ChoiceStateEntered'|'ChoiceStateExited'|'ExecutionAborted'|'ExecutionFailed'|'ExecutionStarted'|'ExecutionSucceeded'|'ExecutionTimedOut'|'FailStateEntered'|'LambdaFunctionFailed'|'LambdaFunctionScheduled'|'LambdaFunctionScheduleFailed'|'LambdaFunctionStarted'|'LambdaFunctionStartFailed'|'LambdaFunctionSucceeded'|'LambdaFunctionTimedOut'|'MapIterationAborted'|'MapIterationFailed'|'MapIterationStarted'|'MapIterationSucceeded'|'MapStateAborted'|'MapStateEntered'|'MapStateExited'|'MapStateFailed'|'MapStateStarted'|'MapStateSucceeded'|'ParallelStateAborted'|'ParallelStateEntered'|'ParallelStateExited'|'ParallelStateFailed'|'ParallelStateStarted'|'ParallelStateSucceeded'|'PassStateEntered'|'PassStateExited'|'SucceedStateEntered'|'SucceedStateExited'|'TaskFailed'|'TaskScheduled'|'TaskStarted'|'TaskStartFailed'|'TaskStateAborted'|'TaskStateEntered'|'TaskStateExited'|'TaskSubmitFailed'|'TaskSubmitted'|'TaskSucceeded'|'TaskTimedOut'|'WaitStateAborted'|'WaitStateEntered'|'WaitStateExited',
                    'id': 123,
                    'previousEventId': 123,
                    'activityFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'activityScheduleFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'activityScheduledEventDetails': {
                        'resource': 'string',
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        },
                        'timeoutInSeconds': 123,
                        'heartbeatInSeconds': 123
                    },
                    'activityStartedEventDetails': {
                        'workerName': 'string'
                    },
                    'activitySucceededEventDetails': {
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'activityTimedOutEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskFailedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskScheduledEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'region': 'string',
                        'parameters': 'string',
                        'timeoutInSeconds': 123,
                        'heartbeatInSeconds': 123
                    },
                    'taskStartFailedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskStartedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string'
                    },
                    'taskSubmitFailedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'taskSubmittedEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'taskSucceededEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'taskTimedOutEventDetails': {
                        'resourceType': 'string',
                        'resource': 'string',
                        'error': 'string',
                        'cause': 'string'
                    },
                    'executionFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'executionStartedEventDetails': {
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        },
                        'roleArn': 'string'
                    },
                    'executionSucceededEventDetails': {
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'executionAbortedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'executionTimedOutEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'mapStateStartedEventDetails': {
                        'length': 123
                    },
                    'mapIterationStartedEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'mapIterationSucceededEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'mapIterationFailedEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'mapIterationAbortedEventDetails': {
                        'name': 'string',
                        'index': 123
                    },
                    'lambdaFunctionFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'lambdaFunctionScheduleFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'lambdaFunctionScheduledEventDetails': {
                        'resource': 'string',
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        },
                        'timeoutInSeconds': 123
                    },
                    'lambdaFunctionStartFailedEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'lambdaFunctionSucceededEventDetails': {
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    },
                    'lambdaFunctionTimedOutEventDetails': {
                        'error': 'string',
                        'cause': 'string'
                    },
                    'stateEnteredEventDetails': {
                        'name': 'string',
                        'input': 'string',
                        'inputDetails': {
                            'truncated': True|False
                        }
                    },
                    'stateExitedEventDetails': {
                        'name': 'string',
                        'output': 'string',
                        'outputDetails': {
                            'truncated': True|False
                        }
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **events** *(list) --* 

          The list of events that occurred in the execution.

          
          

          - *(dict) --* 

            Contains details about the events of an execution.

            
            

            - **timestamp** *(datetime) --* 

              The date and time the event occurred.

              
            

            - **type** *(string) --* 

              The type of the event.

              
            

            - **id** *(integer) --* 

              The id of the event. Events are numbered sequentially, starting at one.

              
            

            - **previousEventId** *(integer) --* 

              The id of the previous event.

              
            

            - **activityFailedEventDetails** *(dict) --* 

              Contains details about an activity that failed during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **activityScheduleFailedEventDetails** *(dict) --* 

              Contains details about an activity schedule event that failed during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **activityScheduledEventDetails** *(dict) --* 

              Contains details about an activity scheduled during an execution.

              
              

              - **resource** *(string) --* 

                The Amazon Resource Name (ARN) of the scheduled activity.

                
              

              - **input** *(string) --* 

                The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about the input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
              

              - **timeoutInSeconds** *(integer) --* 

                The maximum allowed duration of the activity task.

                
              

              - **heartbeatInSeconds** *(integer) --* 

                The maximum allowed duration between two heartbeats for the activity task.

                
          
            

            - **activityStartedEventDetails** *(dict) --* 

              Contains details about the start of an activity during an execution.

              
              

              - **workerName** *(string) --* 

                The name of the worker that the task is assigned to. These names are provided by the workers when calling  GetActivityTask .

                
          
            

            - **activitySucceededEventDetails** *(dict) --* 

              Contains details about an activity that successfully terminated during an execution.

              
              

              - **output** *(string) --* 

                The JSON data output by the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **activityTimedOutEventDetails** *(dict) --* 

              Contains details about an activity timeout that occurred during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the timeout.

                
          
            

            - **taskFailedEventDetails** *(dict) --* 

              Contains details about the failure of a task.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **taskScheduledEventDetails** *(dict) --* 

              Contains details about a task that was scheduled.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **region** *(string) --* 

                The region of the scheduled task

                
              

              - **parameters** *(string) --* 

                The JSON data passed to the resource referenced in a task state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **timeoutInSeconds** *(integer) --* 

                The maximum allowed duration of the task.

                
              

              - **heartbeatInSeconds** *(integer) --* 

                The maximum allowed duration between two heartbeats for the task.

                
          
            

            - **taskStartFailedEventDetails** *(dict) --* 

              Contains details about a task that failed to start.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **taskStartedEventDetails** *(dict) --* 

              Contains details about a task that was started.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
          
            

            - **taskSubmitFailedEventDetails** *(dict) --* 

              Contains details about a task that where the submit failed.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **taskSubmittedEventDetails** *(dict) --* 

              Contains details about a submitted task.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **output** *(string) --* 

                The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **taskSucceededEventDetails** *(dict) --* 

              Contains details about a task that succeeded.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **output** *(string) --* 

                The full JSON response from a resource when a task has succeeded. This response becomes the output of the related task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **taskTimedOutEventDetails** *(dict) --* 

              Contains details about a task that timed out.

              
              

              - **resourceType** *(string) --* 

                The action of the resource called by a task state.

                
              

              - **resource** *(string) --* 

                The service name of the resource in a task state.

                
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **executionFailedEventDetails** *(dict) --* 

              Contains details about an execution failure event.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **executionStartedEventDetails** *(dict) --* 

              Contains details about the start of the execution.

              
              

              - **input** *(string) --* 

                The JSON data input to the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about the input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
              

              - **roleArn** *(string) --* 

                The Amazon Resource Name (ARN) of the IAM role used for executing AWS Lambda tasks.

                
          
            

            - **executionSucceededEventDetails** *(dict) --* 

              Contains details about the successful termination of the execution.

              
              

              - **output** *(string) --* 

                The JSON data output by the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **executionAbortedEventDetails** *(dict) --* 

              Contains details about an abort of an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **executionTimedOutEventDetails** *(dict) --* 

              Contains details about the execution timeout that occurred during the execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the timeout.

                
          
            

            - **mapStateStartedEventDetails** *(dict) --* 

              Contains details about Map state that was started.

              
              

              - **length** *(integer) --* 

                The size of the array for Map state iterations.

                
          
            

            - **mapIterationStartedEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that was started.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **mapIterationSucceededEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that succeeded.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **mapIterationFailedEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that failed.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **mapIterationAbortedEventDetails** *(dict) --* 

              Contains details about an iteration of a Map state that was aborted.

              
              

              - **name** *(string) --* 

                The name of the iteration’s parent Map state.

                
              

              - **index** *(integer) --* 

                The index of the array belonging to the Map state iteration.

                
          
            

            - **lambdaFunctionFailedEventDetails** *(dict) --* 

              Contains details about a lambda function that failed during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **lambdaFunctionScheduleFailedEventDetails** *(dict) --* 

              Contains details about a failed lambda function schedule event that occurred during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **lambdaFunctionScheduledEventDetails** *(dict) --* 

              Contains details about a lambda function scheduled during an execution.

              
              

              - **resource** *(string) --* 

                The Amazon Resource Name (ARN) of the scheduled lambda function.

                
              

              - **input** *(string) --* 

                The JSON data input to the lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
              

              - **timeoutInSeconds** *(integer) --* 

                The maximum allowed duration of the lambda function.

                
          
            

            - **lambdaFunctionStartFailedEventDetails** *(dict) --* 

              Contains details about a lambda function that failed to start during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the failure.

                
          
            

            - **lambdaFunctionSucceededEventDetails** *(dict) --* 

              Contains details about a lambda function that terminated successfully during an execution.

              
              

              - **output** *(string) --* 

                The JSON data output by the lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **lambdaFunctionTimedOutEventDetails** *(dict) --* 

              Contains details about a lambda function timeout that occurred during an execution.

              
              

              - **error** *(string) --* 

                The error code of the failure.

                
              

              - **cause** *(string) --* 

                A more detailed explanation of the cause of the timeout.

                
          
            

            - **stateEnteredEventDetails** *(dict) --* 

              Contains details about a state entered during an execution.

              
              

              - **name** *(string) --* 

                The name of the state.

                
              

              - **input** *(string) --* 

                The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **inputDetails** *(dict) --* 

                Contains details about the input for an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
            

            - **stateExitedEventDetails** *(dict) --* 

              Contains details about an exit from a state during an execution.

              
              

              - **name** *(string) --* 

                The name of the state.

                 

                A name must *not* contain:

                 

                 
                * white space 
                 
                * brackets ``< > { } [ ]``   
                 
                * wildcard characters ``? *``   
                 
                * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
                 
                * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
                 

                 

                To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

                
              

              - **output** *(string) --* 

                The JSON output data of the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.

                
              

              - **outputDetails** *(dict) --* 

                Contains details about the output of an execution history event.

                
                

                - **truncated** *(boolean) --* 

                  Indicates whether input or output was truncated in the response. Always ``false`` for API calls.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: SFN.Paginator.ListActivities

  ::

    
    paginator = client.get_paginator('list_activities')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`SFN.Client.list_activities`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/ListActivities>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'activities': [
                {
                    'activityArn': 'string',
                    'name': 'string',
                    'creationDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **activities** *(list) --* 

          The list of activities.

          
          

          - *(dict) --* 

            Contains details about an activity.

            
            

            - **activityArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the activity.

              
            

            - **name** *(string) --* 

              The name of the activity.

               

              A name must *not* contain:

               

               
              * white space 
               
              * brackets ``< > { } [ ]``   
               
              * wildcard characters ``? *``   
               
              * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
               
              * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
               

               

              To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

              
            

            - **creationDate** *(datetime) --* 

              The date the activity is created.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: SFN.Paginator.ListExecutions

  ::

    
    paginator = client.get_paginator('list_executions')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`SFN.Client.list_executions`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/ListExecutions>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          stateMachineArn='string',
          statusFilter='RUNNING'|'SUCCEEDED'|'FAILED'|'TIMED_OUT'|'ABORTED',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type stateMachineArn: string
    :param stateMachineArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the state machine whose executions is listed.

      

    
    :type statusFilter: string
    :param statusFilter: 

      If specified, only list the executions whose current execution status matches the given filter.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'executions': [
                {
                    'executionArn': 'string',
                    'stateMachineArn': 'string',
                    'name': 'string',
                    'status': 'RUNNING'|'SUCCEEDED'|'FAILED'|'TIMED_OUT'|'ABORTED',
                    'startDate': datetime(2015, 1, 1),
                    'stopDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **executions** *(list) --* 

          The list of matching executions.

          
          

          - *(dict) --* 

            Contains details about an execution.

            
            

            - **executionArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the execution.

              
            

            - **stateMachineArn** *(string) --* 

              The Amazon Resource Name (ARN) of the executed state machine.

              
            

            - **name** *(string) --* 

              The name of the execution.

               

              A name must *not* contain:

               

               
              * white space 
               
              * brackets ``< > { } [ ]``   
               
              * wildcard characters ``? *``   
               
              * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
               
              * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
               

               

              To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

              
            

            - **status** *(string) --* 

              The current status of the execution.

              
            

            - **startDate** *(datetime) --* 

              The date the execution started.

              
            

            - **stopDate** *(datetime) --* 

              If the execution already ended, the date the execution stopped.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: SFN.Paginator.ListStateMachines

  ::

    
    paginator = client.get_paginator('list_state_machines')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`SFN.Client.list_state_machines`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23/ListStateMachines>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stateMachines': [
                {
                    'stateMachineArn': 'string',
                    'name': 'string',
                    'type': 'STANDARD'|'EXPRESS',
                    'creationDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **stateMachines** *(list) --* 
          

          - *(dict) --* 

            Contains details about the state machine.

            
            

            - **stateMachineArn** *(string) --* 

              The Amazon Resource Name (ARN) that identifies the state machine.

              
            

            - **name** *(string) --* 

              The name of the state machine.

               

              A name must *not* contain:

               

               
              * white space 
               
              * brackets ``< > { } [ ]``   
               
              * wildcard characters ``? *``   
               
              * special characters ``" # % \ ^ | ~ ` $ & , ; : /``   
               
              * control characters (``U+0000-001F`` , ``U+007F-009F`` ) 
               

               

              To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

              
            

            - **type** *(string) --* 

              

              
            

            - **creationDate** *(datetime) --* 

              The date the state machine is created.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    