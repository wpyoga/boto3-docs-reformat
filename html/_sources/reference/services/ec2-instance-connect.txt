

******************
EC2InstanceConnect
******************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: EC2InstanceConnect.Client

  A low-level client representing AWS EC2 Instance Connect
  

  Amazon EC2 Instance Connect enables system administrators to publish one-time use SSH public keys to EC2, providing users a simple and secure way to connect to their instances.

  ::

    
    import boto3
    
    client = boto3.client('ec2-instance-connect')

  
  These are the available methods:
  
  *   :py:meth:`~EC2InstanceConnect.Client.can_paginate`

  
  *   :py:meth:`~EC2InstanceConnect.Client.generate_presigned_url`

  
  *   :py:meth:`~EC2InstanceConnect.Client.get_paginator`

  
  *   :py:meth:`~EC2InstanceConnect.Client.get_waiter`

  
  *   :py:meth:`~EC2InstanceConnect.Client.send_serial_console_ssh_public_key`

  
  *   :py:meth:`~EC2InstanceConnect.Client.send_ssh_public_key`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: send_serial_console_ssh_public_key(**kwargs)

    

    Pushes an SSH public key to the specified EC2 instance. The key remains for 60 seconds, which gives you 60 seconds to establish a serial console connection to the instance using SSH. For more information, see `EC2 Serial Console <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-serial-console.html>`__ in the *Amazon EC2 User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ec2-instance-connect-2018-04-02/SendSerialConsoleSSHPublicKey>`_    


    **Request Syntax** 
    ::

      response = client.send_serial_console_ssh_public_key(
          InstanceId='string',
          SerialPort=123,
          SSHPublicKey='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The ID of the EC2 instance.

      

    
    :type SerialPort: integer
    :param SerialPort: 

      The serial port of the EC2 instance. Currently only port 0 is supported.

       

      Default: 0

      

    
    :type SSHPublicKey: string
    :param SSHPublicKey: **[REQUIRED]** 

      The public key material. To use the public key, you must have the matching private key. For information about the supported key formats and lengths, see `Requirements for key pairs <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws>`__ in the *Amazon EC2 User Guide* .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RequestId': 'string',
            'Success': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RequestId** *(string) --* 

          The ID of the request. Please provide this ID when contacting AWS Support for assistance.

          
        

        - **Success** *(boolean) --* 

          Is true if the request succeeds and an error otherwise.

          
    
    **Exceptions** 
    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.AuthException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.SerialConsoleAccessDisabledException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.InvalidArgsException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.ServiceException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.EC2InstanceNotFoundException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.EC2InstanceTypeInvalidException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.SerialConsoleSessionLimitExceededException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.SerialConsoleSessionUnavailableException`

    

  .. py:method:: send_ssh_public_key(**kwargs)

    

    Pushes an SSH public key to the specified EC2 instance for use by the specified user. The key remains for 60 seconds. For more information, see `Connect to your Linux instance using EC2 Instance Connect <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html>`__ in the *Amazon EC2 User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/ec2-instance-connect-2018-04-02/SendSSHPublicKey>`_    


    **Request Syntax** 
    ::

      response = client.send_ssh_public_key(
          InstanceId='string',
          InstanceOSUser='string',
          SSHPublicKey='string',
          AvailabilityZone='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The ID of the EC2 instance.

      

    
    :type InstanceOSUser: string
    :param InstanceOSUser: **[REQUIRED]** 

      The OS user on the EC2 instance for whom the key can be used to authenticate.

      

    
    :type SSHPublicKey: string
    :param SSHPublicKey: **[REQUIRED]** 

      The public key material. To use the public key, you must have the matching private key.

      

    
    :type AvailabilityZone: string
    :param AvailabilityZone: **[REQUIRED]** 

      The Availability Zone in which the EC2 instance was launched.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RequestId': 'string',
            'Success': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RequestId** *(string) --* 

          The ID of the request. Please provide this ID when contacting AWS Support for assistance.

          
        

        - **Success** *(boolean) --* 

          Is true if the request succeeds and an error otherwise.

          
    
    **Exceptions** 
    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.AuthException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.InvalidArgsException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.ServiceException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`EC2InstanceConnect.Client.exceptions.EC2InstanceNotFoundException`

    

==========
Paginators
==========


The available paginators are:
