

***********************
ApiGatewayManagementApi
***********************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: ApiGatewayManagementApi.Client

  A low-level client representing AmazonApiGatewayManagementApi
  

  The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.

  ::

    
    import boto3
    
    client = boto3.client('apigatewaymanagementapi')

  
  These are the available methods:
  
  *   :py:meth:`~ApiGatewayManagementApi.Client.can_paginate`

  
  *   :py:meth:`~ApiGatewayManagementApi.Client.delete_connection`

  
  *   :py:meth:`~ApiGatewayManagementApi.Client.generate_presigned_url`

  
  *   :py:meth:`~ApiGatewayManagementApi.Client.get_connection`

  
  *   :py:meth:`~ApiGatewayManagementApi.Client.get_paginator`

  
  *   :py:meth:`~ApiGatewayManagementApi.Client.get_waiter`

  
  *   :py:meth:`~ApiGatewayManagementApi.Client.post_to_connection`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: delete_connection(**kwargs)

    

    Delete the connection with the provided id.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/apigatewaymanagementapi-2018-11-29/DeleteConnection>`_    


    **Request Syntax** 
    ::

      response = client.delete_connection(
          ConnectionId='string'
      )
    :type ConnectionId: string
    :param ConnectionId: **[REQUIRED]** 

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.GoneException`

    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.ForbiddenException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_connection(**kwargs)

    

    Get information about the connection with the provided id.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/apigatewaymanagementapi-2018-11-29/GetConnection>`_    


    **Request Syntax** 
    ::

      response = client.get_connection(
          ConnectionId='string'
      )
    :type ConnectionId: string
    :param ConnectionId: **[REQUIRED]** 

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectedAt': datetime(2015, 1, 1),
            'Identity': {
                'SourceIp': 'string',
                'UserAgent': 'string'
            },
            'LastActiveAt': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectedAt** *(datetime) --* 

          The time in ISO 8601 format for when the connection was established.

          
        

        - **Identity** *(dict) --* 
          

          - **SourceIp** *(string) --* 

            The source IP address of the TCP connection making the request to API Gateway.

            
          

          - **UserAgent** *(string) --* 

            The User Agent of the API caller.

            
      
        

        - **LastActiveAt** *(datetime) --* 

          The time in ISO 8601 format for when the connection was last active.

          
    
    **Exceptions** 
    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.GoneException`

    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.ForbiddenException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: post_to_connection(**kwargs)

    

    Sends the provided data to the specified connection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/apigatewaymanagementapi-2018-11-29/PostToConnection>`_    


    **Request Syntax** 
    ::

      response = client.post_to_connection(
          Data=b'bytes'|file,
          ConnectionId='string'
      )
    :type Data: bytes or seekable file-like object
    :param Data: **[REQUIRED]** 

      The data to be sent to the client specified by its connection id.

      

    
    :type ConnectionId: string
    :param ConnectionId: **[REQUIRED]** 

      The identifier of the connection that a specific client is using.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.GoneException`

    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.LimitExceededException`

    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.PayloadTooLargeException`

    
    *     :py:class:`ApiGatewayManagementApi.Client.exceptions.ForbiddenException`

    

==========
Paginators
==========


The available paginators are:
