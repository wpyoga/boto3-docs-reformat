

*****
WAFV2
*****

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: WAFV2.Client

  A low-level client representing AWS WAFV2
   

  .. note::

     

    This is the latest version of the **WAF** API, released in November, 2019. The names of the entities that you use to access this API, like endpoints and namespaces, all have the versioning information added, like "V2" or "v2", to distinguish from the prior version. We recommend migrating your resources to this version, because it has a number of significant improvements.

     

    If you used WAF prior to this release, you can't use this WAFV2 API to access any WAF resources that you created before. You can access your old rules, web ACLs, and other WAF resources only through the WAF Classic APIs. The WAF Classic APIs have retained the prior names, endpoints, and namespaces. 

     

    For information, including how to migrate your WAF resources to this version, see the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

     

   

  WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to Amazon CloudFront, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API. WAF also lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, the Amazon API Gateway REST API, CloudFront distribution, the Application Load Balancer, or the AppSync GraphQL API responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You also can configure CloudFront to return a custom error page when a request is blocked.

   

  This API guide is for developers who need detailed information about WAF API actions, data types, and errors. For detailed information about WAF features and an overview of how to use WAF, see the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/>`__ .

   

  You can make calls using the endpoints listed in `Amazon Web Services Service Endpoints for WAF <https://docs.aws.amazon.com/general/latest/gr/rande.html#waf_region>`__ . 

   

   
  * For regional applications, you can use any of the endpoints in the list. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  
   
  * For Amazon CloudFront applications, you must use the API endpoint listed for US East (N. Virginia): us-east-1. 
   

   

  Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see `Amazon Web Services SDKs <http://aws.amazon.com/tools/#SDKs>`__ .

   

  We currently provide two versions of the WAF API: this API and the prior versions, the classic WAF APIs. This new API provides the same functionality as the older versions, with the following major improvements:

   

   
  * You use one API for both global and regional applications. Where you need to distinguish the scope, you specify a ``Scope`` parameter and set it to ``CLOUDFRONT`` or ``REGIONAL`` .  
   
  * You can define a web ACL or rule group with a single call, and update it with a single call. You define all rule specifications in JSON format, and pass them to your rule group or web ACL calls. 
   
  * The limits WAF places on the use of rules more closely reflects the cost of running each type of rule. Rule groups include capacity settings, so you know the maximum cost of a rule group when you use it. 
   

  ::

    
    import boto3
    
    client = boto3.client('wafv2')

  
  These are the available methods:
  
  *   :py:meth:`~WAFV2.Client.associate_web_acl`

  
  *   :py:meth:`~WAFV2.Client.can_paginate`

  
  *   :py:meth:`~WAFV2.Client.check_capacity`

  
  *   :py:meth:`~WAFV2.Client.create_ip_set`

  
  *   :py:meth:`~WAFV2.Client.create_regex_pattern_set`

  
  *   :py:meth:`~WAFV2.Client.create_rule_group`

  
  *   :py:meth:`~WAFV2.Client.create_web_acl`

  
  *   :py:meth:`~WAFV2.Client.delete_firewall_manager_rule_groups`

  
  *   :py:meth:`~WAFV2.Client.delete_ip_set`

  
  *   :py:meth:`~WAFV2.Client.delete_logging_configuration`

  
  *   :py:meth:`~WAFV2.Client.delete_permission_policy`

  
  *   :py:meth:`~WAFV2.Client.delete_regex_pattern_set`

  
  *   :py:meth:`~WAFV2.Client.delete_rule_group`

  
  *   :py:meth:`~WAFV2.Client.delete_web_acl`

  
  *   :py:meth:`~WAFV2.Client.describe_managed_rule_group`

  
  *   :py:meth:`~WAFV2.Client.disassociate_web_acl`

  
  *   :py:meth:`~WAFV2.Client.generate_presigned_url`

  
  *   :py:meth:`~WAFV2.Client.get_ip_set`

  
  *   :py:meth:`~WAFV2.Client.get_logging_configuration`

  
  *   :py:meth:`~WAFV2.Client.get_paginator`

  
  *   :py:meth:`~WAFV2.Client.get_permission_policy`

  
  *   :py:meth:`~WAFV2.Client.get_rate_based_statement_managed_keys`

  
  *   :py:meth:`~WAFV2.Client.get_regex_pattern_set`

  
  *   :py:meth:`~WAFV2.Client.get_rule_group`

  
  *   :py:meth:`~WAFV2.Client.get_sampled_requests`

  
  *   :py:meth:`~WAFV2.Client.get_waiter`

  
  *   :py:meth:`~WAFV2.Client.get_web_acl`

  
  *   :py:meth:`~WAFV2.Client.get_web_acl_for_resource`

  
  *   :py:meth:`~WAFV2.Client.list_available_managed_rule_groups`

  
  *   :py:meth:`~WAFV2.Client.list_ip_sets`

  
  *   :py:meth:`~WAFV2.Client.list_logging_configurations`

  
  *   :py:meth:`~WAFV2.Client.list_regex_pattern_sets`

  
  *   :py:meth:`~WAFV2.Client.list_resources_for_web_acl`

  
  *   :py:meth:`~WAFV2.Client.list_rule_groups`

  
  *   :py:meth:`~WAFV2.Client.list_tags_for_resource`

  
  *   :py:meth:`~WAFV2.Client.list_web_acls`

  
  *   :py:meth:`~WAFV2.Client.put_logging_configuration`

  
  *   :py:meth:`~WAFV2.Client.put_permission_policy`

  
  *   :py:meth:`~WAFV2.Client.tag_resource`

  
  *   :py:meth:`~WAFV2.Client.untag_resource`

  
  *   :py:meth:`~WAFV2.Client.update_ip_set`

  
  *   :py:meth:`~WAFV2.Client.update_regex_pattern_set`

  
  *   :py:meth:`~WAFV2.Client.update_rule_group`

  
  *   :py:meth:`~WAFV2.Client.update_web_acl`

  

  .. py:method:: associate_web_acl(**kwargs)

    

    Associates a web ACL with a regional application resource, to protect the resource. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

     

    For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To associate a web ACL, in the CloudFront call ``UpdateDistribution`` , set the web ACL ID to the Amazon Resource Name (ARN) of the web ACL. For information, see `UpdateDistribution <https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/AssociateWebACL>`_    


    **Request Syntax** 
    ::

      response = client.associate_web_acl(
          WebACLArn='string',
          ResourceArn='string'
      )
    :type WebACLArn: string
    :param WebACLArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.

      

    
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource to associate with the web ACL. 

       

      The ARN must be in one of the following formats:

       

       
      * For an Application Load Balancer: ``arn:aws:elasticloadbalancing:*region* :*account-id* :loadbalancer/app/*load-balancer-name* /*load-balancer-id* ``   
       
      * For an Amazon API Gateway REST API: ``arn:aws:apigateway:*region* ::/restapis/*api-id* /stages/*stage-name* ``   
       
      * For an AppSync GraphQL API: ``arn:aws:appsync:*region* :*account-id* :apis/*GraphQLApiId* ``   
       

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFUnavailableEntityException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: check_capacity(**kwargs)

    

    Returns the web ACL capacity unit (WCU) requirements for a specified scope and set of rules. You can use this to check the capacity requirements for the rules you want to use in a  RuleGroup or  WebACL . 

     

    WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/CheckCapacity>`_    


    **Request Syntax** 
    ::

      response = client.check_capacity(
          Scope='CLOUDFRONT'|'REGIONAL',
          Rules=[
              {
                  'Name': 'string',
                  'Priority': 123,
                  'Statement': {
                      'ByteMatchStatement': {
                          'SearchString': b'bytes',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ],
                          'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                      },
                      'SqliMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'XssMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'SizeConstraintStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                          'Size': 123,
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'GeoMatchStatement': {
                          'CountryCodes': [
                              'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                          ],
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'RuleGroupReferenceStatement': {
                          'ARN': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ]
                      },
                      'IPSetReferenceStatement': {
                          'ARN': 'string',
                          'IPSetForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH',
                              'Position': 'FIRST'|'LAST'|'ANY'
                          }
                      },
                      'RegexPatternSetReferenceStatement': {
                          'ARN': 'string',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'RateBasedStatement': {
                          'Limit': 123,
                          'AggregateKeyType': 'IP'|'FORWARDED_IP',
                          'ScopeDownStatement': {'... recursive ...'},
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'AndStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'OrStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'NotStatement': {
                          'Statement': {'... recursive ...'}
                      },
                      'ManagedRuleGroupStatement': {
                          'VendorName': 'string',
                          'Name': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ],
                          'ScopeDownStatement': {'... recursive ...'}
                      },
                      'LabelMatchStatement': {
                          'Scope': 'LABEL'|'NAMESPACE',
                          'Key': 'string'
                      }
                  },
                  'Action': {
                      'Block': {
                          'CustomResponse': {
                              'ResponseCode': 123,
                              'CustomResponseBodyKey': 'string',
                              'ResponseHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Allow': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      }
                  },
                  'OverrideAction': {
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'None': {}
                      
                  },
                  'RuleLabels': [
                      {
                          'Name': 'string'
                      },
                  ],
                  'VisibilityConfig': {
                      'SampledRequestsEnabled': True|False,
                      'CloudWatchMetricsEnabled': True|False,
                      'MetricName': 'string'
                  }
              },
          ]
      )
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Rules: list
    :param Rules: **[REQUIRED]** 

      An array of  Rule that you're configuring to use in a rule group or web ACL. 

      

    
      - *(dict) --* 

        A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the rule. You can't change the name of a ``Rule`` after you create it. 

          

        
        - **Priority** *(integer) --* **[REQUIRED]** 

          If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

          

        
        - **Statement** *(dict) --* **[REQUIRED]** 

          The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

          

        
          - **ByteMatchStatement** *(dict) --* 

            A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

            

          
            - **SearchString** *(bytes) --* **[REQUIRED]** 

              A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

               

              Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

               

               
              * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
               
              * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
               

               

              If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

               

               **If you're using the WAF API**  

               

              Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

               

              For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

               

               **If you're using the CLI or one of the Amazon Web Services SDKs**  

               

              The value that you want WAF to search for. The SDK automatically base64 encodes the value.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
            - **PositionalConstraint** *(string) --* **[REQUIRED]** 

              The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

               

               **CONTAINS**  

               

              The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

               

               **CONTAINS_WORD**  

               

              The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

               

               
              * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
               
              * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
               

               

               **EXACTLY**  

               

              The value of the specified part of the web request must exactly match the value of ``SearchString`` .

               

               **STARTS_WITH**  

               

              The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

               

               **ENDS_WITH**  

               

              The value of ``SearchString`` must appear at the end of the specified part of the web request.

              

            
          
          - **SqliMatchStatement** *(dict) --* 

            Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **XssMatchStatement** *(dict) --* 

            A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **SizeConstraintStatement** *(dict) --* 

            A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

             

            If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

             

            If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **ComparisonOperator** *(string) --* **[REQUIRED]** 

              The operator to use to compare the request part to the size setting. 

              

            
            - **Size** *(integer) --* **[REQUIRED]** 

              The size, in byte, to compare to the request part, after any transformations.

              

            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **GeoMatchStatement** *(dict) --* 

            A rule statement used to identify web requests based on country of origin. 

            

          
            - **CountryCodes** *(list) --* 

              An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

              

            
              - *(string) --* 

              
          
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **RuleGroupReferenceStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

             

            You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the entity.

              

            
            - **ExcludedRules** *(list) --* 

              The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
          
          - **IPSetReferenceStatement** *(dict) --* 

            A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

             

            Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  IPSet that this statement references.

              

            
            - **IPSetForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
              - **Position** *(string) --* **[REQUIRED]** 

                The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                 

                The options for this setting are the following: 

                 

                 
                * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                 
                * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                 
                * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                 

                

              
            
          
          - **RegexPatternSetReferenceStatement** *(dict) --* 

            A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

             

            Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **RateBasedStatement** *(dict) --* 

            A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

             

            When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

             

            You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

             

             
            * An IP match statement with an IP set that specified the address 192.0.2.44. 
             
            * A string match statement that searches in the User-Agent header for the string BadBot. 
             

             

            In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

             

            You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **Limit** *(integer) --* **[REQUIRED]** 

              The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

              

            
            - **AggregateKeyType** *(string) --* **[REQUIRED]** 

              Setting that indicates how to aggregate the request counts. The options are the following:

               

               
              * IP - Aggregate the request counts on the IP address from the web request origin. 
               
              * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
               

              

            
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

               

              This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **AndStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with AND logic. You can use any statements that can be nested. 

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **OrStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with OR logic. You can use any statements that can be nested.

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **NotStatement** *(dict) --* 

            A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

            

          
            - **Statement** *(dict) --* 

              The statement to negate. You can use any statement that can be nested.

              

            
          
          - **ManagedRuleGroupStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

             

            You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **VendorName** *(string) --* **[REQUIRED]** 

              The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

              

            
            - **Name** *(string) --* **[REQUIRED]** 

              The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

              

            
            - **ExcludedRules** *(list) --* 

              The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
          
          - **LabelMatchStatement** *(dict) --* 

            A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

             

            The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

            

          
            - **Scope** *(string) --* **[REQUIRED]** 

              Specify whether you want to match using the label name or just the namespace. 

              

            
            - **Key** *(string) --* **[REQUIRED]** 

              The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

               

               
              * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
               
              * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
               

               

              Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

              

            
          
        
        - **Action** *(dict) --* 

          The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

           

          This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

           

           
          * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
           
          * If the rule statement references a rule group, use the override action setting and not this action setting.  
           

          

        
          - **Block** *(dict) --* 

            Instructs WAF to block the web request.

            

          
            - **CustomResponse** *(dict) --* 

              Defines a custom response for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **ResponseCode** *(integer) --* **[REQUIRED]** 

                The HTTP status code to return to the client. 

                 

                For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
              - **CustomResponseBodyKey** *(string) --* 

                References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                

              
              - **ResponseHeaders** *(list) --* 

                The HTTP headers to use in the response. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Allow** *(dict) --* 

            Instructs WAF to allow the web request.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Count** *(dict) --* 

            Instructs WAF to count the web request and allow it.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
        
        - **OverrideAction** *(dict) --* 

          The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

           

          In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

           

           
          * If the rule statement references a rule group, use this override action setting and not the action setting.  
           
          * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
           

          

        
          - **Count** *(dict) --* 

            Override the rule action setting to count.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **None** *(dict) --* 

            Don't override the rule action setting.

            

          
          
        
        - **RuleLabels** *(list) --* 

          Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

           

          Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

           

          For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

           

           
          * Separate each component of the label with a colon.  
           
          * Each namespace or name can have up to 128 characters. 
           
          * You can specify up to 5 namespaces in a label. 
           
          * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
           

           

          For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

          

        
          - *(dict) --* 

            A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

            

          
            - **Name** *(string) --* **[REQUIRED]** 

              The label string. 

              

            
          
      
        - **VisibilityConfig** *(dict) --* **[REQUIRED]** 

          Defines and enables Amazon CloudWatch metrics and web request sample collection. 

          

        
          - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

            

          
          - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

            

          
          - **MetricName** *(string) --* **[REQUIRED]** 

            A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

            

          
        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Capacity': 123
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Capacity** *(integer) --* 

          The capacity required by the rules and scope.

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidResourceException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFUnavailableEntityException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFSubscriptionNotFoundException`

    

  .. py:method:: create_ip_set(**kwargs)

    

    Creates an  IPSet , which you use to identify web requests that originate from specific IP addresses or ranges of IP addresses. For example, if you're receiving a lot of requests from a ranges of IP addresses, you can configure WAF to block them using an IPSet that lists those IP addresses. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/CreateIPSet>`_    


    **Request Syntax** 
    ::

      response = client.create_ip_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Description='string',
          IPAddressVersion='IPV4'|'IPV6',
          Addresses=[
              'string',
          ],
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Description: string
    :param Description: 

      A description of the IP set that helps with identification. 

      

    
    :type IPAddressVersion: string
    :param IPAddressVersion: **[REQUIRED]** 

      Specify IPV4 or IPV6. 

      

    
    :type Addresses: list
    :param Addresses: **[REQUIRED]** 

      Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. 

       

      Examples: 

       

       
      * To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify ``192.0.2.44/32`` . 
       
      * To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . 
       
      * To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . 
       
      * To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . 
       

       

      For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`__ .

      

    
      - *(string) --* 

      
  
    :type Tags: list
    :param Tags: 

      An array of key:value pairs to associate with the resource.

      

    
      - *(dict) --* 

        A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

         

        You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Summary': {
                'Name': 'string',
                'Id': 'string',
                'Description': 'string',
                'LockToken': 'string',
                'ARN': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Summary** *(dict) --* 

          High-level information about an  IPSet , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an ``IPSet`` , and the ARN, that you provide to the  IPSetReferenceStatement to use the address set in a  Rule .

          
          

          - **Name** *(string) --* 

            The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.

            
          

          - **Id** *(string) --* 

            A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

            
          

          - **Description** *(string) --* 

            A description of the IP set that helps with identification. 

            
          

          - **LockToken** *(string) --* 

            A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the entity.

            
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: create_regex_pattern_set(**kwargs)

    

    Creates a  RegexPatternSet , which you reference in a  RegexPatternSetReferenceStatement , to have WAF inspect a web request component for the specified patterns.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/CreateRegexPatternSet>`_    


    **Request Syntax** 
    ::

      response = client.create_regex_pattern_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Description='string',
          RegularExpressionList=[
              {
                  'RegexString': 'string'
              },
          ],
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the set. You cannot change the name after you create the set.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Description: string
    :param Description: 

      A description of the set that helps with identification. 

      

    
    :type RegularExpressionList: list
    :param RegularExpressionList: **[REQUIRED]** 

      Array of regular expression strings. 

      

    
      - *(dict) --* 

        A single regular expression. This is used in a  RegexPatternSet .

        

      
        - **RegexString** *(string) --* 

          The string representing the regular expression.

          

        
      
  
    :type Tags: list
    :param Tags: 

      An array of key:value pairs to associate with the resource.

      

    
      - *(dict) --* 

        A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

         

        You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Summary': {
                'Name': 'string',
                'Id': 'string',
                'Description': 'string',
                'LockToken': 'string',
                'ARN': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Summary** *(dict) --* 

          High-level information about a  RegexPatternSet , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a ``RegexPatternSet`` , and the ARN, that you provide to the  RegexPatternSetReferenceStatement to use the pattern set in a  Rule .

          
          

          - **Name** *(string) --* 

            The name of the data type instance. You cannot change the name after you create the instance.

            
          

          - **Id** *(string) --* 

            A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

            
          

          - **Description** *(string) --* 

            A description of the set that helps with identification. 

            
          

          - **LockToken** *(string) --* 

            A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the entity.

            
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: create_rule_group(**kwargs)

    

    Creates a  RuleGroup per the specifications provided. 

     

    A rule group defines a collection of rules to inspect and control web requests that you can use in a  WebACL . When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/CreateRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.create_rule_group(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Capacity=123,
          Description='string',
          Rules=[
              {
                  'Name': 'string',
                  'Priority': 123,
                  'Statement': {
                      'ByteMatchStatement': {
                          'SearchString': b'bytes',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ],
                          'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                      },
                      'SqliMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'XssMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'SizeConstraintStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                          'Size': 123,
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'GeoMatchStatement': {
                          'CountryCodes': [
                              'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                          ],
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'RuleGroupReferenceStatement': {
                          'ARN': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ]
                      },
                      'IPSetReferenceStatement': {
                          'ARN': 'string',
                          'IPSetForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH',
                              'Position': 'FIRST'|'LAST'|'ANY'
                          }
                      },
                      'RegexPatternSetReferenceStatement': {
                          'ARN': 'string',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'RateBasedStatement': {
                          'Limit': 123,
                          'AggregateKeyType': 'IP'|'FORWARDED_IP',
                          'ScopeDownStatement': {'... recursive ...'},
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'AndStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'OrStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'NotStatement': {
                          'Statement': {'... recursive ...'}
                      },
                      'ManagedRuleGroupStatement': {
                          'VendorName': 'string',
                          'Name': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ],
                          'ScopeDownStatement': {'... recursive ...'}
                      },
                      'LabelMatchStatement': {
                          'Scope': 'LABEL'|'NAMESPACE',
                          'Key': 'string'
                      }
                  },
                  'Action': {
                      'Block': {
                          'CustomResponse': {
                              'ResponseCode': 123,
                              'CustomResponseBodyKey': 'string',
                              'ResponseHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Allow': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      }
                  },
                  'OverrideAction': {
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'None': {}
                      
                  },
                  'RuleLabels': [
                      {
                          'Name': 'string'
                      },
                  ],
                  'VisibilityConfig': {
                      'SampledRequestsEnabled': True|False,
                      'CloudWatchMetricsEnabled': True|False,
                      'MetricName': 'string'
                  }
              },
          ],
          VisibilityConfig={
              'SampledRequestsEnabled': True|False,
              'CloudWatchMetricsEnabled': True|False,
              'MetricName': 'string'
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          CustomResponseBodies={
              'string': {
                  'ContentType': 'TEXT_PLAIN'|'TEXT_HTML'|'APPLICATION_JSON',
                  'Content': 'string'
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule group. You cannot change the name of a rule group after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Capacity: integer
    :param Capacity: **[REQUIRED]** 

      The web ACL capacity units (WCUs) required for this rule group.

       

      When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity for a set of rules using  CheckCapacity .

       

      WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500. 

      

    
    :type Description: string
    :param Description: 

      A description of the rule group that helps with identification. 

      

    
    :type Rules: list
    :param Rules: 

      The  Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

      

    
      - *(dict) --* 

        A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the rule. You can't change the name of a ``Rule`` after you create it. 

          

        
        - **Priority** *(integer) --* **[REQUIRED]** 

          If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

          

        
        - **Statement** *(dict) --* **[REQUIRED]** 

          The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

          

        
          - **ByteMatchStatement** *(dict) --* 

            A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

            

          
            - **SearchString** *(bytes) --* **[REQUIRED]** 

              A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

               

              Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

               

               
              * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
               
              * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
               

               

              If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

               

               **If you're using the WAF API**  

               

              Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

               

              For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

               

               **If you're using the CLI or one of the Amazon Web Services SDKs**  

               

              The value that you want WAF to search for. The SDK automatically base64 encodes the value.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
            - **PositionalConstraint** *(string) --* **[REQUIRED]** 

              The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

               

               **CONTAINS**  

               

              The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

               

               **CONTAINS_WORD**  

               

              The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

               

               
              * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
               
              * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
               

               

               **EXACTLY**  

               

              The value of the specified part of the web request must exactly match the value of ``SearchString`` .

               

               **STARTS_WITH**  

               

              The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

               

               **ENDS_WITH**  

               

              The value of ``SearchString`` must appear at the end of the specified part of the web request.

              

            
          
          - **SqliMatchStatement** *(dict) --* 

            Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **XssMatchStatement** *(dict) --* 

            A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **SizeConstraintStatement** *(dict) --* 

            A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

             

            If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

             

            If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **ComparisonOperator** *(string) --* **[REQUIRED]** 

              The operator to use to compare the request part to the size setting. 

              

            
            - **Size** *(integer) --* **[REQUIRED]** 

              The size, in byte, to compare to the request part, after any transformations.

              

            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **GeoMatchStatement** *(dict) --* 

            A rule statement used to identify web requests based on country of origin. 

            

          
            - **CountryCodes** *(list) --* 

              An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

              

            
              - *(string) --* 

              
          
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **RuleGroupReferenceStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

             

            You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the entity.

              

            
            - **ExcludedRules** *(list) --* 

              The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
          
          - **IPSetReferenceStatement** *(dict) --* 

            A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

             

            Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  IPSet that this statement references.

              

            
            - **IPSetForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
              - **Position** *(string) --* **[REQUIRED]** 

                The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                 

                The options for this setting are the following: 

                 

                 
                * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                 
                * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                 
                * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                 

                

              
            
          
          - **RegexPatternSetReferenceStatement** *(dict) --* 

            A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

             

            Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **RateBasedStatement** *(dict) --* 

            A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

             

            When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

             

            You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

             

             
            * An IP match statement with an IP set that specified the address 192.0.2.44. 
             
            * A string match statement that searches in the User-Agent header for the string BadBot. 
             

             

            In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

             

            You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **Limit** *(integer) --* **[REQUIRED]** 

              The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

              

            
            - **AggregateKeyType** *(string) --* **[REQUIRED]** 

              Setting that indicates how to aggregate the request counts. The options are the following:

               

               
              * IP - Aggregate the request counts on the IP address from the web request origin. 
               
              * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
               

              

            
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

               

              This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **AndStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with AND logic. You can use any statements that can be nested. 

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **OrStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with OR logic. You can use any statements that can be nested.

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **NotStatement** *(dict) --* 

            A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

            

          
            - **Statement** *(dict) --* 

              The statement to negate. You can use any statement that can be nested.

              

            
          
          - **ManagedRuleGroupStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

             

            You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **VendorName** *(string) --* **[REQUIRED]** 

              The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

              

            
            - **Name** *(string) --* **[REQUIRED]** 

              The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

              

            
            - **ExcludedRules** *(list) --* 

              The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
          
          - **LabelMatchStatement** *(dict) --* 

            A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

             

            The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

            

          
            - **Scope** *(string) --* **[REQUIRED]** 

              Specify whether you want to match using the label name or just the namespace. 

              

            
            - **Key** *(string) --* **[REQUIRED]** 

              The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

               

               
              * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
               
              * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
               

               

              Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

              

            
          
        
        - **Action** *(dict) --* 

          The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

           

          This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

           

           
          * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
           
          * If the rule statement references a rule group, use the override action setting and not this action setting.  
           

          

        
          - **Block** *(dict) --* 

            Instructs WAF to block the web request.

            

          
            - **CustomResponse** *(dict) --* 

              Defines a custom response for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **ResponseCode** *(integer) --* **[REQUIRED]** 

                The HTTP status code to return to the client. 

                 

                For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
              - **CustomResponseBodyKey** *(string) --* 

                References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                

              
              - **ResponseHeaders** *(list) --* 

                The HTTP headers to use in the response. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Allow** *(dict) --* 

            Instructs WAF to allow the web request.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Count** *(dict) --* 

            Instructs WAF to count the web request and allow it.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
        
        - **OverrideAction** *(dict) --* 

          The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

           

          In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

           

           
          * If the rule statement references a rule group, use this override action setting and not the action setting.  
           
          * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
           

          

        
          - **Count** *(dict) --* 

            Override the rule action setting to count.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **None** *(dict) --* 

            Don't override the rule action setting.

            

          
          
        
        - **RuleLabels** *(list) --* 

          Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

           

          Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

           

          For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

           

           
          * Separate each component of the label with a colon.  
           
          * Each namespace or name can have up to 128 characters. 
           
          * You can specify up to 5 namespaces in a label. 
           
          * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
           

           

          For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

          

        
          - *(dict) --* 

            A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

            

          
            - **Name** *(string) --* **[REQUIRED]** 

              The label string. 

              

            
          
      
        - **VisibilityConfig** *(dict) --* **[REQUIRED]** 

          Defines and enables Amazon CloudWatch metrics and web request sample collection. 

          

        
          - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

            

          
          - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

            

          
          - **MetricName** *(string) --* **[REQUIRED]** 

            A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

            

          
        
      
  
    :type VisibilityConfig: dict
    :param VisibilityConfig: **[REQUIRED]** 

      Defines and enables Amazon CloudWatch metrics and web request sample collection. 

      

    
      - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

        

      
      - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

        

      
      - **MetricName** *(string) --* **[REQUIRED]** 

        A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

        

      
    
    :type Tags: list
    :param Tags: 

      An array of key:value pairs to associate with the resource.

      

    
      - *(dict) --* 

        A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

         

        You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.

          

        
      
  
    :type CustomResponseBodies: dict
    :param CustomResponseBodies: 

      A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. 

       

      For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

       

      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

      

    
      - *(string) --* 

      
        - *(dict) --* 

          The response body to use in a custom response to a web request. This is referenced by key from  CustomResponse  ``CustomResponseBodyKey`` .

          

        
          - **ContentType** *(string) --* **[REQUIRED]** 

            The type of content in the payload that you are defining in the ``Content`` string.

            

          
          - **Content** *(string) --* **[REQUIRED]** 

            The payload of the custom response. 

             

            You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Summary': {
                'Name': 'string',
                'Id': 'string',
                'Description': 'string',
                'LockToken': 'string',
                'ARN': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Summary** *(dict) --* 

          High-level information about a  RuleGroup , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a ``RuleGroup`` , and the ARN, that you provide to the  RuleGroupReferenceStatement to use the rule group in a  Rule .

          
          

          - **Name** *(string) --* 

            The name of the data type instance. You cannot change the name after you create the instance.

            
          

          - **Id** *(string) --* 

            A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

            
          

          - **Description** *(string) --* 

            A description of the rule group that helps with identification. 

            
          

          - **LockToken** *(string) --* 

            A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the entity.

            
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFUnavailableEntityException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFSubscriptionNotFoundException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: create_web_acl(**kwargs)

    

    Creates a  WebACL per the specifications provided.

     

    A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types  Rule ,  RuleGroup , and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/CreateWebACL>`_    


    **Request Syntax** 
    ::

      response = client.create_web_acl(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          DefaultAction={
              'Block': {
                  'CustomResponse': {
                      'ResponseCode': 123,
                      'CustomResponseBodyKey': 'string',
                      'ResponseHeaders': [
                          {
                              'Name': 'string',
                              'Value': 'string'
                          },
                      ]
                  }
              },
              'Allow': {
                  'CustomRequestHandling': {
                      'InsertHeaders': [
                          {
                              'Name': 'string',
                              'Value': 'string'
                          },
                      ]
                  }
              }
          },
          Description='string',
          Rules=[
              {
                  'Name': 'string',
                  'Priority': 123,
                  'Statement': {
                      'ByteMatchStatement': {
                          'SearchString': b'bytes',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ],
                          'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                      },
                      'SqliMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'XssMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'SizeConstraintStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                          'Size': 123,
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'GeoMatchStatement': {
                          'CountryCodes': [
                              'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                          ],
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'RuleGroupReferenceStatement': {
                          'ARN': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ]
                      },
                      'IPSetReferenceStatement': {
                          'ARN': 'string',
                          'IPSetForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH',
                              'Position': 'FIRST'|'LAST'|'ANY'
                          }
                      },
                      'RegexPatternSetReferenceStatement': {
                          'ARN': 'string',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'RateBasedStatement': {
                          'Limit': 123,
                          'AggregateKeyType': 'IP'|'FORWARDED_IP',
                          'ScopeDownStatement': {'... recursive ...'},
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'AndStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'OrStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'NotStatement': {
                          'Statement': {'... recursive ...'}
                      },
                      'ManagedRuleGroupStatement': {
                          'VendorName': 'string',
                          'Name': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ],
                          'ScopeDownStatement': {'... recursive ...'}
                      },
                      'LabelMatchStatement': {
                          'Scope': 'LABEL'|'NAMESPACE',
                          'Key': 'string'
                      }
                  },
                  'Action': {
                      'Block': {
                          'CustomResponse': {
                              'ResponseCode': 123,
                              'CustomResponseBodyKey': 'string',
                              'ResponseHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Allow': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      }
                  },
                  'OverrideAction': {
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'None': {}
                      
                  },
                  'RuleLabels': [
                      {
                          'Name': 'string'
                      },
                  ],
                  'VisibilityConfig': {
                      'SampledRequestsEnabled': True|False,
                      'CloudWatchMetricsEnabled': True|False,
                      'MetricName': 'string'
                  }
              },
          ],
          VisibilityConfig={
              'SampledRequestsEnabled': True|False,
              'CloudWatchMetricsEnabled': True|False,
              'MetricName': 'string'
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          CustomResponseBodies={
              'string': {
                  'ContentType': 'TEXT_PLAIN'|'TEXT_HTML'|'APPLICATION_JSON',
                  'Content': 'string'
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the web ACL. You cannot change the name of a web ACL after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type DefaultAction: dict
    :param DefaultAction: **[REQUIRED]** 

      The action to perform if none of the ``Rules`` contained in the ``WebACL`` match. 

      

    
      - **Block** *(dict) --* 

        Specifies that WAF should block requests by default. 

        

      
        - **CustomResponse** *(dict) --* 

          Defines a custom response for the web request.

           

          For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

          

        
          - **ResponseCode** *(integer) --* **[REQUIRED]** 

            The HTTP status code to return to the client. 

             

            For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
          - **CustomResponseBodyKey** *(string) --* 

            References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

            

          
          - **ResponseHeaders** *(list) --* 

            The HTTP headers to use in the response. Duplicate header names are not allowed. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
            - *(dict) --* 

              A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

              

            
              - **Name** *(string) --* **[REQUIRED]** 

                The name of the custom header. 

                 

                For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                

              
              - **Value** *(string) --* **[REQUIRED]** 

                The value of the custom header.

                

              
            
        
        
      
      - **Allow** *(dict) --* 

        Specifies that WAF should allow requests by default.

        

      
        - **CustomRequestHandling** *(dict) --* 

          Defines custom handling for the web request.

           

          For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

          

        
          - **InsertHeaders** *(list) --* **[REQUIRED]** 

            The HTTP headers to insert into the request. Duplicate header names are not allowed. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
            - *(dict) --* 

              A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

              

            
              - **Name** *(string) --* **[REQUIRED]** 

                The name of the custom header. 

                 

                For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                

              
              - **Value** *(string) --* **[REQUIRED]** 

                The value of the custom header.

                

              
            
        
        
      
    
    :type Description: string
    :param Description: 

      A description of the web ACL that helps with identification. 

      

    
    :type Rules: list
    :param Rules: 

      The  Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

      

    
      - *(dict) --* 

        A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the rule. You can't change the name of a ``Rule`` after you create it. 

          

        
        - **Priority** *(integer) --* **[REQUIRED]** 

          If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

          

        
        - **Statement** *(dict) --* **[REQUIRED]** 

          The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

          

        
          - **ByteMatchStatement** *(dict) --* 

            A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

            

          
            - **SearchString** *(bytes) --* **[REQUIRED]** 

              A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

               

              Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

               

               
              * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
               
              * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
               

               

              If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

               

               **If you're using the WAF API**  

               

              Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

               

              For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

               

               **If you're using the CLI or one of the Amazon Web Services SDKs**  

               

              The value that you want WAF to search for. The SDK automatically base64 encodes the value.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
            - **PositionalConstraint** *(string) --* **[REQUIRED]** 

              The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

               

               **CONTAINS**  

               

              The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

               

               **CONTAINS_WORD**  

               

              The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

               

               
              * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
               
              * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
               

               

               **EXACTLY**  

               

              The value of the specified part of the web request must exactly match the value of ``SearchString`` .

               

               **STARTS_WITH**  

               

              The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

               

               **ENDS_WITH**  

               

              The value of ``SearchString`` must appear at the end of the specified part of the web request.

              

            
          
          - **SqliMatchStatement** *(dict) --* 

            Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **XssMatchStatement** *(dict) --* 

            A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **SizeConstraintStatement** *(dict) --* 

            A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

             

            If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

             

            If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **ComparisonOperator** *(string) --* **[REQUIRED]** 

              The operator to use to compare the request part to the size setting. 

              

            
            - **Size** *(integer) --* **[REQUIRED]** 

              The size, in byte, to compare to the request part, after any transformations.

              

            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **GeoMatchStatement** *(dict) --* 

            A rule statement used to identify web requests based on country of origin. 

            

          
            - **CountryCodes** *(list) --* 

              An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

              

            
              - *(string) --* 

              
          
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **RuleGroupReferenceStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

             

            You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the entity.

              

            
            - **ExcludedRules** *(list) --* 

              The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
          
          - **IPSetReferenceStatement** *(dict) --* 

            A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

             

            Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  IPSet that this statement references.

              

            
            - **IPSetForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
              - **Position** *(string) --* **[REQUIRED]** 

                The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                 

                The options for this setting are the following: 

                 

                 
                * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                 
                * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                 
                * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                 

                

              
            
          
          - **RegexPatternSetReferenceStatement** *(dict) --* 

            A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

             

            Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **RateBasedStatement** *(dict) --* 

            A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

             

            When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

             

            You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

             

             
            * An IP match statement with an IP set that specified the address 192.0.2.44. 
             
            * A string match statement that searches in the User-Agent header for the string BadBot. 
             

             

            In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

             

            You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **Limit** *(integer) --* **[REQUIRED]** 

              The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

              

            
            - **AggregateKeyType** *(string) --* **[REQUIRED]** 

              Setting that indicates how to aggregate the request counts. The options are the following:

               

               
              * IP - Aggregate the request counts on the IP address from the web request origin. 
               
              * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
               

              

            
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

               

              This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **AndStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with AND logic. You can use any statements that can be nested. 

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **OrStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with OR logic. You can use any statements that can be nested.

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **NotStatement** *(dict) --* 

            A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

            

          
            - **Statement** *(dict) --* 

              The statement to negate. You can use any statement that can be nested.

              

            
          
          - **ManagedRuleGroupStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

             

            You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **VendorName** *(string) --* **[REQUIRED]** 

              The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

              

            
            - **Name** *(string) --* **[REQUIRED]** 

              The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

              

            
            - **ExcludedRules** *(list) --* 

              The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
          
          - **LabelMatchStatement** *(dict) --* 

            A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

             

            The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

            

          
            - **Scope** *(string) --* **[REQUIRED]** 

              Specify whether you want to match using the label name or just the namespace. 

              

            
            - **Key** *(string) --* **[REQUIRED]** 

              The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

               

               
              * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
               
              * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
               

               

              Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

              

            
          
        
        - **Action** *(dict) --* 

          The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

           

          This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

           

           
          * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
           
          * If the rule statement references a rule group, use the override action setting and not this action setting.  
           

          

        
          - **Block** *(dict) --* 

            Instructs WAF to block the web request.

            

          
            - **CustomResponse** *(dict) --* 

              Defines a custom response for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **ResponseCode** *(integer) --* **[REQUIRED]** 

                The HTTP status code to return to the client. 

                 

                For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
              - **CustomResponseBodyKey** *(string) --* 

                References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                

              
              - **ResponseHeaders** *(list) --* 

                The HTTP headers to use in the response. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Allow** *(dict) --* 

            Instructs WAF to allow the web request.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Count** *(dict) --* 

            Instructs WAF to count the web request and allow it.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
        
        - **OverrideAction** *(dict) --* 

          The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

           

          In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

           

           
          * If the rule statement references a rule group, use this override action setting and not the action setting.  
           
          * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
           

          

        
          - **Count** *(dict) --* 

            Override the rule action setting to count.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **None** *(dict) --* 

            Don't override the rule action setting.

            

          
          
        
        - **RuleLabels** *(list) --* 

          Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

           

          Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

           

          For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

           

           
          * Separate each component of the label with a colon.  
           
          * Each namespace or name can have up to 128 characters. 
           
          * You can specify up to 5 namespaces in a label. 
           
          * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
           

           

          For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

          

        
          - *(dict) --* 

            A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

            

          
            - **Name** *(string) --* **[REQUIRED]** 

              The label string. 

              

            
          
      
        - **VisibilityConfig** *(dict) --* **[REQUIRED]** 

          Defines and enables Amazon CloudWatch metrics and web request sample collection. 

          

        
          - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

            

          
          - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

            

          
          - **MetricName** *(string) --* **[REQUIRED]** 

            A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

            

          
        
      
  
    :type VisibilityConfig: dict
    :param VisibilityConfig: **[REQUIRED]** 

      Defines and enables Amazon CloudWatch metrics and web request sample collection. 

      

    
      - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

        

      
      - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

        

      
      - **MetricName** *(string) --* **[REQUIRED]** 

        A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

        

      
    
    :type Tags: list
    :param Tags: 

      An array of key:value pairs to associate with the resource.

      

    
      - *(dict) --* 

        A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

         

        You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.

          

        
      
  
    :type CustomResponseBodies: dict
    :param CustomResponseBodies: 

      A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. 

       

      For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

       

      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

      

    
      - *(string) --* 

      
        - *(dict) --* 

          The response body to use in a custom response to a web request. This is referenced by key from  CustomResponse  ``CustomResponseBodyKey`` .

          

        
          - **ContentType** *(string) --* **[REQUIRED]** 

            The type of content in the payload that you are defining in the ``Content`` string.

            

          
          - **Content** *(string) --* **[REQUIRED]** 

            The payload of the custom response. 

             

            You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Summary': {
                'Name': 'string',
                'Id': 'string',
                'Description': 'string',
                'LockToken': 'string',
                'ARN': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Summary** *(dict) --* 

          High-level information about a  WebACL , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a ``WebACL`` , and the ARN, that you provide to operations like  AssociateWebACL .

          
          

          - **Name** *(string) --* 

            The name of the web ACL. You cannot change the name of a web ACL after you create it.

            
          

          - **Id** *(string) --* 

            The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

            
          

          - **Description** *(string) --* 

            A description of the web ACL that helps with identification. 

            
          

          - **LockToken** *(string) --* 

            A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the entity.

            
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidResourceException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFUnavailableEntityException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFSubscriptionNotFoundException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: delete_firewall_manager_rule_groups(**kwargs)

    

    Deletes all rule groups that are managed by Firewall Manager for the specified web ACL. 

     

    You can only use this if ``ManagedByFirewallManager`` is false in the specified  WebACL . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DeleteFirewallManagerRuleGroups>`_    


    **Request Syntax** 
    ::

      response = client.delete_firewall_manager_rule_groups(
          WebACLArn='string',
          WebACLLockToken='string'
      )
    :type WebACLArn: string
    :param WebACLArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the web ACL.

      

    
    :type WebACLLockToken: string
    :param WebACLLockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextWebACLLockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextWebACLLockToken** *(string) --* 

          A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: delete_ip_set(**kwargs)

    

    Deletes the specified  IPSet . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DeleteIPSet>`_    


    **Request Syntax** 
    ::

      response = client.delete_ip_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          LockToken='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFAssociatedItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: delete_logging_configuration(**kwargs)

    

    Deletes the  LoggingConfiguration from the specified web ACL.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DeleteLoggingConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.delete_logging_configuration(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the web ACL from which you want to delete the  LoggingConfiguration .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: delete_permission_policy(**kwargs)

    

    Permanently deletes an IAM policy from the specified rule group.

     

    You must be the owner of the rule group to perform this operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DeletePermissionPolicy>`_    


    **Request Syntax** 
    ::

      response = client.delete_permission_policy(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the rule group from which you want to delete the policy.

       

      You must be the owner of the rule group to perform this operation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    

  .. py:method:: delete_regex_pattern_set(**kwargs)

    

    Deletes the specified  RegexPatternSet .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DeleteRegexPatternSet>`_    


    **Request Syntax** 
    ::

      response = client.delete_regex_pattern_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          LockToken='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the set. You cannot change the name after you create the set.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFAssociatedItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: delete_rule_group(**kwargs)

    

    Deletes the specified  RuleGroup .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DeleteRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.delete_rule_group(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          LockToken='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule group. You cannot change the name of a rule group after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFAssociatedItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: delete_web_acl(**kwargs)

    

    Deletes the specified  WebACL .

     

    You can only use this if ``ManagedByFirewallManager`` is false in the specified  WebACL . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DeleteWebACL>`_    


    **Request Syntax** 
    ::

      response = client.delete_web_acl(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          LockToken='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the web ACL. You cannot change the name of a web ACL after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFAssociatedItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: describe_managed_rule_group(**kwargs)

    

    Provides high-level information for a managed rule group, including descriptions of the rules. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DescribeManagedRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.describe_managed_rule_group(
          VendorName='string',
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL'
      )
    :type VendorName: string
    :param VendorName: **[REQUIRED]** 

      The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

      

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Capacity': 123,
            'Rules': [
                {
                    'Name': 'string',
                    'Action': {
                        'Block': {
                            'CustomResponse': {
                                'ResponseCode': 123,
                                'CustomResponseBodyKey': 'string',
                                'ResponseHeaders': [
                                    {
                                        'Name': 'string',
                                        'Value': 'string'
                                    },
                                ]
                            }
                        },
                        'Allow': {
                            'CustomRequestHandling': {
                                'InsertHeaders': [
                                    {
                                        'Name': 'string',
                                        'Value': 'string'
                                    },
                                ]
                            }
                        },
                        'Count': {
                            'CustomRequestHandling': {
                                'InsertHeaders': [
                                    {
                                        'Name': 'string',
                                        'Value': 'string'
                                    },
                                ]
                            }
                        }
                    }
                },
            ],
            'LabelNamespace': 'string',
            'AvailableLabels': [
                {
                    'Name': 'string'
                },
            ],
            'ConsumedLabels': [
                {
                    'Name': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Capacity** *(integer) --* 

          The web ACL capacity units (WCUs) required for this rule group. WAF uses web ACL capacity units (WCU) to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect each rule's relative cost. Rule group capacity is fixed at creation, so users can plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500. 

          
        

        - **Rules** *(list) --* 

          

          
          

          - *(dict) --* 

            High-level information about a  Rule , returned by operations like  DescribeManagedRuleGroup . This provides information like the ID, that you can use to retrieve and manage a ``RuleGroup`` , and the ARN, that you provide to the  RuleGroupReferenceStatement to use the rule group in a  Rule .

            
            

            - **Name** *(string) --* 

              The name of the rule. 

              
            

            - **Action** *(dict) --* 

              The action that WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting. 

              
              

              - **Block** *(dict) --* 

                Instructs WAF to block the web request.

                
                

                - **CustomResponse** *(dict) --* 

                  Defines a custom response for the web request.

                   

                  For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                  

                  - **ResponseCode** *(integer) --* 

                    The HTTP status code to return to the client. 

                     

                    For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                  

                  - **CustomResponseBodyKey** *(string) --* 

                    References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                    
                  

                  - **ResponseHeaders** *(list) --* 

                    The HTTP headers to use in the response. Duplicate header names are not allowed. 

                     

                    For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - *(dict) --* 

                      A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                      
                      

                      - **Name** *(string) --* 

                        The name of the custom header. 

                         

                        For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                        
                      

                      - **Value** *(string) --* 

                        The value of the custom header.

                        
                  
                
              
            
              

              - **Allow** *(dict) --* 

                Instructs WAF to allow the web request.

                
                

                - **CustomRequestHandling** *(dict) --* 

                  Defines custom handling for the web request.

                   

                  For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                  

                  - **InsertHeaders** *(list) --* 

                    The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                     

                    For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - *(dict) --* 

                      A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                      
                      

                      - **Name** *(string) --* 

                        The name of the custom header. 

                         

                        For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                        
                      

                      - **Value** *(string) --* 

                        The value of the custom header.

                        
                  
                
              
            
              

              - **Count** *(dict) --* 

                Instructs WAF to count the web request and allow it.

                
                

                - **CustomRequestHandling** *(dict) --* 

                  Defines custom handling for the web request.

                   

                  For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                  

                  - **InsertHeaders** *(list) --* 

                    The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                     

                    For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - *(dict) --* 

                      A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                      
                      

                      - **Name** *(string) --* 

                        The name of the custom header. 

                         

                        For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                        
                      

                      - **Value** *(string) --* 

                        The value of the custom header.

                        
                  
                
              
            
          
        
      
        

        - **LabelNamespace** *(string) --* 

          The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. 

           

           
          * The syntax for the label namespace prefix for a managed rule group is the following:   ``awswaf:managed:<vendor>:<rule group name>`` : 
           
          * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon:   ``<label namespace>:<label from rule>``   
           

          
        

        - **AvailableLabels** *(list) --* 

          The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the ``RuleLabels`` for a  Rule .

          
          

          - *(dict) --* 

            List of labels used by one or more of the rules of a  RuleGroup . This summary object is used for the following rule group lists: 

             

             
            * ``AvailableLabels`` - Labels that rules add to matching requests. These labels are defined in the ``RuleLabels`` for a  Rule .  
             
            * ``ConsumedLabels`` - Labels that rules match against. These labels are defined in a ``LabelMatchStatement`` specification, in the  Statement definition of a rule.  
             

            
            

            - **Name** *(string) --* 

              An individual label specification.

              
        
      
        

        - **ConsumedLabels** *(list) --* 

          The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a ``LabelMatchStatement`` specification, in the  Statement definition of a rule. 

          
          

          - *(dict) --* 

            List of labels used by one or more of the rules of a  RuleGroup . This summary object is used for the following rule group lists: 

             

             
            * ``AvailableLabels`` - Labels that rules add to matching requests. These labels are defined in the ``RuleLabels`` for a  Rule .  
             
            * ``ConsumedLabels`` - Labels that rules match against. These labels are defined in a ``LabelMatchStatement`` specification, in the  Statement definition of a rule.  
             

            
            

            - **Name** *(string) --* 

              An individual label specification.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidResourceException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: disassociate_web_acl(**kwargs)

    

    Disassociates a web ACL from a regional application resource. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

     

    For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To disassociate a web ACL, provide an empty web ACL ID in the CloudFront call ``UpdateDistribution`` . For information, see `UpdateDistribution <https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/DisassociateWebACL>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_web_acl(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource to disassociate from the web ACL. 

       

      The ARN must be in one of the following formats:

       

       
      * For an Application Load Balancer: ``arn:aws:elasticloadbalancing:*region* :*account-id* :loadbalancer/app/*load-balancer-name* /*load-balancer-id* ``   
       
      * For an Amazon API Gateway REST API: ``arn:aws:apigateway:*region* ::/restapis/*api-id* /stages/*stage-name* ``   
       
      * For an AppSync GraphQL API: ``arn:aws:appsync:*region* :*account-id* :apis/*GraphQLApiId* ``   
       

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_ip_set(**kwargs)

    

    Retrieves the specified  IPSet .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetIPSet>`_    


    **Request Syntax** 
    ::

      response = client.get_ip_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IPSet': {
                'Name': 'string',
                'Id': 'string',
                'ARN': 'string',
                'Description': 'string',
                'IPAddressVersion': 'IPV4'|'IPV6',
                'Addresses': [
                    'string',
                ]
            },
            'LockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IPSet** *(dict) --* 

          

          
          

          - **Name** *(string) --* 

            The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.

            
          

          - **Id** *(string) --* 

            A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the entity.

            
          

          - **Description** *(string) --* 

            A description of the IP set that helps with identification. 

            
          

          - **IPAddressVersion** *(string) --* 

            Specify IPV4 or IPV6. 

            
          

          - **Addresses** *(list) --* 

            Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. 

             

            Examples: 

             

             
            * To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify ``192.0.2.44/32`` . 
             
            * To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . 
             
            * To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . 
             
            * To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . 
             

             

            For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`__ .

            
            

            - *(string) --* 
        
      
        

        - **LockToken** *(string) --* 

          A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: get_logging_configuration(**kwargs)

    

    Returns the  LoggingConfiguration for the specified web ACL.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetLoggingConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_logging_configuration(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the web ACL for which you want to get the  LoggingConfiguration .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LoggingConfiguration': {
                'ResourceArn': 'string',
                'LogDestinationConfigs': [
                    'string',
                ],
                'RedactedFields': [
                    {
                        'SingleHeader': {
                            'Name': 'string'
                        },
                        'SingleQueryArgument': {
                            'Name': 'string'
                        },
                        'AllQueryArguments': {},
                        'UriPath': {},
                        'QueryString': {},
                        'Body': {},
                        'Method': {},
                        'JsonBody': {
                            'MatchPattern': {
                                'All': {},
                                'IncludedPaths': [
                                    'string',
                                ]
                            },
                            'MatchScope': 'ALL'|'KEY'|'VALUE',
                            'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                        }
                    },
                ],
                'ManagedByFirewallManager': True|False,
                'LoggingFilter': {
                    'Filters': [
                        {
                            'Behavior': 'KEEP'|'DROP',
                            'Requirement': 'MEETS_ALL'|'MEETS_ANY',
                            'Conditions': [
                                {
                                    'ActionCondition': {
                                        'Action': 'ALLOW'|'BLOCK'|'COUNT'
                                    },
                                    'LabelNameCondition': {
                                        'LabelName': 'string'
                                    }
                                },
                            ]
                        },
                    ],
                    'DefaultBehavior': 'KEEP'|'DROP'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LoggingConfiguration** *(dict) --* 

          The  LoggingConfiguration for the specified web ACL.

          
          

          - **ResourceArn** *(string) --* 

            The Amazon Resource Name (ARN) of the web ACL that you want to associate with ``LogDestinationConfigs`` .

            
          

          - **LogDestinationConfigs** *(list) --* 

            The Amazon Kinesis Data Firehose Amazon Resource Name (ARNs) that you want to associate with the web ACL.

            
            

            - *(string) --* 
        
          

          - **RedactedFields** *(list) --* 

            The parts of the request that you want to keep out of the logs. For example, if you redact the ``HEADER`` field, the ``HEADER`` field in the firehose will be ``xxx`` . 

             

            .. note::

               

              You must use one of the following values: ``URI`` , ``QUERY_STRING`` , ``HEADER`` , or ``METHOD`` .

               

            
            

            - *(dict) --* 

              The part of a web request that you want WAF to inspect. Include the single ``FieldToMatch`` type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in ``FieldToMatch`` for each rule statement that requires it. To inspect more than one component of a web request, create a separate rule statement for each component.

              
              

              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                
                

                - **Name** *(string) --* 

                  The name of the query header to inspect.

                  
            
              

              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                
                

                - **Name** *(string) --* 

                  The name of the query argument to inspect.

                  
            
              

              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                
            
              

              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                
            
              

              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                
            
              

              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                
            
              

              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                
            
              

              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                
                

                - **MatchPattern** *(dict) --* 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  
                  

                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    
                
                  

                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    
                    

                    - *(string) --* 
                
              
                

                - **MatchScope** *(string) --* 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  
                

                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  
            
          
        
          

          - **ManagedByFirewallManager** *(boolean) --* 

            Indicates whether the logging configuration was created by Firewall Manager, as part of an WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration. 

            
          

          - **LoggingFilter** *(dict) --* 

            Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation. 

            
            

            - **Filters** *(list) --* 

              The filters that you want to apply to the logs. 

              
              

              - *(dict) --* 

                A single logging filter, used in  LoggingFilter . 

                
                

                - **Behavior** *(string) --* 

                  How to handle logs that satisfy the filter's conditions and requirement. 

                  
                

                - **Requirement** *(string) --* 

                  Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.

                  
                

                - **Conditions** *(list) --* 

                  Match conditions for the filter.

                  
                  

                  - *(dict) --* 

                    A single match condition for a  Filter .

                    
                    

                    - **ActionCondition** *(dict) --* 

                      A single action condition.

                      
                      

                      - **Action** *(string) --* 

                        The action setting that a log record must contain in order to meet the condition. 

                        
                  
                    

                    - **LabelNameCondition** *(dict) --* 

                      A single label name condition.

                      
                      

                      - **LabelName** *(string) --* 

                        The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 

                        
                  
                
              
            
          
            

            - **DefaultBehavior** *(string) --* 

              Default handling for logs that don't match any of the specified filtering conditions. 

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_permission_policy(**kwargs)

    

    Returns the IAM policy that is attached to the specified rule group.

     

    You must be the owner of the rule group to perform this operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetPermissionPolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_permission_policy(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the rule group for which you want to get the policy.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Policy': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Policy** *(string) --* 

          The IAM policy that is attached to the specified rule group.

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    

  .. py:method:: get_rate_based_statement_managed_keys(**kwargs)

    

    Retrieves the keys that are currently blocked by a rate-based rule. The maximum number of managed keys that can be blocked for a single rate-based rule is 10,000. If more than 10,000 addresses exceed the rate limit, those with the highest rates are blocked.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetRateBasedStatementManagedKeys>`_    


    **Request Syntax** 
    ::

      response = client.get_rate_based_statement_managed_keys(
          Scope='CLOUDFRONT'|'REGIONAL',
          WebACLName='string',
          WebACLId='string',
          RuleName='string'
      )
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type WebACLName: string
    :param WebACLName: **[REQUIRED]** 

      The name of the web ACL. You cannot change the name of a web ACL after you create it.

      

    
    :type WebACLId: string
    :param WebACLId: **[REQUIRED]** 

      The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type RuleName: string
    :param RuleName: **[REQUIRED]** 

      The name of the rate-based rule to get the keys for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ManagedKeysIPV4': {
                'IPAddressVersion': 'IPV4'|'IPV6',
                'Addresses': [
                    'string',
                ]
            },
            'ManagedKeysIPV6': {
                'IPAddressVersion': 'IPV4'|'IPV6',
                'Addresses': [
                    'string',
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ManagedKeysIPV4** *(dict) --* 

          The keys that are of Internet Protocol version 4 (IPv4). 

          
          

          - **IPAddressVersion** *(string) --* 
          

          - **Addresses** *(list) --* 

            The IP addresses that are currently blocked.

            
            

            - *(string) --* 
        
      
        

        - **ManagedKeysIPV6** *(dict) --* 

          The keys that are of Internet Protocol version 6 (IPv6). 

          
          

          - **IPAddressVersion** *(string) --* 
          

          - **Addresses** *(list) --* 

            The IP addresses that are currently blocked.

            
            

            - *(string) --* 
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: get_regex_pattern_set(**kwargs)

    

    Retrieves the specified  RegexPatternSet .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetRegexPatternSet>`_    


    **Request Syntax** 
    ::

      response = client.get_regex_pattern_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the set. You cannot change the name after you create the set.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RegexPatternSet': {
                'Name': 'string',
                'Id': 'string',
                'ARN': 'string',
                'Description': 'string',
                'RegularExpressionList': [
                    {
                        'RegexString': 'string'
                    },
                ]
            },
            'LockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RegexPatternSet** *(dict) --* 

          

          
          

          - **Name** *(string) --* 

            The name of the set. You cannot change the name after you create the set.

            
          

          - **Id** *(string) --* 

            A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the entity.

            
          

          - **Description** *(string) --* 

            A description of the set that helps with identification. 

            
          

          - **RegularExpressionList** *(list) --* 

            The regular expression patterns in the set.

            
            

            - *(dict) --* 

              A single regular expression. This is used in a  RegexPatternSet .

              
              

              - **RegexString** *(string) --* 

                The string representing the regular expression.

                
          
        
      
        

        - **LockToken** *(string) --* 

          A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: get_rule_group(**kwargs)

    

    Retrieves the specified  RuleGroup .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.get_rule_group(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          ARN='string'
      )
    :type Name: string
    :param Name: 

      The name of the rule group. You cannot change the name of a rule group after you create it.

      

    
    :type Scope: string
    :param Scope: 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: 

      A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type ARN: string
    :param ARN: 

      The Amazon Resource Name (ARN) of the entity.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RuleGroup': {
                'Name': 'string',
                'Id': 'string',
                'Capacity': 123,
                'ARN': 'string',
                'Description': 'string',
                'Rules': [
                    {
                        'Name': 'string',
                        'Priority': 123,
                        'Statement': {
                            'ByteMatchStatement': {
                                'SearchString': b'bytes',
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ],
                                'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                            },
                            'SqliMatchStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'XssMatchStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'SizeConstraintStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                                'Size': 123,
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'GeoMatchStatement': {
                                'CountryCodes': [
                                    'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                                ],
                                'ForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                }
                            },
                            'RuleGroupReferenceStatement': {
                                'ARN': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ]
                            },
                            'IPSetReferenceStatement': {
                                'ARN': 'string',
                                'IPSetForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH',
                                    'Position': 'FIRST'|'LAST'|'ANY'
                                }
                            },
                            'RegexPatternSetReferenceStatement': {
                                'ARN': 'string',
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'RateBasedStatement': {
                                'Limit': 123,
                                'AggregateKeyType': 'IP'|'FORWARDED_IP',
                                'ScopeDownStatement': {'... recursive ...'},
                                'ForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                }
                            },
                            'AndStatement': {
                                'Statements': [
                                    {'... recursive ...'},
                                ]
                            },
                            'OrStatement': {
                                'Statements': [
                                    {'... recursive ...'},
                                ]
                            },
                            'NotStatement': {
                                'Statement': {'... recursive ...'}
                            },
                            'ManagedRuleGroupStatement': {
                                'VendorName': 'string',
                                'Name': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ],
                                'ScopeDownStatement': {'... recursive ...'}
                            },
                            'LabelMatchStatement': {
                                'Scope': 'LABEL'|'NAMESPACE',
                                'Key': 'string'
                            }
                        },
                        'Action': {
                            'Block': {
                                'CustomResponse': {
                                    'ResponseCode': 123,
                                    'CustomResponseBodyKey': 'string',
                                    'ResponseHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'Allow': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            }
                        },
                        'OverrideAction': {
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'None': {}
                        },
                        'RuleLabels': [
                            {
                                'Name': 'string'
                            },
                        ],
                        'VisibilityConfig': {
                            'SampledRequestsEnabled': True|False,
                            'CloudWatchMetricsEnabled': True|False,
                            'MetricName': 'string'
                        }
                    },
                ],
                'VisibilityConfig': {
                    'SampledRequestsEnabled': True|False,
                    'CloudWatchMetricsEnabled': True|False,
                    'MetricName': 'string'
                },
                'LabelNamespace': 'string',
                'CustomResponseBodies': {
                    'string': {
                        'ContentType': 'TEXT_PLAIN'|'TEXT_HTML'|'APPLICATION_JSON',
                        'Content': 'string'
                    }
                },
                'AvailableLabels': [
                    {
                        'Name': 'string'
                    },
                ],
                'ConsumedLabels': [
                    {
                        'Name': 'string'
                    },
                ]
            },
            'LockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RuleGroup** *(dict) --* 

          

          
          

          - **Name** *(string) --* 

            The name of the rule group. You cannot change the name of a rule group after you create it.

            
          

          - **Id** *(string) --* 

            A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

            
          

          - **Capacity** *(integer) --* 

            The web ACL capacity units (WCUs) required for this rule group.

             

            When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity for a set of rules using  CheckCapacity .

             

            WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500. 

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the entity.

            
          

          - **Description** *(string) --* 

            A description of the rule group that helps with identification. 

            
          

          - **Rules** *(list) --* 

            The  Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

            
            

            - *(dict) --* 

              A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

              
              

              - **Name** *(string) --* 

                The name of the rule. You can't change the name of a ``Rule`` after you create it. 

                
              

              - **Priority** *(integer) --* 

                If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

                
              

              - **Statement** *(dict) --* 

                The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

                
                

                - **ByteMatchStatement** *(dict) --* 

                  A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

                  
                  

                  - **SearchString** *(bytes) --* 

                    A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

                     

                    Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

                     

                     
                    * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
                     
                    * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
                     

                     

                    If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

                     

                     **If you're using the WAF API**  

                     

                    Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

                     

                    For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

                     

                     **If you're using the CLI or one of the Amazon Web Services SDKs**  

                     

                    The value that you want WAF to search for. The SDK automatically base64 encodes the value.

                    
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
                  

                  - **PositionalConstraint** *(string) --* 

                    The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

                     

                     **CONTAINS**  

                     

                    The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

                     

                     **CONTAINS_WORD**  

                     

                    The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

                     

                     
                    * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
                     
                    * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
                     

                     

                     **EXACTLY**  

                     

                    The value of the specified part of the web request must exactly match the value of ``SearchString`` .

                     

                     **STARTS_WITH**  

                     

                    The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

                     

                     **ENDS_WITH**  

                     

                    The value of ``SearchString`` must appear at the end of the specified part of the web request.

                    
              
                

                - **SqliMatchStatement** *(dict) --* 

                  Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **XssMatchStatement** *(dict) --* 

                  A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **SizeConstraintStatement** *(dict) --* 

                  A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

                   

                  If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

                   

                  If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **ComparisonOperator** *(string) --* 

                    The operator to use to compare the request part to the size setting. 

                    
                  

                  - **Size** *(integer) --* 

                    The size, in byte, to compare to the request part, after any transformations.

                    
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **GeoMatchStatement** *(dict) --* 

                  A rule statement used to identify web requests based on country of origin. 

                  
                  

                  - **CountryCodes** *(list) --* 

                    An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

                    
                    

                    - *(string) --* 
                
                  

                  - **ForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                
              
                

                - **RuleGroupReferenceStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                   

                  You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the entity.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
              
                

                - **IPSetReferenceStatement** *(dict) --* 

                  A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

                   

                  Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the  IPSet that this statement references.

                    
                  

                  - **IPSetForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                    

                    - **Position** *(string) --* 

                      The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                       

                      The options for this setting are the following: 

                       

                       
                      * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                       
                      * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                       
                      * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                       

                      
                
              
                

                - **RegexPatternSetReferenceStatement** *(dict) --* 

                  A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

                   

                  Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

                    
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **RateBasedStatement** *(dict) --* 

                  A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

                   

                  When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

                   

                  You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

                   

                   
                  * An IP match statement with an IP set that specified the address 192.0.2.44. 
                   
                  * A string match statement that searches in the User-Agent header for the string BadBot. 
                   

                   

                  In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

                   

                  You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **Limit** *(integer) --* 

                    The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

                    
                  

                  - **AggregateKeyType** *(string) --* 

                    Setting that indicates how to aggregate the request counts. The options are the following:

                     

                     
                    * IP - Aggregate the request counts on the IP address from the web request origin. 
                     
                    * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
                     

                    
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
                  

                  - **ForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                     

                    This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                
              
                

                - **AndStatement** *(dict) --* 

                  A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

                  
                  

                  - **Statements** *(list) --* 

                    The statements to combine with AND logic. You can use any statements that can be nested. 

                    
                    

                    - *(dict) --* 

                      The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                      
                
              
                

                - **OrStatement** *(dict) --* 

                  A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

                  
                  

                  - **Statements** *(list) --* 

                    The statements to combine with OR logic. You can use any statements that can be nested.

                    
                    

                    - *(dict) --* 

                      The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                      
                
              
                

                - **NotStatement** *(dict) --* 

                  A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

                  
                  

                  - **Statement** *(dict) --* 

                    The statement to negate. You can use any statement that can be nested.

                    
              
                

                - **ManagedRuleGroupStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                   

                  You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **VendorName** *(string) --* 

                    The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

                    
                  

                  - **Name** *(string) --* 

                    The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
              
                

                - **LabelMatchStatement** *(dict) --* 

                  A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

                   

                  The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

                  
                  

                  - **Scope** *(string) --* 

                    Specify whether you want to match using the label name or just the namespace. 

                    
                  

                  - **Key** *(string) --* 

                    The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

                     

                     
                    * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
                     
                    * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
                     

                     

                    Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

                    
              
            
              

              - **Action** *(dict) --* 

                The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

                 

                This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

                 

                 
                * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
                 
                * If the rule statement references a rule group, use the override action setting and not this action setting.  
                 

                
                

                - **Block** *(dict) --* 

                  Instructs WAF to block the web request.

                  
                  

                  - **CustomResponse** *(dict) --* 

                    Defines a custom response for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **ResponseCode** *(integer) --* 

                      The HTTP status code to return to the client. 

                       

                      For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                    

                    - **CustomResponseBodyKey** *(string) --* 

                      References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                      
                    

                    - **ResponseHeaders** *(list) --* 

                      The HTTP headers to use in the response. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **Allow** *(dict) --* 

                  Instructs WAF to allow the web request.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **Count** *(dict) --* 

                  Instructs WAF to count the web request and allow it.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
            
              

              - **OverrideAction** *(dict) --* 

                The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

                 

                In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

                 

                 
                * If the rule statement references a rule group, use this override action setting and not the action setting.  
                 
                * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
                 

                
                

                - **Count** *(dict) --* 

                  Override the rule action setting to count.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **None** *(dict) --* 

                  Don't override the rule action setting.

                  
              
            
              

              - **RuleLabels** *(list) --* 

                Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

                 

                Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

                 

                For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

                 

                 
                * Separate each component of the label with a colon.  
                 
                * Each namespace or name can have up to 128 characters. 
                 
                * You can specify up to 5 namespaces in a label. 
                 
                * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
                 

                 

                For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

                
                

                - *(dict) --* 

                  A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

                  
                  

                  - **Name** *(string) --* 

                    The label string. 

                    
              
            
              

              - **VisibilityConfig** *(dict) --* 

                Defines and enables Amazon CloudWatch metrics and web request sample collection. 

                
                

                - **SampledRequestsEnabled** *(boolean) --* 

                  A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

                  
                

                - **CloudWatchMetricsEnabled** *(boolean) --* 

                  A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

                  
                

                - **MetricName** *(string) --* 

                  A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

                  
            
          
        
          

          - **VisibilityConfig** *(dict) --* 

            Defines and enables Amazon CloudWatch metrics and web request sample collection. 

            
            

            - **SampledRequestsEnabled** *(boolean) --* 

              A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

              
            

            - **CloudWatchMetricsEnabled** *(boolean) --* 

              A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

              
            

            - **MetricName** *(string) --* 

              A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

              
        
          

          - **LabelNamespace** *(string) --* 

            The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. 

             

             
            * The syntax for the label namespace prefix for your rule groups is the following:   ``awswaf:<account ID>:rulegroup:<rule group name>:``   
             
            * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon:   ``<label namespace>:<label from rule>``   
             

            
          

          - **CustomResponseBodies** *(dict) --* 

            A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. 

             

            For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            
            

            - *(string) --* 
              

              - *(dict) --* 

                The response body to use in a custom response to a web request. This is referenced by key from  CustomResponse  ``CustomResponseBodyKey`` .

                
                

                - **ContentType** *(string) --* 

                  The type of content in the payload that you are defining in the ``Content`` string.

                  
                

                - **Content** *(string) --* 

                  The payload of the custom response. 

                   

                  You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. 

                   

                  For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
            
        
      
          

          - **AvailableLabels** *(list) --* 

            The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the ``RuleLabels`` for a  Rule .

            
            

            - *(dict) --* 

              List of labels used by one or more of the rules of a  RuleGroup . This summary object is used for the following rule group lists: 

               

               
              * ``AvailableLabels`` - Labels that rules add to matching requests. These labels are defined in the ``RuleLabels`` for a  Rule .  
               
              * ``ConsumedLabels`` - Labels that rules match against. These labels are defined in a ``LabelMatchStatement`` specification, in the  Statement definition of a rule.  
               

              
              

              - **Name** *(string) --* 

                An individual label specification.

                
          
        
          

          - **ConsumedLabels** *(list) --* 

            The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a ``LabelMatchStatement`` specification, in the  Statement definition of a rule. 

            
            

            - *(dict) --* 

              List of labels used by one or more of the rules of a  RuleGroup . This summary object is used for the following rule group lists: 

               

               
              * ``AvailableLabels`` - Labels that rules add to matching requests. These labels are defined in the ``RuleLabels`` for a  Rule .  
               
              * ``ConsumedLabels`` - Labels that rules match against. These labels are defined in a ``LabelMatchStatement`` specification, in the  Statement definition of a rule.  
               

              
              

              - **Name** *(string) --* 

                An individual label specification.

                
          
        
      
        

        - **LockToken** *(string) --* 

          A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: get_sampled_requests(**kwargs)

    

    Gets detailed information about a specified number of requests--a sample--that WAF randomly selects from among the first 5,000 requests that your Amazon Web Services resource received during a time range that you choose. You can specify a sample size of up to 500 requests, and you can specify any time range in the previous three hours.

     

     ``GetSampledRequests`` returns a time range, which is usually the time range that you specified. However, if your resource (such as a CloudFront distribution) received 5,000 requests before the specified time range elapsed, ``GetSampledRequests`` returns an updated time range. This new time range indicates the actual period during which WAF selected the requests in the sample.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetSampledRequests>`_    


    **Request Syntax** 
    ::

      response = client.get_sampled_requests(
          WebAclArn='string',
          RuleMetricName='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          TimeWindow={
              'StartTime': datetime(2015, 1, 1),
              'EndTime': datetime(2015, 1, 1)
          },
          MaxItems=123
      )
    :type WebAclArn: string
    :param WebAclArn: **[REQUIRED]** 

      The Amazon resource name (ARN) of the ``WebACL`` for which you want a sample of requests.

      

    
    :type RuleMetricName: string
    :param RuleMetricName: **[REQUIRED]** 

      The metric name assigned to the ``Rule`` or ``RuleGroup`` for which you want a sample of requests.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type TimeWindow: dict
    :param TimeWindow: **[REQUIRED]** 

      The start date and time and the end date and time of the range for which you want ``GetSampledRequests`` to return a sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, ``Z`` . For example, ``"2016-09-27T14:50Z"`` . You can specify any time range in the previous three hours. If you specify a start time that's earlier than three hours ago, WAF sets it to three hours ago.

      

    
      - **StartTime** *(datetime) --* **[REQUIRED]** 

        The beginning of the time range from which you want ``GetSampledRequests`` to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, ``Z`` . For example, ``"2016-09-27T14:50Z"`` . You can specify any time range in the previous three hours.

        

      
      - **EndTime** *(datetime) --* **[REQUIRED]** 

        The end of the time range from which you want ``GetSampledRequests`` to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, ``Z`` . For example, ``"2016-09-27T14:50Z"`` . You can specify any time range in the previous three hours.

        

      
    
    :type MaxItems: integer
    :param MaxItems: **[REQUIRED]** 

      The number of requests that you want WAF to return from among the first 5,000 requests that your Amazon Web Services resource received during the time range. If your resource received fewer requests than the value of ``MaxItems`` , ``GetSampledRequests`` returns information about all of them. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SampledRequests': [
                {
                    'Request': {
                        'ClientIP': 'string',
                        'Country': 'string',
                        'URI': 'string',
                        'Method': 'string',
                        'HTTPVersion': 'string',
                        'Headers': [
                            {
                                'Name': 'string',
                                'Value': 'string'
                            },
                        ]
                    },
                    'Weight': 123,
                    'Timestamp': datetime(2015, 1, 1),
                    'Action': 'string',
                    'RuleNameWithinRuleGroup': 'string',
                    'RequestHeadersInserted': [
                        {
                            'Name': 'string',
                            'Value': 'string'
                        },
                    ],
                    'ResponseCodeSent': 123,
                    'Labels': [
                        {
                            'Name': 'string'
                        },
                    ]
                },
            ],
            'PopulationSize': 123,
            'TimeWindow': {
                'StartTime': datetime(2015, 1, 1),
                'EndTime': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **SampledRequests** *(list) --* 

          A complex type that contains detailed information about each of the requests in the sample.

          
          

          - *(dict) --* 

            Represents a single sampled web request. The response from  GetSampledRequests includes a ``SampledHTTPRequests`` complex type that appears as ``SampledRequests`` in the response syntax. ``SampledHTTPRequests`` contains an array of ``SampledHTTPRequest`` objects.

            
            

            - **Request** *(dict) --* 

              A complex type that contains detailed information about the request.

              
              

              - **ClientIP** *(string) --* 

                The IP address that the request originated from. If the web ACL is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:

                 

                 
                * ``c-ip`` , if the viewer did not use an HTTP proxy or a load balancer to send the request 
                 
                * ``x-forwarded-for`` , if the viewer did use an HTTP proxy or a load balancer to send the request 
                 

                
              

              - **Country** *(string) --* 

                The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry `ISO 3166-1 alpha-2 <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`__ .

                
              

              - **URI** *(string) --* 

                The URI path of the request, which identifies the resource, for example, ``/images/daily-ad.jpg`` .

                
              

              - **Method** *(string) --* 

                The HTTP method specified in the sampled web request. 

                
              

              - **HTTPVersion** *(string) --* 

                The HTTP version specified in the sampled web request, for example, ``HTTP/1.1`` .

                
              

              - **Headers** *(list) --* 

                A complex type that contains the name and value for each header in the sampled web request.

                
                

                - *(dict) --* 

                  Part of the response from  GetSampledRequests . This is a complex type that appears as ``Headers`` in the response syntax. ``HTTPHeader`` contains the names and values of all of the headers that appear in one of the web requests. 

                  
                  

                  - **Name** *(string) --* 

                    The name of the HTTP header.

                    
                  

                  - **Value** *(string) --* 

                    The value of the HTTP header.

                    
              
            
          
            

            - **Weight** *(integer) --* 

              A value that indicates how one result in the response relates proportionally to other results in the response. For example, a result that has a weight of ``2`` represents roughly twice as many web requests as a result that has a weight of ``1`` .

              
            

            - **Timestamp** *(datetime) --* 

              The time at which WAF received the request from your Amazon Web Services resource, in Unix time format (in seconds).

              
            

            - **Action** *(string) --* 

              The action for the ``Rule`` that the request matched: ``ALLOW`` , ``BLOCK`` , or ``COUNT`` .

              
            

            - **RuleNameWithinRuleGroup** *(string) --* 

              The name of the ``Rule`` that the request matched. For managed rule groups, the format for this name is ``<vendor name>#<managed rule group name>#<rule name>`` . For your own rule groups, the format for this name is ``<rule group name>#<rule name>`` . If the rule is not in a rule group, this field is absent. 

              
            

            - **RequestHeadersInserted** *(list) --* 

              Custom request headers inserted by WAF into the request, according to the custom request configuration for the matching rule action.

              
              

              - *(dict) --* 

                Part of the response from  GetSampledRequests . This is a complex type that appears as ``Headers`` in the response syntax. ``HTTPHeader`` contains the names and values of all of the headers that appear in one of the web requests. 

                
                

                - **Name** *(string) --* 

                  The name of the HTTP header.

                  
                

                - **Value** *(string) --* 

                  The value of the HTTP header.

                  
            
          
            

            - **ResponseCodeSent** *(integer) --* 

              The response code that was sent for the request.

              
            

            - **Labels** *(list) --* 

              Labels applied to the web request by matching rules. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

               

              For example, ``awswaf:111122223333:myRuleGroup:testRules:testNS1:testNS2:labelNameA`` or ``awswaf:managed:aws:managed-rule-set:header:encoding:utf8`` . 

              
              

              - *(dict) --* 

                A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

                
                

                - **Name** *(string) --* 

                  The label string. 

                  
            
          
        
      
        

        - **PopulationSize** *(integer) --* 

          The total number of requests from which ``GetSampledRequests`` got a sample of ``MaxItems`` requests. If ``PopulationSize`` is less than ``MaxItems`` , the sample includes every request that your Amazon Web Services resource received during the specified time range.

          
        

        - **TimeWindow** *(dict) --* 

          Usually, ``TimeWindow`` is the time range that you specified in the ``GetSampledRequests`` request. However, if your Amazon Web Services resource received more than 5,000 requests during the time range that you specified in the request, ``GetSampledRequests`` returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.

          
          

          - **StartTime** *(datetime) --* 

            The beginning of the time range from which you want ``GetSampledRequests`` to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, ``Z`` . For example, ``"2016-09-27T14:50Z"`` . You can specify any time range in the previous three hours.

            
          

          - **EndTime** *(datetime) --* 

            The end of the time range from which you want ``GetSampledRequests`` to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, ``Z`` . For example, ``"2016-09-27T14:50Z"`` . You can specify any time range in the previous three hours.

            
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: get_web_acl(**kwargs)

    

    Retrieves the specified  WebACL .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetWebACL>`_    


    **Request Syntax** 
    ::

      response = client.get_web_acl(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the web ACL. You cannot change the name of a web ACL after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WebACL': {
                'Name': 'string',
                'Id': 'string',
                'ARN': 'string',
                'DefaultAction': {
                    'Block': {
                        'CustomResponse': {
                            'ResponseCode': 123,
                            'CustomResponseBodyKey': 'string',
                            'ResponseHeaders': [
                                {
                                    'Name': 'string',
                                    'Value': 'string'
                                },
                            ]
                        }
                    },
                    'Allow': {
                        'CustomRequestHandling': {
                            'InsertHeaders': [
                                {
                                    'Name': 'string',
                                    'Value': 'string'
                                },
                            ]
                        }
                    }
                },
                'Description': 'string',
                'Rules': [
                    {
                        'Name': 'string',
                        'Priority': 123,
                        'Statement': {
                            'ByteMatchStatement': {
                                'SearchString': b'bytes',
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ],
                                'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                            },
                            'SqliMatchStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'XssMatchStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'SizeConstraintStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                                'Size': 123,
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'GeoMatchStatement': {
                                'CountryCodes': [
                                    'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                                ],
                                'ForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                }
                            },
                            'RuleGroupReferenceStatement': {
                                'ARN': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ]
                            },
                            'IPSetReferenceStatement': {
                                'ARN': 'string',
                                'IPSetForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH',
                                    'Position': 'FIRST'|'LAST'|'ANY'
                                }
                            },
                            'RegexPatternSetReferenceStatement': {
                                'ARN': 'string',
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'RateBasedStatement': {
                                'Limit': 123,
                                'AggregateKeyType': 'IP'|'FORWARDED_IP',
                                'ScopeDownStatement': {'... recursive ...'},
                                'ForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                }
                            },
                            'AndStatement': {
                                'Statements': [
                                    {'... recursive ...'},
                                ]
                            },
                            'OrStatement': {
                                'Statements': [
                                    {'... recursive ...'},
                                ]
                            },
                            'NotStatement': {
                                'Statement': {'... recursive ...'}
                            },
                            'ManagedRuleGroupStatement': {
                                'VendorName': 'string',
                                'Name': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ],
                                'ScopeDownStatement': {'... recursive ...'}
                            },
                            'LabelMatchStatement': {
                                'Scope': 'LABEL'|'NAMESPACE',
                                'Key': 'string'
                            }
                        },
                        'Action': {
                            'Block': {
                                'CustomResponse': {
                                    'ResponseCode': 123,
                                    'CustomResponseBodyKey': 'string',
                                    'ResponseHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'Allow': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            }
                        },
                        'OverrideAction': {
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'None': {}
                        },
                        'RuleLabels': [
                            {
                                'Name': 'string'
                            },
                        ],
                        'VisibilityConfig': {
                            'SampledRequestsEnabled': True|False,
                            'CloudWatchMetricsEnabled': True|False,
                            'MetricName': 'string'
                        }
                    },
                ],
                'VisibilityConfig': {
                    'SampledRequestsEnabled': True|False,
                    'CloudWatchMetricsEnabled': True|False,
                    'MetricName': 'string'
                },
                'Capacity': 123,
                'PreProcessFirewallManagerRuleGroups': [
                    {
                        'Name': 'string',
                        'Priority': 123,
                        'FirewallManagerStatement': {
                            'ManagedRuleGroupStatement': {
                                'VendorName': 'string',
                                'Name': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ],
                                'ScopeDownStatement': {
                                    'ByteMatchStatement': {
                                        'SearchString': b'bytes',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ],
                                        'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                                    },
                                    'SqliMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'XssMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'SizeConstraintStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                                        'Size': 123,
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'GeoMatchStatement': {
                                        'CountryCodes': [
                                            'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                                        ],
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'RuleGroupReferenceStatement': {
                                        'ARN': 'string',
                                        'ExcludedRules': [
                                            {
                                                'Name': 'string'
                                            },
                                        ]
                                    },
                                    'IPSetReferenceStatement': {
                                        'ARN': 'string',
                                        'IPSetForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH',
                                            'Position': 'FIRST'|'LAST'|'ANY'
                                        }
                                    },
                                    'RegexPatternSetReferenceStatement': {
                                        'ARN': 'string',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'RateBasedStatement': {
                                        'Limit': 123,
                                        'AggregateKeyType': 'IP'|'FORWARDED_IP',
                                        'ScopeDownStatement': {'... recursive ...'},
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'AndStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'OrStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'NotStatement': {
                                        'Statement': {'... recursive ...'}
                                    },
                                    'ManagedRuleGroupStatement': {'... recursive ...'},
                                    'LabelMatchStatement': {
                                        'Scope': 'LABEL'|'NAMESPACE',
                                        'Key': 'string'
                                    }
                                }
                            },
                            'RuleGroupReferenceStatement': {
                                'ARN': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ]
                            }
                        },
                        'OverrideAction': {
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'None': {}
                        },
                        'VisibilityConfig': {
                            'SampledRequestsEnabled': True|False,
                            'CloudWatchMetricsEnabled': True|False,
                            'MetricName': 'string'
                        }
                    },
                ],
                'PostProcessFirewallManagerRuleGroups': [
                    {
                        'Name': 'string',
                        'Priority': 123,
                        'FirewallManagerStatement': {
                            'ManagedRuleGroupStatement': {
                                'VendorName': 'string',
                                'Name': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ],
                                'ScopeDownStatement': {
                                    'ByteMatchStatement': {
                                        'SearchString': b'bytes',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ],
                                        'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                                    },
                                    'SqliMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'XssMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'SizeConstraintStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                                        'Size': 123,
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'GeoMatchStatement': {
                                        'CountryCodes': [
                                            'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                                        ],
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'RuleGroupReferenceStatement': {
                                        'ARN': 'string',
                                        'ExcludedRules': [
                                            {
                                                'Name': 'string'
                                            },
                                        ]
                                    },
                                    'IPSetReferenceStatement': {
                                        'ARN': 'string',
                                        'IPSetForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH',
                                            'Position': 'FIRST'|'LAST'|'ANY'
                                        }
                                    },
                                    'RegexPatternSetReferenceStatement': {
                                        'ARN': 'string',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'RateBasedStatement': {
                                        'Limit': 123,
                                        'AggregateKeyType': 'IP'|'FORWARDED_IP',
                                        'ScopeDownStatement': {'... recursive ...'},
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'AndStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'OrStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'NotStatement': {
                                        'Statement': {'... recursive ...'}
                                    },
                                    'ManagedRuleGroupStatement': {'... recursive ...'},
                                    'LabelMatchStatement': {
                                        'Scope': 'LABEL'|'NAMESPACE',
                                        'Key': 'string'
                                    }
                                }
                            },
                            'RuleGroupReferenceStatement': {
                                'ARN': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ]
                            }
                        },
                        'OverrideAction': {
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'None': {}
                        },
                        'VisibilityConfig': {
                            'SampledRequestsEnabled': True|False,
                            'CloudWatchMetricsEnabled': True|False,
                            'MetricName': 'string'
                        }
                    },
                ],
                'ManagedByFirewallManager': True|False,
                'LabelNamespace': 'string',
                'CustomResponseBodies': {
                    'string': {
                        'ContentType': 'TEXT_PLAIN'|'TEXT_HTML'|'APPLICATION_JSON',
                        'Content': 'string'
                    }
                }
            },
            'LockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WebACL** *(dict) --* 

          The web ACL specification. You can modify the settings in this web ACL and use it to update this web ACL or create a new one.

          
          

          - **Name** *(string) --* 

            The name of the web ACL. You cannot change the name of a web ACL after you create it.

            
          

          - **Id** *(string) --* 

            A unique identifier for the ``WebACL`` . This ID is returned in the responses to create and list commands. You use this ID to do things like get, update, and delete a ``WebACL`` .

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.

            
          

          - **DefaultAction** *(dict) --* 

            The action to perform if none of the ``Rules`` contained in the ``WebACL`` match. 

            
            

            - **Block** *(dict) --* 

              Specifies that WAF should block requests by default. 

              
              

              - **CustomResponse** *(dict) --* 

                Defines a custom response for the web request.

                 

                For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                
                

                - **ResponseCode** *(integer) --* 

                  The HTTP status code to return to the client. 

                   

                  For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                

                - **CustomResponseBodyKey** *(string) --* 

                  References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                  
                

                - **ResponseHeaders** *(list) --* 

                  The HTTP headers to use in the response. Duplicate header names are not allowed. 

                   

                  For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                  

                  - *(dict) --* 

                    A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                    
                    

                    - **Name** *(string) --* 

                      The name of the custom header. 

                       

                      For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                      
                    

                    - **Value** *(string) --* 

                      The value of the custom header.

                      
                
              
            
          
            

            - **Allow** *(dict) --* 

              Specifies that WAF should allow requests by default.

              
              

              - **CustomRequestHandling** *(dict) --* 

                Defines custom handling for the web request.

                 

                For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                
                

                - **InsertHeaders** *(list) --* 

                  The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                   

                  For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                  

                  - *(dict) --* 

                    A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                    
                    

                    - **Name** *(string) --* 

                      The name of the custom header. 

                       

                      For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                      
                    

                    - **Value** *(string) --* 

                      The value of the custom header.

                      
                
              
            
          
        
          

          - **Description** *(string) --* 

            A description of the web ACL that helps with identification. 

            
          

          - **Rules** *(list) --* 

            The  Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

            
            

            - *(dict) --* 

              A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

              
              

              - **Name** *(string) --* 

                The name of the rule. You can't change the name of a ``Rule`` after you create it. 

                
              

              - **Priority** *(integer) --* 

                If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

                
              

              - **Statement** *(dict) --* 

                The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

                
                

                - **ByteMatchStatement** *(dict) --* 

                  A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

                  
                  

                  - **SearchString** *(bytes) --* 

                    A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

                     

                    Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

                     

                     
                    * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
                     
                    * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
                     

                     

                    If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

                     

                     **If you're using the WAF API**  

                     

                    Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

                     

                    For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

                     

                     **If you're using the CLI or one of the Amazon Web Services SDKs**  

                     

                    The value that you want WAF to search for. The SDK automatically base64 encodes the value.

                    
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
                  

                  - **PositionalConstraint** *(string) --* 

                    The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

                     

                     **CONTAINS**  

                     

                    The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

                     

                     **CONTAINS_WORD**  

                     

                    The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

                     

                     
                    * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
                     
                    * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
                     

                     

                     **EXACTLY**  

                     

                    The value of the specified part of the web request must exactly match the value of ``SearchString`` .

                     

                     **STARTS_WITH**  

                     

                    The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

                     

                     **ENDS_WITH**  

                     

                    The value of ``SearchString`` must appear at the end of the specified part of the web request.

                    
              
                

                - **SqliMatchStatement** *(dict) --* 

                  Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **XssMatchStatement** *(dict) --* 

                  A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **SizeConstraintStatement** *(dict) --* 

                  A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

                   

                  If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

                   

                  If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **ComparisonOperator** *(string) --* 

                    The operator to use to compare the request part to the size setting. 

                    
                  

                  - **Size** *(integer) --* 

                    The size, in byte, to compare to the request part, after any transformations.

                    
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **GeoMatchStatement** *(dict) --* 

                  A rule statement used to identify web requests based on country of origin. 

                  
                  

                  - **CountryCodes** *(list) --* 

                    An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

                    
                    

                    - *(string) --* 
                
                  

                  - **ForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                
              
                

                - **RuleGroupReferenceStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                   

                  You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the entity.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
              
                

                - **IPSetReferenceStatement** *(dict) --* 

                  A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

                   

                  Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the  IPSet that this statement references.

                    
                  

                  - **IPSetForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                    

                    - **Position** *(string) --* 

                      The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                       

                      The options for this setting are the following: 

                       

                       
                      * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                       
                      * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                       
                      * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                       

                      
                
              
                

                - **RegexPatternSetReferenceStatement** *(dict) --* 

                  A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

                   

                  Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

                    
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **RateBasedStatement** *(dict) --* 

                  A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

                   

                  When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

                   

                  You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

                   

                   
                  * An IP match statement with an IP set that specified the address 192.0.2.44. 
                   
                  * A string match statement that searches in the User-Agent header for the string BadBot. 
                   

                   

                  In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

                   

                  You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **Limit** *(integer) --* 

                    The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

                    
                  

                  - **AggregateKeyType** *(string) --* 

                    Setting that indicates how to aggregate the request counts. The options are the following:

                     

                     
                    * IP - Aggregate the request counts on the IP address from the web request origin. 
                     
                    * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
                     

                    
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
                  

                  - **ForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                     

                    This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                
              
                

                - **AndStatement** *(dict) --* 

                  A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

                  
                  

                  - **Statements** *(list) --* 

                    The statements to combine with AND logic. You can use any statements that can be nested. 

                    
                    

                    - *(dict) --* 

                      The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                      
                
              
                

                - **OrStatement** *(dict) --* 

                  A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

                  
                  

                  - **Statements** *(list) --* 

                    The statements to combine with OR logic. You can use any statements that can be nested.

                    
                    

                    - *(dict) --* 

                      The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                      
                
              
                

                - **NotStatement** *(dict) --* 

                  A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

                  
                  

                  - **Statement** *(dict) --* 

                    The statement to negate. You can use any statement that can be nested.

                    
              
                

                - **ManagedRuleGroupStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                   

                  You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **VendorName** *(string) --* 

                    The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

                    
                  

                  - **Name** *(string) --* 

                    The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
              
                

                - **LabelMatchStatement** *(dict) --* 

                  A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

                   

                  The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

                  
                  

                  - **Scope** *(string) --* 

                    Specify whether you want to match using the label name or just the namespace. 

                    
                  

                  - **Key** *(string) --* 

                    The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

                     

                     
                    * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
                     
                    * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
                     

                     

                    Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

                    
              
            
              

              - **Action** *(dict) --* 

                The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

                 

                This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

                 

                 
                * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
                 
                * If the rule statement references a rule group, use the override action setting and not this action setting.  
                 

                
                

                - **Block** *(dict) --* 

                  Instructs WAF to block the web request.

                  
                  

                  - **CustomResponse** *(dict) --* 

                    Defines a custom response for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **ResponseCode** *(integer) --* 

                      The HTTP status code to return to the client. 

                       

                      For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                    

                    - **CustomResponseBodyKey** *(string) --* 

                      References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                      
                    

                    - **ResponseHeaders** *(list) --* 

                      The HTTP headers to use in the response. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **Allow** *(dict) --* 

                  Instructs WAF to allow the web request.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **Count** *(dict) --* 

                  Instructs WAF to count the web request and allow it.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
            
              

              - **OverrideAction** *(dict) --* 

                The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

                 

                In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

                 

                 
                * If the rule statement references a rule group, use this override action setting and not the action setting.  
                 
                * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
                 

                
                

                - **Count** *(dict) --* 

                  Override the rule action setting to count.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **None** *(dict) --* 

                  Don't override the rule action setting.

                  
              
            
              

              - **RuleLabels** *(list) --* 

                Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

                 

                Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

                 

                For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

                 

                 
                * Separate each component of the label with a colon.  
                 
                * Each namespace or name can have up to 128 characters. 
                 
                * You can specify up to 5 namespaces in a label. 
                 
                * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
                 

                 

                For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

                
                

                - *(dict) --* 

                  A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

                  
                  

                  - **Name** *(string) --* 

                    The label string. 

                    
              
            
              

              - **VisibilityConfig** *(dict) --* 

                Defines and enables Amazon CloudWatch metrics and web request sample collection. 

                
                

                - **SampledRequestsEnabled** *(boolean) --* 

                  A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

                  
                

                - **CloudWatchMetricsEnabled** *(boolean) --* 

                  A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

                  
                

                - **MetricName** *(string) --* 

                  A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

                  
            
          
        
          

          - **VisibilityConfig** *(dict) --* 

            Defines and enables Amazon CloudWatch metrics and web request sample collection. 

            
            

            - **SampledRequestsEnabled** *(boolean) --* 

              A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

              
            

            - **CloudWatchMetricsEnabled** *(boolean) --* 

              A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

              
            

            - **MetricName** *(string) --* 

              A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

              
        
          

          - **Capacity** *(integer) --* 

            The web ACL capacity units (WCUs) currently being used by this web ACL. 

             

            WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500. 

            
          

          - **PreProcessFirewallManagerRuleGroups** *(list) --* 

            The first set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized after these. 

             

            In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.

            
            

            - *(dict) --* 

              A rule group that's defined for an Firewall Manager WAF policy.

              
              

              - **Name** *(string) --* 

                The name of the rule group. You cannot change the name of a rule group after you create it.

                
              

              - **Priority** *(integer) --* 

                If you define more than one rule group in the first or last Firewall Manager rule groups, WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.

                
              

              - **FirewallManagerStatement** *(dict) --* 

                The processing guidance for an Firewall Manager rule. This is like a regular rule  Statement , but it can only contain a rule group reference.

                
                

                - **ManagedRuleGroupStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                   

                  You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **VendorName** *(string) --* 

                    The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

                    
                  

                  - **Name** *(string) --* 

                    The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
                    

                    - **ByteMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

                      
                      

                      - **SearchString** *(bytes) --* 

                        A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

                         

                        Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

                         

                         
                        * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
                         
                        * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
                         

                         

                        If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

                         

                         **If you're using the WAF API**  

                         

                        Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

                         

                        For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

                         

                         **If you're using the CLI or one of the Amazon Web Services SDKs**  

                         

                        The value that you want WAF to search for. The SDK automatically base64 encodes the value.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                      

                      - **PositionalConstraint** *(string) --* 

                        The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

                         

                         **CONTAINS**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

                         

                         **CONTAINS_WORD**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

                         

                         
                        * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
                         
                        * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
                         

                         

                         **EXACTLY**  

                         

                        The value of the specified part of the web request must exactly match the value of ``SearchString`` .

                         

                         **STARTS_WITH**  

                         

                        The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

                         

                         **ENDS_WITH**  

                         

                        The value of ``SearchString`` must appear at the end of the specified part of the web request.

                        
                  
                    

                    - **SqliMatchStatement** *(dict) --* 

                      Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **XssMatchStatement** *(dict) --* 

                      A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **SizeConstraintStatement** *(dict) --* 

                      A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

                       

                      If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

                       

                      If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **ComparisonOperator** *(string) --* 

                        The operator to use to compare the request part to the size setting. 

                        
                      

                      - **Size** *(integer) --* 

                        The size, in byte, to compare to the request part, after any transformations.

                        
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **GeoMatchStatement** *(dict) --* 

                      A rule statement used to identify web requests based on country of origin. 

                      
                      

                      - **CountryCodes** *(list) --* 

                        An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

                        
                        

                        - *(string) --* 
                    
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **RuleGroupReferenceStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                       

                      You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the entity.

                        
                      

                      - **ExcludedRules** *(list) --* 

                        The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                        
                        

                        - *(dict) --* 

                          Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                          
                          

                          - **Name** *(string) --* 

                            The name of the rule to exclude.

                            
                      
                    
                  
                    

                    - **IPSetReferenceStatement** *(dict) --* 

                      A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

                       

                      Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  IPSet that this statement references.

                        
                      

                      - **IPSetForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                        

                        - **Position** *(string) --* 

                          The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                           

                          The options for this setting are the following: 

                           

                           
                          * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                           
                          * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                           
                          * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                           

                          
                    
                  
                    

                    - **RegexPatternSetReferenceStatement** *(dict) --* 

                      A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

                       

                      Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **RateBasedStatement** *(dict) --* 

                      A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

                       

                      When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

                       

                      You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

                       

                       
                      * An IP match statement with an IP set that specified the address 192.0.2.44. 
                       
                      * A string match statement that searches in the User-Agent header for the string BadBot. 
                       

                       

                      In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

                       

                      You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **Limit** *(integer) --* 

                        The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

                        
                      

                      - **AggregateKeyType** *(string) --* 

                        Setting that indicates how to aggregate the request counts. The options are the following:

                         

                         
                        * IP - Aggregate the request counts on the IP address from the web request origin. 
                         
                        * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
                         

                        
                      

                      - **ScopeDownStatement** *(dict) --* 

                        An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                        
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                         

                        This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **AndStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with AND logic. You can use any statements that can be nested. 

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **OrStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with OR logic. You can use any statements that can be nested.

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **NotStatement** *(dict) --* 

                      A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

                      
                      

                      - **Statement** *(dict) --* 

                        The statement to negate. You can use any statement that can be nested.

                        
                  
                    

                    - **ManagedRuleGroupStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                       

                      You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                    

                    - **LabelMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

                       

                      The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

                      
                      

                      - **Scope** *(string) --* 

                        Specify whether you want to match using the label name or just the namespace. 

                        
                      

                      - **Key** *(string) --* 

                        The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

                         

                         
                        * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
                         
                        * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
                         

                         

                        Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

                        
                  
                
              
                

                - **RuleGroupReferenceStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                   

                  You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the entity.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
              
            
              

              - **OverrideAction** *(dict) --* 

                The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

                 

                In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

                 

                 
                * If the rule statement references a rule group, use this override action setting and not the action setting.  
                 
                * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
                 

                
                

                - **Count** *(dict) --* 

                  Override the rule action setting to count.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **None** *(dict) --* 

                  Don't override the rule action setting.

                  
              
            
              

              - **VisibilityConfig** *(dict) --* 

                Defines and enables Amazon CloudWatch metrics and web request sample collection. 

                
                

                - **SampledRequestsEnabled** *(boolean) --* 

                  A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

                  
                

                - **CloudWatchMetricsEnabled** *(boolean) --* 

                  A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

                  
                

                - **MetricName** *(string) --* 

                  A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

                  
            
          
        
          

          - **PostProcessFirewallManagerRuleGroups** *(list) --* 

            The last set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized before these. 

             

            In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.

            
            

            - *(dict) --* 

              A rule group that's defined for an Firewall Manager WAF policy.

              
              

              - **Name** *(string) --* 

                The name of the rule group. You cannot change the name of a rule group after you create it.

                
              

              - **Priority** *(integer) --* 

                If you define more than one rule group in the first or last Firewall Manager rule groups, WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.

                
              

              - **FirewallManagerStatement** *(dict) --* 

                The processing guidance for an Firewall Manager rule. This is like a regular rule  Statement , but it can only contain a rule group reference.

                
                

                - **ManagedRuleGroupStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                   

                  You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **VendorName** *(string) --* 

                    The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

                    
                  

                  - **Name** *(string) --* 

                    The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
                    

                    - **ByteMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

                      
                      

                      - **SearchString** *(bytes) --* 

                        A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

                         

                        Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

                         

                         
                        * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
                         
                        * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
                         

                         

                        If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

                         

                         **If you're using the WAF API**  

                         

                        Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

                         

                        For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

                         

                         **If you're using the CLI or one of the Amazon Web Services SDKs**  

                         

                        The value that you want WAF to search for. The SDK automatically base64 encodes the value.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                      

                      - **PositionalConstraint** *(string) --* 

                        The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

                         

                         **CONTAINS**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

                         

                         **CONTAINS_WORD**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

                         

                         
                        * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
                         
                        * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
                         

                         

                         **EXACTLY**  

                         

                        The value of the specified part of the web request must exactly match the value of ``SearchString`` .

                         

                         **STARTS_WITH**  

                         

                        The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

                         

                         **ENDS_WITH**  

                         

                        The value of ``SearchString`` must appear at the end of the specified part of the web request.

                        
                  
                    

                    - **SqliMatchStatement** *(dict) --* 

                      Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **XssMatchStatement** *(dict) --* 

                      A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **SizeConstraintStatement** *(dict) --* 

                      A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

                       

                      If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

                       

                      If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **ComparisonOperator** *(string) --* 

                        The operator to use to compare the request part to the size setting. 

                        
                      

                      - **Size** *(integer) --* 

                        The size, in byte, to compare to the request part, after any transformations.

                        
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **GeoMatchStatement** *(dict) --* 

                      A rule statement used to identify web requests based on country of origin. 

                      
                      

                      - **CountryCodes** *(list) --* 

                        An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

                        
                        

                        - *(string) --* 
                    
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **RuleGroupReferenceStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                       

                      You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the entity.

                        
                      

                      - **ExcludedRules** *(list) --* 

                        The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                        
                        

                        - *(dict) --* 

                          Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                          
                          

                          - **Name** *(string) --* 

                            The name of the rule to exclude.

                            
                      
                    
                  
                    

                    - **IPSetReferenceStatement** *(dict) --* 

                      A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

                       

                      Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  IPSet that this statement references.

                        
                      

                      - **IPSetForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                        

                        - **Position** *(string) --* 

                          The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                           

                          The options for this setting are the following: 

                           

                           
                          * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                           
                          * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                           
                          * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                           

                          
                    
                  
                    

                    - **RegexPatternSetReferenceStatement** *(dict) --* 

                      A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

                       

                      Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **RateBasedStatement** *(dict) --* 

                      A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

                       

                      When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

                       

                      You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

                       

                       
                      * An IP match statement with an IP set that specified the address 192.0.2.44. 
                       
                      * A string match statement that searches in the User-Agent header for the string BadBot. 
                       

                       

                      In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

                       

                      You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **Limit** *(integer) --* 

                        The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

                        
                      

                      - **AggregateKeyType** *(string) --* 

                        Setting that indicates how to aggregate the request counts. The options are the following:

                         

                         
                        * IP - Aggregate the request counts on the IP address from the web request origin. 
                         
                        * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
                         

                        
                      

                      - **ScopeDownStatement** *(dict) --* 

                        An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                        
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                         

                        This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **AndStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with AND logic. You can use any statements that can be nested. 

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **OrStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with OR logic. You can use any statements that can be nested.

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **NotStatement** *(dict) --* 

                      A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

                      
                      

                      - **Statement** *(dict) --* 

                        The statement to negate. You can use any statement that can be nested.

                        
                  
                    

                    - **ManagedRuleGroupStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                       

                      You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                    

                    - **LabelMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

                       

                      The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

                      
                      

                      - **Scope** *(string) --* 

                        Specify whether you want to match using the label name or just the namespace. 

                        
                      

                      - **Key** *(string) --* 

                        The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

                         

                         
                        * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
                         
                        * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
                         

                         

                        Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

                        
                  
                
              
                

                - **RuleGroupReferenceStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                   

                  You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the entity.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
              
            
              

              - **OverrideAction** *(dict) --* 

                The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

                 

                In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

                 

                 
                * If the rule statement references a rule group, use this override action setting and not the action setting.  
                 
                * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
                 

                
                

                - **Count** *(dict) --* 

                  Override the rule action setting to count.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **None** *(dict) --* 

                  Don't override the rule action setting.

                  
              
            
              

              - **VisibilityConfig** *(dict) --* 

                Defines and enables Amazon CloudWatch metrics and web request sample collection. 

                
                

                - **SampledRequestsEnabled** *(boolean) --* 

                  A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

                  
                

                - **CloudWatchMetricsEnabled** *(boolean) --* 

                  A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

                  
                

                - **MetricName** *(string) --* 

                  A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

                  
            
          
        
          

          - **ManagedByFirewallManager** *(boolean) --* 

            Indicates whether this web ACL is managed by Firewall Manager. If true, then only Firewall Manager can delete the web ACL or any Firewall Manager rule groups in the web ACL. 

            
          

          - **LabelNamespace** *(string) --* 

            The label namespace prefix for this web ACL. All labels added by rules in this web ACL have this prefix. 

             

             
            * The syntax for the label namespace prefix for a web ACL is the following:   ``awswaf:<account ID>:webacl:<web ACL name>:``   
             
            * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon:   ``<label namespace>:<label from rule>``   
             

            
          

          - **CustomResponseBodies** *(dict) --* 

            A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. 

             

            For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            
            

            - *(string) --* 
              

              - *(dict) --* 

                The response body to use in a custom response to a web request. This is referenced by key from  CustomResponse  ``CustomResponseBodyKey`` .

                
                

                - **ContentType** *(string) --* 

                  The type of content in the payload that you are defining in the ``Content`` string.

                  
                

                - **Content** *(string) --* 

                  The payload of the custom response. 

                   

                  You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. 

                   

                  For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
            
        
      
      
        

        - **LockToken** *(string) --* 

          A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: get_web_acl_for_resource(**kwargs)

    

    Retrieves the  WebACL for the specified resource. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/GetWebACLForResource>`_    


    **Request Syntax** 
    ::

      response = client.get_web_acl_for_resource(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The ARN (Amazon Resource Name) of the resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WebACL': {
                'Name': 'string',
                'Id': 'string',
                'ARN': 'string',
                'DefaultAction': {
                    'Block': {
                        'CustomResponse': {
                            'ResponseCode': 123,
                            'CustomResponseBodyKey': 'string',
                            'ResponseHeaders': [
                                {
                                    'Name': 'string',
                                    'Value': 'string'
                                },
                            ]
                        }
                    },
                    'Allow': {
                        'CustomRequestHandling': {
                            'InsertHeaders': [
                                {
                                    'Name': 'string',
                                    'Value': 'string'
                                },
                            ]
                        }
                    }
                },
                'Description': 'string',
                'Rules': [
                    {
                        'Name': 'string',
                        'Priority': 123,
                        'Statement': {
                            'ByteMatchStatement': {
                                'SearchString': b'bytes',
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ],
                                'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                            },
                            'SqliMatchStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'XssMatchStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'SizeConstraintStatement': {
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                                'Size': 123,
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'GeoMatchStatement': {
                                'CountryCodes': [
                                    'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                                ],
                                'ForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                }
                            },
                            'RuleGroupReferenceStatement': {
                                'ARN': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ]
                            },
                            'IPSetReferenceStatement': {
                                'ARN': 'string',
                                'IPSetForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH',
                                    'Position': 'FIRST'|'LAST'|'ANY'
                                }
                            },
                            'RegexPatternSetReferenceStatement': {
                                'ARN': 'string',
                                'FieldToMatch': {
                                    'SingleHeader': {
                                        'Name': 'string'
                                    },
                                    'SingleQueryArgument': {
                                        'Name': 'string'
                                    },
                                    'AllQueryArguments': {},
                                    'UriPath': {},
                                    'QueryString': {},
                                    'Body': {},
                                    'Method': {},
                                    'JsonBody': {
                                        'MatchPattern': {
                                            'All': {},
                                            'IncludedPaths': [
                                                'string',
                                            ]
                                        },
                                        'MatchScope': 'ALL'|'KEY'|'VALUE',
                                        'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                    }
                                },
                                'TextTransformations': [
                                    {
                                        'Priority': 123,
                                        'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                    },
                                ]
                            },
                            'RateBasedStatement': {
                                'Limit': 123,
                                'AggregateKeyType': 'IP'|'FORWARDED_IP',
                                'ScopeDownStatement': {'... recursive ...'},
                                'ForwardedIPConfig': {
                                    'HeaderName': 'string',
                                    'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                }
                            },
                            'AndStatement': {
                                'Statements': [
                                    {'... recursive ...'},
                                ]
                            },
                            'OrStatement': {
                                'Statements': [
                                    {'... recursive ...'},
                                ]
                            },
                            'NotStatement': {
                                'Statement': {'... recursive ...'}
                            },
                            'ManagedRuleGroupStatement': {
                                'VendorName': 'string',
                                'Name': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ],
                                'ScopeDownStatement': {'... recursive ...'}
                            },
                            'LabelMatchStatement': {
                                'Scope': 'LABEL'|'NAMESPACE',
                                'Key': 'string'
                            }
                        },
                        'Action': {
                            'Block': {
                                'CustomResponse': {
                                    'ResponseCode': 123,
                                    'CustomResponseBodyKey': 'string',
                                    'ResponseHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'Allow': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            }
                        },
                        'OverrideAction': {
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'None': {}
                        },
                        'RuleLabels': [
                            {
                                'Name': 'string'
                            },
                        ],
                        'VisibilityConfig': {
                            'SampledRequestsEnabled': True|False,
                            'CloudWatchMetricsEnabled': True|False,
                            'MetricName': 'string'
                        }
                    },
                ],
                'VisibilityConfig': {
                    'SampledRequestsEnabled': True|False,
                    'CloudWatchMetricsEnabled': True|False,
                    'MetricName': 'string'
                },
                'Capacity': 123,
                'PreProcessFirewallManagerRuleGroups': [
                    {
                        'Name': 'string',
                        'Priority': 123,
                        'FirewallManagerStatement': {
                            'ManagedRuleGroupStatement': {
                                'VendorName': 'string',
                                'Name': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ],
                                'ScopeDownStatement': {
                                    'ByteMatchStatement': {
                                        'SearchString': b'bytes',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ],
                                        'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                                    },
                                    'SqliMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'XssMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'SizeConstraintStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                                        'Size': 123,
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'GeoMatchStatement': {
                                        'CountryCodes': [
                                            'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                                        ],
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'RuleGroupReferenceStatement': {
                                        'ARN': 'string',
                                        'ExcludedRules': [
                                            {
                                                'Name': 'string'
                                            },
                                        ]
                                    },
                                    'IPSetReferenceStatement': {
                                        'ARN': 'string',
                                        'IPSetForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH',
                                            'Position': 'FIRST'|'LAST'|'ANY'
                                        }
                                    },
                                    'RegexPatternSetReferenceStatement': {
                                        'ARN': 'string',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'RateBasedStatement': {
                                        'Limit': 123,
                                        'AggregateKeyType': 'IP'|'FORWARDED_IP',
                                        'ScopeDownStatement': {'... recursive ...'},
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'AndStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'OrStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'NotStatement': {
                                        'Statement': {'... recursive ...'}
                                    },
                                    'ManagedRuleGroupStatement': {'... recursive ...'},
                                    'LabelMatchStatement': {
                                        'Scope': 'LABEL'|'NAMESPACE',
                                        'Key': 'string'
                                    }
                                }
                            },
                            'RuleGroupReferenceStatement': {
                                'ARN': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ]
                            }
                        },
                        'OverrideAction': {
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'None': {}
                        },
                        'VisibilityConfig': {
                            'SampledRequestsEnabled': True|False,
                            'CloudWatchMetricsEnabled': True|False,
                            'MetricName': 'string'
                        }
                    },
                ],
                'PostProcessFirewallManagerRuleGroups': [
                    {
                        'Name': 'string',
                        'Priority': 123,
                        'FirewallManagerStatement': {
                            'ManagedRuleGroupStatement': {
                                'VendorName': 'string',
                                'Name': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ],
                                'ScopeDownStatement': {
                                    'ByteMatchStatement': {
                                        'SearchString': b'bytes',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ],
                                        'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                                    },
                                    'SqliMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'XssMatchStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'SizeConstraintStatement': {
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                                        'Size': 123,
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'GeoMatchStatement': {
                                        'CountryCodes': [
                                            'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                                        ],
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'RuleGroupReferenceStatement': {
                                        'ARN': 'string',
                                        'ExcludedRules': [
                                            {
                                                'Name': 'string'
                                            },
                                        ]
                                    },
                                    'IPSetReferenceStatement': {
                                        'ARN': 'string',
                                        'IPSetForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH',
                                            'Position': 'FIRST'|'LAST'|'ANY'
                                        }
                                    },
                                    'RegexPatternSetReferenceStatement': {
                                        'ARN': 'string',
                                        'FieldToMatch': {
                                            'SingleHeader': {
                                                'Name': 'string'
                                            },
                                            'SingleQueryArgument': {
                                                'Name': 'string'
                                            },
                                            'AllQueryArguments': {},
                                            'UriPath': {},
                                            'QueryString': {},
                                            'Body': {},
                                            'Method': {},
                                            'JsonBody': {
                                                'MatchPattern': {
                                                    'All': {},
                                                    'IncludedPaths': [
                                                        'string',
                                                    ]
                                                },
                                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                                            }
                                        },
                                        'TextTransformations': [
                                            {
                                                'Priority': 123,
                                                'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                                            },
                                        ]
                                    },
                                    'RateBasedStatement': {
                                        'Limit': 123,
                                        'AggregateKeyType': 'IP'|'FORWARDED_IP',
                                        'ScopeDownStatement': {'... recursive ...'},
                                        'ForwardedIPConfig': {
                                            'HeaderName': 'string',
                                            'FallbackBehavior': 'MATCH'|'NO_MATCH'
                                        }
                                    },
                                    'AndStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'OrStatement': {
                                        'Statements': [
                                            {'... recursive ...'},
                                        ]
                                    },
                                    'NotStatement': {
                                        'Statement': {'... recursive ...'}
                                    },
                                    'ManagedRuleGroupStatement': {'... recursive ...'},
                                    'LabelMatchStatement': {
                                        'Scope': 'LABEL'|'NAMESPACE',
                                        'Key': 'string'
                                    }
                                }
                            },
                            'RuleGroupReferenceStatement': {
                                'ARN': 'string',
                                'ExcludedRules': [
                                    {
                                        'Name': 'string'
                                    },
                                ]
                            }
                        },
                        'OverrideAction': {
                            'Count': {
                                'CustomRequestHandling': {
                                    'InsertHeaders': [
                                        {
                                            'Name': 'string',
                                            'Value': 'string'
                                        },
                                    ]
                                }
                            },
                            'None': {}
                        },
                        'VisibilityConfig': {
                            'SampledRequestsEnabled': True|False,
                            'CloudWatchMetricsEnabled': True|False,
                            'MetricName': 'string'
                        }
                    },
                ],
                'ManagedByFirewallManager': True|False,
                'LabelNamespace': 'string',
                'CustomResponseBodies': {
                    'string': {
                        'ContentType': 'TEXT_PLAIN'|'TEXT_HTML'|'APPLICATION_JSON',
                        'Content': 'string'
                    }
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WebACL** *(dict) --* 

          The web ACL that is associated with the resource. If there is no associated resource, WAF returns a null web ACL.

          
          

          - **Name** *(string) --* 

            The name of the web ACL. You cannot change the name of a web ACL after you create it.

            
          

          - **Id** *(string) --* 

            A unique identifier for the ``WebACL`` . This ID is returned in the responses to create and list commands. You use this ID to do things like get, update, and delete a ``WebACL`` .

            
          

          - **ARN** *(string) --* 

            The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.

            
          

          - **DefaultAction** *(dict) --* 

            The action to perform if none of the ``Rules`` contained in the ``WebACL`` match. 

            
            

            - **Block** *(dict) --* 

              Specifies that WAF should block requests by default. 

              
              

              - **CustomResponse** *(dict) --* 

                Defines a custom response for the web request.

                 

                For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                
                

                - **ResponseCode** *(integer) --* 

                  The HTTP status code to return to the client. 

                   

                  For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                

                - **CustomResponseBodyKey** *(string) --* 

                  References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                  
                

                - **ResponseHeaders** *(list) --* 

                  The HTTP headers to use in the response. Duplicate header names are not allowed. 

                   

                  For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                  

                  - *(dict) --* 

                    A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                    
                    

                    - **Name** *(string) --* 

                      The name of the custom header. 

                       

                      For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                      
                    

                    - **Value** *(string) --* 

                      The value of the custom header.

                      
                
              
            
          
            

            - **Allow** *(dict) --* 

              Specifies that WAF should allow requests by default.

              
              

              - **CustomRequestHandling** *(dict) --* 

                Defines custom handling for the web request.

                 

                For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                
                

                - **InsertHeaders** *(list) --* 

                  The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                   

                  For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
                  

                  - *(dict) --* 

                    A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                    
                    

                    - **Name** *(string) --* 

                      The name of the custom header. 

                       

                      For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                      
                    

                    - **Value** *(string) --* 

                      The value of the custom header.

                      
                
              
            
          
        
          

          - **Description** *(string) --* 

            A description of the web ACL that helps with identification. 

            
          

          - **Rules** *(list) --* 

            The  Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

            
            

            - *(dict) --* 

              A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

              
              

              - **Name** *(string) --* 

                The name of the rule. You can't change the name of a ``Rule`` after you create it. 

                
              

              - **Priority** *(integer) --* 

                If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

                
              

              - **Statement** *(dict) --* 

                The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

                
                

                - **ByteMatchStatement** *(dict) --* 

                  A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

                  
                  

                  - **SearchString** *(bytes) --* 

                    A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

                     

                    Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

                     

                     
                    * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
                     
                    * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
                     

                     

                    If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

                     

                     **If you're using the WAF API**  

                     

                    Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

                     

                    For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

                     

                     **If you're using the CLI or one of the Amazon Web Services SDKs**  

                     

                    The value that you want WAF to search for. The SDK automatically base64 encodes the value.

                    
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
                  

                  - **PositionalConstraint** *(string) --* 

                    The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

                     

                     **CONTAINS**  

                     

                    The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

                     

                     **CONTAINS_WORD**  

                     

                    The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

                     

                     
                    * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
                     
                    * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
                     

                     

                     **EXACTLY**  

                     

                    The value of the specified part of the web request must exactly match the value of ``SearchString`` .

                     

                     **STARTS_WITH**  

                     

                    The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

                     

                     **ENDS_WITH**  

                     

                    The value of ``SearchString`` must appear at the end of the specified part of the web request.

                    
              
                

                - **SqliMatchStatement** *(dict) --* 

                  Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **XssMatchStatement** *(dict) --* 

                  A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **SizeConstraintStatement** *(dict) --* 

                  A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

                   

                  If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

                   

                  If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

                  
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **ComparisonOperator** *(string) --* 

                    The operator to use to compare the request part to the size setting. 

                    
                  

                  - **Size** *(integer) --* 

                    The size, in byte, to compare to the request part, after any transformations.

                    
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **GeoMatchStatement** *(dict) --* 

                  A rule statement used to identify web requests based on country of origin. 

                  
                  

                  - **CountryCodes** *(list) --* 

                    An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

                    
                    

                    - *(string) --* 
                
                  

                  - **ForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                
              
                

                - **RuleGroupReferenceStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                   

                  You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the entity.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
              
                

                - **IPSetReferenceStatement** *(dict) --* 

                  A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

                   

                  Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the  IPSet that this statement references.

                    
                  

                  - **IPSetForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                    

                    - **Position** *(string) --* 

                      The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                       

                      The options for this setting are the following: 

                       

                       
                      * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                       
                      * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                       
                      * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                       

                      
                
              
                

                - **RegexPatternSetReferenceStatement** *(dict) --* 

                  A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

                   

                  Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

                    
                  

                  - **FieldToMatch** *(dict) --* 

                    The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                    
                    

                    - **SingleHeader** *(dict) --* 

                      Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                       

                      Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query header to inspect.

                        
                  
                    

                    - **SingleQueryArgument** *(dict) --* 

                      Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                       

                      This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                       

                      Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                      
                      

                      - **Name** *(string) --* 

                        The name of the query argument to inspect.

                        
                  
                    

                    - **AllQueryArguments** *(dict) --* 

                      Inspect all query arguments. 

                      
                  
                    

                    - **UriPath** *(dict) --* 

                      Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                      
                  
                    

                    - **QueryString** *(dict) --* 

                      Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                      
                  
                    

                    - **Body** *(dict) --* 

                      Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                  
                    

                    - **Method** *(dict) --* 

                      Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                      
                  
                    

                    - **JsonBody** *(dict) --* 

                      Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                       

                      Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                      
                      

                      - **MatchPattern** *(dict) --* 

                        The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                        
                        

                        - **All** *(dict) --* 

                          Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                           

                          You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                          
                      
                        

                        - **IncludedPaths** *(list) --* 

                          Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                           

                          Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                           

                          You must specify either this setting or the ``All`` setting, but not both.

                           

                          .. note::

                             

                            Don't use this option to include all paths. Instead, use the ``All`` setting. 

                             

                          
                          

                          - *(string) --* 
                      
                    
                      

                      - **MatchScope** *(string) --* 

                        The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                        
                      

                      - **InvalidFallbackBehavior** *(string) --* 

                        What WAF should do if it fails to completely parse the JSON body. The options are the following:

                         

                         
                        * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                         
                        * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                         
                        * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                         

                         

                        If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                         

                        WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                         

                        WAF parses the JSON in the following examples as two valid key, value pairs: 

                         

                         
                        * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                         
                        * Missing colon: ``{"key1":"value1","key2""value2"}``   
                         
                        * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                         

                        
                  
                
                  

                  - **TextTransformations** *(list) --* 

                    Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                    
                    

                    - *(dict) --* 

                      Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                      
                      

                      - **Priority** *(integer) --* 

                        Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                        
                      

                      - **Type** *(string) --* 

                        You can specify the following transformation types:

                         

                         **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                         

                         **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                         

                         **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                         

                         
                        * Delete the following characters: ``\ " ' ^``   
                         
                        * Delete spaces before the following characters: ``/ (``   
                         
                        * Replace the following characters with a space: ``, ;``   
                         
                        * Replace multiple spaces with one space 
                         
                        * Convert uppercase letters (A-Z) to lowercase (a-z) 
                         

                         

                         **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                         

                         
                        * ``\f`` , formfeed, decimal 12 
                         
                        * ``\t`` , tab, decimal 9 
                         
                        * ``\n`` , newline, decimal 10 
                         
                        * ``\r`` , carriage return, decimal 13 
                         
                        * ``\v`` , vertical tab, decimal 11 
                         
                        * Non-breaking space, decimal 160 
                         

                         

                         ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                         

                         **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                         

                         **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                         

                         **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                         

                         **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                         

                         
                        * Replaces ``(ampersand)quot;`` with ``"``   
                         
                        * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                         
                        * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                         
                        * Replaces ``(ampersand)gt;`` with ``>``   
                         
                        * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                         
                        * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                         

                         

                         **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                         

                         **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                         

                         **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                         

                         **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                         

                         **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                         

                         **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                         

                         **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                         

                         **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                         

                         **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                         

                         **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                         

                         **URL_DECODE** - Decode a URL-encoded value. 

                         

                         **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                         

                         **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                        
                  
                
              
                

                - **RateBasedStatement** *(dict) --* 

                  A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

                   

                  When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

                   

                  You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

                   

                   
                  * An IP match statement with an IP set that specified the address 192.0.2.44. 
                   
                  * A string match statement that searches in the User-Agent header for the string BadBot. 
                   

                   

                  In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

                   

                  You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **Limit** *(integer) --* 

                    The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

                    
                  

                  - **AggregateKeyType** *(string) --* 

                    Setting that indicates how to aggregate the request counts. The options are the following:

                     

                     
                    * IP - Aggregate the request counts on the IP address from the web request origin. 
                     
                    * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
                     

                    
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
                  

                  - **ForwardedIPConfig** *(dict) --* 

                    The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                     

                    .. note::

                       

                      If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                       

                     

                    This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

                    
                    

                    - **HeaderName** *(string) --* 

                      The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                      
                    

                    - **FallbackBehavior** *(string) --* 

                      The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                       

                      .. note::

                         

                        If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                         

                       

                      You can specify the following fallback behaviors:

                       

                       
                      * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                       
                      * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                       

                      
                
              
                

                - **AndStatement** *(dict) --* 

                  A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

                  
                  

                  - **Statements** *(list) --* 

                    The statements to combine with AND logic. You can use any statements that can be nested. 

                    
                    

                    - *(dict) --* 

                      The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                      
                
              
                

                - **OrStatement** *(dict) --* 

                  A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

                  
                  

                  - **Statements** *(list) --* 

                    The statements to combine with OR logic. You can use any statements that can be nested.

                    
                    

                    - *(dict) --* 

                      The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                      
                
              
                

                - **NotStatement** *(dict) --* 

                  A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

                  
                  

                  - **Statement** *(dict) --* 

                    The statement to negate. You can use any statement that can be nested.

                    
              
                

                - **ManagedRuleGroupStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                   

                  You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **VendorName** *(string) --* 

                    The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

                    
                  

                  - **Name** *(string) --* 

                    The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
              
                

                - **LabelMatchStatement** *(dict) --* 

                  A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

                   

                  The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

                  
                  

                  - **Scope** *(string) --* 

                    Specify whether you want to match using the label name or just the namespace. 

                    
                  

                  - **Key** *(string) --* 

                    The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

                     

                     
                    * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
                     
                    * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
                     

                     

                    Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

                    
              
            
              

              - **Action** *(dict) --* 

                The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

                 

                This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

                 

                 
                * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
                 
                * If the rule statement references a rule group, use the override action setting and not this action setting.  
                 

                
                

                - **Block** *(dict) --* 

                  Instructs WAF to block the web request.

                  
                  

                  - **CustomResponse** *(dict) --* 

                    Defines a custom response for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **ResponseCode** *(integer) --* 

                      The HTTP status code to return to the client. 

                       

                      For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                    

                    - **CustomResponseBodyKey** *(string) --* 

                      References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                      
                    

                    - **ResponseHeaders** *(list) --* 

                      The HTTP headers to use in the response. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **Allow** *(dict) --* 

                  Instructs WAF to allow the web request.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **Count** *(dict) --* 

                  Instructs WAF to count the web request and allow it.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
            
              

              - **OverrideAction** *(dict) --* 

                The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

                 

                In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

                 

                 
                * If the rule statement references a rule group, use this override action setting and not the action setting.  
                 
                * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
                 

                
                

                - **Count** *(dict) --* 

                  Override the rule action setting to count.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **None** *(dict) --* 

                  Don't override the rule action setting.

                  
              
            
              

              - **RuleLabels** *(list) --* 

                Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

                 

                Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

                 

                For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

                 

                 
                * Separate each component of the label with a colon.  
                 
                * Each namespace or name can have up to 128 characters. 
                 
                * You can specify up to 5 namespaces in a label. 
                 
                * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
                 

                 

                For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

                
                

                - *(dict) --* 

                  A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

                  
                  

                  - **Name** *(string) --* 

                    The label string. 

                    
              
            
              

              - **VisibilityConfig** *(dict) --* 

                Defines and enables Amazon CloudWatch metrics and web request sample collection. 

                
                

                - **SampledRequestsEnabled** *(boolean) --* 

                  A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

                  
                

                - **CloudWatchMetricsEnabled** *(boolean) --* 

                  A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

                  
                

                - **MetricName** *(string) --* 

                  A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

                  
            
          
        
          

          - **VisibilityConfig** *(dict) --* 

            Defines and enables Amazon CloudWatch metrics and web request sample collection. 

            
            

            - **SampledRequestsEnabled** *(boolean) --* 

              A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

              
            

            - **CloudWatchMetricsEnabled** *(boolean) --* 

              A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

              
            

            - **MetricName** *(string) --* 

              A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

              
        
          

          - **Capacity** *(integer) --* 

            The web ACL capacity units (WCUs) currently being used by this web ACL. 

             

            WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500. 

            
          

          - **PreProcessFirewallManagerRuleGroups** *(list) --* 

            The first set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized after these. 

             

            In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.

            
            

            - *(dict) --* 

              A rule group that's defined for an Firewall Manager WAF policy.

              
              

              - **Name** *(string) --* 

                The name of the rule group. You cannot change the name of a rule group after you create it.

                
              

              - **Priority** *(integer) --* 

                If you define more than one rule group in the first or last Firewall Manager rule groups, WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.

                
              

              - **FirewallManagerStatement** *(dict) --* 

                The processing guidance for an Firewall Manager rule. This is like a regular rule  Statement , but it can only contain a rule group reference.

                
                

                - **ManagedRuleGroupStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                   

                  You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **VendorName** *(string) --* 

                    The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

                    
                  

                  - **Name** *(string) --* 

                    The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
                    

                    - **ByteMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

                      
                      

                      - **SearchString** *(bytes) --* 

                        A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

                         

                        Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

                         

                         
                        * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
                         
                        * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
                         

                         

                        If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

                         

                         **If you're using the WAF API**  

                         

                        Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

                         

                        For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

                         

                         **If you're using the CLI or one of the Amazon Web Services SDKs**  

                         

                        The value that you want WAF to search for. The SDK automatically base64 encodes the value.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                      

                      - **PositionalConstraint** *(string) --* 

                        The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

                         

                         **CONTAINS**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

                         

                         **CONTAINS_WORD**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

                         

                         
                        * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
                         
                        * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
                         

                         

                         **EXACTLY**  

                         

                        The value of the specified part of the web request must exactly match the value of ``SearchString`` .

                         

                         **STARTS_WITH**  

                         

                        The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

                         

                         **ENDS_WITH**  

                         

                        The value of ``SearchString`` must appear at the end of the specified part of the web request.

                        
                  
                    

                    - **SqliMatchStatement** *(dict) --* 

                      Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **XssMatchStatement** *(dict) --* 

                      A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **SizeConstraintStatement** *(dict) --* 

                      A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

                       

                      If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

                       

                      If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **ComparisonOperator** *(string) --* 

                        The operator to use to compare the request part to the size setting. 

                        
                      

                      - **Size** *(integer) --* 

                        The size, in byte, to compare to the request part, after any transformations.

                        
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **GeoMatchStatement** *(dict) --* 

                      A rule statement used to identify web requests based on country of origin. 

                      
                      

                      - **CountryCodes** *(list) --* 

                        An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

                        
                        

                        - *(string) --* 
                    
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **RuleGroupReferenceStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                       

                      You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the entity.

                        
                      

                      - **ExcludedRules** *(list) --* 

                        The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                        
                        

                        - *(dict) --* 

                          Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                          
                          

                          - **Name** *(string) --* 

                            The name of the rule to exclude.

                            
                      
                    
                  
                    

                    - **IPSetReferenceStatement** *(dict) --* 

                      A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

                       

                      Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  IPSet that this statement references.

                        
                      

                      - **IPSetForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                        

                        - **Position** *(string) --* 

                          The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                           

                          The options for this setting are the following: 

                           

                           
                          * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                           
                          * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                           
                          * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                           

                          
                    
                  
                    

                    - **RegexPatternSetReferenceStatement** *(dict) --* 

                      A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

                       

                      Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **RateBasedStatement** *(dict) --* 

                      A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

                       

                      When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

                       

                      You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

                       

                       
                      * An IP match statement with an IP set that specified the address 192.0.2.44. 
                       
                      * A string match statement that searches in the User-Agent header for the string BadBot. 
                       

                       

                      In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

                       

                      You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **Limit** *(integer) --* 

                        The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

                        
                      

                      - **AggregateKeyType** *(string) --* 

                        Setting that indicates how to aggregate the request counts. The options are the following:

                         

                         
                        * IP - Aggregate the request counts on the IP address from the web request origin. 
                         
                        * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
                         

                        
                      

                      - **ScopeDownStatement** *(dict) --* 

                        An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                        
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                         

                        This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **AndStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with AND logic. You can use any statements that can be nested. 

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **OrStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with OR logic. You can use any statements that can be nested.

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **NotStatement** *(dict) --* 

                      A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

                      
                      

                      - **Statement** *(dict) --* 

                        The statement to negate. You can use any statement that can be nested.

                        
                  
                    

                    - **ManagedRuleGroupStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                       

                      You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                    

                    - **LabelMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

                       

                      The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

                      
                      

                      - **Scope** *(string) --* 

                        Specify whether you want to match using the label name or just the namespace. 

                        
                      

                      - **Key** *(string) --* 

                        The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

                         

                         
                        * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
                         
                        * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
                         

                         

                        Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

                        
                  
                
              
                

                - **RuleGroupReferenceStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                   

                  You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the entity.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
              
            
              

              - **OverrideAction** *(dict) --* 

                The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

                 

                In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

                 

                 
                * If the rule statement references a rule group, use this override action setting and not the action setting.  
                 
                * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
                 

                
                

                - **Count** *(dict) --* 

                  Override the rule action setting to count.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **None** *(dict) --* 

                  Don't override the rule action setting.

                  
              
            
              

              - **VisibilityConfig** *(dict) --* 

                Defines and enables Amazon CloudWatch metrics and web request sample collection. 

                
                

                - **SampledRequestsEnabled** *(boolean) --* 

                  A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

                  
                

                - **CloudWatchMetricsEnabled** *(boolean) --* 

                  A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

                  
                

                - **MetricName** *(string) --* 

                  A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

                  
            
          
        
          

          - **PostProcessFirewallManagerRuleGroups** *(list) --* 

            The last set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized before these. 

             

            In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.

            
            

            - *(dict) --* 

              A rule group that's defined for an Firewall Manager WAF policy.

              
              

              - **Name** *(string) --* 

                The name of the rule group. You cannot change the name of a rule group after you create it.

                
              

              - **Priority** *(integer) --* 

                If you define more than one rule group in the first or last Firewall Manager rule groups, WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.

                
              

              - **FirewallManagerStatement** *(dict) --* 

                The processing guidance for an Firewall Manager rule. This is like a regular rule  Statement , but it can only contain a rule group reference.

                
                

                - **ManagedRuleGroupStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                   

                  You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **VendorName** *(string) --* 

                    The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

                    
                  

                  - **Name** *(string) --* 

                    The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
                  

                  - **ScopeDownStatement** *(dict) --* 

                    An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                    
                    

                    - **ByteMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

                      
                      

                      - **SearchString** *(bytes) --* 

                        A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

                         

                        Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

                         

                         
                        * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
                         
                        * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
                         

                         

                        If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

                         

                         **If you're using the WAF API**  

                         

                        Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

                         

                        For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

                         

                         **If you're using the CLI or one of the Amazon Web Services SDKs**  

                         

                        The value that you want WAF to search for. The SDK automatically base64 encodes the value.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                      

                      - **PositionalConstraint** *(string) --* 

                        The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

                         

                         **CONTAINS**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

                         

                         **CONTAINS_WORD**  

                         

                        The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

                         

                         
                        * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
                         
                        * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
                         

                         

                         **EXACTLY**  

                         

                        The value of the specified part of the web request must exactly match the value of ``SearchString`` .

                         

                         **STARTS_WITH**  

                         

                        The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

                         

                         **ENDS_WITH**  

                         

                        The value of ``SearchString`` must appear at the end of the specified part of the web request.

                        
                  
                    

                    - **SqliMatchStatement** *(dict) --* 

                      Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **XssMatchStatement** *(dict) --* 

                      A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **SizeConstraintStatement** *(dict) --* 

                      A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

                       

                      If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

                       

                      If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

                      
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **ComparisonOperator** *(string) --* 

                        The operator to use to compare the request part to the size setting. 

                        
                      

                      - **Size** *(integer) --* 

                        The size, in byte, to compare to the request part, after any transformations.

                        
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **GeoMatchStatement** *(dict) --* 

                      A rule statement used to identify web requests based on country of origin. 

                      
                      

                      - **CountryCodes** *(list) --* 

                        An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

                        
                        

                        - *(string) --* 
                    
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **RuleGroupReferenceStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                       

                      You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the entity.

                        
                      

                      - **ExcludedRules** *(list) --* 

                        The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                        
                        

                        - *(dict) --* 

                          Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                          
                          

                          - **Name** *(string) --* 

                            The name of the rule to exclude.

                            
                      
                    
                  
                    

                    - **IPSetReferenceStatement** *(dict) --* 

                      A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

                       

                      Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  IPSet that this statement references.

                        
                      

                      - **IPSetForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                        

                        - **Position** *(string) --* 

                          The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                           

                          The options for this setting are the following: 

                           

                           
                          * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                           
                          * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                           
                          * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                           

                          
                    
                  
                    

                    - **RegexPatternSetReferenceStatement** *(dict) --* 

                      A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

                       

                      Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

                      
                      

                      - **ARN** *(string) --* 

                        The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

                        
                      

                      - **FieldToMatch** *(dict) --* 

                        The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

                        
                        

                        - **SingleHeader** *(dict) --* 

                          Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                           

                          Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query header to inspect.

                            
                      
                        

                        - **SingleQueryArgument** *(dict) --* 

                          Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                           

                          This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                           

                          Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                          
                          

                          - **Name** *(string) --* 

                            The name of the query argument to inspect.

                            
                      
                        

                        - **AllQueryArguments** *(dict) --* 

                          Inspect all query arguments. 

                          
                      
                        

                        - **UriPath** *(dict) --* 

                          Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                          
                      
                        

                        - **QueryString** *(dict) --* 

                          Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                          
                      
                        

                        - **Body** *(dict) --* 

                          Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                      
                        

                        - **Method** *(dict) --* 

                          Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                          
                      
                        

                        - **JsonBody** *(dict) --* 

                          Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                           

                          Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                          
                          

                          - **MatchPattern** *(dict) --* 

                            The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                            
                            

                            - **All** *(dict) --* 

                              Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                               

                              You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                              
                          
                            

                            - **IncludedPaths** *(list) --* 

                              Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                               

                              Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                               

                              You must specify either this setting or the ``All`` setting, but not both.

                               

                              .. note::

                                 

                                Don't use this option to include all paths. Instead, use the ``All`` setting. 

                                 

                              
                              

                              - *(string) --* 
                          
                        
                          

                          - **MatchScope** *(string) --* 

                            The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                            
                          

                          - **InvalidFallbackBehavior** *(string) --* 

                            What WAF should do if it fails to completely parse the JSON body. The options are the following:

                             

                             
                            * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                             
                            * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                             
                            * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                             

                             

                            If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                             

                            WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                             

                            WAF parses the JSON in the following examples as two valid key, value pairs: 

                             

                             
                            * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                             
                            * Missing colon: ``{"key1":"value1","key2""value2"}``   
                             
                            * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                             

                            
                      
                    
                      

                      - **TextTransformations** *(list) --* 

                        Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

                        
                        

                        - *(dict) --* 

                          Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                          
                          

                          - **Priority** *(integer) --* 

                            Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                            
                          

                          - **Type** *(string) --* 

                            You can specify the following transformation types:

                             

                             **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                             

                             **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                             

                             **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                             

                             
                            * Delete the following characters: ``\ " ' ^``   
                             
                            * Delete spaces before the following characters: ``/ (``   
                             
                            * Replace the following characters with a space: ``, ;``   
                             
                            * Replace multiple spaces with one space 
                             
                            * Convert uppercase letters (A-Z) to lowercase (a-z) 
                             

                             

                             **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                             

                             
                            * ``\f`` , formfeed, decimal 12 
                             
                            * ``\t`` , tab, decimal 9 
                             
                            * ``\n`` , newline, decimal 10 
                             
                            * ``\r`` , carriage return, decimal 13 
                             
                            * ``\v`` , vertical tab, decimal 11 
                             
                            * Non-breaking space, decimal 160 
                             

                             

                             ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                             

                             **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                             

                             **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                             

                             **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                             

                             **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                             

                             
                            * Replaces ``(ampersand)quot;`` with ``"``   
                             
                            * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                             
                            * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                             
                            * Replaces ``(ampersand)gt;`` with ``>``   
                             
                            * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                             
                            * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                             

                             

                             **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                             

                             **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                             

                             **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                             

                             **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                             

                             **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                             

                             **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                             

                             **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                             

                             **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                             

                             **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                             

                             **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                             

                             **URL_DECODE** - Decode a URL-encoded value. 

                             

                             **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                             

                             **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                            
                      
                    
                  
                    

                    - **RateBasedStatement** *(dict) --* 

                      A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

                       

                      When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

                       

                      You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

                       

                       
                      * An IP match statement with an IP set that specified the address 192.0.2.44. 
                       
                      * A string match statement that searches in the User-Agent header for the string BadBot. 
                       

                       

                      In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

                       

                      You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                      

                      - **Limit** *(integer) --* 

                        The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

                        
                      

                      - **AggregateKeyType** *(string) --* 

                        Setting that indicates how to aggregate the request counts. The options are the following:

                         

                         
                        * IP - Aggregate the request counts on the IP address from the web request origin. 
                         
                        * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
                         

                        
                      

                      - **ScopeDownStatement** *(dict) --* 

                        An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

                        
                      

                      - **ForwardedIPConfig** *(dict) --* 

                        The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

                         

                        .. note::

                           

                          If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                           

                         

                        This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

                        
                        

                        - **HeaderName** *(string) --* 

                          The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                          
                        

                        - **FallbackBehavior** *(string) --* 

                          The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                           

                          .. note::

                             

                            If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                             

                           

                          You can specify the following fallback behaviors:

                           

                           
                          * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                           
                          * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                           

                          
                    
                  
                    

                    - **AndStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with AND logic. You can use any statements that can be nested. 

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **OrStatement** *(dict) --* 

                      A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

                      
                      

                      - **Statements** *(list) --* 

                        The statements to combine with OR logic. You can use any statements that can be nested.

                        
                        

                        - *(dict) --* 

                          The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                          
                    
                  
                    

                    - **NotStatement** *(dict) --* 

                      A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

                      
                      

                      - **Statement** *(dict) --* 

                        The statement to negate. You can use any statement that can be nested.

                        
                  
                    

                    - **ManagedRuleGroupStatement** *(dict) --* 

                      A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

                       

                      You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                      
                    

                    - **LabelMatchStatement** *(dict) --* 

                      A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

                       

                      The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

                      
                      

                      - **Scope** *(string) --* 

                        Specify whether you want to match using the label name or just the namespace. 

                        
                      

                      - **Key** *(string) --* 

                        The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

                         

                         
                        * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
                         
                        * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
                         

                         

                        Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

                        
                  
                
              
                

                - **RuleGroupReferenceStatement** *(dict) --* 

                  A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

                   

                  You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

                  
                  

                  - **ARN** *(string) --* 

                    The Amazon Resource Name (ARN) of the entity.

                    
                  

                  - **ExcludedRules** *(list) --* 

                    The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

                    
                    

                    - *(dict) --* 

                      Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                      
                      

                      - **Name** *(string) --* 

                        The name of the rule to exclude.

                        
                  
                
              
            
              

              - **OverrideAction** *(dict) --* 

                The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

                 

                Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

                 

                In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

                 

                 
                * If the rule statement references a rule group, use this override action setting and not the action setting.  
                 
                * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
                 

                
                

                - **Count** *(dict) --* 

                  Override the rule action setting to count.

                  
                  

                  - **CustomRequestHandling** *(dict) --* 

                    Defines custom handling for the web request.

                     

                    For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                    
                    

                    - **InsertHeaders** *(list) --* 

                      The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                       

                      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                      
                      

                      - *(dict) --* 

                        A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                        
                        

                        - **Name** *(string) --* 

                          The name of the custom header. 

                           

                          For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                          
                        

                        - **Value** *(string) --* 

                          The value of the custom header.

                          
                    
                  
                
              
                

                - **None** *(dict) --* 

                  Don't override the rule action setting.

                  
              
            
              

              - **VisibilityConfig** *(dict) --* 

                Defines and enables Amazon CloudWatch metrics and web request sample collection. 

                
                

                - **SampledRequestsEnabled** *(boolean) --* 

                  A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

                  
                

                - **CloudWatchMetricsEnabled** *(boolean) --* 

                  A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

                  
                

                - **MetricName** *(string) --* 

                  A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

                  
            
          
        
          

          - **ManagedByFirewallManager** *(boolean) --* 

            Indicates whether this web ACL is managed by Firewall Manager. If true, then only Firewall Manager can delete the web ACL or any Firewall Manager rule groups in the web ACL. 

            
          

          - **LabelNamespace** *(string) --* 

            The label namespace prefix for this web ACL. All labels added by rules in this web ACL have this prefix. 

             

             
            * The syntax for the label namespace prefix for a web ACL is the following:   ``awswaf:<account ID>:webacl:<web ACL name>:``   
             
            * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon:   ``<label namespace>:<label from rule>``   
             

            
          

          - **CustomResponseBodies** *(dict) --* 

            A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. 

             

            For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            
            

            - *(string) --* 
              

              - *(dict) --* 

                The response body to use in a custom response to a web request. This is referenced by key from  CustomResponse  ``CustomResponseBodyKey`` .

                
                

                - **ContentType** *(string) --* 

                  The type of content in the payload that you are defining in the ``Content`` string.

                  
                

                - **Content** *(string) --* 

                  The payload of the custom response. 

                   

                  You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. 

                   

                  For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                  
            
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFUnavailableEntityException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_available_managed_rule_groups(**kwargs)

    

    Retrieves an array of managed rule groups that are available for you to use. This list includes all Amazon Web Services Managed Rules rule groups and the Marketplace managed rule groups that you're subscribed to.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListAvailableManagedRuleGroups>`_    


    **Request Syntax** 
    ::

      response = client.list_available_managed_rule_groups(
          Scope='CLOUDFRONT'|'REGIONAL',
          NextMarker='string',
          Limit=123
      )
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type NextMarker: string
    :param NextMarker: 

      When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a ``NextMarker`` value that you can use in a subsequent call to get the next batch of objects.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextMarker': 'string',
            'ManagedRuleGroups': [
                {
                    'VendorName': 'string',
                    'Name': 'string',
                    'Description': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextMarker** *(string) --* 

          When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

          
        

        - **ManagedRuleGroups** *(list) --* 

          

          
          

          - *(dict) --* 

            High-level information about a managed rule group, returned by  ListAvailableManagedRuleGroups . This provides information like the name and vendor name, that you provide when you add a  ManagedRuleGroupStatement to a web ACL. Managed rule groups include Amazon Web Services Managed Rules rule groups, which are free of charge to WAF customers, and Marketplace managed rule groups, which you can subscribe to through Marketplace. 

            
            

            - **VendorName** *(string) --* 

              The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

              
            

            - **Name** *(string) --* 

              The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

              
            

            - **Description** *(string) --* 

              The description of the managed rule group, provided by Amazon Web Services Managed Rules or the Marketplace seller who manages it.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_ip_sets(**kwargs)

    

    Retrieves an array of  IPSetSummary objects for the IP sets that you manage.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListIPSets>`_    


    **Request Syntax** 
    ::

      response = client.list_ip_sets(
          Scope='CLOUDFRONT'|'REGIONAL',
          NextMarker='string',
          Limit=123
      )
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type NextMarker: string
    :param NextMarker: 

      When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a ``NextMarker`` value that you can use in a subsequent call to get the next batch of objects.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextMarker': 'string',
            'IPSets': [
                {
                    'Name': 'string',
                    'Id': 'string',
                    'Description': 'string',
                    'LockToken': 'string',
                    'ARN': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextMarker** *(string) --* 

          When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

          
        

        - **IPSets** *(list) --* 

          Array of IPSets. This may not be the full list of IPSets that you have defined. See the ``Limit`` specification for this request.

          
          

          - *(dict) --* 

            High-level information about an  IPSet , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an ``IPSet`` , and the ARN, that you provide to the  IPSetReferenceStatement to use the address set in a  Rule .

            
            

            - **Name** *(string) --* 

              The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.

              
            

            - **Id** *(string) --* 

              A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

              
            

            - **Description** *(string) --* 

              A description of the IP set that helps with identification. 

              
            

            - **LockToken** *(string) --* 

              A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

              
            

            - **ARN** *(string) --* 

              The Amazon Resource Name (ARN) of the entity.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_logging_configurations(**kwargs)

    

    Retrieves an array of your  LoggingConfiguration objects.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListLoggingConfigurations>`_    


    **Request Syntax** 
    ::

      response = client.list_logging_configurations(
          Scope='CLOUDFRONT'|'REGIONAL',
          NextMarker='string',
          Limit=123
      )
    :type Scope: string
    :param Scope: 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type NextMarker: string
    :param NextMarker: 

      When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a ``NextMarker`` value that you can use in a subsequent call to get the next batch of objects.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LoggingConfigurations': [
                {
                    'ResourceArn': 'string',
                    'LogDestinationConfigs': [
                        'string',
                    ],
                    'RedactedFields': [
                        {
                            'SingleHeader': {
                                'Name': 'string'
                            },
                            'SingleQueryArgument': {
                                'Name': 'string'
                            },
                            'AllQueryArguments': {},
                            'UriPath': {},
                            'QueryString': {},
                            'Body': {},
                            'Method': {},
                            'JsonBody': {
                                'MatchPattern': {
                                    'All': {},
                                    'IncludedPaths': [
                                        'string',
                                    ]
                                },
                                'MatchScope': 'ALL'|'KEY'|'VALUE',
                                'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                            }
                        },
                    ],
                    'ManagedByFirewallManager': True|False,
                    'LoggingFilter': {
                        'Filters': [
                            {
                                'Behavior': 'KEEP'|'DROP',
                                'Requirement': 'MEETS_ALL'|'MEETS_ANY',
                                'Conditions': [
                                    {
                                        'ActionCondition': {
                                            'Action': 'ALLOW'|'BLOCK'|'COUNT'
                                        },
                                        'LabelNameCondition': {
                                            'LabelName': 'string'
                                        }
                                    },
                                ]
                            },
                        ],
                        'DefaultBehavior': 'KEEP'|'DROP'
                    }
                },
            ],
            'NextMarker': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LoggingConfigurations** *(list) --* 

          

          
          

          - *(dict) --* 

            Defines an association between Amazon Kinesis Data Firehose destinations and a web ACL resource, for logging from WAF. As part of the association, you can specify parts of the standard logging fields to keep out of the logs and you can specify filters so that you log only a subset of the logging records. 

            
            

            - **ResourceArn** *(string) --* 

              The Amazon Resource Name (ARN) of the web ACL that you want to associate with ``LogDestinationConfigs`` .

              
            

            - **LogDestinationConfigs** *(list) --* 

              The Amazon Kinesis Data Firehose Amazon Resource Name (ARNs) that you want to associate with the web ACL.

              
              

              - *(string) --* 
          
            

            - **RedactedFields** *(list) --* 

              The parts of the request that you want to keep out of the logs. For example, if you redact the ``HEADER`` field, the ``HEADER`` field in the firehose will be ``xxx`` . 

               

              .. note::

                 

                You must use one of the following values: ``URI`` , ``QUERY_STRING`` , ``HEADER`` , or ``METHOD`` .

                 

              
              

              - *(dict) --* 

                The part of a web request that you want WAF to inspect. Include the single ``FieldToMatch`` type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in ``FieldToMatch`` for each rule statement that requires it. To inspect more than one component of a web request, create a separate rule statement for each component.

                
                

                - **SingleHeader** *(dict) --* 

                  Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                   

                  Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                  
                  

                  - **Name** *(string) --* 

                    The name of the query header to inspect.

                    
              
                

                - **SingleQueryArgument** *(dict) --* 

                  Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                   

                  This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                   

                  Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                  
                  

                  - **Name** *(string) --* 

                    The name of the query argument to inspect.

                    
              
                

                - **AllQueryArguments** *(dict) --* 

                  Inspect all query arguments. 

                  
              
                

                - **UriPath** *(dict) --* 

                  Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                  
              
                

                - **QueryString** *(dict) --* 

                  Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                  
              
                

                - **Body** *(dict) --* 

                  Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                   

                  Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                  
              
                

                - **Method** *(dict) --* 

                  Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                  
              
                

                - **JsonBody** *(dict) --* 

                  Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                   

                  Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                  
                  

                  - **MatchPattern** *(dict) --* 

                    The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                    
                    

                    - **All** *(dict) --* 

                      Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                       

                      You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                      
                  
                    

                    - **IncludedPaths** *(list) --* 

                      Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                       

                      Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                       

                      You must specify either this setting or the ``All`` setting, but not both.

                       

                      .. note::

                         

                        Don't use this option to include all paths. Instead, use the ``All`` setting. 

                         

                      
                      

                      - *(string) --* 
                  
                
                  

                  - **MatchScope** *(string) --* 

                    The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                    
                  

                  - **InvalidFallbackBehavior** *(string) --* 

                    What WAF should do if it fails to completely parse the JSON body. The options are the following:

                     

                     
                    * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                     
                    * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                     
                    * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                     

                     

                    If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                     

                    WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                     

                    WAF parses the JSON in the following examples as two valid key, value pairs: 

                     

                     
                    * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                     
                    * Missing colon: ``{"key1":"value1","key2""value2"}``   
                     
                    * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                     

                    
              
            
          
            

            - **ManagedByFirewallManager** *(boolean) --* 

              Indicates whether the logging configuration was created by Firewall Manager, as part of an WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration. 

              
            

            - **LoggingFilter** *(dict) --* 

              Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation. 

              
              

              - **Filters** *(list) --* 

                The filters that you want to apply to the logs. 

                
                

                - *(dict) --* 

                  A single logging filter, used in  LoggingFilter . 

                  
                  

                  - **Behavior** *(string) --* 

                    How to handle logs that satisfy the filter's conditions and requirement. 

                    
                  

                  - **Requirement** *(string) --* 

                    Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.

                    
                  

                  - **Conditions** *(list) --* 

                    Match conditions for the filter.

                    
                    

                    - *(dict) --* 

                      A single match condition for a  Filter .

                      
                      

                      - **ActionCondition** *(dict) --* 

                        A single action condition.

                        
                        

                        - **Action** *(string) --* 

                          The action setting that a log record must contain in order to meet the condition. 

                          
                    
                      

                      - **LabelNameCondition** *(dict) --* 

                        A single label name condition.

                        
                        

                        - **LabelName** *(string) --* 

                          The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 

                          
                    
                  
                
              
            
              

              - **DefaultBehavior** *(string) --* 

                Default handling for logs that don't match any of the specified filtering conditions. 

                
          
        
      
        

        - **NextMarker** *(string) --* 

          When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_regex_pattern_sets(**kwargs)

    

    Retrieves an array of  RegexPatternSetSummary objects for the regex pattern sets that you manage.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListRegexPatternSets>`_    


    **Request Syntax** 
    ::

      response = client.list_regex_pattern_sets(
          Scope='CLOUDFRONT'|'REGIONAL',
          NextMarker='string',
          Limit=123
      )
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type NextMarker: string
    :param NextMarker: 

      When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a ``NextMarker`` value that you can use in a subsequent call to get the next batch of objects.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextMarker': 'string',
            'RegexPatternSets': [
                {
                    'Name': 'string',
                    'Id': 'string',
                    'Description': 'string',
                    'LockToken': 'string',
                    'ARN': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextMarker** *(string) --* 

          When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

          
        

        - **RegexPatternSets** *(list) --* 

          

          
          

          - *(dict) --* 

            High-level information about a  RegexPatternSet , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a ``RegexPatternSet`` , and the ARN, that you provide to the  RegexPatternSetReferenceStatement to use the pattern set in a  Rule .

            
            

            - **Name** *(string) --* 

              The name of the data type instance. You cannot change the name after you create the instance.

              
            

            - **Id** *(string) --* 

              A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

              
            

            - **Description** *(string) --* 

              A description of the set that helps with identification. 

              
            

            - **LockToken** *(string) --* 

              A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

              
            

            - **ARN** *(string) --* 

              The Amazon Resource Name (ARN) of the entity.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_resources_for_web_acl(**kwargs)

    

    Retrieves an array of the Amazon Resource Names (ARNs) for the regional resources that are associated with the specified web ACL. If you want the list of Amazon CloudFront resources, use the CloudFront call ``ListDistributionsByWebACLId`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListResourcesForWebACL>`_    


    **Request Syntax** 
    ::

      response = client.list_resources_for_web_acl(
          WebACLArn='string',
          ResourceType='APPLICATION_LOAD_BALANCER'|'API_GATEWAY'|'APPSYNC'
      )
    :type WebACLArn: string
    :param WebACLArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the web ACL.

      

    
    :type ResourceType: string
    :param ResourceType: 

      Used for web ACLs that are scoped for regional applications. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResourceArns': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResourceArns** *(list) --* 

          The array of Amazon Resource Names (ARNs) of the associated resources.

          
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_rule_groups(**kwargs)

    

    Retrieves an array of  RuleGroupSummary objects for the rule groups that you manage. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListRuleGroups>`_    


    **Request Syntax** 
    ::

      response = client.list_rule_groups(
          Scope='CLOUDFRONT'|'REGIONAL',
          NextMarker='string',
          Limit=123
      )
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type NextMarker: string
    :param NextMarker: 

      When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a ``NextMarker`` value that you can use in a subsequent call to get the next batch of objects.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextMarker': 'string',
            'RuleGroups': [
                {
                    'Name': 'string',
                    'Id': 'string',
                    'Description': 'string',
                    'LockToken': 'string',
                    'ARN': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextMarker** *(string) --* 

          When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

          
        

        - **RuleGroups** *(list) --* 

          

          
          

          - *(dict) --* 

            High-level information about a  RuleGroup , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a ``RuleGroup`` , and the ARN, that you provide to the  RuleGroupReferenceStatement to use the rule group in a  Rule .

            
            

            - **Name** *(string) --* 

              The name of the data type instance. You cannot change the name after you create the instance.

              
            

            - **Id** *(string) --* 

              A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

              
            

            - **Description** *(string) --* 

              A description of the rule group that helps with identification. 

              
            

            - **LockToken** *(string) --* 

              A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

              
            

            - **ARN** *(string) --* 

              The Amazon Resource Name (ARN) of the entity.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Retrieves the  TagInfoForResource for the specified resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

     

    You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          NextMarker='string',
          Limit=123,
          ResourceARN='string'
      )
    :type NextMarker: string
    :param NextMarker: 

      When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a ``NextMarker`` value that you can use in a subsequent call to get the next batch of objects.

      

    
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextMarker': 'string',
            'TagInfoForResource': {
                'ResourceARN': 'string',
                'TagList': [
                    {
                        'Key': 'string',
                        'Value': 'string'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextMarker** *(string) --* 

          When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

          
        

        - **TagInfoForResource** *(dict) --* 

          The collection of tagging definitions for the resource. 

          
          

          - **ResourceARN** *(string) --* 

            The Amazon Resource Name (ARN) of the resource.

            
          

          - **TagList** *(list) --* 

            The array of  Tag objects defined for the resource. 

            
            

            - *(dict) --* 

              A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

               

              You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

              
              

              - **Key** *(string) --* 

                Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.

                
              

              - **Value** *(string) --* 

                Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: list_web_acls(**kwargs)

    

    Retrieves an array of  WebACLSummary objects for the web ACLs that you manage.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/ListWebACLs>`_    


    **Request Syntax** 
    ::

      response = client.list_web_acls(
          Scope='CLOUDFRONT'|'REGIONAL',
          NextMarker='string',
          Limit=123
      )
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type NextMarker: string
    :param NextMarker: 

      When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a ``NextMarker`` value that you can use in a subsequent call to get the next batch of objects.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextMarker': 'string',
            'WebACLs': [
                {
                    'Name': 'string',
                    'Id': 'string',
                    'Description': 'string',
                    'LockToken': 'string',
                    'ARN': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextMarker** *(string) --* 

          When you request a list of objects with a ``Limit`` setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a ``NextMarker`` value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.

          
        

        - **WebACLs** *(list) --* 

          

          
          

          - *(dict) --* 

            High-level information about a  WebACL , returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a ``WebACL`` , and the ARN, that you provide to operations like  AssociateWebACL .

            
            

            - **Name** *(string) --* 

              The name of the web ACL. You cannot change the name of a web ACL after you create it.

              
            

            - **Id** *(string) --* 

              The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

              
            

            - **Description** *(string) --* 

              A description of the web ACL that helps with identification. 

              
            

            - **LockToken** *(string) --* 

              A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

              
            

            - **ARN** *(string) --* 

              The Amazon Resource Name (ARN) of the entity.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: put_logging_configuration(**kwargs)

    

    Enables the specified  LoggingConfiguration , to start logging from a web ACL, according to the configuration provided.

     

    You can access information about all traffic that WAF inspects using the following steps:

     

     
    * Create an Amazon Kinesis Data Firehose.  Create the data firehose with a PUT source and in the Region that you are operating. If you are capturing logs for Amazon CloudFront, always create the firehose in US East (N. Virginia).  Give the data firehose a name that starts with the prefix ``aws-waf-logs-`` . For example, ``aws-waf-logs-us-east-2-analytics`` . 

    .. note::

       Do not create the data firehose using a ``Kinesis stream`` as your source. 

     
     
    * Associate that firehose to your web ACL using a ``PutLoggingConfiguration`` request. 
     

     

    When you successfully enable logging using a ``PutLoggingConfiguration`` request, WAF will create a service linked role with the necessary permissions to write logs to the Amazon Kinesis Data Firehose. For more information, see `Logging Web ACL Traffic Information <https://docs.aws.amazon.com/waf/latest/developerguide/logging.html>`__ in the *WAF Developer Guide* .

     

    .. note::

       

      This operation completely replaces the mutable specifications that you already have for the logging configuration with the ones that you provide to this call. To modify the logging configuration, retrieve it by calling  GetLoggingConfiguration , update the settings as needed, and then provide the complete logging configuration specification to this call.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/PutLoggingConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_logging_configuration(
          LoggingConfiguration={
              'ResourceArn': 'string',
              'LogDestinationConfigs': [
                  'string',
              ],
              'RedactedFields': [
                  {
                      'SingleHeader': {
                          'Name': 'string'
                      },
                      'SingleQueryArgument': {
                          'Name': 'string'
                      },
                      'AllQueryArguments': {}
                      ,
                      'UriPath': {}
                      ,
                      'QueryString': {}
                      ,
                      'Body': {}
                      ,
                      'Method': {}
                      ,
                      'JsonBody': {
                          'MatchPattern': {
                              'All': {}
                              ,
                              'IncludedPaths': [
                                  'string',
                              ]
                          },
                          'MatchScope': 'ALL'|'KEY'|'VALUE',
                          'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                      }
                  },
              ],
              'ManagedByFirewallManager': True|False,
              'LoggingFilter': {
                  'Filters': [
                      {
                          'Behavior': 'KEEP'|'DROP',
                          'Requirement': 'MEETS_ALL'|'MEETS_ANY',
                          'Conditions': [
                              {
                                  'ActionCondition': {
                                      'Action': 'ALLOW'|'BLOCK'|'COUNT'
                                  },
                                  'LabelNameCondition': {
                                      'LabelName': 'string'
                                  }
                              },
                          ]
                      },
                  ],
                  'DefaultBehavior': 'KEEP'|'DROP'
              }
          }
      )
    :type LoggingConfiguration: dict
    :param LoggingConfiguration: **[REQUIRED]** 

      

      

    
      - **ResourceArn** *(string) --* **[REQUIRED]** 

        The Amazon Resource Name (ARN) of the web ACL that you want to associate with ``LogDestinationConfigs`` .

        

      
      - **LogDestinationConfigs** *(list) --* **[REQUIRED]** 

        The Amazon Kinesis Data Firehose Amazon Resource Name (ARNs) that you want to associate with the web ACL.

        

      
        - *(string) --* 

        
    
      - **RedactedFields** *(list) --* 

        The parts of the request that you want to keep out of the logs. For example, if you redact the ``HEADER`` field, the ``HEADER`` field in the firehose will be ``xxx`` . 

         

        .. note::

           

          You must use one of the following values: ``URI`` , ``QUERY_STRING`` , ``HEADER`` , or ``METHOD`` .

           

        

      
        - *(dict) --* 

          The part of a web request that you want WAF to inspect. Include the single ``FieldToMatch`` type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in ``FieldToMatch`` for each rule statement that requires it. To inspect more than one component of a web request, create a separate rule statement for each component.

          

        
          - **SingleHeader** *(dict) --* 

            Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

             

            Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

            

          
            - **Name** *(string) --* **[REQUIRED]** 

              The name of the query header to inspect.

              

            
          
          - **SingleQueryArgument** *(dict) --* 

            Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

             

            This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

             

            Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

            

          
            - **Name** *(string) --* **[REQUIRED]** 

              The name of the query argument to inspect.

              

            
          
          - **AllQueryArguments** *(dict) --* 

            Inspect all query arguments. 

            

          
          
          - **UriPath** *(dict) --* 

            Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

            

          
          
          - **QueryString** *(dict) --* 

            Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

            

          
          
          - **Body** *(dict) --* 

            Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

             

            Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

            

          
          
          - **Method** *(dict) --* 

            Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

            

          
          
          - **JsonBody** *(dict) --* 

            Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

             

            Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

            

          
            - **MatchPattern** *(dict) --* **[REQUIRED]** 

              The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

              

            
              - **All** *(dict) --* 

                Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                 

                You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                

              
              
              - **IncludedPaths** *(list) --* 

                Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                 

                Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                 

                You must specify either this setting or the ``All`` setting, but not both.

                 

                .. note::

                   

                  Don't use this option to include all paths. Instead, use the ``All`` setting. 

                   

                

              
                - *(string) --* 

                
            
            
            - **MatchScope** *(string) --* **[REQUIRED]** 

              The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

              

            
            - **InvalidFallbackBehavior** *(string) --* 

              What WAF should do if it fails to completely parse the JSON body. The options are the following:

               

               
              * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
               
              * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
               
              * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
               

               

              If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

               

              WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

               

              WAF parses the JSON in the following examples as two valid key, value pairs: 

               

               
              * Missing comma: ``{"key1":"value1""key2":"value2"}``   
               
              * Missing colon: ``{"key1":"value1","key2""value2"}``   
               
              * Extra colons: ``{"key1"::"value1","key2""value2"}``   
               

              

            
          
        
    
      - **ManagedByFirewallManager** *(boolean) --* 

        Indicates whether the logging configuration was created by Firewall Manager, as part of an WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration. 

        

      
      - **LoggingFilter** *(dict) --* 

        Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation. 

        

      
        - **Filters** *(list) --* **[REQUIRED]** 

          The filters that you want to apply to the logs. 

          

        
          - *(dict) --* 

            A single logging filter, used in  LoggingFilter . 

            

          
            - **Behavior** *(string) --* **[REQUIRED]** 

              How to handle logs that satisfy the filter's conditions and requirement. 

              

            
            - **Requirement** *(string) --* **[REQUIRED]** 

              Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.

              

            
            - **Conditions** *(list) --* **[REQUIRED]** 

              Match conditions for the filter.

              

            
              - *(dict) --* 

                A single match condition for a  Filter .

                

              
                - **ActionCondition** *(dict) --* 

                  A single action condition.

                  

                
                  - **Action** *(string) --* **[REQUIRED]** 

                    The action setting that a log record must contain in order to meet the condition. 

                    

                  
                
                - **LabelNameCondition** *(dict) --* 

                  A single label name condition.

                  

                
                  - **LabelName** *(string) --* **[REQUIRED]** 

                    The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 

                    

                  
                
              
          
          
      
        - **DefaultBehavior** *(string) --* **[REQUIRED]** 

          Default handling for logs that don't match any of the specified filtering conditions. 

          

        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LoggingConfiguration': {
                'ResourceArn': 'string',
                'LogDestinationConfigs': [
                    'string',
                ],
                'RedactedFields': [
                    {
                        'SingleHeader': {
                            'Name': 'string'
                        },
                        'SingleQueryArgument': {
                            'Name': 'string'
                        },
                        'AllQueryArguments': {},
                        'UriPath': {},
                        'QueryString': {},
                        'Body': {},
                        'Method': {},
                        'JsonBody': {
                            'MatchPattern': {
                                'All': {},
                                'IncludedPaths': [
                                    'string',
                                ]
                            },
                            'MatchScope': 'ALL'|'KEY'|'VALUE',
                            'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                        }
                    },
                ],
                'ManagedByFirewallManager': True|False,
                'LoggingFilter': {
                    'Filters': [
                        {
                            'Behavior': 'KEEP'|'DROP',
                            'Requirement': 'MEETS_ALL'|'MEETS_ANY',
                            'Conditions': [
                                {
                                    'ActionCondition': {
                                        'Action': 'ALLOW'|'BLOCK'|'COUNT'
                                    },
                                    'LabelNameCondition': {
                                        'LabelName': 'string'
                                    }
                                },
                            ]
                        },
                    ],
                    'DefaultBehavior': 'KEEP'|'DROP'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LoggingConfiguration** *(dict) --* 

          

          
          

          - **ResourceArn** *(string) --* 

            The Amazon Resource Name (ARN) of the web ACL that you want to associate with ``LogDestinationConfigs`` .

            
          

          - **LogDestinationConfigs** *(list) --* 

            The Amazon Kinesis Data Firehose Amazon Resource Name (ARNs) that you want to associate with the web ACL.

            
            

            - *(string) --* 
        
          

          - **RedactedFields** *(list) --* 

            The parts of the request that you want to keep out of the logs. For example, if you redact the ``HEADER`` field, the ``HEADER`` field in the firehose will be ``xxx`` . 

             

            .. note::

               

              You must use one of the following values: ``URI`` , ``QUERY_STRING`` , ``HEADER`` , or ``METHOD`` .

               

            
            

            - *(dict) --* 

              The part of a web request that you want WAF to inspect. Include the single ``FieldToMatch`` type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in ``FieldToMatch`` for each rule statement that requires it. To inspect more than one component of a web request, create a separate rule statement for each component.

              
              

              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                
                

                - **Name** *(string) --* 

                  The name of the query header to inspect.

                  
            
              

              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                
                

                - **Name** *(string) --* 

                  The name of the query argument to inspect.

                  
            
              

              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                
            
              

              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                
            
              

              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                
            
              

              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                
            
              

              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                
            
              

              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                
                

                - **MatchPattern** *(dict) --* 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  
                  

                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    
                
                  

                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    
                    

                    - *(string) --* 
                
              
                

                - **MatchScope** *(string) --* 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  
                

                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  
            
          
        
          

          - **ManagedByFirewallManager** *(boolean) --* 

            Indicates whether the logging configuration was created by Firewall Manager, as part of an WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration. 

            
          

          - **LoggingFilter** *(dict) --* 

            Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation. 

            
            

            - **Filters** *(list) --* 

              The filters that you want to apply to the logs. 

              
              

              - *(dict) --* 

                A single logging filter, used in  LoggingFilter . 

                
                

                - **Behavior** *(string) --* 

                  How to handle logs that satisfy the filter's conditions and requirement. 

                  
                

                - **Requirement** *(string) --* 

                  Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.

                  
                

                - **Conditions** *(list) --* 

                  Match conditions for the filter.

                  
                  

                  - *(dict) --* 

                    A single match condition for a  Filter .

                    
                    

                    - **ActionCondition** *(dict) --* 

                      A single action condition.

                      
                      

                      - **Action** *(string) --* 

                        The action setting that a log record must contain in order to meet the condition. 

                        
                  
                    

                    - **LabelNameCondition** *(dict) --* 

                      A single label name condition.

                      
                      

                      - **LabelName** *(string) --* 

                        The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 

                        
                  
                
              
            
          
            

            - **DefaultBehavior** *(string) --* 

              Default handling for logs that don't match any of the specified filtering conditions. 

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFServiceLinkedRoleErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    

  .. py:method:: put_permission_policy(**kwargs)

    

    Attaches an IAM policy to the specified resource. Use this to share a rule group across accounts.

     

    You must be the owner of the rule group to perform this operation.

     

    This action is subject to the following restrictions:

     

     
    * You can attach only one policy with each ``PutPermissionPolicy`` request. 
     
    * The ARN in the request must be a valid WAF  RuleGroup ARN and the rule group must exist in the same Region. 
     
    * The user making the request must be the owner of the rule group. 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/PutPermissionPolicy>`_    


    **Request Syntax** 
    ::

      response = client.put_permission_policy(
          ResourceArn='string',
          Policy='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the  RuleGroup to which you want to attach the policy.

      

    
    :type Policy: string
    :param Policy: **[REQUIRED]** 

      The policy to attach to the specified rule group. 

       

      The policy specifications must conform to the following:

       

       
      * The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01. 
       
      * The policy must include specifications for ``Effect`` , ``Action`` , and ``Principal`` . 
       
      * ``Effect`` must specify ``Allow`` . 
       
      * ``Action`` must specify ``wafv2:CreateWebACL`` , ``wafv2:UpdateWebACL`` , and ``wafv2:PutFirewallManagerRuleGroups`` . WAF rejects any extra actions or wildcard actions in the policy. 
       
      * The policy must not include a ``Resource`` parameter. 
       

       

      For more information, see `IAM Policies <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html>`__ . 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidPermissionPolicyException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Associates tags with the specified Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing. For example, you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

     

    You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceARN='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      An array of key:value pairs to associate with the resource.

      

    
      - *(dict) --* 

        A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.

         

        You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. 

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Disassociates tags from an Amazon Web Services resource. Tags are key:value pairs that you can associate with Amazon Web Services resources. For example, the tag key might be "customer" and the tag value might be "companyA." You can specify one or more tags to add to each container. You can add up to 50 tags to each Amazon Web Services resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceARN='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      An array of keys identifying the tags to disassociate from the resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFTagOperationInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: update_ip_set(**kwargs)

    

    Updates the specified  IPSet . 

     

    .. note::

       

      This operation completely replaces the mutable specifications that you already have for the IP set with the ones that you provide to this call. To modify the IP set, retrieve it by calling  GetIPSet , update the settings as needed, and then provide the complete IP set specification to this call.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/UpdateIPSet>`_    


    **Request Syntax** 
    ::

      response = client.update_ip_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          Description='string',
          Addresses=[
              'string',
          ],
          LockToken='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the IP set. You cannot change the name of an ``IPSet`` after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type Description: string
    :param Description: 

      A description of the IP set that helps with identification. 

      

    
    :type Addresses: list
    :param Addresses: **[REQUIRED]** 

      Contains an array of strings that specify one or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. 

       

      Examples: 

       

       
      * To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify ``192.0.2.44/32`` . 
       
      * To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify ``192.0.2.0/24`` . 
       
      * To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify ``1111:0000:0000:0000:0000:0000:0000:0111/128`` . 
       
      * To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify ``1111:0000:0000:0000:0000:0000:0000:0000/64`` . 
       

       

      For more information about CIDR notation, see the Wikipedia entry `Classless Inter-Domain Routing <https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing>`__ .

      

    
      - *(string) --* 

      
  
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextLockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextLockToken** *(string) --* 

          A token used for optimistic locking. WAF returns this token to your update requests. You use ``NextLockToken`` in the same manner as you use ``LockToken`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: update_regex_pattern_set(**kwargs)

    

    Updates the specified  RegexPatternSet .

     

    .. note::

       

      This operation completely replaces the mutable specifications that you already have for the regex pattern set with the ones that you provide to this call. To modify the regex pattern set, retrieve it by calling  GetRegexPatternSet , update the settings as needed, and then provide the complete regex pattern set specification to this call.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/UpdateRegexPatternSet>`_    


    **Request Syntax** 
    ::

      response = client.update_regex_pattern_set(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          Description='string',
          RegularExpressionList=[
              {
                  'RegexString': 'string'
              },
          ],
          LockToken='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the set. You cannot change the name after you create the set.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type Description: string
    :param Description: 

      A description of the set that helps with identification. 

      

    
    :type RegularExpressionList: list
    :param RegularExpressionList: **[REQUIRED]** 

      

      

    
      - *(dict) --* 

        A single regular expression. This is used in a  RegexPatternSet .

        

      
        - **RegexString** *(string) --* 

          The string representing the regular expression.

          

        
      
  
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextLockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextLockToken** *(string) --* 

          A token used for optimistic locking. WAF returns this token to your update requests. You use ``NextLockToken`` in the same manner as you use ``LockToken`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: update_rule_group(**kwargs)

    

    Updates the specified  RuleGroup .

     

    .. note::

       

      This operation completely replaces the mutable specifications that you already have for the rule group with the ones that you provide to this call. To modify the rule group, retrieve it by calling  GetRuleGroup , update the settings as needed, and then provide the complete rule group specification to this call.

       

     

    A rule group defines a collection of rules to inspect and control web requests that you can use in a  WebACL . When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/UpdateRuleGroup>`_    


    **Request Syntax** 
    ::

      response = client.update_rule_group(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          Description='string',
          Rules=[
              {
                  'Name': 'string',
                  'Priority': 123,
                  'Statement': {
                      'ByteMatchStatement': {
                          'SearchString': b'bytes',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ],
                          'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                      },
                      'SqliMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'XssMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'SizeConstraintStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                          'Size': 123,
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'GeoMatchStatement': {
                          'CountryCodes': [
                              'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                          ],
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'RuleGroupReferenceStatement': {
                          'ARN': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ]
                      },
                      'IPSetReferenceStatement': {
                          'ARN': 'string',
                          'IPSetForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH',
                              'Position': 'FIRST'|'LAST'|'ANY'
                          }
                      },
                      'RegexPatternSetReferenceStatement': {
                          'ARN': 'string',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'RateBasedStatement': {
                          'Limit': 123,
                          'AggregateKeyType': 'IP'|'FORWARDED_IP',
                          'ScopeDownStatement': {'... recursive ...'},
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'AndStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'OrStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'NotStatement': {
                          'Statement': {'... recursive ...'}
                      },
                      'ManagedRuleGroupStatement': {
                          'VendorName': 'string',
                          'Name': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ],
                          'ScopeDownStatement': {'... recursive ...'}
                      },
                      'LabelMatchStatement': {
                          'Scope': 'LABEL'|'NAMESPACE',
                          'Key': 'string'
                      }
                  },
                  'Action': {
                      'Block': {
                          'CustomResponse': {
                              'ResponseCode': 123,
                              'CustomResponseBodyKey': 'string',
                              'ResponseHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Allow': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      }
                  },
                  'OverrideAction': {
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'None': {}
                      
                  },
                  'RuleLabels': [
                      {
                          'Name': 'string'
                      },
                  ],
                  'VisibilityConfig': {
                      'SampledRequestsEnabled': True|False,
                      'CloudWatchMetricsEnabled': True|False,
                      'MetricName': 'string'
                  }
              },
          ],
          VisibilityConfig={
              'SampledRequestsEnabled': True|False,
              'CloudWatchMetricsEnabled': True|False,
              'MetricName': 'string'
          },
          LockToken='string',
          CustomResponseBodies={
              'string': {
                  'ContentType': 'TEXT_PLAIN'|'TEXT_HTML'|'APPLICATION_JSON',
                  'Content': 'string'
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule group. You cannot change the name of a rule group after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type Description: string
    :param Description: 

      A description of the rule group that helps with identification. 

      

    
    :type Rules: list
    :param Rules: 

      The  Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

      

    
      - *(dict) --* 

        A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the rule. You can't change the name of a ``Rule`` after you create it. 

          

        
        - **Priority** *(integer) --* **[REQUIRED]** 

          If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

          

        
        - **Statement** *(dict) --* **[REQUIRED]** 

          The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

          

        
          - **ByteMatchStatement** *(dict) --* 

            A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

            

          
            - **SearchString** *(bytes) --* **[REQUIRED]** 

              A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

               

              Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

               

               
              * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
               
              * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
               

               

              If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

               

               **If you're using the WAF API**  

               

              Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

               

              For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

               

               **If you're using the CLI or one of the Amazon Web Services SDKs**  

               

              The value that you want WAF to search for. The SDK automatically base64 encodes the value.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
            - **PositionalConstraint** *(string) --* **[REQUIRED]** 

              The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

               

               **CONTAINS**  

               

              The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

               

               **CONTAINS_WORD**  

               

              The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

               

               
              * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
               
              * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
               

               

               **EXACTLY**  

               

              The value of the specified part of the web request must exactly match the value of ``SearchString`` .

               

               **STARTS_WITH**  

               

              The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

               

               **ENDS_WITH**  

               

              The value of ``SearchString`` must appear at the end of the specified part of the web request.

              

            
          
          - **SqliMatchStatement** *(dict) --* 

            Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **XssMatchStatement** *(dict) --* 

            A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **SizeConstraintStatement** *(dict) --* 

            A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

             

            If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

             

            If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **ComparisonOperator** *(string) --* **[REQUIRED]** 

              The operator to use to compare the request part to the size setting. 

              

            
            - **Size** *(integer) --* **[REQUIRED]** 

              The size, in byte, to compare to the request part, after any transformations.

              

            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **GeoMatchStatement** *(dict) --* 

            A rule statement used to identify web requests based on country of origin. 

            

          
            - **CountryCodes** *(list) --* 

              An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

              

            
              - *(string) --* 

              
          
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **RuleGroupReferenceStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

             

            You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the entity.

              

            
            - **ExcludedRules** *(list) --* 

              The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
          
          - **IPSetReferenceStatement** *(dict) --* 

            A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

             

            Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  IPSet that this statement references.

              

            
            - **IPSetForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
              - **Position** *(string) --* **[REQUIRED]** 

                The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                 

                The options for this setting are the following: 

                 

                 
                * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                 
                * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                 
                * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                 

                

              
            
          
          - **RegexPatternSetReferenceStatement** *(dict) --* 

            A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

             

            Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **RateBasedStatement** *(dict) --* 

            A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

             

            When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

             

            You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

             

             
            * An IP match statement with an IP set that specified the address 192.0.2.44. 
             
            * A string match statement that searches in the User-Agent header for the string BadBot. 
             

             

            In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

             

            You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **Limit** *(integer) --* **[REQUIRED]** 

              The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

              

            
            - **AggregateKeyType** *(string) --* **[REQUIRED]** 

              Setting that indicates how to aggregate the request counts. The options are the following:

               

               
              * IP - Aggregate the request counts on the IP address from the web request origin. 
               
              * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
               

              

            
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

               

              This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **AndStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with AND logic. You can use any statements that can be nested. 

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **OrStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with OR logic. You can use any statements that can be nested.

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **NotStatement** *(dict) --* 

            A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

            

          
            - **Statement** *(dict) --* 

              The statement to negate. You can use any statement that can be nested.

              

            
          
          - **ManagedRuleGroupStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

             

            You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **VendorName** *(string) --* **[REQUIRED]** 

              The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

              

            
            - **Name** *(string) --* **[REQUIRED]** 

              The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

              

            
            - **ExcludedRules** *(list) --* 

              The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
          
          - **LabelMatchStatement** *(dict) --* 

            A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

             

            The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

            

          
            - **Scope** *(string) --* **[REQUIRED]** 

              Specify whether you want to match using the label name or just the namespace. 

              

            
            - **Key** *(string) --* **[REQUIRED]** 

              The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

               

               
              * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
               
              * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
               

               

              Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

              

            
          
        
        - **Action** *(dict) --* 

          The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

           

          This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

           

           
          * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
           
          * If the rule statement references a rule group, use the override action setting and not this action setting.  
           

          

        
          - **Block** *(dict) --* 

            Instructs WAF to block the web request.

            

          
            - **CustomResponse** *(dict) --* 

              Defines a custom response for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **ResponseCode** *(integer) --* **[REQUIRED]** 

                The HTTP status code to return to the client. 

                 

                For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
              - **CustomResponseBodyKey** *(string) --* 

                References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                

              
              - **ResponseHeaders** *(list) --* 

                The HTTP headers to use in the response. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Allow** *(dict) --* 

            Instructs WAF to allow the web request.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Count** *(dict) --* 

            Instructs WAF to count the web request and allow it.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
        
        - **OverrideAction** *(dict) --* 

          The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

           

          In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

           

           
          * If the rule statement references a rule group, use this override action setting and not the action setting.  
           
          * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
           

          

        
          - **Count** *(dict) --* 

            Override the rule action setting to count.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **None** *(dict) --* 

            Don't override the rule action setting.

            

          
          
        
        - **RuleLabels** *(list) --* 

          Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

           

          Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

           

          For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

           

           
          * Separate each component of the label with a colon.  
           
          * Each namespace or name can have up to 128 characters. 
           
          * You can specify up to 5 namespaces in a label. 
           
          * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
           

           

          For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

          

        
          - *(dict) --* 

            A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

            

          
            - **Name** *(string) --* **[REQUIRED]** 

              The label string. 

              

            
          
      
        - **VisibilityConfig** *(dict) --* **[REQUIRED]** 

          Defines and enables Amazon CloudWatch metrics and web request sample collection. 

          

        
          - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

            

          
          - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

            

          
          - **MetricName** *(string) --* **[REQUIRED]** 

            A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

            

          
        
      
  
    :type VisibilityConfig: dict
    :param VisibilityConfig: **[REQUIRED]** 

      Defines and enables Amazon CloudWatch metrics and web request sample collection. 

      

    
      - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

        

      
      - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

        

      
      - **MetricName** *(string) --* **[REQUIRED]** 

        A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

        

      
    
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    :type CustomResponseBodies: dict
    :param CustomResponseBodies: 

      A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. 

       

      For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

       

      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

      

    
      - *(string) --* 

      
        - *(dict) --* 

          The response body to use in a custom response to a web request. This is referenced by key from  CustomResponse  ``CustomResponseBodyKey`` .

          

        
          - **ContentType** *(string) --* **[REQUIRED]** 

            The type of content in the payload that you are defining in the ``Content`` string.

            

          
          - **Content** *(string) --* **[REQUIRED]** 

            The payload of the custom response. 

             

            You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextLockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextLockToken** *(string) --* 

          A token used for optimistic locking. WAF returns this token to your update requests. You use ``NextLockToken`` in the same manner as you use ``LockToken`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFUnavailableEntityException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFSubscriptionNotFoundException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

  .. py:method:: update_web_acl(**kwargs)

    

    Updates the specified  WebACL .

     

    .. note::

       

      This operation completely replaces the mutable specifications that you already have for the web ACL with the ones that you provide to this call. To modify the web ACL, retrieve it by calling  GetWebACL , update the settings as needed, and then provide the complete web ACL specification to this call.

       

     

    A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types  Rule ,  RuleGroup , and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/wafv2-2019-07-29/UpdateWebACL>`_    


    **Request Syntax** 
    ::

      response = client.update_web_acl(
          Name='string',
          Scope='CLOUDFRONT'|'REGIONAL',
          Id='string',
          DefaultAction={
              'Block': {
                  'CustomResponse': {
                      'ResponseCode': 123,
                      'CustomResponseBodyKey': 'string',
                      'ResponseHeaders': [
                          {
                              'Name': 'string',
                              'Value': 'string'
                          },
                      ]
                  }
              },
              'Allow': {
                  'CustomRequestHandling': {
                      'InsertHeaders': [
                          {
                              'Name': 'string',
                              'Value': 'string'
                          },
                      ]
                  }
              }
          },
          Description='string',
          Rules=[
              {
                  'Name': 'string',
                  'Priority': 123,
                  'Statement': {
                      'ByteMatchStatement': {
                          'SearchString': b'bytes',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ],
                          'PositionalConstraint': 'EXACTLY'|'STARTS_WITH'|'ENDS_WITH'|'CONTAINS'|'CONTAINS_WORD'
                      },
                      'SqliMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'XssMatchStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'SizeConstraintStatement': {
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'ComparisonOperator': 'EQ'|'NE'|'LE'|'LT'|'GE'|'GT',
                          'Size': 123,
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'GeoMatchStatement': {
                          'CountryCodes': [
                              'AF'|'AX'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BQ'|'BA'|'BW'|'BV'|'BR'|'IO'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CG'|'CD'|'CK'|'CR'|'CI'|'HR'|'CU'|'CW'|'CY'|'CZ'|'DK'|'DJ'|'DM'|'DO'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'GF'|'PF'|'TF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GP'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HM'|'VA'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KP'|'KR'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MQ'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'NF'|'MP'|'NO'|'OM'|'PK'|'PW'|'PS'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'GS'|'SS'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TL'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'UG'|'UA'|'AE'|'GB'|'US'|'UM'|'UY'|'UZ'|'VU'|'VE'|'VN'|'VG'|'VI'|'WF'|'EH'|'YE'|'ZM'|'ZW',
                          ],
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'RuleGroupReferenceStatement': {
                          'ARN': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ]
                      },
                      'IPSetReferenceStatement': {
                          'ARN': 'string',
                          'IPSetForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH',
                              'Position': 'FIRST'|'LAST'|'ANY'
                          }
                      },
                      'RegexPatternSetReferenceStatement': {
                          'ARN': 'string',
                          'FieldToMatch': {
                              'SingleHeader': {
                                  'Name': 'string'
                              },
                              'SingleQueryArgument': {
                                  'Name': 'string'
                              },
                              'AllQueryArguments': {}
                              ,
                              'UriPath': {}
                              ,
                              'QueryString': {}
                              ,
                              'Body': {}
                              ,
                              'Method': {}
                              ,
                              'JsonBody': {
                                  'MatchPattern': {
                                      'All': {}
                                      ,
                                      'IncludedPaths': [
                                          'string',
                                      ]
                                  },
                                  'MatchScope': 'ALL'|'KEY'|'VALUE',
                                  'InvalidFallbackBehavior': 'MATCH'|'NO_MATCH'|'EVALUATE_AS_STRING'
                              }
                          },
                          'TextTransformations': [
                              {
                                  'Priority': 123,
                                  'Type': 'NONE'|'COMPRESS_WHITE_SPACE'|'HTML_ENTITY_DECODE'|'LOWERCASE'|'CMD_LINE'|'URL_DECODE'|'BASE64_DECODE'|'HEX_DECODE'|'MD5'|'REPLACE_COMMENTS'|'ESCAPE_SEQ_DECODE'|'SQL_HEX_DECODE'|'CSS_DECODE'|'JS_DECODE'|'NORMALIZE_PATH'|'NORMALIZE_PATH_WIN'|'REMOVE_NULLS'|'REPLACE_NULLS'|'BASE64_DECODE_EXT'|'URL_DECODE_UNI'|'UTF8_TO_UNICODE'
                              },
                          ]
                      },
                      'RateBasedStatement': {
                          'Limit': 123,
                          'AggregateKeyType': 'IP'|'FORWARDED_IP',
                          'ScopeDownStatement': {'... recursive ...'},
                          'ForwardedIPConfig': {
                              'HeaderName': 'string',
                              'FallbackBehavior': 'MATCH'|'NO_MATCH'
                          }
                      },
                      'AndStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'OrStatement': {
                          'Statements': [
                              {'... recursive ...'},
                          ]
                      },
                      'NotStatement': {
                          'Statement': {'... recursive ...'}
                      },
                      'ManagedRuleGroupStatement': {
                          'VendorName': 'string',
                          'Name': 'string',
                          'ExcludedRules': [
                              {
                                  'Name': 'string'
                              },
                          ],
                          'ScopeDownStatement': {'... recursive ...'}
                      },
                      'LabelMatchStatement': {
                          'Scope': 'LABEL'|'NAMESPACE',
                          'Key': 'string'
                      }
                  },
                  'Action': {
                      'Block': {
                          'CustomResponse': {
                              'ResponseCode': 123,
                              'CustomResponseBodyKey': 'string',
                              'ResponseHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Allow': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      }
                  },
                  'OverrideAction': {
                      'Count': {
                          'CustomRequestHandling': {
                              'InsertHeaders': [
                                  {
                                      'Name': 'string',
                                      'Value': 'string'
                                  },
                              ]
                          }
                      },
                      'None': {}
                      
                  },
                  'RuleLabels': [
                      {
                          'Name': 'string'
                      },
                  ],
                  'VisibilityConfig': {
                      'SampledRequestsEnabled': True|False,
                      'CloudWatchMetricsEnabled': True|False,
                      'MetricName': 'string'
                  }
              },
          ],
          VisibilityConfig={
              'SampledRequestsEnabled': True|False,
              'CloudWatchMetricsEnabled': True|False,
              'MetricName': 'string'
          },
          LockToken='string',
          CustomResponseBodies={
              'string': {
                  'ContentType': 'TEXT_PLAIN'|'TEXT_HTML'|'APPLICATION_JSON',
                  'Content': 'string'
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the web ACL. You cannot change the name of a web ACL after you create it.

      

    
    :type Scope: string
    :param Scope: **[REQUIRED]** 

      Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. 

       

      To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: 

       

       
      * CLI - Specify the Region when you use the CloudFront scope: ``--scope=CLOUDFRONT --region=us-east-1`` .  
       
      * API and SDKs - For all calls, use the Region endpoint us-east-1.  
       

      

    
    :type Id: string
    :param Id: **[REQUIRED]** 

      The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.

      

    
    :type DefaultAction: dict
    :param DefaultAction: **[REQUIRED]** 

      The action to perform if none of the ``Rules`` contained in the ``WebACL`` match. 

      

    
      - **Block** *(dict) --* 

        Specifies that WAF should block requests by default. 

        

      
        - **CustomResponse** *(dict) --* 

          Defines a custom response for the web request.

           

          For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

          

        
          - **ResponseCode** *(integer) --* **[REQUIRED]** 

            The HTTP status code to return to the client. 

             

            For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
          - **CustomResponseBodyKey** *(string) --* 

            References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

            

          
          - **ResponseHeaders** *(list) --* 

            The HTTP headers to use in the response. Duplicate header names are not allowed. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
            - *(dict) --* 

              A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

              

            
              - **Name** *(string) --* **[REQUIRED]** 

                The name of the custom header. 

                 

                For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                

              
              - **Value** *(string) --* **[REQUIRED]** 

                The value of the custom header.

                

              
            
        
        
      
      - **Allow** *(dict) --* 

        Specifies that WAF should allow requests by default.

        

      
        - **CustomRequestHandling** *(dict) --* 

          Defines custom handling for the web request.

           

          For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

          

        
          - **InsertHeaders** *(list) --* **[REQUIRED]** 

            The HTTP headers to insert into the request. Duplicate header names are not allowed. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
            - *(dict) --* 

              A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

              

            
              - **Name** *(string) --* **[REQUIRED]** 

                The name of the custom header. 

                 

                For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                

              
              - **Value** *(string) --* **[REQUIRED]** 

                The value of the custom header.

                

              
            
        
        
      
    
    :type Description: string
    :param Description: 

      A description of the web ACL that helps with identification. 

      

    
    :type Rules: list
    :param Rules: 

      The  Rule statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

      

    
      - *(dict) --* 

        A single rule, which you can use in a  WebACL or  RuleGroup to identify web requests that you want to allow, block, or count. Each rule includes one top-level  Statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. 

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the rule. You can't change the name of a ``Rule`` after you create it. 

          

        
        - **Priority** *(integer) --* **[REQUIRED]** 

          If you define more than one ``Rule`` in a ``WebACL`` , WAF evaluates each request against the ``Rules`` in order based on the value of ``Priority`` . WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.

          

        
        - **Statement** *(dict) --* **[REQUIRED]** 

          The WAF processing statement for the rule, for example  ByteMatchStatement or  SizeConstraintStatement . 

          

        
          - **ByteMatchStatement** *(dict) --* 

            A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is refered to as a string match statement.

            

          
            - **SearchString** *(bytes) --* **[REQUIRED]** 

              A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in  FieldToMatch . The maximum length of the value is 50 bytes.

               

              Valid values depend on the component that you specify for inspection in ``FieldToMatch`` :

               

               
              * ``Method`` : The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.  
               
              * ``UriPath`` : The value that you want WAF to search for in the URI path, for example, ``/images/daily-ad.jpg`` .  
               

               

              If ``SearchString`` includes alphabetic characters A-Z and a-z, note that the value is case sensitive.

               

               **If you're using the WAF API**  

               

              Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 50 bytes.

               

              For example, suppose the value of ``Type`` is ``HEADER`` and the value of ``Data`` is ``User-Agent`` . If you want to search the ``User-Agent`` header for the value ``BadBot`` , you base64-encode ``BadBot`` using MIME base64-encoding and include the resulting value, ``QmFkQm90`` , in the value of ``SearchString`` .

               

               **If you're using the CLI or one of the Amazon Web Services SDKs**  

               

              The value that you want WAF to search for. The SDK automatically base64 encodes the value.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
            - **PositionalConstraint** *(string) --* **[REQUIRED]** 

              The area within the portion of a web request that you want WAF to search for ``SearchString`` . Valid values include the following:

               

               **CONTAINS**  

               

              The specified part of the web request must include the value of ``SearchString`` , but the location doesn't matter.

               

               **CONTAINS_WORD**  

               

              The specified part of the web request must include the value of ``SearchString`` , and ``SearchString`` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, ``SearchString`` must be a word, which means that both of the following are true:

               

               
              * ``SearchString`` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ``;BadBot`` . 
               
              * ``SearchString`` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, ``BadBot;`` and ``-BadBot;`` . 
               

               

               **EXACTLY**  

               

              The value of the specified part of the web request must exactly match the value of ``SearchString`` .

               

               **STARTS_WITH**  

               

              The value of ``SearchString`` must appear at the beginning of the specified part of the web request.

               

               **ENDS_WITH**  

               

              The value of ``SearchString`` must appear at the end of the specified part of the web request.

              

            
          
          - **SqliMatchStatement** *(dict) --* 

            Attackers sometimes insert malicious SQL code into web requests in an effort to extract data from your database. To allow or block web requests that appear to contain malicious SQL code, create one or more SQL injection match conditions. An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want WAF to inspect. Later in the process, when you create a web ACL, you specify whether to allow or block requests that appear to contain malicious SQL code.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **XssMatchStatement** *(dict) --* 

            A rule statement that defines a cross-site scripting (XSS) match search for WAF to apply to web requests. XSS attacks are those where the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. The XSS match statement provides the location in requests that you want WAF to search and text transformations to use on the search area before WAF searches for character sequences that are likely to be malicious strings. 

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **SizeConstraintStatement** *(dict) --* 

            A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. 

             

            If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you can create a size constraint condition and block requests that have a request body greater than 8192 bytes.

             

            If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI ``/logo.jpg`` is nine characters long.

            

          
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **ComparisonOperator** *(string) --* **[REQUIRED]** 

              The operator to use to compare the request part to the size setting. 

              

            
            - **Size** *(integer) --* **[REQUIRED]** 

              The size, in byte, to compare to the request part, after any transformations.

              

            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **GeoMatchStatement** *(dict) --* 

            A rule statement used to identify web requests based on country of origin. 

            

          
            - **CountryCodes** *(list) --* 

              An array of two-character country codes, for example, ``[ "US", "CN" ]`` , from the alpha-2 country ISO codes of the ISO 3166 international standard. 

              

            
              - *(string) --* 

              
          
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **RuleGroupReferenceStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a  RuleGroup . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.

             

            You cannot nest a ``RuleGroupReferenceStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the entity.

              

            
            - **ExcludedRules** *(list) --* 

              The names of rules that are in the referenced rule group, but that you want WAF to exclude from processing for this rule statement. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
          
          - **IPSetReferenceStatement** *(dict) --* 

            A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an  IPSet that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see  CreateIPSet .

             

            Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  IPSet that this statement references.

              

            
            - **IPSetForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
              - **Position** *(string) --* **[REQUIRED]** 

                The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be ``10.1.1.1, 127.0.0.0, 10.10.10.10`` where the first IP address identifies the original client and the rest identify proxies that the request went through. 

                 

                The options for this setting are the following: 

                 

                 
                * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP. 
                 
                * LAST - Inspect the last IP address in the list of IP addresses in the header. 
                 
                * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10. 
                 

                

              
            
          
          - **RegexPatternSetReferenceStatement** *(dict) --* 

            A rule statement used to search web request components for matches with regular expressions. To use this, create a  RegexPatternSet that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see  CreateRegexPatternSet .

             

            Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.

            

          
            - **ARN** *(string) --* **[REQUIRED]** 

              The Amazon Resource Name (ARN) of the  RegexPatternSet that this statement references.

              

            
            - **FieldToMatch** *(dict) --* **[REQUIRED]** 

              The part of a web request that you want WAF to inspect. For more information, see  FieldToMatch . 

              

            
              - **SingleHeader** *(dict) --* 

                Inspect a single header. Provide the name of the header to inspect, for example, ``User-Agent`` or ``Referer`` . This setting isn't case sensitive.

                 

                Example JSON: ``"SingleHeader": { "Name": "haystack" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query header to inspect.

                  

                
              
              - **SingleQueryArgument** *(dict) --* 

                Inspect a single query argument. Provide the name of the query argument to inspect, such as *UserName* or *SalesRegion* . The name can be up to 30 characters long and isn't case sensitive. 

                 

                This is used only to indicate the web request component for WAF to inspect, in the  FieldToMatch specification. 

                 

                Example JSON: ``"SingleQueryArgument": { "Name": "myArgument" }``  

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the query argument to inspect.

                  

                
              
              - **AllQueryArguments** *(dict) --* 

                Inspect all query arguments. 

                

              
              
              - **UriPath** *(dict) --* 

                Inspect the request URI path. This is the part of a web request that identifies a resource, for example, ``/images/daily-ad.jpg`` .

                

              
              
              - **QueryString** *(dict) --* 

                Inspect the query string. This is the part of a URL that appears after a ``?`` character, if any.

                

              
              
              - **Body** *(dict) --* 

                Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
              
              - **Method** *(dict) --* 

                Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 

                

              
              
              - **JsonBody** *(dict) --* 

                Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 

                 

                Note that only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. If you don't need to inspect more than 8 KB, you can guarantee that you don't allow additional bytes in by combining a statement that inspects the body of the web request, such as  ByteMatchStatement or  RegexPatternSetReferenceStatement , with a  SizeConstraintStatement that enforces an 8 KB size limit on the body of the request. WAF doesn't support inspecting the entire contents of web requests whose bodies exceed the 8 KB limit.

                

              
                - **MatchPattern** *(dict) --* **[REQUIRED]** 

                  The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. 

                  

                
                  - **All** *(dict) --* 

                    Match all of the elements. See also ``MatchScope`` in  JsonBody . 

                     

                    You must specify either this setting or the ``IncludedPaths`` setting, but not both.

                    

                  
                  
                  - **IncludedPaths** *(list) --* 

                    Match only the specified include paths. See also ``MatchScope`` in  JsonBody . 

                     

                    Provide the include paths using JSON Pointer syntax. For example, ``"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]`` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation `JavaScript Object Notation (JSON) Pointer <https://tools.ietf.org/html/rfc6901>`__ . 

                     

                    You must specify either this setting or the ``All`` setting, but not both.

                     

                    .. note::

                       

                      Don't use this option to include all paths. Instead, use the ``All`` setting. 

                       

                    

                  
                    - *(string) --* 

                    
                
                
                - **MatchScope** *(string) --* **[REQUIRED]** 

                  The parts of the JSON to match against using the ``MatchPattern`` . If you specify ``All`` , WAF matches against keys and values. 

                  

                
                - **InvalidFallbackBehavior** *(string) --* 

                  What WAF should do if it fails to completely parse the JSON body. The options are the following:

                   

                   
                  * ``EVALUATE_AS_STRING`` - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string. 
                   
                  * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                   
                  * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                   

                   

                  If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. 

                   

                  WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as characters that aren't valid, duplicate keys, truncation, and any content whose root node isn't an object or an array. 

                   

                  WAF parses the JSON in the following examples as two valid key, value pairs: 

                   

                   
                  * Missing comma: ``{"key1":"value1""key2":"value2"}``   
                   
                  * Missing colon: ``{"key1":"value1","key2""value2"}``   
                   
                  * Extra colons: ``{"key1"::"value1","key2""value2"}``   
                   

                  

                
              
            
            - **TextTransformations** *(list) --* **[REQUIRED]** 

              Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by ``FieldToMatch`` , starting from the lowest priority setting, before inspecting the content for a match.

              

            
              - *(dict) --* 

                Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. 

                

              
                - **Priority** *(integer) --* **[REQUIRED]** 

                  Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. 

                  

                
                - **Type** *(string) --* **[REQUIRED]** 

                  You can specify the following transformation types:

                   

                   **BASE64_DECODE** - Decode a ``Base64`` -encoded string.

                   

                   **BASE64_DECODE_EXT** - Decode a ``Base64`` -encoded string, but use a forgiving implementation that ignores characters that aren't valid.

                   

                   **CMD_LINE** - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. 

                   

                   
                  * Delete the following characters: ``\ " ' ^``   
                   
                  * Delete spaces before the following characters: ``/ (``   
                   
                  * Replace the following characters with a space: ``, ;``   
                   
                  * Replace multiple spaces with one space 
                   
                  * Convert uppercase letters (A-Z) to lowercase (a-z) 
                   

                   

                   **COMPRESS_WHITE_SPACE** - Replace these characters with a space character (decimal 32): 

                   

                   
                  * ``\f`` , formfeed, decimal 12 
                   
                  * ``\t`` , tab, decimal 9 
                   
                  * ``\n`` , newline, decimal 10 
                   
                  * ``\r`` , carriage return, decimal 13 
                   
                  * ``\v`` , vertical tab, decimal 11 
                   
                  * Non-breaking space, decimal 160 
                   

                   

                   ``COMPRESS_WHITE_SPACE`` also replaces multiple spaces with one space.

                   

                   **CSS_DECODE** - Decode characters that were encoded using CSS 2.x escape rules ``syndata.html#characters`` . This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ``ja\vascript`` for javascript. 

                   

                   **ESCAPE_SEQ_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output. 

                   

                   **HEX_DECODE** - Decode a string of hexadecimal characters into a binary.

                   

                   **HTML_ENTITY_DECODE** - Replace HTML-encoded characters with unencoded characters. ``HTML_ENTITY_DECODE`` performs these operations: 

                   

                   
                  * Replaces ``(ampersand)quot;`` with ``"``   
                   
                  * Replaces ``(ampersand)nbsp;`` with a non-breaking space, decimal 160 
                   
                  * Replaces ``(ampersand)lt;`` with a "less than" symbol 
                   
                  * Replaces ``(ampersand)gt;`` with ``>``   
                   
                  * Replaces characters that are represented in hexadecimal format, ``(ampersand)#xhhhh;`` , with the corresponding characters 
                   
                  * Replaces characters that are represented in decimal format, ``(ampersand)#nnnn;`` , with the corresponding characters 
                   

                   

                   **JS_DECODE** - Decode JavaScript escape sequences. If a ``\``  ``u``  ``HHHH`` code is in the full-width ASCII code range of ``FF01-FF5E`` , then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. 

                   

                   **LOWERCASE** - Convert uppercase letters (A-Z) to lowercase (a-z). 

                   

                   **MD5** - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. 

                   

                   **NONE** - Specify ``NONE`` if you don't want any text transformations. 

                   

                   **NORMALIZE_PATH** - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. 

                   

                   **NORMALIZE_PATH_WIN** - This is the same as ``NORMALIZE_PATH`` , but first converts backslash characters to forward slashes. 

                   

                   **REMOVE_NULLS** - Remove all ``NULL`` bytes from the input. 

                   

                   **REPLACE_COMMENTS** - Replace each occurrence of a C-style comment (``/* ... */`` ) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (``*/`` ) is not acted upon. 

                   

                   **REPLACE_NULLS** - Replace NULL bytes in the input with space characters (ASCII ``0x20`` ). 

                   

                   **SQL_HEX_DECODE** - Decode the following ANSI C escape sequences: ``\a`` , ``\b`` , ``\f`` , ``\n`` , ``\r`` , ``\t`` , ``\v`` , ``\\`` , ``\?`` , ``\'`` , ``\"`` , ``\xHH`` (hexadecimal), ``\0OOO`` (octal). Encodings that aren't valid remain in the output.

                   

                   **URL_DECODE** - Decode a URL-encoded value. 

                   

                   **URL_DECODE_UNI** - Like ``URL_DECODE`` , but with support for Microsoft-specific ``%u`` encoding. If the code is in the full-width ASCII code range of ``FF01-FF5E`` , the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. 

                   

                   **UTF8_TO_UNICODE** - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.

                  

                
              
          
          
          - **RateBasedStatement** *(dict) --* 

            A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests.

             

            When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.

             

            You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:

             

             
            * An IP match statement with an IP set that specified the address 192.0.2.44. 
             
            * A string match statement that searches in the User-Agent header for the string BadBot. 
             

             

            In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet both of the conditions in the statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet both conditions are not counted towards the rate limit and are not affected by this rule.

             

            You cannot nest a ``RateBasedStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **Limit** *(integer) --* **[REQUIRED]** 

              The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ``ScopeDownStatement`` , this limit is applied only to the requests that match the statement.

              

            
            - **AggregateKeyType** *(string) --* **[REQUIRED]** 

              Setting that indicates how to aggregate the request counts. The options are the following:

               

               
              * IP - Aggregate the request counts on the IP address from the web request origin. 
               
              * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ``ForwardedIPConfig`` , to specify the header to use.  
               

              

            
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
            - **ForwardedIPConfig** *(dict) --* 

              The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. 

               

              .. note::

                 

                If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                 

               

              This is required if ``AggregateKeyType`` is set to ``FORWARDED_IP`` .

              

            
              - **HeaderName** *(string) --* **[REQUIRED]** 

                The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to ``X-Forwarded-For`` .

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                

              
              - **FallbackBehavior** *(string) --* **[REQUIRED]** 

                The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.

                 

                .. note::

                   

                  If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.

                   

                 

                You can specify the following fallback behaviors:

                 

                 
                * ``MATCH`` - Treat the web request as matching the rule statement. WAF applies the rule action to the request. 
                 
                * ``NO_MATCH`` - Treat the web request as not matching the rule statement. 
                 

                

              
            
          
          - **AndStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with AND logic. You provide more than one  Statement within the ``AndStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with AND logic. You can use any statements that can be nested. 

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **OrStatement** *(dict) --* 

            A logical rule statement used to combine other rule statements with OR logic. You provide more than one  Statement within the ``OrStatement`` . 

            

          
            - **Statements** *(list) --* **[REQUIRED]** 

              The statements to combine with OR logic. You can use any statements that can be nested.

              

            
              - *(dict) --* 

                The processing guidance for a  Rule , used by WAF to determine whether a web request matches the rule. 

                

              
          
          
          - **NotStatement** *(dict) --* 

            A logical rule statement used to negate the results of another rule statement. You provide one  Statement within the ``NotStatement`` .

            

          
            - **Statement** *(dict) --* 

              The statement to negate. You can use any statement that can be nested.

              

            
          
          - **ManagedRuleGroupStatement** *(dict) --* 

            A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling  ListAvailableManagedRuleGroups .

             

            You cannot nest a ``ManagedRuleGroupStatement`` , for example for use inside a ``NotStatement`` or ``OrStatement`` . It can only be referenced as a top-level statement within a rule.

            

          
            - **VendorName** *(string) --* **[REQUIRED]** 

              The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.

              

            
            - **Name** *(string) --* **[REQUIRED]** 

              The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.

              

            
            - **ExcludedRules** *(list) --* 

              The rules whose actions are set to ``COUNT`` by the web ACL, regardless of the action that is set on the rule. This effectively excludes the rule from acting on web requests. 

              

            
              - *(dict) --* 

                Specifies a single rule to exclude from the rule group. Excluding a rule overrides its action setting for the rule group in the web ACL, setting it to ``COUNT`` . This effectively excludes the rule from acting on web requests. 

                

              
                - **Name** *(string) --* **[REQUIRED]** 

                  The name of the rule to exclude.

                  

                
              
          
            - **ScopeDownStatement** *(dict) --* 

              An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable  Statement in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. 

              

            
          
          - **LabelMatchStatement** *(dict) --* 

            A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. 

             

            The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. 

            

          
            - **Scope** *(string) --* **[REQUIRED]** 

              Specify whether you want to match using the label name or just the namespace. 

              

            
            - **Key** *(string) --* **[REQUIRED]** 

              The string to match against. The setting you provide for this depends on the match statement's ``Scope`` setting: 

               

               
              * If the ``Scope`` indicates ``LABEL`` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.  
               
              * If the ``Scope`` indicates ``NAMESPACE`` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates. 
               

               

              Labels are case sensitive and components of a label must be separated by colon, for example ``NS1:NS2:name`` .

              

            
          
        
        - **Action** *(dict) --* 

          The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. 

           

          This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          You must specify either this ``Action`` setting or the rule ``OverrideAction`` setting, but not both:

           

           
          * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.  
           
          * If the rule statement references a rule group, use the override action setting and not this action setting.  
           

          

        
          - **Block** *(dict) --* 

            Instructs WAF to block the web request.

            

          
            - **CustomResponse** *(dict) --* 

              Defines a custom response for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **ResponseCode** *(integer) --* **[REQUIRED]** 

                The HTTP status code to return to the client. 

                 

                For a list of status codes that you can use in your custom reqponses, see `Supported status codes for custom response <https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
              - **CustomResponseBodyKey** *(string) --* 

                References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the ``CustomResponseBodies`` setting for the  WebACL or  RuleGroup where you want to use it. Then, in the rule action or web ACL default action ``BlockAction`` setting, you reference the response body using this key. 

                

              
              - **ResponseHeaders** *(list) --* 

                The HTTP headers to use in the response. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Allow** *(dict) --* 

            Instructs WAF to allow the web request.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **Count** *(dict) --* 

            Instructs WAF to count the web request and allow it.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
        
        - **OverrideAction** *(dict) --* 

          The override action to apply to the rules in a rule group. Used only for rule statements that reference a rule group, like ``RuleGroupReferenceStatement`` and ``ManagedRuleGroupStatement`` . 

           

          Set the override action to none to leave the rule actions in effect. Set it to count to only count matches, regardless of the rule action settings. 

           

          In a  Rule , you must specify either this ``OverrideAction`` setting or the rule ``Action`` setting, but not both:

           

           
          * If the rule statement references a rule group, use this override action setting and not the action setting.  
           
          * If the rule statement does not reference a rule group, use the rule action setting and not this rule override action setting.  
           

          

        
          - **Count** *(dict) --* 

            Override the rule action setting to count.

            

          
            - **CustomRequestHandling** *(dict) --* 

              Defines custom handling for the web request.

               

              For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

              

            
              - **InsertHeaders** *(list) --* **[REQUIRED]** 

                The HTTP headers to insert into the request. Duplicate header names are not allowed. 

                 

                For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

                

              
                - *(dict) --* 

                  A custom header for custom request and response handling. This is used in  CustomResponse and  CustomRequestHandling .

                  

                
                  - **Name** *(string) --* **[REQUIRED]** 

                    The name of the custom header. 

                     

                    For custom request header insertion, when WAF inserts the header into the request, it prefixes this name ``x-amzn-waf-`` , to avoid confusion with the headers that are already in the request. For example, for the header name ``sample`` , WAF inserts the header ``x-amzn-waf-sample`` .

                    

                  
                  - **Value** *(string) --* **[REQUIRED]** 

                    The value of the custom header.

                    

                  
                
            
            
          
          - **None** *(dict) --* 

            Don't override the rule action setting.

            

          
          
        
        - **RuleLabels** *(list) --* 

          Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. 

           

          Rules that run after this rule in the web ACL can match against these labels using a ``LabelMatchStatement`` .

           

          For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:

           

           
          * Separate each component of the label with a colon.  
           
          * Each namespace or name can have up to 128 characters. 
           
          * You can specify up to 5 namespaces in a label. 
           
          * Don't use the following reserved words in your label specification: ``aws`` , ``waf`` , ``managed`` , ``rulegroup`` , ``webacl`` , ``regexpatternset`` , or ``ipset`` . 
           

           

          For example, ``myLabelName`` or ``nameSpace1:nameSpace2:myLabelName`` . 

          

        
          - *(dict) --* 

            A single label container. This is used as an element of a label array in multiple contexts, for example, in ``RuleLabels`` inside a  Rule and in ``Labels`` inside a  SampledHTTPRequest . 

            

          
            - **Name** *(string) --* **[REQUIRED]** 

              The label string. 

              

            
          
      
        - **VisibilityConfig** *(dict) --* **[REQUIRED]** 

          Defines and enables Amazon CloudWatch metrics and web request sample collection. 

          

        
          - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

            

          
          - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

            

          
          - **MetricName** *(string) --* **[REQUIRED]** 

            A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

            

          
        
      
  
    :type VisibilityConfig: dict
    :param VisibilityConfig: **[REQUIRED]** 

      Defines and enables Amazon CloudWatch metrics and web request sample collection. 

      

    
      - **SampledRequestsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. 

        

      
      - **CloudWatchMetricsEnabled** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see `WAF Metrics <https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics>`__ .

        

      
      - **MetricName** *(string) --* **[REQUIRED]** 

        A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names reserved for WAF, for example "All" and "Default_Action." 

        

      
    
    :type LockToken: string
    :param LockToken: **[REQUIRED]** 

      A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a ``WAFOptimisticLockException`` . If this happens, perform another get, and use the new token returned by that operation. 

      

    
    :type CustomResponseBodies: dict
    :param CustomResponseBodies: 

      A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. 

       

      For information about customizing web requests and responses, see `Customizing web requests and responses in WAF <https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

       

      For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

      

    
      - *(string) --* 

      
        - *(dict) --* 

          The response body to use in a custom response to a web request. This is referenced by key from  CustomResponse  ``CustomResponseBodyKey`` .

          

        
          - **ContentType** *(string) --* **[REQUIRED]** 

            The type of content in the payload that you are defining in the ``Content`` string.

            

          
          - **Content** *(string) --* **[REQUIRED]** 

            The payload of the custom response. 

             

            You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ``ContentType`` setting. 

             

            For information about the limits on count and size for custom request and response settings, see `WAF quotas <https://docs.aws.amazon.com/waf/latest/developerguide/limits.html>`__ in the `WAF Developer Guide <https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html>`__ . 

            

          
        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextLockToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextLockToken** *(string) --* 

          A token used for optimistic locking. WAF returns this token to your update requests. You use ``NextLockToken`` in the same manner as you use ``LockToken`` . 

          
    
    **Exceptions** 
    
    *     :py:class:`WAFV2.Client.exceptions.WAFInternalErrorException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidParameterException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFNonexistentItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFDuplicateItemException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFOptimisticLockException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFLimitsExceededException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidResourceException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFUnavailableEntityException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFSubscriptionNotFoundException`

    
    *     :py:class:`WAFV2.Client.exceptions.WAFInvalidOperationException`

    

==========
Paginators
==========


The available paginators are:
