

******************
PersonalizeRuntime
******************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: PersonalizeRuntime.Client

  A low-level client representing Amazon Personalize Runtime
  

  

  ::

    
    import boto3
    
    client = boto3.client('personalize-runtime')

  
  These are the available methods:
  
  *   :py:meth:`~PersonalizeRuntime.Client.can_paginate`

  
  *   :py:meth:`~PersonalizeRuntime.Client.generate_presigned_url`

  
  *   :py:meth:`~PersonalizeRuntime.Client.get_paginator`

  
  *   :py:meth:`~PersonalizeRuntime.Client.get_personalized_ranking`

  
  *   :py:meth:`~PersonalizeRuntime.Client.get_recommendations`

  
  *   :py:meth:`~PersonalizeRuntime.Client.get_waiter`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_personalized_ranking(**kwargs)

    

    Re-ranks a list of recommended items for the given user. The first item in the list is deemed the most likely item to be of interest to the user.

     

    .. note::

       

      The solution backing the campaign must have been created using a recipe of type PERSONALIZED_RANKING.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/personalize-runtime-2018-05-22/GetPersonalizedRanking>`_    


    **Request Syntax** 
    ::

      response = client.get_personalized_ranking(
          campaignArn='string',
          inputList=[
              'string',
          ],
          userId='string',
          context={
              'string': 'string'
          },
          filterArn='string',
          filterValues={
              'string': 'string'
          }
      )
    :type campaignArn: string
    :param campaignArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the campaign to use for generating the personalized ranking.

      

    
    :type inputList: list
    :param inputList: **[REQUIRED]** 

      A list of items (by ``itemId`` ) to rank. If an item was not included in the training dataset, the item is appended to the end of the reranked list. The maximum is 500.

      

    
      - *(string) --* 

      
  
    :type userId: string
    :param userId: **[REQUIRED]** 

      The user for which you want the campaign to provide a personalized ranking.

      

    
    :type context: dict
    :param context: 

      The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type filterArn: string
    :param filterArn: 

      The Amazon Resource Name (ARN) of a filter you created to include items or exclude items from recommendations for a given user. For more information, see `Filtering Recommendations <https://docs.aws.amazon.com/personalize/latest/dg/filter.html>`__ .

      

    
    :type filterValues: dict
    :param filterValues: 

      The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. 

       

      For filter expressions that use an ``INCLUDE`` element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an ``EXCLUDE`` element to exclude items, you can omit the ``filter-values`` .In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.

       

      For more information, see `Filtering Recommendations <https://docs.aws.amazon.com/personalize/latest/dg/filter.html>`__ .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'personalizedRanking': [
                {
                    'itemId': 'string',
                    'score': 123.0
                },
            ],
            'recommendationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **personalizedRanking** *(list) --* 

          A list of items in order of most likely interest to the user. The maximum is 500.

          
          

          - *(dict) --* 

            An object that identifies an item.

             

            The and APIs return a list of ``PredictedItem`` s.

            
            

            - **itemId** *(string) --* 

              The recommended item ID.

              
            

            - **score** *(float) --* 

              A numeric representation of the model's certainty that the item will be the next user selection. For more information on scoring logic, see  how-scores-work .

              
        
      
        

        - **recommendationId** *(string) --* 

          The ID of the recommendation.

          
    
    **Exceptions** 
    
    *     :py:class:`PersonalizeRuntime.Client.exceptions.InvalidInputException`

    
    *     :py:class:`PersonalizeRuntime.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: get_recommendations(**kwargs)

    

    Returns a list of recommended items. The required input depends on the recipe type used to create the solution backing the campaign, as follows:

     

     
    * RELATED_ITEMS - ``itemId`` required, ``userId`` not used 
     
    * USER_PERSONALIZATION - ``itemId`` optional, ``userId`` required 
     

     

    .. note::

       

      Campaigns that are backed by a solution created using a recipe of type PERSONALIZED_RANKING use the API.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/personalize-runtime-2018-05-22/GetRecommendations>`_    


    **Request Syntax** 
    ::

      response = client.get_recommendations(
          campaignArn='string',
          itemId='string',
          userId='string',
          numResults=123,
          context={
              'string': 'string'
          },
          filterArn='string',
          filterValues={
              'string': 'string'
          }
      )
    :type campaignArn: string
    :param campaignArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.

      

    
    :type itemId: string
    :param itemId: 

      The item ID to provide recommendations for.

       

      Required for ``RELATED_ITEMS`` recipe type.

      

    
    :type userId: string
    :param userId: 

      The user ID to provide recommendations for.

       

      Required for ``USER_PERSONALIZATION`` recipe type.

      

    
    :type numResults: integer
    :param numResults: 

      The number of results to return. The default is 25. The maximum is 500.

      

    
    :type context: dict
    :param context: 

      The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type filterArn: string
    :param filterArn: 

      The ARN of the filter to apply to the returned recommendations. For more information, see `Filtering Recommendations <https://docs.aws.amazon.com/personalize/latest/dg/filter.html>`__ .

       

      When using this parameter, be sure the filter resource is ``ACTIVE`` .

      

    
    :type filterValues: dict
    :param filterValues: 

      The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. 

       

      For filter expressions that use an ``INCLUDE`` element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an ``EXCLUDE`` element to exclude items, you can omit the ``filter-values`` .In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.

       

      For more information, see `Filtering Recommendations <https://docs.aws.amazon.com/personalize/latest/dg/filter.html>`__ .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'itemList': [
                {
                    'itemId': 'string',
                    'score': 123.0
                },
            ],
            'recommendationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **itemList** *(list) --* 

          A list of recommendations sorted in ascending order by prediction score. There can be a maximum of 500 items in the list.

          
          

          - *(dict) --* 

            An object that identifies an item.

             

            The and APIs return a list of ``PredictedItem`` s.

            
            

            - **itemId** *(string) --* 

              The recommended item ID.

              
            

            - **score** *(float) --* 

              A numeric representation of the model's certainty that the item will be the next user selection. For more information on scoring logic, see  how-scores-work .

              
        
      
        

        - **recommendationId** *(string) --* 

          The ID of the recommendation.

          
    
    **Exceptions** 
    
    *     :py:class:`PersonalizeRuntime.Client.exceptions.InvalidInputException`

    
    *     :py:class:`PersonalizeRuntime.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


==========
Paginators
==========


The available paginators are:
