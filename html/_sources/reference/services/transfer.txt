

********
Transfer
********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: Transfer.Client

  A low-level client representing AWS Transfer Family
  

  Amazon Web Services Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3). Amazon Web Services helps you seamlessly migrate your file transfer workflows to Amazon Web Services Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services services for processing, analytics, machine learning, and archiving. Getting started with Amazon Web Services Transfer Family is easy since there is no infrastructure to buy and set up.

  ::

    
    import boto3
    
    client = boto3.client('transfer')

  
  These are the available methods:
  
  *   :py:meth:`~Transfer.Client.can_paginate`

  
  *   :py:meth:`~Transfer.Client.create_access`

  
  *   :py:meth:`~Transfer.Client.create_server`

  
  *   :py:meth:`~Transfer.Client.create_user`

  
  *   :py:meth:`~Transfer.Client.delete_access`

  
  *   :py:meth:`~Transfer.Client.delete_server`

  
  *   :py:meth:`~Transfer.Client.delete_ssh_public_key`

  
  *   :py:meth:`~Transfer.Client.delete_user`

  
  *   :py:meth:`~Transfer.Client.describe_access`

  
  *   :py:meth:`~Transfer.Client.describe_security_policy`

  
  *   :py:meth:`~Transfer.Client.describe_server`

  
  *   :py:meth:`~Transfer.Client.describe_user`

  
  *   :py:meth:`~Transfer.Client.generate_presigned_url`

  
  *   :py:meth:`~Transfer.Client.get_paginator`

  
  *   :py:meth:`~Transfer.Client.get_waiter`

  
  *   :py:meth:`~Transfer.Client.import_ssh_public_key`

  
  *   :py:meth:`~Transfer.Client.list_accesses`

  
  *   :py:meth:`~Transfer.Client.list_security_policies`

  
  *   :py:meth:`~Transfer.Client.list_servers`

  
  *   :py:meth:`~Transfer.Client.list_tags_for_resource`

  
  *   :py:meth:`~Transfer.Client.list_users`

  
  *   :py:meth:`~Transfer.Client.start_server`

  
  *   :py:meth:`~Transfer.Client.stop_server`

  
  *   :py:meth:`~Transfer.Client.tag_resource`

  
  *   :py:meth:`~Transfer.Client.test_identity_provider`

  
  *   :py:meth:`~Transfer.Client.untag_resource`

  
  *   :py:meth:`~Transfer.Client.update_access`

  
  *   :py:meth:`~Transfer.Client.update_server`

  
  *   :py:meth:`~Transfer.Client.update_user`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_access(**kwargs)

    

    Used by administrators to choose which groups in the directory should have access to upload and download files over the enabled protocols using Amazon Web Services Transfer Family. For example, a Microsoft Active Directory might contain 50,000 users, but only a small fraction might need the ability to transfer files to the server. An administrator can use ``CreateAccess`` to limit the access to the correct set of users who need this ability.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/CreateAccess>`_    


    **Request Syntax** 
    ::

      response = client.create_access(
          HomeDirectory='string',
          HomeDirectoryType='PATH'|'LOGICAL',
          HomeDirectoryMappings=[
              {
                  'Entry': 'string',
                  'Target': 'string'
              },
          ],
          Policy='string',
          PosixProfile={
              'Uid': 123,
              'Gid': 123,
              'SecondaryGids': [
                  123,
              ]
          },
          Role='string',
          ServerId='string',
          ExternalId='string'
      )
    :type HomeDirectory: string
    :param HomeDirectory: 

      The landing directory (folder) for a user when they log in to the server using the client.

       

      A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

      

    
    :type HomeDirectoryType: string
    :param HomeDirectoryType: 

      The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

      

    
    :type HomeDirectoryMappings: list
    :param HomeDirectoryMappings: 

      Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the ``Entry`` and ``Target`` pair, where ``Entry`` shows how the path is made visible and ``Target`` is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Amazon Web Services Identity and Access Management (IAM) role provides access to paths in ``Target`` . This value can only be set when ``HomeDirectoryType`` is set to *LOGICAL* .

       

      The following is an ``Entry`` and ``Target`` pair example.

       

       ``[ { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]``  

       

      In most cases, you can use this value instead of the scope-down policy to lock down your user to the designated home directory ("``chroot`` "). To do this, you can set ``Entry`` to ``/`` and set ``Target`` to the ``HomeDirectory`` parameter value.

       

      The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

       

       ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

       

      .. note::

         

        If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

         

      

    
      - *(dict) --* 

        Represents an object that contains entries and targets for ``HomeDirectoryMappings`` .

         

        The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

         

         ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

         

        .. note::

           

          If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

           

        

      
        - **Entry** *(string) --* **[REQUIRED]** 

          Represents an entry for ``HomeDirectoryMappings`` .

          

        
        - **Target** *(string) --* **[REQUIRED]** 

          Represents the map target that is used in a ``HomeDirectorymapEntry`` .

          

        
      
  
    :type Policy: string
    :param Policy: 

      A scope-down policy for your user so that you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ``${Transfer:UserName}`` , ``${Transfer:HomeDirectory}`` , and ``${Transfer:HomeBucket}`` .

       

      .. note::

         

        This only applies when domain of ``ServerId`` is S3. Amazon EFS does not use scope-down policies.

         

        For scope-down policies, Amazon Web Services Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the ``Policy`` argument.

         

        For an example of a scope-down policy, see `Example scope-down policy <https://docs.aws.amazon.com/transfer/latest/userguide/scope-down-policy.html>`__ .

         

        For more information, see `AssumeRole <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__ in the *Amazon Web Services Security Token Service API Reference* .

         

      

    
    :type PosixProfile: dict
    :param PosixProfile: 

      The full POSIX identity, including user ID (``Uid`` ), group ID (``Gid`` ), and any secondary groups IDs (``SecondaryGids`` ), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.

      

    
      - **Uid** *(integer) --* **[REQUIRED]** 

        The POSIX user ID used for all EFS operations by this user.

        

      
      - **Gid** *(integer) --* **[REQUIRED]** 

        The POSIX group ID used for all EFS operations by this user.

        

      
      - **SecondaryGids** *(list) --* 

        The secondary POSIX group IDs used for all EFS operations by this user.

        

      
        - *(integer) --* 

        
    
    
    :type Role: string
    :param Role: **[REQUIRED]** 

      Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

      

    
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.

      

    
    :type ExternalId: string
    :param ExternalId: **[REQUIRED]** 

      A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.

       

       ``Get-ADGroup -Filter {samAccountName -like "*YourGroupName* *"} -Properties * | Select SamAccountName,ObjectSid``  

       

      In that command, replace *YourGroupName* with the name of your Active Directory group.

       

      The regex used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string',
            'ExternalId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerId** *(string) --* 

          The ID of the server that the user is attached to.

          
        

        - **ExternalId** *(string) --* 

          The external ID of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: create_server(**kwargs)

    

    Instantiates an auto-scaling virtual server based on the selected file transfer protocol in Amazon Web Services. When you make updates to your file transfer protocol-enabled server or when you work with users, use the service-generated ``ServerId`` property that is assigned to the newly created server.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/CreateServer>`_    


    **Request Syntax** 
    ::

      response = client.create_server(
          Certificate='string',
          Domain='S3'|'EFS',
          EndpointDetails={
              'AddressAllocationIds': [
                  'string',
              ],
              'SubnetIds': [
                  'string',
              ],
              'VpcEndpointId': 'string',
              'VpcId': 'string',
              'SecurityGroupIds': [
                  'string',
              ]
          },
          EndpointType='PUBLIC'|'VPC'|'VPC_ENDPOINT',
          HostKey='string',
          IdentityProviderDetails={
              'Url': 'string',
              'InvocationRole': 'string',
              'DirectoryId': 'string'
          },
          IdentityProviderType='SERVICE_MANAGED'|'API_GATEWAY'|'AWS_DIRECTORY_SERVICE',
          LoggingRole='string',
          Protocols=[
              'SFTP'|'FTP'|'FTPS',
          ],
          SecurityPolicyName='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Certificate: string
    :param Certificate: 

      The Amazon Resource Name (ARN) of the Amazon Web Services Certificate Manager (ACM) certificate. Required when ``Protocols`` is set to ``FTPS`` .

       

      To request a new public certificate, see `Request a public certificate <https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html>`__ in the *Amazon Web Services Certificate Manager User Guide* .

       

      To import an existing certificate into ACM, see `Importing certificates into ACM <https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html>`__ in the *Amazon Web Services Certificate Manager User Guide* .

       

      To request a private certificate to use FTPS through private IP addresses, see `Request a private certificate <https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html>`__ in the *Amazon Web Services Certificate Manager User Guide* .

       

      Certificates with the following cryptographic algorithms and key sizes are supported:

       

       
      * 2048-bit RSA (RSA_2048) 
       
      * 4096-bit RSA (RSA_4096) 
       
      * Elliptic Prime Curve 256 bit (EC_prime256v1) 
       
      * Elliptic Prime Curve 384 bit (EC_secp384r1) 
       
      * Elliptic Prime Curve 521 bit (EC_secp521r1) 
       

       

      .. note::

         

        The certificate must be a valid SSL/TLS X.509 version 3 certificate with FQDN or IP address specified and information about the issuer.

         

      

    
    :type Domain: string
    :param Domain: 

      The domain of the storage system that is used for file transfers. There are two domains available: Amazon Simple Storage Service (Amazon S3) and Amazon Elastic File System (Amazon EFS). The default value is S3.

       

      .. note::

         

        After the server is created, the domain cannot be changed.

         

      

    
    :type EndpointDetails: dict
    :param EndpointDetails: 

      The virtual private cloud (VPC) endpoint settings that are configured for your server. When you host your endpoint within your VPC, you can make it accessible only to resources within your VPC, or you can attach Elastic IP addresses and make it accessible to clients over the internet. Your VPC's default security groups are automatically assigned to your endpoint.

      

    
      - **AddressAllocationIds** *(list) --* 

        A list of address allocation IDs that are required to attach an Elastic IP address to your server's endpoint.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` and it is only valid in the ``UpdateServer`` API.

           

        

      
        - *(string) --* 

        
    
      - **SubnetIds** *(list) --* 

        A list of subnet IDs that are required to host your server endpoint in your VPC.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` .

           

        

      
        - *(string) --* 

        
    
      - **VpcEndpointId** *(string) --* 

        The ID of the VPC endpoint.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC_ENDPOINT`` .

           

          For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.

           

        

      
      - **VpcId** *(string) --* 

        The VPC ID of the VPC in which a server's endpoint will be hosted.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` .

           

        

      
      - **SecurityGroupIds** *(list) --* 

        A list of security groups IDs that are available to attach to your server's endpoint.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` .

           

          You can edit the ``SecurityGroupIds`` property in the `UpdateServer <https://docs.aws.amazon.com/transfer/latest/userguide/API_UpdateServer.html>`__ API only if you are changing the ``EndpointType`` from ``PUBLIC`` or ``VPC_ENDPOINT`` to ``VPC`` . To change security groups associated with your server's VPC endpoint after creation, use the Amazon EC2 `ModifyVpcEndpoint <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyVpcEndpoint.html>`__ API.

           

        

      
        - *(string) --* 

        
    
    
    :type EndpointType: string
    :param EndpointType: 

      The type of endpoint that you want your server to use. You can choose to make your server's endpoint publicly accessible (PUBLIC) or host it inside your VPC. With an endpoint that is hosted in a VPC, you can restrict access to your server and resources only within your VPC or choose to make it internet facing by attaching Elastic IP addresses directly to it.

       

      .. note::

         

        After May 19, 2021, you won't be able to create a server using ``EndpointType=VPC_ENDPOINT`` in your Amazon Web Services account if your account hasn't already done so before May 19, 2021. If you have already created servers with ``EndpointType=VPC_ENDPOINT`` in your Amazon Web Services account on or before May 19, 2021, you will not be affected. After this date, use ``EndpointType`` =``VPC`` .

         

        For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.

         

        It is recommended that you use ``VPC`` as the ``EndpointType`` . With this endpoint type, you have the option to directly associate up to three Elastic IPv4 addresses (BYO IP included) with your server's endpoint and use VPC security groups to restrict traffic by the client's public IP address. This is not possible with ``EndpointType`` set to ``VPC_ENDPOINT`` .

         

      

    
    :type HostKey: string
    :param HostKey: 

      The RSA private key as generated by the ``ssh-keygen -N "" -m PEM -f my-new-server-key`` command.

       

      .. warning::

         

        If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't update the host key. Accidentally changing a server's host key can be disruptive.

         

       

      For more information, see `Change the host key for your SFTP-enabled server <https://docs.aws.amazon.com/transfer/latest/userguide/edit-server-config.html#configuring-servers-change-host-key>`__ in the *Amazon Web Services Transfer Family User Guide* .

      

    
    :type IdentityProviderDetails: dict
    :param IdentityProviderDetails: 

      Required when ``IdentityProviderType`` is set to ``AWS_DIRECTORY_SERVICE`` or ``API_GATEWAY`` . Accepts an array containing all of the information required to use a directory in ``AWS_DIRECTORY_SERVICE`` or invoke a customer-supplied authentication API, including the API Gateway URL. Not required when ``IdentityProviderType`` is set to ``SERVICE_MANAGED`` .

      

    
      - **Url** *(string) --* 

        Provides the location of the service endpoint used to authenticate users.

        

      
      - **InvocationRole** *(string) --* 

        Provides the type of ``InvocationRole`` used to authenticate the user account.

        

      
      - **DirectoryId** *(string) --* 

        The identifier of the Amazon Web ServicesDirectory Service directory that you want to stop sharing.

        

      
    
    :type IdentityProviderType: string
    :param IdentityProviderType: 

      Specifies the mode of authentication for a server. The default value is ``SERVICE_MANAGED`` , which allows you to store and access user credentials within the Amazon Web Services Transfer Family service.

       

      Use ``AWS_DIRECTORY_SERVICE`` to provide access to Active Directory groups in Amazon Web Services Managed Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connectors. This option also requires you to provide a Directory ID using the ``IdentityProviderDetails`` parameter.

       

      Use the ``API_GATEWAY`` value to integrate with an identity provider of your choosing. The ``API_GATEWAY`` setting requires you to provide an API Gateway endpoint URL to call for authentication using the ``IdentityProviderDetails`` parameter.

      

    
    :type LoggingRole: string
    :param LoggingRole: 

      Specifies the Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFS events. When set, user activity can be viewed in your CloudWatch logs.

      

    
    :type Protocols: list
    :param Protocols: 

      Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. The available protocols are:

       

       
      * ``SFTP`` (Secure Shell (SSH) File Transfer Protocol): File transfer over SSH 
       
      * ``FTPS`` (File Transfer Protocol Secure): File transfer with TLS encryption 
       
      * ``FTP`` (File Transfer Protocol): Unencrypted file transfer 
       

       

      .. note::

         

        If you select ``FTPS`` , you must choose a certificate stored in Amazon Web Services Certificate Manager (ACM) which is used to identify your server when clients connect to it over FTPS.

         

        If ``Protocol`` includes either ``FTP`` or ``FTPS`` , then the ``EndpointType`` must be ``VPC`` and the ``IdentityProviderType`` must be ``AWS_DIRECTORY_SERVICE`` or ``API_GATEWAY`` .

         

        If ``Protocol`` includes ``FTP`` , then ``AddressAllocationIds`` cannot be associated.

         

        If ``Protocol`` is set only to ``SFTP`` , the ``EndpointType`` can be set to ``PUBLIC`` and the ``IdentityProviderType`` can be set to ``SERVICE_MANAGED`` .

         

      

    
      - *(string) --* 

      
  
    :type SecurityPolicyName: string
    :param SecurityPolicyName: 

      Specifies the name of the security policy that is attached to the server.

      

    
    :type Tags: list
    :param Tags: 

      Key-value pairs that can be used to group and search for servers.

      

    
      - *(dict) --* 

        Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called ``Group`` and assign the values ``Research`` and ``Accounting`` to that group.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name assigned to the tag that you create.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Contains one or more values that you assigned to the key name you create.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerId** *(string) --* 

          The service-assigned ID of the server that is created.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Transfer.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_user(**kwargs)

    

    Creates a user and associates them with an existing file transfer protocol-enabled server. You can only create and associate users with servers that have the ``IdentityProviderType`` set to ``SERVICE_MANAGED`` . Using parameters for ``CreateUser`` , you can specify the user name, set the home directory, store the user's public key, and assign the user's Amazon Web Services Identity and Access Management (IAM) role. You can also optionally add a scope-down policy, and assign metadata with tags that can be used to group and search for users.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/CreateUser>`_    


    **Request Syntax** 
    ::

      response = client.create_user(
          HomeDirectory='string',
          HomeDirectoryType='PATH'|'LOGICAL',
          HomeDirectoryMappings=[
              {
                  'Entry': 'string',
                  'Target': 'string'
              },
          ],
          Policy='string',
          PosixProfile={
              'Uid': 123,
              'Gid': 123,
              'SecondaryGids': [
                  123,
              ]
          },
          Role='string',
          ServerId='string',
          SshPublicKeyBody='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          UserName='string'
      )
    :type HomeDirectory: string
    :param HomeDirectory: 

      The landing directory (folder) for a user when they log in to the server using the client.

       

      A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

      

    
    :type HomeDirectoryType: string
    :param HomeDirectoryType: 

      The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

      

    
    :type HomeDirectoryMappings: list
    :param HomeDirectoryMappings: 

      Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the ``Entry`` and ``Target`` pair, where ``Entry`` shows how the path is made visible and ``Target`` is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Amazon Web Services Identity and Access Management (IAM) role provides access to paths in ``Target`` . This value can only be set when ``HomeDirectoryType`` is set to *LOGICAL* .

       

      The following is an ``Entry`` and ``Target`` pair example.

       

       ``[ { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]``  

       

      In most cases, you can use this value instead of the scope-down policy to lock your user down to the designated home directory ("``chroot`` "). To do this, you can set ``Entry`` to ``/`` and set ``Target`` to the HomeDirectory parameter value.

       

      The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

       

       ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

       

      .. note::

         

        If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

         

      

    
      - *(dict) --* 

        Represents an object that contains entries and targets for ``HomeDirectoryMappings`` .

         

        The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

         

         ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

         

        .. note::

           

          If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

           

        

      
        - **Entry** *(string) --* **[REQUIRED]** 

          Represents an entry for ``HomeDirectoryMappings`` .

          

        
        - **Target** *(string) --* **[REQUIRED]** 

          Represents the map target that is used in a ``HomeDirectorymapEntry`` .

          

        
      
  
    :type Policy: string
    :param Policy: 

      A scope-down policy for your user so that you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ``${Transfer:UserName}`` , ``${Transfer:HomeDirectory}`` , and ``${Transfer:HomeBucket}`` .

       

      .. note::

         

        This only applies when domain of ServerId is S3. EFS does not use scope down policy.

         

        For scope-down policies, Amazon Web Services Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the ``Policy`` argument.

         

        For an example of a scope-down policy, see `Example scope-down policy <https://docs.aws.amazon.com/transfer/latest/userguide/scope-down-policy.html>`__ .

         

        For more information, see `AssumeRole <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__ in the *Amazon Web Services Security Token Service API Reference* .

         

      

    
    :type PosixProfile: dict
    :param PosixProfile: 

      Specifies the full POSIX identity, including user ID (``Uid`` ), group ID (``Gid`` ), and any secondary groups IDs (``SecondaryGids`` ), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in Amazon EFS determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.

      

    
      - **Uid** *(integer) --* **[REQUIRED]** 

        The POSIX user ID used for all EFS operations by this user.

        

      
      - **Gid** *(integer) --* **[REQUIRED]** 

        The POSIX group ID used for all EFS operations by this user.

        

      
      - **SecondaryGids** *(list) --* 

        The secondary POSIX group IDs used for all EFS operations by this user.

        

      
        - *(integer) --* 

        
    
    
    :type Role: string
    :param Role: **[REQUIRED]** 

      Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

      

    
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.

      

    
    :type SshPublicKeyBody: string
    :param SshPublicKeyBody: 

      The public portion of the Secure Shell (SSH) key used to authenticate the user to the server.

      

    
    :type Tags: list
    :param Tags: 

      Key-value pairs that can be used to group and search for users. Tags are metadata attached to users for any purpose.

      

    
      - *(dict) --* 

        Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called ``Group`` and assign the values ``Research`` and ``Accounting`` to that group.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name assigned to the tag that you create.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Contains one or more values that you assigned to the key name you create.

          

        
      
  
    :type UserName: string
    :param UserName: **[REQUIRED]** 

      A unique string that identifies a user and is associated with a as specified by the ``ServerId`` . This user name must be a minimum of 3 and a maximum of 100 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore '_', hyphen '-', period '.', and at sign '@'. The user name can't start with a hyphen, period, or at sign.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string',
            'UserName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerId** *(string) --* 

          The ID of the server that the user is attached to.

          
        

        - **UserName** *(string) --* 

          A unique string that identifies a user account associated with a server.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: delete_access(**kwargs)

    

    Allows you to delete the access specified in the ``ServerID`` and ``ExternalID`` parameters.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DeleteAccess>`_    


    **Request Syntax** 
    ::

      response = client.delete_access(
          ServerId='string',
          ExternalId='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server that has this user assigned.

      

    
    :type ExternalId: string
    :param ExternalId: **[REQUIRED]** 

      A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.

       

       ``Get-ADGroup -Filter {samAccountName -like "*YourGroupName* *"} -Properties * | Select SamAccountName,ObjectSid``  

       

      In that command, replace *YourGroupName* with the name of your Active Directory group.

       

      The regex used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: delete_server(**kwargs)

    

    Deletes the file transfer protocol-enabled server that you specify.

     

    No response returns from this operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DeleteServer>`_    


    **Request Syntax** 
    ::

      response = client.delete_server(
          ServerId='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A unique system-assigned identifier for a server instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: delete_ssh_public_key(**kwargs)

    

    Deletes a user's Secure Shell (SSH) public key.

     

    No response is returned from this operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DeleteSshPublicKey>`_    


    **Request Syntax** 
    ::

      response = client.delete_ssh_public_key(
          ServerId='string',
          SshPublicKeyId='string',
          UserName='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a file transfer protocol-enabled server instance that has the user assigned to it.

      

    
    :type SshPublicKeyId: string
    :param SshPublicKeyId: **[REQUIRED]** 

      A unique identifier used to reference your user's specific SSH key.

      

    
    :type UserName: string
    :param UserName: **[REQUIRED]** 

      A unique string that identifies a user whose public key is being deleted.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Transfer.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_user(**kwargs)

    

    Deletes the user belonging to a file transfer protocol-enabled server you specify.

     

    No response returns from this operation.

     

    .. note::

       

      When you delete a user from a server, the user's information is lost.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DeleteUser>`_    


    **Request Syntax** 
    ::

      response = client.delete_user(
          ServerId='string',
          UserName='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server instance that has the user assigned to it.

      

    
    :type UserName: string
    :param UserName: **[REQUIRED]** 

      A unique string that identifies a user that is being deleted from a server.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_access(**kwargs)

    

    Describes the access that is assigned to the specific file transfer protocol-enabled server, as identified by its ``ServerId`` property and its ``ExternalID`` .

     

    The response from this call returns the properties of the access that is associated with the ``ServerId`` value that was specified.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DescribeAccess>`_    


    **Request Syntax** 
    ::

      response = client.describe_access(
          ServerId='string',
          ExternalId='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server that has this access assigned.

      

    
    :type ExternalId: string
    :param ExternalId: **[REQUIRED]** 

      A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.

       

       ``Get-ADGroup -Filter {samAccountName -like "*YourGroupName* *"} -Properties * | Select SamAccountName,ObjectSid``  

       

      In that command, replace *YourGroupName* with the name of your Active Directory group.

       

      The regex used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string',
            'Access': {
                'HomeDirectory': 'string',
                'HomeDirectoryMappings': [
                    {
                        'Entry': 'string',
                        'Target': 'string'
                    },
                ],
                'HomeDirectoryType': 'PATH'|'LOGICAL',
                'Policy': 'string',
                'PosixProfile': {
                    'Uid': 123,
                    'Gid': 123,
                    'SecondaryGids': [
                        123,
                    ]
                },
                'Role': 'string',
                'ExternalId': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerId** *(string) --* 

          A system-assigned unique identifier for a server that has this access assigned.

          
        

        - **Access** *(dict) --* 

          The external ID of the server that the access is attached to.

          
          

          - **HomeDirectory** *(string) --* 

            The landing directory (folder) for a user when they log in to the server using the client.

             

            A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

            
          

          - **HomeDirectoryMappings** *(list) --* 

            Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the ``Entry`` and ``Target`` pair, where ``Entry`` shows how the path is made visible and ``Target`` is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Amazon Web Services Identity and Access Management (IAM) role provides access to paths in ``Target`` . This value can only be set when ``HomeDirectoryType`` is set to *LOGICAL* .

             

            In most cases, you can use this value instead of the scope-down policy to lock down the associated access to the designated home directory ("``chroot`` "). To do this, you can set ``Entry`` to '/' and set ``Target`` to the ``HomeDirectory`` parameter value.

            
            

            - *(dict) --* 

              Represents an object that contains entries and targets for ``HomeDirectoryMappings`` .

               

              The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

               

               ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

               

              .. note::

                 

                If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

                 

              
              

              - **Entry** *(string) --* 

                Represents an entry for ``HomeDirectoryMappings`` .

                
              

              - **Target** *(string) --* 

                Represents the map target that is used in a ``HomeDirectorymapEntry`` .

                
          
        
          

          - **HomeDirectoryType** *(string) --* 

            The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

            
          

          - **Policy** *(string) --* 

            A scope-down policy for your user so that you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ``${Transfer:UserName}`` , ``${Transfer:HomeDirectory}`` , and ``${Transfer:HomeBucket}`` .

            
          

          - **PosixProfile** *(dict) --* 

            The full POSIX identity, including user ID (``Uid`` ), group ID (``Gid`` ), and any secondary groups IDs (``SecondaryGids`` ), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.

            
            

            - **Uid** *(integer) --* 

              The POSIX user ID used for all EFS operations by this user.

              
            

            - **Gid** *(integer) --* 

              The POSIX group ID used for all EFS operations by this user.

              
            

            - **SecondaryGids** *(list) --* 

              The secondary POSIX group IDs used for all EFS operations by this user.

              
              

              - *(integer) --* 
          
        
          

          - **Role** *(string) --* 

            Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

            
          

          - **ExternalId** *(string) --* 

            A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.

             

             ``Get-ADGroup -Filter {samAccountName -like "*YourGroupName* *"} -Properties * | Select SamAccountName,ObjectSid``  

             

            In that command, replace *YourGroupName* with the name of your Active Directory group.

             

            The regex used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-

            
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_security_policy(**kwargs)

    

    Describes the security policy that is attached to your file transfer protocol-enabled server. The response contains a description of the security policy's properties. For more information about security policies, see `Working with security policies <https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DescribeSecurityPolicy>`_    


    **Request Syntax** 
    ::

      response = client.describe_security_policy(
          SecurityPolicyName='string'
      )
    :type SecurityPolicyName: string
    :param SecurityPolicyName: **[REQUIRED]** 

      Specifies the name of the security policy that is attached to the server.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecurityPolicy': {
                'Fips': True|False,
                'SecurityPolicyName': 'string',
                'SshCiphers': [
                    'string',
                ],
                'SshKexs': [
                    'string',
                ],
                'SshMacs': [
                    'string',
                ],
                'TlsCiphers': [
                    'string',
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **SecurityPolicy** *(dict) --* 

          An array containing the properties of the security policy.

          
          

          - **Fips** *(boolean) --* 

            Specifies whether this policy enables Federal Information Processing Standards (FIPS).

            
          

          - **SecurityPolicyName** *(string) --* 

            Specifies the name of the security policy that is attached to the server.

            
          

          - **SshCiphers** *(list) --* 

            Specifies the enabled Secure Shell (SSH) cipher encryption algorithms in the security policy that is attached to the server.

            
            

            - *(string) --* 
        
          

          - **SshKexs** *(list) --* 

            Specifies the enabled SSH key exchange (KEX) encryption algorithms in the security policy that is attached to the server.

            
            

            - *(string) --* 
        
          

          - **SshMacs** *(list) --* 

            Specifies the enabled SSH message authentication code (MAC) encryption algorithms in the security policy that is attached to the server.

            
            

            - *(string) --* 
        
          

          - **TlsCiphers** *(list) --* 

            Specifies the enabled Transport Layer Security (TLS) cipher encryption algorithms in the security policy that is attached to the server.

            
            

            - *(string) --* 
        
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_server(**kwargs)

    

    Describes a file transfer protocol-enabled server that you specify by passing the ``ServerId`` parameter.

     

    The response contains a description of a server's properties. When you set ``EndpointType`` to VPC, the response will contain the ``EndpointDetails`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DescribeServer>`_    


    **Request Syntax** 
    ::

      response = client.describe_server(
          ServerId='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Server': {
                'Arn': 'string',
                'Certificate': 'string',
                'ProtocolDetails': {
                    'PassiveIp': 'string'
                },
                'Domain': 'S3'|'EFS',
                'EndpointDetails': {
                    'AddressAllocationIds': [
                        'string',
                    ],
                    'SubnetIds': [
                        'string',
                    ],
                    'VpcEndpointId': 'string',
                    'VpcId': 'string',
                    'SecurityGroupIds': [
                        'string',
                    ]
                },
                'EndpointType': 'PUBLIC'|'VPC'|'VPC_ENDPOINT',
                'HostKeyFingerprint': 'string',
                'IdentityProviderDetails': {
                    'Url': 'string',
                    'InvocationRole': 'string',
                    'DirectoryId': 'string'
                },
                'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY'|'AWS_DIRECTORY_SERVICE',
                'LoggingRole': 'string',
                'Protocols': [
                    'SFTP'|'FTP'|'FTPS',
                ],
                'SecurityPolicyName': 'string',
                'ServerId': 'string',
                'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
                'Tags': [
                    {
                        'Key': 'string',
                        'Value': 'string'
                    },
                ],
                'UserCount': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Server** *(dict) --* 

          An array containing the properties of a server with the ``ServerID`` you specified.

          
          

          - **Arn** *(string) --* 

            Specifies the unique Amazon Resource Name (ARN) of the server.

            
          

          - **Certificate** *(string) --* 

            Specifies the ARN of the Amazon Web ServicesCertificate Manager (ACM) certificate. Required when ``Protocols`` is set to ``FTPS`` .

            
          

          - **ProtocolDetails** *(dict) --* 

            The protocol settings that are configured for your server. 

             

            Use the ``PassiveIp`` parameter to indicate passive mode. Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. 

            
            

            - **PassiveIp** *(string) --* 

              Indicates passive mode, for FTP and FTPS protocols. Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. For example: 

               

               ``aws transfer update-server --protocol-details PassiveIp=*0.0.0.0* ``  

               

              Replace `` *0.0.0.0* `` in the example above with the actual IP address you want to use.

              
        
          

          - **Domain** *(string) --* 

            Specifies the domain of the storage system that is used for file transfers.

            
          

          - **EndpointDetails** *(dict) --* 

            The virtual private cloud (VPC) endpoint settings that are configured for your server. When you host your endpoint within your VPC, you can make it accessible only to resources within your VPC, or you can attach Elastic IP addresses and make it accessible to clients over the internet. Your VPC's default security groups are automatically assigned to your endpoint.

            
            

            - **AddressAllocationIds** *(list) --* 

              A list of address allocation IDs that are required to attach an Elastic IP address to your server's endpoint.

               

              .. note::

                 

                This property can only be set when ``EndpointType`` is set to ``VPC`` and it is only valid in the ``UpdateServer`` API.

                 

              
              

              - *(string) --* 
          
            

            - **SubnetIds** *(list) --* 

              A list of subnet IDs that are required to host your server endpoint in your VPC.

               

              .. note::

                 

                This property can only be set when ``EndpointType`` is set to ``VPC`` .

                 

              
              

              - *(string) --* 
          
            

            - **VpcEndpointId** *(string) --* 

              The ID of the VPC endpoint.

               

              .. note::

                 

                This property can only be set when ``EndpointType`` is set to ``VPC_ENDPOINT`` .

                 

                For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.

                 

              
            

            - **VpcId** *(string) --* 

              The VPC ID of the VPC in which a server's endpoint will be hosted.

               

              .. note::

                 

                This property can only be set when ``EndpointType`` is set to ``VPC`` .

                 

              
            

            - **SecurityGroupIds** *(list) --* 

              A list of security groups IDs that are available to attach to your server's endpoint.

               

              .. note::

                 

                This property can only be set when ``EndpointType`` is set to ``VPC`` .

                 

                You can edit the ``SecurityGroupIds`` property in the `UpdateServer <https://docs.aws.amazon.com/transfer/latest/userguide/API_UpdateServer.html>`__ API only if you are changing the ``EndpointType`` from ``PUBLIC`` or ``VPC_ENDPOINT`` to ``VPC`` . To change security groups associated with your server's VPC endpoint after creation, use the Amazon EC2 `ModifyVpcEndpoint <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyVpcEndpoint.html>`__ API.

                 

              
              

              - *(string) --* 
          
        
          

          - **EndpointType** *(string) --* 

            Defines the type of endpoint that your server is connected to. If your server is connected to a VPC endpoint, your server isn't accessible over the public internet.

            
          

          - **HostKeyFingerprint** *(string) --* 

            Specifies the Base64-encoded SHA256 fingerprint of the server's host key. This value is equivalent to the output of the ``ssh-keygen -l -f my-new-server-key`` command.

            
          

          - **IdentityProviderDetails** *(dict) --* 

            Specifies information to call a customer-supplied authentication API. This field is not populated when the ``IdentityProviderType`` of a server is ``AWS_DIRECTORY_SERVICE`` or ``SERVICE_MANAGED`` .

            
            

            - **Url** *(string) --* 

              Provides the location of the service endpoint used to authenticate users.

              
            

            - **InvocationRole** *(string) --* 

              Provides the type of ``InvocationRole`` used to authenticate the user account.

              
            

            - **DirectoryId** *(string) --* 

              The identifier of the Amazon Web ServicesDirectory Service directory that you want to stop sharing.

              
        
          

          - **IdentityProviderType** *(string) --* 

            Specifies the mode of authentication for a server. The default value is ``SERVICE_MANAGED`` , which allows you to store and access user credentials within the Amazon Web Services Transfer Family service.

             

            Use ``AWS_DIRECTORY_SERVICE`` to provide access to Active Directory groups in Amazon Web Services Managed Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connectors. This option also requires you to provide a Directory ID using the ``IdentityProviderDetails`` parameter.

             

            Use the ``API_GATEWAY`` value to integrate with an identity provider of your choosing. The ``API_GATEWAY`` setting requires you to provide an API Gateway endpoint URL to call for authentication using the ``IdentityProviderDetails`` parameter.

            
          

          - **LoggingRole** *(string) --* 

            Specifies the Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFS events. When set, user activity can be viewed in your CloudWatch logs.

            
          

          - **Protocols** *(list) --* 

            Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. The available protocols are:

             

             
            * ``SFTP`` (Secure Shell (SSH) File Transfer Protocol): File transfer over SSH 
             
            * ``FTPS`` (File Transfer Protocol Secure): File transfer with TLS encryption 
             
            * ``FTP`` (File Transfer Protocol): Unencrypted file transfer 
             

            
            

            - *(string) --* 
        
          

          - **SecurityPolicyName** *(string) --* 

            Specifies the name of the security policy that is attached to the server.

            
          

          - **ServerId** *(string) --* 

            Specifies the unique system-assigned identifier for a server that you instantiate.

            
          

          - **State** *(string) --* 

            Specifies the condition of a server for the server that was described. A value of ``ONLINE`` indicates that the server can accept jobs and transfer files. A ``State`` value of ``OFFLINE`` means that the server cannot perform file transfer operations.

             

            The states of ``STARTING`` and ``STOPPING`` indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of ``START_FAILED`` or ``STOP_FAILED`` can indicate an error condition.

            
          

          - **Tags** *(list) --* 

            Specifies the key-value pairs that you can use to search for and group servers that were assigned to the server that was described.

            
            

            - *(dict) --* 

              Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called ``Group`` and assign the values ``Research`` and ``Accounting`` to that group.

              
              

              - **Key** *(string) --* 

                The name assigned to the tag that you create.

                
              

              - **Value** *(string) --* 

                Contains one or more values that you assigned to the key name you create.

                
          
        
          

          - **UserCount** *(integer) --* 

            Specifies the number of users that are assigned to a server you specified with the ``ServerId`` .

            
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_user(**kwargs)

    

    Describes the user assigned to the specific file transfer protocol-enabled server, as identified by its ``ServerId`` property.

     

    The response from this call returns the properties of the user associated with the ``ServerId`` value that was specified.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/DescribeUser>`_    


    **Request Syntax** 
    ::

      response = client.describe_user(
          ServerId='string',
          UserName='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server that has this user assigned.

      

    
    :type UserName: string
    :param UserName: **[REQUIRED]** 

      The name of the user assigned to one or more servers. User names are part of the sign-in credentials to use the Amazon Web Services Transfer Family service and perform file transfer tasks.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string',
            'User': {
                'Arn': 'string',
                'HomeDirectory': 'string',
                'HomeDirectoryMappings': [
                    {
                        'Entry': 'string',
                        'Target': 'string'
                    },
                ],
                'HomeDirectoryType': 'PATH'|'LOGICAL',
                'Policy': 'string',
                'PosixProfile': {
                    'Uid': 123,
                    'Gid': 123,
                    'SecondaryGids': [
                        123,
                    ]
                },
                'Role': 'string',
                'SshPublicKeys': [
                    {
                        'DateImported': datetime(2015, 1, 1),
                        'SshPublicKeyBody': 'string',
                        'SshPublicKeyId': 'string'
                    },
                ],
                'Tags': [
                    {
                        'Key': 'string',
                        'Value': 'string'
                    },
                ],
                'UserName': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerId** *(string) --* 

          A system-assigned unique identifier for a server that has this user assigned.

          
        

        - **User** *(dict) --* 

          An array containing the properties of the user account for the ``ServerID`` value that you specified.

          
          

          - **Arn** *(string) --* 

            Specifies the unique Amazon Resource Name (ARN) for the user that was requested to be described.

            
          

          - **HomeDirectory** *(string) --* 

            The landing directory (folder) for a user when they log in to the server using the client.

             

            A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

            
          

          - **HomeDirectoryMappings** *(list) --* 

            Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the ``Entry`` and ``Target`` pair, where ``Entry`` shows how the path is made visible and ``Target`` is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Amazon Web Services Identity and Access Management (IAM) role provides access to paths in ``Target`` . This value can only be set when ``HomeDirectoryType`` is set to *LOGICAL* .

             

            In most cases, you can use this value instead of the scope-down policy to lock your user down to the designated home directory ("``chroot`` "). To do this, you can set ``Entry`` to '/' and set ``Target`` to the HomeDirectory parameter value.

            
            

            - *(dict) --* 

              Represents an object that contains entries and targets for ``HomeDirectoryMappings`` .

               

              The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

               

               ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

               

              .. note::

                 

                If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

                 

              
              

              - **Entry** *(string) --* 

                Represents an entry for ``HomeDirectoryMappings`` .

                
              

              - **Target** *(string) --* 

                Represents the map target that is used in a ``HomeDirectorymapEntry`` .

                
          
        
          

          - **HomeDirectoryType** *(string) --* 

            The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

            
          

          - **Policy** *(string) --* 

            A scope-down policy for your user so that you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ``${Transfer:UserName}`` , ``${Transfer:HomeDirectory}`` , and ``${Transfer:HomeBucket}`` .

            
          

          - **PosixProfile** *(dict) --* 

            Specifies the full POSIX identity, including user ID (``Uid`` ), group ID (``Gid`` ), and any secondary groups IDs (``SecondaryGids`` ), that controls your users' access to your Amazon Elastic File System (Amazon EFS) file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.

            
            

            - **Uid** *(integer) --* 

              The POSIX user ID used for all EFS operations by this user.

              
            

            - **Gid** *(integer) --* 

              The POSIX group ID used for all EFS operations by this user.

              
            

            - **SecondaryGids** *(list) --* 

              The secondary POSIX group IDs used for all EFS operations by this user.

              
              

              - *(integer) --* 
          
        
          

          - **Role** *(string) --* 

            Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

            
          

          - **SshPublicKeys** *(list) --* 

            Specifies the public key portion of the Secure Shell (SSH) keys stored for the described user.

            
            

            - *(dict) --* 

              Provides information about the public Secure Shell (SSH) key that is associated with a user account for the specific file transfer protocol-enabled server (as identified by ``ServerId`` ). The information returned includes the date the key was imported, the public key contents, and the public key ID. A user can store more than one SSH public key associated with their user name on a specific server.

              
              

              - **DateImported** *(datetime) --* 

                Specifies the date that the public key was added to the user account.

                
              

              - **SshPublicKeyBody** *(string) --* 

                Specifies the content of the SSH public key as specified by the ``PublicKeyId`` .

                
              

              - **SshPublicKeyId** *(string) --* 

                Specifies the ``SshPublicKeyId`` parameter contains the identifier of the public key.

                
          
        
          

          - **Tags** *(list) --* 

            Specifies the key-value pairs for the user requested. Tag can be used to search for and group users for a variety of purposes.

            
            

            - *(dict) --* 

              Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called ``Group`` and assign the values ``Research`` and ``Accounting`` to that group.

              
              

              - **Key** *(string) --* 

                The name assigned to the tag that you create.

                
              

              - **Value** *(string) --* 

                Contains one or more values that you assigned to the key name you create.

                
          
        
          

          - **UserName** *(string) --* 

            Specifies the name of the user that was requested to be described. User names are used for authentication purposes. This is the string that will be used by your user when they log in to your server.

            
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: import_ssh_public_key(**kwargs)

    

    Adds a Secure Shell (SSH) public key to a user account identified by a ``UserName`` value assigned to the specific file transfer protocol-enabled server, identified by ``ServerId`` .

     

    The response returns the ``UserName`` value, the ``ServerId`` value, and the name of the ``SshPublicKeyId`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ImportSshPublicKey>`_    


    **Request Syntax** 
    ::

      response = client.import_ssh_public_key(
          ServerId='string',
          SshPublicKeyBody='string',
          UserName='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server.

      

    
    :type SshPublicKeyBody: string
    :param SshPublicKeyBody: **[REQUIRED]** 

      The public key portion of an SSH key pair.

      

    
    :type UserName: string
    :param UserName: **[REQUIRED]** 

      The name of the user account that is assigned to one or more servers.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string',
            'SshPublicKeyId': 'string',
            'UserName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Identifies the user, the server they belong to, and the identifier of the SSH public key associated with that user. A user can have more than one key on each server that they are associated with.

        
        

        - **ServerId** *(string) --* 

          A system-assigned unique identifier for a server.

          
        

        - **SshPublicKeyId** *(string) --* 

          The name given to a public key by the system that was imported.

          
        

        - **UserName** *(string) --* 

          A user name assigned to the ``ServerID`` value that you specified.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Transfer.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_accesses(**kwargs)

    

    Lists the details for all the accesses you have on your server.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListAccesses>`_    


    **Request Syntax** 
    ::

      response = client.list_accesses(
          MaxResults=123,
          NextToken='string',
          ServerId='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Specifies the maximum number of access SIDs to return.

      

    
    :type NextToken: string
    :param NextToken: 

      When you can get additional results from the ``ListAccesses`` call, a ``NextToken`` parameter is returned in the output. You can then pass in a subsequent command to the ``NextToken`` parameter to continue listing additional accesses.

      

    
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server that has users assigned to it.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'ServerId': 'string',
            'Accesses': [
                {
                    'HomeDirectory': 'string',
                    'HomeDirectoryType': 'PATH'|'LOGICAL',
                    'Role': 'string',
                    'ExternalId': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          When you can get additional results from the ``ListAccesses`` call, a ``NextToken`` parameter is returned in the output. You can then pass in a subsequent command to the ``NextToken`` parameter to continue listing additional accesses.

          
        

        - **ServerId** *(string) --* 

          A system-assigned unique identifier for a server that has users assigned to it.

          
        

        - **Accesses** *(list) --* 

          Returns the accesses and their properties for the ``ServerId`` value that you specify.

          
          

          - *(dict) --* 

            Lists the properties for one or more specified associated accesses.

            
            

            - **HomeDirectory** *(string) --* 

              The landing directory (folder) for a user when they log in to the server using the client.

               

              A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

              
            

            - **HomeDirectoryType** *(string) --* 

              The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

              
            

            - **Role** *(string) --* 

              Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

              
            

            - **ExternalId** *(string) --* 

              A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.

               

               ``Get-ADGroup -Filter {samAccountName -like "*YourGroupName* *"} -Properties * | Select SamAccountName,ObjectSid``  

               

              In that command, replace *YourGroupName* with the name of your Active Directory group.

               

              The regex used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: list_security_policies(**kwargs)

    

    Lists the security policies that are attached to your file transfer protocol-enabled servers.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListSecurityPolicies>`_    


    **Request Syntax** 
    ::

      response = client.list_security_policies(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Specifies the number of security policies to return as a response to the ``ListSecurityPolicies`` query.

      

    
    :type NextToken: string
    :param NextToken: 

      When additional results are obtained from the ``ListSecurityPolicies`` command, a ``NextToken`` parameter is returned in the output. You can then pass the ``NextToken`` parameter in a subsequent command to continue listing additional security policies.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'SecurityPolicyNames': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          When you can get additional results from the ``ListSecurityPolicies`` operation, a ``NextToken`` parameter is returned in the output. In a following command, you can pass in the ``NextToken`` parameter to continue listing security policies.

          
        

        - **SecurityPolicyNames** *(list) --* 

          An array of security policies that were listed.

          
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    

  .. py:method:: list_servers(**kwargs)

    

    Lists the file transfer protocol-enabled servers that are associated with your Amazon Web Services account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListServers>`_    


    **Request Syntax** 
    ::

      response = client.list_servers(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Specifies the number of servers to return as a response to the ``ListServers`` query.

      

    
    :type NextToken: string
    :param NextToken: 

      When additional results are obtained from the ``ListServers`` command, a ``NextToken`` parameter is returned in the output. You can then pass the ``NextToken`` parameter in a subsequent command to continue listing additional servers.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Servers': [
                {
                    'Arn': 'string',
                    'Domain': 'S3'|'EFS',
                    'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY'|'AWS_DIRECTORY_SERVICE',
                    'EndpointType': 'PUBLIC'|'VPC'|'VPC_ENDPOINT',
                    'LoggingRole': 'string',
                    'ServerId': 'string',
                    'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
                    'UserCount': 123
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          When you can get additional results from the ``ListServers`` operation, a ``NextToken`` parameter is returned in the output. In a following command, you can pass in the ``NextToken`` parameter to continue listing additional servers.

          
        

        - **Servers** *(list) --* 

          An array of servers that were listed.

          
          

          - *(dict) --* 

            Returns properties of a file transfer protocol-enabled server that was specified.

            
            

            - **Arn** *(string) --* 

              Specifies the unique Amazon Resource Name (ARN) for a server to be listed.

              
            

            - **Domain** *(string) --* 

              Specifies the domain of the storage system that is used for file transfers.

              
            

            - **IdentityProviderType** *(string) --* 

              Specifies the mode of authentication for a server. The default value is ``SERVICE_MANAGED`` , which allows you to store and access user credentials within the Amazon Web Services Transfer Family service.

               

              Use ``AWS_DIRECTORY_SERVICE`` to provide access to Active Directory groups in Amazon Web Services Managed Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connectors. This option also requires you to provide a Directory ID using the ``IdentityProviderDetails`` parameter.

               

              Use the ``API_GATEWAY`` value to integrate with an identity provider of your choosing. The ``API_GATEWAY`` setting requires you to provide an API Gateway endpoint URL to call for authentication using the ``IdentityProviderDetails`` parameter.

              
            

            - **EndpointType** *(string) --* 

              Specifies the type of VPC endpoint that your server is connected to. If your server is connected to a VPC endpoint, your server isn't accessible over the public internet.

              
            

            - **LoggingRole** *(string) --* 

              Specifies the Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFS events. When set, user activity can be viewed in your CloudWatch logs.

              
            

            - **ServerId** *(string) --* 

              Specifies the unique system assigned identifier for the servers that were listed.

              
            

            - **State** *(string) --* 

              Specifies the condition of a server for the server that was described. A value of ``ONLINE`` indicates that the server can accept jobs and transfer files. A ``State`` value of ``OFFLINE`` means that the server cannot perform file transfer operations.

               

              The states of ``STARTING`` and ``STOPPING`` indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of ``START_FAILED`` or ``STOP_FAILED`` can indicate an error condition.

              
            

            - **UserCount** *(integer) --* 

              Specifies the number of users that are assigned to a server you specified with the ``ServerId`` .

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists all of the tags associated with the Amazon Resource Name (ARN) that you specify. The resource can be a user, server, or role.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          Arn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      Requests the tags associated with a particular Amazon Resource Name (ARN). An ARN is an identifier for a specific Amazon Web Services resource, such as a server, user, or role.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Specifies the number of tags to return as a response to the ``ListTagsForResource`` request.

      

    
    :type NextToken: string
    :param NextToken: 

      When you request additional results from the ``ListTagsForResource`` operation, a ``NextToken`` parameter is returned in the input. You can then pass in a subsequent command to the ``NextToken`` parameter to continue listing additional tags.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'NextToken': 'string',
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The ARN you specified to list the tags of.

          
        

        - **NextToken** *(string) --* 

          When you can get additional results from the ``ListTagsForResource`` call, a ``NextToken`` parameter is returned in the output. You can then pass in a subsequent command to the ``NextToken`` parameter to continue listing additional tags.

          
        

        - **Tags** *(list) --* 

          Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.

          
          

          - *(dict) --* 

            Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called ``Group`` and assign the values ``Research`` and ``Accounting`` to that group.

            
            

            - **Key** *(string) --* 

              The name assigned to the tag that you create.

              
            

            - **Value** *(string) --* 

              Contains one or more values that you assigned to the key name you create.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    

  .. py:method:: list_users(**kwargs)

    

    Lists the users for a file transfer protocol-enabled server that you specify by passing the ``ServerId`` parameter.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListUsers>`_    


    **Request Syntax** 
    ::

      response = client.list_users(
          MaxResults=123,
          NextToken='string',
          ServerId='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Specifies the number of users to return as a response to the ``ListUsers`` request.

      

    
    :type NextToken: string
    :param NextToken: 

      When you can get additional results from the ``ListUsers`` call, a ``NextToken`` parameter is returned in the output. You can then pass in a subsequent command to the ``NextToken`` parameter to continue listing additional users.

      

    
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server that has users assigned to it.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'ServerId': 'string',
            'Users': [
                {
                    'Arn': 'string',
                    'HomeDirectory': 'string',
                    'HomeDirectoryType': 'PATH'|'LOGICAL',
                    'Role': 'string',
                    'SshPublicKeyCount': 123,
                    'UserName': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          When you can get additional results from the ``ListUsers`` call, a ``NextToken`` parameter is returned in the output. You can then pass in a subsequent command to the ``NextToken`` parameter to continue listing additional users.

          
        

        - **ServerId** *(string) --* 

          A system-assigned unique identifier for a server that the users are assigned to.

          
        

        - **Users** *(list) --* 

          Returns the user accounts and their properties for the ``ServerId`` value that you specify.

          
          

          - *(dict) --* 

            Returns properties of the user that you specify.

            
            

            - **Arn** *(string) --* 

              Provides the unique Amazon Resource Name (ARN) for the user that you want to learn about.

              
            

            - **HomeDirectory** *(string) --* 

              The landing directory (folder) for a user when they log in to the server using the client.

               

              A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

              
            

            - **HomeDirectoryType** *(string) --* 

              The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

              
            

            - **Role** *(string) --* 

              Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

               

              .. note::

                 

                The IAM role that controls your users' access to your Amazon S3 bucket for servers with ``Domain=S3`` , or your EFS file system for servers with ``Domain=EFS`` . 

                 

                The policies attached to this role determine the level of access you want to provide your users when transferring files into and out of your S3 buckets or EFS file systems.

                 

              
            

            - **SshPublicKeyCount** *(integer) --* 

              Specifies the number of SSH public keys stored for the user you specified.

              
            

            - **UserName** *(string) --* 

              Specifies the name of the user whose ARN was specified. User names are used for authentication purposes.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidNextTokenException`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: start_server(**kwargs)

    

    Changes the state of a file transfer protocol-enabled server from ``OFFLINE`` to ``ONLINE`` . It has no impact on a server that is already ``ONLINE`` . An ``ONLINE`` server can accept and process file transfer jobs.

     

    The state of ``STARTING`` indicates that the server is in an intermediate state, either not fully able to respond, or not fully online. The values of ``START_FAILED`` can indicate an error condition.

     

    No response is returned from this call.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/StartServer>`_    


    **Request Syntax** 
    ::

      response = client.start_server(
          ServerId='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server that you start.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Transfer.Client.exceptions.ThrottlingException`

    

  .. py:method:: stop_server(**kwargs)

    

    Changes the state of a file transfer protocol-enabled server from ``ONLINE`` to ``OFFLINE`` . An ``OFFLINE`` server cannot accept and process file transfer jobs. Information tied to your server, such as server and user properties, are not affected by stopping your server.

     

    .. note::

       

      Stopping the server will not reduce or impact your file transfer protocol endpoint billing; you must delete the server to stop being billed.

       

     

    The state of ``STOPPING`` indicates that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of ``STOP_FAILED`` can indicate an error condition.

     

    No response is returned from this call.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/StopServer>`_    


    **Request Syntax** 
    ::

      response = client.stop_server(
          ServerId='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server that you stopped.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Transfer.Client.exceptions.ThrottlingException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.

     

    There is no response returned from this call.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          Arn='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      An Amazon Resource Name (ARN) for a specific Amazon Web Services resource, such as a server, user, or role.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      Key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to user accounts for any purpose.

      

    
      - *(dict) --* 

        Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called ``Group`` and assign the values ``Research`` and ``Accounting`` to that group.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The name assigned to the tag that you create.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          Contains one or more values that you assigned to the key name you create.

          

        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: test_identity_provider(**kwargs)

    

    If the ``IdentityProviderType`` of a file transfer protocol-enabled server is ``AWS_DIRECTORY_SERVICE`` or ``API_Gateway`` , tests whether your identity provider is set up successfully. We highly recommend that you call this operation to test your authentication method as soon as you create your server. By doing so, you can troubleshoot issues with the identity provider integration to ensure that your users can successfully use the service.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/TestIdentityProvider>`_    


    **Request Syntax** 
    ::

      response = client.test_identity_provider(
          ServerId='string',
          ServerProtocol='SFTP'|'FTP'|'FTPS',
          SourceIp='string',
          UserName='string',
          UserPassword='string'
      )
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned identifier for a specific server. That server's user authentication method is tested with a user name and password.

      

    
    :type ServerProtocol: string
    :param ServerProtocol: 

      The type of file transfer protocol to be tested.

       

      The available protocols are:

       

       
      * Secure Shell (SSH) File Transfer Protocol (SFTP) 
       
      * File Transfer Protocol Secure (FTPS) 
       
      * File Transfer Protocol (FTP) 
       

      

    
    :type SourceIp: string
    :param SourceIp: 

      The source IP address of the user account to be tested.

      

    
    :type UserName: string
    :param UserName: **[REQUIRED]** 

      The name of the user account to be tested.

      

    
    :type UserPassword: string
    :param UserPassword: 

      The password of the user account to be tested.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Response': 'string',
            'StatusCode': 123,
            'Message': 'string',
            'Url': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Response** *(string) --* 

          The response that is returned from your API Gateway.

          
        

        - **StatusCode** *(integer) --* 

          The HTTP status code that is the response from your API Gateway.

          
        

        - **Message** *(string) --* 

          A message that indicates whether the test was successful or not.

          
        

        - **Url** *(string) --* 

          The endpoint of the service used to authenticate a user.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Detaches a key-value pair from a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.

     

    No response is returned from this call.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          Arn='string',
          TagKeys=[
              'string',
          ]
      )
    :type Arn: string
    :param Arn: **[REQUIRED]** 

      The value of the resource that will have the tag removed. An Amazon Resource Name (ARN) is an identifier for a specific Amazon Web Services resource, such as a server, user, or role.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      TagKeys are key-value pairs assigned to ARNs that can be used to group and search for resources by type. This metadata can be attached to resources for any purpose.

      

    
      - *(string) --* 

      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: update_access(**kwargs)

    

    Allows you to update parameters for the access specified in the ``ServerID`` and ``ExternalID`` parameters.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/UpdateAccess>`_    


    **Request Syntax** 
    ::

      response = client.update_access(
          HomeDirectory='string',
          HomeDirectoryType='PATH'|'LOGICAL',
          HomeDirectoryMappings=[
              {
                  'Entry': 'string',
                  'Target': 'string'
              },
          ],
          Policy='string',
          PosixProfile={
              'Uid': 123,
              'Gid': 123,
              'SecondaryGids': [
                  123,
              ]
          },
          Role='string',
          ServerId='string',
          ExternalId='string'
      )
    :type HomeDirectory: string
    :param HomeDirectory: 

      The landing directory (folder) for a user when they log in to the server using the client.

       

      A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

      

    
    :type HomeDirectoryType: string
    :param HomeDirectoryType: 

      The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

      

    
    :type HomeDirectoryMappings: list
    :param HomeDirectoryMappings: 

      Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the ``Entry`` and ``Target`` pair, where ``Entry`` shows how the path is made visible and ``Target`` is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Amazon Web Services Identity and Access Management (IAM) role provides access to paths in ``Target`` . This value can only be set when ``HomeDirectoryType`` is set to *LOGICAL* .

       

      The following is an ``Entry`` and ``Target`` pair example.

       

       ``[ { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]``  

       

      In most cases, you can use this value instead of the scope-down policy to lock down your user to the designated home directory ("``chroot`` "). To do this, you can set ``Entry`` to ``/`` and set ``Target`` to the ``HomeDirectory`` parameter value.

       

      The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

       

       ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

       

      .. note::

         

        If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

         

      

    
      - *(dict) --* 

        Represents an object that contains entries and targets for ``HomeDirectoryMappings`` .

         

        The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

         

         ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

         

        .. note::

           

          If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

           

        

      
        - **Entry** *(string) --* **[REQUIRED]** 

          Represents an entry for ``HomeDirectoryMappings`` .

          

        
        - **Target** *(string) --* **[REQUIRED]** 

          Represents the map target that is used in a ``HomeDirectorymapEntry`` .

          

        
      
  
    :type Policy: string
    :param Policy: 

      A scope-down policy for your user so that you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ``${Transfer:UserName}`` , ``${Transfer:HomeDirectory}`` , and ``${Transfer:HomeBucket}`` .

       

      .. note::

         

        This only applies when domain of ``ServerId`` is S3. Amazon EFS does not use scope down policy.

         

        For scope-down policies, Amazon Web ServicesTransfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the ``Policy`` argument.

         

        For an example of a scope-down policy, see `Example scope-down policy <https://docs.aws.amazon.com/transfer/latest/userguide/scope-down-policy.html>`__ .

         

        For more information, see `AssumeRole <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__ in the *Amazon Web ServicesSecurity Token Service API Reference* .

         

      

    
    :type PosixProfile: dict
    :param PosixProfile: 

      The full POSIX identity, including user ID (``Uid`` ), group ID (``Gid`` ), and any secondary groups IDs (``SecondaryGids`` ), that controls your users' access to your Amazon EFS file systems. The POSIX permissions that are set on files and directories in your file system determine the level of access your users get when transferring files into and out of your Amazon EFS file systems.

      

    
      - **Uid** *(integer) --* **[REQUIRED]** 

        The POSIX user ID used for all EFS operations by this user.

        

      
      - **Gid** *(integer) --* **[REQUIRED]** 

        The POSIX group ID used for all EFS operations by this user.

        

      
      - **SecondaryGids** *(list) --* 

        The secondary POSIX group IDs used for all EFS operations by this user.

        

      
        - *(integer) --* 

        
    
    
    :type Role: string
    :param Role: 

      Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

      

    
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server instance. This is the specific server that you added your user to.

      

    
    :type ExternalId: string
    :param ExternalId: **[REQUIRED]** 

      A unique identifier that is required to identify specific groups within your directory. The users of the group that you associate have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web Services Transfer Family. If you know the group name, you can view the SID values by running the following command using Windows PowerShell.

       

       ``Get-ADGroup -Filter {samAccountName -like "*YourGroupName* *"} -Properties * | Select SamAccountName,ObjectSid``  

       

      In that command, replace *YourGroupName* with the name of your Active Directory group.

       

      The regex used to validate this parameter is a string of characters consisting of uppercase and lowercase alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string',
            'ExternalId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerId** *(string) --* 

          The ID of the server that the user is attached to.

          
        

        - **ExternalId** *(string) --* 

          The external ID of the group whose users have access to your Amazon S3 or Amazon EFS resources over the enabled protocols using Amazon Web ServicesTransfer Family.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: update_server(**kwargs)

    

    Updates the file transfer protocol-enabled server's properties after that server has been created.

     

    The ``UpdateServer`` call returns the ``ServerId`` of the server you updated.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/UpdateServer>`_    


    **Request Syntax** 
    ::

      response = client.update_server(
          Certificate='string',
          ProtocolDetails={
              'PassiveIp': 'string'
          },
          EndpointDetails={
              'AddressAllocationIds': [
                  'string',
              ],
              'SubnetIds': [
                  'string',
              ],
              'VpcEndpointId': 'string',
              'VpcId': 'string',
              'SecurityGroupIds': [
                  'string',
              ]
          },
          EndpointType='PUBLIC'|'VPC'|'VPC_ENDPOINT',
          HostKey='string',
          IdentityProviderDetails={
              'Url': 'string',
              'InvocationRole': 'string',
              'DirectoryId': 'string'
          },
          LoggingRole='string',
          Protocols=[
              'SFTP'|'FTP'|'FTPS',
          ],
          SecurityPolicyName='string',
          ServerId='string'
      )
    :type Certificate: string
    :param Certificate: 

      The Amazon Resource Name (ARN) of the Amazon Web ServicesCertificate Manager (ACM) certificate. Required when ``Protocols`` is set to ``FTPS`` .

       

      To request a new public certificate, see `Request a public certificate <https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-public.html>`__ in the *Amazon Web ServicesCertificate Manager User Guide* .

       

      To import an existing certificate into ACM, see `Importing certificates into ACM <https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html>`__ in the *Amazon Web ServicesCertificate Manager User Guide* .

       

      To request a private certificate to use FTPS through private IP addresses, see `Request a private certificate <https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html>`__ in the *Amazon Web ServicesCertificate Manager User Guide* .

       

      Certificates with the following cryptographic algorithms and key sizes are supported:

       

       
      * 2048-bit RSA (RSA_2048) 
       
      * 4096-bit RSA (RSA_4096) 
       
      * Elliptic Prime Curve 256 bit (EC_prime256v1) 
       
      * Elliptic Prime Curve 384 bit (EC_secp384r1) 
       
      * Elliptic Prime Curve 521 bit (EC_secp521r1) 
       

       

      .. note::

         

        The certificate must be a valid SSL/TLS X.509 version 3 certificate with FQDN or IP address specified and information about the issuer.

         

      

    
    :type ProtocolDetails: dict
    :param ProtocolDetails: 

      The protocol settings that are configured for your server. 

       

      Use the ``PassiveIp`` parameter to indicate passive mode (for FTP and FTPS protocols). Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. 

      

    
      - **PassiveIp** *(string) --* 

        Indicates passive mode, for FTP and FTPS protocols. Enter a single dotted-quad IPv4 address, such as the external IP address of a firewall, router, or load balancer. For example: 

         

         ``aws transfer update-server --protocol-details PassiveIp=*0.0.0.0* ``  

         

        Replace `` *0.0.0.0* `` in the example above with the actual IP address you want to use.

        

      
    
    :type EndpointDetails: dict
    :param EndpointDetails: 

      The virtual private cloud (VPC) endpoint settings that are configured for your server. When you host your endpoint within your VPC, you can make it accessible only to resources within your VPC, or you can attach Elastic IP addresses and make it accessible to clients over the internet. Your VPC's default security groups are automatically assigned to your endpoint.

      

    
      - **AddressAllocationIds** *(list) --* 

        A list of address allocation IDs that are required to attach an Elastic IP address to your server's endpoint.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` and it is only valid in the ``UpdateServer`` API.

           

        

      
        - *(string) --* 

        
    
      - **SubnetIds** *(list) --* 

        A list of subnet IDs that are required to host your server endpoint in your VPC.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` .

           

        

      
        - *(string) --* 

        
    
      - **VpcEndpointId** *(string) --* 

        The ID of the VPC endpoint.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC_ENDPOINT`` .

           

          For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.

           

        

      
      - **VpcId** *(string) --* 

        The VPC ID of the VPC in which a server's endpoint will be hosted.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` .

           

        

      
      - **SecurityGroupIds** *(list) --* 

        A list of security groups IDs that are available to attach to your server's endpoint.

         

        .. note::

           

          This property can only be set when ``EndpointType`` is set to ``VPC`` .

           

          You can edit the ``SecurityGroupIds`` property in the `UpdateServer <https://docs.aws.amazon.com/transfer/latest/userguide/API_UpdateServer.html>`__ API only if you are changing the ``EndpointType`` from ``PUBLIC`` or ``VPC_ENDPOINT`` to ``VPC`` . To change security groups associated with your server's VPC endpoint after creation, use the Amazon EC2 `ModifyVpcEndpoint <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyVpcEndpoint.html>`__ API.

           

        

      
        - *(string) --* 

        
    
    
    :type EndpointType: string
    :param EndpointType: 

      The type of endpoint that you want your server to use. You can choose to make your server's endpoint publicly accessible (PUBLIC) or host it inside your VPC. With an endpoint that is hosted in a VPC, you can restrict access to your server and resources only within your VPC or choose to make it internet facing by attaching Elastic IP addresses directly to it.

       

      .. note::

         

        After May 19, 2021, you won't be able to create a server using ``EndpointType=VPC_ENDPOINT`` in your Amazon Web Servicesaccount if your account hasn't already done so before May 19, 2021. If you have already created servers with ``EndpointType=VPC_ENDPOINT`` in your Amazon Web Servicesaccount on or before May 19, 2021, you will not be affected. After this date, use ``EndpointType`` =``VPC`` .

         

        For more information, see https://docs.aws.amazon.com/transfer/latest/userguide/create-server-in-vpc.html#deprecate-vpc-endpoint.

         

        It is recommended that you use ``VPC`` as the ``EndpointType`` . With this endpoint type, you have the option to directly associate up to three Elastic IPv4 addresses (BYO IP included) with your server's endpoint and use VPC security groups to restrict traffic by the client's public IP address. This is not possible with ``EndpointType`` set to ``VPC_ENDPOINT`` .

         

      

    
    :type HostKey: string
    :param HostKey: 

      The RSA private key as generated by ``ssh-keygen -N "" -m PEM -f my-new-server-key`` .

       

      .. warning::

         

        If you aren't planning to migrate existing users from an existing server to a new server, don't update the host key. Accidentally changing a server's host key can be disruptive.

         

       

      For more information, see `Change the host key for your SFTP-enabled server <https://docs.aws.amazon.com/transfer/latest/userguide/edit-server-config.html#configuring-servers-change-host-key>`__ in the *Amazon Web ServicesTransfer Family User Guide* .

      

    
    :type IdentityProviderDetails: dict
    :param IdentityProviderDetails: 

      An array containing all of the information required to call a customer's authentication API method.

      

    
      - **Url** *(string) --* 

        Provides the location of the service endpoint used to authenticate users.

        

      
      - **InvocationRole** *(string) --* 

        Provides the type of ``InvocationRole`` used to authenticate the user account.

        

      
      - **DirectoryId** *(string) --* 

        The identifier of the Amazon Web ServicesDirectory Service directory that you want to stop sharing.

        

      
    
    :type LoggingRole: string
    :param LoggingRole: 

      Specifies the Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFS events. When set, user activity can be viewed in your CloudWatch logs.

      

    
    :type Protocols: list
    :param Protocols: 

      Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. The available protocols are:

       

       
      * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH 
       
      * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption 
       
      * File Transfer Protocol (FTP): Unencrypted file transfer 
       

       

      .. note::

         

        If you select ``FTPS`` , you must choose a certificate stored in Amazon Web ServicesCertificate Manager (ACM) which will be used to identify your server when clients connect to it over FTPS.

         

        If ``Protocol`` includes either ``FTP`` or ``FTPS`` , then the ``EndpointType`` must be ``VPC`` and the ``IdentityProviderType`` must be ``AWS_DIRECTORY_SERVICE`` or ``API_GATEWAY`` .

         

        If ``Protocol`` includes ``FTP`` , then ``AddressAllocationIds`` cannot be associated.

         

        If ``Protocol`` is set only to ``SFTP`` , the ``EndpointType`` can be set to ``PUBLIC`` and the ``IdentityProviderType`` can be set to ``SERVICE_MANAGED`` .

         

      

    
      - *(string) --* 

      
  
    :type SecurityPolicyName: string
    :param SecurityPolicyName: 

      Specifies the name of the security policy that is attached to the server.

      

    
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server instance that the user account is assigned to.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ServerId** *(string) --* 

          A system-assigned unique identifier for a server that the user account is assigned to.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.ConflictException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceExistsException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Transfer.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_user(**kwargs)

    

    Assigns new properties to a user. Parameters you pass modify any or all of the following: the home directory, role, and policy for the ``UserName`` and ``ServerId`` you specify.

     

    The response returns the ``ServerId`` and the ``UserName`` for the updated user.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/UpdateUser>`_    


    **Request Syntax** 
    ::

      response = client.update_user(
          HomeDirectory='string',
          HomeDirectoryType='PATH'|'LOGICAL',
          HomeDirectoryMappings=[
              {
                  'Entry': 'string',
                  'Target': 'string'
              },
          ],
          Policy='string',
          PosixProfile={
              'Uid': 123,
              'Gid': 123,
              'SecondaryGids': [
                  123,
              ]
          },
          Role='string',
          ServerId='string',
          UserName='string'
      )
    :type HomeDirectory: string
    :param HomeDirectory: 

      The landing directory (folder) for a user when they log in to the server using the client.

       

      A ``HomeDirectory`` example is ``/bucket_name/home/mydirectory`` .

      

    
    :type HomeDirectoryType: string
    :param HomeDirectoryType: 

      The type of landing directory (folder) you want your users' home directory to be when they log into the server. If you set it to ``PATH`` , the user will see the absolute Amazon S3 bucket or EFS paths as is in their file transfer protocol clients. If you set it ``LOGICAL`` , you will need to provide mappings in the ``HomeDirectoryMappings`` for how you want to make Amazon S3 or EFS paths visible to your users.

      

    
    :type HomeDirectoryMappings: list
    :param HomeDirectoryMappings: 

      Logical directory mappings that specify what Amazon S3 or Amazon EFS paths and keys should be visible to your user and how you want to make them visible. You must specify the ``Entry`` and ``Target`` pair, where ``Entry`` shows how the path is made visible and ``Target`` is the actual Amazon S3 or Amazon EFS path. If you only specify a target, it is displayed as is. You also must ensure that your Amazon Web Services Identity and Access Management (IAM) role provides access to paths in ``Target`` . This value can only be set when ``HomeDirectoryType`` is set to *LOGICAL* .

       

      The following is an ``Entry`` and ``Target`` pair example.

       

       ``[ { "Entry": "your-personal-report.pdf", "Target": "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]``  

       

      In most cases, you can use this value instead of the scope-down policy to lock down your user to the designated home directory ("``chroot`` "). To do this, you can set ``Entry`` to '/' and set ``Target`` to the HomeDirectory parameter value.

       

      The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

       

       ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

       

      .. note::

         

        If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

         

      

    
      - *(dict) --* 

        Represents an object that contains entries and targets for ``HomeDirectoryMappings`` .

         

        The following is an ``Entry`` and ``Target`` pair example for ``chroot`` .

         

         ``[ { "Entry:": "/", "Target": "/bucket_name/home/mydirectory" } ]``  

         

        .. note::

           

          If the target of a logical directory entry does not exist in Amazon S3 or EFS, the entry is ignored. As a workaround, you can use the Amazon S3 API or EFS API to create 0 byte objects as place holders for your directory. If using the CLI, use the ``s3api`` or ``efsapi`` call instead of ``s3`` or ``efs`` so you can use the put-object operation. For example, you use the following: ``aws s3api put-object --bucket bucketname --key path/to/folder/`` . Make sure that the end of the key name ends in a ``/`` for it to be considered a folder.

           

        

      
        - **Entry** *(string) --* **[REQUIRED]** 

          Represents an entry for ``HomeDirectoryMappings`` .

          

        
        - **Target** *(string) --* **[REQUIRED]** 

          Represents the map target that is used in a ``HomeDirectorymapEntry`` .

          

        
      
  
    :type Policy: string
    :param Policy: 

      A scope-down policy for your user so that you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ``${Transfer:UserName}`` , ``${Transfer:HomeDirectory}`` , and ``${Transfer:HomeBucket}`` .

       

      .. note::

         

        This only applies when domain of ``ServerId`` is S3. Amazon EFS does not use scope-down policies.

         

        For scope-down policies, Amazon Web ServicesTransfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the ``Policy`` argument.

         

        For an example of a scope-down policy, see `Creating a scope-down policy <https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down>`__ .

         

        For more information, see `AssumeRole <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`__ in the *Amazon Web Services Security Token Service API Reference* .

         

      

    
    :type PosixProfile: dict
    :param PosixProfile: 

      Specifies the full POSIX identity, including user ID (``Uid`` ), group ID (``Gid`` ), and any secondary groups IDs (``SecondaryGids`` ), that controls your users' access to your Amazon Elastic File Systems (Amazon EFS). The POSIX permissions that are set on files and directories in your file system determines the level of access your users get when transferring files into and out of your Amazon EFS file systems.

      

    
      - **Uid** *(integer) --* **[REQUIRED]** 

        The POSIX user ID used for all EFS operations by this user.

        

      
      - **Gid** *(integer) --* **[REQUIRED]** 

        The POSIX group ID used for all EFS operations by this user.

        

      
      - **SecondaryGids** *(list) --* 

        The secondary POSIX group IDs used for all EFS operations by this user.

        

      
        - *(integer) --* 

        
    
    
    :type Role: string
    :param Role: 

      Specifies the Amazon Resource Name (ARN) of the IAM role that controls your users' access to your Amazon S3 bucket or EFS file system. The policies attached to this role determine the level of access that you want to provide your users when transferring files into and out of your Amazon S3 bucket or EFS file system. The IAM role should also contain a trust relationship that allows the server to access your resources when servicing your users' transfer requests.

      

    
    :type ServerId: string
    :param ServerId: **[REQUIRED]** 

      A system-assigned unique identifier for a server instance that the user account is assigned to.

      

    
    :type UserName: string
    :param UserName: **[REQUIRED]** 

      A unique string that identifies a user and is associated with a server as specified by the ``ServerId`` . This user name must be a minimum of 3 and a maximum of 100 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore '_', hyphen '-', period '.', and at sign '@'. The user name can't start with a hyphen, period, or at sign.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ServerId': 'string',
            'UserName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

         ``UpdateUserResponse`` returns the user name and identifier for the request to update a user's properties.

        
        

        - **ServerId** *(string) --* 

          A system-assigned unique identifier for a server instance that the user account is assigned to.

          
        

        - **UserName** *(string) --* 

          The unique identifier for a user that is assigned to a server instance that was specified in the request.

          
    
    **Exceptions** 
    
    *     :py:class:`Transfer.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Transfer.Client.exceptions.InternalServiceError`

    
    *     :py:class:`Transfer.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Transfer.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Transfer.Client.exceptions.ThrottlingException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`Transfer.Paginator.ListServers`



.. py:class:: Transfer.Paginator.ListServers

  ::

    
    paginator = client.get_paginator('list_servers')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Transfer.Client.list_servers`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/ListServers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Servers': [
                {
                    'Arn': 'string',
                    'Domain': 'S3'|'EFS',
                    'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY'|'AWS_DIRECTORY_SERVICE',
                    'EndpointType': 'PUBLIC'|'VPC'|'VPC_ENDPOINT',
                    'LoggingRole': 'string',
                    'ServerId': 'string',
                    'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
                    'UserCount': 123
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Servers** *(list) --* 

          An array of servers that were listed.

          
          

          - *(dict) --* 

            Returns properties of a file transfer protocol-enabled server that was specified.

            
            

            - **Arn** *(string) --* 

              Specifies the unique Amazon Resource Name (ARN) for a server to be listed.

              
            

            - **Domain** *(string) --* 

              Specifies the domain of the storage system that is used for file transfers.

              
            

            - **IdentityProviderType** *(string) --* 

              Specifies the mode of authentication for a server. The default value is ``SERVICE_MANAGED`` , which allows you to store and access user credentials within the Amazon Web Services Transfer Family service.

               

              Use ``AWS_DIRECTORY_SERVICE`` to provide access to Active Directory groups in Amazon Web Services Managed Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connectors. This option also requires you to provide a Directory ID using the ``IdentityProviderDetails`` parameter.

               

              Use the ``API_GATEWAY`` value to integrate with an identity provider of your choosing. The ``API_GATEWAY`` setting requires you to provide an API Gateway endpoint URL to call for authentication using the ``IdentityProviderDetails`` parameter.

              
            

            - **EndpointType** *(string) --* 

              Specifies the type of VPC endpoint that your server is connected to. If your server is connected to a VPC endpoint, your server isn't accessible over the public internet.

              
            

            - **LoggingRole** *(string) --* 

              Specifies the Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that allows a server to turn on Amazon CloudWatch logging for Amazon S3 or Amazon EFS events. When set, user activity can be viewed in your CloudWatch logs.

              
            

            - **ServerId** *(string) --* 

              Specifies the unique system assigned identifier for the servers that were listed.

              
            

            - **State** *(string) --* 

              Specifies the condition of a server for the server that was described. A value of ``ONLINE`` indicates that the server can accept jobs and transfer files. A ``State`` value of ``OFFLINE`` means that the server cannot perform file transfer operations.

               

              The states of ``STARTING`` and ``STOPPING`` indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of ``START_FAILED`` or ``STOP_FAILED`` can indicate an error condition.

              
            

            - **UserCount** *(integer) --* 

              Specifies the number of users that are assigned to a server you specified with the ``ServerId`` .

              
        
      
    