

*******
SSOOIDC
*******

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: SSOOIDC.Client

  A low-level client representing AWS SSO OIDC
  

  AWS Single Sign-On (SSO) OpenID Connect (OIDC) is a web service that enables a client (such as AWS CLI or a native application) to register with AWS SSO. The service also enables the client to fetch the userâ€™s access token upon successful authentication and authorization with AWS SSO. This service conforms with the OAuth 2.0 based implementation of the device authorization grant standard (`https\://tools.ietf.org/html/rfc8628 <https://tools.ietf.org/html/rfc8628>`__ ).

   

  For general information about AWS SSO, see `What is AWS Single Sign-On? <https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html>`__ in the *AWS SSO User Guide* .

   

  This API reference guide describes the AWS SSO OIDC operations that you can call programatically and includes detailed information on data types and errors.

   

  .. note::

     

    AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms such as Java, Ruby, .Net, iOS, and Android. The SDKs provide a convenient way to create programmatic access to AWS SSO and other AWS services. For more information about the AWS SDKs, including how to download and install them, see `Tools for Amazon Web Services <http://aws.amazon.com/tools/>`__ .

     

  ::

    
    import boto3
    
    client = boto3.client('sso-oidc')

  
  These are the available methods:
  
  *   :py:meth:`~SSOOIDC.Client.can_paginate`

  
  *   :py:meth:`~SSOOIDC.Client.create_token`

  
  *   :py:meth:`~SSOOIDC.Client.generate_presigned_url`

  
  *   :py:meth:`~SSOOIDC.Client.get_paginator`

  
  *   :py:meth:`~SSOOIDC.Client.get_waiter`

  
  *   :py:meth:`~SSOOIDC.Client.register_client`

  
  *   :py:meth:`~SSOOIDC.Client.start_device_authorization`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_token(**kwargs)

    

    Creates and returns an access token for the authorized client. The access token issued will be used to fetch short-term credentials for the assigned roles in the AWS account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/sso-oidc-2019-06-10/CreateToken>`_    


    **Request Syntax** 
    ::

      response = client.create_token(
          clientId='string',
          clientSecret='string',
          grantType='string',
          deviceCode='string',
          code='string',
          refreshToken='string',
          scope=[
              'string',
          ],
          redirectUri='string'
      )
    :type clientId: string
    :param clientId: **[REQUIRED]** 

      The unique identifier string for each client. This value should come from the persisted result of the  RegisterClient API.

      

    
    :type clientSecret: string
    :param clientSecret: **[REQUIRED]** 

      A secret string generated for the client. This value should come from the persisted result of the  RegisterClient API.

      

    
    :type grantType: string
    :param grantType: **[REQUIRED]** 

      Supports grant types for authorization code, refresh token, and device code request.

      

    
    :type deviceCode: string
    :param deviceCode: **[REQUIRED]** 

      Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the  StartDeviceAuthorization API.

      

    
    :type code: string
    :param code: 

      The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.

      

    
    :type refreshToken: string
    :param refreshToken: 

      The token used to obtain an access token in the event that the access token is invalid or expired. This token is not issued by the service.

      

    
    :type scope: list
    :param scope: 

      The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.

      

    
      - *(string) --* 

      
  
    :type redirectUri: string
    :param redirectUri: 

      The location of the application that will receive the authorization code. Users authorize the service to send the request to this location.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'accessToken': 'string',
            'tokenType': 'string',
            'expiresIn': 123,
            'refreshToken': 'string',
            'idToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **accessToken** *(string) --* 

          An opaque token to access AWS SSO resources assigned to a user.

          
        

        - **tokenType** *(string) --* 

          Used to notify the client that the returned token is an access token. The supported type is ``BearerToken`` .

          
        

        - **expiresIn** *(integer) --* 

          Indicates the time in seconds when an access token will expire.

          
        

        - **refreshToken** *(string) --* 

          A token that, if present, can be used to refresh a previously issued access token that might have expired.

          
        

        - **idToken** *(string) --* 

          The identifier of the user that associated with the access token, if present.

          
    
    **Exceptions** 
    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidClientException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidGrantException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.UnauthorizedClientException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.UnsupportedGrantTypeException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidScopeException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.AuthorizationPendingException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.SlowDownException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.ExpiredTokenException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InternalServerException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: register_client(**kwargs)

    

    Registers a client with AWS SSO. This allows clients to initiate device authorization. The output should be persisted for reuse through many authentication requests.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/sso-oidc-2019-06-10/RegisterClient>`_    


    **Request Syntax** 
    ::

      response = client.register_client(
          clientName='string',
          clientType='string',
          scopes=[
              'string',
          ]
      )
    :type clientName: string
    :param clientName: **[REQUIRED]** 

      The friendly name of the client.

      

    
    :type clientType: string
    :param clientType: **[REQUIRED]** 

      The type of client. The service supports only ``public`` as a client type. Anything other than public will be rejected by the service.

      

    
    :type scopes: list
    :param scopes: 

      The list of scopes that are defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'clientId': 'string',
            'clientSecret': 'string',
            'clientIdIssuedAt': 123,
            'clientSecretExpiresAt': 123,
            'authorizationEndpoint': 'string',
            'tokenEndpoint': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **clientId** *(string) --* 

          The unique identifier string for each client. This client uses this identifier to get authenticated by the service in subsequent calls.

          
        

        - **clientSecret** *(string) --* 

          A secret string generated for the client. The client will use this string to get authenticated by the service in subsequent calls.

          
        

        - **clientIdIssuedAt** *(integer) --* 

          Indicates the time at which the ``clientId`` and ``clientSecret`` were issued.

          
        

        - **clientSecretExpiresAt** *(integer) --* 

          Indicates the time at which the ``clientId`` and ``clientSecret`` will become invalid.

          
        

        - **authorizationEndpoint** *(string) --* 

          The endpoint where the client can request authorization.

          
        

        - **tokenEndpoint** *(string) --* 

          The endpoint where the client can get an access token.

          
    
    **Exceptions** 
    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidScopeException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidClientMetadataException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InternalServerException`

    

  .. py:method:: start_device_authorization(**kwargs)

    

    Initiates device authorization by requesting a pair of verification codes from the authorization service.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/sso-oidc-2019-06-10/StartDeviceAuthorization>`_    


    **Request Syntax** 
    ::

      response = client.start_device_authorization(
          clientId='string',
          clientSecret='string',
          startUrl='string'
      )
    :type clientId: string
    :param clientId: **[REQUIRED]** 

      The unique identifier string for the client that is registered with AWS SSO. This value should come from the persisted result of the  RegisterClient API operation.

      

    
    :type clientSecret: string
    :param clientSecret: **[REQUIRED]** 

      A secret string that is generated for the client. This value should come from the persisted result of the  RegisterClient API operation.

      

    
    :type startUrl: string
    :param startUrl: **[REQUIRED]** 

      The URL for the AWS SSO user portal. For more information, see `Using the User Portal <https://docs.aws.amazon.com/singlesignon/latest/userguide/using-the-portal.html>`__ in the *AWS Single Sign-On User Guide* .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'deviceCode': 'string',
            'userCode': 'string',
            'verificationUri': 'string',
            'verificationUriComplete': 'string',
            'expiresIn': 123,
            'interval': 123
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **deviceCode** *(string) --* 

          The short-lived code that is used by the device when polling for a session token.

          
        

        - **userCode** *(string) --* 

          A one-time user verification code. This is needed to authorize an in-use device.

          
        

        - **verificationUri** *(string) --* 

          The URI of the verification page that takes the ``userCode`` to authorize the device.

          
        

        - **verificationUriComplete** *(string) --* 

          An alternate URL that the client can use to automatically launch a browser. This process skips the manual step in which the user visits the verification page and enters their code.

          
        

        - **expiresIn** *(integer) --* 

          Indicates the number of seconds in which the verification code will become invalid.

          
        

        - **interval** *(integer) --* 

          Indicates the number of seconds the client must wait between attempts when polling for a session.

          
    
    **Exceptions** 
    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InvalidClientException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.UnauthorizedClientException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.SlowDownException`

    
    *     :py:class:`SSOOIDC.Client.exceptions.InternalServerException`

    

==========
Paginators
==========


The available paginators are:
