

**********
WorkSpaces
**********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: WorkSpaces.Client

  A low-level client representing Amazon WorkSpaces
   

  Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows and Amazon Linux desktops for your users.

  ::

    
    import boto3
    
    client = boto3.client('workspaces')

  
  These are the available methods:
  
  *   :py:meth:`~WorkSpaces.Client.associate_connection_alias`

  
  *   :py:meth:`~WorkSpaces.Client.associate_ip_groups`

  
  *   :py:meth:`~WorkSpaces.Client.authorize_ip_rules`

  
  *   :py:meth:`~WorkSpaces.Client.can_paginate`

  
  *   :py:meth:`~WorkSpaces.Client.copy_workspace_image`

  
  *   :py:meth:`~WorkSpaces.Client.create_connection_alias`

  
  *   :py:meth:`~WorkSpaces.Client.create_ip_group`

  
  *   :py:meth:`~WorkSpaces.Client.create_tags`

  
  *   :py:meth:`~WorkSpaces.Client.create_workspace_bundle`

  
  *   :py:meth:`~WorkSpaces.Client.create_workspaces`

  
  *   :py:meth:`~WorkSpaces.Client.delete_connection_alias`

  
  *   :py:meth:`~WorkSpaces.Client.delete_ip_group`

  
  *   :py:meth:`~WorkSpaces.Client.delete_tags`

  
  *   :py:meth:`~WorkSpaces.Client.delete_workspace_bundle`

  
  *   :py:meth:`~WorkSpaces.Client.delete_workspace_image`

  
  *   :py:meth:`~WorkSpaces.Client.deregister_workspace_directory`

  
  *   :py:meth:`~WorkSpaces.Client.describe_account`

  
  *   :py:meth:`~WorkSpaces.Client.describe_account_modifications`

  
  *   :py:meth:`~WorkSpaces.Client.describe_client_properties`

  
  *   :py:meth:`~WorkSpaces.Client.describe_connection_alias_permissions`

  
  *   :py:meth:`~WorkSpaces.Client.describe_connection_aliases`

  
  *   :py:meth:`~WorkSpaces.Client.describe_ip_groups`

  
  *   :py:meth:`~WorkSpaces.Client.describe_tags`

  
  *   :py:meth:`~WorkSpaces.Client.describe_workspace_bundles`

  
  *   :py:meth:`~WorkSpaces.Client.describe_workspace_directories`

  
  *   :py:meth:`~WorkSpaces.Client.describe_workspace_image_permissions`

  
  *   :py:meth:`~WorkSpaces.Client.describe_workspace_images`

  
  *   :py:meth:`~WorkSpaces.Client.describe_workspace_snapshots`

  
  *   :py:meth:`~WorkSpaces.Client.describe_workspaces`

  
  *   :py:meth:`~WorkSpaces.Client.describe_workspaces_connection_status`

  
  *   :py:meth:`~WorkSpaces.Client.disassociate_connection_alias`

  
  *   :py:meth:`~WorkSpaces.Client.disassociate_ip_groups`

  
  *   :py:meth:`~WorkSpaces.Client.generate_presigned_url`

  
  *   :py:meth:`~WorkSpaces.Client.get_paginator`

  
  *   :py:meth:`~WorkSpaces.Client.get_waiter`

  
  *   :py:meth:`~WorkSpaces.Client.import_workspace_image`

  
  *   :py:meth:`~WorkSpaces.Client.list_available_management_cidr_ranges`

  
  *   :py:meth:`~WorkSpaces.Client.migrate_workspace`

  
  *   :py:meth:`~WorkSpaces.Client.modify_account`

  
  *   :py:meth:`~WorkSpaces.Client.modify_client_properties`

  
  *   :py:meth:`~WorkSpaces.Client.modify_selfservice_permissions`

  
  *   :py:meth:`~WorkSpaces.Client.modify_workspace_access_properties`

  
  *   :py:meth:`~WorkSpaces.Client.modify_workspace_creation_properties`

  
  *   :py:meth:`~WorkSpaces.Client.modify_workspace_properties`

  
  *   :py:meth:`~WorkSpaces.Client.modify_workspace_state`

  
  *   :py:meth:`~WorkSpaces.Client.reboot_workspaces`

  
  *   :py:meth:`~WorkSpaces.Client.rebuild_workspaces`

  
  *   :py:meth:`~WorkSpaces.Client.register_workspace_directory`

  
  *   :py:meth:`~WorkSpaces.Client.restore_workspace`

  
  *   :py:meth:`~WorkSpaces.Client.revoke_ip_rules`

  
  *   :py:meth:`~WorkSpaces.Client.start_workspaces`

  
  *   :py:meth:`~WorkSpaces.Client.stop_workspaces`

  
  *   :py:meth:`~WorkSpaces.Client.terminate_workspaces`

  
  *   :py:meth:`~WorkSpaces.Client.update_connection_alias_permission`

  
  *   :py:meth:`~WorkSpaces.Client.update_rules_of_ip_group`

  
  *   :py:meth:`~WorkSpaces.Client.update_workspace_bundle`

  
  *   :py:meth:`~WorkSpaces.Client.update_workspace_image_permission`

  

  .. py:method:: associate_connection_alias(**kwargs)

    

    Associates the specified connection alias with the specified directory to enable cross-Region redirection. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

     

    .. note::

       

      Before performing this operation, call `DescribeConnectionAliases <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html>`__ to make sure that the current state of the connection alias is ``CREATED`` .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/AssociateConnectionAlias>`_    


    **Request Syntax** 
    ::

      response = client.associate_connection_alias(
          AliasId='string',
          ResourceId='string'
      )
    :type AliasId: string
    :param AliasId: **[REQUIRED]** 

      The identifier of the connection alias.

      

    
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The identifier of the directory to associate the connection alias with.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectionIdentifier': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectionIdentifier** *(string) --* 

          The identifier of the connection alias association. You use the connection identifier in the DNS TXT record when you're configuring your DNS routing policies. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAssociatedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: associate_ip_groups(**kwargs)

    

    Associates the specified IP access control group with the specified directory.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/AssociateIpGroups>`_    


    **Request Syntax** 
    ::

      response = client.associate_ip_groups(
          DirectoryId='string',
          GroupIds=[
              'string',
          ]
      )
    :type DirectoryId: string
    :param DirectoryId: **[REQUIRED]** 

      The identifier of the directory.

      

    
    :type GroupIds: list
    :param GroupIds: **[REQUIRED]** 

      The identifiers of one or more IP access control groups.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: authorize_ip_rules(**kwargs)

    

    Adds one or more rules to the specified IP access control group.

     

    This action gives users permission to access their WorkSpaces from the CIDR address ranges specified in the rules.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/AuthorizeIpRules>`_    


    **Request Syntax** 
    ::

      response = client.authorize_ip_rules(
          GroupId='string',
          UserRules=[
              {
                  'ipRule': 'string',
                  'ruleDesc': 'string'
              },
          ]
      )
    :type GroupId: string
    :param GroupId: **[REQUIRED]** 

      The identifier of the group.

      

    
    :type UserRules: list
    :param UserRules: **[REQUIRED]** 

      The rules to add to the group.

      

    
      - *(dict) --* 

        Describes a rule for an IP access control group.

        

      
        - **ipRule** *(string) --* 

          The IP address range, in CIDR notation.

          

        
        - **ruleDesc** *(string) --* 

          The description.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: copy_workspace_image(**kwargs)

    

    Copies the specified image from the specified Region to the current Region. For more information about copying images, see `Copy a Custom WorkSpaces Image <https://docs.aws.amazon.com/workspaces/latest/adminguide/copy-custom-image.html>`__ .

     

    .. note::

       

      In the China (Ningxia) Region, you can copy images only within the same Region.

       

      In the AWS GovCloud (US-West) Region, to copy images to and from other AWS Regions, contact AWS Support.

       

     

    .. warning::

       

      Before copying a shared image, be sure to verify that it has been shared from the correct AWS account. To determine if an image has been shared and to see the AWS account ID that owns an image, use the `DescribeWorkSpaceImages <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html>`__ and `DescribeWorkspaceImagePermissions <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImagePermissions.html>`__ API operations. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/CopyWorkspaceImage>`_    


    **Request Syntax** 
    ::

      response = client.copy_workspace_image(
          Name='string',
          Description='string',
          SourceImageId='string',
          SourceRegion='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the image.

      

    
    :type Description: string
    :param Description: 

      A description of the image.

      

    
    :type SourceImageId: string
    :param SourceImageId: **[REQUIRED]** 

      The identifier of the source image.

      

    
    :type SourceRegion: string
    :param SourceRegion: **[REQUIRED]** 

      The identifier of the source Region.

      

    
    :type Tags: list
    :param Tags: 

      The tags for the image.

      

    
      - *(dict) --* 

        Describes a tag.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key of the tag.

          

        
        - **Value** *(string) --* 

          The value of the tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ImageId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ImageId** *(string) --* 

          The identifier of the image.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: create_connection_alias(**kwargs)

    

    Creates the specified connection alias for use with cross-Region redirection. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/CreateConnectionAlias>`_    


    **Request Syntax** 
    ::

      response = client.create_connection_alias(
          ConnectionString='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ConnectionString: string
    :param ConnectionString: **[REQUIRED]** 

      A connection string in the form of a fully qualified domain name (FQDN), such as ``www.example.com`` .

       

      .. warning::

         

        After you create a connection string, it is always associated to your AWS account. You cannot recreate the same connection string with a different account, even if you delete all instances of it from the original account. The connection string is globally reserved for your account.

         

      

    
    :type Tags: list
    :param Tags: 

      The tags to associate with the connection alias.

      

    
      - *(dict) --* 

        Describes a tag.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key of the tag.

          

        
        - **Value** *(string) --* 

          The value of the tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AliasId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AliasId** *(string) --* 

          The identifier of the connection alias.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: create_ip_group(**kwargs)

    

    Creates an IP access control group.

     

    An IP access control group provides you with the ability to control the IP addresses from which users are allowed to access their WorkSpaces. To specify the CIDR address ranges, add rules to your IP access control group and then associate the group with your directory. You can add rules when you create the group or at any time using  AuthorizeIpRules .

     

    There is a default IP access control group associated with your directory. If you don't associate an IP access control group with your directory, the default group is used. The default group includes a default rule that allows users to access their WorkSpaces from anywhere. You cannot modify the default IP access control group for your directory.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/CreateIpGroup>`_    


    **Request Syntax** 
    ::

      response = client.create_ip_group(
          GroupName='string',
          GroupDesc='string',
          UserRules=[
              {
                  'ipRule': 'string',
                  'ruleDesc': 'string'
              },
          ],
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type GroupName: string
    :param GroupName: **[REQUIRED]** 

      The name of the group.

      

    
    :type GroupDesc: string
    :param GroupDesc: 

      The description of the group.

      

    
    :type UserRules: list
    :param UserRules: 

      The rules to add to the group.

      

    
      - *(dict) --* 

        Describes a rule for an IP access control group.

        

      
        - **ipRule** *(string) --* 

          The IP address range, in CIDR notation.

          

        
        - **ruleDesc** *(string) --* 

          The description.

          

        
      
  
    :type Tags: list
    :param Tags: 

      The tags. Each WorkSpaces resource can have a maximum of 50 tags.

      

    
      - *(dict) --* 

        Describes a tag.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key of the tag.

          

        
        - **Value** *(string) --* 

          The value of the tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'GroupId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **GroupId** *(string) --* 

          The identifier of the group.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceCreationFailedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_tags(**kwargs)

    

    Creates the specified tags for the specified WorkSpaces resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/CreateTags>`_    


    **Request Syntax** 
    ::

      response = client.create_tags(
          ResourceId='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces, registered directories, images, custom bundles, IP access control groups, and connection aliases.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      The tags. Each WorkSpaces resource can have a maximum of 50 tags.

      

    
      - *(dict) --* 

        Describes a tag.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key of the tag.

          

        
        - **Value** *(string) --* 

          The value of the tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    

  .. py:method:: create_workspace_bundle(**kwargs)

    

    Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see `Create a Custom WorkSpaces Image and Bundle <https://docs.aws.amazon.com/workspaces/latest/adminguide/create-custom-bundle.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/CreateWorkspaceBundle>`_    


    **Request Syntax** 
    ::

      response = client.create_workspace_bundle(
          BundleName='string',
          BundleDescription='string',
          ImageId='string',
          ComputeType={
              'Name': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
          },
          UserStorage={
              'Capacity': 'string'
          },
          RootStorage={
              'Capacity': 'string'
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type BundleName: string
    :param BundleName: **[REQUIRED]** 

      The name of the bundle.

      

    
    :type BundleDescription: string
    :param BundleDescription: **[REQUIRED]** 

      The description of the bundle.

      

    
    :type ImageId: string
    :param ImageId: **[REQUIRED]** 

      The identifier of the image that is used to create the bundle.

      

    
    :type ComputeType: dict
    :param ComputeType: **[REQUIRED]** 

      Describes the compute type of the bundle.

      

    
      - **Name** *(string) --* 

        The compute type.

        

      
    
    :type UserStorage: dict
    :param UserStorage: **[REQUIRED]** 

      Describes the user volume for a WorkSpace bundle.

      

    
      - **Capacity** *(string) --* 

        The size of the user volume.

        

      
    
    :type RootStorage: dict
    :param RootStorage: 

      Describes the root volume for a WorkSpace bundle.

      

    
      - **Capacity** *(string) --* 

        The size of the root volume.

        

      
    
    :type Tags: list
    :param Tags: 

      The tags associated with the bundle.

       

      .. note::

         

        To add tags at the same time when you're creating the bundle, you must create an IAM policy that grants your IAM user permissions to use ``workspaces:CreateTags`` . 

         

      

    
      - *(dict) --* 

        Describes a tag.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key of the tag.

          

        
        - **Value** *(string) --* 

          The value of the tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WorkspaceBundle': {
                'BundleId': 'string',
                'Name': 'string',
                'Owner': 'string',
                'Description': 'string',
                'ImageId': 'string',
                'RootStorage': {
                    'Capacity': 'string'
                },
                'UserStorage': {
                    'Capacity': 'string'
                },
                'ComputeType': {
                    'Name': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                },
                'LastUpdatedTime': datetime(2015, 1, 1),
                'CreationTime': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WorkspaceBundle** *(dict) --* 

          Describes a WorkSpace bundle.

          
          

          - **BundleId** *(string) --* 

            The identifier of the bundle.

            
          

          - **Name** *(string) --* 

            The name of the bundle.

            
          

          - **Owner** *(string) --* 

            The owner of the bundle. This is the account identifier of the owner, or ``AMAZON`` if the bundle is provided by AWS.

            
          

          - **Description** *(string) --* 

            The description of the bundle.

            
          

          - **ImageId** *(string) --* 

            The identifier of the image that was used to create the bundle.

            
          

          - **RootStorage** *(dict) --* 

            The size of the root volume.

            
            

            - **Capacity** *(string) --* 

              The size of the root volume.

              
        
          

          - **UserStorage** *(dict) --* 

            The size of the user volume.

            
            

            - **Capacity** *(string) --* 

              The size of the user volume.

              
        
          

          - **ComputeType** *(dict) --* 

            The compute type of the bundle. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

            
            

            - **Name** *(string) --* 

              The compute type.

              
        
          

          - **LastUpdatedTime** *(datetime) --* 

            The last time that the bundle was updated.

            
          

          - **CreationTime** *(datetime) --* 

            The time when the bundle was created.

            
      
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_workspaces(**kwargs)

    

    Creates one or more WorkSpaces.

     

    This operation is asynchronous and returns before the WorkSpaces are created.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/CreateWorkspaces>`_    


    **Request Syntax** 
    ::

      response = client.create_workspaces(
          Workspaces=[
              {
                  'DirectoryId': 'string',
                  'UserName': 'string',
                  'BundleId': 'string',
                  'VolumeEncryptionKey': 'string',
                  'UserVolumeEncryptionEnabled': True|False,
                  'RootVolumeEncryptionEnabled': True|False,
                  'WorkspaceProperties': {
                      'RunningMode': 'AUTO_STOP'|'ALWAYS_ON',
                      'RunningModeAutoStopTimeoutInMinutes': 123,
                      'RootVolumeSizeGib': 123,
                      'UserVolumeSizeGib': 123,
                      'ComputeTypeName': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                  },
                  'Tags': [
                      {
                          'Key': 'string',
                          'Value': 'string'
                      },
                  ]
              },
          ]
      )
    :type Workspaces: list
    :param Workspaces: **[REQUIRED]** 

      The WorkSpaces to create. You can specify up to 25 WorkSpaces.

      

    
      - *(dict) --* 

        Describes the information used to create a WorkSpace.

        

      
        - **DirectoryId** *(string) --* **[REQUIRED]** 

          The identifier of the AWS Directory Service directory for the WorkSpace. You can use  DescribeWorkspaceDirectories to list the available directories.

          

        
        - **UserName** *(string) --* **[REQUIRED]** 

          The user name of the user for the WorkSpace. This user name must exist in the AWS Directory Service directory for the WorkSpace.

          

        
        - **BundleId** *(string) --* **[REQUIRED]** 

          The identifier of the bundle for the WorkSpace. You can use  DescribeWorkspaceBundles to list the available bundles.

          

        
        - **VolumeEncryptionKey** *(string) --* 

          The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.

          

        
        - **UserVolumeEncryptionEnabled** *(boolean) --* 

          Indicates whether the data stored on the user volume is encrypted.

          

        
        - **RootVolumeEncryptionEnabled** *(boolean) --* 

          Indicates whether the data stored on the root volume is encrypted.

          

        
        - **WorkspaceProperties** *(dict) --* 

          The WorkSpace properties.

          

        
          - **RunningMode** *(string) --* 

            The running mode. For more information, see `Manage the WorkSpace Running Mode <https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html>`__ .

            

          
          - **RunningModeAutoStopTimeoutInMinutes** *(integer) --* 

            The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.

            

          
          - **RootVolumeSizeGib** *(integer) --* 

            The size of the root volume. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

            

          
          - **UserVolumeSizeGib** *(integer) --* 

            The size of the user storage. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

            

          
          - **ComputeTypeName** *(string) --* 

            The compute type. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

            

          
        
        - **Tags** *(list) --* 

          The tags for the WorkSpace.

          

        
          - *(dict) --* 

            Describes a tag.

            

          
            - **Key** *(string) --* **[REQUIRED]** 

              The key of the tag.

              

            
            - **Value** *(string) --* 

              The value of the tag.

              

            
          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedRequests': [
                {
                    'WorkspaceRequest': {
                        'DirectoryId': 'string',
                        'UserName': 'string',
                        'BundleId': 'string',
                        'VolumeEncryptionKey': 'string',
                        'UserVolumeEncryptionEnabled': True|False,
                        'RootVolumeEncryptionEnabled': True|False,
                        'WorkspaceProperties': {
                            'RunningMode': 'AUTO_STOP'|'ALWAYS_ON',
                            'RunningModeAutoStopTimeoutInMinutes': 123,
                            'RootVolumeSizeGib': 123,
                            'UserVolumeSizeGib': 123,
                            'ComputeTypeName': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                        },
                        'Tags': [
                            {
                                'Key': 'string',
                                'Value': 'string'
                            },
                        ]
                    },
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ],
            'PendingRequests': [
                {
                    'WorkspaceId': 'string',
                    'DirectoryId': 'string',
                    'UserName': 'string',
                    'IpAddress': 'string',
                    'State': 'PENDING'|'AVAILABLE'|'IMPAIRED'|'UNHEALTHY'|'REBOOTING'|'STARTING'|'REBUILDING'|'RESTORING'|'MAINTENANCE'|'ADMIN_MAINTENANCE'|'TERMINATING'|'TERMINATED'|'SUSPENDED'|'UPDATING'|'STOPPING'|'STOPPED'|'ERROR',
                    'BundleId': 'string',
                    'SubnetId': 'string',
                    'ErrorMessage': 'string',
                    'ErrorCode': 'string',
                    'ComputerName': 'string',
                    'VolumeEncryptionKey': 'string',
                    'UserVolumeEncryptionEnabled': True|False,
                    'RootVolumeEncryptionEnabled': True|False,
                    'WorkspaceProperties': {
                        'RunningMode': 'AUTO_STOP'|'ALWAYS_ON',
                        'RunningModeAutoStopTimeoutInMinutes': 123,
                        'RootVolumeSizeGib': 123,
                        'UserVolumeSizeGib': 123,
                        'ComputeTypeName': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                    },
                    'ModificationStates': [
                        {
                            'Resource': 'ROOT_VOLUME'|'USER_VOLUME'|'COMPUTE_TYPE',
                            'State': 'UPDATE_INITIATED'|'UPDATE_IN_PROGRESS'
                        },
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedRequests** *(list) --* 

          Information about the WorkSpaces that could not be created.

          
          

          - *(dict) --* 

            Describes a WorkSpace that cannot be created.

            
            

            - **WorkspaceRequest** *(dict) --* 

              Information about the WorkSpace.

              
              

              - **DirectoryId** *(string) --* 

                The identifier of the AWS Directory Service directory for the WorkSpace. You can use  DescribeWorkspaceDirectories to list the available directories.

                
              

              - **UserName** *(string) --* 

                The user name of the user for the WorkSpace. This user name must exist in the AWS Directory Service directory for the WorkSpace.

                
              

              - **BundleId** *(string) --* 

                The identifier of the bundle for the WorkSpace. You can use  DescribeWorkspaceBundles to list the available bundles.

                
              

              - **VolumeEncryptionKey** *(string) --* 

                The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.

                
              

              - **UserVolumeEncryptionEnabled** *(boolean) --* 

                Indicates whether the data stored on the user volume is encrypted.

                
              

              - **RootVolumeEncryptionEnabled** *(boolean) --* 

                Indicates whether the data stored on the root volume is encrypted.

                
              

              - **WorkspaceProperties** *(dict) --* 

                The WorkSpace properties.

                
                

                - **RunningMode** *(string) --* 

                  The running mode. For more information, see `Manage the WorkSpace Running Mode <https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html>`__ .

                  
                

                - **RunningModeAutoStopTimeoutInMinutes** *(integer) --* 

                  The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.

                  
                

                - **RootVolumeSizeGib** *(integer) --* 

                  The size of the root volume. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                  
                

                - **UserVolumeSizeGib** *(integer) --* 

                  The size of the user storage. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                  
                

                - **ComputeTypeName** *(string) --* 

                  The compute type. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

                  
            
              

              - **Tags** *(list) --* 

                The tags for the WorkSpace.

                
                

                - *(dict) --* 

                  Describes a tag.

                  
                  

                  - **Key** *(string) --* 

                    The key of the tag.

                    
                  

                  - **Value** *(string) --* 

                    The value of the tag.

                    
              
            
          
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be created.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be created.

              
        
      
        

        - **PendingRequests** *(list) --* 

          Information about the WorkSpaces that were created.

           

          Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call  DescribeWorkspaces before the WorkSpace is created, the information returned can be incomplete.

          
          

          - *(dict) --* 

            Describes a WorkSpace.

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **DirectoryId** *(string) --* 

              The identifier of the AWS Directory Service directory for the WorkSpace.

              
            

            - **UserName** *(string) --* 

              The user for the WorkSpace.

              
            

            - **IpAddress** *(string) --* 

              The IP address of the WorkSpace.

              
            

            - **State** *(string) --* 

              The operational state of the WorkSpace.

               

              .. note::

                 

                After a WorkSpace is terminated, the ``TERMINATED`` state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using `DescribeWorkSpaces <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html>`__ . If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.

                 

              
            

            - **BundleId** *(string) --* 

              The identifier of the bundle used to create the WorkSpace.

              
            

            - **SubnetId** *(string) --* 

              The identifier of the subnet for the WorkSpace.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be created.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be created.

              
            

            - **ComputerName** *(string) --* 

              The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see `Launch a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html>`__ . 

              
            

            - **VolumeEncryptionKey** *(string) --* 

              The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.

              
            

            - **UserVolumeEncryptionEnabled** *(boolean) --* 

              Indicates whether the data stored on the user volume is encrypted.

              
            

            - **RootVolumeEncryptionEnabled** *(boolean) --* 

              Indicates whether the data stored on the root volume is encrypted.

              
            

            - **WorkspaceProperties** *(dict) --* 

              The properties of the WorkSpace.

              
              

              - **RunningMode** *(string) --* 

                The running mode. For more information, see `Manage the WorkSpace Running Mode <https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html>`__ .

                
              

              - **RunningModeAutoStopTimeoutInMinutes** *(integer) --* 

                The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.

                
              

              - **RootVolumeSizeGib** *(integer) --* 

                The size of the root volume. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                
              

              - **UserVolumeSizeGib** *(integer) --* 

                The size of the user storage. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                
              

              - **ComputeTypeName** *(string) --* 

                The compute type. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

                
          
            

            - **ModificationStates** *(list) --* 

              The modification states of the WorkSpace.

              
              

              - *(dict) --* 

                Describes a WorkSpace modification.

                
                

                - **Resource** *(string) --* 

                  The resource.

                  
                

                - **State** *(string) --* 

                  The modification state.

                  
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: delete_connection_alias(**kwargs)

    

    Deletes the specified connection alias. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

     

    .. warning::

       

       **If you will no longer be using a fully qualified domain name (FQDN) as the registration code for your WorkSpaces users, you must take certain precautions to prevent potential security issues.** For more information, see `Security Considerations if You Stop Using Cross-Region Redirection <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html#cross-region-redirection-security-considerations>`__ .

       

     

    .. note::

       

      To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DeleteConnectionAlias>`_    


    **Request Syntax** 
    ::

      response = client.delete_connection_alias(
          AliasId='string'
      )
    :type AliasId: string
    :param AliasId: **[REQUIRED]** 

      The identifier of the connection alias to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAssociatedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: delete_ip_group(**kwargs)

    

    Deletes the specified IP access control group.

     

    You cannot delete an IP access control group that is associated with a directory.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DeleteIpGroup>`_    


    **Request Syntax** 
    ::

      response = client.delete_ip_group(
          GroupId='string'
      )
    :type GroupId: string
    :param GroupId: **[REQUIRED]** 

      The identifier of the IP access control group.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAssociatedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_tags(**kwargs)

    

    Deletes the specified tags from the specified WorkSpaces resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DeleteTags>`_    


    **Request Syntax** 
    ::

      response = client.delete_tags(
          ResourceId='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces, registered directories, images, custom bundles, IP access control groups, and connection aliases.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      The tag keys.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: delete_workspace_bundle(**kwargs)

    

    Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see `Delete a Custom WorkSpaces Bundle or Image <https://docs.aws.amazon.com/workspaces/latest/adminguide/delete_bundle.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DeleteWorkspaceBundle>`_    


    **Request Syntax** 
    ::

      response = client.delete_workspace_bundle(
          BundleId='string'
      )
    :type BundleId: string
    :param BundleId: 

      The identifier of the bundle.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAssociatedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_workspace_image(**kwargs)

    

    Deletes the specified image from your account. To delete an image, you must first delete any bundles that are associated with the image and unshare the image if it is shared with other accounts. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DeleteWorkspaceImage>`_    


    **Request Syntax** 
    ::

      response = client.delete_workspace_image(
          ImageId='string'
      )
    :type ImageId: string
    :param ImageId: **[REQUIRED]** 

      The identifier of the image.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAssociatedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: deregister_workspace_directory(**kwargs)

    

    Deregisters the specified directory. This operation is asynchronous and returns before the WorkSpace directory is deregistered. If any WorkSpaces are registered to this directory, you must remove them before you can deregister the directory.

     

    .. note::

       

      Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the `AWS Directory Services pricing terms <http://aws.amazon.com/directoryservice/pricing/>`__ .

       

      To delete empty directories, see `Delete the Directory for Your WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html>`__ . If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DeregisterWorkspaceDirectory>`_    


    **Request Syntax** 
    ::

      response = client.deregister_workspace_directory(
          DirectoryId='string'
      )
    :type DirectoryId: string
    :param DirectoryId: **[REQUIRED]** 

      The identifier of the directory. If any WorkSpaces are registered to this directory, you must remove them before you deregister the directory, or you will receive an OperationNotSupportedException error.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    

  .. py:method:: describe_account()

    

    Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for the specified account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeAccount>`_    


    **Request Syntax** 
    ::

      response = client.describe_account()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'DedicatedTenancySupport': 'ENABLED'|'DISABLED',
            'DedicatedTenancyManagementCidrRange': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **DedicatedTenancySupport** *(string) --* 

          The status of BYOL (whether BYOL is enabled or disabled).

          
        

        - **DedicatedTenancyManagementCidrRange** *(string) --* 

          The IP address range, specified as an IPv4 CIDR block, used for the management network interface.

           

          The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_account_modifications(**kwargs)

    

    Retrieves a list that describes modifications to the configuration of Bring Your Own License (BYOL) for the specified account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeAccountModifications>`_    


    **Request Syntax** 
    ::

      response = client.describe_account_modifications(
          NextToken='string'
      )
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AccountModifications': [
                {
                    'ModificationState': 'PENDING'|'COMPLETED'|'FAILED',
                    'DedicatedTenancySupport': 'ENABLED'|'DISABLED',
                    'DedicatedTenancyManagementCidrRange': 'string',
                    'StartTime': datetime(2015, 1, 1),
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AccountModifications** *(list) --* 

          The list of modifications to the configuration of BYOL.

          
          

          - *(dict) --* 

            Describes a modification to the configuration of Bring Your Own License (BYOL) for the specified account. 

            
            

            - **ModificationState** *(string) --* 

              The state of the modification to the configuration of BYOL.

              
            

            - **DedicatedTenancySupport** *(string) --* 

              The status of BYOL (whether BYOL is being enabled or disabled).

              
            

            - **DedicatedTenancyManagementCidrRange** *(string) --* 

              The IP address range, specified as an IPv4 CIDR block, for the management network interface used for the account.

              
            

            - **StartTime** *(datetime) --* 

              The timestamp when the modification of the BYOL configuration was started.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the configuration of BYOL cannot be modified.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the configuration of BYOL cannot be modified.

              
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_client_properties(**kwargs)

    

    Retrieves a list that describes one or more specified Amazon WorkSpaces clients.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeClientProperties>`_    


    **Request Syntax** 
    ::

      response = client.describe_client_properties(
          ResourceIds=[
              'string',
          ]
      )
    :type ResourceIds: list
    :param ResourceIds: **[REQUIRED]** 

      The resource identifier, in the form of directory IDs.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClientPropertiesList': [
                {
                    'ResourceId': 'string',
                    'ClientProperties': {
                        'ReconnectEnabled': 'ENABLED'|'DISABLED'
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ClientPropertiesList** *(list) --* 

          Information about the specified Amazon WorkSpaces clients.

          
          

          - *(dict) --* 

            Information about the Amazon WorkSpaces client.

            
            

            - **ResourceId** *(string) --* 

              The resource identifier, in the form of a directory ID.

              
            

            - **ClientProperties** *(dict) --* 

              Information about the Amazon WorkSpaces client.

              
              

              - **ReconnectEnabled** *(string) --* 

                Specifies whether users can cache their credentials on the Amazon WorkSpaces client. When enabled, users can choose to reconnect to their WorkSpaces without re-entering their credentials. 

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_connection_alias_permissions(**kwargs)

    

    Describes the permissions that the owner of a connection alias has granted to another AWS account for the specified connection alias. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeConnectionAliasPermissions>`_    


    **Request Syntax** 
    ::

      response = client.describe_connection_alias_permissions(
          AliasId='string',
          NextToken='string',
          MaxResults=123
      )
    :type AliasId: string
    :param AliasId: **[REQUIRED]** 

      The identifier of the connection alias.

      

    
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results. 

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AliasId': 'string',
            'ConnectionAliasPermissions': [
                {
                    'SharedAccountId': 'string',
                    'AllowAssociation': True|False
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AliasId** *(string) --* 

          The identifier of the connection alias.

          
        

        - **ConnectionAliasPermissions** *(list) --* 

          The permissions associated with a connection alias.

          
          

          - *(dict) --* 

            Describes the permissions for a connection alias. Connection aliases are used for cross-Region redirection. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

            
            

            - **SharedAccountId** *(string) --* 

              The identifier of the AWS account that the connection alias is shared with.

              
            

            - **AllowAssociation** *(boolean) --* 

              Indicates whether the specified AWS account is allowed to associate the connection alias with a directory.

              
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: describe_connection_aliases(**kwargs)

    

    Retrieves a list that describes the connection aliases used for cross-Region redirection. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeConnectionAliases>`_    


    **Request Syntax** 
    ::

      response = client.describe_connection_aliases(
          AliasIds=[
              'string',
          ],
          ResourceId='string',
          Limit=123,
          NextToken='string'
      )
    :type AliasIds: list
    :param AliasIds: 

      The identifiers of the connection aliases to describe.

      

    
      - *(string) --* 

      
  
    :type ResourceId: string
    :param ResourceId: 

      The identifier of the directory associated with the connection alias.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of connection aliases to return.

      

    
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectionAliases': [
                {
                    'ConnectionString': 'string',
                    'AliasId': 'string',
                    'State': 'CREATING'|'CREATED'|'DELETING',
                    'OwnerAccountId': 'string',
                    'Associations': [
                        {
                            'AssociationStatus': 'NOT_ASSOCIATED'|'ASSOCIATED_WITH_OWNER_ACCOUNT'|'ASSOCIATED_WITH_SHARED_ACCOUNT'|'PENDING_ASSOCIATION'|'PENDING_DISASSOCIATION',
                            'AssociatedAccountId': 'string',
                            'ResourceId': 'string',
                            'ConnectionIdentifier': 'string'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectionAliases** *(list) --* 

          Information about the specified connection aliases.

          
          

          - *(dict) --* 

            Describes a connection alias. Connection aliases are used for cross-Region redirection. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

            
            

            - **ConnectionString** *(string) --* 

              The connection string specified for the connection alias. The connection string must be in the form of a fully qualified domain name (FQDN), such as ``www.example.com`` .

              
            

            - **AliasId** *(string) --* 

              The identifier of the connection alias.

              
            

            - **State** *(string) --* 

              The current state of the connection alias.

              
            

            - **OwnerAccountId** *(string) --* 

              The identifier of the AWS account that owns the connection alias.

              
            

            - **Associations** *(list) --* 

              The association status of the connection alias.

              
              

              - *(dict) --* 

                Describes a connection alias association that is used for cross-Region redirection. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

                
                

                - **AssociationStatus** *(string) --* 

                  The association status of the connection alias.

                  
                

                - **AssociatedAccountId** *(string) --* 

                  The identifier of the AWS account that associated the connection alias with a directory.

                  
                

                - **ResourceId** *(string) --* 

                  The identifier of the directory associated with a connection alias.

                  
                

                - **ConnectionIdentifier** *(string) --* 

                  The identifier of the connection alias association. You use the connection identifier in the DNS TXT record when you're configuring your DNS routing policies.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: describe_ip_groups(**kwargs)

    

    Describes one or more of your IP access control groups.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeIpGroups>`_    


    **Request Syntax** 
    ::

      response = client.describe_ip_groups(
          GroupIds=[
              'string',
          ],
          NextToken='string',
          MaxResults=123
      )
    :type GroupIds: list
    :param GroupIds: 

      The identifiers of one or more IP access control groups.

      

    
      - *(string) --* 

      
  
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of items to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Result': [
                {
                    'groupId': 'string',
                    'groupName': 'string',
                    'groupDesc': 'string',
                    'userRules': [
                        {
                            'ipRule': 'string',
                            'ruleDesc': 'string'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Result** *(list) --* 

          Information about the IP access control groups.

          
          

          - *(dict) --* 

            Describes an IP access control group.

            
            

            - **groupId** *(string) --* 

              The identifier of the group.

              
            

            - **groupName** *(string) --* 

              The name of the group.

              
            

            - **groupDesc** *(string) --* 

              The description of the group.

              
            

            - **userRules** *(list) --* 

              The rules.

              
              

              - *(dict) --* 

                Describes a rule for an IP access control group.

                
                

                - **ipRule** *(string) --* 

                  The IP address range, in CIDR notation.

                  
                

                - **ruleDesc** *(string) --* 

                  The description.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_tags(**kwargs)

    

    Describes the specified tags for the specified WorkSpaces resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeTags>`_    


    **Request Syntax** 
    ::

      response = client.describe_tags(
          ResourceId='string'
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces, registered directories, images, custom bundles, IP access control groups, and connection aliases.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'TagList': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **TagList** *(list) --* 

          The tags.

          
          

          - *(dict) --* 

            Describes a tag.

            
            

            - **Key** *(string) --* 

              The key of the tag.

              
            

            - **Value** *(string) --* 

              The value of the tag.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_workspace_bundles(**kwargs)

    

    Retrieves a list that describes the available WorkSpace bundles.

     

    You can filter the results using either bundle ID or owner, but not both.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceBundles>`_    


    **Request Syntax** 
    ::

      response = client.describe_workspace_bundles(
          BundleIds=[
              'string',
          ],
          Owner='string',
          NextToken='string'
      )
    :type BundleIds: list
    :param BundleIds: 

      The identifiers of the bundles. You cannot combine this parameter with any other filter.

      

    
      - *(string) --* 

      
  
    :type Owner: string
    :param Owner: 

      The owner of the bundles. You cannot combine this parameter with any other filter.

       

      To describe the bundles provided by AWS, specify ``AMAZON`` . To describe the bundles that belong to your account, don't specify a value.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. (You received this token from a previous call.)

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Bundles': [
                {
                    'BundleId': 'string',
                    'Name': 'string',
                    'Owner': 'string',
                    'Description': 'string',
                    'ImageId': 'string',
                    'RootStorage': {
                        'Capacity': 'string'
                    },
                    'UserStorage': {
                        'Capacity': 'string'
                    },
                    'ComputeType': {
                        'Name': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                    },
                    'LastUpdatedTime': datetime(2015, 1, 1),
                    'CreationTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Bundles** *(list) --* 

          Information about the bundles.

          
          

          - *(dict) --* 

            Describes a WorkSpace bundle.

            
            

            - **BundleId** *(string) --* 

              The identifier of the bundle.

              
            

            - **Name** *(string) --* 

              The name of the bundle.

              
            

            - **Owner** *(string) --* 

              The owner of the bundle. This is the account identifier of the owner, or ``AMAZON`` if the bundle is provided by AWS.

              
            

            - **Description** *(string) --* 

              The description of the bundle.

              
            

            - **ImageId** *(string) --* 

              The identifier of the image that was used to create the bundle.

              
            

            - **RootStorage** *(dict) --* 

              The size of the root volume.

              
              

              - **Capacity** *(string) --* 

                The size of the root volume.

                
          
            

            - **UserStorage** *(dict) --* 

              The size of the user volume.

              
              

              - **Capacity** *(string) --* 

                The size of the user volume.

                
          
            

            - **ComputeType** *(dict) --* 

              The compute type of the bundle. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

              
              

              - **Name** *(string) --* 

                The compute type.

                
          
            

            - **LastUpdatedTime** *(datetime) --* 

              The last time that the bundle was updated.

              
            

            - **CreationTime** *(datetime) --* 

              The time when the bundle was created.

              
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. This token is valid for one day and must be used within that time frame.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: describe_workspace_directories(**kwargs)

    

    Describes the available directories that are registered with Amazon WorkSpaces.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceDirectories>`_    


    **Request Syntax** 
    ::

      response = client.describe_workspace_directories(
          DirectoryIds=[
              'string',
          ],
          Limit=123,
          NextToken='string'
      )
    :type DirectoryIds: list
    :param DirectoryIds: 

      The identifiers of the directories. If the value is null, all directories are retrieved.

      

    
      - *(string) --* 

      
  
    :type Limit: integer
    :param Limit: 

      The maximum number of directories to return.

      

    
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Directories': [
                {
                    'DirectoryId': 'string',
                    'Alias': 'string',
                    'DirectoryName': 'string',
                    'RegistrationCode': 'string',
                    'SubnetIds': [
                        'string',
                    ],
                    'DnsIpAddresses': [
                        'string',
                    ],
                    'CustomerUserName': 'string',
                    'IamRoleId': 'string',
                    'DirectoryType': 'SIMPLE_AD'|'AD_CONNECTOR',
                    'WorkspaceSecurityGroupId': 'string',
                    'State': 'REGISTERING'|'REGISTERED'|'DEREGISTERING'|'DEREGISTERED'|'ERROR',
                    'WorkspaceCreationProperties': {
                        'EnableWorkDocs': True|False,
                        'EnableInternetAccess': True|False,
                        'DefaultOu': 'string',
                        'CustomSecurityGroupId': 'string',
                        'UserEnabledAsLocalAdministrator': True|False,
                        'EnableMaintenanceMode': True|False
                    },
                    'ipGroupIds': [
                        'string',
                    ],
                    'WorkspaceAccessProperties': {
                        'DeviceTypeWindows': 'ALLOW'|'DENY',
                        'DeviceTypeOsx': 'ALLOW'|'DENY',
                        'DeviceTypeWeb': 'ALLOW'|'DENY',
                        'DeviceTypeIos': 'ALLOW'|'DENY',
                        'DeviceTypeAndroid': 'ALLOW'|'DENY',
                        'DeviceTypeChromeOs': 'ALLOW'|'DENY',
                        'DeviceTypeZeroClient': 'ALLOW'|'DENY',
                        'DeviceTypeLinux': 'ALLOW'|'DENY'
                    },
                    'Tenancy': 'DEDICATED'|'SHARED',
                    'SelfservicePermissions': {
                        'RestartWorkspace': 'ENABLED'|'DISABLED',
                        'IncreaseVolumeSize': 'ENABLED'|'DISABLED',
                        'ChangeComputeType': 'ENABLED'|'DISABLED',
                        'SwitchRunningMode': 'ENABLED'|'DISABLED',
                        'RebuildWorkspace': 'ENABLED'|'DISABLED'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Directories** *(list) --* 

          Information about the directories.

          
          

          - *(dict) --* 

            Describes a directory that is used with Amazon WorkSpaces.

            
            

            - **DirectoryId** *(string) --* 

              The directory identifier.

              
            

            - **Alias** *(string) --* 

              The directory alias.

              
            

            - **DirectoryName** *(string) --* 

              The name of the directory.

              
            

            - **RegistrationCode** *(string) --* 

              The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.

              
            

            - **SubnetIds** *(list) --* 

              The identifiers of the subnets used with the directory.

              
              

              - *(string) --* 
          
            

            - **DnsIpAddresses** *(list) --* 

              The IP addresses of the DNS servers for the directory.

              
              

              - *(string) --* 
          
            

            - **CustomerUserName** *(string) --* 

              The user name for the service account.

              
            

            - **IamRoleId** *(string) --* 

              The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.

              
            

            - **DirectoryType** *(string) --* 

              The directory type.

              
            

            - **WorkspaceSecurityGroupId** *(string) --* 

              The identifier of the security group that is assigned to new WorkSpaces.

              
            

            - **State** *(string) --* 

              The state of the directory's registration with Amazon WorkSpaces. After a directory is deregistered, the ``DEREGISTERED`` state is returned very briefly before the directory metadata is cleaned up, so this state is rarely returned. To confirm that a directory is deregistered, check for the directory ID by using `DescribeWorkspaceDirectories <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceDirectories.html>`__ . If the directory ID isn't returned, then the directory has been successfully deregistered.

              
            

            - **WorkspaceCreationProperties** *(dict) --* 

              The default creation properties for all WorkSpaces in the directory.

              
              

              - **EnableWorkDocs** *(boolean) --* 

                Specifies whether the directory is enabled for Amazon WorkDocs.

                
              

              - **EnableInternetAccess** *(boolean) --* 

                Specifies whether to automatically assign an Elastic public IP address to WorkSpaces in this directory by default. If enabled, the Elastic public IP address allows outbound internet access from your WorkSpaces when you’re using an internet gateway in the Amazon VPC in which your WorkSpaces are located. If you're using a Network Address Translation (NAT) gateway for outbound internet access from your VPC, or if your WorkSpaces are in public subnets and you manually assign them Elastic IP addresses, you should disable this setting. This setting applies to new WorkSpaces that you launch or to existing WorkSpaces that you rebuild. For more information, see `Configure a VPC for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces-vpc.html>`__ .

                
              

              - **DefaultOu** *(string) --* 

                The organizational unit (OU) in the directory for the WorkSpace machine accounts.

                
              

              - **CustomSecurityGroupId** *(string) --* 

                The identifier of the default security group to apply to WorkSpaces when they are created. For more information, see `Security Groups for Your WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces-security-groups.html>`__ .

                
              

              - **UserEnabledAsLocalAdministrator** *(boolean) --* 

                Specifies whether WorkSpace users are local administrators on their WorkSpaces.

                
              

              - **EnableMaintenanceMode** *(boolean) --* 

                Specifies whether maintenance mode is enabled for WorkSpaces. For more information, see `WorkSpace Maintenance <https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html>`__ .

                
          
            

            - **ipGroupIds** *(list) --* 

              The identifiers of the IP access control groups associated with the directory.

              
              

              - *(string) --* 
          
            

            - **WorkspaceAccessProperties** *(dict) --* 

              The devices and operating systems that users can use to access WorkSpaces.

              
              

              - **DeviceTypeWindows** *(string) --* 

                Indicates whether users can use Windows clients to access their WorkSpaces. To restrict WorkSpaces access to trusted devices (also known as managed devices) with valid certificates, specify a value of ``TRUST`` . For more information, see `Restrict WorkSpaces Access to Trusted Devices <https://docs.aws.amazon.com/workspaces/latest/adminguide/trusted-devices.html>`__ . 

                
              

              - **DeviceTypeOsx** *(string) --* 

                Indicates whether users can use macOS clients to access their WorkSpaces. To restrict WorkSpaces access to trusted devices (also known as managed devices) with valid certificates, specify a value of ``TRUST`` . For more information, see `Restrict WorkSpaces Access to Trusted Devices <https://docs.aws.amazon.com/workspaces/latest/adminguide/trusted-devices.html>`__ . 

                
              

              - **DeviceTypeWeb** *(string) --* 

                Indicates whether users can access their WorkSpaces through a web browser.

                
              

              - **DeviceTypeIos** *(string) --* 

                Indicates whether users can use iOS devices to access their WorkSpaces.

                
              

              - **DeviceTypeAndroid** *(string) --* 

                Indicates whether users can use Android devices to access their WorkSpaces.

                
              

              - **DeviceTypeChromeOs** *(string) --* 

                Indicates whether users can use Chromebooks to access their WorkSpaces.

                
              

              - **DeviceTypeZeroClient** *(string) --* 

                Indicates whether users can use zero client devices to access their WorkSpaces.

                
              

              - **DeviceTypeLinux** *(string) --* 

                Indicates whether users can use Linux clients to access their WorkSpaces.

                
          
            

            - **Tenancy** *(string) --* 

              Specifies whether the directory is dedicated or shared. To use Bring Your Own License (BYOL), this value must be set to ``DEDICATED`` . For more information, see `Bring Your Own Windows Desktop Images <https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html>`__ .

              
            

            - **SelfservicePermissions** *(dict) --* 

              The default self-service permissions for WorkSpaces in the directory.

              
              

              - **RestartWorkspace** *(string) --* 

                Specifies whether users can restart their WorkSpace.

                
              

              - **IncreaseVolumeSize** *(string) --* 

                Specifies whether users can increase the volume size of the drives on their WorkSpace.

                
              

              - **ChangeComputeType** *(string) --* 

                Specifies whether users can change the compute type (bundle) for their WorkSpace.

                
              

              - **SwitchRunningMode** *(string) --* 

                Specifies whether users can switch the running mode of their WorkSpace.

                
              

              - **RebuildWorkspace** *(string) --* 

                Specifies whether users can rebuild the operating system of a WorkSpace to its original state.

                
          
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: describe_workspace_image_permissions(**kwargs)

    

    Describes the permissions that the owner of an image has granted to other AWS accounts for an image.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceImagePermissions>`_    


    **Request Syntax** 
    ::

      response = client.describe_workspace_image_permissions(
          ImageId='string',
          NextToken='string',
          MaxResults=123
      )
    :type ImageId: string
    :param ImageId: **[REQUIRED]** 

      The identifier of the image.

      

    
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of items to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ImageId': 'string',
            'ImagePermissions': [
                {
                    'SharedAccountId': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ImageId** *(string) --* 

          The identifier of the image.

          
        

        - **ImagePermissions** *(list) --* 

          The identifiers of the AWS accounts that the image has been shared with.

          
          

          - *(dict) --* 

            Describes the AWS accounts that have been granted permission to use a shared image. For more information about sharing images, see `Share or Unshare a Custom WorkSpaces Image <https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html>`__ .

            
            

            - **SharedAccountId** *(string) --* 

              The identifier of the AWS account that an image has been shared with.

              
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: describe_workspace_images(**kwargs)

    

    Retrieves a list that describes one or more specified images, if the image identifiers are provided. Otherwise, all images in the account are described. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceImages>`_    


    **Request Syntax** 
    ::

      response = client.describe_workspace_images(
          ImageIds=[
              'string',
          ],
          ImageType='OWNED'|'SHARED',
          NextToken='string',
          MaxResults=123
      )
    :type ImageIds: list
    :param ImageIds: 

      The identifier of the image.

      

    
      - *(string) --* 

      
  
    :type ImageType: string
    :param ImageType: 

      The type (owned or shared) of the image.

      

    
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of items to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Images': [
                {
                    'ImageId': 'string',
                    'Name': 'string',
                    'Description': 'string',
                    'OperatingSystem': {
                        'Type': 'WINDOWS'|'LINUX'
                    },
                    'State': 'AVAILABLE'|'PENDING'|'ERROR',
                    'RequiredTenancy': 'DEFAULT'|'DEDICATED',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string',
                    'Created': datetime(2015, 1, 1),
                    'OwnerAccountId': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Images** *(list) --* 

          Information about the images.

          
          

          - *(dict) --* 

            Describes a WorkSpace image.

            
            

            - **ImageId** *(string) --* 

              The identifier of the image.

              
            

            - **Name** *(string) --* 

              The name of the image.

              
            

            - **Description** *(string) --* 

              The description of the image.

              
            

            - **OperatingSystem** *(dict) --* 

              The operating system that the image is running. 

              
              

              - **Type** *(string) --* 

                The operating system.

                
          
            

            - **State** *(string) --* 

              The status of the image.

              
            

            - **RequiredTenancy** *(string) --* 

              Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to ``DEDICATED`` . For more information, see `Bring Your Own Windows Desktop Images <https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html>`__ .

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned for the image.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned for the image.

              
            

            - **Created** *(datetime) --* 

              The date when the image was created. If the image has been shared, the AWS account that the image has been shared with sees the original creation date of the image.

              
            

            - **OwnerAccountId** *(string) --* 

              The identifier of the AWS account that owns the image.

              
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_workspace_snapshots(**kwargs)

    

    Describes the snapshots for the specified WorkSpace.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceSnapshots>`_    


    **Request Syntax** 
    ::

      response = client.describe_workspace_snapshots(
          WorkspaceId='string'
      )
    :type WorkspaceId: string
    :param WorkspaceId: **[REQUIRED]** 

      The identifier of the WorkSpace.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RebuildSnapshots': [
                {
                    'SnapshotTime': datetime(2015, 1, 1)
                },
            ],
            'RestoreSnapshots': [
                {
                    'SnapshotTime': datetime(2015, 1, 1)
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RebuildSnapshots** *(list) --* 

          Information about the snapshots that can be used to rebuild a WorkSpace. These snapshots include the user volume.

          
          

          - *(dict) --* 

            Describes a snapshot.

            
            

            - **SnapshotTime** *(datetime) --* 

              The time when the snapshot was created.

              
        
      
        

        - **RestoreSnapshots** *(list) --* 

          Information about the snapshots that can be used to restore a WorkSpace. These snapshots include both the root volume and the user volume.

          
          

          - *(dict) --* 

            Describes a snapshot.

            
            

            - **SnapshotTime** *(datetime) --* 

              The time when the snapshot was created.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_workspaces(**kwargs)

    

    Describes the specified WorkSpaces.

     

    You can filter the results by using the bundle identifier, directory identifier, or owner, but you can specify only one filter at a time.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaces>`_    


    **Request Syntax** 
    ::

      response = client.describe_workspaces(
          WorkspaceIds=[
              'string',
          ],
          DirectoryId='string',
          UserName='string',
          BundleId='string',
          Limit=123,
          NextToken='string'
      )
    :type WorkspaceIds: list
    :param WorkspaceIds: 

      The identifiers of the WorkSpaces. You cannot combine this parameter with any other filter.

       

      Because the  CreateWorkspaces operation is asynchronous, the identifier it returns is not immediately available. If you immediately call  DescribeWorkspaces with this identifier, no information is returned.

      

    
      - *(string) --* 

      
  
    :type DirectoryId: string
    :param DirectoryId: 

      The identifier of the directory. In addition, you can optionally specify a specific directory user (see ``UserName`` ). You cannot combine this parameter with any other filter.

      

    
    :type UserName: string
    :param UserName: 

      The name of the directory user. You must specify this parameter with ``DirectoryId`` .

      

    
    :type BundleId: string
    :param BundleId: 

      The identifier of the bundle. All WorkSpaces that are created from this bundle are retrieved. You cannot combine this parameter with any other filter.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of items to return.

      

    
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Workspaces': [
                {
                    'WorkspaceId': 'string',
                    'DirectoryId': 'string',
                    'UserName': 'string',
                    'IpAddress': 'string',
                    'State': 'PENDING'|'AVAILABLE'|'IMPAIRED'|'UNHEALTHY'|'REBOOTING'|'STARTING'|'REBUILDING'|'RESTORING'|'MAINTENANCE'|'ADMIN_MAINTENANCE'|'TERMINATING'|'TERMINATED'|'SUSPENDED'|'UPDATING'|'STOPPING'|'STOPPED'|'ERROR',
                    'BundleId': 'string',
                    'SubnetId': 'string',
                    'ErrorMessage': 'string',
                    'ErrorCode': 'string',
                    'ComputerName': 'string',
                    'VolumeEncryptionKey': 'string',
                    'UserVolumeEncryptionEnabled': True|False,
                    'RootVolumeEncryptionEnabled': True|False,
                    'WorkspaceProperties': {
                        'RunningMode': 'AUTO_STOP'|'ALWAYS_ON',
                        'RunningModeAutoStopTimeoutInMinutes': 123,
                        'RootVolumeSizeGib': 123,
                        'UserVolumeSizeGib': 123,
                        'ComputeTypeName': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                    },
                    'ModificationStates': [
                        {
                            'Resource': 'ROOT_VOLUME'|'USER_VOLUME'|'COMPUTE_TYPE',
                            'State': 'UPDATE_INITIATED'|'UPDATE_IN_PROGRESS'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Workspaces** *(list) --* 

          Information about the WorkSpaces.

           

          Because  CreateWorkspaces is an asynchronous operation, some of the returned information could be incomplete.

          
          

          - *(dict) --* 

            Describes a WorkSpace.

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **DirectoryId** *(string) --* 

              The identifier of the AWS Directory Service directory for the WorkSpace.

              
            

            - **UserName** *(string) --* 

              The user for the WorkSpace.

              
            

            - **IpAddress** *(string) --* 

              The IP address of the WorkSpace.

              
            

            - **State** *(string) --* 

              The operational state of the WorkSpace.

               

              .. note::

                 

                After a WorkSpace is terminated, the ``TERMINATED`` state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using `DescribeWorkSpaces <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html>`__ . If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.

                 

              
            

            - **BundleId** *(string) --* 

              The identifier of the bundle used to create the WorkSpace.

              
            

            - **SubnetId** *(string) --* 

              The identifier of the subnet for the WorkSpace.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be created.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be created.

              
            

            - **ComputerName** *(string) --* 

              The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see `Launch a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html>`__ . 

              
            

            - **VolumeEncryptionKey** *(string) --* 

              The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.

              
            

            - **UserVolumeEncryptionEnabled** *(boolean) --* 

              Indicates whether the data stored on the user volume is encrypted.

              
            

            - **RootVolumeEncryptionEnabled** *(boolean) --* 

              Indicates whether the data stored on the root volume is encrypted.

              
            

            - **WorkspaceProperties** *(dict) --* 

              The properties of the WorkSpace.

              
              

              - **RunningMode** *(string) --* 

                The running mode. For more information, see `Manage the WorkSpace Running Mode <https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html>`__ .

                
              

              - **RunningModeAutoStopTimeoutInMinutes** *(integer) --* 

                The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.

                
              

              - **RootVolumeSizeGib** *(integer) --* 

                The size of the root volume. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                
              

              - **UserVolumeSizeGib** *(integer) --* 

                The size of the user storage. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                
              

              - **ComputeTypeName** *(string) --* 

                The compute type. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

                
          
            

            - **ModificationStates** *(list) --* 

              The modification states of the WorkSpace.

              
              

              - *(dict) --* 

                Describes a WorkSpace modification.

                
                

                - **Resource** *(string) --* 

                  The resource.

                  
                

                - **State** *(string) --* 

                  The modification state.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    

  .. py:method:: describe_workspaces_connection_status(**kwargs)

    

    Describes the connection status of the specified WorkSpaces.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspacesConnectionStatus>`_    


    **Request Syntax** 
    ::

      response = client.describe_workspaces_connection_status(
          WorkspaceIds=[
              'string',
          ],
          NextToken='string'
      )
    :type WorkspaceIds: list
    :param WorkspaceIds: 

      The identifiers of the WorkSpaces. You can specify up to 25 WorkSpaces.

      

    
      - *(string) --* 

      
  
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WorkspacesConnectionStatus': [
                {
                    'WorkspaceId': 'string',
                    'ConnectionState': 'CONNECTED'|'DISCONNECTED'|'UNKNOWN',
                    'ConnectionStateCheckTimestamp': datetime(2015, 1, 1),
                    'LastKnownUserConnectionTimestamp': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WorkspacesConnectionStatus** *(list) --* 

          Information about the connection status of the WorkSpace.

          
          

          - *(dict) --* 

            Describes the connection status of a WorkSpace.

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **ConnectionState** *(string) --* 

              The connection state of the WorkSpace. The connection state is unknown if the WorkSpace is stopped.

              
            

            - **ConnectionStateCheckTimestamp** *(datetime) --* 

              The timestamp of the connection status check.

              
            

            - **LastKnownUserConnectionTimestamp** *(datetime) --* 

              The timestamp of the last known user connection.

              
        
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: disassociate_connection_alias(**kwargs)

    

    Disassociates a connection alias from a directory. Disassociating a connection alias disables cross-Region redirection between two directories in different AWS Regions. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

     

    .. note::

       

      Before performing this operation, call `DescribeConnectionAliases <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html>`__ to make sure that the current state of the connection alias is ``CREATED`` .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DisassociateConnectionAlias>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_connection_alias(
          AliasId='string'
      )
    :type AliasId: string
    :param AliasId: **[REQUIRED]** 

      The identifier of the connection alias to disassociate.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: disassociate_ip_groups(**kwargs)

    

    Disassociates the specified IP access control group from the specified directory.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DisassociateIpGroups>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_ip_groups(
          DirectoryId='string',
          GroupIds=[
              'string',
          ]
      )
    :type DirectoryId: string
    :param DirectoryId: **[REQUIRED]** 

      The identifier of the directory.

      

    
    :type GroupIds: list
    :param GroupIds: **[REQUIRED]** 

      The identifiers of one or more IP access control groups.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: import_workspace_image(**kwargs)

    

    Imports the specified Windows 10 Bring Your Own License (BYOL) image into Amazon WorkSpaces. The image must be an already licensed Amazon EC2 image that is in your AWS account, and you must own the image. For more information about creating BYOL images, see `Bring Your Own Windows Desktop Licenses <https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ImportWorkspaceImage>`_    


    **Request Syntax** 
    ::

      response = client.import_workspace_image(
          Ec2ImageId='string',
          IngestionProcess='BYOL_REGULAR'|'BYOL_GRAPHICS'|'BYOL_GRAPHICSPRO'|'BYOL_REGULAR_WSP',
          ImageName='string',
          ImageDescription='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          Applications=[
              'Microsoft_Office_2016'|'Microsoft_Office_2019',
          ]
      )
    :type Ec2ImageId: string
    :param Ec2ImageId: **[REQUIRED]** 

      The identifier of the EC2 image.

      

    
    :type IngestionProcess: string
    :param IngestionProcess: **[REQUIRED]** 

      The ingestion process to be used when importing the image, depending on which protocol you want to use for your BYOL Workspace image, either PCoIP or WorkSpaces Streaming Protocol (WSP). To use WSP, specify a value that ends in ``_WSP`` . To use PCoIP, specify a value that does not end in ``_WSP`` . 

       

      For non-GPU-enabled bundles (bundles other than Graphics or GraphicsPro), specify ``BYOL_REGULAR`` or ``BYOL_REGULAR_WSP`` , depending on the protocol.

      

    
    :type ImageName: string
    :param ImageName: **[REQUIRED]** 

      The name of the WorkSpace image.

      

    
    :type ImageDescription: string
    :param ImageDescription: **[REQUIRED]** 

      The description of the WorkSpace image.

      

    
    :type Tags: list
    :param Tags: 

      The tags. Each WorkSpaces resource can have a maximum of 50 tags.

      

    
      - *(dict) --* 

        Describes a tag.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key of the tag.

          

        
        - **Value** *(string) --* 

          The value of the tag.

          

        
      
  
    :type Applications: list
    :param Applications: 

      If specified, the version of Microsoft Office to subscribe to. Valid only for Windows 10 BYOL images. For more information about subscribing to Office for BYOL images, see `Bring Your Own Windows Desktop Licenses <https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html>`__ .

       

      .. note::

         

        Although this parameter is an array, only one item is allowed at this time.

         

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ImageId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ImageId** *(string) --* 

          The identifier of the WorkSpace image.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    

  .. py:method:: list_available_management_cidr_ranges(**kwargs)

    

    Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use for the network management interface when you enable Bring Your Own License (BYOL). 

     

    This operation can be run only by AWS accounts that are enabled for BYOL. If your account isn't enabled for BYOL, you'll receive an ``AccessDeniedException`` error.

     

    The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ListAvailableManagementCidrRanges>`_    


    **Request Syntax** 
    ::

      response = client.list_available_management_cidr_ranges(
          ManagementCidrRangeConstraint='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ManagementCidrRangeConstraint: string
    :param ManagementCidrRangeConstraint: **[REQUIRED]** 

      The IP address range to search. Specify an IP address range that is compatible with your network and in CIDR notation (that is, specify the range as an IPv4 CIDR block).

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of items to return.

      

    
    :type NextToken: string
    :param NextToken: 

      If you received a ``NextToken`` from a previous call that was paginated, provide this token to receive the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ManagementCidrRanges': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ManagementCidrRanges** *(list) --* 

          The list of available IP address ranges, specified as IPv4 CIDR blocks.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          The token to use to retrieve the next page of results. This value is null when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: migrate_workspace(**kwargs)

    

    Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume.

     

    The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original ``D:\Users\%USERNAME%`` user profile folder is renamed to ``D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated`` . A new ``D:\Users\%USERNAME%\`` folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile.

     

    For available migration scenarios, details about what happens during migration, and best practices, see `Migrate a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/MigrateWorkspace>`_    


    **Request Syntax** 
    ::

      response = client.migrate_workspace(
          SourceWorkspaceId='string',
          BundleId='string'
      )
    :type SourceWorkspaceId: string
    :param SourceWorkspaceId: **[REQUIRED]** 

      The identifier of the WorkSpace to migrate from.

      

    
    :type BundleId: string
    :param BundleId: **[REQUIRED]** 

      The identifier of the target bundle type to migrate the WorkSpace to.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SourceWorkspaceId': 'string',
            'TargetWorkspaceId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **SourceWorkspaceId** *(string) --* 

          The original identifier of the WorkSpace that is being migrated.

          
        

        - **TargetWorkspaceId** *(string) --* 

          The new identifier of the WorkSpace that is being migrated. If the migration does not succeed, the target WorkSpace ID will not be used, and the WorkSpace will still have the original WorkSpace ID.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationInProgressException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    

  .. py:method:: modify_account(**kwargs)

    

    Modifies the configuration of Bring Your Own License (BYOL) for the specified account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ModifyAccount>`_    


    **Request Syntax** 
    ::

      response = client.modify_account(
          DedicatedTenancySupport='ENABLED',
          DedicatedTenancyManagementCidrRange='string'
      )
    :type DedicatedTenancySupport: string
    :param DedicatedTenancySupport: 

      The status of BYOL.

      

    
    :type DedicatedTenancyManagementCidrRange: string
    :param DedicatedTenancyManagementCidrRange: 

      The IP address range, specified as an IPv4 CIDR block, for the management network interface. Specify an IP address range that is compatible with your network and in CIDR notation (that is, specify the range as an IPv4 CIDR block). The CIDR block size must be /16 (for example, 203.0.113.25/16). It must also be specified as available by the ``ListAvailableManagementCidrRanges`` operation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: modify_client_properties(**kwargs)

    

    Modifies the properties of the specified Amazon WorkSpaces clients.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ModifyClientProperties>`_    


    **Request Syntax** 
    ::

      response = client.modify_client_properties(
          ResourceId='string',
          ClientProperties={
              'ReconnectEnabled': 'ENABLED'|'DISABLED'
          }
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The resource identifiers, in the form of directory IDs.

      

    
    :type ClientProperties: dict
    :param ClientProperties: **[REQUIRED]** 

      Information about the Amazon WorkSpaces client.

      

    
      - **ReconnectEnabled** *(string) --* 

        Specifies whether users can cache their credentials on the Amazon WorkSpaces client. When enabled, users can choose to reconnect to their WorkSpaces without re-entering their credentials. 

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: modify_selfservice_permissions(**kwargs)

    

    Modifies the self-service WorkSpace management capabilities for your users. For more information, see `Enable Self-Service WorkSpace Management Capabilities for Your Users <https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ModifySelfservicePermissions>`_    


    **Request Syntax** 
    ::

      response = client.modify_selfservice_permissions(
          ResourceId='string',
          SelfservicePermissions={
              'RestartWorkspace': 'ENABLED'|'DISABLED',
              'IncreaseVolumeSize': 'ENABLED'|'DISABLED',
              'ChangeComputeType': 'ENABLED'|'DISABLED',
              'SwitchRunningMode': 'ENABLED'|'DISABLED',
              'RebuildWorkspace': 'ENABLED'|'DISABLED'
          }
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The identifier of the directory.

      

    
    :type SelfservicePermissions: dict
    :param SelfservicePermissions: **[REQUIRED]** 

      The permissions to enable or disable self-service capabilities.

      

    
      - **RestartWorkspace** *(string) --* 

        Specifies whether users can restart their WorkSpace.

        

      
      - **IncreaseVolumeSize** *(string) --* 

        Specifies whether users can increase the volume size of the drives on their WorkSpace.

        

      
      - **ChangeComputeType** *(string) --* 

        Specifies whether users can change the compute type (bundle) for their WorkSpace.

        

      
      - **SwitchRunningMode** *(string) --* 

        Specifies whether users can switch the running mode of their WorkSpace.

        

      
      - **RebuildWorkspace** *(string) --* 

        Specifies whether users can rebuild the operating system of a WorkSpace to its original state.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: modify_workspace_access_properties(**kwargs)

    

    Specifies which devices and operating systems users can use to access their WorkSpaces. For more information, see `Control Device Access <https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html#control-device-access>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ModifyWorkspaceAccessProperties>`_    


    **Request Syntax** 
    ::

      response = client.modify_workspace_access_properties(
          ResourceId='string',
          WorkspaceAccessProperties={
              'DeviceTypeWindows': 'ALLOW'|'DENY',
              'DeviceTypeOsx': 'ALLOW'|'DENY',
              'DeviceTypeWeb': 'ALLOW'|'DENY',
              'DeviceTypeIos': 'ALLOW'|'DENY',
              'DeviceTypeAndroid': 'ALLOW'|'DENY',
              'DeviceTypeChromeOs': 'ALLOW'|'DENY',
              'DeviceTypeZeroClient': 'ALLOW'|'DENY',
              'DeviceTypeLinux': 'ALLOW'|'DENY'
          }
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The identifier of the directory.

      

    
    :type WorkspaceAccessProperties: dict
    :param WorkspaceAccessProperties: **[REQUIRED]** 

      The device types and operating systems to enable or disable for access.

      

    
      - **DeviceTypeWindows** *(string) --* 

        Indicates whether users can use Windows clients to access their WorkSpaces. To restrict WorkSpaces access to trusted devices (also known as managed devices) with valid certificates, specify a value of ``TRUST`` . For more information, see `Restrict WorkSpaces Access to Trusted Devices <https://docs.aws.amazon.com/workspaces/latest/adminguide/trusted-devices.html>`__ . 

        

      
      - **DeviceTypeOsx** *(string) --* 

        Indicates whether users can use macOS clients to access their WorkSpaces. To restrict WorkSpaces access to trusted devices (also known as managed devices) with valid certificates, specify a value of ``TRUST`` . For more information, see `Restrict WorkSpaces Access to Trusted Devices <https://docs.aws.amazon.com/workspaces/latest/adminguide/trusted-devices.html>`__ . 

        

      
      - **DeviceTypeWeb** *(string) --* 

        Indicates whether users can access their WorkSpaces through a web browser.

        

      
      - **DeviceTypeIos** *(string) --* 

        Indicates whether users can use iOS devices to access their WorkSpaces.

        

      
      - **DeviceTypeAndroid** *(string) --* 

        Indicates whether users can use Android devices to access their WorkSpaces.

        

      
      - **DeviceTypeChromeOs** *(string) --* 

        Indicates whether users can use Chromebooks to access their WorkSpaces.

        

      
      - **DeviceTypeZeroClient** *(string) --* 

        Indicates whether users can use zero client devices to access their WorkSpaces.

        

      
      - **DeviceTypeLinux** *(string) --* 

        Indicates whether users can use Linux clients to access their WorkSpaces.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: modify_workspace_creation_properties(**kwargs)

    

    Modify the default properties used to create WorkSpaces.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ModifyWorkspaceCreationProperties>`_    


    **Request Syntax** 
    ::

      response = client.modify_workspace_creation_properties(
          ResourceId='string',
          WorkspaceCreationProperties={
              'EnableWorkDocs': True|False,
              'EnableInternetAccess': True|False,
              'DefaultOu': 'string',
              'CustomSecurityGroupId': 'string',
              'UserEnabledAsLocalAdministrator': True|False,
              'EnableMaintenanceMode': True|False
          }
      )
    :type ResourceId: string
    :param ResourceId: **[REQUIRED]** 

      The identifier of the directory.

      

    
    :type WorkspaceCreationProperties: dict
    :param WorkspaceCreationProperties: **[REQUIRED]** 

      The default properties for creating WorkSpaces.

      

    
      - **EnableWorkDocs** *(boolean) --* 

        Indicates whether Amazon WorkDocs is enabled for your WorkSpaces.

         

        .. note::

           

          If WorkDocs is already enabled for a WorkSpaces directory and you disable it, new WorkSpaces launched in the directory will not have WorkDocs enabled. However, WorkDocs remains enabled for any existing WorkSpaces, unless you either disable users' access to WorkDocs or you delete the WorkDocs site. To disable users' access to WorkDocs, see `Disabling Users <https://docs.aws.amazon.com/workdocs/latest/adminguide/inactive-user.html>`__ in the *Amazon WorkDocs Administration Guide* . To delete a WorkDocs site, see `Deleting a Site <https://docs.aws.amazon.com/workdocs/latest/adminguide/manage-sites.html>`__ in the *Amazon WorkDocs Administration Guide* .

           

          If you enable WorkDocs on a directory that already has existing WorkSpaces, the existing WorkSpaces and any new WorkSpaces that are launched in the directory will have WorkDocs enabled.

           

        

      
      - **EnableInternetAccess** *(boolean) --* 

        Indicates whether internet access is enabled for your WorkSpaces.

        

      
      - **DefaultOu** *(string) --* 

        The default organizational unit (OU) for your WorkSpaces directories. This string must be the full Lightweight Directory Access Protocol (LDAP) distinguished name for the target domain and OU. It must be in the form ``"OU=*value* ,DC=*value* ,DC=*value* "`` , where *value* is any string of characters, and the number of domain components (DCs) is two or more. For example, ``OU=WorkSpaces_machines,DC=machines,DC=example,DC=com`` . 

         

        .. warning::

           

           
          * To avoid errors, certain characters in the distinguished name must be escaped. For more information, see `Distinguished Names <https://docs.microsoft.com/previous-versions/windows/desktop/ldap/distinguished-names>`__ in the Microsoft documentation. 
           
          * The API doesn't validate whether the OU exists. 
           

           

        

      
      - **CustomSecurityGroupId** *(string) --* 

        The identifier of your custom security group.

        

      
      - **UserEnabledAsLocalAdministrator** *(boolean) --* 

        Indicates whether users are local administrators of their WorkSpaces.

        

      
      - **EnableMaintenanceMode** *(boolean) --* 

        Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see `WorkSpace Maintenance <https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html>`__ . 

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: modify_workspace_properties(**kwargs)

    

    Modifies the specified WorkSpace properties. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ModifyWorkspaceProperties>`_    


    **Request Syntax** 
    ::

      response = client.modify_workspace_properties(
          WorkspaceId='string',
          WorkspaceProperties={
              'RunningMode': 'AUTO_STOP'|'ALWAYS_ON',
              'RunningModeAutoStopTimeoutInMinutes': 123,
              'RootVolumeSizeGib': 123,
              'UserVolumeSizeGib': 123,
              'ComputeTypeName': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
          }
      )
    :type WorkspaceId: string
    :param WorkspaceId: **[REQUIRED]** 

      The identifier of the WorkSpace.

      

    
    :type WorkspaceProperties: dict
    :param WorkspaceProperties: **[REQUIRED]** 

      The properties of the WorkSpace.

      

    
      - **RunningMode** *(string) --* 

        The running mode. For more information, see `Manage the WorkSpace Running Mode <https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html>`__ .

        

      
      - **RunningModeAutoStopTimeoutInMinutes** *(integer) --* 

        The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.

        

      
      - **RootVolumeSizeGib** *(integer) --* 

        The size of the root volume. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

        

      
      - **UserVolumeSizeGib** *(integer) --* 

        The size of the user storage. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

        

      
      - **ComputeTypeName** *(string) --* 

        The compute type. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationInProgressException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.UnsupportedWorkspaceConfigurationException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    

  .. py:method:: modify_workspace_state(**kwargs)

    

    Sets the state of the specified WorkSpace.

     

    To maintain a WorkSpace without being interrupted, set the WorkSpace state to ``ADMIN_MAINTENANCE`` . WorkSpaces in this state do not respond to requests to reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not stopped. Users cannot log into a WorkSpace in the ``ADMIN_MAINTENANCE`` state.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ModifyWorkspaceState>`_    


    **Request Syntax** 
    ::

      response = client.modify_workspace_state(
          WorkspaceId='string',
          WorkspaceState='AVAILABLE'|'ADMIN_MAINTENANCE'
      )
    :type WorkspaceId: string
    :param WorkspaceId: **[REQUIRED]** 

      The identifier of the WorkSpace.

      

    
    :type WorkspaceState: string
    :param WorkspaceState: **[REQUIRED]** 

      The WorkSpace state.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: reboot_workspaces(**kwargs)

    

    Reboots the specified WorkSpaces.

     

    You cannot reboot a WorkSpace unless its state is ``AVAILABLE`` or ``UNHEALTHY`` .

     

    This operation is asynchronous and returns before the WorkSpaces have rebooted.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/RebootWorkspaces>`_    


    **Request Syntax** 
    ::

      response = client.reboot_workspaces(
          RebootWorkspaceRequests=[
              {
                  'WorkspaceId': 'string'
              },
          ]
      )
    :type RebootWorkspaceRequests: list
    :param RebootWorkspaceRequests: **[REQUIRED]** 

      The WorkSpaces to reboot. You can specify up to 25 WorkSpaces.

      

    
      - *(dict) --* 

        Describes the information used to reboot a WorkSpace.

        

      
        - **WorkspaceId** *(string) --* **[REQUIRED]** 

          The identifier of the WorkSpace.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedRequests': [
                {
                    'WorkspaceId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedRequests** *(list) --* 

          Information about the WorkSpaces that could not be rebooted.

          
          

          - *(dict) --* 

            Describes a WorkSpace that could not be rebooted. ( RebootWorkspaces ), rebuilt ( RebuildWorkspaces ), restored ( RestoreWorkspace ), terminated ( TerminateWorkspaces ), started ( StartWorkspaces ), or stopped ( StopWorkspaces ).

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be rebooted.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be rebooted.

              
        
      
    

  .. py:method:: rebuild_workspaces(**kwargs)

    

    Rebuilds the specified WorkSpace.

     

    You cannot rebuild a WorkSpace unless its state is ``AVAILABLE`` , ``ERROR`` , ``UNHEALTHY`` , ``STOPPED`` , or ``REBOOTING`` .

     

    Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see `Rebuild a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/reset-workspace.html>`__ .

     

    This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/RebuildWorkspaces>`_    


    **Request Syntax** 
    ::

      response = client.rebuild_workspaces(
          RebuildWorkspaceRequests=[
              {
                  'WorkspaceId': 'string'
              },
          ]
      )
    :type RebuildWorkspaceRequests: list
    :param RebuildWorkspaceRequests: **[REQUIRED]** 

      The WorkSpace to rebuild. You can specify a single WorkSpace.

      

    
      - *(dict) --* 

        Describes the information used to rebuild a WorkSpace.

        

      
        - **WorkspaceId** *(string) --* **[REQUIRED]** 

          The identifier of the WorkSpace.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedRequests': [
                {
                    'WorkspaceId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedRequests** *(list) --* 

          Information about the WorkSpace that could not be rebuilt.

          
          

          - *(dict) --* 

            Describes a WorkSpace that could not be rebooted. ( RebootWorkspaces ), rebuilt ( RebuildWorkspaces ), restored ( RestoreWorkspace ), terminated ( TerminateWorkspaces ), started ( StartWorkspaces ), or stopped ( StopWorkspaces ).

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be rebooted.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be rebooted.

              
        
      
    

  .. py:method:: register_workspace_directory(**kwargs)

    

    Registers the specified directory. This operation is asynchronous and returns before the WorkSpace directory is registered. If this is the first time you are registering a directory, you will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see `Creating the workspaces_DefaultRole Role <https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/RegisterWorkspaceDirectory>`_    


    **Request Syntax** 
    ::

      response = client.register_workspace_directory(
          DirectoryId='string',
          SubnetIds=[
              'string',
          ],
          EnableWorkDocs=True|False,
          EnableSelfService=True|False,
          Tenancy='DEDICATED'|'SHARED',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type DirectoryId: string
    :param DirectoryId: **[REQUIRED]** 

      The identifier of the directory. You cannot register a directory if it does not have a status of Active. If the directory does not have a status of Active, you will receive an InvalidResourceStateException error. If you have already registered the maximum number of directories that you can register with Amazon WorkSpaces, you will receive a ResourceLimitExceededException error. Deregister directories that you are not using for WorkSpaces, and try again.

      

    
    :type SubnetIds: list
    :param SubnetIds: 

      The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the subnets are in supported Availability Zones. The subnets must also be in separate Availability Zones. If these conditions are not met, you will receive an OperationNotSupportedException error.

      

    
      - *(string) --* 

      
  
    :type EnableWorkDocs: boolean
    :param EnableWorkDocs: **[REQUIRED]** 

      Indicates whether Amazon WorkDocs is enabled or disabled. If you have enabled this parameter and WorkDocs is not available in the Region, you will receive an OperationNotSupportedException error. Set ``EnableWorkDocs`` to disabled, and try again.

      

    
    :type EnableSelfService: boolean
    :param EnableSelfService: 

      Indicates whether self-service capabilities are enabled or disabled.

      

    
    :type Tenancy: string
    :param Tenancy: 

      Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own License (BYOL) images, this value must be set to ``DEDICATED`` and your AWS account must be enabled for BYOL. If your account has not been enabled for BYOL, you will receive an InvalidParameterValuesException error. For more information about BYOL images, see `Bring Your Own Windows Desktop Images <https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html>`__ .

      

    
    :type Tags: list
    :param Tags: 

      The tags associated with the directory.

      

    
      - *(dict) --* 

        Describes a tag.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key of the tag.

          

        
        - **Value** *(string) --* 

          The value of the tag.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.WorkspacesDefaultRoleNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.UnsupportedNetworkConfigurationException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: restore_workspace(**kwargs)

    

    Restores the specified WorkSpace to its last known healthy state.

     

    You cannot restore a WorkSpace unless its state is ``AVAILABLE`` , ``ERROR`` , ``UNHEALTHY`` , or ``STOPPED`` .

     

    Restoring a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see `Restore a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/restore-workspace.html>`__ .

     

    This operation is asynchronous and returns before the WorkSpace is completely restored.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/RestoreWorkspace>`_    


    **Request Syntax** 
    ::

      response = client.restore_workspace(
          WorkspaceId='string'
      )
    :type WorkspaceId: string
    :param WorkspaceId: **[REQUIRED]** 

      The identifier of the WorkSpace.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: revoke_ip_rules(**kwargs)

    

    Removes one or more rules from the specified IP access control group.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/RevokeIpRules>`_    


    **Request Syntax** 
    ::

      response = client.revoke_ip_rules(
          GroupId='string',
          UserRules=[
              'string',
          ]
      )
    :type GroupId: string
    :param GroupId: **[REQUIRED]** 

      The identifier of the group.

      

    
    :type UserRules: list
    :param UserRules: **[REQUIRED]** 

      The rules to remove from the group.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: start_workspaces(**kwargs)

    

    Starts the specified WorkSpaces.

     

    You cannot start a WorkSpace unless it has a running mode of ``AutoStop`` and a state of ``STOPPED`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/StartWorkspaces>`_    


    **Request Syntax** 
    ::

      response = client.start_workspaces(
          StartWorkspaceRequests=[
              {
                  'WorkspaceId': 'string'
              },
          ]
      )
    :type StartWorkspaceRequests: list
    :param StartWorkspaceRequests: **[REQUIRED]** 

      The WorkSpaces to start. You can specify up to 25 WorkSpaces.

      

    
      - *(dict) --* 

        Information used to start a WorkSpace.

        

      
        - **WorkspaceId** *(string) --* 

          The identifier of the WorkSpace.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedRequests': [
                {
                    'WorkspaceId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedRequests** *(list) --* 

          Information about the WorkSpaces that could not be started.

          
          

          - *(dict) --* 

            Describes a WorkSpace that could not be rebooted. ( RebootWorkspaces ), rebuilt ( RebuildWorkspaces ), restored ( RestoreWorkspace ), terminated ( TerminateWorkspaces ), started ( StartWorkspaces ), or stopped ( StopWorkspaces ).

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be rebooted.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be rebooted.

              
        
      
    

  .. py:method:: stop_workspaces(**kwargs)

    

    Stops the specified WorkSpaces.

     

    You cannot stop a WorkSpace unless it has a running mode of ``AutoStop`` and a state of ``AVAILABLE`` , ``IMPAIRED`` , ``UNHEALTHY`` , or ``ERROR`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/StopWorkspaces>`_    


    **Request Syntax** 
    ::

      response = client.stop_workspaces(
          StopWorkspaceRequests=[
              {
                  'WorkspaceId': 'string'
              },
          ]
      )
    :type StopWorkspaceRequests: list
    :param StopWorkspaceRequests: **[REQUIRED]** 

      The WorkSpaces to stop. You can specify up to 25 WorkSpaces.

      

    
      - *(dict) --* 

        Describes the information used to stop a WorkSpace.

        

      
        - **WorkspaceId** *(string) --* 

          The identifier of the WorkSpace.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedRequests': [
                {
                    'WorkspaceId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedRequests** *(list) --* 

          Information about the WorkSpaces that could not be stopped.

          
          

          - *(dict) --* 

            Describes a WorkSpace that could not be rebooted. ( RebootWorkspaces ), rebuilt ( RebuildWorkspaces ), restored ( RestoreWorkspace ), terminated ( TerminateWorkspaces ), started ( StartWorkspaces ), or stopped ( StopWorkspaces ).

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be rebooted.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be rebooted.

              
        
      
    

  .. py:method:: terminate_workspaces(**kwargs)

    

    Terminates the specified WorkSpaces.

     

    .. warning::

       

      Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is destroyed. If you need to archive any user data, contact AWS Support before terminating the WorkSpace.

       

     

    You can terminate a WorkSpace that is in any state except ``SUSPENDED`` .

     

    This operation is asynchronous and returns before the WorkSpaces have been completely terminated. After a WorkSpace is terminated, the ``TERMINATED`` state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using `DescribeWorkSpaces <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html>`__ . If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.

     

    .. note::

       

      Simple AD and AD Connector are made available to you free of charge to use with WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector directory for 30 consecutive days, this directory will be automatically deregistered for use with Amazon WorkSpaces, and you will be charged for this directory as per the `AWS Directory Services pricing terms <http://aws.amazon.com/directoryservice/pricing/>`__ .

       

      To delete empty directories, see `Delete the Directory for Your WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html>`__ . If you delete your Simple AD or AD Connector directory, you can always create a new one when you want to start using WorkSpaces again.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/TerminateWorkspaces>`_    


    **Request Syntax** 
    ::

      response = client.terminate_workspaces(
          TerminateWorkspaceRequests=[
              {
                  'WorkspaceId': 'string'
              },
          ]
      )
    :type TerminateWorkspaceRequests: list
    :param TerminateWorkspaceRequests: **[REQUIRED]** 

      The WorkSpaces to terminate. You can specify up to 25 WorkSpaces.

      

    
      - *(dict) --* 

        Describes the information used to terminate a WorkSpace.

        

      
        - **WorkspaceId** *(string) --* **[REQUIRED]** 

          The identifier of the WorkSpace.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedRequests': [
                {
                    'WorkspaceId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedRequests** *(list) --* 

          Information about the WorkSpaces that could not be terminated.

          
          

          - *(dict) --* 

            Describes a WorkSpace that could not be rebooted. ( RebootWorkspaces ), rebuilt ( RebuildWorkspaces ), restored ( RestoreWorkspace ), terminated ( TerminateWorkspaces ), started ( StartWorkspaces ), or stopped ( StopWorkspaces ).

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be rebooted.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be rebooted.

              
        
      
    

  .. py:method:: update_connection_alias_permission(**kwargs)

    

    Shares or unshares a connection alias with one account by specifying whether that account has permission to associate the connection alias with a directory. If the association permission is granted, the connection alias is shared with that account. If the association permission is revoked, the connection alias is unshared with the account. For more information, see `Cross-Region Redirection for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html>`__ .

     

    .. note::

       

       
      * Before performing this operation, call `DescribeConnectionAliases <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html>`__ to make sure that the current state of the connection alias is ``CREATED`` . 
       
      * To delete a connection alias that has been shared, the shared account must first disassociate the connection alias from any directories it has been associated with. Then you must unshare the connection alias from the account it has been shared with. You can delete a connection alias only after it is no longer shared with any accounts or associated with any directories. 
       

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/UpdateConnectionAliasPermission>`_    


    **Request Syntax** 
    ::

      response = client.update_connection_alias_permission(
          AliasId='string',
          ConnectionAliasPermission={
              'SharedAccountId': 'string',
              'AllowAssociation': True|False
          }
      )
    :type AliasId: string
    :param AliasId: **[REQUIRED]** 

      The identifier of the connection alias that you want to update permissions for.

      

    
    :type ConnectionAliasPermission: dict
    :param ConnectionAliasPermission: **[REQUIRED]** 

      Indicates whether to share or unshare the connection alias with the specified AWS account.

      

    
      - **SharedAccountId** *(string) --* **[REQUIRED]** 

        The identifier of the AWS account that the connection alias is shared with.

        

      
      - **AllowAssociation** *(boolean) --* **[REQUIRED]** 

        Indicates whether the specified AWS account is allowed to associate the connection alias with a directory.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceAssociatedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

  .. py:method:: update_rules_of_ip_group(**kwargs)

    

    Replaces the current rules of the specified IP access control group with the specified rules.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/UpdateRulesOfIpGroup>`_    


    **Request Syntax** 
    ::

      response = client.update_rules_of_ip_group(
          GroupId='string',
          UserRules=[
              {
                  'ipRule': 'string',
                  'ruleDesc': 'string'
              },
          ]
      )
    :type GroupId: string
    :param GroupId: **[REQUIRED]** 

      The identifier of the group.

      

    
    :type UserRules: list
    :param UserRules: **[REQUIRED]** 

      One or more rules.

      

    
      - *(dict) --* 

        Describes a rule for an IP access control group.

        

      
        - **ipRule** *(string) --* 

          The IP address range, in CIDR notation.

          

        
        - **ruleDesc** *(string) --* 

          The description.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_workspace_bundle(**kwargs)

    

    Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see `Update a Custom WorkSpaces Bundle <https://docs.aws.amazon.com/workspaces/latest/adminguide/update-custom-bundle.html>`__ .

     

    .. warning::

       

      Existing WorkSpaces aren't automatically updated when you update the bundle that they're based on. To update existing WorkSpaces that are based on a bundle that you've updated, you must either rebuild the WorkSpaces or delete and recreate them.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/UpdateWorkspaceBundle>`_    


    **Request Syntax** 
    ::

      response = client.update_workspace_bundle(
          BundleId='string',
          ImageId='string'
      )
    :type BundleId: string
    :param BundleId: 

      The identifier of the bundle.

      

    
    :type ImageId: string
    :param ImageId: 

      The identifier of the image.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    

  .. py:method:: update_workspace_image_permission(**kwargs)

    

    Shares or unshares an image with one account in the same AWS Region by specifying whether that account has permission to copy the image. If the copy image permission is granted, the image is shared with that account. If the copy image permission is revoked, the image is unshared with the account.

     

    After an image has been shared, the recipient account can copy the image to other AWS Regions as needed.

     

    .. note::

       

      In the China (Ningxia) Region, you can copy images only within the same Region.

       

      In the AWS GovCloud (US-West) Region, to copy images to and from other AWS Regions, contact AWS Support.

       

     

    For more information about sharing images, see `Share or Unshare a Custom WorkSpaces Image <https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html>`__ .

     

    .. note::

       

       
      * To delete an image that has been shared, you must unshare the image before you delete it. 
       
      * Sharing Bring Your Own License (BYOL) images across AWS accounts isn't supported at this time in the AWS GovCloud (US-West) Region. To share BYOL images across accounts in the AWS GovCloud (US-West) Region, contact AWS Support. 
       

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/UpdateWorkspaceImagePermission>`_    


    **Request Syntax** 
    ::

      response = client.update_workspace_image_permission(
          ImageId='string',
          AllowCopyImage=True|False,
          SharedAccountId='string'
      )
    :type ImageId: string
    :param ImageId: **[REQUIRED]** 

      The identifier of the image.

      

    
    :type AllowCopyImage: boolean
    :param AllowCopyImage: **[REQUIRED]** 

      The permission to copy the image. This permission can be revoked only after an image has been shared.

      

    
    :type SharedAccountId: string
    :param SharedAccountId: **[REQUIRED]** 

      The identifier of the AWS account to share or unshare the image with.

       

      .. warning::

         

        Before sharing the image, confirm that you are sharing to the correct AWS account ID.

         

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.ResourceUnavailableException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.InvalidParameterValuesException`

    
    *     :py:class:`WorkSpaces.Client.exceptions.OperationNotSupportedException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`WorkSpaces.Paginator.DescribeAccountModifications`


* :py:class:`WorkSpaces.Paginator.DescribeIpGroups`


* :py:class:`WorkSpaces.Paginator.DescribeWorkspaceBundles`


* :py:class:`WorkSpaces.Paginator.DescribeWorkspaceDirectories`


* :py:class:`WorkSpaces.Paginator.DescribeWorkspaceImages`


* :py:class:`WorkSpaces.Paginator.DescribeWorkspaces`


* :py:class:`WorkSpaces.Paginator.DescribeWorkspacesConnectionStatus`


* :py:class:`WorkSpaces.Paginator.ListAvailableManagementCidrRanges`



.. py:class:: WorkSpaces.Paginator.DescribeAccountModifications

  ::

    
    paginator = client.get_paginator('describe_account_modifications')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.describe_account_modifications`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeAccountModifications>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AccountModifications': [
                {
                    'ModificationState': 'PENDING'|'COMPLETED'|'FAILED',
                    'DedicatedTenancySupport': 'ENABLED'|'DISABLED',
                    'DedicatedTenancyManagementCidrRange': 'string',
                    'StartTime': datetime(2015, 1, 1),
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AccountModifications** *(list) --* 

          The list of modifications to the configuration of BYOL.

          
          

          - *(dict) --* 

            Describes a modification to the configuration of Bring Your Own License (BYOL) for the specified account. 

            
            

            - **ModificationState** *(string) --* 

              The state of the modification to the configuration of BYOL.

              
            

            - **DedicatedTenancySupport** *(string) --* 

              The status of BYOL (whether BYOL is being enabled or disabled).

              
            

            - **DedicatedTenancyManagementCidrRange** *(string) --* 

              The IP address range, specified as an IPv4 CIDR block, for the management network interface used for the account.

              
            

            - **StartTime** *(datetime) --* 

              The timestamp when the modification of the BYOL configuration was started.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the configuration of BYOL cannot be modified.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the configuration of BYOL cannot be modified.

              
        
      
    

.. py:class:: WorkSpaces.Paginator.DescribeIpGroups

  ::

    
    paginator = client.get_paginator('describe_ip_groups')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.describe_ip_groups`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeIpGroups>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          GroupIds=[
              'string',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type GroupIds: list
    :param GroupIds: 

      The identifiers of one or more IP access control groups.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Result': [
                {
                    'groupId': 'string',
                    'groupName': 'string',
                    'groupDesc': 'string',
                    'userRules': [
                        {
                            'ipRule': 'string',
                            'ruleDesc': 'string'
                        },
                    ]
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Result** *(list) --* 

          Information about the IP access control groups.

          
          

          - *(dict) --* 

            Describes an IP access control group.

            
            

            - **groupId** *(string) --* 

              The identifier of the group.

              
            

            - **groupName** *(string) --* 

              The name of the group.

              
            

            - **groupDesc** *(string) --* 

              The description of the group.

              
            

            - **userRules** *(list) --* 

              The rules.

              
              

              - *(dict) --* 

                Describes a rule for an IP access control group.

                
                

                - **ipRule** *(string) --* 

                  The IP address range, in CIDR notation.

                  
                

                - **ruleDesc** *(string) --* 

                  The description.

                  
            
          
        
      
    

.. py:class:: WorkSpaces.Paginator.DescribeWorkspaceBundles

  ::

    
    paginator = client.get_paginator('describe_workspace_bundles')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.describe_workspace_bundles`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceBundles>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          BundleIds=[
              'string',
          ],
          Owner='string',
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type BundleIds: list
    :param BundleIds: 

      The identifiers of the bundles. You cannot combine this parameter with any other filter.

      

    
      - *(string) --* 

      
  
    :type Owner: string
    :param Owner: 

      The owner of the bundles. You cannot combine this parameter with any other filter.

       

      To describe the bundles provided by AWS, specify ``AMAZON`` . To describe the bundles that belong to your account, don't specify a value.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Bundles': [
                {
                    'BundleId': 'string',
                    'Name': 'string',
                    'Owner': 'string',
                    'Description': 'string',
                    'ImageId': 'string',
                    'RootStorage': {
                        'Capacity': 'string'
                    },
                    'UserStorage': {
                        'Capacity': 'string'
                    },
                    'ComputeType': {
                        'Name': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                    },
                    'LastUpdatedTime': datetime(2015, 1, 1),
                    'CreationTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Bundles** *(list) --* 

          Information about the bundles.

          
          

          - *(dict) --* 

            Describes a WorkSpace bundle.

            
            

            - **BundleId** *(string) --* 

              The identifier of the bundle.

              
            

            - **Name** *(string) --* 

              The name of the bundle.

              
            

            - **Owner** *(string) --* 

              The owner of the bundle. This is the account identifier of the owner, or ``AMAZON`` if the bundle is provided by AWS.

              
            

            - **Description** *(string) --* 

              The description of the bundle.

              
            

            - **ImageId** *(string) --* 

              The identifier of the image that was used to create the bundle.

              
            

            - **RootStorage** *(dict) --* 

              The size of the root volume.

              
              

              - **Capacity** *(string) --* 

                The size of the root volume.

                
          
            

            - **UserStorage** *(dict) --* 

              The size of the user volume.

              
              

              - **Capacity** *(string) --* 

                The size of the user volume.

                
          
            

            - **ComputeType** *(dict) --* 

              The compute type of the bundle. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

              
              

              - **Name** *(string) --* 

                The compute type.

                
          
            

            - **LastUpdatedTime** *(datetime) --* 

              The last time that the bundle was updated.

              
            

            - **CreationTime** *(datetime) --* 

              The time when the bundle was created.

              
        
      
    

.. py:class:: WorkSpaces.Paginator.DescribeWorkspaceDirectories

  ::

    
    paginator = client.get_paginator('describe_workspace_directories')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.describe_workspace_directories`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceDirectories>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          DirectoryIds=[
              'string',
          ],
          Limit=123,
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type DirectoryIds: list
    :param DirectoryIds: 

      The identifiers of the directories. If the value is null, all directories are retrieved.

      

    
      - *(string) --* 

      
  
    :type Limit: integer
    :param Limit: 

      The maximum number of directories to return.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Directories': [
                {
                    'DirectoryId': 'string',
                    'Alias': 'string',
                    'DirectoryName': 'string',
                    'RegistrationCode': 'string',
                    'SubnetIds': [
                        'string',
                    ],
                    'DnsIpAddresses': [
                        'string',
                    ],
                    'CustomerUserName': 'string',
                    'IamRoleId': 'string',
                    'DirectoryType': 'SIMPLE_AD'|'AD_CONNECTOR',
                    'WorkspaceSecurityGroupId': 'string',
                    'State': 'REGISTERING'|'REGISTERED'|'DEREGISTERING'|'DEREGISTERED'|'ERROR',
                    'WorkspaceCreationProperties': {
                        'EnableWorkDocs': True|False,
                        'EnableInternetAccess': True|False,
                        'DefaultOu': 'string',
                        'CustomSecurityGroupId': 'string',
                        'UserEnabledAsLocalAdministrator': True|False,
                        'EnableMaintenanceMode': True|False
                    },
                    'ipGroupIds': [
                        'string',
                    ],
                    'WorkspaceAccessProperties': {
                        'DeviceTypeWindows': 'ALLOW'|'DENY',
                        'DeviceTypeOsx': 'ALLOW'|'DENY',
                        'DeviceTypeWeb': 'ALLOW'|'DENY',
                        'DeviceTypeIos': 'ALLOW'|'DENY',
                        'DeviceTypeAndroid': 'ALLOW'|'DENY',
                        'DeviceTypeChromeOs': 'ALLOW'|'DENY',
                        'DeviceTypeZeroClient': 'ALLOW'|'DENY',
                        'DeviceTypeLinux': 'ALLOW'|'DENY'
                    },
                    'Tenancy': 'DEDICATED'|'SHARED',
                    'SelfservicePermissions': {
                        'RestartWorkspace': 'ENABLED'|'DISABLED',
                        'IncreaseVolumeSize': 'ENABLED'|'DISABLED',
                        'ChangeComputeType': 'ENABLED'|'DISABLED',
                        'SwitchRunningMode': 'ENABLED'|'DISABLED',
                        'RebuildWorkspace': 'ENABLED'|'DISABLED'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Directories** *(list) --* 

          Information about the directories.

          
          

          - *(dict) --* 

            Describes a directory that is used with Amazon WorkSpaces.

            
            

            - **DirectoryId** *(string) --* 

              The directory identifier.

              
            

            - **Alias** *(string) --* 

              The directory alias.

              
            

            - **DirectoryName** *(string) --* 

              The name of the directory.

              
            

            - **RegistrationCode** *(string) --* 

              The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.

              
            

            - **SubnetIds** *(list) --* 

              The identifiers of the subnets used with the directory.

              
              

              - *(string) --* 
          
            

            - **DnsIpAddresses** *(list) --* 

              The IP addresses of the DNS servers for the directory.

              
              

              - *(string) --* 
          
            

            - **CustomerUserName** *(string) --* 

              The user name for the service account.

              
            

            - **IamRoleId** *(string) --* 

              The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.

              
            

            - **DirectoryType** *(string) --* 

              The directory type.

              
            

            - **WorkspaceSecurityGroupId** *(string) --* 

              The identifier of the security group that is assigned to new WorkSpaces.

              
            

            - **State** *(string) --* 

              The state of the directory's registration with Amazon WorkSpaces. After a directory is deregistered, the ``DEREGISTERED`` state is returned very briefly before the directory metadata is cleaned up, so this state is rarely returned. To confirm that a directory is deregistered, check for the directory ID by using `DescribeWorkspaceDirectories <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceDirectories.html>`__ . If the directory ID isn't returned, then the directory has been successfully deregistered.

              
            

            - **WorkspaceCreationProperties** *(dict) --* 

              The default creation properties for all WorkSpaces in the directory.

              
              

              - **EnableWorkDocs** *(boolean) --* 

                Specifies whether the directory is enabled for Amazon WorkDocs.

                
              

              - **EnableInternetAccess** *(boolean) --* 

                Specifies whether to automatically assign an Elastic public IP address to WorkSpaces in this directory by default. If enabled, the Elastic public IP address allows outbound internet access from your WorkSpaces when you’re using an internet gateway in the Amazon VPC in which your WorkSpaces are located. If you're using a Network Address Translation (NAT) gateway for outbound internet access from your VPC, or if your WorkSpaces are in public subnets and you manually assign them Elastic IP addresses, you should disable this setting. This setting applies to new WorkSpaces that you launch or to existing WorkSpaces that you rebuild. For more information, see `Configure a VPC for Amazon WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces-vpc.html>`__ .

                
              

              - **DefaultOu** *(string) --* 

                The organizational unit (OU) in the directory for the WorkSpace machine accounts.

                
              

              - **CustomSecurityGroupId** *(string) --* 

                The identifier of the default security group to apply to WorkSpaces when they are created. For more information, see `Security Groups for Your WorkSpaces <https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces-security-groups.html>`__ .

                
              

              - **UserEnabledAsLocalAdministrator** *(boolean) --* 

                Specifies whether WorkSpace users are local administrators on their WorkSpaces.

                
              

              - **EnableMaintenanceMode** *(boolean) --* 

                Specifies whether maintenance mode is enabled for WorkSpaces. For more information, see `WorkSpace Maintenance <https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html>`__ .

                
          
            

            - **ipGroupIds** *(list) --* 

              The identifiers of the IP access control groups associated with the directory.

              
              

              - *(string) --* 
          
            

            - **WorkspaceAccessProperties** *(dict) --* 

              The devices and operating systems that users can use to access WorkSpaces.

              
              

              - **DeviceTypeWindows** *(string) --* 

                Indicates whether users can use Windows clients to access their WorkSpaces. To restrict WorkSpaces access to trusted devices (also known as managed devices) with valid certificates, specify a value of ``TRUST`` . For more information, see `Restrict WorkSpaces Access to Trusted Devices <https://docs.aws.amazon.com/workspaces/latest/adminguide/trusted-devices.html>`__ . 

                
              

              - **DeviceTypeOsx** *(string) --* 

                Indicates whether users can use macOS clients to access their WorkSpaces. To restrict WorkSpaces access to trusted devices (also known as managed devices) with valid certificates, specify a value of ``TRUST`` . For more information, see `Restrict WorkSpaces Access to Trusted Devices <https://docs.aws.amazon.com/workspaces/latest/adminguide/trusted-devices.html>`__ . 

                
              

              - **DeviceTypeWeb** *(string) --* 

                Indicates whether users can access their WorkSpaces through a web browser.

                
              

              - **DeviceTypeIos** *(string) --* 

                Indicates whether users can use iOS devices to access their WorkSpaces.

                
              

              - **DeviceTypeAndroid** *(string) --* 

                Indicates whether users can use Android devices to access their WorkSpaces.

                
              

              - **DeviceTypeChromeOs** *(string) --* 

                Indicates whether users can use Chromebooks to access their WorkSpaces.

                
              

              - **DeviceTypeZeroClient** *(string) --* 

                Indicates whether users can use zero client devices to access their WorkSpaces.

                
              

              - **DeviceTypeLinux** *(string) --* 

                Indicates whether users can use Linux clients to access their WorkSpaces.

                
          
            

            - **Tenancy** *(string) --* 

              Specifies whether the directory is dedicated or shared. To use Bring Your Own License (BYOL), this value must be set to ``DEDICATED`` . For more information, see `Bring Your Own Windows Desktop Images <https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html>`__ .

              
            

            - **SelfservicePermissions** *(dict) --* 

              The default self-service permissions for WorkSpaces in the directory.

              
              

              - **RestartWorkspace** *(string) --* 

                Specifies whether users can restart their WorkSpace.

                
              

              - **IncreaseVolumeSize** *(string) --* 

                Specifies whether users can increase the volume size of the drives on their WorkSpace.

                
              

              - **ChangeComputeType** *(string) --* 

                Specifies whether users can change the compute type (bundle) for their WorkSpace.

                
              

              - **SwitchRunningMode** *(string) --* 

                Specifies whether users can switch the running mode of their WorkSpace.

                
              

              - **RebuildWorkspace** *(string) --* 

                Specifies whether users can rebuild the operating system of a WorkSpace to its original state.

                
          
        
      
    

.. py:class:: WorkSpaces.Paginator.DescribeWorkspaceImages

  ::

    
    paginator = client.get_paginator('describe_workspace_images')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.describe_workspace_images`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaceImages>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ImageIds=[
              'string',
          ],
          ImageType='OWNED'|'SHARED',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ImageIds: list
    :param ImageIds: 

      The identifier of the image.

      

    
      - *(string) --* 

      
  
    :type ImageType: string
    :param ImageType: 

      The type (owned or shared) of the image.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Images': [
                {
                    'ImageId': 'string',
                    'Name': 'string',
                    'Description': 'string',
                    'OperatingSystem': {
                        'Type': 'WINDOWS'|'LINUX'
                    },
                    'State': 'AVAILABLE'|'PENDING'|'ERROR',
                    'RequiredTenancy': 'DEFAULT'|'DEDICATED',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string',
                    'Created': datetime(2015, 1, 1),
                    'OwnerAccountId': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Images** *(list) --* 

          Information about the images.

          
          

          - *(dict) --* 

            Describes a WorkSpace image.

            
            

            - **ImageId** *(string) --* 

              The identifier of the image.

              
            

            - **Name** *(string) --* 

              The name of the image.

              
            

            - **Description** *(string) --* 

              The description of the image.

              
            

            - **OperatingSystem** *(dict) --* 

              The operating system that the image is running. 

              
              

              - **Type** *(string) --* 

                The operating system.

                
          
            

            - **State** *(string) --* 

              The status of the image.

              
            

            - **RequiredTenancy** *(string) --* 

              Specifies whether the image is running on dedicated hardware. When Bring Your Own License (BYOL) is enabled, this value is set to ``DEDICATED`` . For more information, see `Bring Your Own Windows Desktop Images <https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html>`__ .

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned for the image.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned for the image.

              
            

            - **Created** *(datetime) --* 

              The date when the image was created. If the image has been shared, the AWS account that the image has been shared with sees the original creation date of the image.

              
            

            - **OwnerAccountId** *(string) --* 

              The identifier of the AWS account that owns the image.

              
        
      
    

.. py:class:: WorkSpaces.Paginator.DescribeWorkspaces

  ::

    
    paginator = client.get_paginator('describe_workspaces')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.describe_workspaces`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspaces>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          WorkspaceIds=[
              'string',
          ],
          DirectoryId='string',
          UserName='string',
          BundleId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type WorkspaceIds: list
    :param WorkspaceIds: 

      The identifiers of the WorkSpaces. You cannot combine this parameter with any other filter.

       

      Because the  CreateWorkspaces operation is asynchronous, the identifier it returns is not immediately available. If you immediately call  DescribeWorkspaces with this identifier, no information is returned.

      

    
      - *(string) --* 

      
  
    :type DirectoryId: string
    :param DirectoryId: 

      The identifier of the directory. In addition, you can optionally specify a specific directory user (see ``UserName`` ). You cannot combine this parameter with any other filter.

      

    
    :type UserName: string
    :param UserName: 

      The name of the directory user. You must specify this parameter with ``DirectoryId`` .

      

    
    :type BundleId: string
    :param BundleId: 

      The identifier of the bundle. All WorkSpaces that are created from this bundle are retrieved. You cannot combine this parameter with any other filter.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Workspaces': [
                {
                    'WorkspaceId': 'string',
                    'DirectoryId': 'string',
                    'UserName': 'string',
                    'IpAddress': 'string',
                    'State': 'PENDING'|'AVAILABLE'|'IMPAIRED'|'UNHEALTHY'|'REBOOTING'|'STARTING'|'REBUILDING'|'RESTORING'|'MAINTENANCE'|'ADMIN_MAINTENANCE'|'TERMINATING'|'TERMINATED'|'SUSPENDED'|'UPDATING'|'STOPPING'|'STOPPED'|'ERROR',
                    'BundleId': 'string',
                    'SubnetId': 'string',
                    'ErrorMessage': 'string',
                    'ErrorCode': 'string',
                    'ComputerName': 'string',
                    'VolumeEncryptionKey': 'string',
                    'UserVolumeEncryptionEnabled': True|False,
                    'RootVolumeEncryptionEnabled': True|False,
                    'WorkspaceProperties': {
                        'RunningMode': 'AUTO_STOP'|'ALWAYS_ON',
                        'RunningModeAutoStopTimeoutInMinutes': 123,
                        'RootVolumeSizeGib': 123,
                        'UserVolumeSizeGib': 123,
                        'ComputeTypeName': 'VALUE'|'STANDARD'|'PERFORMANCE'|'POWER'|'GRAPHICS'|'POWERPRO'|'GRAPHICSPRO'
                    },
                    'ModificationStates': [
                        {
                            'Resource': 'ROOT_VOLUME'|'USER_VOLUME'|'COMPUTE_TYPE',
                            'State': 'UPDATE_INITIATED'|'UPDATE_IN_PROGRESS'
                        },
                    ]
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Workspaces** *(list) --* 

          Information about the WorkSpaces.

           

          Because  CreateWorkspaces is an asynchronous operation, some of the returned information could be incomplete.

          
          

          - *(dict) --* 

            Describes a WorkSpace.

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **DirectoryId** *(string) --* 

              The identifier of the AWS Directory Service directory for the WorkSpace.

              
            

            - **UserName** *(string) --* 

              The user for the WorkSpace.

              
            

            - **IpAddress** *(string) --* 

              The IP address of the WorkSpace.

              
            

            - **State** *(string) --* 

              The operational state of the WorkSpace.

               

              .. note::

                 

                After a WorkSpace is terminated, the ``TERMINATED`` state is returned only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using `DescribeWorkSpaces <https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html>`__ . If the WorkSpace ID isn't returned, then the WorkSpace has been successfully terminated.

                 

              
            

            - **BundleId** *(string) --* 

              The identifier of the bundle used to create the WorkSpace.

              
            

            - **SubnetId** *(string) --* 

              The identifier of the subnet for the WorkSpace.

              
            

            - **ErrorMessage** *(string) --* 

              The text of the error message that is returned if the WorkSpace cannot be created.

              
            

            - **ErrorCode** *(string) --* 

              The error code that is returned if the WorkSpace cannot be created.

              
            

            - **ComputerName** *(string) --* 

              The name of the WorkSpace, as seen by the operating system. The format of this name varies. For more information, see `Launch a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html>`__ . 

              
            

            - **VolumeEncryptionKey** *(string) --* 

              The symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.

              
            

            - **UserVolumeEncryptionEnabled** *(boolean) --* 

              Indicates whether the data stored on the user volume is encrypted.

              
            

            - **RootVolumeEncryptionEnabled** *(boolean) --* 

              Indicates whether the data stored on the root volume is encrypted.

              
            

            - **WorkspaceProperties** *(dict) --* 

              The properties of the WorkSpace.

              
              

              - **RunningMode** *(string) --* 

                The running mode. For more information, see `Manage the WorkSpace Running Mode <https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html>`__ .

                
              

              - **RunningModeAutoStopTimeoutInMinutes** *(integer) --* 

                The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.

                
              

              - **RootVolumeSizeGib** *(integer) --* 

                The size of the root volume. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                
              

              - **UserVolumeSizeGib** *(integer) --* 

                The size of the user storage. For important information about how to modify the size of the root and user volumes, see `Modify a WorkSpace <https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html>`__ .

                
              

              - **ComputeTypeName** *(string) --* 

                The compute type. For more information, see `Amazon WorkSpaces Bundles <http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles>`__ .

                
          
            

            - **ModificationStates** *(list) --* 

              The modification states of the WorkSpace.

              
              

              - *(dict) --* 

                Describes a WorkSpace modification.

                
                

                - **Resource** *(string) --* 

                  The resource.

                  
                

                - **State** *(string) --* 

                  The modification state.

                  
            
          
        
      
    

.. py:class:: WorkSpaces.Paginator.DescribeWorkspacesConnectionStatus

  ::

    
    paginator = client.get_paginator('describe_workspaces_connection_status')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.describe_workspaces_connection_status`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/DescribeWorkspacesConnectionStatus>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          WorkspaceIds=[
              'string',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type WorkspaceIds: list
    :param WorkspaceIds: 

      The identifiers of the WorkSpaces. You can specify up to 25 WorkSpaces.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'WorkspacesConnectionStatus': [
                {
                    'WorkspaceId': 'string',
                    'ConnectionState': 'CONNECTED'|'DISCONNECTED'|'UNKNOWN',
                    'ConnectionStateCheckTimestamp': datetime(2015, 1, 1),
                    'LastKnownUserConnectionTimestamp': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **WorkspacesConnectionStatus** *(list) --* 

          Information about the connection status of the WorkSpace.

          
          

          - *(dict) --* 

            Describes the connection status of a WorkSpace.

            
            

            - **WorkspaceId** *(string) --* 

              The identifier of the WorkSpace.

              
            

            - **ConnectionState** *(string) --* 

              The connection state of the WorkSpace. The connection state is unknown if the WorkSpace is stopped.

              
            

            - **ConnectionStateCheckTimestamp** *(datetime) --* 

              The timestamp of the connection status check.

              
            

            - **LastKnownUserConnectionTimestamp** *(datetime) --* 

              The timestamp of the last known user connection.

              
        
      
    

.. py:class:: WorkSpaces.Paginator.ListAvailableManagementCidrRanges

  ::

    
    paginator = client.get_paginator('list_available_management_cidr_ranges')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`WorkSpaces.Client.list_available_management_cidr_ranges`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workspaces-2015-04-08/ListAvailableManagementCidrRanges>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ManagementCidrRangeConstraint='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ManagementCidrRangeConstraint: string
    :param ManagementCidrRangeConstraint: **[REQUIRED]** 

      The IP address range to search. Specify an IP address range that is compatible with your network and in CIDR notation (that is, specify the range as an IPv4 CIDR block).

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ManagementCidrRanges': [
                'string',
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ManagementCidrRanges** *(list) --* 

          The list of available IP address ranges, specified as IPv4 CIDR blocks.

          
          

          - *(string) --* 
      
    