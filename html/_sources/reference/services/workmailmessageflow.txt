

*******************
WorkMailMessageFlow
*******************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: WorkMailMessageFlow.Client

  A low-level client representing Amazon WorkMail Message Flow
  

  The WorkMail Message Flow API provides access to email messages as they are being sent and received by a WorkMail organization.

  ::

    
    import boto3
    
    client = boto3.client('workmailmessageflow')

  
  These are the available methods:
  
  *   :py:meth:`~WorkMailMessageFlow.Client.can_paginate`

  
  *   :py:meth:`~WorkMailMessageFlow.Client.generate_presigned_url`

  
  *   :py:meth:`~WorkMailMessageFlow.Client.get_paginator`

  
  *   :py:meth:`~WorkMailMessageFlow.Client.get_raw_message_content`

  
  *   :py:meth:`~WorkMailMessageFlow.Client.get_waiter`

  
  *   :py:meth:`~WorkMailMessageFlow.Client.put_raw_message_content`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_raw_message_content(**kwargs)

    

    Retrieves the raw content of an in-transit email message, in MIME format.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workmailmessageflow-2019-05-01/GetRawMessageContent>`_    


    **Request Syntax** 
    ::

      response = client.get_raw_message_content(
          messageId='string'
      )
    :type messageId: string
    :param messageId: **[REQUIRED]** 

      The identifier of the email message to retrieve.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'messageContent': StreamingBody()
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **messageContent** (:class:`.StreamingBody`) -- 

          The raw content of the email message, in MIME format.

          
    
    **Exceptions** 
    
    *     :py:class:`WorkMailMessageFlow.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: put_raw_message_content(**kwargs)

    

    Updates the raw content of an in-transit email message, in MIME format.

     

    This example describes how to update in-transit email message. For more information and examples for using this API, see `Updating message content with AWS Lambda <https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html>`__ .

     

    .. note::

       

      Updates to an in-transit message only appear when you call ``PutRawMessageContent`` from an AWS Lambda function configured with a synchronous `Run Lambda <https://docs.aws.amazon.com/workmail/latest/adminguide/lambda.html#synchronous-rules>`__ rule. If you call ``PutRawMessageContent`` on a delivered or sent message, the message remains unchanged, even though `GetRawMessageContent <https://docs.aws.amazon.com/workmail/latest/APIReference/API_messageflow_GetRawMessageContent.html>`__ returns an updated message. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/workmailmessageflow-2019-05-01/PutRawMessageContent>`_    


    **Request Syntax** 
    ::

      response = client.put_raw_message_content(
          messageId='string',
          content={
              's3Reference': {
                  'bucket': 'string',
                  'key': 'string',
                  'objectVersion': 'string'
              }
          }
      )
    :type messageId: string
    :param messageId: **[REQUIRED]** 

      The identifier of the email message being updated.

      

    
    :type content: dict
    :param content: **[REQUIRED]** 

      Describes the raw message content of the updated email message.

      

    
      - **s3Reference** *(dict) --* **[REQUIRED]** 

        The S3 reference of an email message.

        

      
        - **bucket** *(string) --* **[REQUIRED]** 

          The S3 bucket name.

          

        
        - **key** *(string) --* **[REQUIRED]** 

          The S3 key object name.

          

        
        - **objectVersion** *(string) --* 

          If you enable versioning for the bucket, you can specify the object version.

          

        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`WorkMailMessageFlow.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`WorkMailMessageFlow.Client.exceptions.InvalidContentLocation`

    
    *     :py:class:`WorkMailMessageFlow.Client.exceptions.MessageRejected`

    
    *     :py:class:`WorkMailMessageFlow.Client.exceptions.MessageFrozen`

    

==========
Paginators
==========


The available paginators are:
