

************
IoTAnalytics
************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: IoTAnalytics.Client

  A low-level client representing AWS IoT Analytics
  

  AWS IoT Analytics allows you to collect large amounts of device data, process messages, and store them. You can then query the data and run sophisticated analytics on it. AWS IoT Analytics enables advanced data exploration through integration with Jupyter Notebooks and data visualization through integration with Amazon QuickSight.

   

  Traditional analytics and business intelligence tools are designed to process structured data. IoT data often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result the data from these devices can have significant gaps, corrupted messages, and false readings that must be cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data from external sources. 

   

  AWS IoT Analytics automates the steps required to analyze data from IoT devices. AWS IoT Analytics filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You can set up the service to collect only the data you need from your devices, apply mathematical transforms to process the data, and enrich the data with device-specific metadata such as device type and location before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine, or perform more complex analytics and machine learning inference. AWS IoT Analytics includes pre-built models for common IoT use cases so you can answer questions like which devices are about to fail or which customers are at risk of abandoning their wearable devices.

  ::

    
    import boto3
    
    client = boto3.client('iotanalytics')

  
  These are the available methods:
  
  *   :py:meth:`~IoTAnalytics.Client.batch_put_message`

  
  *   :py:meth:`~IoTAnalytics.Client.can_paginate`

  
  *   :py:meth:`~IoTAnalytics.Client.cancel_pipeline_reprocessing`

  
  *   :py:meth:`~IoTAnalytics.Client.create_channel`

  
  *   :py:meth:`~IoTAnalytics.Client.create_dataset`

  
  *   :py:meth:`~IoTAnalytics.Client.create_dataset_content`

  
  *   :py:meth:`~IoTAnalytics.Client.create_datastore`

  
  *   :py:meth:`~IoTAnalytics.Client.create_pipeline`

  
  *   :py:meth:`~IoTAnalytics.Client.delete_channel`

  
  *   :py:meth:`~IoTAnalytics.Client.delete_dataset`

  
  *   :py:meth:`~IoTAnalytics.Client.delete_dataset_content`

  
  *   :py:meth:`~IoTAnalytics.Client.delete_datastore`

  
  *   :py:meth:`~IoTAnalytics.Client.delete_pipeline`

  
  *   :py:meth:`~IoTAnalytics.Client.describe_channel`

  
  *   :py:meth:`~IoTAnalytics.Client.describe_dataset`

  
  *   :py:meth:`~IoTAnalytics.Client.describe_datastore`

  
  *   :py:meth:`~IoTAnalytics.Client.describe_logging_options`

  
  *   :py:meth:`~IoTAnalytics.Client.describe_pipeline`

  
  *   :py:meth:`~IoTAnalytics.Client.generate_presigned_url`

  
  *   :py:meth:`~IoTAnalytics.Client.get_dataset_content`

  
  *   :py:meth:`~IoTAnalytics.Client.get_paginator`

  
  *   :py:meth:`~IoTAnalytics.Client.get_waiter`

  
  *   :py:meth:`~IoTAnalytics.Client.list_channels`

  
  *   :py:meth:`~IoTAnalytics.Client.list_dataset_contents`

  
  *   :py:meth:`~IoTAnalytics.Client.list_datasets`

  
  *   :py:meth:`~IoTAnalytics.Client.list_datastores`

  
  *   :py:meth:`~IoTAnalytics.Client.list_pipelines`

  
  *   :py:meth:`~IoTAnalytics.Client.list_tags_for_resource`

  
  *   :py:meth:`~IoTAnalytics.Client.put_logging_options`

  
  *   :py:meth:`~IoTAnalytics.Client.run_pipeline_activity`

  
  *   :py:meth:`~IoTAnalytics.Client.sample_channel_data`

  
  *   :py:meth:`~IoTAnalytics.Client.start_pipeline_reprocessing`

  
  *   :py:meth:`~IoTAnalytics.Client.tag_resource`

  
  *   :py:meth:`~IoTAnalytics.Client.untag_resource`

  
  *   :py:meth:`~IoTAnalytics.Client.update_channel`

  
  *   :py:meth:`~IoTAnalytics.Client.update_dataset`

  
  *   :py:meth:`~IoTAnalytics.Client.update_datastore`

  
  *   :py:meth:`~IoTAnalytics.Client.update_pipeline`

  

  .. py:method:: batch_put_message(**kwargs)

    

    Sends messages to a channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/BatchPutMessage>`_    


    **Request Syntax** 
    ::

      response = client.batch_put_message(
          channelName='string',
          messages=[
              {
                  'messageId': 'string',
                  'payload': b'bytes'
              },
          ]
      )
    :type channelName: string
    :param channelName: **[REQUIRED]** 

      The name of the channel where the messages are sent.

      

    
    :type messages: list
    :param messages: **[REQUIRED]** 

      The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}.

       

      The field names of message payloads (data) that you send to AWS IoT Analytics:

       

       
      * Must contain only alphanumeric characters and undescores (_). No other special characters are allowed. 
       
      * Must begin with an alphabetic character or single underscore (_). 
       
      * Cannot contain hyphens (-). 
       
      * In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$".  
       
      * Cannot be more than 255 characters. 
       
      * Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.) 
       

       

      For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. 

      

    
      - *(dict) --* 

        Information about a message.

        

      
        - **messageId** *(string) --* **[REQUIRED]** 

          The ID you want to assign to the message. Each ``messageId`` must be unique within each batch sent.

          

        
        - **payload** *(bytes) --* **[REQUIRED]** 

          The payload of the message. This can be a JSON string or a base64-encoded string representing binary data, in which case you must decode it by means of a pipeline activity.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'batchPutMessageErrorEntries': [
                {
                    'messageId': 'string',
                    'errorCode': 'string',
                    'errorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **batchPutMessageErrorEntries** *(list) --* 

          A list of any errors encountered when sending the messages to the channel.

          
          

          - *(dict) --* 

            Contains informations about errors.

            
            

            - **messageId** *(string) --* 

              The ID of the message that caused the error. See the value corresponding to the ``messageId`` key in the message object.

              
            

            - **errorCode** *(string) --* 

              The code associated with the error.

              
            

            - **errorMessage** *(string) --* 

              The message associated with the error.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: cancel_pipeline_reprocessing(**kwargs)

    

    Cancels the reprocessing of data through the pipeline.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CancelPipelineReprocessing>`_    


    **Request Syntax** 
    ::

      response = client.cancel_pipeline_reprocessing(
          pipelineName='string',
          reprocessingId='string'
      )
    :type pipelineName: string
    :param pipelineName: **[REQUIRED]** 

      The name of pipeline for which data reprocessing is canceled.

      

    
    :type reprocessingId: string
    :param reprocessingId: **[REQUIRED]** 

      The ID of the reprocessing task (returned by ``StartPipelineReprocessing`` ).

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_channel(**kwargs)

    

    Creates a channel. A channel collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateChannel>`_    


    **Request Syntax** 
    ::

      response = client.create_channel(
          channelName='string',
          channelStorage={
              'serviceManagedS3': {}
              ,
              'customerManagedS3': {
                  'bucket': 'string',
                  'keyPrefix': 'string',
                  'roleArn': 'string'
              }
          },
          retentionPeriod={
              'unlimited': True|False,
              'numberOfDays': 123
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type channelName: string
    :param channelName: **[REQUIRED]** 

      The name of the channel.

      

    
    :type channelStorage: dict
    :param channelStorage: 

      Where channel data is stored. You can choose one of ``serviceManagedS3`` or ``customerManagedS3`` storage. If not specified, the default is ``serviceManagedS3`` . You cannot change this storage option after the channel is created.

      

    
      - **serviceManagedS3** *(dict) --* 

        Use this to store channel data in an S3 bucket managed by AWS IoT Analytics. You cannot change the choice of service-managed or customer-managed S3 storage after the channel is created.

        

      
      
      - **customerManagedS3** *(dict) --* 

        Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the ``retentionPeriod`` parameter is ignored. You cannot change the choice of service-managed or customer-managed S3 storage after the channel is created.

        

      
        - **bucket** *(string) --* **[REQUIRED]** 

          The name of the S3 bucket in which channel data is stored.

          

        
        - **keyPrefix** *(string) --* 

          Optional. The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

          

        
        - **roleArn** *(string) --* **[REQUIRED]** 

          The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

          

        
      
    
    :type retentionPeriod: dict
    :param retentionPeriod: 

      How long, in days, message data is kept for the channel. When ``customerManagedS3`` storage is selected, this parameter is ignored.

      

    
      - **unlimited** *(boolean) --* 

        If true, message data is kept indefinitely.

        

      
      - **numberOfDays** *(integer) --* 

        The number of days that message data is kept. The ``unlimited`` parameter must be false.

        

      
    
    :type tags: list
    :param tags: 

      Metadata which can be used to manage the channel.

      

    
      - *(dict) --* 

        A set of key-value pairs that are used to manage the resource.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          The tag's key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'channelName': 'string',
            'channelArn': 'string',
            'retentionPeriod': {
                'unlimited': True|False,
                'numberOfDays': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **channelName** *(string) --* 

          The name of the channel.

          
        

        - **channelArn** *(string) --* 

          The ARN of the channel.

          
        

        - **retentionPeriod** *(dict) --* 

          How long, in days, message data is kept for the channel.

          
          

          - **unlimited** *(boolean) --* 

            If true, message data is kept indefinitely.

            
          

          - **numberOfDays** *(integer) --* 

            The number of days that message data is kept. The ``unlimited`` parameter must be false.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_dataset(**kwargs)

    

    Creates a dataset. A dataset stores data retrieved from a data store by applying a ``queryAction`` (a SQL query) or a ``containerAction`` (executing a containerized application). This operation creates the skeleton of a dataset. The dataset can be populated manually by calling ``CreateDatasetContent`` or automatically according to a trigger you specify.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateDataset>`_    


    **Request Syntax** 
    ::

      response = client.create_dataset(
          datasetName='string',
          actions=[
              {
                  'actionName': 'string',
                  'queryAction': {
                      'sqlQuery': 'string',
                      'filters': [
                          {
                              'deltaTime': {
                                  'offsetSeconds': 123,
                                  'timeExpression': 'string'
                              }
                          },
                      ]
                  },
                  'containerAction': {
                      'image': 'string',
                      'executionRoleArn': 'string',
                      'resourceConfiguration': {
                          'computeType': 'ACU_1'|'ACU_2',
                          'volumeSizeInGB': 123
                      },
                      'variables': [
                          {
                              'name': 'string',
                              'stringValue': 'string',
                              'doubleValue': 123.0,
                              'datasetContentVersionValue': {
                                  'datasetName': 'string'
                              },
                              'outputFileUriValue': {
                                  'fileName': 'string'
                              }
                          },
                      ]
                  }
              },
          ],
          triggers=[
              {
                  'schedule': {
                      'expression': 'string'
                  },
                  'dataset': {
                      'name': 'string'
                  }
              },
          ],
          contentDeliveryRules=[
              {
                  'entryName': 'string',
                  'destination': {
                      'iotEventsDestinationConfiguration': {
                          'inputName': 'string',
                          'roleArn': 'string'
                      },
                      's3DestinationConfiguration': {
                          'bucket': 'string',
                          'key': 'string',
                          'glueConfiguration': {
                              'tableName': 'string',
                              'databaseName': 'string'
                          },
                          'roleArn': 'string'
                      }
                  }
              },
          ],
          retentionPeriod={
              'unlimited': True|False,
              'numberOfDays': 123
          },
          versioningConfiguration={
              'unlimited': True|False,
              'maxVersions': 123
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          lateDataRules=[
              {
                  'ruleName': 'string',
                  'ruleConfiguration': {
                      'deltaTimeSessionWindowConfiguration': {
                          'timeoutInMinutes': 123
                      }
                  }
              },
          ]
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the data set.

      

    
    :type actions: list
    :param actions: **[REQUIRED]** 

      A list of actions that create the data set contents.

      

    
      - *(dict) --* 

        A ``DatasetAction`` object that specifies how data set contents are automatically created.

        

      
        - **actionName** *(string) --* 

          The name of the data set action by which data set contents are automatically created.

          

        
        - **queryAction** *(dict) --* 

          An ``SqlQueryDatasetAction`` object that uses an SQL query to automatically create data set contents.

          

        
          - **sqlQuery** *(string) --* **[REQUIRED]** 

            A SQL query string.

            

          
          - **filters** *(list) --* 

            Prefilters applied to message data.

            

          
            - *(dict) --* 

              Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.

              

            
              - **deltaTime** *(dict) --* 

                Used to limit data to that which has arrived since the last execution of the action.

                

              
                - **offsetSeconds** *(integer) --* **[REQUIRED]** 

                  The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.

                  

                
                - **timeExpression** *(string) --* **[REQUIRED]** 

                  An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.

                  

                
              
            
        
        
        - **containerAction** *(dict) --* 

          Information that allows the system to run a containerized application to create the dataset contents. The application must be in a Docker container along with any required support libraries.

          

        
          - **image** *(string) --* **[REQUIRED]** 

            The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.

            

          
          - **executionRoleArn** *(string) --* **[REQUIRED]** 

            The ARN of the role that gives permission to the system to access required resources to run the ``containerAction`` . This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.

            

          
          - **resourceConfiguration** *(dict) --* **[REQUIRED]** 

            Configuration of the resource that executes the ``containerAction`` .

            

          
            - **computeType** *(string) --* **[REQUIRED]** 

              The type of the compute resource used to execute the ``containerAction`` . Possible values are: ``ACU_1`` (vCPU=4, memory=16 GiB) or ``ACU_2`` (vCPU=8, memory=32 GiB).

              

            
            - **volumeSizeInGB** *(integer) --* **[REQUIRED]** 

              The size, in GB, of the persistent storage available to the resource instance used to execute the ``containerAction`` (min: 1, max: 50).

              

            
          
          - **variables** *(list) --* 

            The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of ``stringValue`` , ``datasetContentVersionValue`` , or ``outputFileUriValue`` .

            

          
            - *(dict) --* 

              An instance of a variable to be passed to the ``containerAction`` execution. Each variable must have a name and a value given by one of ``stringValue`` , ``datasetContentVersionValue`` , or ``outputFileUriValue`` .

              

            
              - **name** *(string) --* **[REQUIRED]** 

                The name of the variable.

                

              
              - **stringValue** *(string) --* 

                The value of the variable as a string.

                

              
              - **doubleValue** *(float) --* 

                The value of the variable as a double (numeric).

                

              
              - **datasetContentVersionValue** *(dict) --* 

                The value of the variable as a structure that specifies a dataset content version.

                

              
                - **datasetName** *(string) --* **[REQUIRED]** 

                  The name of the dataset whose latest contents are used as input to the notebook or application.

                  

                
              
              - **outputFileUriValue** *(dict) --* 

                The value of the variable as a structure that specifies an output file URI.

                

              
                - **fileName** *(string) --* **[REQUIRED]** 

                  The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.

                  

                
              
            
        
        
      
  
    :type triggers: list
    :param triggers: 

      A list of triggers. A trigger causes data set contents to be populated at a specified time interval or when another data set's contents are created. The list of triggers can be empty or contain up to five ``DataSetTrigger`` objects.

      

    
      - *(dict) --* 

        The ``DatasetTrigger`` that specifies when the data set is automatically updated.

        

      
        - **schedule** *(dict) --* 

          The Schedule when the trigger is initiated.

          

        
          - **expression** *(string) --* 

            The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the *Amazon CloudWatch Events User Guide* .

            

          
        
        - **dataset** *(dict) --* 

          The data set whose content creation triggers the creation of this data set's contents.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the dataset whose content generation triggers the new dataset content generation.

            

          
        
      
  
    :type contentDeliveryRules: list
    :param contentDeliveryRules: 

      When dataset contents are created, they are delivered to destinations specified here.

      

    
      - *(dict) --* 

        When dataset contents are created, they are delivered to destination specified here.

        

      
        - **entryName** *(string) --* 

          The name of the dataset content delivery rules entry.

          

        
        - **destination** *(dict) --* **[REQUIRED]** 

          The destination to which dataset contents are delivered.

          

        
          - **iotEventsDestinationConfiguration** *(dict) --* 

            Configuration information for delivery of dataset contents to AWS IoT Events.

            

          
            - **inputName** *(string) --* **[REQUIRED]** 

              The name of the AWS IoT Events input to which dataset contents are delivered.

              

            
            - **roleArn** *(string) --* **[REQUIRED]** 

              The ARN of the role that grants AWS IoT Analytics permission to deliver dataset contents to an AWS IoT Events input.

              

            
          
          - **s3DestinationConfiguration** *(dict) --* 

            Configuration information for delivery of dataset contents to Amazon S3.

            

          
            - **bucket** *(string) --* **[REQUIRED]** 

              The name of the S3 bucket to which dataset contents are delivered.

              

            
            - **key** *(string) --* **[REQUIRED]** 

              The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key.

               

              You can create a unique key with the following options:

               

               
              * Use ``!{iotanalytics:scheduleTime}`` to insert the time of a scheduled SQL query run. 
               
              * Use ``!{iotanalytics:versionId}`` to insert a unique hash that identifies a dataset content. 
               
              * Use ``!{iotanalytics:creationTime}`` to insert the creation time of a dataset content. 
               

               

              The following example creates a unique key for a CSV file: ``dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv``  

               

              .. note::

                 

                If you don't use ``!{iotanalytics:versionId}`` to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same ``scheduleTime`` but different ``versionId`` s. This means that one dataset content overwrites the other. 

                 

              

            
            - **glueConfiguration** *(dict) --* 

              Configuration information for coordination with AWS Glue, a fully managed extract, transform and load (ETL) service.

              

            
              - **tableName** *(string) --* **[REQUIRED]** 

                The name of the table in your AWS Glue Data Catalog that is used to perform the ETL operations. An AWS Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.

                

              
              - **databaseName** *(string) --* **[REQUIRED]** 

                The name of the database in your AWS Glue Data Catalog in which the table is located. An AWS Glue Data Catalog database contains metadata tables.

                

              
            
            - **roleArn** *(string) --* **[REQUIRED]** 

              The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 and AWS Glue resources.

              

            
          
        
      
  
    :type retentionPeriod: dict
    :param retentionPeriod: 

      Optional. How long, in days, versions of dataset contents are kept for the dataset. If not specified or set to ``null`` , versions of dataset contents are retained for at most 90 days. The number of versions of dataset contents retained is determined by the ``versioningConfiguration`` parameter. For more information, see `Keeping Multiple Versions of AWS IoT Analytics Data Sets <https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions>`__ in the *AWS IoT Analytics User Guide* .

      

    
      - **unlimited** *(boolean) --* 

        If true, message data is kept indefinitely.

        

      
      - **numberOfDays** *(integer) --* 

        The number of days that message data is kept. The ``unlimited`` parameter must be false.

        

      
    
    :type versioningConfiguration: dict
    :param versioningConfiguration: 

      Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the ``retentionPeriod`` parameter. For more information, see `Keeping Multiple Versions of AWS IoT Analytics Data Sets <https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions>`__ in the *AWS IoT Analytics User Guide* .

      

    
      - **unlimited** *(boolean) --* 

        If true, unlimited versions of dataset contents are kept.

        

      
      - **maxVersions** *(integer) --* 

        How many versions of dataset contents are kept. The ``unlimited`` parameter must be ``false`` .

        

      
    
    :type tags: list
    :param tags: 

      Metadata which can be used to manage the data set.

      

    
      - *(dict) --* 

        A set of key-value pairs that are used to manage the resource.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          The tag's key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    :type lateDataRules: list
    :param lateDataRules: 

      A list of data rules that send notifications to Amazon CloudWatch, when data arrives late. To specify ``lateDataRules`` , the dataset must use a `DeltaTimer <https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html>`__ filter.

      

    
      - *(dict) --* 

        A structure that contains the name and configuration information of a late data rule.

        

      
        - **ruleName** *(string) --* 

          The name of the late data rule.

          

        
        - **ruleConfiguration** *(dict) --* **[REQUIRED]** 

          The information needed to configure the late data rule.

          

        
          - **deltaTimeSessionWindowConfiguration** *(dict) --* 

            The information needed to configure a delta time session window.

            

          
            - **timeoutInMinutes** *(integer) --* **[REQUIRED]** 

              A time interval. You can use ``timeoutInMinutes`` so that AWS IoT Analytics can batch up late data notifications that have been generated since the last execution. AWS IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.

               

              For more information about how to write a timestamp expression, see `Date and Time Functions and Operators <https://prestodb.io/docs/0.172/functions/datetime.html>`__ , in the *Presto 0.172 Documentation* .

              

            
          
        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datasetName': 'string',
            'datasetArn': 'string',
            'retentionPeriod': {
                'unlimited': True|False,
                'numberOfDays': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datasetName** *(string) --* 

          The name of the dataset.

          
        

        - **datasetArn** *(string) --* 

          The ARN of the dataset.

          
        

        - **retentionPeriod** *(dict) --* 

          How long, in days, dataset contents are kept for the dataset.

          
          

          - **unlimited** *(boolean) --* 

            If true, message data is kept indefinitely.

            
          

          - **numberOfDays** *(integer) --* 

            The number of days that message data is kept. The ``unlimited`` parameter must be false.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_dataset_content(**kwargs)

    

    Creates the content of a data set by applying a ``queryAction`` (a SQL query) or a ``containerAction`` (executing a containerized application).

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateDatasetContent>`_    


    **Request Syntax** 
    ::

      response = client.create_dataset_content(
          datasetName='string',
          versionId='string'
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the dataset.

      

    
    :type versionId: string
    :param versionId: 

      The version ID of the dataset content. To specify ``versionId`` for a dataset content, the dataset must use a `DeltaTimer <https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html>`__ filter.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'versionId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **versionId** *(string) --* 

          The version ID of the dataset contents that are being created.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_datastore(**kwargs)

    

    Creates a data store, which is a repository for messages. Only data stores that are used to save pipeline data can be configured with ``ParquetConfiguration`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreateDatastore>`_    


    **Request Syntax** 
    ::

      response = client.create_datastore(
          datastoreName='string',
          datastoreStorage={
              'serviceManagedS3': {}
              ,
              'customerManagedS3': {
                  'bucket': 'string',
                  'keyPrefix': 'string',
                  'roleArn': 'string'
              }
          },
          retentionPeriod={
              'unlimited': True|False,
              'numberOfDays': 123
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          fileFormatConfiguration={
              'jsonConfiguration': {}
              ,
              'parquetConfiguration': {
                  'schemaDefinition': {
                      'columns': [
                          {
                              'name': 'string',
                              'type': 'string'
                          },
                      ]
                  }
              }
          },
          datastorePartitions={
              'partitions': [
                  {
                      'attributePartition': {
                          'attributeName': 'string'
                      },
                      'timestampPartition': {
                          'attributeName': 'string',
                          'timestampFormat': 'string'
                      }
                  },
              ]
          }
      )
    :type datastoreName: string
    :param datastoreName: **[REQUIRED]** 

      The name of the data store.

      

    
    :type datastoreStorage: dict
    :param datastoreStorage: 

      Where data store data is stored. You can choose one of ``serviceManagedS3`` or ``customerManagedS3`` storage. If not specified, the default is ``serviceManagedS3`` . You cannot change this storage option after the data store is created.

      

    
      - **serviceManagedS3** *(dict) --* 

        Use this to store data store data in an S3 bucket managed by AWS IoT Analytics. You cannot change the choice of service-managed or customer-managed S3 storage after the data store is created.

        

      
      
      - **customerManagedS3** *(dict) --* 

        Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the ``retentionPeriod`` parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.

        

      
        - **bucket** *(string) --* **[REQUIRED]** 

          The name of the S3 bucket in which data store data is stored.

          

        
        - **keyPrefix** *(string) --* 

          Optional. The prefix used to create the keys of the data store data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

          

        
        - **roleArn** *(string) --* **[REQUIRED]** 

          The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

          

        
      
    
    :type retentionPeriod: dict
    :param retentionPeriod: 

      How long, in days, message data is kept for the data store. When ``customerManagedS3`` storage is selected, this parameter is ignored.

      

    
      - **unlimited** *(boolean) --* 

        If true, message data is kept indefinitely.

        

      
      - **numberOfDays** *(integer) --* 

        The number of days that message data is kept. The ``unlimited`` parameter must be false.

        

      
    
    :type tags: list
    :param tags: 

      Metadata which can be used to manage the data store.

      

    
      - *(dict) --* 

        A set of key-value pairs that are used to manage the resource.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          The tag's key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    :type fileFormatConfiguration: dict
    :param fileFormatConfiguration: 

      Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and `Parquet <https://parquet.apache.org/>`__ .

       

      The default file format is JSON. You can specify only one format.

       

      You can't change the file format after you create the data store.

      

    
      - **jsonConfiguration** *(dict) --* 

        Contains the configuration information of the JSON format.

        

      
      
      - **parquetConfiguration** *(dict) --* 

        Contains the configuration information of the Parquet format.

        

      
        - **schemaDefinition** *(dict) --* 

          Information needed to define a schema.

          

        
          - **columns** *(list) --* 

            Specifies one or more columns that store your data.

             

            Each schema can have up to 100 columns. Each column can have up to 100 nested types.

            

          
            - *(dict) --* 

              Contains information about a column that stores your data.

              

            
              - **name** *(string) --* **[REQUIRED]** 

                The name of the column.

                

              
              - **type** *(string) --* **[REQUIRED]** 

                The type of data. For more information about the supported data types, see `Common data types <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html>`__ in the *AWS Glue Developer Guide* .

                

              
            
        
        
      
    
    :type datastorePartitions: dict
    :param datastorePartitions: 

      Contains information about the partitions in a data store. 

      

    
      - **partitions** *(list) --* 

        A list of partitions in a data store. 

        

      
        - *(dict) --* 

          A single partition in a data store. 

          

        
          - **attributePartition** *(dict) --* 

            A partition defined by an ``attributeName`` . 

            

          
            - **attributeName** *(string) --* **[REQUIRED]** 

              The attribute name of the partition. 

              

            
          
          - **timestampPartition** *(dict) --* 

            A partition defined by an ``attributeName`` and a timestamp format. 

            

          
            - **attributeName** *(string) --* **[REQUIRED]** 

              The attribute name of the partition defined by a timestamp. 

              

            
            - **timestampFormat** *(string) --* 

              The timestamp format of a partition defined by a timestamp. 

              

            
          
        
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datastoreName': 'string',
            'datastoreArn': 'string',
            'retentionPeriod': {
                'unlimited': True|False,
                'numberOfDays': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datastoreName** *(string) --* 

          The name of the data store.

          
        

        - **datastoreArn** *(string) --* 

          The ARN of the data store.

          
        

        - **retentionPeriod** *(dict) --* 

          How long, in days, message data is kept for the data store.

          
          

          - **unlimited** *(boolean) --* 

            If true, message data is kept indefinitely.

            
          

          - **numberOfDays** *(integer) --* 

            The number of days that message data is kept. The ``unlimited`` parameter must be false.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_pipeline(**kwargs)

    

    Creates a pipeline. A pipeline consumes messages from a channel and allows you to process the messages before storing them in a data store. You must specify both a ``channel`` and a ``datastore`` activity and, optionally, as many as 23 additional activities in the ``pipelineActivities`` array.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/CreatePipeline>`_    


    **Request Syntax** 
    ::

      response = client.create_pipeline(
          pipelineName='string',
          pipelineActivities=[
              {
                  'channel': {
                      'name': 'string',
                      'channelName': 'string',
                      'next': 'string'
                  },
                  'lambda': {
                      'name': 'string',
                      'lambdaName': 'string',
                      'batchSize': 123,
                      'next': 'string'
                  },
                  'datastore': {
                      'name': 'string',
                      'datastoreName': 'string'
                  },
                  'addAttributes': {
                      'name': 'string',
                      'attributes': {
                          'string': 'string'
                      },
                      'next': 'string'
                  },
                  'removeAttributes': {
                      'name': 'string',
                      'attributes': [
                          'string',
                      ],
                      'next': 'string'
                  },
                  'selectAttributes': {
                      'name': 'string',
                      'attributes': [
                          'string',
                      ],
                      'next': 'string'
                  },
                  'filter': {
                      'name': 'string',
                      'filter': 'string',
                      'next': 'string'
                  },
                  'math': {
                      'name': 'string',
                      'attribute': 'string',
                      'math': 'string',
                      'next': 'string'
                  },
                  'deviceRegistryEnrich': {
                      'name': 'string',
                      'attribute': 'string',
                      'thingName': 'string',
                      'roleArn': 'string',
                      'next': 'string'
                  },
                  'deviceShadowEnrich': {
                      'name': 'string',
                      'attribute': 'string',
                      'thingName': 'string',
                      'roleArn': 'string',
                      'next': 'string'
                  }
              },
          ],
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type pipelineName: string
    :param pipelineName: **[REQUIRED]** 

      The name of the pipeline.

      

    
    :type pipelineActivities: list
    :param pipelineActivities: **[REQUIRED]** 

      A list of ``PipelineActivity`` objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.

       

      The list can be 2-25 ``PipelineActivity`` objects and must contain both a ``channel`` and a ``datastore`` activity. Each entry in the list must contain only one activity. For example:

       

       ``pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]``  

      

    
      - *(dict) --* 

        An activity that performs a transformation on a message.

        

      
        - **channel** *(dict) --* 

          Determines the source of the messages to be processed.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the channel activity.

            

          
          - **channelName** *(string) --* **[REQUIRED]** 

            The name of the channel from which the messages are processed.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **lambda** *(dict) --* 

          Runs a Lambda function to modify the message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the lambda activity.

            

          
          - **lambdaName** *(string) --* **[REQUIRED]** 

            The name of the Lambda function that is run on the message.

            

          
          - **batchSize** *(integer) --* **[REQUIRED]** 

            The number of messages passed to the Lambda function for processing.

             

            The Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **datastore** *(dict) --* 

          Specifies where to store the processed message data.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the datastore activity.

            

          
          - **datastoreName** *(string) --* **[REQUIRED]** 

            The name of the data store where processed messages are stored.

            

          
        
        - **addAttributes** *(dict) --* 

          Adds other attributes based on existing attributes in the message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the addAttributes activity.

            

          
          - **attributes** *(dict) --* **[REQUIRED]** 

            A list of 1-50 ``AttributeNameMapping`` objects that map an existing attribute to a new attribute.

             

            .. note::

               

              The existing attributes remain in the message, so if you want to remove the originals, use ``RemoveAttributeActivity`` .

               

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **removeAttributes** *(dict) --* 

          Removes attributes from a message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``removeAttributes`` activity.

            

          
          - **attributes** *(list) --* **[REQUIRED]** 

            A list of 1-50 attributes to remove from the message.

            

          
            - *(string) --* 

            
        
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **selectAttributes** *(dict) --* 

          Creates a new message using only the specified attributes from the original message. 

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``selectAttributes`` activity.

            

          
          - **attributes** *(list) --* **[REQUIRED]** 

            A list of the attributes to select from the message.

            

          
            - *(string) --* 

            
        
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **filter** *(dict) --* 

          Filters a message based on its attributes.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the filter activity.

            

          
          - **filter** *(string) --* **[REQUIRED]** 

            An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. 

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **math** *(dict) --* 

          Computes an arithmetic expression using the message's attributes and adds it to the message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the math activity.

            

          
          - **attribute** *(string) --* **[REQUIRED]** 

            The name of the attribute that contains the result of the math operation.

            

          
          - **math** *(string) --* **[REQUIRED]** 

            An expression that uses one or more existing attributes and must return an integer value.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **deviceRegistryEnrich** *(dict) --* 

          Adds data from the AWS IoT device registry to your message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``deviceRegistryEnrich`` activity.

            

          
          - **attribute** *(string) --* **[REQUIRED]** 

            The name of the attribute that is added to the message.

            

          
          - **thingName** *(string) --* **[REQUIRED]** 

            The name of the IoT device whose registry information is added to the message.

            

          
          - **roleArn** *(string) --* **[REQUIRED]** 

            The ARN of the role that allows access to the device's registry information.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **deviceShadowEnrich** *(dict) --* 

          Adds information from the AWS IoT Device Shadow service to a message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``deviceShadowEnrich`` activity.

            

          
          - **attribute** *(string) --* **[REQUIRED]** 

            The name of the attribute that is added to the message.

            

          
          - **thingName** *(string) --* **[REQUIRED]** 

            The name of the IoT device whose shadow information is added to the message.

            

          
          - **roleArn** *(string) --* **[REQUIRED]** 

            The ARN of the role that allows access to the device's shadow.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
      
  
    :type tags: list
    :param tags: 

      Metadata which can be used to manage the pipeline.

      

    
      - *(dict) --* 

        A set of key-value pairs that are used to manage the resource.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          The tag's key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'pipelineName': 'string',
            'pipelineArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **pipelineName** *(string) --* 

          The name of the pipeline.

          
        

        - **pipelineArn** *(string) --* 

          The ARN of the pipeline.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    

  .. py:method:: delete_channel(**kwargs)

    

    Deletes the specified channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteChannel>`_    


    **Request Syntax** 
    ::

      response = client.delete_channel(
          channelName='string'
      )
    :type channelName: string
    :param channelName: **[REQUIRED]** 

      The name of the channel to delete.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_dataset(**kwargs)

    

    Deletes the specified dataset.

     

    You do not have to delete the content of the dataset before you perform this operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteDataset>`_    


    **Request Syntax** 
    ::

      response = client.delete_dataset(
          datasetName='string'
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the data set to delete.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_dataset_content(**kwargs)

    

    Deletes the content of the specified dataset.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteDatasetContent>`_    


    **Request Syntax** 
    ::

      response = client.delete_dataset_content(
          datasetName='string',
          versionId='string'
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the dataset whose content is deleted.

      

    
    :type versionId: string
    :param versionId: 

      The version of the dataset whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_datastore(**kwargs)

    

    Deletes the specified data store.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeleteDatastore>`_    


    **Request Syntax** 
    ::

      response = client.delete_datastore(
          datastoreName='string'
      )
    :type datastoreName: string
    :param datastoreName: **[REQUIRED]** 

      The name of the data store to delete.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_pipeline(**kwargs)

    

    Deletes the specified pipeline.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DeletePipeline>`_    


    **Request Syntax** 
    ::

      response = client.delete_pipeline(
          pipelineName='string'
      )
    :type pipelineName: string
    :param pipelineName: **[REQUIRED]** 

      The name of the pipeline to delete.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_channel(**kwargs)

    

    Retrieves information about a channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeChannel>`_    


    **Request Syntax** 
    ::

      response = client.describe_channel(
          channelName='string',
          includeStatistics=True|False
      )
    :type channelName: string
    :param channelName: **[REQUIRED]** 

      The name of the channel whose information is retrieved.

      

    
    :type includeStatistics: boolean
    :param includeStatistics: 

      If true, additional statistical information about the channel is included in the response. This feature cannot be used with a channel whose S3 storage is customer-managed.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'channel': {
                'name': 'string',
                'storage': {
                    'serviceManagedS3': {},
                    'customerManagedS3': {
                        'bucket': 'string',
                        'keyPrefix': 'string',
                        'roleArn': 'string'
                    }
                },
                'arn': 'string',
                'status': 'CREATING'|'ACTIVE'|'DELETING',
                'retentionPeriod': {
                    'unlimited': True|False,
                    'numberOfDays': 123
                },
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1),
                'lastMessageArrivalTime': datetime(2015, 1, 1)
            },
            'statistics': {
                'size': {
                    'estimatedSizeInBytes': 123.0,
                    'estimatedOn': datetime(2015, 1, 1)
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **channel** *(dict) --* 

          An object that contains information about the channel.

          
          

          - **name** *(string) --* 

            The name of the channel.

            
          

          - **storage** *(dict) --* 

            Where channel data is stored. You can choose one of ``serviceManagedS3`` or ``customerManagedS3`` storage. If not specified, the default is ``serviceManagedS3`` . You cannot change this storage option after the channel is created.

            
            

            - **serviceManagedS3** *(dict) --* 

              Use this to store channel data in an S3 bucket managed by AWS IoT Analytics. You cannot change the choice of service-managed or customer-managed S3 storage after the channel is created.

              
          
            

            - **customerManagedS3** *(dict) --* 

              Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the ``retentionPeriod`` parameter is ignored. You cannot change the choice of service-managed or customer-managed S3 storage after the channel is created.

              
              

              - **bucket** *(string) --* 

                The name of the S3 bucket in which channel data is stored.

                
              

              - **keyPrefix** *(string) --* 

                Optional. The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

                
              

              - **roleArn** *(string) --* 

                The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

                
          
        
          

          - **arn** *(string) --* 

            The ARN of the channel.

            
          

          - **status** *(string) --* 

            The status of the channel.

            
          

          - **retentionPeriod** *(dict) --* 

            How long, in days, message data is kept for the channel.

            
            

            - **unlimited** *(boolean) --* 

              If true, message data is kept indefinitely.

              
            

            - **numberOfDays** *(integer) --* 

              The number of days that message data is kept. The ``unlimited`` parameter must be false.

              
        
          

          - **creationTime** *(datetime) --* 

            When the channel was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            When the channel was last updated.

            
          

          - **lastMessageArrivalTime** *(datetime) --* 

            The last time when a new message arrived in the channel.

             

            AWS IoT Analytics updates this value at most once per minute for one channel. Hence, the ``lastMessageArrivalTime`` value is an approximation.

             

            This feature only applies to messages that arrived in the data store after October 23, 2020. 

            
      
        

        - **statistics** *(dict) --* 

          Statistics about the channel. Included if the ``includeStatistics`` parameter is set to ``true`` in the request.

          
          

          - **size** *(dict) --* 

            The estimated size of the channel.

            
            

            - **estimatedSizeInBytes** *(float) --* 

              The estimated size of the resource, in bytes.

              
            

            - **estimatedOn** *(datetime) --* 

              The time when the estimate of the size of the resource was made.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_dataset(**kwargs)

    

    Retrieves information about a dataset.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeDataset>`_    


    **Request Syntax** 
    ::

      response = client.describe_dataset(
          datasetName='string'
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the data set whose information is retrieved.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'dataset': {
                'name': 'string',
                'arn': 'string',
                'actions': [
                    {
                        'actionName': 'string',
                        'queryAction': {
                            'sqlQuery': 'string',
                            'filters': [
                                {
                                    'deltaTime': {
                                        'offsetSeconds': 123,
                                        'timeExpression': 'string'
                                    }
                                },
                            ]
                        },
                        'containerAction': {
                            'image': 'string',
                            'executionRoleArn': 'string',
                            'resourceConfiguration': {
                                'computeType': 'ACU_1'|'ACU_2',
                                'volumeSizeInGB': 123
                            },
                            'variables': [
                                {
                                    'name': 'string',
                                    'stringValue': 'string',
                                    'doubleValue': 123.0,
                                    'datasetContentVersionValue': {
                                        'datasetName': 'string'
                                    },
                                    'outputFileUriValue': {
                                        'fileName': 'string'
                                    }
                                },
                            ]
                        }
                    },
                ],
                'triggers': [
                    {
                        'schedule': {
                            'expression': 'string'
                        },
                        'dataset': {
                            'name': 'string'
                        }
                    },
                ],
                'contentDeliveryRules': [
                    {
                        'entryName': 'string',
                        'destination': {
                            'iotEventsDestinationConfiguration': {
                                'inputName': 'string',
                                'roleArn': 'string'
                            },
                            's3DestinationConfiguration': {
                                'bucket': 'string',
                                'key': 'string',
                                'glueConfiguration': {
                                    'tableName': 'string',
                                    'databaseName': 'string'
                                },
                                'roleArn': 'string'
                            }
                        }
                    },
                ],
                'status': 'CREATING'|'ACTIVE'|'DELETING',
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1),
                'retentionPeriod': {
                    'unlimited': True|False,
                    'numberOfDays': 123
                },
                'versioningConfiguration': {
                    'unlimited': True|False,
                    'maxVersions': 123
                },
                'lateDataRules': [
                    {
                        'ruleName': 'string',
                        'ruleConfiguration': {
                            'deltaTimeSessionWindowConfiguration': {
                                'timeoutInMinutes': 123
                            }
                        }
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **dataset** *(dict) --* 

          An object that contains information about the data set.

          
          

          - **name** *(string) --* 

            The name of the data set.

            
          

          - **arn** *(string) --* 

            The ARN of the data set.

            
          

          - **actions** *(list) --* 

            The ``DatasetAction`` objects that automatically create the data set contents.

            
            

            - *(dict) --* 

              A ``DatasetAction`` object that specifies how data set contents are automatically created.

              
              

              - **actionName** *(string) --* 

                The name of the data set action by which data set contents are automatically created.

                
              

              - **queryAction** *(dict) --* 

                An ``SqlQueryDatasetAction`` object that uses an SQL query to automatically create data set contents.

                
                

                - **sqlQuery** *(string) --* 

                  A SQL query string.

                  
                

                - **filters** *(list) --* 

                  Prefilters applied to message data.

                  
                  

                  - *(dict) --* 

                    Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.

                    
                    

                    - **deltaTime** *(dict) --* 

                      Used to limit data to that which has arrived since the last execution of the action.

                      
                      

                      - **offsetSeconds** *(integer) --* 

                        The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.

                        
                      

                      - **timeExpression** *(string) --* 

                        An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.

                        
                  
                
              
            
              

              - **containerAction** *(dict) --* 

                Information that allows the system to run a containerized application to create the dataset contents. The application must be in a Docker container along with any required support libraries.

                
                

                - **image** *(string) --* 

                  The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.

                  
                

                - **executionRoleArn** *(string) --* 

                  The ARN of the role that gives permission to the system to access required resources to run the ``containerAction`` . This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.

                  
                

                - **resourceConfiguration** *(dict) --* 

                  Configuration of the resource that executes the ``containerAction`` .

                  
                  

                  - **computeType** *(string) --* 

                    The type of the compute resource used to execute the ``containerAction`` . Possible values are: ``ACU_1`` (vCPU=4, memory=16 GiB) or ``ACU_2`` (vCPU=8, memory=32 GiB).

                    
                  

                  - **volumeSizeInGB** *(integer) --* 

                    The size, in GB, of the persistent storage available to the resource instance used to execute the ``containerAction`` (min: 1, max: 50).

                    
              
                

                - **variables** *(list) --* 

                  The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of ``stringValue`` , ``datasetContentVersionValue`` , or ``outputFileUriValue`` .

                  
                  

                  - *(dict) --* 

                    An instance of a variable to be passed to the ``containerAction`` execution. Each variable must have a name and a value given by one of ``stringValue`` , ``datasetContentVersionValue`` , or ``outputFileUriValue`` .

                    
                    

                    - **name** *(string) --* 

                      The name of the variable.

                      
                    

                    - **stringValue** *(string) --* 

                      The value of the variable as a string.

                      
                    

                    - **doubleValue** *(float) --* 

                      The value of the variable as a double (numeric).

                      
                    

                    - **datasetContentVersionValue** *(dict) --* 

                      The value of the variable as a structure that specifies a dataset content version.

                      
                      

                      - **datasetName** *(string) --* 

                        The name of the dataset whose latest contents are used as input to the notebook or application.

                        
                  
                    

                    - **outputFileUriValue** *(dict) --* 

                      The value of the variable as a structure that specifies an output file URI.

                      
                      

                      - **fileName** *(string) --* 

                        The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.

                        
                  
                
              
            
          
        
          

          - **triggers** *(list) --* 

            The ``DatasetTrigger`` objects that specify when the data set is automatically updated.

            
            

            - *(dict) --* 

              The ``DatasetTrigger`` that specifies when the data set is automatically updated.

              
              

              - **schedule** *(dict) --* 

                The Schedule when the trigger is initiated.

                
                

                - **expression** *(string) --* 

                  The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the *Amazon CloudWatch Events User Guide* .

                  
            
              

              - **dataset** *(dict) --* 

                The data set whose content creation triggers the creation of this data set's contents.

                
                

                - **name** *(string) --* 

                  The name of the dataset whose content generation triggers the new dataset content generation.

                  
            
          
        
          

          - **contentDeliveryRules** *(list) --* 

            When dataset contents are created they are delivered to destinations specified here.

            
            

            - *(dict) --* 

              When dataset contents are created, they are delivered to destination specified here.

              
              

              - **entryName** *(string) --* 

                The name of the dataset content delivery rules entry.

                
              

              - **destination** *(dict) --* 

                The destination to which dataset contents are delivered.

                
                

                - **iotEventsDestinationConfiguration** *(dict) --* 

                  Configuration information for delivery of dataset contents to AWS IoT Events.

                  
                  

                  - **inputName** *(string) --* 

                    The name of the AWS IoT Events input to which dataset contents are delivered.

                    
                  

                  - **roleArn** *(string) --* 

                    The ARN of the role that grants AWS IoT Analytics permission to deliver dataset contents to an AWS IoT Events input.

                    
              
                

                - **s3DestinationConfiguration** *(dict) --* 

                  Configuration information for delivery of dataset contents to Amazon S3.

                  
                  

                  - **bucket** *(string) --* 

                    The name of the S3 bucket to which dataset contents are delivered.

                    
                  

                  - **key** *(string) --* 

                    The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key.

                     

                    You can create a unique key with the following options:

                     

                     
                    * Use ``!{iotanalytics:scheduleTime}`` to insert the time of a scheduled SQL query run. 
                     
                    * Use ``!{iotanalytics:versionId}`` to insert a unique hash that identifies a dataset content. 
                     
                    * Use ``!{iotanalytics:creationTime}`` to insert the creation time of a dataset content. 
                     

                     

                    The following example creates a unique key for a CSV file: ``dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv``  

                     

                    .. note::

                       

                      If you don't use ``!{iotanalytics:versionId}`` to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same ``scheduleTime`` but different ``versionId`` s. This means that one dataset content overwrites the other. 

                       

                    
                  

                  - **glueConfiguration** *(dict) --* 

                    Configuration information for coordination with AWS Glue, a fully managed extract, transform and load (ETL) service.

                    
                    

                    - **tableName** *(string) --* 

                      The name of the table in your AWS Glue Data Catalog that is used to perform the ETL operations. An AWS Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.

                      
                    

                    - **databaseName** *(string) --* 

                      The name of the database in your AWS Glue Data Catalog in which the table is located. An AWS Glue Data Catalog database contains metadata tables.

                      
                
                  

                  - **roleArn** *(string) --* 

                    The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 and AWS Glue resources.

                    
              
            
          
        
          

          - **status** *(string) --* 

            The status of the data set.

            
          

          - **creationTime** *(datetime) --* 

            When the data set was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The last time the data set was updated.

            
          

          - **retentionPeriod** *(dict) --* 

            Optional. How long, in days, message data is kept for the data set.

            
            

            - **unlimited** *(boolean) --* 

              If true, message data is kept indefinitely.

              
            

            - **numberOfDays** *(integer) --* 

              The number of days that message data is kept. The ``unlimited`` parameter must be false.

              
        
          

          - **versioningConfiguration** *(dict) --* 

            Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the ``retentionPeriod`` parameter. For more information, see `Keeping Multiple Versions of AWS IoT Analytics Data Sets <https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions>`__ in the *AWS IoT Analytics User Guide* .

            
            

            - **unlimited** *(boolean) --* 

              If true, unlimited versions of dataset contents are kept.

              
            

            - **maxVersions** *(integer) --* 

              How many versions of dataset contents are kept. The ``unlimited`` parameter must be ``false`` .

              
        
          

          - **lateDataRules** *(list) --* 

            A list of data rules that send notifications to Amazon CloudWatch, when data arrives late. To specify ``lateDataRules`` , the dataset must use a `DeltaTimer <https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html>`__ filter.

            
            

            - *(dict) --* 

              A structure that contains the name and configuration information of a late data rule.

              
              

              - **ruleName** *(string) --* 

                The name of the late data rule.

                
              

              - **ruleConfiguration** *(dict) --* 

                The information needed to configure the late data rule.

                
                

                - **deltaTimeSessionWindowConfiguration** *(dict) --* 

                  The information needed to configure a delta time session window.

                  
                  

                  - **timeoutInMinutes** *(integer) --* 

                    A time interval. You can use ``timeoutInMinutes`` so that AWS IoT Analytics can batch up late data notifications that have been generated since the last execution. AWS IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.

                     

                    For more information about how to write a timestamp expression, see `Date and Time Functions and Operators <https://prestodb.io/docs/0.172/functions/datetime.html>`__ , in the *Presto 0.172 Documentation* .

                    
              
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_datastore(**kwargs)

    

    Retrieves information about a data store.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeDatastore>`_    


    **Request Syntax** 
    ::

      response = client.describe_datastore(
          datastoreName='string',
          includeStatistics=True|False
      )
    :type datastoreName: string
    :param datastoreName: **[REQUIRED]** 

      The name of the data store

      

    
    :type includeStatistics: boolean
    :param includeStatistics: 

      If true, additional statistical information about the data store is included in the response. This feature cannot be used with a data store whose S3 storage is customer-managed.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datastore': {
                'name': 'string',
                'storage': {
                    'serviceManagedS3': {},
                    'customerManagedS3': {
                        'bucket': 'string',
                        'keyPrefix': 'string',
                        'roleArn': 'string'
                    }
                },
                'arn': 'string',
                'status': 'CREATING'|'ACTIVE'|'DELETING',
                'retentionPeriod': {
                    'unlimited': True|False,
                    'numberOfDays': 123
                },
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1),
                'lastMessageArrivalTime': datetime(2015, 1, 1),
                'fileFormatConfiguration': {
                    'jsonConfiguration': {},
                    'parquetConfiguration': {
                        'schemaDefinition': {
                            'columns': [
                                {
                                    'name': 'string',
                                    'type': 'string'
                                },
                            ]
                        }
                    }
                },
                'datastorePartitions': {
                    'partitions': [
                        {
                            'attributePartition': {
                                'attributeName': 'string'
                            },
                            'timestampPartition': {
                                'attributeName': 'string',
                                'timestampFormat': 'string'
                            }
                        },
                    ]
                }
            },
            'statistics': {
                'size': {
                    'estimatedSizeInBytes': 123.0,
                    'estimatedOn': datetime(2015, 1, 1)
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datastore** *(dict) --* 

          Information about the data store.

          
          

          - **name** *(string) --* 

            The name of the data store.

            
          

          - **storage** *(dict) --* 

            Where data store data is stored. You can choose one of ``serviceManagedS3`` or ``customerManagedS3`` storage. If not specified, the default is ``serviceManagedS3`` . You cannot change this storage option after the data store is created.

            
            

            - **serviceManagedS3** *(dict) --* 

              Use this to store data store data in an S3 bucket managed by AWS IoT Analytics. You cannot change the choice of service-managed or customer-managed S3 storage after the data store is created.

              
          
            

            - **customerManagedS3** *(dict) --* 

              Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the ``retentionPeriod`` parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.

              
              

              - **bucket** *(string) --* 

                The name of the S3 bucket in which data store data is stored.

                
              

              - **keyPrefix** *(string) --* 

                Optional. The prefix used to create the keys of the data store data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

                
              

              - **roleArn** *(string) --* 

                The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

                
          
        
          

          - **arn** *(string) --* 

            The ARN of the data store.

            
          

          - **status** *(string) --* 

            The status of a data store:

              CREATING  

            The data store is being created.

              ACTIVE  

            The data store has been created and can be used.

              DELETING  

            The data store is being deleted.

              
          

          - **retentionPeriod** *(dict) --* 

            How long, in days, message data is kept for the data store. When ``customerManagedS3`` storage is selected, this parameter is ignored.

            
            

            - **unlimited** *(boolean) --* 

              If true, message data is kept indefinitely.

              
            

            - **numberOfDays** *(integer) --* 

              The number of days that message data is kept. The ``unlimited`` parameter must be false.

              
        
          

          - **creationTime** *(datetime) --* 

            When the data store was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The last time the data store was updated.

            
          

          - **lastMessageArrivalTime** *(datetime) --* 

            The last time when a new message arrived in the data store.

             

            AWS IoT Analytics updates this value at most once per minute for one data store. Hence, the ``lastMessageArrivalTime`` value is an approximation.

             

            This feature only applies to messages that arrived in the data store after October 23, 2020. 

            
          

          - **fileFormatConfiguration** *(dict) --* 

            Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and `Parquet <https://parquet.apache.org/>`__ .

             

            The default file format is JSON. You can specify only one format.

             

            You can't change the file format after you create the data store.

            
            

            - **jsonConfiguration** *(dict) --* 

              Contains the configuration information of the JSON format.

              
          
            

            - **parquetConfiguration** *(dict) --* 

              Contains the configuration information of the Parquet format.

              
              

              - **schemaDefinition** *(dict) --* 

                Information needed to define a schema.

                
                

                - **columns** *(list) --* 

                  Specifies one or more columns that store your data.

                   

                  Each schema can have up to 100 columns. Each column can have up to 100 nested types.

                  
                  

                  - *(dict) --* 

                    Contains information about a column that stores your data.

                    
                    

                    - **name** *(string) --* 

                      The name of the column.

                      
                    

                    - **type** *(string) --* 

                      The type of data. For more information about the supported data types, see `Common data types <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html>`__ in the *AWS Glue Developer Guide* .

                      
                
              
            
          
        
          

          - **datastorePartitions** *(dict) --* 

            Contains information about the partitions in a data store. 

            
            

            - **partitions** *(list) --* 

              A list of partitions in a data store. 

              
              

              - *(dict) --* 

                A single partition in a data store. 

                
                

                - **attributePartition** *(dict) --* 

                  A partition defined by an ``attributeName`` . 

                  
                  

                  - **attributeName** *(string) --* 

                    The attribute name of the partition. 

                    
              
                

                - **timestampPartition** *(dict) --* 

                  A partition defined by an ``attributeName`` and a timestamp format. 

                  
                  

                  - **attributeName** *(string) --* 

                    The attribute name of the partition defined by a timestamp. 

                    
                  

                  - **timestampFormat** *(string) --* 

                    The timestamp format of a partition defined by a timestamp. 

                    
              
            
          
        
      
        

        - **statistics** *(dict) --* 

          Additional statistical information about the data store. Included if the ``includeStatistics`` parameter is set to ``true`` in the request.

          
          

          - **size** *(dict) --* 

            The estimated size of the data store.

            
            

            - **estimatedSizeInBytes** *(float) --* 

              The estimated size of the resource, in bytes.

              
            

            - **estimatedOn** *(datetime) --* 

              The time when the estimate of the size of the resource was made.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_logging_options()

    

    Retrieves the current settings of the AWS IoT Analytics logging options.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribeLoggingOptions>`_    


    **Request Syntax** 
    ::

      response = client.describe_logging_options()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'loggingOptions': {
                'roleArn': 'string',
                'level': 'ERROR',
                'enabled': True|False
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **loggingOptions** *(dict) --* 

          The current settings of the AWS IoT Analytics logging options.

          
          

          - **roleArn** *(string) --* 

            The ARN of the role that grants permission to AWS IoT Analytics to perform logging.

            
          

          - **level** *(string) --* 

            The logging level. Currently, only ERROR is supported.

            
          

          - **enabled** *(boolean) --* 

            If true, logging is enabled for AWS IoT Analytics.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_pipeline(**kwargs)

    

    Retrieves information about a pipeline.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/DescribePipeline>`_    


    **Request Syntax** 
    ::

      response = client.describe_pipeline(
          pipelineName='string'
      )
    :type pipelineName: string
    :param pipelineName: **[REQUIRED]** 

      The name of the pipeline whose information is retrieved.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'pipeline': {
                'name': 'string',
                'arn': 'string',
                'activities': [
                    {
                        'channel': {
                            'name': 'string',
                            'channelName': 'string',
                            'next': 'string'
                        },
                        'lambda': {
                            'name': 'string',
                            'lambdaName': 'string',
                            'batchSize': 123,
                            'next': 'string'
                        },
                        'datastore': {
                            'name': 'string',
                            'datastoreName': 'string'
                        },
                        'addAttributes': {
                            'name': 'string',
                            'attributes': {
                                'string': 'string'
                            },
                            'next': 'string'
                        },
                        'removeAttributes': {
                            'name': 'string',
                            'attributes': [
                                'string',
                            ],
                            'next': 'string'
                        },
                        'selectAttributes': {
                            'name': 'string',
                            'attributes': [
                                'string',
                            ],
                            'next': 'string'
                        },
                        'filter': {
                            'name': 'string',
                            'filter': 'string',
                            'next': 'string'
                        },
                        'math': {
                            'name': 'string',
                            'attribute': 'string',
                            'math': 'string',
                            'next': 'string'
                        },
                        'deviceRegistryEnrich': {
                            'name': 'string',
                            'attribute': 'string',
                            'thingName': 'string',
                            'roleArn': 'string',
                            'next': 'string'
                        },
                        'deviceShadowEnrich': {
                            'name': 'string',
                            'attribute': 'string',
                            'thingName': 'string',
                            'roleArn': 'string',
                            'next': 'string'
                        }
                    },
                ],
                'reprocessingSummaries': [
                    {
                        'id': 'string',
                        'status': 'RUNNING'|'SUCCEEDED'|'CANCELLED'|'FAILED',
                        'creationTime': datetime(2015, 1, 1)
                    },
                ],
                'creationTime': datetime(2015, 1, 1),
                'lastUpdateTime': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **pipeline** *(dict) --* 

          A ``Pipeline`` object that contains information about the pipeline.

          
          

          - **name** *(string) --* 

            The name of the pipeline.

            
          

          - **arn** *(string) --* 

            The ARN of the pipeline.

            
          

          - **activities** *(list) --* 

            The activities that perform transformations on the messages.

            
            

            - *(dict) --* 

              An activity that performs a transformation on a message.

              
              

              - **channel** *(dict) --* 

                Determines the source of the messages to be processed.

                
                

                - **name** *(string) --* 

                  The name of the channel activity.

                  
                

                - **channelName** *(string) --* 

                  The name of the channel from which the messages are processed.

                  
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **lambda** *(dict) --* 

                Runs a Lambda function to modify the message.

                
                

                - **name** *(string) --* 

                  The name of the lambda activity.

                  
                

                - **lambdaName** *(string) --* 

                  The name of the Lambda function that is run on the message.

                  
                

                - **batchSize** *(integer) --* 

                  The number of messages passed to the Lambda function for processing.

                   

                  The Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.

                  
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **datastore** *(dict) --* 

                Specifies where to store the processed message data.

                
                

                - **name** *(string) --* 

                  The name of the datastore activity.

                  
                

                - **datastoreName** *(string) --* 

                  The name of the data store where processed messages are stored.

                  
            
              

              - **addAttributes** *(dict) --* 

                Adds other attributes based on existing attributes in the message.

                
                

                - **name** *(string) --* 

                  The name of the addAttributes activity.

                  
                

                - **attributes** *(dict) --* 

                  A list of 1-50 ``AttributeNameMapping`` objects that map an existing attribute to a new attribute.

                   

                  .. note::

                     

                    The existing attributes remain in the message, so if you want to remove the originals, use ``RemoveAttributeActivity`` .

                     

                  
                  

                  - *(string) --* 
                    

                    - *(string) --* 
              
            
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **removeAttributes** *(dict) --* 

                Removes attributes from a message.

                
                

                - **name** *(string) --* 

                  The name of the ``removeAttributes`` activity.

                  
                

                - **attributes** *(list) --* 

                  A list of 1-50 attributes to remove from the message.

                  
                  

                  - *(string) --* 
              
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **selectAttributes** *(dict) --* 

                Creates a new message using only the specified attributes from the original message. 

                
                

                - **name** *(string) --* 

                  The name of the ``selectAttributes`` activity.

                  
                

                - **attributes** *(list) --* 

                  A list of the attributes to select from the message.

                  
                  

                  - *(string) --* 
              
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **filter** *(dict) --* 

                Filters a message based on its attributes.

                
                

                - **name** *(string) --* 

                  The name of the filter activity.

                  
                

                - **filter** *(string) --* 

                  An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. 

                  
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **math** *(dict) --* 

                Computes an arithmetic expression using the message's attributes and adds it to the message.

                
                

                - **name** *(string) --* 

                  The name of the math activity.

                  
                

                - **attribute** *(string) --* 

                  The name of the attribute that contains the result of the math operation.

                  
                

                - **math** *(string) --* 

                  An expression that uses one or more existing attributes and must return an integer value.

                  
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **deviceRegistryEnrich** *(dict) --* 

                Adds data from the AWS IoT device registry to your message.

                
                

                - **name** *(string) --* 

                  The name of the ``deviceRegistryEnrich`` activity.

                  
                

                - **attribute** *(string) --* 

                  The name of the attribute that is added to the message.

                  
                

                - **thingName** *(string) --* 

                  The name of the IoT device whose registry information is added to the message.

                  
                

                - **roleArn** *(string) --* 

                  The ARN of the role that allows access to the device's registry information.

                  
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
              

              - **deviceShadowEnrich** *(dict) --* 

                Adds information from the AWS IoT Device Shadow service to a message.

                
                

                - **name** *(string) --* 

                  The name of the ``deviceShadowEnrich`` activity.

                  
                

                - **attribute** *(string) --* 

                  The name of the attribute that is added to the message.

                  
                

                - **thingName** *(string) --* 

                  The name of the IoT device whose shadow information is added to the message.

                  
                

                - **roleArn** *(string) --* 

                  The ARN of the role that allows access to the device's shadow.

                  
                

                - **next** *(string) --* 

                  The next activity in the pipeline.

                  
            
          
        
          

          - **reprocessingSummaries** *(list) --* 

            A summary of information about the pipeline reprocessing.

            
            

            - *(dict) --* 

              Information about pipeline reprocessing.

              
              

              - **id** *(string) --* 

                The ``reprocessingId`` returned by ``StartPipelineReprocessing`` .

                
              

              - **status** *(string) --* 

                The status of the pipeline reprocessing.

                
              

              - **creationTime** *(datetime) --* 

                The time the pipeline reprocessing was created.

                
          
        
          

          - **creationTime** *(datetime) --* 

            When the pipeline was created.

            
          

          - **lastUpdateTime** *(datetime) --* 

            The last time the pipeline was updated.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_dataset_content(**kwargs)

    

    Retrieves the contents of a data set as presigned URIs.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/GetDatasetContent>`_    


    **Request Syntax** 
    ::

      response = client.get_dataset_content(
          datasetName='string',
          versionId='string'
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the data set whose contents are retrieved.

      

    
    :type versionId: string
    :param versionId: 

      The version of the data set whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'entries': [
                {
                    'entryName': 'string',
                    'dataURI': 'string'
                },
            ],
            'timestamp': datetime(2015, 1, 1),
            'status': {
                'state': 'CREATING'|'SUCCEEDED'|'FAILED',
                'reason': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **entries** *(list) --* 

          A list of ``DatasetEntry`` objects.

          
          

          - *(dict) --* 

            The reference to a data set entry.

            
            

            - **entryName** *(string) --* 

              The name of the data set item.

              
            

            - **dataURI** *(string) --* 

              The presigned URI of the data set item.

              
        
      
        

        - **timestamp** *(datetime) --* 

          The time when the request was made.

          
        

        - **status** *(dict) --* 

          The status of the data set content.

          
          

          - **state** *(string) --* 

            The state of the data set contents. Can be one of READY, CREATING, SUCCEEDED, or FAILED.

            
          

          - **reason** *(string) --* 

            The reason the data set contents are in this state.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_channels(**kwargs)

    

    Retrieves a list of channels.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListChannels>`_    


    **Request Syntax** 
    ::

      response = client.list_channels(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return in this request.

       

      The default value is 100.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'channelSummaries': [
                {
                    'channelName': 'string',
                    'channelStorage': {
                        'serviceManagedS3': {},
                        'customerManagedS3': {
                            'bucket': 'string',
                            'keyPrefix': 'string',
                            'roleArn': 'string'
                        }
                    },
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1),
                    'lastMessageArrivalTime': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **channelSummaries** *(list) --* 

          A list of ``ChannelSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a channel.

            
            

            - **channelName** *(string) --* 

              The name of the channel.

              
            

            - **channelStorage** *(dict) --* 

              Where channel data is stored.

              
              

              - **serviceManagedS3** *(dict) --* 

                Used to store channel data in an S3 bucket managed by AWS IoT Analytics.

                
            
              

              - **customerManagedS3** *(dict) --* 

                Used to store channel data in an S3 bucket that you manage.

                
                

                - **bucket** *(string) --* 

                  The name of the S3 bucket in which channel data is stored.

                  
                

                - **keyPrefix** *(string) --* 

                  Optional. The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).

                  
                

                - **roleArn** *(string) --* 

                  The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

                  
            
          
            

            - **status** *(string) --* 

              The status of the channel.

              
            

            - **creationTime** *(datetime) --* 

              When the channel was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The last time the channel was updated.

              
            

            - **lastMessageArrivalTime** *(datetime) --* 

              The last time when a new message arrived in the channel.

               

              AWS IoT Analytics updates this value at most once per minute for one channel. Hence, the ``lastMessageArrivalTime`` value is an approximation.

               

              This feature only applies to messages that arrived in the data store after October 23, 2020. 

              
        
      
        

        - **nextToken** *(string) --* 

          The token to retrieve the next set of results, or ``null`` if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_dataset_contents(**kwargs)

    

    Lists information about data set contents that have been created.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatasetContents>`_    


    **Request Syntax** 
    ::

      response = client.list_dataset_contents(
          datasetName='string',
          nextToken='string',
          maxResults=123,
          scheduledOnOrAfter=datetime(2015, 1, 1),
          scheduledBefore=datetime(2015, 1, 1)
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the data set whose contents information you want to list.

      

    
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return in this request.

      

    
    :type scheduledOnOrAfter: datetime
    :param scheduledOnOrAfter: 

      A filter to limit results to those data set contents whose creation is scheduled on or after the given time. See the field ``triggers.schedule`` in the ``CreateDataset`` request. (timestamp)

      

    
    :type scheduledBefore: datetime
    :param scheduledBefore: 

      A filter to limit results to those data set contents whose creation is scheduled before the given time. See the field ``triggers.schedule`` in the ``CreateDataset`` request. (timestamp)

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datasetContentSummaries': [
                {
                    'version': 'string',
                    'status': {
                        'state': 'CREATING'|'SUCCEEDED'|'FAILED',
                        'reason': 'string'
                    },
                    'creationTime': datetime(2015, 1, 1),
                    'scheduleTime': datetime(2015, 1, 1),
                    'completionTime': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datasetContentSummaries** *(list) --* 

          Summary information about data set contents that have been created.

          
          

          - *(dict) --* 

            Summary information about dataset contents.

            
            

            - **version** *(string) --* 

              The version of the dataset contents.

              
            

            - **status** *(dict) --* 

              The status of the data set contents.

              
              

              - **state** *(string) --* 

                The state of the data set contents. Can be one of READY, CREATING, SUCCEEDED, or FAILED.

                
              

              - **reason** *(string) --* 

                The reason the data set contents are in this state.

                
          
            

            - **creationTime** *(datetime) --* 

              The actual time the creation of the dataset contents was started.

              
            

            - **scheduleTime** *(datetime) --* 

              The time the creation of the dataset contents was scheduled to start.

              
            

            - **completionTime** *(datetime) --* 

              The time the dataset content status was updated to SUCCEEDED or FAILED.

              
        
      
        

        - **nextToken** *(string) --* 

          The token to retrieve the next set of results, or ``null`` if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: list_datasets(**kwargs)

    

    Retrieves information about data sets.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatasets>`_    


    **Request Syntax** 
    ::

      response = client.list_datasets(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return in this request.

       

      The default value is 100.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datasetSummaries': [
                {
                    'datasetName': 'string',
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1),
                    'triggers': [
                        {
                            'schedule': {
                                'expression': 'string'
                            },
                            'dataset': {
                                'name': 'string'
                            }
                        },
                    ],
                    'actions': [
                        {
                            'actionName': 'string',
                            'actionType': 'QUERY'|'CONTAINER'
                        },
                    ]
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datasetSummaries** *(list) --* 

          A list of ``DatasetSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a data set.

            
            

            - **datasetName** *(string) --* 

              The name of the data set.

              
            

            - **status** *(string) --* 

              The status of the data set.

              
            

            - **creationTime** *(datetime) --* 

              The time the data set was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The last time the data set was updated.

              
            

            - **triggers** *(list) --* 

              A list of triggers. A trigger causes data set content to be populated at a specified time interval or when another data set is populated. The list of triggers can be empty or contain up to five ``DataSetTrigger`` objects

              
              

              - *(dict) --* 

                The ``DatasetTrigger`` that specifies when the data set is automatically updated.

                
                

                - **schedule** *(dict) --* 

                  The Schedule when the trigger is initiated.

                  
                  

                  - **expression** *(string) --* 

                    The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the *Amazon CloudWatch Events User Guide* .

                    
              
                

                - **dataset** *(dict) --* 

                  The data set whose content creation triggers the creation of this data set's contents.

                  
                  

                  - **name** *(string) --* 

                    The name of the dataset whose content generation triggers the new dataset content generation.

                    
              
            
          
            

            - **actions** *(list) --* 

              A list of ``DataActionSummary`` objects.

              
              

              - *(dict) --* 

                Information about the action that automatically creates the dataset's contents.

                
                

                - **actionName** *(string) --* 

                  The name of the action that automatically creates the dataset's contents.

                  
                

                - **actionType** *(string) --* 

                  The type of action by which the dataset's contents are automatically created.

                  
            
          
        
      
        

        - **nextToken** *(string) --* 

          The token to retrieve the next set of results, or ``null`` if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_datastores(**kwargs)

    

    Retrieves a list of data stores.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatastores>`_    


    **Request Syntax** 
    ::

      response = client.list_datastores(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return in this request.

       

      The default value is 100.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datastoreSummaries': [
                {
                    'datastoreName': 'string',
                    'datastoreStorage': {
                        'serviceManagedS3': {},
                        'customerManagedS3': {
                            'bucket': 'string',
                            'keyPrefix': 'string',
                            'roleArn': 'string'
                        }
                    },
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1),
                    'lastMessageArrivalTime': datetime(2015, 1, 1),
                    'fileFormatType': 'JSON'|'PARQUET',
                    'datastorePartitions': {
                        'partitions': [
                            {
                                'attributePartition': {
                                    'attributeName': 'string'
                                },
                                'timestampPartition': {
                                    'attributeName': 'string',
                                    'timestampFormat': 'string'
                                }
                            },
                        ]
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datastoreSummaries** *(list) --* 

          A list of ``DatastoreSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a data store.

            
            

            - **datastoreName** *(string) --* 

              The name of the data store.

              
            

            - **datastoreStorage** *(dict) --* 

              Where data store data is stored.

              
              

              - **serviceManagedS3** *(dict) --* 

                Used to store data store data in an S3 bucket managed by AWS IoT Analytics.

                
            
              

              - **customerManagedS3** *(dict) --* 

                Used to store data store data in an S3 bucket that you manage.

                
                

                - **bucket** *(string) --* 

                  The name of the S3 bucket in which data store data is stored.

                  
                

                - **keyPrefix** *(string) --* 

                  Optional. The prefix used to create the keys of the data store data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

                  
                

                - **roleArn** *(string) --* 

                  The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

                  
            
          
            

            - **status** *(string) --* 

              The status of the data store.

              
            

            - **creationTime** *(datetime) --* 

              When the data store was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The last time the data store was updated.

              
            

            - **lastMessageArrivalTime** *(datetime) --* 

              The last time when a new message arrived in the data store.

               

              AWS IoT Analytics updates this value at most once per minute for one data store. Hence, the ``lastMessageArrivalTime`` value is an approximation.

               

              This feature only applies to messages that arrived in the data store after October 23, 2020. 

              
            

            - **fileFormatType** *(string) --* 

              The file format of the data in the data store.

              
            

            - **datastorePartitions** *(dict) --* 

              Contains information about the partitions in a data store. 

              
              

              - **partitions** *(list) --* 

                A list of partitions in a data store. 

                
                

                - *(dict) --* 

                  A single partition in a data store. 

                  
                  

                  - **attributePartition** *(dict) --* 

                    A partition defined by an ``attributeName`` . 

                    
                    

                    - **attributeName** *(string) --* 

                      The attribute name of the partition. 

                      
                
                  

                  - **timestampPartition** *(dict) --* 

                    A partition defined by an ``attributeName`` and a timestamp format. 

                    
                    

                    - **attributeName** *(string) --* 

                      The attribute name of the partition defined by a timestamp. 

                      
                    

                    - **timestampFormat** *(string) --* 

                      The timestamp format of a partition defined by a timestamp. 

                      
                
              
            
          
        
      
        

        - **nextToken** *(string) --* 

          The token to retrieve the next set of results, or ``null`` if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_pipelines(**kwargs)

    

    Retrieves a list of pipelines.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListPipelines>`_    


    **Request Syntax** 
    ::

      response = client.list_pipelines(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return in this request.

       

      The default value is 100.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'pipelineSummaries': [
                {
                    'pipelineName': 'string',
                    'reprocessingSummaries': [
                        {
                            'id': 'string',
                            'status': 'RUNNING'|'SUCCEEDED'|'CANCELLED'|'FAILED',
                            'creationTime': datetime(2015, 1, 1)
                        },
                    ],
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **pipelineSummaries** *(list) --* 

          A list of ``PipelineSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a pipeline.

            
            

            - **pipelineName** *(string) --* 

              The name of the pipeline.

              
            

            - **reprocessingSummaries** *(list) --* 

              A summary of information about the pipeline reprocessing.

              
              

              - *(dict) --* 

                Information about pipeline reprocessing.

                
                

                - **id** *(string) --* 

                  The ``reprocessingId`` returned by ``StartPipelineReprocessing`` .

                  
                

                - **status** *(string) --* 

                  The status of the pipeline reprocessing.

                  
                

                - **creationTime** *(datetime) --* 

                  The time the pipeline reprocessing was created.

                  
            
          
            

            - **creationTime** *(datetime) --* 

              When the pipeline was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              When the pipeline was last updated.

              
        
      
        

        - **nextToken** *(string) --* 

          The token to retrieve the next set of results, or ``null`` if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists the tags (metadata) that you have assigned to the resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The ARN of the resource whose tags you want to list.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': [
                {
                    'key': 'string',
                    'value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(list) --* 

          The tags (metadata) that you have assigned to the resource.

          
          

          - *(dict) --* 

            A set of key-value pairs that are used to manage the resource.

            
            

            - **key** *(string) --* 

              The tag's key.

              
            

            - **value** *(string) --* 

              The tag's value.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: put_logging_options(**kwargs)

    

    Sets or updates the AWS IoT Analytics logging options.

     

    If you update the value of any ``loggingOptions`` field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the ``roleArn`` field (for example, to correct an invalid policy), it takes up to five minutes for that change to take effect. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/PutLoggingOptions>`_    


    **Request Syntax** 
    ::

      response = client.put_logging_options(
          loggingOptions={
              'roleArn': 'string',
              'level': 'ERROR',
              'enabled': True|False
          }
      )
    :type loggingOptions: dict
    :param loggingOptions: **[REQUIRED]** 

      The new values of the AWS IoT Analytics logging options.

      

    
      - **roleArn** *(string) --* **[REQUIRED]** 

        The ARN of the role that grants permission to AWS IoT Analytics to perform logging.

        

      
      - **level** *(string) --* **[REQUIRED]** 

        The logging level. Currently, only ERROR is supported.

        

      
      - **enabled** *(boolean) --* **[REQUIRED]** 

        If true, logging is enabled for AWS IoT Analytics.

        

      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: run_pipeline_activity(**kwargs)

    

    Simulates the results of running a pipeline activity on a message payload.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/RunPipelineActivity>`_    


    **Request Syntax** 
    ::

      response = client.run_pipeline_activity(
          pipelineActivity={
              'channel': {
                  'name': 'string',
                  'channelName': 'string',
                  'next': 'string'
              },
              'lambda': {
                  'name': 'string',
                  'lambdaName': 'string',
                  'batchSize': 123,
                  'next': 'string'
              },
              'datastore': {
                  'name': 'string',
                  'datastoreName': 'string'
              },
              'addAttributes': {
                  'name': 'string',
                  'attributes': {
                      'string': 'string'
                  },
                  'next': 'string'
              },
              'removeAttributes': {
                  'name': 'string',
                  'attributes': [
                      'string',
                  ],
                  'next': 'string'
              },
              'selectAttributes': {
                  'name': 'string',
                  'attributes': [
                      'string',
                  ],
                  'next': 'string'
              },
              'filter': {
                  'name': 'string',
                  'filter': 'string',
                  'next': 'string'
              },
              'math': {
                  'name': 'string',
                  'attribute': 'string',
                  'math': 'string',
                  'next': 'string'
              },
              'deviceRegistryEnrich': {
                  'name': 'string',
                  'attribute': 'string',
                  'thingName': 'string',
                  'roleArn': 'string',
                  'next': 'string'
              },
              'deviceShadowEnrich': {
                  'name': 'string',
                  'attribute': 'string',
                  'thingName': 'string',
                  'roleArn': 'string',
                  'next': 'string'
              }
          },
          payloads=[
              b'bytes',
          ]
      )
    :type pipelineActivity: dict
    :param pipelineActivity: **[REQUIRED]** 

      The pipeline activity that is run. This must not be a channel activity or a datastore activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a lambda activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.

      

    
      - **channel** *(dict) --* 

        Determines the source of the messages to be processed.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the channel activity.

          

        
        - **channelName** *(string) --* **[REQUIRED]** 

          The name of the channel from which the messages are processed.

          

        
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **lambda** *(dict) --* 

        Runs a Lambda function to modify the message.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the lambda activity.

          

        
        - **lambdaName** *(string) --* **[REQUIRED]** 

          The name of the Lambda function that is run on the message.

          

        
        - **batchSize** *(integer) --* **[REQUIRED]** 

          The number of messages passed to the Lambda function for processing.

           

          The Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.

          

        
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **datastore** *(dict) --* 

        Specifies where to store the processed message data.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the datastore activity.

          

        
        - **datastoreName** *(string) --* **[REQUIRED]** 

          The name of the data store where processed messages are stored.

          

        
      
      - **addAttributes** *(dict) --* 

        Adds other attributes based on existing attributes in the message.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the addAttributes activity.

          

        
        - **attributes** *(dict) --* **[REQUIRED]** 

          A list of 1-50 ``AttributeNameMapping`` objects that map an existing attribute to a new attribute.

           

          .. note::

             

            The existing attributes remain in the message, so if you want to remove the originals, use ``RemoveAttributeActivity`` .

             

          

        
          - *(string) --* 

          
            - *(string) --* 

            
      
    
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **removeAttributes** *(dict) --* 

        Removes attributes from a message.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the ``removeAttributes`` activity.

          

        
        - **attributes** *(list) --* **[REQUIRED]** 

          A list of 1-50 attributes to remove from the message.

          

        
          - *(string) --* 

          
      
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **selectAttributes** *(dict) --* 

        Creates a new message using only the specified attributes from the original message. 

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the ``selectAttributes`` activity.

          

        
        - **attributes** *(list) --* **[REQUIRED]** 

          A list of the attributes to select from the message.

          

        
          - *(string) --* 

          
      
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **filter** *(dict) --* 

        Filters a message based on its attributes.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the filter activity.

          

        
        - **filter** *(string) --* **[REQUIRED]** 

          An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. 

          

        
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **math** *(dict) --* 

        Computes an arithmetic expression using the message's attributes and adds it to the message.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the math activity.

          

        
        - **attribute** *(string) --* **[REQUIRED]** 

          The name of the attribute that contains the result of the math operation.

          

        
        - **math** *(string) --* **[REQUIRED]** 

          An expression that uses one or more existing attributes and must return an integer value.

          

        
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **deviceRegistryEnrich** *(dict) --* 

        Adds data from the AWS IoT device registry to your message.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the ``deviceRegistryEnrich`` activity.

          

        
        - **attribute** *(string) --* **[REQUIRED]** 

          The name of the attribute that is added to the message.

          

        
        - **thingName** *(string) --* **[REQUIRED]** 

          The name of the IoT device whose registry information is added to the message.

          

        
        - **roleArn** *(string) --* **[REQUIRED]** 

          The ARN of the role that allows access to the device's registry information.

          

        
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
      - **deviceShadowEnrich** *(dict) --* 

        Adds information from the AWS IoT Device Shadow service to a message.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the ``deviceShadowEnrich`` activity.

          

        
        - **attribute** *(string) --* **[REQUIRED]** 

          The name of the attribute that is added to the message.

          

        
        - **thingName** *(string) --* **[REQUIRED]** 

          The name of the IoT device whose shadow information is added to the message.

          

        
        - **roleArn** *(string) --* **[REQUIRED]** 

          The ARN of the role that allows access to the device's shadow.

          

        
        - **next** *(string) --* 

          The next activity in the pipeline.

          

        
      
    
    :type payloads: list
    :param payloads: **[REQUIRED]** 

      The sample message payloads on which the pipeline activity is run.

      

    
      - *(bytes) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'payloads': [
                b'bytes',
            ],
            'logResult': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **payloads** *(list) --* 

          The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)

          
          

          - *(bytes) --* 
      
        

        - **logResult** *(string) --* 

          In case the pipeline activity fails, the log message that is generated.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: sample_channel_data(**kwargs)

    

    Retrieves a sample of messages from the specified channel ingested during the specified timeframe. Up to 10 messages can be retrieved.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/SampleChannelData>`_    


    **Request Syntax** 
    ::

      response = client.sample_channel_data(
          channelName='string',
          maxMessages=123,
          startTime=datetime(2015, 1, 1),
          endTime=datetime(2015, 1, 1)
      )
    :type channelName: string
    :param channelName: **[REQUIRED]** 

      The name of the channel whose message samples are retrieved.

      

    
    :type maxMessages: integer
    :param maxMessages: 

      The number of sample messages to be retrieved. The limit is 10. The default is also 10.

      

    
    :type startTime: datetime
    :param startTime: 

      The start of the time window from which sample messages are retrieved.

      

    
    :type endTime: datetime
    :param endTime: 

      The end of the time window from which sample messages are retrieved.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'payloads': [
                b'bytes',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **payloads** *(list) --* 

          The list of message samples. Each sample message is returned as a base64-encoded string.

          
          

          - *(bytes) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: start_pipeline_reprocessing(**kwargs)

    

    Starts the reprocessing of raw message data through the pipeline.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/StartPipelineReprocessing>`_    


    **Request Syntax** 
    ::

      response = client.start_pipeline_reprocessing(
          pipelineName='string',
          startTime=datetime(2015, 1, 1),
          endTime=datetime(2015, 1, 1),
          channelMessages={
              's3Paths': [
                  'string',
              ]
          }
      )
    :type pipelineName: string
    :param pipelineName: **[REQUIRED]** 

      The name of the pipeline on which to start reprocessing.

      

    
    :type startTime: datetime
    :param startTime: 

      The start time (inclusive) of raw message data that is reprocessed.

       

      If you specify a value for the ``startTime`` parameter, you must not use the ``channelMessages`` object.

      

    
    :type endTime: datetime
    :param endTime: 

      The end time (exclusive) of raw message data that is reprocessed.

       

      If you specify a value for the ``endTime`` parameter, you must not use the ``channelMessages`` object.

      

    
    :type channelMessages: dict
    :param channelMessages: 

      Specifies one or more sets of channel messages that you want to reprocess.

       

      If you use the ``channelMessages`` object, you must not specify a value for ``startTime`` and ``endTime`` .

      

    
      - **s3Paths** *(list) --* 

        Specifies one or more keys that identify the Amazon Simple Storage Service (Amazon S3) objects that save your channel messages.

         

        You must use the full path for the key.

         

        Example path: ``channel/mychannel/__dt=2020-02-29 00:00:00/1582940490000_1582940520000_123456789012_mychannel_0_2118.0.json.gz``  

        

      
        - *(string) --* 

        
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'reprocessingId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **reprocessingId** *(string) --* 

          The ID of the pipeline reprocessing activity that was started.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The ARN of the resource whose tags you want to modify.

      

    
    :type tags: list
    :param tags: **[REQUIRED]** 

      The new or modified tags for the resource.

      

    
      - *(dict) --* 

        A set of key-value pairs that are used to manage the resource.

        

      
        - **key** *(string) --* **[REQUIRED]** 

          The tag's key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The tag's value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes the given tags (metadata) from the resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The ARN of the resource whose tags you want to remove.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      The keys of those tags which you want to remove.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: update_channel(**kwargs)

    

    Updates the settings of a channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdateChannel>`_    


    **Request Syntax** 
    ::

      response = client.update_channel(
          channelName='string',
          channelStorage={
              'serviceManagedS3': {}
              ,
              'customerManagedS3': {
                  'bucket': 'string',
                  'keyPrefix': 'string',
                  'roleArn': 'string'
              }
          },
          retentionPeriod={
              'unlimited': True|False,
              'numberOfDays': 123
          }
      )
    :type channelName: string
    :param channelName: **[REQUIRED]** 

      The name of the channel to be updated.

      

    
    :type channelStorage: dict
    :param channelStorage: 

      Where channel data is stored. You can choose one of ``serviceManagedS3`` or ``customerManagedS3`` storage. If not specified, the default is ``serviceManagedS3`` . You cannot change this storage option after the channel is created.

      

    
      - **serviceManagedS3** *(dict) --* 

        Use this to store channel data in an S3 bucket managed by AWS IoT Analytics. You cannot change the choice of service-managed or customer-managed S3 storage after the channel is created.

        

      
      
      - **customerManagedS3** *(dict) --* 

        Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the ``retentionPeriod`` parameter is ignored. You cannot change the choice of service-managed or customer-managed S3 storage after the channel is created.

        

      
        - **bucket** *(string) --* **[REQUIRED]** 

          The name of the S3 bucket in which channel data is stored.

          

        
        - **keyPrefix** *(string) --* 

          Optional. The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

          

        
        - **roleArn** *(string) --* **[REQUIRED]** 

          The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

          

        
      
    
    :type retentionPeriod: dict
    :param retentionPeriod: 

      How long, in days, message data is kept for the channel. The retention period cannot be updated if the channel's S3 storage is customer-managed.

      

    
      - **unlimited** *(boolean) --* 

        If true, message data is kept indefinitely.

        

      
      - **numberOfDays** *(integer) --* 

        The number of days that message data is kept. The ``unlimited`` parameter must be false.

        

      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_dataset(**kwargs)

    

    Updates the settings of a data set.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdateDataset>`_    


    **Request Syntax** 
    ::

      response = client.update_dataset(
          datasetName='string',
          actions=[
              {
                  'actionName': 'string',
                  'queryAction': {
                      'sqlQuery': 'string',
                      'filters': [
                          {
                              'deltaTime': {
                                  'offsetSeconds': 123,
                                  'timeExpression': 'string'
                              }
                          },
                      ]
                  },
                  'containerAction': {
                      'image': 'string',
                      'executionRoleArn': 'string',
                      'resourceConfiguration': {
                          'computeType': 'ACU_1'|'ACU_2',
                          'volumeSizeInGB': 123
                      },
                      'variables': [
                          {
                              'name': 'string',
                              'stringValue': 'string',
                              'doubleValue': 123.0,
                              'datasetContentVersionValue': {
                                  'datasetName': 'string'
                              },
                              'outputFileUriValue': {
                                  'fileName': 'string'
                              }
                          },
                      ]
                  }
              },
          ],
          triggers=[
              {
                  'schedule': {
                      'expression': 'string'
                  },
                  'dataset': {
                      'name': 'string'
                  }
              },
          ],
          contentDeliveryRules=[
              {
                  'entryName': 'string',
                  'destination': {
                      'iotEventsDestinationConfiguration': {
                          'inputName': 'string',
                          'roleArn': 'string'
                      },
                      's3DestinationConfiguration': {
                          'bucket': 'string',
                          'key': 'string',
                          'glueConfiguration': {
                              'tableName': 'string',
                              'databaseName': 'string'
                          },
                          'roleArn': 'string'
                      }
                  }
              },
          ],
          retentionPeriod={
              'unlimited': True|False,
              'numberOfDays': 123
          },
          versioningConfiguration={
              'unlimited': True|False,
              'maxVersions': 123
          },
          lateDataRules=[
              {
                  'ruleName': 'string',
                  'ruleConfiguration': {
                      'deltaTimeSessionWindowConfiguration': {
                          'timeoutInMinutes': 123
                      }
                  }
              },
          ]
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the data set to update.

      

    
    :type actions: list
    :param actions: **[REQUIRED]** 

      A list of ``DatasetAction`` objects.

      

    
      - *(dict) --* 

        A ``DatasetAction`` object that specifies how data set contents are automatically created.

        

      
        - **actionName** *(string) --* 

          The name of the data set action by which data set contents are automatically created.

          

        
        - **queryAction** *(dict) --* 

          An ``SqlQueryDatasetAction`` object that uses an SQL query to automatically create data set contents.

          

        
          - **sqlQuery** *(string) --* **[REQUIRED]** 

            A SQL query string.

            

          
          - **filters** *(list) --* 

            Prefilters applied to message data.

            

          
            - *(dict) --* 

              Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.

              

            
              - **deltaTime** *(dict) --* 

                Used to limit data to that which has arrived since the last execution of the action.

                

              
                - **offsetSeconds** *(integer) --* **[REQUIRED]** 

                  The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.

                  

                
                - **timeExpression** *(string) --* **[REQUIRED]** 

                  An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.

                  

                
              
            
        
        
        - **containerAction** *(dict) --* 

          Information that allows the system to run a containerized application to create the dataset contents. The application must be in a Docker container along with any required support libraries.

          

        
          - **image** *(string) --* **[REQUIRED]** 

            The ARN of the Docker container stored in your account. The Docker container contains an application and required support libraries and is used to generate dataset contents.

            

          
          - **executionRoleArn** *(string) --* **[REQUIRED]** 

            The ARN of the role that gives permission to the system to access required resources to run the ``containerAction`` . This includes, at minimum, permission to retrieve the dataset contents that are the input to the containerized application.

            

          
          - **resourceConfiguration** *(dict) --* **[REQUIRED]** 

            Configuration of the resource that executes the ``containerAction`` .

            

          
            - **computeType** *(string) --* **[REQUIRED]** 

              The type of the compute resource used to execute the ``containerAction`` . Possible values are: ``ACU_1`` (vCPU=4, memory=16 GiB) or ``ACU_2`` (vCPU=8, memory=32 GiB).

              

            
            - **volumeSizeInGB** *(integer) --* **[REQUIRED]** 

              The size, in GB, of the persistent storage available to the resource instance used to execute the ``containerAction`` (min: 1, max: 50).

              

            
          
          - **variables** *(list) --* 

            The values of variables used in the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of ``stringValue`` , ``datasetContentVersionValue`` , or ``outputFileUriValue`` .

            

          
            - *(dict) --* 

              An instance of a variable to be passed to the ``containerAction`` execution. Each variable must have a name and a value given by one of ``stringValue`` , ``datasetContentVersionValue`` , or ``outputFileUriValue`` .

              

            
              - **name** *(string) --* **[REQUIRED]** 

                The name of the variable.

                

              
              - **stringValue** *(string) --* 

                The value of the variable as a string.

                

              
              - **doubleValue** *(float) --* 

                The value of the variable as a double (numeric).

                

              
              - **datasetContentVersionValue** *(dict) --* 

                The value of the variable as a structure that specifies a dataset content version.

                

              
                - **datasetName** *(string) --* **[REQUIRED]** 

                  The name of the dataset whose latest contents are used as input to the notebook or application.

                  

                
              
              - **outputFileUriValue** *(dict) --* 

                The value of the variable as a structure that specifies an output file URI.

                

              
                - **fileName** *(string) --* **[REQUIRED]** 

                  The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.

                  

                
              
            
        
        
      
  
    :type triggers: list
    :param triggers: 

      A list of ``DatasetTrigger`` objects. The list can be empty or can contain up to five ``DatasetTrigger`` objects.

      

    
      - *(dict) --* 

        The ``DatasetTrigger`` that specifies when the data set is automatically updated.

        

      
        - **schedule** *(dict) --* 

          The Schedule when the trigger is initiated.

          

        
          - **expression** *(string) --* 

            The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the *Amazon CloudWatch Events User Guide* .

            

          
        
        - **dataset** *(dict) --* 

          The data set whose content creation triggers the creation of this data set's contents.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the dataset whose content generation triggers the new dataset content generation.

            

          
        
      
  
    :type contentDeliveryRules: list
    :param contentDeliveryRules: 

      When dataset contents are created, they are delivered to destinations specified here.

      

    
      - *(dict) --* 

        When dataset contents are created, they are delivered to destination specified here.

        

      
        - **entryName** *(string) --* 

          The name of the dataset content delivery rules entry.

          

        
        - **destination** *(dict) --* **[REQUIRED]** 

          The destination to which dataset contents are delivered.

          

        
          - **iotEventsDestinationConfiguration** *(dict) --* 

            Configuration information for delivery of dataset contents to AWS IoT Events.

            

          
            - **inputName** *(string) --* **[REQUIRED]** 

              The name of the AWS IoT Events input to which dataset contents are delivered.

              

            
            - **roleArn** *(string) --* **[REQUIRED]** 

              The ARN of the role that grants AWS IoT Analytics permission to deliver dataset contents to an AWS IoT Events input.

              

            
          
          - **s3DestinationConfiguration** *(dict) --* 

            Configuration information for delivery of dataset contents to Amazon S3.

            

          
            - **bucket** *(string) --* **[REQUIRED]** 

              The name of the S3 bucket to which dataset contents are delivered.

              

            
            - **key** *(string) --* **[REQUIRED]** 

              The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key.

               

              You can create a unique key with the following options:

               

               
              * Use ``!{iotanalytics:scheduleTime}`` to insert the time of a scheduled SQL query run. 
               
              * Use ``!{iotanalytics:versionId}`` to insert a unique hash that identifies a dataset content. 
               
              * Use ``!{iotanalytics:creationTime}`` to insert the creation time of a dataset content. 
               

               

              The following example creates a unique key for a CSV file: ``dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv``  

               

              .. note::

                 

                If you don't use ``!{iotanalytics:versionId}`` to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same ``scheduleTime`` but different ``versionId`` s. This means that one dataset content overwrites the other. 

                 

              

            
            - **glueConfiguration** *(dict) --* 

              Configuration information for coordination with AWS Glue, a fully managed extract, transform and load (ETL) service.

              

            
              - **tableName** *(string) --* **[REQUIRED]** 

                The name of the table in your AWS Glue Data Catalog that is used to perform the ETL operations. An AWS Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.

                

              
              - **databaseName** *(string) --* **[REQUIRED]** 

                The name of the database in your AWS Glue Data Catalog in which the table is located. An AWS Glue Data Catalog database contains metadata tables.

                

              
            
            - **roleArn** *(string) --* **[REQUIRED]** 

              The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 and AWS Glue resources.

              

            
          
        
      
  
    :type retentionPeriod: dict
    :param retentionPeriod: 

      How long, in days, dataset contents are kept for the dataset.

      

    
      - **unlimited** *(boolean) --* 

        If true, message data is kept indefinitely.

        

      
      - **numberOfDays** *(integer) --* 

        The number of days that message data is kept. The ``unlimited`` parameter must be false.

        

      
    
    :type versioningConfiguration: dict
    :param versioningConfiguration: 

      Optional. How many versions of dataset contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the ``retentionPeriod`` parameter. For more information, see `Keeping Multiple Versions of AWS IoT Analytics Data Sets <https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions>`__ in the *AWS IoT Analytics User Guide* .

      

    
      - **unlimited** *(boolean) --* 

        If true, unlimited versions of dataset contents are kept.

        

      
      - **maxVersions** *(integer) --* 

        How many versions of dataset contents are kept. The ``unlimited`` parameter must be ``false`` .

        

      
    
    :type lateDataRules: list
    :param lateDataRules: 

      A list of data rules that send notifications to Amazon CloudWatch, when data arrives late. To specify ``lateDataRules`` , the dataset must use a `DeltaTimer <https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html>`__ filter.

      

    
      - *(dict) --* 

        A structure that contains the name and configuration information of a late data rule.

        

      
        - **ruleName** *(string) --* 

          The name of the late data rule.

          

        
        - **ruleConfiguration** *(dict) --* **[REQUIRED]** 

          The information needed to configure the late data rule.

          

        
          - **deltaTimeSessionWindowConfiguration** *(dict) --* 

            The information needed to configure a delta time session window.

            

          
            - **timeoutInMinutes** *(integer) --* **[REQUIRED]** 

              A time interval. You can use ``timeoutInMinutes`` so that AWS IoT Analytics can batch up late data notifications that have been generated since the last execution. AWS IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.

               

              For more information about how to write a timestamp expression, see `Date and Time Functions and Operators <https://prestodb.io/docs/0.172/functions/datetime.html>`__ , in the *Presto 0.172 Documentation* .

              

            
          
        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_datastore(**kwargs)

    

    Updates the settings of a data store.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdateDatastore>`_    


    **Request Syntax** 
    ::

      response = client.update_datastore(
          datastoreName='string',
          retentionPeriod={
              'unlimited': True|False,
              'numberOfDays': 123
          },
          datastoreStorage={
              'serviceManagedS3': {}
              ,
              'customerManagedS3': {
                  'bucket': 'string',
                  'keyPrefix': 'string',
                  'roleArn': 'string'
              }
          },
          fileFormatConfiguration={
              'jsonConfiguration': {}
              ,
              'parquetConfiguration': {
                  'schemaDefinition': {
                      'columns': [
                          {
                              'name': 'string',
                              'type': 'string'
                          },
                      ]
                  }
              }
          }
      )
    :type datastoreName: string
    :param datastoreName: **[REQUIRED]** 

      The name of the data store to be updated.

      

    
    :type retentionPeriod: dict
    :param retentionPeriod: 

      How long, in days, message data is kept for the data store. The retention period cannot be updated if the data store's S3 storage is customer-managed.

      

    
      - **unlimited** *(boolean) --* 

        If true, message data is kept indefinitely.

        

      
      - **numberOfDays** *(integer) --* 

        The number of days that message data is kept. The ``unlimited`` parameter must be false.

        

      
    
    :type datastoreStorage: dict
    :param datastoreStorage: 

      Where data store data is stored. You can choose one of ``serviceManagedS3`` or ``customerManagedS3`` storage. If not specified, the default is``serviceManagedS3`` . You cannot change this storage option after the data store is created.

      

    
      - **serviceManagedS3** *(dict) --* 

        Use this to store data store data in an S3 bucket managed by AWS IoT Analytics. You cannot change the choice of service-managed or customer-managed S3 storage after the data store is created.

        

      
      
      - **customerManagedS3** *(dict) --* 

        Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the ``retentionPeriod`` parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.

        

      
        - **bucket** *(string) --* **[REQUIRED]** 

          The name of the S3 bucket in which data store data is stored.

          

        
        - **keyPrefix** *(string) --* 

          Optional. The prefix used to create the keys of the data store data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

          

        
        - **roleArn** *(string) --* **[REQUIRED]** 

          The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

          

        
      
    
    :type fileFormatConfiguration: dict
    :param fileFormatConfiguration: 

      Contains the configuration information of file formats. AWS IoT Analytics data stores support JSON and `Parquet <https://parquet.apache.org/>`__ .

       

      The default file format is JSON. You can specify only one format.

       

      You can't change the file format after you create the data store.

      

    
      - **jsonConfiguration** *(dict) --* 

        Contains the configuration information of the JSON format.

        

      
      
      - **parquetConfiguration** *(dict) --* 

        Contains the configuration information of the Parquet format.

        

      
        - **schemaDefinition** *(dict) --* 

          Information needed to define a schema.

          

        
          - **columns** *(list) --* 

            Specifies one or more columns that store your data.

             

            Each schema can have up to 100 columns. Each column can have up to 100 nested types.

            

          
            - *(dict) --* 

              Contains information about a column that stores your data.

              

            
              - **name** *(string) --* **[REQUIRED]** 

                The name of the column.

                

              
              - **type** *(string) --* **[REQUIRED]** 

                The type of data. For more information about the supported data types, see `Common data types <https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html>`__ in the *AWS Glue Developer Guide* .

                

              
            
        
        
      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_pipeline(**kwargs)

    

    Updates the settings of a pipeline. You must specify both a ``channel`` and a ``datastore`` activity and, optionally, as many as 23 additional activities in the ``pipelineActivities`` array.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/UpdatePipeline>`_    


    **Request Syntax** 
    ::

      response = client.update_pipeline(
          pipelineName='string',
          pipelineActivities=[
              {
                  'channel': {
                      'name': 'string',
                      'channelName': 'string',
                      'next': 'string'
                  },
                  'lambda': {
                      'name': 'string',
                      'lambdaName': 'string',
                      'batchSize': 123,
                      'next': 'string'
                  },
                  'datastore': {
                      'name': 'string',
                      'datastoreName': 'string'
                  },
                  'addAttributes': {
                      'name': 'string',
                      'attributes': {
                          'string': 'string'
                      },
                      'next': 'string'
                  },
                  'removeAttributes': {
                      'name': 'string',
                      'attributes': [
                          'string',
                      ],
                      'next': 'string'
                  },
                  'selectAttributes': {
                      'name': 'string',
                      'attributes': [
                          'string',
                      ],
                      'next': 'string'
                  },
                  'filter': {
                      'name': 'string',
                      'filter': 'string',
                      'next': 'string'
                  },
                  'math': {
                      'name': 'string',
                      'attribute': 'string',
                      'math': 'string',
                      'next': 'string'
                  },
                  'deviceRegistryEnrich': {
                      'name': 'string',
                      'attribute': 'string',
                      'thingName': 'string',
                      'roleArn': 'string',
                      'next': 'string'
                  },
                  'deviceShadowEnrich': {
                      'name': 'string',
                      'attribute': 'string',
                      'thingName': 'string',
                      'roleArn': 'string',
                      'next': 'string'
                  }
              },
          ]
      )
    :type pipelineName: string
    :param pipelineName: **[REQUIRED]** 

      The name of the pipeline to update.

      

    
    :type pipelineActivities: list
    :param pipelineActivities: **[REQUIRED]** 

      A list of ``PipelineActivity`` objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.

       

      The list can be 2-25 ``PipelineActivity`` objects and must contain both a ``channel`` and a ``datastore`` activity. Each entry in the list must contain only one activity. For example:

       

       ``pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]``  

      

    
      - *(dict) --* 

        An activity that performs a transformation on a message.

        

      
        - **channel** *(dict) --* 

          Determines the source of the messages to be processed.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the channel activity.

            

          
          - **channelName** *(string) --* **[REQUIRED]** 

            The name of the channel from which the messages are processed.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **lambda** *(dict) --* 

          Runs a Lambda function to modify the message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the lambda activity.

            

          
          - **lambdaName** *(string) --* **[REQUIRED]** 

            The name of the Lambda function that is run on the message.

            

          
          - **batchSize** *(integer) --* **[REQUIRED]** 

            The number of messages passed to the Lambda function for processing.

             

            The Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **datastore** *(dict) --* 

          Specifies where to store the processed message data.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the datastore activity.

            

          
          - **datastoreName** *(string) --* **[REQUIRED]** 

            The name of the data store where processed messages are stored.

            

          
        
        - **addAttributes** *(dict) --* 

          Adds other attributes based on existing attributes in the message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the addAttributes activity.

            

          
          - **attributes** *(dict) --* **[REQUIRED]** 

            A list of 1-50 ``AttributeNameMapping`` objects that map an existing attribute to a new attribute.

             

            .. note::

               

              The existing attributes remain in the message, so if you want to remove the originals, use ``RemoveAttributeActivity`` .

               

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **removeAttributes** *(dict) --* 

          Removes attributes from a message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``removeAttributes`` activity.

            

          
          - **attributes** *(list) --* **[REQUIRED]** 

            A list of 1-50 attributes to remove from the message.

            

          
            - *(string) --* 

            
        
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **selectAttributes** *(dict) --* 

          Creates a new message using only the specified attributes from the original message. 

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``selectAttributes`` activity.

            

          
          - **attributes** *(list) --* **[REQUIRED]** 

            A list of the attributes to select from the message.

            

          
            - *(string) --* 

            
        
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **filter** *(dict) --* 

          Filters a message based on its attributes.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the filter activity.

            

          
          - **filter** *(string) --* **[REQUIRED]** 

            An expression that looks like a SQL WHERE clause that must return a Boolean value. Messages that satisfy the condition are passed to the next activity. 

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **math** *(dict) --* 

          Computes an arithmetic expression using the message's attributes and adds it to the message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the math activity.

            

          
          - **attribute** *(string) --* **[REQUIRED]** 

            The name of the attribute that contains the result of the math operation.

            

          
          - **math** *(string) --* **[REQUIRED]** 

            An expression that uses one or more existing attributes and must return an integer value.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **deviceRegistryEnrich** *(dict) --* 

          Adds data from the AWS IoT device registry to your message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``deviceRegistryEnrich`` activity.

            

          
          - **attribute** *(string) --* **[REQUIRED]** 

            The name of the attribute that is added to the message.

            

          
          - **thingName** *(string) --* **[REQUIRED]** 

            The name of the IoT device whose registry information is added to the message.

            

          
          - **roleArn** *(string) --* **[REQUIRED]** 

            The ARN of the role that allows access to the device's registry information.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
        - **deviceShadowEnrich** *(dict) --* 

          Adds information from the AWS IoT Device Shadow service to a message.

          

        
          - **name** *(string) --* **[REQUIRED]** 

            The name of the ``deviceShadowEnrich`` activity.

            

          
          - **attribute** *(string) --* **[REQUIRED]** 

            The name of the attribute that is added to the message.

            

          
          - **thingName** *(string) --* **[REQUIRED]** 

            The name of the IoT device whose shadow information is added to the message.

            

          
          - **roleArn** *(string) --* **[REQUIRED]** 

            The ARN of the role that allows access to the device's shadow.

            

          
          - **next** *(string) --* 

            The next activity in the pipeline.

            

          
        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTAnalytics.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTAnalytics.Client.exceptions.LimitExceededException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`IoTAnalytics.Paginator.ListChannels`


* :py:class:`IoTAnalytics.Paginator.ListDatasetContents`


* :py:class:`IoTAnalytics.Paginator.ListDatasets`


* :py:class:`IoTAnalytics.Paginator.ListDatastores`


* :py:class:`IoTAnalytics.Paginator.ListPipelines`



.. py:class:: IoTAnalytics.Paginator.ListChannels

  ::

    
    paginator = client.get_paginator('list_channels')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTAnalytics.Client.list_channels`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListChannels>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'channelSummaries': [
                {
                    'channelName': 'string',
                    'channelStorage': {
                        'serviceManagedS3': {},
                        'customerManagedS3': {
                            'bucket': 'string',
                            'keyPrefix': 'string',
                            'roleArn': 'string'
                        }
                    },
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1),
                    'lastMessageArrivalTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **channelSummaries** *(list) --* 

          A list of ``ChannelSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a channel.

            
            

            - **channelName** *(string) --* 

              The name of the channel.

              
            

            - **channelStorage** *(dict) --* 

              Where channel data is stored.

              
              

              - **serviceManagedS3** *(dict) --* 

                Used to store channel data in an S3 bucket managed by AWS IoT Analytics.

                
            
              

              - **customerManagedS3** *(dict) --* 

                Used to store channel data in an S3 bucket that you manage.

                
                

                - **bucket** *(string) --* 

                  The name of the S3 bucket in which channel data is stored.

                  
                

                - **keyPrefix** *(string) --* 

                  Optional. The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).

                  
                

                - **roleArn** *(string) --* 

                  The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

                  
            
          
            

            - **status** *(string) --* 

              The status of the channel.

              
            

            - **creationTime** *(datetime) --* 

              When the channel was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The last time the channel was updated.

              
            

            - **lastMessageArrivalTime** *(datetime) --* 

              The last time when a new message arrived in the channel.

               

              AWS IoT Analytics updates this value at most once per minute for one channel. Hence, the ``lastMessageArrivalTime`` value is an approximation.

               

              This feature only applies to messages that arrived in the data store after October 23, 2020. 

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTAnalytics.Paginator.ListDatasetContents

  ::

    
    paginator = client.get_paginator('list_dataset_contents')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTAnalytics.Client.list_dataset_contents`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatasetContents>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          datasetName='string',
          scheduledOnOrAfter=datetime(2015, 1, 1),
          scheduledBefore=datetime(2015, 1, 1),
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type datasetName: string
    :param datasetName: **[REQUIRED]** 

      The name of the data set whose contents information you want to list.

      

    
    :type scheduledOnOrAfter: datetime
    :param scheduledOnOrAfter: 

      A filter to limit results to those data set contents whose creation is scheduled on or after the given time. See the field ``triggers.schedule`` in the ``CreateDataset`` request. (timestamp)

      

    
    :type scheduledBefore: datetime
    :param scheduledBefore: 

      A filter to limit results to those data set contents whose creation is scheduled before the given time. See the field ``triggers.schedule`` in the ``CreateDataset`` request. (timestamp)

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datasetContentSummaries': [
                {
                    'version': 'string',
                    'status': {
                        'state': 'CREATING'|'SUCCEEDED'|'FAILED',
                        'reason': 'string'
                    },
                    'creationTime': datetime(2015, 1, 1),
                    'scheduleTime': datetime(2015, 1, 1),
                    'completionTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datasetContentSummaries** *(list) --* 

          Summary information about data set contents that have been created.

          
          

          - *(dict) --* 

            Summary information about dataset contents.

            
            

            - **version** *(string) --* 

              The version of the dataset contents.

              
            

            - **status** *(dict) --* 

              The status of the data set contents.

              
              

              - **state** *(string) --* 

                The state of the data set contents. Can be one of READY, CREATING, SUCCEEDED, or FAILED.

                
              

              - **reason** *(string) --* 

                The reason the data set contents are in this state.

                
          
            

            - **creationTime** *(datetime) --* 

              The actual time the creation of the dataset contents was started.

              
            

            - **scheduleTime** *(datetime) --* 

              The time the creation of the dataset contents was scheduled to start.

              
            

            - **completionTime** *(datetime) --* 

              The time the dataset content status was updated to SUCCEEDED or FAILED.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTAnalytics.Paginator.ListDatasets

  ::

    
    paginator = client.get_paginator('list_datasets')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTAnalytics.Client.list_datasets`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatasets>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datasetSummaries': [
                {
                    'datasetName': 'string',
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1),
                    'triggers': [
                        {
                            'schedule': {
                                'expression': 'string'
                            },
                            'dataset': {
                                'name': 'string'
                            }
                        },
                    ],
                    'actions': [
                        {
                            'actionName': 'string',
                            'actionType': 'QUERY'|'CONTAINER'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datasetSummaries** *(list) --* 

          A list of ``DatasetSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a data set.

            
            

            - **datasetName** *(string) --* 

              The name of the data set.

              
            

            - **status** *(string) --* 

              The status of the data set.

              
            

            - **creationTime** *(datetime) --* 

              The time the data set was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The last time the data set was updated.

              
            

            - **triggers** *(list) --* 

              A list of triggers. A trigger causes data set content to be populated at a specified time interval or when another data set is populated. The list of triggers can be empty or contain up to five ``DataSetTrigger`` objects

              
              

              - *(dict) --* 

                The ``DatasetTrigger`` that specifies when the data set is automatically updated.

                
                

                - **schedule** *(dict) --* 

                  The Schedule when the trigger is initiated.

                  
                  

                  - **expression** *(string) --* 

                    The expression that defines when to trigger an update. For more information, see `Schedule Expressions for Rules <https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html>`__ in the *Amazon CloudWatch Events User Guide* .

                    
              
                

                - **dataset** *(dict) --* 

                  The data set whose content creation triggers the creation of this data set's contents.

                  
                  

                  - **name** *(string) --* 

                    The name of the dataset whose content generation triggers the new dataset content generation.

                    
              
            
          
            

            - **actions** *(list) --* 

              A list of ``DataActionSummary`` objects.

              
              

              - *(dict) --* 

                Information about the action that automatically creates the dataset's contents.

                
                

                - **actionName** *(string) --* 

                  The name of the action that automatically creates the dataset's contents.

                  
                

                - **actionType** *(string) --* 

                  The type of action by which the dataset's contents are automatically created.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTAnalytics.Paginator.ListDatastores

  ::

    
    paginator = client.get_paginator('list_datastores')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTAnalytics.Client.list_datastores`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListDatastores>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'datastoreSummaries': [
                {
                    'datastoreName': 'string',
                    'datastoreStorage': {
                        'serviceManagedS3': {},
                        'customerManagedS3': {
                            'bucket': 'string',
                            'keyPrefix': 'string',
                            'roleArn': 'string'
                        }
                    },
                    'status': 'CREATING'|'ACTIVE'|'DELETING',
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1),
                    'lastMessageArrivalTime': datetime(2015, 1, 1),
                    'fileFormatType': 'JSON'|'PARQUET',
                    'datastorePartitions': {
                        'partitions': [
                            {
                                'attributePartition': {
                                    'attributeName': 'string'
                                },
                                'timestampPartition': {
                                    'attributeName': 'string',
                                    'timestampFormat': 'string'
                                }
                            },
                        ]
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **datastoreSummaries** *(list) --* 

          A list of ``DatastoreSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a data store.

            
            

            - **datastoreName** *(string) --* 

              The name of the data store.

              
            

            - **datastoreStorage** *(dict) --* 

              Where data store data is stored.

              
              

              - **serviceManagedS3** *(dict) --* 

                Used to store data store data in an S3 bucket managed by AWS IoT Analytics.

                
            
              

              - **customerManagedS3** *(dict) --* 

                Used to store data store data in an S3 bucket that you manage.

                
                

                - **bucket** *(string) --* 

                  The name of the S3 bucket in which data store data is stored.

                  
                

                - **keyPrefix** *(string) --* 

                  Optional. The prefix used to create the keys of the data store data objects. Each object in an S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).

                  
                

                - **roleArn** *(string) --* 

                  The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.

                  
            
          
            

            - **status** *(string) --* 

              The status of the data store.

              
            

            - **creationTime** *(datetime) --* 

              When the data store was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              The last time the data store was updated.

              
            

            - **lastMessageArrivalTime** *(datetime) --* 

              The last time when a new message arrived in the data store.

               

              AWS IoT Analytics updates this value at most once per minute for one data store. Hence, the ``lastMessageArrivalTime`` value is an approximation.

               

              This feature only applies to messages that arrived in the data store after October 23, 2020. 

              
            

            - **fileFormatType** *(string) --* 

              The file format of the data in the data store.

              
            

            - **datastorePartitions** *(dict) --* 

              Contains information about the partitions in a data store. 

              
              

              - **partitions** *(list) --* 

                A list of partitions in a data store. 

                
                

                - *(dict) --* 

                  A single partition in a data store. 

                  
                  

                  - **attributePartition** *(dict) --* 

                    A partition defined by an ``attributeName`` . 

                    
                    

                    - **attributeName** *(string) --* 

                      The attribute name of the partition. 

                      
                
                  

                  - **timestampPartition** *(dict) --* 

                    A partition defined by an ``attributeName`` and a timestamp format. 

                    
                    

                    - **attributeName** *(string) --* 

                      The attribute name of the partition defined by a timestamp. 

                      
                    

                    - **timestampFormat** *(string) --* 

                      The timestamp format of a partition defined by a timestamp. 

                      
                
              
            
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTAnalytics.Paginator.ListPipelines

  ::

    
    paginator = client.get_paginator('list_pipelines')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTAnalytics.Client.list_pipelines`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotanalytics-2017-11-27/ListPipelines>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'pipelineSummaries': [
                {
                    'pipelineName': 'string',
                    'reprocessingSummaries': [
                        {
                            'id': 'string',
                            'status': 'RUNNING'|'SUCCEEDED'|'CANCELLED'|'FAILED',
                            'creationTime': datetime(2015, 1, 1)
                        },
                    ],
                    'creationTime': datetime(2015, 1, 1),
                    'lastUpdateTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **pipelineSummaries** *(list) --* 

          A list of ``PipelineSummary`` objects.

          
          

          - *(dict) --* 

            A summary of information about a pipeline.

            
            

            - **pipelineName** *(string) --* 

              The name of the pipeline.

              
            

            - **reprocessingSummaries** *(list) --* 

              A summary of information about the pipeline reprocessing.

              
              

              - *(dict) --* 

                Information about pipeline reprocessing.

                
                

                - **id** *(string) --* 

                  The ``reprocessingId`` returned by ``StartPipelineReprocessing`` .

                  
                

                - **status** *(string) --* 

                  The status of the pipeline reprocessing.

                  
                

                - **creationTime** *(datetime) --* 

                  The time the pipeline reprocessing was created.

                  
            
          
            

            - **creationTime** *(datetime) --* 

              When the pipeline was created.

              
            

            - **lastUpdateTime** *(datetime) --* 

              When the pipeline was last updated.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    