

*******************
ApplicationInsights
*******************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: ApplicationInsights.Client

  A low-level client representing Amazon CloudWatch Application Insights
   

  Amazon CloudWatch Application Insights is a service that helps you detect common problems with your applications. It enables you to pinpoint the source of issues in your applications (built with technologies such as Microsoft IIS, .NET, and Microsoft SQL Server), by providing key insights into detected problems.

   

  After you onboard your application, CloudWatch Application Insights identifies, recommends, and sets up metrics and logs. It continuously analyzes and correlates your metrics and logs for unusual behavior to surface actionable problems with your application. For example, if your application is slow and unresponsive and leading to HTTP 500 errors in your Application Load Balancer (ALB), Application Insights informs you that a memory pressure problem with your SQL Server database is occurring. It bases this analysis on impactful metrics and log errors. 

  ::

    
    import boto3
    
    client = boto3.client('application-insights')

  
  These are the available methods:
  
  *   :py:meth:`~ApplicationInsights.Client.can_paginate`

  
  *   :py:meth:`~ApplicationInsights.Client.create_application`

  
  *   :py:meth:`~ApplicationInsights.Client.create_component`

  
  *   :py:meth:`~ApplicationInsights.Client.create_log_pattern`

  
  *   :py:meth:`~ApplicationInsights.Client.delete_application`

  
  *   :py:meth:`~ApplicationInsights.Client.delete_component`

  
  *   :py:meth:`~ApplicationInsights.Client.delete_log_pattern`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_application`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_component`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_component_configuration`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_component_configuration_recommendation`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_log_pattern`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_observation`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_problem`

  
  *   :py:meth:`~ApplicationInsights.Client.describe_problem_observations`

  
  *   :py:meth:`~ApplicationInsights.Client.generate_presigned_url`

  
  *   :py:meth:`~ApplicationInsights.Client.get_paginator`

  
  *   :py:meth:`~ApplicationInsights.Client.get_waiter`

  
  *   :py:meth:`~ApplicationInsights.Client.list_applications`

  
  *   :py:meth:`~ApplicationInsights.Client.list_components`

  
  *   :py:meth:`~ApplicationInsights.Client.list_configuration_history`

  
  *   :py:meth:`~ApplicationInsights.Client.list_log_pattern_sets`

  
  *   :py:meth:`~ApplicationInsights.Client.list_log_patterns`

  
  *   :py:meth:`~ApplicationInsights.Client.list_problems`

  
  *   :py:meth:`~ApplicationInsights.Client.list_tags_for_resource`

  
  *   :py:meth:`~ApplicationInsights.Client.tag_resource`

  
  *   :py:meth:`~ApplicationInsights.Client.untag_resource`

  
  *   :py:meth:`~ApplicationInsights.Client.update_application`

  
  *   :py:meth:`~ApplicationInsights.Client.update_component`

  
  *   :py:meth:`~ApplicationInsights.Client.update_component_configuration`

  
  *   :py:meth:`~ApplicationInsights.Client.update_log_pattern`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_application(**kwargs)

    

    Adds an application that is created from a resource group.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/CreateApplication>`_    


    **Request Syntax** 
    ::

      response = client.create_application(
          ResourceGroupName='string',
          OpsCenterEnabled=True|False,
          CWEMonitorEnabled=True|False,
          OpsItemSNSTopicArn='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type OpsCenterEnabled: boolean
    :param OpsCenterEnabled: 

      When set to ``true`` , creates opsItems for any problems detected on an application. 

      

    
    :type CWEMonitorEnabled: boolean
    :param CWEMonitorEnabled: 

      Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others. 

      

    
    :type OpsItemSNSTopicArn: string
    :param OpsItemSNSTopicArn: 

      The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem. 

      

    
    :type Tags: list
    :param Tags: 

      List of tags to add to the application. tag key (``Key`` ) and an associated tag value (``Value`` ). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.

      

    
      - *(dict) --* 

        An object that defines the tags associated with an application. A *tag* is a label that you optionally define and associate with an application. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria.

         

        Each tag consists of a required *tag key* and an associated *tag value* , both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:

         

         
        * Tag keys and values are case sensitive. 
         
        * For each associated resource, each tag key must be unique and it can have only one value. 
         
        * The ``aws:`` prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix.  
         

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don't want an application to have a specific tag value, don't specify a value for this parameter.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApplicationInfo': {
                'ResourceGroupName': 'string',
                'LifeCycle': 'string',
                'OpsItemSNSTopicArn': 'string',
                'OpsCenterEnabled': True|False,
                'CWEMonitorEnabled': True|False,
                'Remarks': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApplicationInfo** *(dict) --* 

          Information about the application.

          
          

          - **ResourceGroupName** *(string) --* 

            The name of the resource group used for the application.

            
          

          - **LifeCycle** *(string) --* 

            The lifecycle of the application. 

            
          

          - **OpsItemSNSTopicArn** *(string) --* 

            The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. 

            
          

          - **OpsCenterEnabled** *(boolean) --* 

            Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. 

            
          

          - **CWEMonitorEnabled** *(boolean) --* 

            Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others. 

            
          

          - **Remarks** *(string) --* 

            The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:

             

             
            * “Configuring application, detected 1 Errors, 3 Warnings” 
             
            * “Configuring application, detected 1 Unconfigured Components” 
             

            
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.TagsAlreadyExistException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_component(**kwargs)

    

    Creates a custom component by grouping similar standalone instances to monitor.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/CreateComponent>`_    


    **Request Syntax** 
    ::

      response = client.create_component(
          ResourceGroupName='string',
          ComponentName='string',
          ResourceList=[
              'string',
          ]
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type ComponentName: string
    :param ComponentName: **[REQUIRED]** 

      The name of the component.

      

    
    :type ResourceList: list
    :param ResourceList: **[REQUIRED]** 

      The list of resource ARNs that belong to the component.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: create_log_pattern(**kwargs)

    

    Adds an log pattern to a ``LogPatternSet`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/CreateLogPattern>`_    


    **Request Syntax** 
    ::

      response = client.create_log_pattern(
          ResourceGroupName='string',
          PatternSetName='string',
          PatternName='string',
          Pattern='string',
          Rank=123
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type PatternSetName: string
    :param PatternSetName: **[REQUIRED]** 

      The name of the log pattern set.

      

    
    :type PatternName: string
    :param PatternName: **[REQUIRED]** 

      The name of the log pattern.

      

    
    :type Pattern: string
    :param Pattern: **[REQUIRED]** 

      The log pattern. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.

      

    
    :type Rank: integer
    :param Rank: **[REQUIRED]** 

      Rank of the log pattern. Must be a value between ``1`` and ``1,000,000`` . The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank ``1`` will be the first to get matched to a log line. A pattern of rank ``1,000,000`` will be last to get matched. When you configure custom log patterns from the console, a ``Low`` severity pattern translates to a ``750,000`` rank. A ``Medium`` severity pattern translates to a ``500,000`` rank. And a ``High`` severity pattern translates to a ``250,000`` rank. Rank values less than ``1`` or greater than ``1,000,000`` are reserved for AWS-provided patterns. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LogPattern': {
                'PatternSetName': 'string',
                'PatternName': 'string',
                'Pattern': 'string',
                'Rank': 123
            },
            'ResourceGroupName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LogPattern** *(dict) --* 

          The successfully created log pattern.

          
          

          - **PatternSetName** *(string) --* 

            The name of the log pattern. A log pattern name can contain as many as 30 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

            
          

          - **PatternName** *(string) --* 

            The name of the log pattern. A log pattern name can contain as many as 50 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

            
          

          - **Pattern** *(string) --* 

            A regular expression that defines the log pattern. A log pattern can contain as many as 50 characters, and it cannot be empty. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.

            
          

          - **Rank** *(integer) --* 

            Rank of the log pattern. Must be a value between ``1`` and ``1,000,000`` . The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank ``1`` will be the first to get matched to a log line. A pattern of rank ``1,000,000`` will be last to get matched. When you configure custom log patterns from the console, a ``Low`` severity pattern translates to a ``750,000`` rank. A ``Medium`` severity pattern translates to a ``500,000`` rank. And a ``High`` severity pattern translates to a ``250,000`` rank. Rank values less than ``1`` or greater than ``1,000,000`` are reserved for AWS-provided patterns. 

            
      
        

        - **ResourceGroupName** *(string) --* 

          The name of the resource group.

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_application(**kwargs)

    

    Removes the specified application from monitoring. Does not delete the application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DeleteApplication>`_    


    **Request Syntax** 
    ::

      response = client.delete_application(
          ResourceGroupName='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.BadRequestException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_component(**kwargs)

    

    Ungroups a custom component. When you ungroup custom components, all applicable monitors that are set up for the component are removed and the instances revert to their standalone status.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DeleteComponent>`_    


    **Request Syntax** 
    ::

      response = client.delete_component(
          ResourceGroupName='string',
          ComponentName='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type ComponentName: string
    :param ComponentName: **[REQUIRED]** 

      The name of the component.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_log_pattern(**kwargs)

    

    Removes the specified log pattern from a ``LogPatternSet`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DeleteLogPattern>`_    


    **Request Syntax** 
    ::

      response = client.delete_log_pattern(
          ResourceGroupName='string',
          PatternSetName='string',
          PatternName='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type PatternSetName: string
    :param PatternSetName: **[REQUIRED]** 

      The name of the log pattern set.

      

    
    :type PatternName: string
    :param PatternName: **[REQUIRED]** 

      The name of the log pattern.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.BadRequestException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_application(**kwargs)

    

    Describes the application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeApplication>`_    


    **Request Syntax** 
    ::

      response = client.describe_application(
          ResourceGroupName='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApplicationInfo': {
                'ResourceGroupName': 'string',
                'LifeCycle': 'string',
                'OpsItemSNSTopicArn': 'string',
                'OpsCenterEnabled': True|False,
                'CWEMonitorEnabled': True|False,
                'Remarks': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApplicationInfo** *(dict) --* 

          Information about the application.

          
          

          - **ResourceGroupName** *(string) --* 

            The name of the resource group used for the application.

            
          

          - **LifeCycle** *(string) --* 

            The lifecycle of the application. 

            
          

          - **OpsItemSNSTopicArn** *(string) --* 

            The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. 

            
          

          - **OpsCenterEnabled** *(boolean) --* 

            Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. 

            
          

          - **CWEMonitorEnabled** *(boolean) --* 

            Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others. 

            
          

          - **Remarks** *(string) --* 

            The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:

             

             
            * “Configuring application, detected 1 Errors, 3 Warnings” 
             
            * “Configuring application, detected 1 Unconfigured Components” 
             

            
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_component(**kwargs)

    

    Describes a component and lists the resources that are grouped together in a component.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeComponent>`_    


    **Request Syntax** 
    ::

      response = client.describe_component(
          ResourceGroupName='string',
          ComponentName='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type ComponentName: string
    :param ComponentName: **[REQUIRED]** 

      The name of the component.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApplicationComponent': {
                'ComponentName': 'string',
                'ComponentRemarks': 'string',
                'ResourceType': 'string',
                'OsType': 'WINDOWS'|'LINUX',
                'Tier': 'CUSTOM'|'DEFAULT'|'DOT_NET_CORE'|'DOT_NET_WORKER'|'DOT_NET_WEB_TIER'|'DOT_NET_WEB'|'SQL_SERVER'|'SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP'|'MYSQL'|'POSTGRESQL'|'JAVA_JMX'|'ORACLE',
                'Monitor': True|False,
                'DetectedWorkload': {
                    'string': {
                        'string': 'string'
                    }
                }
            },
            'ResourceList': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApplicationComponent** *(dict) --* 

          Describes a standalone resource or similarly grouped resources that the application is made up of.

          
          

          - **ComponentName** *(string) --* 

            The name of the component.

            
          

          - **ComponentRemarks** *(string) --* 

            If logging is supported for the resource type, indicates whether the component has configured logs to be monitored. 

            
          

          - **ResourceType** *(string) --* 

            The resource type. Supported resource types include EC2 instances, Auto Scaling group, Classic ELB, Application ELB, and SQS Queue.

            
          

          - **OsType** *(string) --* 

            The operating system of the component. 

            
          

          - **Tier** *(string) --* 

            The stack tier of the application component.

            
          

          - **Monitor** *(boolean) --* 

            Indicates whether the application component is monitored. 

            
          

          - **DetectedWorkload** *(dict) --* 

            Workloads detected in the application component. 

            
            

            - *(string) --* 
              

              - *(dict) --* 
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
        
      
      
        

        - **ResourceList** *(list) --* 

          The list of resource ARNs that belong to the component.

          
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_component_configuration(**kwargs)

    

    Describes the monitoring configuration of the component.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeComponentConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.describe_component_configuration(
          ResourceGroupName='string',
          ComponentName='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type ComponentName: string
    :param ComponentName: **[REQUIRED]** 

      The name of the component.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Monitor': True|False,
            'Tier': 'CUSTOM'|'DEFAULT'|'DOT_NET_CORE'|'DOT_NET_WORKER'|'DOT_NET_WEB_TIER'|'DOT_NET_WEB'|'SQL_SERVER'|'SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP'|'MYSQL'|'POSTGRESQL'|'JAVA_JMX'|'ORACLE',
            'ComponentConfiguration': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Monitor** *(boolean) --* 

          Indicates whether the application component is monitored.

          
        

        - **Tier** *(string) --* 

          The tier of the application component. Supported tiers include ``DOT_NET_CORE`` , ``DOT_NET_WORKER`` , ``DOT_NET_WEB`` , ``SQL_SERVER`` , and ``DEFAULT``  

          
        

        - **ComponentConfiguration** *(string) --* 

          The configuration settings of the component. The value is the escaped JSON of the configuration.

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_component_configuration_recommendation(**kwargs)

    

    Describes the recommended monitoring configuration of the component.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeComponentConfigurationRecommendation>`_    


    **Request Syntax** 
    ::

      response = client.describe_component_configuration_recommendation(
          ResourceGroupName='string',
          ComponentName='string',
          Tier='CUSTOM'|'DEFAULT'|'DOT_NET_CORE'|'DOT_NET_WORKER'|'DOT_NET_WEB_TIER'|'DOT_NET_WEB'|'SQL_SERVER'|'SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP'|'MYSQL'|'POSTGRESQL'|'JAVA_JMX'|'ORACLE'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type ComponentName: string
    :param ComponentName: **[REQUIRED]** 

      The name of the component.

      

    
    :type Tier: string
    :param Tier: **[REQUIRED]** 

      The tier of the application component. Supported tiers include ``DOT_NET_CORE`` , ``DOT_NET_WORKER`` , ``DOT_NET_WEB`` , ``SQL_SERVER`` , and ``DEFAULT`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ComponentConfiguration': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ComponentConfiguration** *(string) --* 

          The recommended configuration settings of the component. The value is the escaped JSON of the configuration.

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_log_pattern(**kwargs)

    

    Describe a specific log pattern from a ``LogPatternSet`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeLogPattern>`_    


    **Request Syntax** 
    ::

      response = client.describe_log_pattern(
          ResourceGroupName='string',
          PatternSetName='string',
          PatternName='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type PatternSetName: string
    :param PatternSetName: **[REQUIRED]** 

      The name of the log pattern set.

      

    
    :type PatternName: string
    :param PatternName: **[REQUIRED]** 

      The name of the log pattern.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResourceGroupName': 'string',
            'LogPattern': {
                'PatternSetName': 'string',
                'PatternName': 'string',
                'Pattern': 'string',
                'Rank': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResourceGroupName** *(string) --* 

          The name of the resource group.

          
        

        - **LogPattern** *(dict) --* 

          The successfully created log pattern.

          
          

          - **PatternSetName** *(string) --* 

            The name of the log pattern. A log pattern name can contain as many as 30 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

            
          

          - **PatternName** *(string) --* 

            The name of the log pattern. A log pattern name can contain as many as 50 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

            
          

          - **Pattern** *(string) --* 

            A regular expression that defines the log pattern. A log pattern can contain as many as 50 characters, and it cannot be empty. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.

            
          

          - **Rank** *(integer) --* 

            Rank of the log pattern. Must be a value between ``1`` and ``1,000,000`` . The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank ``1`` will be the first to get matched to a log line. A pattern of rank ``1,000,000`` will be last to get matched. When you configure custom log patterns from the console, a ``Low`` severity pattern translates to a ``750,000`` rank. A ``Medium`` severity pattern translates to a ``500,000`` rank. And a ``High`` severity pattern translates to a ``250,000`` rank. Rank values less than ``1`` or greater than ``1,000,000`` are reserved for AWS-provided patterns. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_observation(**kwargs)

    

    Describes an anomaly or error with the application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeObservation>`_    


    **Request Syntax** 
    ::

      response = client.describe_observation(
          ObservationId='string'
      )
    :type ObservationId: string
    :param ObservationId: **[REQUIRED]** 

      The ID of the observation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Observation': {
                'Id': 'string',
                'StartTime': datetime(2015, 1, 1),
                'EndTime': datetime(2015, 1, 1),
                'SourceType': 'string',
                'SourceARN': 'string',
                'LogGroup': 'string',
                'LineTime': datetime(2015, 1, 1),
                'LogText': 'string',
                'LogFilter': 'ERROR'|'WARN'|'INFO',
                'MetricNamespace': 'string',
                'MetricName': 'string',
                'Unit': 'string',
                'Value': 123.0,
                'CloudWatchEventId': 'string',
                'CloudWatchEventSource': 'EC2'|'CODE_DEPLOY'|'HEALTH'|'RDS',
                'CloudWatchEventDetailType': 'string',
                'HealthEventArn': 'string',
                'HealthService': 'string',
                'HealthEventTypeCode': 'string',
                'HealthEventTypeCategory': 'string',
                'HealthEventDescription': 'string',
                'CodeDeployDeploymentId': 'string',
                'CodeDeployDeploymentGroup': 'string',
                'CodeDeployState': 'string',
                'CodeDeployApplication': 'string',
                'CodeDeployInstanceGroupId': 'string',
                'Ec2State': 'string',
                'RdsEventCategories': 'string',
                'RdsEventMessage': 'string',
                'S3EventName': 'string',
                'StatesExecutionArn': 'string',
                'StatesArn': 'string',
                'StatesStatus': 'string',
                'StatesInput': 'string',
                'EbsEvent': 'string',
                'EbsResult': 'string',
                'EbsCause': 'string',
                'EbsRequestId': 'string',
                'XRayFaultPercent': 123,
                'XRayThrottlePercent': 123,
                'XRayErrorPercent': 123,
                'XRayRequestCount': 123,
                'XRayRequestAverageLatency': 123,
                'XRayNodeName': 'string',
                'XRayNodeType': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Observation** *(dict) --* 

          Information about the observation.

          
          

          - **Id** *(string) --* 

            The ID of the observation type.

            
          

          - **StartTime** *(datetime) --* 

            The time when the observation was first detected, in epoch seconds.

            
          

          - **EndTime** *(datetime) --* 

            The time when the observation ended, in epoch seconds.

            
          

          - **SourceType** *(string) --* 

            The source type of the observation.

            
          

          - **SourceARN** *(string) --* 

            The source resource ARN of the observation.

            
          

          - **LogGroup** *(string) --* 

            The log group name.

            
          

          - **LineTime** *(datetime) --* 

            The timestamp in the CloudWatch Logs that specifies when the matched line occurred.

            
          

          - **LogText** *(string) --* 

            The log text of the observation.

            
          

          - **LogFilter** *(string) --* 

            The log filter of the observation.

            
          

          - **MetricNamespace** *(string) --* 

            The namespace of the observation metric.

            
          

          - **MetricName** *(string) --* 

            The name of the observation metric.

            
          

          - **Unit** *(string) --* 

            The unit of the source observation metric.

            
          

          - **Value** *(float) --* 

            The value of the source observation metric.

            
          

          - **CloudWatchEventId** *(string) --* 

            The ID of the CloudWatch Event-based observation related to the detected problem. 

            
          

          - **CloudWatchEventSource** *(string) --* 

            The source of the CloudWatch Event. 

            
          

          - **CloudWatchEventDetailType** *(string) --* 

            The detail type of the CloudWatch Event-based observation, for example, ``EC2 Instance State-change Notification`` . 

            
          

          - **HealthEventArn** *(string) --* 

            The Amazon Resource Name (ARN) of the AWS Health Event-based observation.

            
          

          - **HealthService** *(string) --* 

            The service to which the AWS Health Event belongs, such as EC2. 

            
          

          - **HealthEventTypeCode** *(string) --* 

            The type of the AWS Health event, for example, ``AWS_EC2_POWER_CONNECTIVITY_ISSUE`` . 

            
          

          - **HealthEventTypeCategory** *(string) --* 

            The category of the AWS Health event, such as ``issue`` . 

            
          

          - **HealthEventDescription** *(string) --* 

            The description of the AWS Health event provided by the service, such as Amazon EC2. 

            
          

          - **CodeDeployDeploymentId** *(string) --* 

            The deployment ID of the CodeDeploy-based observation related to the detected problem. 

            
          

          - **CodeDeployDeploymentGroup** *(string) --* 

            The deployment group to which the CodeDeploy deployment belongs. 

            
          

          - **CodeDeployState** *(string) --* 

            The status of the CodeDeploy deployment, for example ``SUCCESS`` or ``FAILURE`` . 

            
          

          - **CodeDeployApplication** *(string) --* 

            The CodeDeploy application to which the deployment belongs. 

            
          

          - **CodeDeployInstanceGroupId** *(string) --* 

            The instance group to which the CodeDeploy instance belongs. 

            
          

          - **Ec2State** *(string) --* 

            The state of the instance, such as ``STOPPING`` or ``TERMINATING`` . 

            
          

          - **RdsEventCategories** *(string) --* 

            The category of an RDS event. 

            
          

          - **RdsEventMessage** *(string) --* 

            The message of an RDS event. 

            
          

          - **S3EventName** *(string) --* 

            The name of the S3 CloudWatch Event-based observation. 

            
          

          - **StatesExecutionArn** *(string) --* 

            The Amazon Resource Name (ARN) of the step function execution-based observation. 

            
          

          - **StatesArn** *(string) --* 

            The Amazon Resource Name (ARN) of the step function-based observation. 

            
          

          - **StatesStatus** *(string) --* 

            The status of the step function-related observation. 

            
          

          - **StatesInput** *(string) --* 

            The input to the step function-based observation. 

            
          

          - **EbsEvent** *(string) --* 

            The type of EBS CloudWatch event, such as ``createVolume`` , ``deleteVolume`` or ``attachVolume`` . 

            
          

          - **EbsResult** *(string) --* 

            The result of an EBS CloudWatch event, such as ``failed`` or ``succeeded`` . 

            
          

          - **EbsCause** *(string) --* 

            The cause of an EBS CloudWatch event. 

            
          

          - **EbsRequestId** *(string) --* 

            The request ID of an EBS CloudWatch event. 

            
          

          - **XRayFaultPercent** *(integer) --* 

            The X-Ray request fault percentage for this node. 

            
          

          - **XRayThrottlePercent** *(integer) --* 

            The X-Ray request throttle percentage for this node. 

            
          

          - **XRayErrorPercent** *(integer) --* 

            The X-Ray request error percentage for this node. 

            
          

          - **XRayRequestCount** *(integer) --* 

            The X-Ray request count for this node. 

            
          

          - **XRayRequestAverageLatency** *(integer) --* 

            The X-Ray node request average latency for this node. 

            
          

          - **XRayNodeName** *(string) --* 

            The name of the X-Ray node. 

            
          

          - **XRayNodeType** *(string) --* 

            The type of the X-Ray node. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_problem(**kwargs)

    

    Describes an application problem.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeProblem>`_    


    **Request Syntax** 
    ::

      response = client.describe_problem(
          ProblemId='string'
      )
    :type ProblemId: string
    :param ProblemId: **[REQUIRED]** 

      The ID of the problem.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Problem': {
                'Id': 'string',
                'Title': 'string',
                'Insights': 'string',
                'Status': 'IGNORE'|'RESOLVED'|'PENDING',
                'AffectedResource': 'string',
                'StartTime': datetime(2015, 1, 1),
                'EndTime': datetime(2015, 1, 1),
                'SeverityLevel': 'Low'|'Medium'|'High',
                'ResourceGroupName': 'string',
                'Feedback': {
                    'string': 'NOT_SPECIFIED'|'USEFUL'|'NOT_USEFUL'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Problem** *(dict) --* 

          Information about the problem. 

          
          

          - **Id** *(string) --* 

            The ID of the problem.

            
          

          - **Title** *(string) --* 

            The name of the problem.

            
          

          - **Insights** *(string) --* 

            A detailed analysis of the problem using machine learning.

            
          

          - **Status** *(string) --* 

            The status of the problem.

            
          

          - **AffectedResource** *(string) --* 

            The resource affected by the problem.

            
          

          - **StartTime** *(datetime) --* 

            The time when the problem started, in epoch seconds.

            
          

          - **EndTime** *(datetime) --* 

            The time when the problem ended, in epoch seconds.

            
          

          - **SeverityLevel** *(string) --* 

            A measure of the level of impact of the problem.

            
          

          - **ResourceGroupName** *(string) --* 

            The name of the resource group affected by the problem.

            
          

          - **Feedback** *(dict) --* 

            Feedback provided by the user about the problem.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_problem_observations(**kwargs)

    

    Describes the anomalies or errors associated with the problem.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/DescribeProblemObservations>`_    


    **Request Syntax** 
    ::

      response = client.describe_problem_observations(
          ProblemId='string'
      )
    :type ProblemId: string
    :param ProblemId: **[REQUIRED]** 

      The ID of the problem.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RelatedObservations': {
                'ObservationList': [
                    {
                        'Id': 'string',
                        'StartTime': datetime(2015, 1, 1),
                        'EndTime': datetime(2015, 1, 1),
                        'SourceType': 'string',
                        'SourceARN': 'string',
                        'LogGroup': 'string',
                        'LineTime': datetime(2015, 1, 1),
                        'LogText': 'string',
                        'LogFilter': 'ERROR'|'WARN'|'INFO',
                        'MetricNamespace': 'string',
                        'MetricName': 'string',
                        'Unit': 'string',
                        'Value': 123.0,
                        'CloudWatchEventId': 'string',
                        'CloudWatchEventSource': 'EC2'|'CODE_DEPLOY'|'HEALTH'|'RDS',
                        'CloudWatchEventDetailType': 'string',
                        'HealthEventArn': 'string',
                        'HealthService': 'string',
                        'HealthEventTypeCode': 'string',
                        'HealthEventTypeCategory': 'string',
                        'HealthEventDescription': 'string',
                        'CodeDeployDeploymentId': 'string',
                        'CodeDeployDeploymentGroup': 'string',
                        'CodeDeployState': 'string',
                        'CodeDeployApplication': 'string',
                        'CodeDeployInstanceGroupId': 'string',
                        'Ec2State': 'string',
                        'RdsEventCategories': 'string',
                        'RdsEventMessage': 'string',
                        'S3EventName': 'string',
                        'StatesExecutionArn': 'string',
                        'StatesArn': 'string',
                        'StatesStatus': 'string',
                        'StatesInput': 'string',
                        'EbsEvent': 'string',
                        'EbsResult': 'string',
                        'EbsCause': 'string',
                        'EbsRequestId': 'string',
                        'XRayFaultPercent': 123,
                        'XRayThrottlePercent': 123,
                        'XRayErrorPercent': 123,
                        'XRayRequestCount': 123,
                        'XRayRequestAverageLatency': 123,
                        'XRayNodeName': 'string',
                        'XRayNodeType': 'string'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RelatedObservations** *(dict) --* 

          Observations related to the problem.

          
          

          - **ObservationList** *(list) --* 

            The list of observations related to the problem.

            
            

            - *(dict) --* 

              Describes an anomaly or error with the application.

              
              

              - **Id** *(string) --* 

                The ID of the observation type.

                
              

              - **StartTime** *(datetime) --* 

                The time when the observation was first detected, in epoch seconds.

                
              

              - **EndTime** *(datetime) --* 

                The time when the observation ended, in epoch seconds.

                
              

              - **SourceType** *(string) --* 

                The source type of the observation.

                
              

              - **SourceARN** *(string) --* 

                The source resource ARN of the observation.

                
              

              - **LogGroup** *(string) --* 

                The log group name.

                
              

              - **LineTime** *(datetime) --* 

                The timestamp in the CloudWatch Logs that specifies when the matched line occurred.

                
              

              - **LogText** *(string) --* 

                The log text of the observation.

                
              

              - **LogFilter** *(string) --* 

                The log filter of the observation.

                
              

              - **MetricNamespace** *(string) --* 

                The namespace of the observation metric.

                
              

              - **MetricName** *(string) --* 

                The name of the observation metric.

                
              

              - **Unit** *(string) --* 

                The unit of the source observation metric.

                
              

              - **Value** *(float) --* 

                The value of the source observation metric.

                
              

              - **CloudWatchEventId** *(string) --* 

                The ID of the CloudWatch Event-based observation related to the detected problem. 

                
              

              - **CloudWatchEventSource** *(string) --* 

                The source of the CloudWatch Event. 

                
              

              - **CloudWatchEventDetailType** *(string) --* 

                The detail type of the CloudWatch Event-based observation, for example, ``EC2 Instance State-change Notification`` . 

                
              

              - **HealthEventArn** *(string) --* 

                The Amazon Resource Name (ARN) of the AWS Health Event-based observation.

                
              

              - **HealthService** *(string) --* 

                The service to which the AWS Health Event belongs, such as EC2. 

                
              

              - **HealthEventTypeCode** *(string) --* 

                The type of the AWS Health event, for example, ``AWS_EC2_POWER_CONNECTIVITY_ISSUE`` . 

                
              

              - **HealthEventTypeCategory** *(string) --* 

                The category of the AWS Health event, such as ``issue`` . 

                
              

              - **HealthEventDescription** *(string) --* 

                The description of the AWS Health event provided by the service, such as Amazon EC2. 

                
              

              - **CodeDeployDeploymentId** *(string) --* 

                The deployment ID of the CodeDeploy-based observation related to the detected problem. 

                
              

              - **CodeDeployDeploymentGroup** *(string) --* 

                The deployment group to which the CodeDeploy deployment belongs. 

                
              

              - **CodeDeployState** *(string) --* 

                The status of the CodeDeploy deployment, for example ``SUCCESS`` or ``FAILURE`` . 

                
              

              - **CodeDeployApplication** *(string) --* 

                The CodeDeploy application to which the deployment belongs. 

                
              

              - **CodeDeployInstanceGroupId** *(string) --* 

                The instance group to which the CodeDeploy instance belongs. 

                
              

              - **Ec2State** *(string) --* 

                The state of the instance, such as ``STOPPING`` or ``TERMINATING`` . 

                
              

              - **RdsEventCategories** *(string) --* 

                The category of an RDS event. 

                
              

              - **RdsEventMessage** *(string) --* 

                The message of an RDS event. 

                
              

              - **S3EventName** *(string) --* 

                The name of the S3 CloudWatch Event-based observation. 

                
              

              - **StatesExecutionArn** *(string) --* 

                The Amazon Resource Name (ARN) of the step function execution-based observation. 

                
              

              - **StatesArn** *(string) --* 

                The Amazon Resource Name (ARN) of the step function-based observation. 

                
              

              - **StatesStatus** *(string) --* 

                The status of the step function-related observation. 

                
              

              - **StatesInput** *(string) --* 

                The input to the step function-based observation. 

                
              

              - **EbsEvent** *(string) --* 

                The type of EBS CloudWatch event, such as ``createVolume`` , ``deleteVolume`` or ``attachVolume`` . 

                
              

              - **EbsResult** *(string) --* 

                The result of an EBS CloudWatch event, such as ``failed`` or ``succeeded`` . 

                
              

              - **EbsCause** *(string) --* 

                The cause of an EBS CloudWatch event. 

                
              

              - **EbsRequestId** *(string) --* 

                The request ID of an EBS CloudWatch event. 

                
              

              - **XRayFaultPercent** *(integer) --* 

                The X-Ray request fault percentage for this node. 

                
              

              - **XRayThrottlePercent** *(integer) --* 

                The X-Ray request throttle percentage for this node. 

                
              

              - **XRayErrorPercent** *(integer) --* 

                The X-Ray request error percentage for this node. 

                
              

              - **XRayRequestCount** *(integer) --* 

                The X-Ray request count for this node. 

                
              

              - **XRayRequestAverageLatency** *(integer) --* 

                The X-Ray node request average latency for this node. 

                
              

              - **XRayNodeName** *(string) --* 

                The name of the X-Ray node. 

                
              

              - **XRayNodeType** *(string) --* 

                The type of the X-Ray node. 

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_applications(**kwargs)

    

    Lists the IDs of the applications that you are monitoring. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/ListApplications>`_    


    **Request Syntax** 
    ::

      response = client.list_applications(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned ``NextToken`` value.

      

    
    :type NextToken: string
    :param NextToken: 

      The token to request the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApplicationInfoList': [
                {
                    'ResourceGroupName': 'string',
                    'LifeCycle': 'string',
                    'OpsItemSNSTopicArn': 'string',
                    'OpsCenterEnabled': True|False,
                    'CWEMonitorEnabled': True|False,
                    'Remarks': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApplicationInfoList** *(list) --* 

          The list of applications.

          
          

          - *(dict) --* 

            Describes the status of the application.

            
            

            - **ResourceGroupName** *(string) --* 

              The name of the resource group used for the application.

              
            

            - **LifeCycle** *(string) --* 

              The lifecycle of the application. 

              
            

            - **OpsItemSNSTopicArn** *(string) --* 

              The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. 

              
            

            - **OpsCenterEnabled** *(boolean) --* 

              Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. 

              
            

            - **CWEMonitorEnabled** *(boolean) --* 

              Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others. 

              
            

            - **Remarks** *(string) --* 

              The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:

               

               
              * “Configuring application, detected 1 Errors, 3 Warnings” 
               
              * “Configuring application, detected 1 Unconfigured Components” 
               

              
        
      
        

        - **NextToken** *(string) --* 

          The token used to retrieve the next page of results. This value is ``null`` when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: list_components(**kwargs)

    

    Lists the auto-grouped, standalone, and custom components of the application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/ListComponents>`_    


    **Request Syntax** 
    ::

      response = client.list_components(
          ResourceGroupName='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned ``NextToken`` value.

      

    
    :type NextToken: string
    :param NextToken: 

      The token to request the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApplicationComponentList': [
                {
                    'ComponentName': 'string',
                    'ComponentRemarks': 'string',
                    'ResourceType': 'string',
                    'OsType': 'WINDOWS'|'LINUX',
                    'Tier': 'CUSTOM'|'DEFAULT'|'DOT_NET_CORE'|'DOT_NET_WORKER'|'DOT_NET_WEB_TIER'|'DOT_NET_WEB'|'SQL_SERVER'|'SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP'|'MYSQL'|'POSTGRESQL'|'JAVA_JMX'|'ORACLE',
                    'Monitor': True|False,
                    'DetectedWorkload': {
                        'string': {
                            'string': 'string'
                        }
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApplicationComponentList** *(list) --* 

          The list of application components.

          
          

          - *(dict) --* 

            Describes a standalone resource or similarly grouped resources that the application is made up of.

            
            

            - **ComponentName** *(string) --* 

              The name of the component.

              
            

            - **ComponentRemarks** *(string) --* 

              If logging is supported for the resource type, indicates whether the component has configured logs to be monitored. 

              
            

            - **ResourceType** *(string) --* 

              The resource type. Supported resource types include EC2 instances, Auto Scaling group, Classic ELB, Application ELB, and SQS Queue.

              
            

            - **OsType** *(string) --* 

              The operating system of the component. 

              
            

            - **Tier** *(string) --* 

              The stack tier of the application component.

              
            

            - **Monitor** *(boolean) --* 

              Indicates whether the application component is monitored. 

              
            

            - **DetectedWorkload** *(dict) --* 

              Workloads detected in the application component. 

              
              

              - *(string) --* 
                

                - *(dict) --* 
                  

                  - *(string) --* 
                    

                    - *(string) --* 
              
            
          
        
        
      
        

        - **NextToken** *(string) --* 

          The token to request the next page of results.

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: list_configuration_history(**kwargs)

    

    Lists the INFO, WARN, and ERROR events for periodic configuration updates performed by Application Insights. Examples of events represented are: 

     

     
    * INFO: creating a new alarm or updating an alarm threshold. 
     
    * WARN: alarm not created due to insufficient data points used to predict thresholds. 
     
    * ERROR: alarm not created due to permission errors or exceeding quotas.  
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/ListConfigurationHistory>`_    


    **Request Syntax** 
    ::

      response = client.list_configuration_history(
          ResourceGroupName='string',
          StartTime=datetime(2015, 1, 1),
          EndTime=datetime(2015, 1, 1),
          EventStatus='INFO'|'WARN'|'ERROR',
          MaxResults=123,
          NextToken='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: 

      Resource group to which the application belongs. 

      

    
    :type StartTime: datetime
    :param StartTime: 

      The start time of the event. 

      

    
    :type EndTime: datetime
    :param EndTime: 

      The end time of the event.

      

    
    :type EventStatus: string
    :param EventStatus: 

      The status of the configuration update event. Possible values include INFO, WARN, and ERROR.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results returned by ``ListConfigurationHistory`` in paginated output. When this parameter is used, ``ListConfigurationHistory`` returns only ``MaxResults`` in a single page along with a ``NextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListConfigurationHistory`` request with the returned ``NextToken`` value. If this parameter is not used, then ``ListConfigurationHistory`` returns all results. 

      

    
    :type NextToken: string
    :param NextToken: 

      The ``NextToken`` value returned from a previous paginated ``ListConfigurationHistory`` request where ``MaxResults`` was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the ``NextToken`` value. This value is ``null`` when there are no more results to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventList': [
                {
                    'MonitoredResourceARN': 'string',
                    'EventStatus': 'INFO'|'WARN'|'ERROR',
                    'EventResourceType': 'CLOUDWATCH_ALARM'|'CLOUDWATCH_LOG'|'CLOUDFORMATION'|'SSM_ASSOCIATION',
                    'EventTime': datetime(2015, 1, 1),
                    'EventDetail': 'string',
                    'EventResourceName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventList** *(list) --* 

          The list of configuration events and their corresponding details. 

          
          

          - *(dict) --* 

            The event information. 

            
            

            - **MonitoredResourceARN** *(string) --* 

              The resource monitored by Application Insights. 

              
            

            - **EventStatus** *(string) --* 

              The status of the configuration update event. Possible values include INFO, WARN, and ERROR. 

              
            

            - **EventResourceType** *(string) --* 

              The resource type that Application Insights attempted to configure, for example, CLOUDWATCH_ALARM. 

              
            

            - **EventTime** *(datetime) --* 

              The timestamp of the event. 

              
            

            - **EventDetail** *(string) --* 

              The details of the event in plain text. 

              
            

            - **EventResourceName** *(string) --* 

              The name of the resource Application Insights attempted to configure. 

              
        
      
        

        - **NextToken** *(string) --* 

          The ``NextToken`` value to include in a future ``ListConfigurationHistory`` request. When the results of a ``ListConfigurationHistory`` request exceed ``MaxResults`` , this value can be used to retrieve the next page of results. This value is ``null`` when there are no more results to return.

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: list_log_pattern_sets(**kwargs)

    

    Lists the log pattern sets in the specific application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/ListLogPatternSets>`_    


    **Request Syntax** 
    ::

      response = client.list_log_pattern_sets(
          ResourceGroupName='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned ``NextToken`` value.

      

    
    :type NextToken: string
    :param NextToken: 

      The token to request the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResourceGroupName': 'string',
            'LogPatternSets': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResourceGroupName** *(string) --* 

          The name of the resource group.

          
        

        - **LogPatternSets** *(list) --* 

          The list of log pattern sets.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          The token used to retrieve the next page of results. This value is ``null`` when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: list_log_patterns(**kwargs)

    

    Lists the log patterns in the specific log ``LogPatternSet`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/ListLogPatterns>`_    


    **Request Syntax** 
    ::

      response = client.list_log_patterns(
          ResourceGroupName='string',
          PatternSetName='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type PatternSetName: string
    :param PatternSetName: 

      The name of the log pattern set.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned ``NextToken`` value.

      

    
    :type NextToken: string
    :param NextToken: 

      The token to request the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResourceGroupName': 'string',
            'LogPatterns': [
                {
                    'PatternSetName': 'string',
                    'PatternName': 'string',
                    'Pattern': 'string',
                    'Rank': 123
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResourceGroupName** *(string) --* 

          The name of the resource group.

          
        

        - **LogPatterns** *(list) --* 

          The list of log patterns.

          
          

          - *(dict) --* 

            An object that defines the log patterns that belongs to a ``LogPatternSet`` .

            
            

            - **PatternSetName** *(string) --* 

              The name of the log pattern. A log pattern name can contain as many as 30 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

              
            

            - **PatternName** *(string) --* 

              The name of the log pattern. A log pattern name can contain as many as 50 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

              
            

            - **Pattern** *(string) --* 

              A regular expression that defines the log pattern. A log pattern can contain as many as 50 characters, and it cannot be empty. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.

              
            

            - **Rank** *(integer) --* 

              Rank of the log pattern. Must be a value between ``1`` and ``1,000,000`` . The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank ``1`` will be the first to get matched to a log line. A pattern of rank ``1,000,000`` will be last to get matched. When you configure custom log patterns from the console, a ``Low`` severity pattern translates to a ``750,000`` rank. A ``Medium`` severity pattern translates to a ``500,000`` rank. And a ``High`` severity pattern translates to a ``250,000`` rank. Rank values less than ``1`` or greater than ``1,000,000`` are reserved for AWS-provided patterns. 

              
        
      
        

        - **NextToken** *(string) --* 

          The token used to retrieve the next page of results. This value is ``null`` when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: list_problems(**kwargs)

    

    Lists the problems with your application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/ListProblems>`_    


    **Request Syntax** 
    ::

      response = client.list_problems(
          ResourceGroupName='string',
          StartTime=datetime(2015, 1, 1),
          EndTime=datetime(2015, 1, 1),
          MaxResults=123,
          NextToken='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: 

      The name of the resource group.

      

    
    :type StartTime: datetime
    :param StartTime: 

      The time when the problem was detected, in epoch seconds. If you don't specify a time frame for the request, problems within the past seven days are returned.

      

    
    :type EndTime: datetime
    :param EndTime: 

      The time when the problem ended, in epoch seconds. If not specified, problems within the past seven days are returned.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned ``NextToken`` value.

      

    
    :type NextToken: string
    :param NextToken: 

      The token to request the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ProblemList': [
                {
                    'Id': 'string',
                    'Title': 'string',
                    'Insights': 'string',
                    'Status': 'IGNORE'|'RESOLVED'|'PENDING',
                    'AffectedResource': 'string',
                    'StartTime': datetime(2015, 1, 1),
                    'EndTime': datetime(2015, 1, 1),
                    'SeverityLevel': 'Low'|'Medium'|'High',
                    'ResourceGroupName': 'string',
                    'Feedback': {
                        'string': 'NOT_SPECIFIED'|'USEFUL'|'NOT_USEFUL'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ProblemList** *(list) --* 

          The list of problems. 

          
          

          - *(dict) --* 

            Describes a problem that is detected by correlating observations.

            
            

            - **Id** *(string) --* 

              The ID of the problem.

              
            

            - **Title** *(string) --* 

              The name of the problem.

              
            

            - **Insights** *(string) --* 

              A detailed analysis of the problem using machine learning.

              
            

            - **Status** *(string) --* 

              The status of the problem.

              
            

            - **AffectedResource** *(string) --* 

              The resource affected by the problem.

              
            

            - **StartTime** *(datetime) --* 

              The time when the problem started, in epoch seconds.

              
            

            - **EndTime** *(datetime) --* 

              The time when the problem ended, in epoch seconds.

              
            

            - **SeverityLevel** *(string) --* 

              A measure of the level of impact of the problem.

              
            

            - **ResourceGroupName** *(string) --* 

              The name of the resource group affected by the problem.

              
            

            - **Feedback** *(dict) --* 

              Feedback provided by the user about the problem.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **NextToken** *(string) --* 

          The token used to retrieve the next page of results. This value is ``null`` when there are no more results to return. 

          
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Retrieve a list of the tags (keys and values) that are associated with a specified application. A *tag* is a label that you optionally define and associate with an application. Each tag consists of a required *tag key* and an optional associated *tag value* . A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceARN='string'
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the application that you want to retrieve tag information for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tags** *(list) --* 

          An array that lists all the tags that are associated with the application. Each tag consists of a required tag key (``Key`` ) and an associated tag value (``Value`` ).

          
          

          - *(dict) --* 

            An object that defines the tags associated with an application. A *tag* is a label that you optionally define and associate with an application. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria.

             

            Each tag consists of a required *tag key* and an associated *tag value* , both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:

             

             
            * Tag keys and values are case sensitive. 
             
            * For each associated resource, each tag key must be unique and it can have only one value. 
             
            * The ``aws:`` prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix.  
             

            
            

            - **Key** *(string) --* 

              One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.

              
            

            - **Value** *(string) --* 

              The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don't want an application to have a specific tag value, don't specify a value for this parameter.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Add one or more tags (keys and values) to a specified application. A *tag* is a label that you optionally define and associate with an application. Tags can help you categorize and manage application in different ways, such as by purpose, owner, environment, or other criteria. 

     

    Each tag consists of a required *tag key* and an associated *tag value* , both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceARN='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the application that you want to add one or more tags to.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      A list of tags that to add to the application. A tag consists of a required tag key (``Key`` ) and an associated tag value (``Value`` ). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.

      

    
      - *(dict) --* 

        An object that defines the tags associated with an application. A *tag* is a label that you optionally define and associate with an application. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria.

         

        Each tag consists of a required *tag key* and an associated *tag value* , both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:

         

         
        * Tag keys and values are case sensitive. 
         
        * For each associated resource, each tag key must be unique and it can have only one value. 
         
        * The ``aws:`` prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix.  
         

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          One part of a key-value pair that defines a tag. The maximum length of a tag key is 128 characters. The minimum length is 1 character.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The optional part of a key-value pair that defines a tag. The maximum length of a tag value is 256 characters. The minimum length is 0 characters. If you don't want an application to have a specific tag value, don't specify a value for this parameter.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.TooManyTagsException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Remove one or more tags (keys and values) from a specified application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceARN='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the application that you want to remove one or more tags from.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value.

       

      To remove more than one tag from the application, append the ``TagKeys`` parameter and argument for each additional tag to remove, separated by an ampersand. 

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    

  .. py:method:: update_application(**kwargs)

    

    Updates the application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/UpdateApplication>`_    


    **Request Syntax** 
    ::

      response = client.update_application(
          ResourceGroupName='string',
          OpsCenterEnabled=True|False,
          CWEMonitorEnabled=True|False,
          OpsItemSNSTopicArn='string',
          RemoveSNSTopic=True|False
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type OpsCenterEnabled: boolean
    :param OpsCenterEnabled: 

      When set to ``true`` , creates opsItems for any problems detected on an application. 

      

    
    :type CWEMonitorEnabled: boolean
    :param CWEMonitorEnabled: 

      Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others. 

      

    
    :type OpsItemSNSTopicArn: string
    :param OpsItemSNSTopicArn: 

      The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.

      

    
    :type RemoveSNSTopic: boolean
    :param RemoveSNSTopic: 

      Disassociates the SNS topic from the opsItem created for detected problems.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApplicationInfo': {
                'ResourceGroupName': 'string',
                'LifeCycle': 'string',
                'OpsItemSNSTopicArn': 'string',
                'OpsCenterEnabled': True|False,
                'CWEMonitorEnabled': True|False,
                'Remarks': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApplicationInfo** *(dict) --* 

          Information about the application. 

          
          

          - **ResourceGroupName** *(string) --* 

            The name of the resource group used for the application.

            
          

          - **LifeCycle** *(string) --* 

            The lifecycle of the application. 

            
          

          - **OpsItemSNSTopicArn** *(string) --* 

            The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. 

            
          

          - **OpsCenterEnabled** *(boolean) --* 

            Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. 

            
          

          - **CWEMonitorEnabled** *(boolean) --* 

            Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as ``instance terminated`` , ``failed deployment`` , and others. 

            
          

          - **Remarks** *(string) --* 

            The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:

             

             
            * “Configuring application, detected 1 Errors, 3 Warnings” 
             
            * “Configuring application, detected 1 Unconfigured Components” 
             

            
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    

  .. py:method:: update_component(**kwargs)

    

    Updates the custom component name and/or the list of resources that make up the component.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/UpdateComponent>`_    


    **Request Syntax** 
    ::

      response = client.update_component(
          ResourceGroupName='string',
          ComponentName='string',
          NewComponentName='string',
          ResourceList=[
              'string',
          ]
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type ComponentName: string
    :param ComponentName: **[REQUIRED]** 

      The name of the component.

      

    
    :type NewComponentName: string
    :param NewComponentName: 

      The new name of the component.

      

    
    :type ResourceList: list
    :param ResourceList: 

      The list of resource ARNs that belong to the component.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: update_component_configuration(**kwargs)

    

    Updates the monitoring configurations for the component. The configuration input parameter is an escaped JSON of the configuration and should match the schema of what is returned by ``DescribeComponentConfigurationRecommendation`` . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/UpdateComponentConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.update_component_configuration(
          ResourceGroupName='string',
          ComponentName='string',
          Monitor=True|False,
          Tier='CUSTOM'|'DEFAULT'|'DOT_NET_CORE'|'DOT_NET_WORKER'|'DOT_NET_WEB_TIER'|'DOT_NET_WEB'|'SQL_SERVER'|'SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP'|'MYSQL'|'POSTGRESQL'|'JAVA_JMX'|'ORACLE',
          ComponentConfiguration='string'
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type ComponentName: string
    :param ComponentName: **[REQUIRED]** 

      The name of the component.

      

    
    :type Monitor: boolean
    :param Monitor: 

      Indicates whether the application component is monitored.

      

    
    :type Tier: string
    :param Tier: 

      The tier of the application component. Supported tiers include ``DOT_NET_WORKER`` , ``DOT_NET_WEB`` , ``DOT_NET_CORE`` , ``SQL_SERVER`` , and ``DEFAULT`` .

      

    
    :type ComponentConfiguration: string
    :param ComponentConfiguration: 

      The configuration settings of the component. The value is the escaped JSON of the configuration. For more information about the JSON format, see `Working with JSON <https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/working-with-json.html>`__ . You can send a request to ``DescribeComponentConfigurationRecommendation`` to see the recommended configuration for a component. For the complete format of the component configuration file, see `Component Configuration <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/component-config.html>`__ .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

  .. py:method:: update_log_pattern(**kwargs)

    

    Adds a log pattern to a ``LogPatternSet`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/application-insights-2018-11-25/UpdateLogPattern>`_    


    **Request Syntax** 
    ::

      response = client.update_log_pattern(
          ResourceGroupName='string',
          PatternSetName='string',
          PatternName='string',
          Pattern='string',
          Rank=123
      )
    :type ResourceGroupName: string
    :param ResourceGroupName: **[REQUIRED]** 

      The name of the resource group.

      

    
    :type PatternSetName: string
    :param PatternSetName: **[REQUIRED]** 

      The name of the log pattern set.

      

    
    :type PatternName: string
    :param PatternName: **[REQUIRED]** 

      The name of the log pattern.

      

    
    :type Pattern: string
    :param Pattern: 

      The log pattern. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.

      

    
    :type Rank: integer
    :param Rank: 

      Rank of the log pattern. Must be a value between ``1`` and ``1,000,000`` . The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank ``1`` will be the first to get matched to a log line. A pattern of rank ``1,000,000`` will be last to get matched. When you configure custom log patterns from the console, a ``Low`` severity pattern translates to a ``750,000`` rank. A ``Medium`` severity pattern translates to a ``500,000`` rank. And a ``High`` severity pattern translates to a ``250,000`` rank. Rank values less than ``1`` or greater than ``1,000,000`` are reserved for AWS-provided patterns. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResourceGroupName': 'string',
            'LogPattern': {
                'PatternSetName': 'string',
                'PatternName': 'string',
                'Pattern': 'string',
                'Rank': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResourceGroupName** *(string) --* 

          The name of the resource group.

          
        

        - **LogPattern** *(dict) --* 

          The successfully created log pattern.

          
          

          - **PatternSetName** *(string) --* 

            The name of the log pattern. A log pattern name can contain as many as 30 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

            
          

          - **PatternName** *(string) --* 

            The name of the log pattern. A log pattern name can contain as many as 50 characters, and it cannot be empty. The characters can be Unicode letters, digits, or one of the following symbols: period, dash, underscore.

            
          

          - **Pattern** *(string) --* 

            A regular expression that defines the log pattern. A log pattern can contain as many as 50 characters, and it cannot be empty. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.

            
          

          - **Rank** *(integer) --* 

            Rank of the log pattern. Must be a value between ``1`` and ``1,000,000`` . The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank ``1`` will be the first to get matched to a log line. A pattern of rank ``1,000,000`` will be last to get matched. When you configure custom log patterns from the console, a ``Low`` severity pattern translates to a ``750,000`` rank. A ``Medium`` severity pattern translates to a ``500,000`` rank. And a ``High`` severity pattern translates to a ``250,000`` rank. Rank values less than ``1`` or greater than ``1,000,000`` are reserved for AWS-provided patterns. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.ValidationException`

    
    *     :py:class:`ApplicationInsights.Client.exceptions.InternalServerException`

    

==========
Paginators
==========


The available paginators are:
