

************
NimbleStudio
************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: NimbleStudio.Client

  A low-level client representing AmazonNimbleStudio
  ::

    
    import boto3
    
    client = boto3.client('nimble')

  
  These are the available methods:
  
  *   :py:meth:`~NimbleStudio.Client.accept_eulas`

  
  *   :py:meth:`~NimbleStudio.Client.can_paginate`

  
  *   :py:meth:`~NimbleStudio.Client.create_launch_profile`

  
  *   :py:meth:`~NimbleStudio.Client.create_streaming_image`

  
  *   :py:meth:`~NimbleStudio.Client.create_streaming_session`

  
  *   :py:meth:`~NimbleStudio.Client.create_streaming_session_stream`

  
  *   :py:meth:`~NimbleStudio.Client.create_studio`

  
  *   :py:meth:`~NimbleStudio.Client.create_studio_component`

  
  *   :py:meth:`~NimbleStudio.Client.delete_launch_profile`

  
  *   :py:meth:`~NimbleStudio.Client.delete_launch_profile_member`

  
  *   :py:meth:`~NimbleStudio.Client.delete_streaming_image`

  
  *   :py:meth:`~NimbleStudio.Client.delete_streaming_session`

  
  *   :py:meth:`~NimbleStudio.Client.delete_studio`

  
  *   :py:meth:`~NimbleStudio.Client.delete_studio_component`

  
  *   :py:meth:`~NimbleStudio.Client.delete_studio_member`

  
  *   :py:meth:`~NimbleStudio.Client.generate_presigned_url`

  
  *   :py:meth:`~NimbleStudio.Client.get_eula`

  
  *   :py:meth:`~NimbleStudio.Client.get_launch_profile`

  
  *   :py:meth:`~NimbleStudio.Client.get_launch_profile_details`

  
  *   :py:meth:`~NimbleStudio.Client.get_launch_profile_initialization`

  
  *   :py:meth:`~NimbleStudio.Client.get_launch_profile_member`

  
  *   :py:meth:`~NimbleStudio.Client.get_paginator`

  
  *   :py:meth:`~NimbleStudio.Client.get_streaming_image`

  
  *   :py:meth:`~NimbleStudio.Client.get_streaming_session`

  
  *   :py:meth:`~NimbleStudio.Client.get_streaming_session_stream`

  
  *   :py:meth:`~NimbleStudio.Client.get_studio`

  
  *   :py:meth:`~NimbleStudio.Client.get_studio_component`

  
  *   :py:meth:`~NimbleStudio.Client.get_studio_member`

  
  *   :py:meth:`~NimbleStudio.Client.get_waiter`

  
  *   :py:meth:`~NimbleStudio.Client.list_eula_acceptances`

  
  *   :py:meth:`~NimbleStudio.Client.list_eulas`

  
  *   :py:meth:`~NimbleStudio.Client.list_launch_profile_members`

  
  *   :py:meth:`~NimbleStudio.Client.list_launch_profiles`

  
  *   :py:meth:`~NimbleStudio.Client.list_streaming_images`

  
  *   :py:meth:`~NimbleStudio.Client.list_streaming_sessions`

  
  *   :py:meth:`~NimbleStudio.Client.list_studio_components`

  
  *   :py:meth:`~NimbleStudio.Client.list_studio_members`

  
  *   :py:meth:`~NimbleStudio.Client.list_studios`

  
  *   :py:meth:`~NimbleStudio.Client.list_tags_for_resource`

  
  *   :py:meth:`~NimbleStudio.Client.put_launch_profile_members`

  
  *   :py:meth:`~NimbleStudio.Client.put_studio_members`

  
  *   :py:meth:`~NimbleStudio.Client.start_studio_sso_configuration_repair`

  
  *   :py:meth:`~NimbleStudio.Client.tag_resource`

  
  *   :py:meth:`~NimbleStudio.Client.untag_resource`

  
  *   :py:meth:`~NimbleStudio.Client.update_launch_profile`

  
  *   :py:meth:`~NimbleStudio.Client.update_launch_profile_member`

  
  *   :py:meth:`~NimbleStudio.Client.update_streaming_image`

  
  *   :py:meth:`~NimbleStudio.Client.update_studio`

  
  *   :py:meth:`~NimbleStudio.Client.update_studio_component`

  

  .. py:method:: accept_eulas(**kwargs)

    

    Accept EULAs.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/AcceptEulas>`_    


    **Request Syntax** 
    ::

      response = client.accept_eulas(
          clientToken='string',
          eulaIds=[
              'string',
          ],
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type eulaIds: list
    :param eulaIds: 

      The EULA ID.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'eulaAcceptances': [
                {
                    'acceptedAt': datetime(2015, 1, 1),
                    'acceptedBy': 'string',
                    'accepteeId': 'string',
                    'eulaAcceptanceId': 'string',
                    'eulaId': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **eulaAcceptances** *(list) --* 

          A collection of EULA acceptances.

          
          

          - *(dict) --* 
            

            - **acceptedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the EULA was accepted.

              
            

            - **acceptedBy** *(string) --* 

              The ID of the person who accepted the EULA.

              
            

            - **accepteeId** *(string) --* 

              The ID of the acceptee.

              
            

            - **eulaAcceptanceId** *(string) --* 

              The EULA acceptance ID.

              
            

            - **eulaId** *(string) --* 

              The EULA ID.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_launch_profile(**kwargs)

    

    Create a launch profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/CreateLaunchProfile>`_    


    **Request Syntax** 
    ::

      response = client.create_launch_profile(
          clientToken='string',
          description='string',
          ec2SubnetIds=[
              'string',
          ],
          launchProfileProtocolVersions=[
              'string',
          ],
          name='string',
          streamConfiguration={
              'clipboardMode': 'ENABLED'|'DISABLED',
              'ec2InstanceTypes': [
                  'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
              ],
              'maxSessionLengthInMinutes': 123,
              'streamingImageIds': [
                  'string',
              ]
          },
          studioComponentIds=[
              'string',
          ],
          studioId='string',
          tags={
              'string': 'string'
          }
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type description: string
    :param description: 

      The description.

      

    
    :type ec2SubnetIds: list
    :param ec2SubnetIds: **[REQUIRED]** 

    
      - *(string) --* 

      
  
    :type launchProfileProtocolVersions: list
    :param launchProfileProtocolVersions: **[REQUIRED]** 

      The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

      

    
      - *(string) --* 

        The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

        

      
  
    :type name: string
    :param name: **[REQUIRED]** 

      The name for the launch profile.

      

    
    :type streamConfiguration: dict
    :param streamConfiguration: **[REQUIRED]** 

      A configuration for a streaming session.

      

    
      - **clipboardMode** *(string) --* **[REQUIRED]** 

        Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

        

      
      - **ec2InstanceTypes** *(list) --* **[REQUIRED]** 

        The EC2 instance types that users can select from when launching a streaming session with this launch profile.

        

      
        - *(string) --* 

        
    
      - **maxSessionLengthInMinutes** *(integer) --* 

        The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

        

      
      - **streamingImageIds** *(list) --* **[REQUIRED]** 

        The streaming images that users can select from when launching a streaming session with this launch profile.

        

      
        - *(string) --* 

        
    
    
    :type studioComponentIds: list
    :param studioComponentIds: **[REQUIRED]** 

      Unique identifiers for a collection of studio components that can be used with this launch profile.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type tags: dict
    :param tags: 

      A collection of labels, in the form of key:value pairs, that apply to this resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfile': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SubnetIds': [
                    'string',
                ],
                'launchProfileId': 'string',
                'launchProfileProtocolVersions': [
                    'string',
                ],
                'name': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'LAUNCH_PROFILE_CREATED'|'LAUNCH_PROFILE_UPDATED'|'LAUNCH_PROFILE_DELETED'|'LAUNCH_PROFILE_CREATE_IN_PROGRESS'|'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'|'LAUNCH_PROFILE_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'STREAMING_IMAGE_NOT_FOUND'|'STREAMING_IMAGE_NOT_READY'|'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'INVALID_SUBNETS_PROVIDED',
                'statusMessage': 'string',
                'streamConfiguration': {
                    'clipboardMode': 'ENABLED'|'DISABLED',
                    'ec2InstanceTypes': [
                        'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
                    ],
                    'maxSessionLengthInMinutes': 123,
                    'streamingImageIds': [
                        'string',
                    ]
                },
                'studioComponentIds': [
                    'string',
                ],
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfile** *(dict) --* 

          The launch profile.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the launch profile.

            
          

          - **description** *(string) --* 

            A human-readable description of the launch profile.

            
          

          - **ec2SubnetIds** *(list) --* 

            Unique identifiers for a collection of EC2 subnets.

            
            

            - *(string) --* 
        
          

          - **launchProfileId** *(string) --* 

            The launch profile ID.

            
          

          - **launchProfileProtocolVersions** *(list) --* 

            The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

            
            

            - *(string) --* 

              The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

              
        
          

          - **name** *(string) --* 

            A friendly name for the launch profile.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the launch profile.

            
          

          - **streamConfiguration** *(dict) --* 

            A configuration for a streaming session.

            
            

            - **clipboardMode** *(string) --* 

              Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

              
            

            - **ec2InstanceTypes** *(list) --* 

              The EC2 instance types that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
            

            - **maxSessionLengthInMinutes** *(integer) --* 

              The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

              
            

            - **streamingImageIds** *(list) --* 

              The streaming images that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
        
          

          - **studioComponentIds** *(list) --* 

            Unique identifiers for a collection of studio components that can be used with this launch profile.

            
            

            - *(string) --* 
        
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: create_streaming_image(**kwargs)

    

    Creates a streaming image resource in a studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/CreateStreamingImage>`_    


    **Request Syntax** 
    ::

      response = client.create_streaming_image(
          clientToken='string',
          description='string',
          ec2ImageId='string',
          name='string',
          studioId='string',
          tags={
              'string': 'string'
          }
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type description: string
    :param description: 

      A human-readable description of the streaming image.

      

    
    :type ec2ImageId: string
    :param ec2ImageId: **[REQUIRED]** 

      The ID of an EC2 machine image with which to create this streaming image.

      

    
    :type name: string
    :param name: **[REQUIRED]** 

      A friendly name for a streaming image resource.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type tags: dict
    :param tags: 

      A collection of labels, in the form of key:value pairs, that apply to this resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'streamingImage': {
                'arn': 'string',
                'description': 'string',
                'ec2ImageId': 'string',
                'encryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'CUSTOMER_MANAGED_KEY'
                },
                'eulaIds': [
                    'string',
                ],
                'name': 'string',
                'owner': 'string',
                'platform': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'DELETE_IN_PROGRESS'|'DELETED'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAMING_IMAGE_CREATE_IN_PROGRESS'|'STREAMING_IMAGE_READY'|'STREAMING_IMAGE_DELETE_IN_PROGRESS'|'STREAMING_IMAGE_DELETED'|'STREAMING_IMAGE_UPDATE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'streamingImageId': 'string',
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **streamingImage** *(dict) --* 
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **description** *(string) --* 

            A human-readable description of the streaming image.

            
          

          - **ec2ImageId** *(string) --* 

            The ID of an EC2 machine image with which to create the streaming image.

            
          

          - **encryptionConfiguration** *(dict) --* 

            The encryption configuration.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **eulaIds** *(list) --* 

            The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.

            
            

            - *(string) --* 
        
          

          - **name** *(string) --* 

            A friendly name for a streaming image resource.

            
          

          - **owner** *(string) --* 

            The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.

            
          

          - **platform** *(string) --* 

            The platform of the streaming image, either WINDOWS or LINUX.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the streaming image.

            
          

          - **streamingImageId** *(string) --* 

            The ID of the streaming image.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: create_streaming_session(**kwargs)

    

    Creates a streaming session in a studio.

     

    After invoking this operation, you must poll GetStreamingSession until the streaming session is in state READY.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/CreateStreamingSession>`_    


    **Request Syntax** 
    ::

      response = client.create_streaming_session(
          clientToken='string',
          ec2InstanceType='g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
          launchProfileId='string',
          streamingImageId='string',
          studioId='string',
          tags={
              'string': 'string'
          }
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type ec2InstanceType: string
    :param ec2InstanceType: 

      The EC2 Instance type used for the streaming session.

      

    
    :type launchProfileId: string
    :param launchProfileId: 

      The launch profile ID.

      

    
    :type streamingImageId: string
    :param streamingImageId: 

      The ID of the streaming image.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type tags: dict
    :param tags: 

      A collection of labels, in the form of key:value pairs, that apply to this resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'session': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'ec2InstanceType': 'string',
                'launchProfileId': 'string',
                'sessionId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'READY'|'DELETED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAMING_SESSION_READY'|'STREAMING_SESSION_DELETED'|'STREAMING_SESSION_CREATE_IN_PROGRESS'|'STREAMING_SESSION_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'INSUFFICIENT_CAPACITY'|'ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR'|'NETWORK_CONNECTION_ERROR'|'INITIALIZATION_SCRIPT_ERROR'|'DECRYPT_STREAMING_IMAGE_ERROR'|'NETWORK_INTERFACE_ERROR',
                'statusMessage': 'string',
                'streamingImageId': 'string',
                'tags': {
                    'string': 'string'
                },
                'terminateAt': datetime(2015, 1, 1),
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **session** *(dict) --* 

          The session.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the streaming session.

            
          

          - **ec2InstanceType** *(string) --* 

            The EC2 Instance type used for the streaming session.

            
          

          - **launchProfileId** *(string) --* 

            The ID of the launch profile used to control access from the streaming session.

            
          

          - **sessionId** *(string) --* 

            The session ID.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the streaming session.

            
          

          - **streamingImageId** *(string) --* 

            The ID of the streaming image.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **terminateAt** *(datetime) --* 

            The time the streaming session will automatically terminate if not terminated by the user.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: create_streaming_session_stream(**kwargs)

    

    Creates a streaming session stream for a streaming session.

     

    After invoking this API, invoke GetStreamingSessionStream with the returned streamId to poll the resource until it is in state READY.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/CreateStreamingSessionStream>`_    


    **Request Syntax** 
    ::

      response = client.create_streaming_session_stream(
          clientToken='string',
          expirationInSeconds=123,
          sessionId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type expirationInSeconds: integer
    :param expirationInSeconds: 

      The expiration time in seconds.

      

    
    :type sessionId: string
    :param sessionId: **[REQUIRED]** 

      The session ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stream': {
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'expiresAt': datetime(2015, 1, 1),
                'state': 'READY'|'CREATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAM_CREATE_IN_PROGRESS'|'STREAM_READY'|'STREAM_DELETE_IN_PROGRESS'|'STREAM_DELETED'|'INTERNAL_ERROR'|'NETWORK_CONNECTION_ERROR',
                'streamId': 'string',
                'url': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **stream** *(dict) --* 

          The stream.

          
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the streaming session stream.

            
          

          - **expiresAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource expires.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The streaming session stream status code.

            
          

          - **streamId** *(string) --* 

            The stream ID.

            
          

          - **url** *(string) --* 

            The URL to connect to this stream using the DCV client.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: create_studio(**kwargs)

    

    Create a new Studio.

     

    When creating a Studio, two IAM roles must be provided: the admin role and the user Role. These roles are assumed by your users when they log in to the Nimble Studio portal.

     

    The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for the portal to function properly.

     

    The Admin Role must have the AmazonNimbleStudio-StudioAdmin managed policy attached for the portal to function properly.

     

    You may optionally specify a KMS key in the StudioEncryptionConfiguration.

     

    In Nimble Studio, resource names, descriptions, initialization scripts, and other data you provide are always encrypted at rest using an AWS KMS key. By default, this key is owned by AWS and managed on your behalf. You may provide your own AWS KMS key when calling CreateStudio to encrypt this data using a key you own and manage.

     

    When providing an AWS KMS key during studio creation, Nimble Studio creates KMS grants in your account to provide your studio user and admin roles access to these KMS keys.

     

    If you delete this grant, the studio will no longer be accessible to your portal users.

     

    If you delete the studio KMS key, your studio will no longer be accessible.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/CreateStudio>`_    


    **Request Syntax** 
    ::

      response = client.create_studio(
          adminRoleArn='string',
          clientToken='string',
          displayName='string',
          studioEncryptionConfiguration={
              'keyArn': 'string',
              'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
          },
          studioName='string',
          tags={
              'string': 'string'
          },
          userRoleArn='string'
      )
    :type adminRoleArn: string
    :param adminRoleArn: **[REQUIRED]** 

      The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.

      

    
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type displayName: string
    :param displayName: **[REQUIRED]** 

      A friendly name for the studio.

      

    
    :type studioEncryptionConfiguration: dict
    :param studioEncryptionConfiguration: 

      The studio encryption configuration.

      

    
      - **keyArn** *(string) --* 

        The ARN for a KMS key that is used to encrypt studio data.

        

      
      - **keyType** *(string) --* **[REQUIRED]** 

        The type of KMS key that is used to encrypt studio data.

        

      
    
    :type studioName: string
    :param studioName: **[REQUIRED]** 

      The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.

      

    
    :type tags: dict
    :param tags: 

      A collection of labels, in the form of key:value pairs, that apply to this resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type userRoleArn: string
    :param userRoleArn: **[REQUIRED]** 

      The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studio': {
                'adminRoleArn': 'string',
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'displayName': 'string',
                'homeRegion': 'string',
                'ssoClientId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'STUDIO_CREATED'|'STUDIO_DELETED'|'STUDIO_UPDATED'|'STUDIO_CREATE_IN_PROGRESS'|'STUDIO_UPDATE_IN_PROGRESS'|'STUDIO_DELETE_IN_PROGRESS'|'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'|'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'|'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'|'AWS_SSO_NOT_ENABLED'|'AWS_SSO_ACCESS_DENIED'|'ROLE_NOT_OWNED_BY_STUDIO_OWNER'|'ROLE_COULD_NOT_BE_ASSUMED'|'INTERNAL_ERROR'|'ENCRYPTION_KEY_NOT_FOUND'|'ENCRYPTION_KEY_ACCESS_DENIED'|'AWS_SSO_CONFIGURATION_REPAIRED'|'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS',
                'statusMessage': 'string',
                'studioEncryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
                },
                'studioId': 'string',
                'studioName': 'string',
                'studioUrl': 'string',
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'userRoleArn': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studio** *(dict) --* 

          Information about a studio.

          
          

          - **adminRoleArn** *(string) --* 

            The IAM role that studio admins assume when logging in to the Nimble Studio portal.

            
          

          - **arn** *(string) --* 

            The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **displayName** *(string) --* 

            A friendly name for the studio.

            
          

          - **homeRegion** *(string) --* 

            The AWS region where the studio resource is located.

            
          

          - **ssoClientId** *(string) --* 

            The AWS SSO application client ID used to integrate with AWS SSO to enable AWS SSO users to log in to Nimble portal.

            
          

          - **state** *(string) --* 

            The current state of the studio resource.

            
          

          - **statusCode** *(string) --* 

            Status codes that provide additional detail on the studio state.

            
          

          - **statusMessage** *(string) --* 

            Additional detail on the studio state.

            
          

          - **studioEncryptionConfiguration** *(dict) --* 

            Configuration of the encryption method that is used for the studio.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **studioId** *(string) --* 

            The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.

            
          

          - **studioName** *(string) --* 

            The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.

            
          

          - **studioUrl** *(string) --* 

            The address of the web page for the studio.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **userRoleArn** *(string) --* 

            The IAM role that studio users assume when logging in to the Nimble Studio portal.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: create_studio_component(**kwargs)

    

    Creates a studio component resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/CreateStudioComponent>`_    


    **Request Syntax** 
    ::

      response = client.create_studio_component(
          clientToken='string',
          configuration={
              'activeDirectoryConfiguration': {
                  'computerAttributes': [
                      {
                          'name': 'string',
                          'value': 'string'
                      },
                  ],
                  'directoryId': 'string',
                  'organizationalUnitDistinguishedName': 'string'
              },
              'computeFarmConfiguration': {
                  'activeDirectoryUser': 'string',
                  'endpoint': 'string'
              },
              'licenseServiceConfiguration': {
                  'endpoint': 'string'
              },
              'sharedFileSystemConfiguration': {
                  'endpoint': 'string',
                  'fileSystemId': 'string',
                  'linuxMountPoint': 'string',
                  'shareName': 'string',
                  'windowsMountDrive': 'string'
              }
          },
          description='string',
          ec2SecurityGroupIds=[
              'string',
          ],
          initializationScripts=[
              {
                  'launchProfileProtocolVersion': 'string',
                  'platform': 'LINUX'|'WINDOWS',
                  'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                  'script': 'string'
              },
          ],
          name='string',
          scriptParameters=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          studioId='string',
          subtype='AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
          tags={
              'string': 'string'
          },
          type='ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type configuration: dict
    :param configuration: 

      The configuration of the studio component, based on component type.

      

    
      - **activeDirectoryConfiguration** *(dict) --* 

        The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

        

      
        - **computerAttributes** *(list) --* 

          A collection of custom attributes for an Active Directory computer.

          

        
          - *(dict) --* 

            An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

            

          
            - **name** *(string) --* 

              The name for the LDAP attribute.

              

            
            - **value** *(string) --* 

              The value for the LDAP attribute.

              

            
          
      
        - **directoryId** *(string) --* 

          The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

          

        
        - **organizationalUnitDistinguishedName** *(string) --* 

          The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

          

        
      
      - **computeFarmConfiguration** *(dict) --* 

        The configuration for a render farm that is associated with a studio resource.

        

      
        - **activeDirectoryUser** *(string) --* 

          The name of an Active Directory user that is used on ComputeFarm worker instances.

          

        
        - **endpoint** *(string) --* 

          The endpoint of the ComputeFarm that is accessed by the studio component resource.

          

        
      
      - **licenseServiceConfiguration** *(dict) --* 

        The configuration for a license service that is associated with a studio resource.

        

      
        - **endpoint** *(string) --* 

          The endpoint of the license service that is accessed by the studio component resource.

          

        
      
      - **sharedFileSystemConfiguration** *(dict) --* 

        The configuration for a shared file storage system that is associated with a studio resource.

        

      
        - **endpoint** *(string) --* 

          The endpoint of the shared file system that is accessed by the studio component resource.

          

        
        - **fileSystemId** *(string) --* 

          The unique identifier for a file system.

          

        
        - **linuxMountPoint** *(string) --* 

          The mount location for a shared file system on a Linux virtual workstation.

          

        
        - **shareName** *(string) --* 

          The name of the file share.

          

        
        - **windowsMountDrive** *(string) --* 

          The mount location for a shared file system on a Windows virtual workstation.

          

        
      
    
    :type description: string
    :param description: 

      The description.

      

    
    :type ec2SecurityGroupIds: list
    :param ec2SecurityGroupIds: 

      The EC2 security groups that control access to the studio component.

      

    
      - *(string) --* 

      
  
    :type initializationScripts: list
    :param initializationScripts: 

      Initialization scripts for studio components.

      

    
      - *(dict) --* 

        Initialization scripts for studio components.

        

      
        - **launchProfileProtocolVersion** *(string) --* 

          The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

          

        
        - **platform** *(string) --* 

          The platform of the initialization script, either WINDOWS or LINUX.

          

        
        - **runContext** *(string) --* 

          The method to use when running the initialization script.

          

        
        - **script** *(string) --* 

          The initialization script.

          

        
      
  
    :type name: string
    :param name: **[REQUIRED]** 

      The name for the studio component.

      

    
    :type scriptParameters: list
    :param scriptParameters: 

      Parameters for the studio component scripts.

      

    
      - *(dict) --* 

        A parameter for a studio component script, in the form of a key:value pair.

        

      
        - **key** *(string) --* 

          A script parameter key.

          

        
        - **value** *(string) --* 

          A script parameter value.

          

        
      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type subtype: string
    :param subtype: 

      The specific subtype of a studio component.

      

    
    :type tags: dict
    :param tags: 

      A collection of labels, in the form of key:value pairs, that apply to this resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type type: string
    :param type: **[REQUIRED]** 

      The type of the studio component.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studioComponent': {
                'arn': 'string',
                'configuration': {
                    'activeDirectoryConfiguration': {
                        'computerAttributes': [
                            {
                                'name': 'string',
                                'value': 'string'
                            },
                        ],
                        'directoryId': 'string',
                        'organizationalUnitDistinguishedName': 'string'
                    },
                    'computeFarmConfiguration': {
                        'activeDirectoryUser': 'string',
                        'endpoint': 'string'
                    },
                    'licenseServiceConfiguration': {
                        'endpoint': 'string'
                    },
                    'sharedFileSystemConfiguration': {
                        'endpoint': 'string',
                        'fileSystemId': 'string',
                        'linuxMountPoint': 'string',
                        'shareName': 'string',
                        'windowsMountDrive': 'string'
                    }
                },
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SecurityGroupIds': [
                    'string',
                ],
                'initializationScripts': [
                    {
                        'launchProfileProtocolVersion': 'string',
                        'platform': 'LINUX'|'WINDOWS',
                        'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                        'script': 'string'
                    },
                ],
                'name': 'string',
                'scriptParameters': [
                    {
                        'key': 'string',
                        'value': 'string'
                    },
                ],
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'ACTIVE_DIRECTORY_ALREADY_EXISTS'|'STUDIO_COMPONENT_CREATED'|'STUDIO_COMPONENT_UPDATED'|'STUDIO_COMPONENT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'STUDIO_COMPONENT_CREATE_IN_PROGRESS'|'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'|'STUDIO_COMPONENT_DELETE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'studioComponentId': 'string',
                'subtype': 'AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
                'tags': {
                    'string': 'string'
                },
                'type': 'ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM',
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studioComponent** *(dict) --* 

          Information about the studio component.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **configuration** *(dict) --* 

            The configuration of the studio component, based on component type.

            
            

            - **activeDirectoryConfiguration** *(dict) --* 

              The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

              
              

              - **computerAttributes** *(list) --* 

                A collection of custom attributes for an Active Directory computer.

                
                

                - *(dict) --* 

                  An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

                  
                  

                  - **name** *(string) --* 

                    The name for the LDAP attribute.

                    
                  

                  - **value** *(string) --* 

                    The value for the LDAP attribute.

                    
              
            
              

              - **directoryId** *(string) --* 

                The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

                
              

              - **organizationalUnitDistinguishedName** *(string) --* 

                The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

                
          
            

            - **computeFarmConfiguration** *(dict) --* 

              The configuration for a render farm that is associated with a studio resource.

              
              

              - **activeDirectoryUser** *(string) --* 

                The name of an Active Directory user that is used on ComputeFarm worker instances.

                
              

              - **endpoint** *(string) --* 

                The endpoint of the ComputeFarm that is accessed by the studio component resource.

                
          
            

            - **licenseServiceConfiguration** *(dict) --* 

              The configuration for a license service that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the license service that is accessed by the studio component resource.

                
          
            

            - **sharedFileSystemConfiguration** *(dict) --* 

              The configuration for a shared file storage system that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the shared file system that is accessed by the studio component resource.

                
              

              - **fileSystemId** *(string) --* 

                The unique identifier for a file system.

                
              

              - **linuxMountPoint** *(string) --* 

                The mount location for a shared file system on a Linux virtual workstation.

                
              

              - **shareName** *(string) --* 

                The name of the file share.

                
              

              - **windowsMountDrive** *(string) --* 

                The mount location for a shared file system on a Windows virtual workstation.

                
          
        
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the studio component.

            
          

          - **description** *(string) --* 

            A human-readable description for the studio component resource.

            
          

          - **ec2SecurityGroupIds** *(list) --* 

            The EC2 security groups that control access to the studio component.

            
            

            - *(string) --* 
        
          

          - **initializationScripts** *(list) --* 

            Initialization scripts for studio components.

            
            

            - *(dict) --* 

              Initialization scripts for studio components.

              
              

              - **launchProfileProtocolVersion** *(string) --* 

                The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                
              

              - **platform** *(string) --* 

                The platform of the initialization script, either WINDOWS or LINUX.

                
              

              - **runContext** *(string) --* 

                The method to use when running the initialization script.

                
              

              - **script** *(string) --* 

                The initialization script.

                
          
        
          

          - **name** *(string) --* 

            A friendly name for the studio component resource.

            
          

          - **scriptParameters** *(list) --* 

            Parameters for the studio component scripts.

            
            

            - *(dict) --* 

              A parameter for a studio component script, in the form of a key:value pair.

              
              

              - **key** *(string) --* 

                A script parameter key.

                
              

              - **value** *(string) --* 

                A script parameter value.

                
          
        
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the studio component.

            
          

          - **studioComponentId** *(string) --* 

            The unique identifier for a studio component resource.

            
          

          - **subtype** *(string) --* 

            The specific subtype of a studio component.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **type** *(string) --* 

            The type of the studio component.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: delete_launch_profile(**kwargs)

    

    Permanently delete a launch profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/DeleteLaunchProfile>`_    


    **Request Syntax** 
    ::

      response = client.delete_launch_profile(
          clientToken='string',
          launchProfileId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfile': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SubnetIds': [
                    'string',
                ],
                'launchProfileId': 'string',
                'launchProfileProtocolVersions': [
                    'string',
                ],
                'name': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'LAUNCH_PROFILE_CREATED'|'LAUNCH_PROFILE_UPDATED'|'LAUNCH_PROFILE_DELETED'|'LAUNCH_PROFILE_CREATE_IN_PROGRESS'|'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'|'LAUNCH_PROFILE_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'STREAMING_IMAGE_NOT_FOUND'|'STREAMING_IMAGE_NOT_READY'|'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'INVALID_SUBNETS_PROVIDED',
                'statusMessage': 'string',
                'streamConfiguration': {
                    'clipboardMode': 'ENABLED'|'DISABLED',
                    'ec2InstanceTypes': [
                        'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
                    ],
                    'maxSessionLengthInMinutes': 123,
                    'streamingImageIds': [
                        'string',
                    ]
                },
                'studioComponentIds': [
                    'string',
                ],
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfile** *(dict) --* 

          The launch profile.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the launch profile.

            
          

          - **description** *(string) --* 

            A human-readable description of the launch profile.

            
          

          - **ec2SubnetIds** *(list) --* 

            Unique identifiers for a collection of EC2 subnets.

            
            

            - *(string) --* 
        
          

          - **launchProfileId** *(string) --* 

            The launch profile ID.

            
          

          - **launchProfileProtocolVersions** *(list) --* 

            The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

            
            

            - *(string) --* 

              The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

              
        
          

          - **name** *(string) --* 

            A friendly name for the launch profile.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the launch profile.

            
          

          - **streamConfiguration** *(dict) --* 

            A configuration for a streaming session.

            
            

            - **clipboardMode** *(string) --* 

              Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

              
            

            - **ec2InstanceTypes** *(list) --* 

              The EC2 instance types that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
            

            - **maxSessionLengthInMinutes** *(integer) --* 

              The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

              
            

            - **streamingImageIds** *(list) --* 

              The streaming images that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
        
          

          - **studioComponentIds** *(list) --* 

            Unique identifiers for a collection of studio components that can be used with this launch profile.

            
            

            - *(string) --* 
        
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: delete_launch_profile_member(**kwargs)

    

    Delete a user from launch profile membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/DeleteLaunchProfileMember>`_    


    **Request Syntax** 
    ::

      response = client.delete_launch_profile_member(
          clientToken='string',
          launchProfileId='string',
          principalId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type principalId: string
    :param principalId: **[REQUIRED]** 

      The principal ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: delete_streaming_image(**kwargs)

    

    Delete streaming image.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/DeleteStreamingImage>`_    


    **Request Syntax** 
    ::

      response = client.delete_streaming_image(
          clientToken='string',
          streamingImageId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type streamingImageId: string
    :param streamingImageId: **[REQUIRED]** 

      The streaming image ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'streamingImage': {
                'arn': 'string',
                'description': 'string',
                'ec2ImageId': 'string',
                'encryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'CUSTOMER_MANAGED_KEY'
                },
                'eulaIds': [
                    'string',
                ],
                'name': 'string',
                'owner': 'string',
                'platform': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'DELETE_IN_PROGRESS'|'DELETED'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAMING_IMAGE_CREATE_IN_PROGRESS'|'STREAMING_IMAGE_READY'|'STREAMING_IMAGE_DELETE_IN_PROGRESS'|'STREAMING_IMAGE_DELETED'|'STREAMING_IMAGE_UPDATE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'streamingImageId': 'string',
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **streamingImage** *(dict) --* 

          The streaming image.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **description** *(string) --* 

            A human-readable description of the streaming image.

            
          

          - **ec2ImageId** *(string) --* 

            The ID of an EC2 machine image with which to create the streaming image.

            
          

          - **encryptionConfiguration** *(dict) --* 

            The encryption configuration.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **eulaIds** *(list) --* 

            The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.

            
            

            - *(string) --* 
        
          

          - **name** *(string) --* 

            A friendly name for a streaming image resource.

            
          

          - **owner** *(string) --* 

            The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.

            
          

          - **platform** *(string) --* 

            The platform of the streaming image, either WINDOWS or LINUX.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the streaming image.

            
          

          - **streamingImageId** *(string) --* 

            The ID of the streaming image.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: delete_streaming_session(**kwargs)

    

    Deletes streaming session resource.

     

    After invoking this operation, use GetStreamingSession to poll the resource until it transitions to a DELETED state.

     

    A streaming session will count against your streaming session quota until it is marked DELETED.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/DeleteStreamingSession>`_    


    **Request Syntax** 
    ::

      response = client.delete_streaming_session(
          clientToken='string',
          sessionId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type sessionId: string
    :param sessionId: **[REQUIRED]** 

      The session ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'session': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'ec2InstanceType': 'string',
                'launchProfileId': 'string',
                'sessionId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'READY'|'DELETED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAMING_SESSION_READY'|'STREAMING_SESSION_DELETED'|'STREAMING_SESSION_CREATE_IN_PROGRESS'|'STREAMING_SESSION_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'INSUFFICIENT_CAPACITY'|'ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR'|'NETWORK_CONNECTION_ERROR'|'INITIALIZATION_SCRIPT_ERROR'|'DECRYPT_STREAMING_IMAGE_ERROR'|'NETWORK_INTERFACE_ERROR',
                'statusMessage': 'string',
                'streamingImageId': 'string',
                'tags': {
                    'string': 'string'
                },
                'terminateAt': datetime(2015, 1, 1),
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **session** *(dict) --* 

          The session.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the streaming session.

            
          

          - **ec2InstanceType** *(string) --* 

            The EC2 Instance type used for the streaming session.

            
          

          - **launchProfileId** *(string) --* 

            The ID of the launch profile used to control access from the streaming session.

            
          

          - **sessionId** *(string) --* 

            The session ID.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the streaming session.

            
          

          - **streamingImageId** *(string) --* 

            The ID of the streaming image.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **terminateAt** *(datetime) --* 

            The time the streaming session will automatically terminate if not terminated by the user.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: delete_studio(**kwargs)

    

    Delete a studio resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/DeleteStudio>`_    


    **Request Syntax** 
    ::

      response = client.delete_studio(
          clientToken='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studio': {
                'adminRoleArn': 'string',
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'displayName': 'string',
                'homeRegion': 'string',
                'ssoClientId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'STUDIO_CREATED'|'STUDIO_DELETED'|'STUDIO_UPDATED'|'STUDIO_CREATE_IN_PROGRESS'|'STUDIO_UPDATE_IN_PROGRESS'|'STUDIO_DELETE_IN_PROGRESS'|'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'|'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'|'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'|'AWS_SSO_NOT_ENABLED'|'AWS_SSO_ACCESS_DENIED'|'ROLE_NOT_OWNED_BY_STUDIO_OWNER'|'ROLE_COULD_NOT_BE_ASSUMED'|'INTERNAL_ERROR'|'ENCRYPTION_KEY_NOT_FOUND'|'ENCRYPTION_KEY_ACCESS_DENIED'|'AWS_SSO_CONFIGURATION_REPAIRED'|'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS',
                'statusMessage': 'string',
                'studioEncryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
                },
                'studioId': 'string',
                'studioName': 'string',
                'studioUrl': 'string',
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'userRoleArn': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studio** *(dict) --* 

          Information about a studio.

          
          

          - **adminRoleArn** *(string) --* 

            The IAM role that studio admins assume when logging in to the Nimble Studio portal.

            
          

          - **arn** *(string) --* 

            The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **displayName** *(string) --* 

            A friendly name for the studio.

            
          

          - **homeRegion** *(string) --* 

            The AWS region where the studio resource is located.

            
          

          - **ssoClientId** *(string) --* 

            The AWS SSO application client ID used to integrate with AWS SSO to enable AWS SSO users to log in to Nimble portal.

            
          

          - **state** *(string) --* 

            The current state of the studio resource.

            
          

          - **statusCode** *(string) --* 

            Status codes that provide additional detail on the studio state.

            
          

          - **statusMessage** *(string) --* 

            Additional detail on the studio state.

            
          

          - **studioEncryptionConfiguration** *(dict) --* 

            Configuration of the encryption method that is used for the studio.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **studioId** *(string) --* 

            The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.

            
          

          - **studioName** *(string) --* 

            The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.

            
          

          - **studioUrl** *(string) --* 

            The address of the web page for the studio.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **userRoleArn** *(string) --* 

            The IAM role that studio users assume when logging in to the Nimble Studio portal.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: delete_studio_component(**kwargs)

    

    Deletes a studio component resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/DeleteStudioComponent>`_    


    **Request Syntax** 
    ::

      response = client.delete_studio_component(
          clientToken='string',
          studioComponentId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type studioComponentId: string
    :param studioComponentId: **[REQUIRED]** 

      The studio component ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studioComponent': {
                'arn': 'string',
                'configuration': {
                    'activeDirectoryConfiguration': {
                        'computerAttributes': [
                            {
                                'name': 'string',
                                'value': 'string'
                            },
                        ],
                        'directoryId': 'string',
                        'organizationalUnitDistinguishedName': 'string'
                    },
                    'computeFarmConfiguration': {
                        'activeDirectoryUser': 'string',
                        'endpoint': 'string'
                    },
                    'licenseServiceConfiguration': {
                        'endpoint': 'string'
                    },
                    'sharedFileSystemConfiguration': {
                        'endpoint': 'string',
                        'fileSystemId': 'string',
                        'linuxMountPoint': 'string',
                        'shareName': 'string',
                        'windowsMountDrive': 'string'
                    }
                },
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SecurityGroupIds': [
                    'string',
                ],
                'initializationScripts': [
                    {
                        'launchProfileProtocolVersion': 'string',
                        'platform': 'LINUX'|'WINDOWS',
                        'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                        'script': 'string'
                    },
                ],
                'name': 'string',
                'scriptParameters': [
                    {
                        'key': 'string',
                        'value': 'string'
                    },
                ],
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'ACTIVE_DIRECTORY_ALREADY_EXISTS'|'STUDIO_COMPONENT_CREATED'|'STUDIO_COMPONENT_UPDATED'|'STUDIO_COMPONENT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'STUDIO_COMPONENT_CREATE_IN_PROGRESS'|'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'|'STUDIO_COMPONENT_DELETE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'studioComponentId': 'string',
                'subtype': 'AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
                'tags': {
                    'string': 'string'
                },
                'type': 'ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM',
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studioComponent** *(dict) --* 

          Information about the studio component.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **configuration** *(dict) --* 

            The configuration of the studio component, based on component type.

            
            

            - **activeDirectoryConfiguration** *(dict) --* 

              The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

              
              

              - **computerAttributes** *(list) --* 

                A collection of custom attributes for an Active Directory computer.

                
                

                - *(dict) --* 

                  An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

                  
                  

                  - **name** *(string) --* 

                    The name for the LDAP attribute.

                    
                  

                  - **value** *(string) --* 

                    The value for the LDAP attribute.

                    
              
            
              

              - **directoryId** *(string) --* 

                The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

                
              

              - **organizationalUnitDistinguishedName** *(string) --* 

                The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

                
          
            

            - **computeFarmConfiguration** *(dict) --* 

              The configuration for a render farm that is associated with a studio resource.

              
              

              - **activeDirectoryUser** *(string) --* 

                The name of an Active Directory user that is used on ComputeFarm worker instances.

                
              

              - **endpoint** *(string) --* 

                The endpoint of the ComputeFarm that is accessed by the studio component resource.

                
          
            

            - **licenseServiceConfiguration** *(dict) --* 

              The configuration for a license service that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the license service that is accessed by the studio component resource.

                
          
            

            - **sharedFileSystemConfiguration** *(dict) --* 

              The configuration for a shared file storage system that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the shared file system that is accessed by the studio component resource.

                
              

              - **fileSystemId** *(string) --* 

                The unique identifier for a file system.

                
              

              - **linuxMountPoint** *(string) --* 

                The mount location for a shared file system on a Linux virtual workstation.

                
              

              - **shareName** *(string) --* 

                The name of the file share.

                
              

              - **windowsMountDrive** *(string) --* 

                The mount location for a shared file system on a Windows virtual workstation.

                
          
        
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the studio component.

            
          

          - **description** *(string) --* 

            A human-readable description for the studio component resource.

            
          

          - **ec2SecurityGroupIds** *(list) --* 

            The EC2 security groups that control access to the studio component.

            
            

            - *(string) --* 
        
          

          - **initializationScripts** *(list) --* 

            Initialization scripts for studio components.

            
            

            - *(dict) --* 

              Initialization scripts for studio components.

              
              

              - **launchProfileProtocolVersion** *(string) --* 

                The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                
              

              - **platform** *(string) --* 

                The platform of the initialization script, either WINDOWS or LINUX.

                
              

              - **runContext** *(string) --* 

                The method to use when running the initialization script.

                
              

              - **script** *(string) --* 

                The initialization script.

                
          
        
          

          - **name** *(string) --* 

            A friendly name for the studio component resource.

            
          

          - **scriptParameters** *(list) --* 

            Parameters for the studio component scripts.

            
            

            - *(dict) --* 

              A parameter for a studio component script, in the form of a key:value pair.

              
              

              - **key** *(string) --* 

                A script parameter key.

                
              

              - **value** *(string) --* 

                A script parameter value.

                
          
        
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the studio component.

            
          

          - **studioComponentId** *(string) --* 

            The unique identifier for a studio component resource.

            
          

          - **subtype** *(string) --* 

            The specific subtype of a studio component.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **type** *(string) --* 

            The type of the studio component.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: delete_studio_member(**kwargs)

    

    Delete a user from studio membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/DeleteStudioMember>`_    


    **Request Syntax** 
    ::

      response = client.delete_studio_member(
          clientToken='string',
          principalId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type principalId: string
    :param principalId: **[REQUIRED]** 

      The principal ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_eula(**kwargs)

    

    Get Eula.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetEula>`_    


    **Request Syntax** 
    ::

      response = client.get_eula(
          eulaId='string'
      )
    :type eulaId: string
    :param eulaId: **[REQUIRED]** 

      The EULA ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'eula': {
                'content': 'string',
                'createdAt': datetime(2015, 1, 1),
                'eulaId': 'string',
                'name': 'string',
                'updatedAt': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **eula** *(dict) --* 

          The EULA.

          
          

          - **content** *(string) --* 

            The EULA content.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **eulaId** *(string) --* 

            The EULA ID.

            
          

          - **name** *(string) --* 

            The name for the EULA.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_launch_profile(**kwargs)

    

    Get a launch profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetLaunchProfile>`_    


    **Request Syntax** 
    ::

      response = client.get_launch_profile(
          launchProfileId='string',
          studioId='string'
      )
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfile': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SubnetIds': [
                    'string',
                ],
                'launchProfileId': 'string',
                'launchProfileProtocolVersions': [
                    'string',
                ],
                'name': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'LAUNCH_PROFILE_CREATED'|'LAUNCH_PROFILE_UPDATED'|'LAUNCH_PROFILE_DELETED'|'LAUNCH_PROFILE_CREATE_IN_PROGRESS'|'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'|'LAUNCH_PROFILE_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'STREAMING_IMAGE_NOT_FOUND'|'STREAMING_IMAGE_NOT_READY'|'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'INVALID_SUBNETS_PROVIDED',
                'statusMessage': 'string',
                'streamConfiguration': {
                    'clipboardMode': 'ENABLED'|'DISABLED',
                    'ec2InstanceTypes': [
                        'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
                    ],
                    'maxSessionLengthInMinutes': 123,
                    'streamingImageIds': [
                        'string',
                    ]
                },
                'studioComponentIds': [
                    'string',
                ],
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfile** *(dict) --* 

          The launch profile.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the launch profile.

            
          

          - **description** *(string) --* 

            A human-readable description of the launch profile.

            
          

          - **ec2SubnetIds** *(list) --* 

            Unique identifiers for a collection of EC2 subnets.

            
            

            - *(string) --* 
        
          

          - **launchProfileId** *(string) --* 

            The launch profile ID.

            
          

          - **launchProfileProtocolVersions** *(list) --* 

            The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

            
            

            - *(string) --* 

              The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

              
        
          

          - **name** *(string) --* 

            A friendly name for the launch profile.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the launch profile.

            
          

          - **streamConfiguration** *(dict) --* 

            A configuration for a streaming session.

            
            

            - **clipboardMode** *(string) --* 

              Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

              
            

            - **ec2InstanceTypes** *(list) --* 

              The EC2 instance types that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
            

            - **maxSessionLengthInMinutes** *(integer) --* 

              The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

              
            

            - **streamingImageIds** *(list) --* 

              The streaming images that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
        
          

          - **studioComponentIds** *(list) --* 

            Unique identifiers for a collection of studio components that can be used with this launch profile.

            
            

            - *(string) --* 
        
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_launch_profile_details(**kwargs)

    

    Launch profile details include the launch profile resource and summary information of resources that are used by, or available to, the launch profile. This includes the name and description of all studio components used by the launch profiles, and the name and description of streaming images that can be used with this launch profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetLaunchProfileDetails>`_    


    **Request Syntax** 
    ::

      response = client.get_launch_profile_details(
          launchProfileId='string',
          studioId='string'
      )
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfile': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SubnetIds': [
                    'string',
                ],
                'launchProfileId': 'string',
                'launchProfileProtocolVersions': [
                    'string',
                ],
                'name': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'LAUNCH_PROFILE_CREATED'|'LAUNCH_PROFILE_UPDATED'|'LAUNCH_PROFILE_DELETED'|'LAUNCH_PROFILE_CREATE_IN_PROGRESS'|'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'|'LAUNCH_PROFILE_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'STREAMING_IMAGE_NOT_FOUND'|'STREAMING_IMAGE_NOT_READY'|'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'INVALID_SUBNETS_PROVIDED',
                'statusMessage': 'string',
                'streamConfiguration': {
                    'clipboardMode': 'ENABLED'|'DISABLED',
                    'ec2InstanceTypes': [
                        'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
                    ],
                    'maxSessionLengthInMinutes': 123,
                    'streamingImageIds': [
                        'string',
                    ]
                },
                'studioComponentIds': [
                    'string',
                ],
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            },
            'streamingImages': [
                {
                    'arn': 'string',
                    'description': 'string',
                    'ec2ImageId': 'string',
                    'encryptionConfiguration': {
                        'keyArn': 'string',
                        'keyType': 'CUSTOMER_MANAGED_KEY'
                    },
                    'eulaIds': [
                        'string',
                    ],
                    'name': 'string',
                    'owner': 'string',
                    'platform': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'DELETE_IN_PROGRESS'|'DELETED'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED'|'CREATE_FAILED'|'DELETE_FAILED',
                    'statusCode': 'STREAMING_IMAGE_CREATE_IN_PROGRESS'|'STREAMING_IMAGE_READY'|'STREAMING_IMAGE_DELETE_IN_PROGRESS'|'STREAMING_IMAGE_DELETED'|'STREAMING_IMAGE_UPDATE_IN_PROGRESS'|'INTERNAL_ERROR',
                    'statusMessage': 'string',
                    'streamingImageId': 'string',
                    'tags': {
                        'string': 'string'
                    }
                },
            ],
            'studioComponentSummaries': [
                {
                    'createdAt': datetime(2015, 1, 1),
                    'createdBy': 'string',
                    'description': 'string',
                    'name': 'string',
                    'studioComponentId': 'string',
                    'subtype': 'AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
                    'type': 'ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM',
                    'updatedAt': datetime(2015, 1, 1),
                    'updatedBy': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfile** *(dict) --* 

          The launch profile.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the launch profile.

            
          

          - **description** *(string) --* 

            A human-readable description of the launch profile.

            
          

          - **ec2SubnetIds** *(list) --* 

            Unique identifiers for a collection of EC2 subnets.

            
            

            - *(string) --* 
        
          

          - **launchProfileId** *(string) --* 

            The launch profile ID.

            
          

          - **launchProfileProtocolVersions** *(list) --* 

            The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

            
            

            - *(string) --* 

              The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

              
        
          

          - **name** *(string) --* 

            A friendly name for the launch profile.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the launch profile.

            
          

          - **streamConfiguration** *(dict) --* 

            A configuration for a streaming session.

            
            

            - **clipboardMode** *(string) --* 

              Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

              
            

            - **ec2InstanceTypes** *(list) --* 

              The EC2 instance types that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
            

            - **maxSessionLengthInMinutes** *(integer) --* 

              The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

              
            

            - **streamingImageIds** *(list) --* 

              The streaming images that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
        
          

          - **studioComponentIds** *(list) --* 

            Unique identifiers for a collection of studio components that can be used with this launch profile.

            
            

            - *(string) --* 
        
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
        

        - **streamingImages** *(list) --* 

          A collection of streaming images.

          
          

          - *(dict) --* 
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **description** *(string) --* 

              A human-readable description of the streaming image.

              
            

            - **ec2ImageId** *(string) --* 

              The ID of an EC2 machine image with which to create the streaming image.

              
            

            - **encryptionConfiguration** *(dict) --* 

              The encryption configuration.

              
              

              - **keyArn** *(string) --* 

                The ARN for a KMS key that is used to encrypt studio data.

                
              

              - **keyType** *(string) --* 

                The type of KMS key that is used to encrypt studio data.

                
          
            

            - **eulaIds** *(list) --* 

              The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.

              
              

              - *(string) --* 
          
            

            - **name** *(string) --* 

              A friendly name for a streaming image resource.

              
            

            - **owner** *(string) --* 

              The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.

              
            

            - **platform** *(string) --* 

              The platform of the streaming image, either WINDOWS or LINUX.

              
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the streaming image.

              
            

            - **streamingImageId** *(string) --* 

              The ID of the streaming image.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **studioComponentSummaries** *(list) --* 

          A collection of studio component summaries.

          
          

          - *(dict) --* 

            

            
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **createdBy** *(string) --* 

              The user ID of the user that created the studio component.

              
            

            - **description** *(string) --* 

              The description.

              
            

            - **name** *(string) --* 

              The name for the studio component.

              
            

            - **studioComponentId** *(string) --* 

              The unique identifier for a studio component resource.

              
            

            - **subtype** *(string) --* 

              The specific subtype of a studio component.

              
            

            - **type** *(string) --* 

              The type of the studio component.

              
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **updatedBy** *(string) --* 

              The user ID of the user that most recently updated the resource.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_launch_profile_initialization(**kwargs)

    

    Get a launch profile initialization.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetLaunchProfileInitialization>`_    


    **Request Syntax** 
    ::

      response = client.get_launch_profile_initialization(
          launchProfileId='string',
          launchProfileProtocolVersions=[
              'string',
          ],
          launchPurpose='string',
          platform='string',
          studioId='string'
      )
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type launchProfileProtocolVersions: list
    :param launchProfileProtocolVersions: **[REQUIRED]** 

      A collection of launch profile protocol versions.

      

    
      - *(string) --* 

      
  
    :type launchPurpose: string
    :param launchPurpose: **[REQUIRED]** 

      The launch purpose.

      

    
    :type platform: string
    :param platform: **[REQUIRED]** 

      The platform.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfileInitialization': {
                'activeDirectory': {
                    'computerAttributes': [
                        {
                            'name': 'string',
                            'value': 'string'
                        },
                    ],
                    'directoryId': 'string',
                    'directoryName': 'string',
                    'dnsIpAddresses': [
                        'string',
                    ],
                    'organizationalUnitDistinguishedName': 'string',
                    'studioComponentId': 'string',
                    'studioComponentName': 'string'
                },
                'ec2SecurityGroupIds': [
                    'string',
                ],
                'launchProfileId': 'string',
                'launchProfileProtocolVersion': 'string',
                'launchPurpose': 'string',
                'name': 'string',
                'platform': 'LINUX'|'WINDOWS',
                'systemInitializationScripts': [
                    {
                        'script': 'string',
                        'studioComponentId': 'string',
                        'studioComponentName': 'string'
                    },
                ],
                'userInitializationScripts': [
                    {
                        'script': 'string',
                        'studioComponentId': 'string',
                        'studioComponentName': 'string'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfileInitialization** *(dict) --* 

          The launch profile initialization.

          
          

          - **activeDirectory** *(dict) --* 

            A LaunchProfileInitializationActiveDirectory resource.

            
            

            - **computerAttributes** *(list) --* 

              A collection of custom attributes for an Active Directory computer.

              
              

              - *(dict) --* 

                An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

                
                

                - **name** *(string) --* 

                  The name for the LDAP attribute.

                  
                

                - **value** *(string) --* 

                  The value for the LDAP attribute.

                  
            
          
            

            - **directoryId** *(string) --* 

              The directory ID of the AWS Directory Service for Microsoft AD to access using this launch profile.

              
            

            - **directoryName** *(string) --* 

              The directory name.

              
            

            - **dnsIpAddresses** *(list) --* 

              The DNS IP address.

              
              

              - *(string) --* 
          
            

            - **organizationalUnitDistinguishedName** *(string) --* 

              The name for the organizational unit distinguished name.

              
            

            - **studioComponentId** *(string) --* 

              The unique identifier for a studio component resource.

              
            

            - **studioComponentName** *(string) --* 

              The name for the studio component.

              
        
          

          - **ec2SecurityGroupIds** *(list) --* 

            The EC2 security groups that control access to the studio component.

            
            

            - *(string) --* 
        
          

          - **launchProfileId** *(string) --* 

            The launch profile ID.

            
          

          - **launchProfileProtocolVersion** *(string) --* 

            The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

            
          

          - **launchPurpose** *(string) --* 

            The launch purpose.

            
          

          - **name** *(string) --* 

            The name for the launch profile.

            
          

          - **platform** *(string) --* 

            The platform of the launch platform, either WINDOWS or LINUX.

            
          

          - **systemInitializationScripts** *(list) --* 

            The system initializtion scripts.

            
            

            - *(dict) --* 
              

              - **script** *(string) --* 

                The initialization script.

                
              

              - **studioComponentId** *(string) --* 

                The unique identifier for a studio component resource.

                
              

              - **studioComponentName** *(string) --* 

                The name for the studio component.

                
          
        
          

          - **userInitializationScripts** *(list) --* 

            The user initializtion scripts.

            
            

            - *(dict) --* 
              

              - **script** *(string) --* 

                The initialization script.

                
              

              - **studioComponentId** *(string) --* 

                The unique identifier for a studio component resource.

                
              

              - **studioComponentName** *(string) --* 

                The name for the studio component.

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_launch_profile_member(**kwargs)

    

    Get a user persona in launch profile membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetLaunchProfileMember>`_    


    **Request Syntax** 
    ::

      response = client.get_launch_profile_member(
          launchProfileId='string',
          principalId='string',
          studioId='string'
      )
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type principalId: string
    :param principalId: **[REQUIRED]** 

      The principal ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'member': {
                'identityStoreId': 'string',
                'persona': 'USER',
                'principalId': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **member** *(dict) --* 

          The member.

          
          

          - **identityStoreId** *(string) --* 

            The ID of the identity store.

            
          

          - **persona** *(string) --* 

            The persona.

            
          

          - **principalId** *(string) --* 

            The principal ID.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_streaming_image(**kwargs)

    

    Get streaming image.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetStreamingImage>`_    


    **Request Syntax** 
    ::

      response = client.get_streaming_image(
          streamingImageId='string',
          studioId='string'
      )
    :type streamingImageId: string
    :param streamingImageId: **[REQUIRED]** 

      The streaming image ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'streamingImage': {
                'arn': 'string',
                'description': 'string',
                'ec2ImageId': 'string',
                'encryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'CUSTOMER_MANAGED_KEY'
                },
                'eulaIds': [
                    'string',
                ],
                'name': 'string',
                'owner': 'string',
                'platform': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'DELETE_IN_PROGRESS'|'DELETED'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAMING_IMAGE_CREATE_IN_PROGRESS'|'STREAMING_IMAGE_READY'|'STREAMING_IMAGE_DELETE_IN_PROGRESS'|'STREAMING_IMAGE_DELETED'|'STREAMING_IMAGE_UPDATE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'streamingImageId': 'string',
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **streamingImage** *(dict) --* 

          The streaming image.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **description** *(string) --* 

            A human-readable description of the streaming image.

            
          

          - **ec2ImageId** *(string) --* 

            The ID of an EC2 machine image with which to create the streaming image.

            
          

          - **encryptionConfiguration** *(dict) --* 

            The encryption configuration.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **eulaIds** *(list) --* 

            The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.

            
            

            - *(string) --* 
        
          

          - **name** *(string) --* 

            A friendly name for a streaming image resource.

            
          

          - **owner** *(string) --* 

            The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.

            
          

          - **platform** *(string) --* 

            The platform of the streaming image, either WINDOWS or LINUX.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the streaming image.

            
          

          - **streamingImageId** *(string) --* 

            The ID of the streaming image.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_streaming_session(**kwargs)

    

    Gets StreamingSession resource.

     

    Invoke this operation to poll for a streaming session state while creating or deleting a session.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetStreamingSession>`_    


    **Request Syntax** 
    ::

      response = client.get_streaming_session(
          sessionId='string',
          studioId='string'
      )
    :type sessionId: string
    :param sessionId: **[REQUIRED]** 

      The session ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'session': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'ec2InstanceType': 'string',
                'launchProfileId': 'string',
                'sessionId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'READY'|'DELETED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAMING_SESSION_READY'|'STREAMING_SESSION_DELETED'|'STREAMING_SESSION_CREATE_IN_PROGRESS'|'STREAMING_SESSION_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'INSUFFICIENT_CAPACITY'|'ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR'|'NETWORK_CONNECTION_ERROR'|'INITIALIZATION_SCRIPT_ERROR'|'DECRYPT_STREAMING_IMAGE_ERROR'|'NETWORK_INTERFACE_ERROR',
                'statusMessage': 'string',
                'streamingImageId': 'string',
                'tags': {
                    'string': 'string'
                },
                'terminateAt': datetime(2015, 1, 1),
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **session** *(dict) --* 

          The session.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the streaming session.

            
          

          - **ec2InstanceType** *(string) --* 

            The EC2 Instance type used for the streaming session.

            
          

          - **launchProfileId** *(string) --* 

            The ID of the launch profile used to control access from the streaming session.

            
          

          - **sessionId** *(string) --* 

            The session ID.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the streaming session.

            
          

          - **streamingImageId** *(string) --* 

            The ID of the streaming image.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **terminateAt** *(datetime) --* 

            The time the streaming session will automatically terminate if not terminated by the user.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_streaming_session_stream(**kwargs)

    

    Gets a StreamingSessionStream for a streaming session.

     

    Invoke this operation to poll the resource after invoking CreateStreamingSessionStream.

     

    After the StreamingSessionStream changes to the state READY, the url property will contain a stream to be used with the DCV streaming client.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetStreamingSessionStream>`_    


    **Request Syntax** 
    ::

      response = client.get_streaming_session_stream(
          sessionId='string',
          streamId='string',
          studioId='string'
      )
    :type sessionId: string
    :param sessionId: **[REQUIRED]** 

      The session ID.

      

    
    :type streamId: string
    :param streamId: **[REQUIRED]** 

      The stream ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'stream': {
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'expiresAt': datetime(2015, 1, 1),
                'state': 'READY'|'CREATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAM_CREATE_IN_PROGRESS'|'STREAM_READY'|'STREAM_DELETE_IN_PROGRESS'|'STREAM_DELETED'|'INTERNAL_ERROR'|'NETWORK_CONNECTION_ERROR',
                'streamId': 'string',
                'url': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **stream** *(dict) --* 

          The stream.

          
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the streaming session stream.

            
          

          - **expiresAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource expires.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The streaming session stream status code.

            
          

          - **streamId** *(string) --* 

            The stream ID.

            
          

          - **url** *(string) --* 

            The URL to connect to this stream using the DCV client.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_studio(**kwargs)

    

    Get a Studio resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetStudio>`_    


    **Request Syntax** 
    ::

      response = client.get_studio(
          studioId='string'
      )
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studio': {
                'adminRoleArn': 'string',
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'displayName': 'string',
                'homeRegion': 'string',
                'ssoClientId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'STUDIO_CREATED'|'STUDIO_DELETED'|'STUDIO_UPDATED'|'STUDIO_CREATE_IN_PROGRESS'|'STUDIO_UPDATE_IN_PROGRESS'|'STUDIO_DELETE_IN_PROGRESS'|'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'|'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'|'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'|'AWS_SSO_NOT_ENABLED'|'AWS_SSO_ACCESS_DENIED'|'ROLE_NOT_OWNED_BY_STUDIO_OWNER'|'ROLE_COULD_NOT_BE_ASSUMED'|'INTERNAL_ERROR'|'ENCRYPTION_KEY_NOT_FOUND'|'ENCRYPTION_KEY_ACCESS_DENIED'|'AWS_SSO_CONFIGURATION_REPAIRED'|'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS',
                'statusMessage': 'string',
                'studioEncryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
                },
                'studioId': 'string',
                'studioName': 'string',
                'studioUrl': 'string',
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'userRoleArn': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studio** *(dict) --* 

          Information about a studio.

          
          

          - **adminRoleArn** *(string) --* 

            The IAM role that studio admins assume when logging in to the Nimble Studio portal.

            
          

          - **arn** *(string) --* 

            The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **displayName** *(string) --* 

            A friendly name for the studio.

            
          

          - **homeRegion** *(string) --* 

            The AWS region where the studio resource is located.

            
          

          - **ssoClientId** *(string) --* 

            The AWS SSO application client ID used to integrate with AWS SSO to enable AWS SSO users to log in to Nimble portal.

            
          

          - **state** *(string) --* 

            The current state of the studio resource.

            
          

          - **statusCode** *(string) --* 

            Status codes that provide additional detail on the studio state.

            
          

          - **statusMessage** *(string) --* 

            Additional detail on the studio state.

            
          

          - **studioEncryptionConfiguration** *(dict) --* 

            Configuration of the encryption method that is used for the studio.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **studioId** *(string) --* 

            The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.

            
          

          - **studioName** *(string) --* 

            The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.

            
          

          - **studioUrl** *(string) --* 

            The address of the web page for the studio.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **userRoleArn** *(string) --* 

            The IAM role that studio users assume when logging in to the Nimble Studio portal.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_studio_component(**kwargs)

    

    Gets a studio component resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetStudioComponent>`_    


    **Request Syntax** 
    ::

      response = client.get_studio_component(
          studioComponentId='string',
          studioId='string'
      )
    :type studioComponentId: string
    :param studioComponentId: **[REQUIRED]** 

      The studio component ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studioComponent': {
                'arn': 'string',
                'configuration': {
                    'activeDirectoryConfiguration': {
                        'computerAttributes': [
                            {
                                'name': 'string',
                                'value': 'string'
                            },
                        ],
                        'directoryId': 'string',
                        'organizationalUnitDistinguishedName': 'string'
                    },
                    'computeFarmConfiguration': {
                        'activeDirectoryUser': 'string',
                        'endpoint': 'string'
                    },
                    'licenseServiceConfiguration': {
                        'endpoint': 'string'
                    },
                    'sharedFileSystemConfiguration': {
                        'endpoint': 'string',
                        'fileSystemId': 'string',
                        'linuxMountPoint': 'string',
                        'shareName': 'string',
                        'windowsMountDrive': 'string'
                    }
                },
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SecurityGroupIds': [
                    'string',
                ],
                'initializationScripts': [
                    {
                        'launchProfileProtocolVersion': 'string',
                        'platform': 'LINUX'|'WINDOWS',
                        'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                        'script': 'string'
                    },
                ],
                'name': 'string',
                'scriptParameters': [
                    {
                        'key': 'string',
                        'value': 'string'
                    },
                ],
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'ACTIVE_DIRECTORY_ALREADY_EXISTS'|'STUDIO_COMPONENT_CREATED'|'STUDIO_COMPONENT_UPDATED'|'STUDIO_COMPONENT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'STUDIO_COMPONENT_CREATE_IN_PROGRESS'|'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'|'STUDIO_COMPONENT_DELETE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'studioComponentId': 'string',
                'subtype': 'AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
                'tags': {
                    'string': 'string'
                },
                'type': 'ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM',
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studioComponent** *(dict) --* 

          Information about the studio component.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **configuration** *(dict) --* 

            The configuration of the studio component, based on component type.

            
            

            - **activeDirectoryConfiguration** *(dict) --* 

              The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

              
              

              - **computerAttributes** *(list) --* 

                A collection of custom attributes for an Active Directory computer.

                
                

                - *(dict) --* 

                  An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

                  
                  

                  - **name** *(string) --* 

                    The name for the LDAP attribute.

                    
                  

                  - **value** *(string) --* 

                    The value for the LDAP attribute.

                    
              
            
              

              - **directoryId** *(string) --* 

                The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

                
              

              - **organizationalUnitDistinguishedName** *(string) --* 

                The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

                
          
            

            - **computeFarmConfiguration** *(dict) --* 

              The configuration for a render farm that is associated with a studio resource.

              
              

              - **activeDirectoryUser** *(string) --* 

                The name of an Active Directory user that is used on ComputeFarm worker instances.

                
              

              - **endpoint** *(string) --* 

                The endpoint of the ComputeFarm that is accessed by the studio component resource.

                
          
            

            - **licenseServiceConfiguration** *(dict) --* 

              The configuration for a license service that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the license service that is accessed by the studio component resource.

                
          
            

            - **sharedFileSystemConfiguration** *(dict) --* 

              The configuration for a shared file storage system that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the shared file system that is accessed by the studio component resource.

                
              

              - **fileSystemId** *(string) --* 

                The unique identifier for a file system.

                
              

              - **linuxMountPoint** *(string) --* 

                The mount location for a shared file system on a Linux virtual workstation.

                
              

              - **shareName** *(string) --* 

                The name of the file share.

                
              

              - **windowsMountDrive** *(string) --* 

                The mount location for a shared file system on a Windows virtual workstation.

                
          
        
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the studio component.

            
          

          - **description** *(string) --* 

            A human-readable description for the studio component resource.

            
          

          - **ec2SecurityGroupIds** *(list) --* 

            The EC2 security groups that control access to the studio component.

            
            

            - *(string) --* 
        
          

          - **initializationScripts** *(list) --* 

            Initialization scripts for studio components.

            
            

            - *(dict) --* 

              Initialization scripts for studio components.

              
              

              - **launchProfileProtocolVersion** *(string) --* 

                The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                
              

              - **platform** *(string) --* 

                The platform of the initialization script, either WINDOWS or LINUX.

                
              

              - **runContext** *(string) --* 

                The method to use when running the initialization script.

                
              

              - **script** *(string) --* 

                The initialization script.

                
          
        
          

          - **name** *(string) --* 

            A friendly name for the studio component resource.

            
          

          - **scriptParameters** *(list) --* 

            Parameters for the studio component scripts.

            
            

            - *(dict) --* 

              A parameter for a studio component script, in the form of a key:value pair.

              
              

              - **key** *(string) --* 

                A script parameter key.

                
              

              - **value** *(string) --* 

                A script parameter value.

                
          
        
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the studio component.

            
          

          - **studioComponentId** *(string) --* 

            The unique identifier for a studio component resource.

            
          

          - **subtype** *(string) --* 

            The specific subtype of a studio component.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **type** *(string) --* 

            The type of the studio component.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_studio_member(**kwargs)

    

    Get a user's membership in a studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/GetStudioMember>`_    


    **Request Syntax** 
    ::

      response = client.get_studio_member(
          principalId='string',
          studioId='string'
      )
    :type principalId: string
    :param principalId: **[REQUIRED]** 

      The principal ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'member': {
                'identityStoreId': 'string',
                'persona': 'ADMINISTRATOR',
                'principalId': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **member** *(dict) --* 

          The member.

          
          

          - **identityStoreId** *(string) --* 

            The ID of the identity store.

            
          

          - **persona** *(string) --* 

            The persona.

            
          

          - **principalId** *(string) --* 

            The principal ID.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_eula_acceptances(**kwargs)

    

    List Eula Acceptances.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListEulaAcceptances>`_    


    **Request Syntax** 
    ::

      response = client.list_eula_acceptances(
          eulaIds=[
              'string',
          ],
          nextToken='string',
          studioId='string'
      )
    :type eulaIds: list
    :param eulaIds: 

      A collection of EULA IDs.

      

    
      - *(string) --* 

      
  
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'eulaAcceptances': [
                {
                    'acceptedAt': datetime(2015, 1, 1),
                    'acceptedBy': 'string',
                    'accepteeId': 'string',
                    'eulaAcceptanceId': 'string',
                    'eulaId': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **eulaAcceptances** *(list) --* 

          A collection of EULA acceptances.

          
          

          - *(dict) --* 
            

            - **acceptedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the EULA was accepted.

              
            

            - **acceptedBy** *(string) --* 

              The ID of the person who accepted the EULA.

              
            

            - **accepteeId** *(string) --* 

              The ID of the acceptee.

              
            

            - **eulaAcceptanceId** *(string) --* 

              The EULA acceptance ID.

              
            

            - **eulaId** *(string) --* 

              The EULA ID.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_eulas(**kwargs)

    

    List Eulas.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListEulas>`_    


    **Request Syntax** 
    ::

      response = client.list_eulas(
          eulaIds=[
              'string',
          ],
          nextToken='string'
      )
    :type eulaIds: list
    :param eulaIds: 

      A collection of EULA IDs.

      

    
      - *(string) --* 

      
  
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'eulas': [
                {
                    'content': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'eulaId': 'string',
                    'name': 'string',
                    'updatedAt': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **eulas** *(list) --* 

          A collection of EULA resources.

          
          

          - *(dict) --* 

            Represents a EULA resource.

            
            

            - **content** *(string) --* 

              The EULA content.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **eulaId** *(string) --* 

              The EULA ID.

              
            

            - **name** *(string) --* 

              The name for the EULA.

              
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_launch_profile_members(**kwargs)

    

    Get all users in a given launch profile membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListLaunchProfileMembers>`_    


    **Request Syntax** 
    ::

      response = client.list_launch_profile_members(
          launchProfileId='string',
          maxResults=123,
          nextToken='string',
          studioId='string'
      )
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to be returned per request.

      

    
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'members': [
                {
                    'identityStoreId': 'string',
                    'persona': 'USER',
                    'principalId': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **members** *(list) --* 

          A list of members.

          
          

          - *(dict) --* 
            

            - **identityStoreId** *(string) --* 

              The ID of the identity store.

              
            

            - **persona** *(string) --* 

              The persona.

              
            

            - **principalId** *(string) --* 

              The principal ID.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_launch_profiles(**kwargs)

    

    List all the launch profiles a studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListLaunchProfiles>`_    


    **Request Syntax** 
    ::

      response = client.list_launch_profiles(
          maxResults=123,
          nextToken='string',
          principalId='string',
          states=[
              'string',
          ],
          studioId='string'
      )
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to be returned per request.

      

    
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    :type principalId: string
    :param principalId: 

      The principal ID.

      

    
    :type states: list
    :param states: 

      A list of states.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfiles': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'createdBy': 'string',
                    'description': 'string',
                    'ec2SubnetIds': [
                        'string',
                    ],
                    'launchProfileId': 'string',
                    'launchProfileProtocolVersions': [
                        'string',
                    ],
                    'name': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                    'statusCode': 'LAUNCH_PROFILE_CREATED'|'LAUNCH_PROFILE_UPDATED'|'LAUNCH_PROFILE_DELETED'|'LAUNCH_PROFILE_CREATE_IN_PROGRESS'|'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'|'LAUNCH_PROFILE_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'STREAMING_IMAGE_NOT_FOUND'|'STREAMING_IMAGE_NOT_READY'|'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'INVALID_SUBNETS_PROVIDED',
                    'statusMessage': 'string',
                    'streamConfiguration': {
                        'clipboardMode': 'ENABLED'|'DISABLED',
                        'ec2InstanceTypes': [
                            'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
                        ],
                        'maxSessionLengthInMinutes': 123,
                        'streamingImageIds': [
                            'string',
                        ]
                    },
                    'studioComponentIds': [
                        'string',
                    ],
                    'tags': {
                        'string': 'string'
                    },
                    'updatedAt': datetime(2015, 1, 1),
                    'updatedBy': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfiles** *(list) --* 

          A collection of launch profiles.

          
          

          - *(dict) --* 
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **createdBy** *(string) --* 

              The user ID of the user that created the launch profile.

              
            

            - **description** *(string) --* 

              A human-readable description of the launch profile.

              
            

            - **ec2SubnetIds** *(list) --* 

              Unique identifiers for a collection of EC2 subnets.

              
              

              - *(string) --* 
          
            

            - **launchProfileId** *(string) --* 

              The launch profile ID.

              
            

            - **launchProfileProtocolVersions** *(list) --* 

              The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

              
              

              - *(string) --* 

                The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                
          
            

            - **name** *(string) --* 

              A friendly name for the launch profile.

              
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the launch profile.

              
            

            - **streamConfiguration** *(dict) --* 

              A configuration for a streaming session.

              
              

              - **clipboardMode** *(string) --* 

                Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

                
              

              - **ec2InstanceTypes** *(list) --* 

                The EC2 instance types that users can select from when launching a streaming session with this launch profile.

                
                

                - *(string) --* 
            
              

              - **maxSessionLengthInMinutes** *(integer) --* 

                The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

                
              

              - **streamingImageIds** *(list) --* 

                The streaming images that users can select from when launching a streaming session with this launch profile.

                
                

                - *(string) --* 
            
          
            

            - **studioComponentIds** *(list) --* 

              Unique identifiers for a collection of studio components that can be used with this launch profile.

              
              

              - *(string) --* 
          
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **updatedBy** *(string) --* 

              The user ID of the user that most recently updated the resource.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_streaming_images(**kwargs)

    

    List the streaming image resources available to this studio.

     

    This list will contain both images provided by AWS, as well as streaming images that you have created in your studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStreamingImages>`_    


    **Request Syntax** 
    ::

      response = client.list_streaming_images(
          nextToken='string',
          owner='string',
          studioId='string'
      )
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    :type owner: string
    :param owner: 

      The owner.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'streamingImages': [
                {
                    'arn': 'string',
                    'description': 'string',
                    'ec2ImageId': 'string',
                    'encryptionConfiguration': {
                        'keyArn': 'string',
                        'keyType': 'CUSTOMER_MANAGED_KEY'
                    },
                    'eulaIds': [
                        'string',
                    ],
                    'name': 'string',
                    'owner': 'string',
                    'platform': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'DELETE_IN_PROGRESS'|'DELETED'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED'|'CREATE_FAILED'|'DELETE_FAILED',
                    'statusCode': 'STREAMING_IMAGE_CREATE_IN_PROGRESS'|'STREAMING_IMAGE_READY'|'STREAMING_IMAGE_DELETE_IN_PROGRESS'|'STREAMING_IMAGE_DELETED'|'STREAMING_IMAGE_UPDATE_IN_PROGRESS'|'INTERNAL_ERROR',
                    'statusMessage': 'string',
                    'streamingImageId': 'string',
                    'tags': {
                        'string': 'string'
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
        

        - **streamingImages** *(list) --* 

          A collection of streaming images.

          
          

          - *(dict) --* 
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **description** *(string) --* 

              A human-readable description of the streaming image.

              
            

            - **ec2ImageId** *(string) --* 

              The ID of an EC2 machine image with which to create the streaming image.

              
            

            - **encryptionConfiguration** *(dict) --* 

              The encryption configuration.

              
              

              - **keyArn** *(string) --* 

                The ARN for a KMS key that is used to encrypt studio data.

                
              

              - **keyType** *(string) --* 

                The type of KMS key that is used to encrypt studio data.

                
          
            

            - **eulaIds** *(list) --* 

              The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.

              
              

              - *(string) --* 
          
            

            - **name** *(string) --* 

              A friendly name for a streaming image resource.

              
            

            - **owner** *(string) --* 

              The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.

              
            

            - **platform** *(string) --* 

              The platform of the streaming image, either WINDOWS or LINUX.

              
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the streaming image.

              
            

            - **streamingImageId** *(string) --* 

              The ID of the streaming image.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_streaming_sessions(**kwargs)

    

    Lists the streaming image resources in a studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStreamingSessions>`_    


    **Request Syntax** 
    ::

      response = client.list_streaming_sessions(
          createdBy='string',
          nextToken='string',
          sessionIds='string',
          studioId='string'
      )
    :type createdBy: string
    :param createdBy: 

      The user ID.

      

    
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    :type sessionIds: string
    :param sessionIds: 

      A collection of session IDs.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'sessions': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'createdBy': 'string',
                    'ec2InstanceType': 'string',
                    'launchProfileId': 'string',
                    'sessionId': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'READY'|'DELETED'|'CREATE_FAILED'|'DELETE_FAILED',
                    'statusCode': 'STREAMING_SESSION_READY'|'STREAMING_SESSION_DELETED'|'STREAMING_SESSION_CREATE_IN_PROGRESS'|'STREAMING_SESSION_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'INSUFFICIENT_CAPACITY'|'ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR'|'NETWORK_CONNECTION_ERROR'|'INITIALIZATION_SCRIPT_ERROR'|'DECRYPT_STREAMING_IMAGE_ERROR'|'NETWORK_INTERFACE_ERROR',
                    'statusMessage': 'string',
                    'streamingImageId': 'string',
                    'tags': {
                        'string': 'string'
                    },
                    'terminateAt': datetime(2015, 1, 1),
                    'updatedAt': datetime(2015, 1, 1),
                    'updatedBy': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
        

        - **sessions** *(list) --* 

          A collection of streaming sessions.

          
          

          - *(dict) --* 
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **createdBy** *(string) --* 

              The user ID of the user that created the streaming session.

              
            

            - **ec2InstanceType** *(string) --* 

              The EC2 Instance type used for the streaming session.

              
            

            - **launchProfileId** *(string) --* 

              The ID of the launch profile used to control access from the streaming session.

              
            

            - **sessionId** *(string) --* 

              The session ID.

              
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the streaming session.

              
            

            - **streamingImageId** *(string) --* 

              The ID of the streaming image.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **terminateAt** *(datetime) --* 

              The time the streaming session will automatically terminate if not terminated by the user.

              
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **updatedBy** *(string) --* 

              The user ID of the user that most recently updated the resource.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_studio_components(**kwargs)

    

    Lists the StudioComponents in a studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStudioComponents>`_    


    **Request Syntax** 
    ::

      response = client.list_studio_components(
          maxResults=123,
          nextToken='string',
          states=[
              'string',
          ],
          studioId='string',
          types=[
              'string',
          ]
      )
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to be returned per request.

      

    
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    :type states: list
    :param states: 

      A list of states.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type types: list
    :param types: 

      The types.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'studioComponents': [
                {
                    'arn': 'string',
                    'configuration': {
                        'activeDirectoryConfiguration': {
                            'computerAttributes': [
                                {
                                    'name': 'string',
                                    'value': 'string'
                                },
                            ],
                            'directoryId': 'string',
                            'organizationalUnitDistinguishedName': 'string'
                        },
                        'computeFarmConfiguration': {
                            'activeDirectoryUser': 'string',
                            'endpoint': 'string'
                        },
                        'licenseServiceConfiguration': {
                            'endpoint': 'string'
                        },
                        'sharedFileSystemConfiguration': {
                            'endpoint': 'string',
                            'fileSystemId': 'string',
                            'linuxMountPoint': 'string',
                            'shareName': 'string',
                            'windowsMountDrive': 'string'
                        }
                    },
                    'createdAt': datetime(2015, 1, 1),
                    'createdBy': 'string',
                    'description': 'string',
                    'ec2SecurityGroupIds': [
                        'string',
                    ],
                    'initializationScripts': [
                        {
                            'launchProfileProtocolVersion': 'string',
                            'platform': 'LINUX'|'WINDOWS',
                            'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                            'script': 'string'
                        },
                    ],
                    'name': 'string',
                    'scriptParameters': [
                        {
                            'key': 'string',
                            'value': 'string'
                        },
                    ],
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                    'statusCode': 'ACTIVE_DIRECTORY_ALREADY_EXISTS'|'STUDIO_COMPONENT_CREATED'|'STUDIO_COMPONENT_UPDATED'|'STUDIO_COMPONENT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'STUDIO_COMPONENT_CREATE_IN_PROGRESS'|'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'|'STUDIO_COMPONENT_DELETE_IN_PROGRESS'|'INTERNAL_ERROR',
                    'statusMessage': 'string',
                    'studioComponentId': 'string',
                    'subtype': 'AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
                    'tags': {
                        'string': 'string'
                    },
                    'type': 'ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM',
                    'updatedAt': datetime(2015, 1, 1),
                    'updatedBy': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
        

        - **studioComponents** *(list) --* 

          A collection of studio components.

          
          

          - *(dict) --* 

            A network that is used by a studio’s users and workflows, including render farm, Active Directory, licensing, and file system.

            
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **configuration** *(dict) --* 

              The configuration of the studio component, based on component type.

              
              

              - **activeDirectoryConfiguration** *(dict) --* 

                The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

                
                

                - **computerAttributes** *(list) --* 

                  A collection of custom attributes for an Active Directory computer.

                  
                  

                  - *(dict) --* 

                    An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

                    
                    

                    - **name** *(string) --* 

                      The name for the LDAP attribute.

                      
                    

                    - **value** *(string) --* 

                      The value for the LDAP attribute.

                      
                
              
                

                - **directoryId** *(string) --* 

                  The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

                  
                

                - **organizationalUnitDistinguishedName** *(string) --* 

                  The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

                  
            
              

              - **computeFarmConfiguration** *(dict) --* 

                The configuration for a render farm that is associated with a studio resource.

                
                

                - **activeDirectoryUser** *(string) --* 

                  The name of an Active Directory user that is used on ComputeFarm worker instances.

                  
                

                - **endpoint** *(string) --* 

                  The endpoint of the ComputeFarm that is accessed by the studio component resource.

                  
            
              

              - **licenseServiceConfiguration** *(dict) --* 

                The configuration for a license service that is associated with a studio resource.

                
                

                - **endpoint** *(string) --* 

                  The endpoint of the license service that is accessed by the studio component resource.

                  
            
              

              - **sharedFileSystemConfiguration** *(dict) --* 

                The configuration for a shared file storage system that is associated with a studio resource.

                
                

                - **endpoint** *(string) --* 

                  The endpoint of the shared file system that is accessed by the studio component resource.

                  
                

                - **fileSystemId** *(string) --* 

                  The unique identifier for a file system.

                  
                

                - **linuxMountPoint** *(string) --* 

                  The mount location for a shared file system on a Linux virtual workstation.

                  
                

                - **shareName** *(string) --* 

                  The name of the file share.

                  
                

                - **windowsMountDrive** *(string) --* 

                  The mount location for a shared file system on a Windows virtual workstation.

                  
            
          
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **createdBy** *(string) --* 

              The user ID of the user that created the studio component.

              
            

            - **description** *(string) --* 

              A human-readable description for the studio component resource.

              
            

            - **ec2SecurityGroupIds** *(list) --* 

              The EC2 security groups that control access to the studio component.

              
              

              - *(string) --* 
          
            

            - **initializationScripts** *(list) --* 

              Initialization scripts for studio components.

              
              

              - *(dict) --* 

                Initialization scripts for studio components.

                
                

                - **launchProfileProtocolVersion** *(string) --* 

                  The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                  
                

                - **platform** *(string) --* 

                  The platform of the initialization script, either WINDOWS or LINUX.

                  
                

                - **runContext** *(string) --* 

                  The method to use when running the initialization script.

                  
                

                - **script** *(string) --* 

                  The initialization script.

                  
            
          
            

            - **name** *(string) --* 

              A friendly name for the studio component resource.

              
            

            - **scriptParameters** *(list) --* 

              Parameters for the studio component scripts.

              
              

              - *(dict) --* 

                A parameter for a studio component script, in the form of a key:value pair.

                
                

                - **key** *(string) --* 

                  A script parameter key.

                  
                

                - **value** *(string) --* 

                  A script parameter value.

                  
            
          
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the studio component.

              
            

            - **studioComponentId** *(string) --* 

              The unique identifier for a studio component resource.

              
            

            - **subtype** *(string) --* 

              The specific subtype of a studio component.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **type** *(string) --* 

              The type of the studio component.

              
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **updatedBy** *(string) --* 

              The user ID of the user that most recently updated the resource.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_studio_members(**kwargs)

    

    Get all users in a given studio membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStudioMembers>`_    


    **Request Syntax** 
    ::

      response = client.list_studio_members(
          maxResults=123,
          nextToken='string',
          studioId='string'
      )
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to be returned per request.

      

    
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'members': [
                {
                    'identityStoreId': 'string',
                    'persona': 'ADMINISTRATOR',
                    'principalId': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **members** *(list) --* 

          A list of members.

          
          

          - *(dict) --* 
            

            - **identityStoreId** *(string) --* 

              The ID of the identity store.

              
            

            - **persona** *(string) --* 

              The persona.

              
            

            - **principalId** *(string) --* 

              The principal ID.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_studios(**kwargs)

    

    List studios in your AWS account in the requested AWS Region.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStudios>`_    


    **Request Syntax** 
    ::

      response = client.list_studios(
          nextToken='string'
      )
    :type nextToken: string
    :param nextToken: 

      The token for the next set of results, or null if there are no more results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'studios': [
                {
                    'adminRoleArn': 'string',
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'displayName': 'string',
                    'homeRegion': 'string',
                    'ssoClientId': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                    'statusCode': 'STUDIO_CREATED'|'STUDIO_DELETED'|'STUDIO_UPDATED'|'STUDIO_CREATE_IN_PROGRESS'|'STUDIO_UPDATE_IN_PROGRESS'|'STUDIO_DELETE_IN_PROGRESS'|'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'|'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'|'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'|'AWS_SSO_NOT_ENABLED'|'AWS_SSO_ACCESS_DENIED'|'ROLE_NOT_OWNED_BY_STUDIO_OWNER'|'ROLE_COULD_NOT_BE_ASSUMED'|'INTERNAL_ERROR'|'ENCRYPTION_KEY_NOT_FOUND'|'ENCRYPTION_KEY_ACCESS_DENIED'|'AWS_SSO_CONFIGURATION_REPAIRED'|'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS',
                    'statusMessage': 'string',
                    'studioEncryptionConfiguration': {
                        'keyArn': 'string',
                        'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
                    },
                    'studioId': 'string',
                    'studioName': 'string',
                    'studioUrl': 'string',
                    'tags': {
                        'string': 'string'
                    },
                    'updatedAt': datetime(2015, 1, 1),
                    'userRoleArn': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no more results.

          
        

        - **studios** *(list) --* 

          A collection of studios.

          
          

          - *(dict) --* 
            

            - **adminRoleArn** *(string) --* 

              The IAM role that studio admins assume when logging in to the Nimble Studio portal.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **displayName** *(string) --* 

              A friendly name for the studio.

              
            

            - **homeRegion** *(string) --* 

              The AWS region where the studio resource is located.

              
            

            - **ssoClientId** *(string) --* 

              The AWS SSO application client ID used to integrate with AWS SSO to enable AWS SSO users to log in to Nimble portal.

              
            

            - **state** *(string) --* 

              The current state of the studio resource.

              
            

            - **statusCode** *(string) --* 

              Status codes that provide additional detail on the studio state.

              
            

            - **statusMessage** *(string) --* 

              Additional detail on the studio state.

              
            

            - **studioEncryptionConfiguration** *(dict) --* 

              Configuration of the encryption method that is used for the studio.

              
              

              - **keyArn** *(string) --* 

                The ARN for a KMS key that is used to encrypt studio data.

                
              

              - **keyType** *(string) --* 

                The type of KMS key that is used to encrypt studio data.

                
          
            

            - **studioId** *(string) --* 

              The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.

              
            

            - **studioName** *(string) --* 

              The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.

              
            

            - **studioUrl** *(string) --* 

              The address of the web page for the studio.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **userRoleArn** *(string) --* 

              The IAM role that studio users assume when logging in to the Nimble Studio portal.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Gets the tags for a resource, given its Amazon Resource Names (ARN).

     

    This operation supports ARNs for all resource types in Nimble Studio that support tags, including studio, studio component, launch profile, streaming image, and streaming session. All resources that can be tagged will contain an ARN property, so you do not have to create this ARN yourself.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The ARN of the target resource for tagging operations.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **tags** *(dict) --* 

          A collection of labels, in the form of key:value pairs, that apply to this resource.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: put_launch_profile_members(**kwargs)

    

    Add/update users with given persona to launch profile membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/PutLaunchProfileMembers>`_    


    **Request Syntax** 
    ::

      response = client.put_launch_profile_members(
          clientToken='string',
          identityStoreId='string',
          launchProfileId='string',
          members=[
              {
                  'persona': 'USER',
                  'principalId': 'string'
              },
          ],
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type identityStoreId: string
    :param identityStoreId: **[REQUIRED]** 

      The ID of the identity store.

      

    
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type members: list
    :param members: **[REQUIRED]** 

      A list of members.

      

    
      - *(dict) --* 

      
        - **persona** *(string) --* **[REQUIRED]** 

          The persona.

          

        
        - **principalId** *(string) --* **[REQUIRED]** 

          The principal ID.

          

        
      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: put_studio_members(**kwargs)

    

    Add/update users with given persona to studio membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/PutStudioMembers>`_    


    **Request Syntax** 
    ::

      response = client.put_studio_members(
          clientToken='string',
          identityStoreId='string',
          members=[
              {
                  'persona': 'ADMINISTRATOR',
                  'principalId': 'string'
              },
          ],
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type identityStoreId: string
    :param identityStoreId: **[REQUIRED]** 

      The ID of the identity store.

      

    
    :type members: list
    :param members: **[REQUIRED]** 

      A list of members.

      

    
      - *(dict) --* 

      
        - **persona** *(string) --* **[REQUIRED]** 

          The persona.

          

        
        - **principalId** *(string) --* **[REQUIRED]** 

          The principal ID.

          

        
      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: start_studio_sso_configuration_repair(**kwargs)

    

    Repairs the SSO configuration for a given studio.

     

    If the studio has a valid AWS SSO configuration currently associated with it, this operation will fail with a validation error.

     

    If the studio does not have a valid AWS SSO configuration currently associated with it, then a new AWS SSO application is created for the studio and the studio is changed to the READY state.

     

    After the AWS SSO application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/StartStudioSSOConfigurationRepair>`_    


    **Request Syntax** 
    ::

      response = client.start_studio_sso_configuration_repair(
          clientToken='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studio': {
                'adminRoleArn': 'string',
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'displayName': 'string',
                'homeRegion': 'string',
                'ssoClientId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'STUDIO_CREATED'|'STUDIO_DELETED'|'STUDIO_UPDATED'|'STUDIO_CREATE_IN_PROGRESS'|'STUDIO_UPDATE_IN_PROGRESS'|'STUDIO_DELETE_IN_PROGRESS'|'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'|'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'|'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'|'AWS_SSO_NOT_ENABLED'|'AWS_SSO_ACCESS_DENIED'|'ROLE_NOT_OWNED_BY_STUDIO_OWNER'|'ROLE_COULD_NOT_BE_ASSUMED'|'INTERNAL_ERROR'|'ENCRYPTION_KEY_NOT_FOUND'|'ENCRYPTION_KEY_ACCESS_DENIED'|'AWS_SSO_CONFIGURATION_REPAIRED'|'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS',
                'statusMessage': 'string',
                'studioEncryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
                },
                'studioId': 'string',
                'studioName': 'string',
                'studioUrl': 'string',
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'userRoleArn': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studio** *(dict) --* 

          Information about a studio.

          
          

          - **adminRoleArn** *(string) --* 

            The IAM role that studio admins assume when logging in to the Nimble Studio portal.

            
          

          - **arn** *(string) --* 

            The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **displayName** *(string) --* 

            A friendly name for the studio.

            
          

          - **homeRegion** *(string) --* 

            The AWS region where the studio resource is located.

            
          

          - **ssoClientId** *(string) --* 

            The AWS SSO application client ID used to integrate with AWS SSO to enable AWS SSO users to log in to Nimble portal.

            
          

          - **state** *(string) --* 

            The current state of the studio resource.

            
          

          - **statusCode** *(string) --* 

            Status codes that provide additional detail on the studio state.

            
          

          - **statusMessage** *(string) --* 

            Additional detail on the studio state.

            
          

          - **studioEncryptionConfiguration** *(dict) --* 

            Configuration of the encryption method that is used for the studio.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **studioId** *(string) --* 

            The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.

            
          

          - **studioName** *(string) --* 

            The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.

            
          

          - **studioUrl** *(string) --* 

            The address of the web page for the studio.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **userRoleArn** *(string) --* 

            The IAM role that studio users assume when logging in to the Nimble Studio portal.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Creates tags for a resource, given its ARN.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags={
              'string': 'string'
          }
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The ARN of the target resource for tagging operations.

      

    
    :type tags: dict
    :param tags: 

      A collection of labels, in the form of key:value pairs, that apply to this resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        204 response

        
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Deletes the tags for a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The ARN of the target resource for tagging operations.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      An array of tag keys to delete.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        204 response

        
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: update_launch_profile(**kwargs)

    

    Update a launch profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/UpdateLaunchProfile>`_    


    **Request Syntax** 
    ::

      response = client.update_launch_profile(
          clientToken='string',
          description='string',
          launchProfileId='string',
          launchProfileProtocolVersions=[
              'string',
          ],
          name='string',
          streamConfiguration={
              'clipboardMode': 'ENABLED'|'DISABLED',
              'ec2InstanceTypes': [
                  'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
              ],
              'maxSessionLengthInMinutes': 123,
              'streamingImageIds': [
                  'string',
              ]
          },
          studioComponentIds=[
              'string',
          ],
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type description: string
    :param description: 

      The description.

      

    
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type launchProfileProtocolVersions: list
    :param launchProfileProtocolVersions: 

      The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

      

    
      - *(string) --* 

        The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

        

      
  
    :type name: string
    :param name: 

      The name for the launch profile.

      

    
    :type streamConfiguration: dict
    :param streamConfiguration: 

      A configuration for a streaming session.

      

    
      - **clipboardMode** *(string) --* **[REQUIRED]** 

        Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

        

      
      - **ec2InstanceTypes** *(list) --* **[REQUIRED]** 

        The EC2 instance types that users can select from when launching a streaming session with this launch profile.

        

      
        - *(string) --* 

        
    
      - **maxSessionLengthInMinutes** *(integer) --* 

        The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

        

      
      - **streamingImageIds** *(list) --* **[REQUIRED]** 

        The streaming images that users can select from when launching a streaming session with this launch profile.

        

      
        - *(string) --* 

        
    
    
    :type studioComponentIds: list
    :param studioComponentIds: 

      Unique identifiers for a collection of studio components that can be used with this launch profile.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfile': {
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SubnetIds': [
                    'string',
                ],
                'launchProfileId': 'string',
                'launchProfileProtocolVersions': [
                    'string',
                ],
                'name': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'LAUNCH_PROFILE_CREATED'|'LAUNCH_PROFILE_UPDATED'|'LAUNCH_PROFILE_DELETED'|'LAUNCH_PROFILE_CREATE_IN_PROGRESS'|'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'|'LAUNCH_PROFILE_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'STREAMING_IMAGE_NOT_FOUND'|'STREAMING_IMAGE_NOT_READY'|'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'INVALID_SUBNETS_PROVIDED',
                'statusMessage': 'string',
                'streamConfiguration': {
                    'clipboardMode': 'ENABLED'|'DISABLED',
                    'ec2InstanceTypes': [
                        'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
                    ],
                    'maxSessionLengthInMinutes': 123,
                    'streamingImageIds': [
                        'string',
                    ]
                },
                'studioComponentIds': [
                    'string',
                ],
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfile** *(dict) --* 

          The launch profile.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the launch profile.

            
          

          - **description** *(string) --* 

            A human-readable description of the launch profile.

            
          

          - **ec2SubnetIds** *(list) --* 

            Unique identifiers for a collection of EC2 subnets.

            
            

            - *(string) --* 
        
          

          - **launchProfileId** *(string) --* 

            The launch profile ID.

            
          

          - **launchProfileProtocolVersions** *(list) --* 

            The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

            
            

            - *(string) --* 

              The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

              
        
          

          - **name** *(string) --* 

            A friendly name for the launch profile.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the launch profile.

            
          

          - **streamConfiguration** *(dict) --* 

            A configuration for a streaming session.

            
            

            - **clipboardMode** *(string) --* 

              Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

              
            

            - **ec2InstanceTypes** *(list) --* 

              The EC2 instance types that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
            

            - **maxSessionLengthInMinutes** *(integer) --* 

              The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

              
            

            - **streamingImageIds** *(list) --* 

              The streaming images that users can select from when launching a streaming session with this launch profile.

              
              

              - *(string) --* 
          
        
          

          - **studioComponentIds** *(list) --* 

            Unique identifiers for a collection of studio components that can be used with this launch profile.

            
            

            - *(string) --* 
        
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: update_launch_profile_member(**kwargs)

    

    Update a user persona in launch profile membership.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/UpdateLaunchProfileMember>`_    


    **Request Syntax** 
    ::

      response = client.update_launch_profile_member(
          clientToken='string',
          launchProfileId='string',
          persona='USER',
          principalId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type persona: string
    :param persona: **[REQUIRED]** 

      The persona.

      

    
    :type principalId: string
    :param principalId: **[REQUIRED]** 

      The principal ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'member': {
                'identityStoreId': 'string',
                'persona': 'USER',
                'principalId': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **member** *(dict) --* 

          The member.

          
          

          - **identityStoreId** *(string) --* 

            The ID of the identity store.

            
          

          - **persona** *(string) --* 

            The persona.

            
          

          - **principalId** *(string) --* 

            The principal ID.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: update_streaming_image(**kwargs)

    

    Update streaming image.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/UpdateStreamingImage>`_    


    **Request Syntax** 
    ::

      response = client.update_streaming_image(
          clientToken='string',
          description='string',
          name='string',
          streamingImageId='string',
          studioId='string'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type description: string
    :param description: 

      The description.

      

    
    :type name: string
    :param name: 

      The name for the streaming image.

      

    
    :type streamingImageId: string
    :param streamingImageId: **[REQUIRED]** 

      The streaming image ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'streamingImage': {
                'arn': 'string',
                'description': 'string',
                'ec2ImageId': 'string',
                'encryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'CUSTOMER_MANAGED_KEY'
                },
                'eulaIds': [
                    'string',
                ],
                'name': 'string',
                'owner': 'string',
                'platform': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'DELETE_IN_PROGRESS'|'DELETED'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED'|'CREATE_FAILED'|'DELETE_FAILED',
                'statusCode': 'STREAMING_IMAGE_CREATE_IN_PROGRESS'|'STREAMING_IMAGE_READY'|'STREAMING_IMAGE_DELETE_IN_PROGRESS'|'STREAMING_IMAGE_DELETED'|'STREAMING_IMAGE_UPDATE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'streamingImageId': 'string',
                'tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **streamingImage** *(dict) --* 

          

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **description** *(string) --* 

            A human-readable description of the streaming image.

            
          

          - **ec2ImageId** *(string) --* 

            The ID of an EC2 machine image with which to create the streaming image.

            
          

          - **encryptionConfiguration** *(dict) --* 

            The encryption configuration.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **eulaIds** *(list) --* 

            The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.

            
            

            - *(string) --* 
        
          

          - **name** *(string) --* 

            A friendly name for a streaming image resource.

            
          

          - **owner** *(string) --* 

            The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.

            
          

          - **platform** *(string) --* 

            The platform of the streaming image, either WINDOWS or LINUX.

            
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the streaming image.

            
          

          - **streamingImageId** *(string) --* 

            The ID of the streaming image.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: update_studio(**kwargs)

    

    Update a Studio resource.

     

    Currently, this operation only supports updating the displayName of your studio.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/UpdateStudio>`_    


    **Request Syntax** 
    ::

      response = client.update_studio(
          adminRoleArn='string',
          clientToken='string',
          displayName='string',
          studioId='string',
          userRoleArn='string'
      )
    :type adminRoleArn: string
    :param adminRoleArn: 

      The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.

      

    
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type displayName: string
    :param displayName: 

      A friendly name for the studio.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type userRoleArn: string
    :param userRoleArn: 

      The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studio': {
                'adminRoleArn': 'string',
                'arn': 'string',
                'createdAt': datetime(2015, 1, 1),
                'displayName': 'string',
                'homeRegion': 'string',
                'ssoClientId': 'string',
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'STUDIO_CREATED'|'STUDIO_DELETED'|'STUDIO_UPDATED'|'STUDIO_CREATE_IN_PROGRESS'|'STUDIO_UPDATE_IN_PROGRESS'|'STUDIO_DELETE_IN_PROGRESS'|'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'|'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'|'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'|'AWS_SSO_NOT_ENABLED'|'AWS_SSO_ACCESS_DENIED'|'ROLE_NOT_OWNED_BY_STUDIO_OWNER'|'ROLE_COULD_NOT_BE_ASSUMED'|'INTERNAL_ERROR'|'ENCRYPTION_KEY_NOT_FOUND'|'ENCRYPTION_KEY_ACCESS_DENIED'|'AWS_SSO_CONFIGURATION_REPAIRED'|'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS',
                'statusMessage': 'string',
                'studioEncryptionConfiguration': {
                    'keyArn': 'string',
                    'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
                },
                'studioId': 'string',
                'studioName': 'string',
                'studioUrl': 'string',
                'tags': {
                    'string': 'string'
                },
                'updatedAt': datetime(2015, 1, 1),
                'userRoleArn': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studio** *(dict) --* 

          Information about a studio.

          
          

          - **adminRoleArn** *(string) --* 

            The IAM role that studio admins assume when logging in to the Nimble Studio portal.

            
          

          - **arn** *(string) --* 

            The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.

            
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **displayName** *(string) --* 

            A friendly name for the studio.

            
          

          - **homeRegion** *(string) --* 

            The AWS region where the studio resource is located.

            
          

          - **ssoClientId** *(string) --* 

            The AWS SSO application client ID used to integrate with AWS SSO to enable AWS SSO users to log in to Nimble portal.

            
          

          - **state** *(string) --* 

            The current state of the studio resource.

            
          

          - **statusCode** *(string) --* 

            Status codes that provide additional detail on the studio state.

            
          

          - **statusMessage** *(string) --* 

            Additional detail on the studio state.

            
          

          - **studioEncryptionConfiguration** *(dict) --* 

            Configuration of the encryption method that is used for the studio.

            
            

            - **keyArn** *(string) --* 

              The ARN for a KMS key that is used to encrypt studio data.

              
            

            - **keyType** *(string) --* 

              The type of KMS key that is used to encrypt studio data.

              
        
          

          - **studioId** *(string) --* 

            The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.

            
          

          - **studioName** *(string) --* 

            The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.

            
          

          - **studioUrl** *(string) --* 

            The address of the web page for the studio.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **userRoleArn** *(string) --* 

            The IAM role that studio users assume when logging in to the Nimble Studio portal.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

  .. py:method:: update_studio_component(**kwargs)

    

    Updates a studio component resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/UpdateStudioComponent>`_    


    **Request Syntax** 
    ::

      response = client.update_studio_component(
          clientToken='string',
          configuration={
              'activeDirectoryConfiguration': {
                  'computerAttributes': [
                      {
                          'name': 'string',
                          'value': 'string'
                      },
                  ],
                  'directoryId': 'string',
                  'organizationalUnitDistinguishedName': 'string'
              },
              'computeFarmConfiguration': {
                  'activeDirectoryUser': 'string',
                  'endpoint': 'string'
              },
              'licenseServiceConfiguration': {
                  'endpoint': 'string'
              },
              'sharedFileSystemConfiguration': {
                  'endpoint': 'string',
                  'fileSystemId': 'string',
                  'linuxMountPoint': 'string',
                  'shareName': 'string',
                  'windowsMountDrive': 'string'
              }
          },
          description='string',
          ec2SecurityGroupIds=[
              'string',
          ],
          initializationScripts=[
              {
                  'launchProfileProtocolVersion': 'string',
                  'platform': 'LINUX'|'WINDOWS',
                  'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                  'script': 'string'
              },
          ],
          name='string',
          scriptParameters=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ],
          studioComponentId='string',
          studioId='string',
          subtype='AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
          type='ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM'
      )
    :type clientToken: string
    :param clientToken: 

      To make an idempotent API request using one of these actions, specify a client token in the request. You should not reuse the same client token for other API requests. If you retry a request that completed successfully using the same client token and the same parameters, the retry succeeds without performing any further actions. If you retry a successful request using the same client token, but one or more of the parameters are different, the retry fails with a ValidationException error.

      This field is autopopulated if not provided.

    
    :type configuration: dict
    :param configuration: 

      The configuration of the studio component, based on component type.

      

    
      - **activeDirectoryConfiguration** *(dict) --* 

        The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

        

      
        - **computerAttributes** *(list) --* 

          A collection of custom attributes for an Active Directory computer.

          

        
          - *(dict) --* 

            An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

            

          
            - **name** *(string) --* 

              The name for the LDAP attribute.

              

            
            - **value** *(string) --* 

              The value for the LDAP attribute.

              

            
          
      
        - **directoryId** *(string) --* 

          The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

          

        
        - **organizationalUnitDistinguishedName** *(string) --* 

          The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

          

        
      
      - **computeFarmConfiguration** *(dict) --* 

        The configuration for a render farm that is associated with a studio resource.

        

      
        - **activeDirectoryUser** *(string) --* 

          The name of an Active Directory user that is used on ComputeFarm worker instances.

          

        
        - **endpoint** *(string) --* 

          The endpoint of the ComputeFarm that is accessed by the studio component resource.

          

        
      
      - **licenseServiceConfiguration** *(dict) --* 

        The configuration for a license service that is associated with a studio resource.

        

      
        - **endpoint** *(string) --* 

          The endpoint of the license service that is accessed by the studio component resource.

          

        
      
      - **sharedFileSystemConfiguration** *(dict) --* 

        The configuration for a shared file storage system that is associated with a studio resource.

        

      
        - **endpoint** *(string) --* 

          The endpoint of the shared file system that is accessed by the studio component resource.

          

        
        - **fileSystemId** *(string) --* 

          The unique identifier for a file system.

          

        
        - **linuxMountPoint** *(string) --* 

          The mount location for a shared file system on a Linux virtual workstation.

          

        
        - **shareName** *(string) --* 

          The name of the file share.

          

        
        - **windowsMountDrive** *(string) --* 

          The mount location for a shared file system on a Windows virtual workstation.

          

        
      
    
    :type description: string
    :param description: 

      The description.

      

    
    :type ec2SecurityGroupIds: list
    :param ec2SecurityGroupIds: 

      The EC2 security groups that control access to the studio component.

      

    
      - *(string) --* 

      
  
    :type initializationScripts: list
    :param initializationScripts: 

      Initialization scripts for studio components.

      

    
      - *(dict) --* 

        Initialization scripts for studio components.

        

      
        - **launchProfileProtocolVersion** *(string) --* 

          The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

          

        
        - **platform** *(string) --* 

          The platform of the initialization script, either WINDOWS or LINUX.

          

        
        - **runContext** *(string) --* 

          The method to use when running the initialization script.

          

        
        - **script** *(string) --* 

          The initialization script.

          

        
      
  
    :type name: string
    :param name: 

      The name for the studio component.

      

    
    :type scriptParameters: list
    :param scriptParameters: 

      Parameters for the studio component scripts.

      

    
      - *(dict) --* 

        A parameter for a studio component script, in the form of a key:value pair.

        

      
        - **key** *(string) --* 

          A script parameter key.

          

        
        - **value** *(string) --* 

          A script parameter value.

          

        
      
  
    :type studioComponentId: string
    :param studioComponentId: **[REQUIRED]** 

      The studio component ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type subtype: string
    :param subtype: 

      The specific subtype of a studio component.

      

    
    :type type: string
    :param type: 

      The type of the studio component.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studioComponent': {
                'arn': 'string',
                'configuration': {
                    'activeDirectoryConfiguration': {
                        'computerAttributes': [
                            {
                                'name': 'string',
                                'value': 'string'
                            },
                        ],
                        'directoryId': 'string',
                        'organizationalUnitDistinguishedName': 'string'
                    },
                    'computeFarmConfiguration': {
                        'activeDirectoryUser': 'string',
                        'endpoint': 'string'
                    },
                    'licenseServiceConfiguration': {
                        'endpoint': 'string'
                    },
                    'sharedFileSystemConfiguration': {
                        'endpoint': 'string',
                        'fileSystemId': 'string',
                        'linuxMountPoint': 'string',
                        'shareName': 'string',
                        'windowsMountDrive': 'string'
                    }
                },
                'createdAt': datetime(2015, 1, 1),
                'createdBy': 'string',
                'description': 'string',
                'ec2SecurityGroupIds': [
                    'string',
                ],
                'initializationScripts': [
                    {
                        'launchProfileProtocolVersion': 'string',
                        'platform': 'LINUX'|'WINDOWS',
                        'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                        'script': 'string'
                    },
                ],
                'name': 'string',
                'scriptParameters': [
                    {
                        'key': 'string',
                        'value': 'string'
                    },
                ],
                'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                'statusCode': 'ACTIVE_DIRECTORY_ALREADY_EXISTS'|'STUDIO_COMPONENT_CREATED'|'STUDIO_COMPONENT_UPDATED'|'STUDIO_COMPONENT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'STUDIO_COMPONENT_CREATE_IN_PROGRESS'|'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'|'STUDIO_COMPONENT_DELETE_IN_PROGRESS'|'INTERNAL_ERROR',
                'statusMessage': 'string',
                'studioComponentId': 'string',
                'subtype': 'AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
                'tags': {
                    'string': 'string'
                },
                'type': 'ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM',
                'updatedAt': datetime(2015, 1, 1),
                'updatedBy': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studioComponent** *(dict) --* 

          Information about the studio component.

          
          

          - **arn** *(string) --* 

            The ARN of the resource.

            
          

          - **configuration** *(dict) --* 

            The configuration of the studio component, based on component type.

            
            

            - **activeDirectoryConfiguration** *(dict) --* 

              The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

              
              

              - **computerAttributes** *(list) --* 

                A collection of custom attributes for an Active Directory computer.

                
                

                - *(dict) --* 

                  An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

                  
                  

                  - **name** *(string) --* 

                    The name for the LDAP attribute.

                    
                  

                  - **value** *(string) --* 

                    The value for the LDAP attribute.

                    
              
            
              

              - **directoryId** *(string) --* 

                The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

                
              

              - **organizationalUnitDistinguishedName** *(string) --* 

                The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

                
          
            

            - **computeFarmConfiguration** *(dict) --* 

              The configuration for a render farm that is associated with a studio resource.

              
              

              - **activeDirectoryUser** *(string) --* 

                The name of an Active Directory user that is used on ComputeFarm worker instances.

                
              

              - **endpoint** *(string) --* 

                The endpoint of the ComputeFarm that is accessed by the studio component resource.

                
          
            

            - **licenseServiceConfiguration** *(dict) --* 

              The configuration for a license service that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the license service that is accessed by the studio component resource.

                
          
            

            - **sharedFileSystemConfiguration** *(dict) --* 

              The configuration for a shared file storage system that is associated with a studio resource.

              
              

              - **endpoint** *(string) --* 

                The endpoint of the shared file system that is accessed by the studio component resource.

                
              

              - **fileSystemId** *(string) --* 

                The unique identifier for a file system.

                
              

              - **linuxMountPoint** *(string) --* 

                The mount location for a shared file system on a Linux virtual workstation.

                
              

              - **shareName** *(string) --* 

                The name of the file share.

                
              

              - **windowsMountDrive** *(string) --* 

                The mount location for a shared file system on a Windows virtual workstation.

                
          
        
          

          - **createdAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was created.

            
          

          - **createdBy** *(string) --* 

            The user ID of the user that created the studio component.

            
          

          - **description** *(string) --* 

            A human-readable description for the studio component resource.

            
          

          - **ec2SecurityGroupIds** *(list) --* 

            The EC2 security groups that control access to the studio component.

            
            

            - *(string) --* 
        
          

          - **initializationScripts** *(list) --* 

            Initialization scripts for studio components.

            
            

            - *(dict) --* 

              Initialization scripts for studio components.

              
              

              - **launchProfileProtocolVersion** *(string) --* 

                The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                
              

              - **platform** *(string) --* 

                The platform of the initialization script, either WINDOWS or LINUX.

                
              

              - **runContext** *(string) --* 

                The method to use when running the initialization script.

                
              

              - **script** *(string) --* 

                The initialization script.

                
          
        
          

          - **name** *(string) --* 

            A friendly name for the studio component resource.

            
          

          - **scriptParameters** *(list) --* 

            Parameters for the studio component scripts.

            
            

            - *(dict) --* 

              A parameter for a studio component script, in the form of a key:value pair.

              
              

              - **key** *(string) --* 

                A script parameter key.

                
              

              - **value** *(string) --* 

                A script parameter value.

                
          
        
          

          - **state** *(string) --* 

            The current state.

            
          

          - **statusCode** *(string) --* 

            The status code.

            
          

          - **statusMessage** *(string) --* 

            The status message for the studio component.

            
          

          - **studioComponentId** *(string) --* 

            The unique identifier for a studio component resource.

            
          

          - **subtype** *(string) --* 

            The specific subtype of a studio component.

            
          

          - **tags** *(dict) --* 

            A collection of labels, in the form of key:value pairs, that apply to this resource.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **type** *(string) --* 

            The type of the studio component.

            
          

          - **updatedAt** *(datetime) --* 

            The Unix epoch timestamp in seconds for when the resource was updated.

            
          

          - **updatedBy** *(string) --* 

            The user ID of the user that most recently updated the resource.

            
      
    
    **Exceptions** 
    
    *     :py:class:`NimbleStudio.Client.exceptions.ValidationException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ThrottlingException`

    
    *     :py:class:`NimbleStudio.Client.exceptions.ConflictException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`NimbleStudio.Paginator.ListEulaAcceptances`


* :py:class:`NimbleStudio.Paginator.ListEulas`


* :py:class:`NimbleStudio.Paginator.ListLaunchProfileMembers`


* :py:class:`NimbleStudio.Paginator.ListLaunchProfiles`


* :py:class:`NimbleStudio.Paginator.ListStreamingImages`


* :py:class:`NimbleStudio.Paginator.ListStreamingSessions`


* :py:class:`NimbleStudio.Paginator.ListStudioComponents`


* :py:class:`NimbleStudio.Paginator.ListStudioMembers`


* :py:class:`NimbleStudio.Paginator.ListStudios`



.. py:class:: NimbleStudio.Paginator.ListEulaAcceptances

  ::

    
    paginator = client.get_paginator('list_eula_acceptances')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_eula_acceptances`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListEulaAcceptances>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          eulaIds=[
              'string',
          ],
          studioId='string',
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type eulaIds: list
    :param eulaIds: 

      A collection of EULA IDs.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'eulaAcceptances': [
                {
                    'acceptedAt': datetime(2015, 1, 1),
                    'acceptedBy': 'string',
                    'accepteeId': 'string',
                    'eulaAcceptanceId': 'string',
                    'eulaId': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **eulaAcceptances** *(list) --* 

          A collection of EULA acceptances.

          
          

          - *(dict) --* 
            

            - **acceptedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the EULA was accepted.

              
            

            - **acceptedBy** *(string) --* 

              The ID of the person who accepted the EULA.

              
            

            - **accepteeId** *(string) --* 

              The ID of the acceptee.

              
            

            - **eulaAcceptanceId** *(string) --* 

              The EULA acceptance ID.

              
            

            - **eulaId** *(string) --* 

              The EULA ID.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListEulas

  ::

    
    paginator = client.get_paginator('list_eulas')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_eulas`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListEulas>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          eulaIds=[
              'string',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type eulaIds: list
    :param eulaIds: 

      A collection of EULA IDs.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'eulas': [
                {
                    'content': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'eulaId': 'string',
                    'name': 'string',
                    'updatedAt': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **eulas** *(list) --* 

          A collection of EULA resources.

          
          

          - *(dict) --* 

            Represents a EULA resource.

            
            

            - **content** *(string) --* 

              The EULA content.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **eulaId** *(string) --* 

              The EULA ID.

              
            

            - **name** *(string) --* 

              The name for the EULA.

              
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListLaunchProfileMembers

  ::

    
    paginator = client.get_paginator('list_launch_profile_members')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_launch_profile_members`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListLaunchProfileMembers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          launchProfileId='string',
          studioId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type launchProfileId: string
    :param launchProfileId: **[REQUIRED]** 

      The launch profile ID.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'members': [
                {
                    'identityStoreId': 'string',
                    'persona': 'USER',
                    'principalId': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **members** *(list) --* 

          A list of members.

          
          

          - *(dict) --* 
            

            - **identityStoreId** *(string) --* 

              The ID of the identity store.

              
            

            - **persona** *(string) --* 

              The persona.

              
            

            - **principalId** *(string) --* 

              The principal ID.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListLaunchProfiles

  ::

    
    paginator = client.get_paginator('list_launch_profiles')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_launch_profiles`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListLaunchProfiles>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          principalId='string',
          states=[
              'string',
          ],
          studioId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type principalId: string
    :param principalId: 

      The principal ID.

      

    
    :type states: list
    :param states: 

      A list of states.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'launchProfiles': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'createdBy': 'string',
                    'description': 'string',
                    'ec2SubnetIds': [
                        'string',
                    ],
                    'launchProfileId': 'string',
                    'launchProfileProtocolVersions': [
                        'string',
                    ],
                    'name': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                    'statusCode': 'LAUNCH_PROFILE_CREATED'|'LAUNCH_PROFILE_UPDATED'|'LAUNCH_PROFILE_DELETED'|'LAUNCH_PROFILE_CREATE_IN_PROGRESS'|'LAUNCH_PROFILE_UPDATE_IN_PROGRESS'|'LAUNCH_PROFILE_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'STREAMING_IMAGE_NOT_FOUND'|'STREAMING_IMAGE_NOT_READY'|'LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'INVALID_SUBNETS_PROVIDED',
                    'statusMessage': 'string',
                    'streamConfiguration': {
                        'clipboardMode': 'ENABLED'|'DISABLED',
                        'ec2InstanceTypes': [
                            'g4dn.xlarge'|'g4dn.2xlarge'|'g4dn.4xlarge'|'g4dn.8xlarge'|'g4dn.12xlarge'|'g4dn.16xlarge',
                        ],
                        'maxSessionLengthInMinutes': 123,
                        'streamingImageIds': [
                            'string',
                        ]
                    },
                    'studioComponentIds': [
                        'string',
                    ],
                    'tags': {
                        'string': 'string'
                    },
                    'updatedAt': datetime(2015, 1, 1),
                    'updatedBy': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **launchProfiles** *(list) --* 

          A collection of launch profiles.

          
          

          - *(dict) --* 
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **createdBy** *(string) --* 

              The user ID of the user that created the launch profile.

              
            

            - **description** *(string) --* 

              A human-readable description of the launch profile.

              
            

            - **ec2SubnetIds** *(list) --* 

              Unique identifiers for a collection of EC2 subnets.

              
              

              - *(string) --* 
          
            

            - **launchProfileId** *(string) --* 

              The launch profile ID.

              
            

            - **launchProfileProtocolVersions** *(list) --* 

              The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

              
              

              - *(string) --* 

                The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                
          
            

            - **name** *(string) --* 

              A friendly name for the launch profile.

              
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the launch profile.

              
            

            - **streamConfiguration** *(dict) --* 

              A configuration for a streaming session.

              
              

              - **clipboardMode** *(string) --* 

                Enable or disable the use of the system clipboard to copy and paste between the streaming session and streaming client.

                
              

              - **ec2InstanceTypes** *(list) --* 

                The EC2 instance types that users can select from when launching a streaming session with this launch profile.

                
                

                - *(string) --* 
            
              

              - **maxSessionLengthInMinutes** *(integer) --* 

                The length of time, in minutes, that a streaming session can run. After this point, Nimble Studio automatically terminates the session.

                
              

              - **streamingImageIds** *(list) --* 

                The streaming images that users can select from when launching a streaming session with this launch profile.

                
                

                - *(string) --* 
            
          
            

            - **studioComponentIds** *(list) --* 

              Unique identifiers for a collection of studio components that can be used with this launch profile.

              
              

              - *(string) --* 
          
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **updatedBy** *(string) --* 

              The user ID of the user that most recently updated the resource.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListStreamingImages

  ::

    
    paginator = client.get_paginator('list_streaming_images')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_streaming_images`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStreamingImages>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          owner='string',
          studioId='string',
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type owner: string
    :param owner: 

      The owner.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'streamingImages': [
                {
                    'arn': 'string',
                    'description': 'string',
                    'ec2ImageId': 'string',
                    'encryptionConfiguration': {
                        'keyArn': 'string',
                        'keyType': 'CUSTOMER_MANAGED_KEY'
                    },
                    'eulaIds': [
                        'string',
                    ],
                    'name': 'string',
                    'owner': 'string',
                    'platform': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'DELETE_IN_PROGRESS'|'DELETED'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED'|'CREATE_FAILED'|'DELETE_FAILED',
                    'statusCode': 'STREAMING_IMAGE_CREATE_IN_PROGRESS'|'STREAMING_IMAGE_READY'|'STREAMING_IMAGE_DELETE_IN_PROGRESS'|'STREAMING_IMAGE_DELETED'|'STREAMING_IMAGE_UPDATE_IN_PROGRESS'|'INTERNAL_ERROR',
                    'statusMessage': 'string',
                    'streamingImageId': 'string',
                    'tags': {
                        'string': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **streamingImages** *(list) --* 

          A collection of streaming images.

          
          

          - *(dict) --* 
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **description** *(string) --* 

              A human-readable description of the streaming image.

              
            

            - **ec2ImageId** *(string) --* 

              The ID of an EC2 machine image with which to create the streaming image.

              
            

            - **encryptionConfiguration** *(dict) --* 

              The encryption configuration.

              
              

              - **keyArn** *(string) --* 

                The ARN for a KMS key that is used to encrypt studio data.

                
              

              - **keyType** *(string) --* 

                The type of KMS key that is used to encrypt studio data.

                
          
            

            - **eulaIds** *(list) --* 

              The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.

              
              

              - *(string) --* 
          
            

            - **name** *(string) --* 

              A friendly name for a streaming image resource.

              
            

            - **owner** *(string) --* 

              The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.

              
            

            - **platform** *(string) --* 

              The platform of the streaming image, either WINDOWS or LINUX.

              
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the streaming image.

              
            

            - **streamingImageId** *(string) --* 

              The ID of the streaming image.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListStreamingSessions

  ::

    
    paginator = client.get_paginator('list_streaming_sessions')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_streaming_sessions`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStreamingSessions>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          createdBy='string',
          sessionIds='string',
          studioId='string',
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type createdBy: string
    :param createdBy: 

      The user ID.

      

    
    :type sessionIds: string
    :param sessionIds: 

      A collection of session IDs.

      

    
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'sessions': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'createdBy': 'string',
                    'ec2InstanceType': 'string',
                    'launchProfileId': 'string',
                    'sessionId': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'READY'|'DELETED'|'CREATE_FAILED'|'DELETE_FAILED',
                    'statusCode': 'STREAMING_SESSION_READY'|'STREAMING_SESSION_DELETED'|'STREAMING_SESSION_CREATE_IN_PROGRESS'|'STREAMING_SESSION_DELETE_IN_PROGRESS'|'INTERNAL_ERROR'|'INSUFFICIENT_CAPACITY'|'ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR'|'NETWORK_CONNECTION_ERROR'|'INITIALIZATION_SCRIPT_ERROR'|'DECRYPT_STREAMING_IMAGE_ERROR'|'NETWORK_INTERFACE_ERROR',
                    'statusMessage': 'string',
                    'streamingImageId': 'string',
                    'tags': {
                        'string': 'string'
                    },
                    'terminateAt': datetime(2015, 1, 1),
                    'updatedAt': datetime(2015, 1, 1),
                    'updatedBy': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **sessions** *(list) --* 

          A collection of streaming sessions.

          
          

          - *(dict) --* 
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **createdBy** *(string) --* 

              The user ID of the user that created the streaming session.

              
            

            - **ec2InstanceType** *(string) --* 

              The EC2 Instance type used for the streaming session.

              
            

            - **launchProfileId** *(string) --* 

              The ID of the launch profile used to control access from the streaming session.

              
            

            - **sessionId** *(string) --* 

              The session ID.

              
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the streaming session.

              
            

            - **streamingImageId** *(string) --* 

              The ID of the streaming image.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **terminateAt** *(datetime) --* 

              The time the streaming session will automatically terminate if not terminated by the user.

              
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **updatedBy** *(string) --* 

              The user ID of the user that most recently updated the resource.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListStudioComponents

  ::

    
    paginator = client.get_paginator('list_studio_components')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_studio_components`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStudioComponents>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          states=[
              'string',
          ],
          studioId='string',
          types=[
              'string',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type states: list
    :param states: 

      A list of states.

      

    
      - *(string) --* 

      
  
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type types: list
    :param types: 

      The types.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studioComponents': [
                {
                    'arn': 'string',
                    'configuration': {
                        'activeDirectoryConfiguration': {
                            'computerAttributes': [
                                {
                                    'name': 'string',
                                    'value': 'string'
                                },
                            ],
                            'directoryId': 'string',
                            'organizationalUnitDistinguishedName': 'string'
                        },
                        'computeFarmConfiguration': {
                            'activeDirectoryUser': 'string',
                            'endpoint': 'string'
                        },
                        'licenseServiceConfiguration': {
                            'endpoint': 'string'
                        },
                        'sharedFileSystemConfiguration': {
                            'endpoint': 'string',
                            'fileSystemId': 'string',
                            'linuxMountPoint': 'string',
                            'shareName': 'string',
                            'windowsMountDrive': 'string'
                        }
                    },
                    'createdAt': datetime(2015, 1, 1),
                    'createdBy': 'string',
                    'description': 'string',
                    'ec2SecurityGroupIds': [
                        'string',
                    ],
                    'initializationScripts': [
                        {
                            'launchProfileProtocolVersion': 'string',
                            'platform': 'LINUX'|'WINDOWS',
                            'runContext': 'SYSTEM_INITIALIZATION'|'USER_INITIALIZATION',
                            'script': 'string'
                        },
                    ],
                    'name': 'string',
                    'scriptParameters': [
                        {
                            'key': 'string',
                            'value': 'string'
                        },
                    ],
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                    'statusCode': 'ACTIVE_DIRECTORY_ALREADY_EXISTS'|'STUDIO_COMPONENT_CREATED'|'STUDIO_COMPONENT_UPDATED'|'STUDIO_COMPONENT_DELETED'|'ENCRYPTION_KEY_ACCESS_DENIED'|'ENCRYPTION_KEY_NOT_FOUND'|'STUDIO_COMPONENT_CREATE_IN_PROGRESS'|'STUDIO_COMPONENT_UPDATE_IN_PROGRESS'|'STUDIO_COMPONENT_DELETE_IN_PROGRESS'|'INTERNAL_ERROR',
                    'statusMessage': 'string',
                    'studioComponentId': 'string',
                    'subtype': 'AWS_MANAGED_MICROSOFT_AD'|'AMAZON_FSX_FOR_WINDOWS'|'AMAZON_FSX_FOR_LUSTRE'|'CUSTOM',
                    'tags': {
                        'string': 'string'
                    },
                    'type': 'ACTIVE_DIRECTORY'|'SHARED_FILE_SYSTEM'|'COMPUTE_FARM'|'LICENSE_SERVICE'|'CUSTOM',
                    'updatedAt': datetime(2015, 1, 1),
                    'updatedBy': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studioComponents** *(list) --* 

          A collection of studio components.

          
          

          - *(dict) --* 

            A network that is used by a studio’s users and workflows, including render farm, Active Directory, licensing, and file system.

            
            

            - **arn** *(string) --* 

              The ARN of the resource.

              
            

            - **configuration** *(dict) --* 

              The configuration of the studio component, based on component type.

              
              

              - **activeDirectoryConfiguration** *(dict) --* 

                The configuration for a Microsoft Active Directory (Microsoft AD) studio resource.

                
                

                - **computerAttributes** *(list) --* 

                  A collection of custom attributes for an Active Directory computer.

                  
                  

                  - *(dict) --* 

                    An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.

                    
                    

                    - **name** *(string) --* 

                      The name for the LDAP attribute.

                      
                    

                    - **value** *(string) --* 

                      The value for the LDAP attribute.

                      
                
              
                

                - **directoryId** *(string) --* 

                  The directory ID of the AWS Directory Service for Microsoft AD to access using this studio component.

                  
                

                - **organizationalUnitDistinguishedName** *(string) --* 

                  The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.

                  
            
              

              - **computeFarmConfiguration** *(dict) --* 

                The configuration for a render farm that is associated with a studio resource.

                
                

                - **activeDirectoryUser** *(string) --* 

                  The name of an Active Directory user that is used on ComputeFarm worker instances.

                  
                

                - **endpoint** *(string) --* 

                  The endpoint of the ComputeFarm that is accessed by the studio component resource.

                  
            
              

              - **licenseServiceConfiguration** *(dict) --* 

                The configuration for a license service that is associated with a studio resource.

                
                

                - **endpoint** *(string) --* 

                  The endpoint of the license service that is accessed by the studio component resource.

                  
            
              

              - **sharedFileSystemConfiguration** *(dict) --* 

                The configuration for a shared file storage system that is associated with a studio resource.

                
                

                - **endpoint** *(string) --* 

                  The endpoint of the shared file system that is accessed by the studio component resource.

                  
                

                - **fileSystemId** *(string) --* 

                  The unique identifier for a file system.

                  
                

                - **linuxMountPoint** *(string) --* 

                  The mount location for a shared file system on a Linux virtual workstation.

                  
                

                - **shareName** *(string) --* 

                  The name of the file share.

                  
                

                - **windowsMountDrive** *(string) --* 

                  The mount location for a shared file system on a Windows virtual workstation.

                  
            
          
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **createdBy** *(string) --* 

              The user ID of the user that created the studio component.

              
            

            - **description** *(string) --* 

              A human-readable description for the studio component resource.

              
            

            - **ec2SecurityGroupIds** *(list) --* 

              The EC2 security groups that control access to the studio component.

              
              

              - *(string) --* 
          
            

            - **initializationScripts** *(list) --* 

              Initialization scripts for studio components.

              
              

              - *(dict) --* 

                Initialization scripts for studio components.

                
                

                - **launchProfileProtocolVersion** *(string) --* 

                  The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".

                  
                

                - **platform** *(string) --* 

                  The platform of the initialization script, either WINDOWS or LINUX.

                  
                

                - **runContext** *(string) --* 

                  The method to use when running the initialization script.

                  
                

                - **script** *(string) --* 

                  The initialization script.

                  
            
          
            

            - **name** *(string) --* 

              A friendly name for the studio component resource.

              
            

            - **scriptParameters** *(list) --* 

              Parameters for the studio component scripts.

              
              

              - *(dict) --* 

                A parameter for a studio component script, in the form of a key:value pair.

                
                

                - **key** *(string) --* 

                  A script parameter key.

                  
                

                - **value** *(string) --* 

                  A script parameter value.

                  
            
          
            

            - **state** *(string) --* 

              The current state.

              
            

            - **statusCode** *(string) --* 

              The status code.

              
            

            - **statusMessage** *(string) --* 

              The status message for the studio component.

              
            

            - **studioComponentId** *(string) --* 

              The unique identifier for a studio component resource.

              
            

            - **subtype** *(string) --* 

              The specific subtype of a studio component.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **type** *(string) --* 

              The type of the studio component.

              
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **updatedBy** *(string) --* 

              The user ID of the user that most recently updated the resource.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListStudioMembers

  ::

    
    paginator = client.get_paginator('list_studio_members')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_studio_members`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStudioMembers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          studioId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type studioId: string
    :param studioId: **[REQUIRED]** 

      The studio ID.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'members': [
                {
                    'identityStoreId': 'string',
                    'persona': 'ADMINISTRATOR',
                    'principalId': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **members** *(list) --* 

          A list of members.

          
          

          - *(dict) --* 
            

            - **identityStoreId** *(string) --* 

              The ID of the identity store.

              
            

            - **persona** *(string) --* 

              The persona.

              
            

            - **principalId** *(string) --* 

              The principal ID.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: NimbleStudio.Paginator.ListStudios

  ::

    
    paginator = client.get_paginator('list_studios')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`NimbleStudio.Client.list_studios`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/nimble-2020-08-01/ListStudios>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'studios': [
                {
                    'adminRoleArn': 'string',
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'displayName': 'string',
                    'homeRegion': 'string',
                    'ssoClientId': 'string',
                    'state': 'CREATE_IN_PROGRESS'|'READY'|'UPDATE_IN_PROGRESS'|'DELETE_IN_PROGRESS'|'DELETED'|'DELETE_FAILED'|'CREATE_FAILED'|'UPDATE_FAILED',
                    'statusCode': 'STUDIO_CREATED'|'STUDIO_DELETED'|'STUDIO_UPDATED'|'STUDIO_CREATE_IN_PROGRESS'|'STUDIO_UPDATE_IN_PROGRESS'|'STUDIO_DELETE_IN_PROGRESS'|'STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED'|'STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED'|'STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED'|'AWS_SSO_NOT_ENABLED'|'AWS_SSO_ACCESS_DENIED'|'ROLE_NOT_OWNED_BY_STUDIO_OWNER'|'ROLE_COULD_NOT_BE_ASSUMED'|'INTERNAL_ERROR'|'ENCRYPTION_KEY_NOT_FOUND'|'ENCRYPTION_KEY_ACCESS_DENIED'|'AWS_SSO_CONFIGURATION_REPAIRED'|'AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS',
                    'statusMessage': 'string',
                    'studioEncryptionConfiguration': {
                        'keyArn': 'string',
                        'keyType': 'AWS_OWNED_KEY'|'CUSTOMER_MANAGED_KEY'
                    },
                    'studioId': 'string',
                    'studioName': 'string',
                    'studioUrl': 'string',
                    'tags': {
                        'string': 'string'
                    },
                    'updatedAt': datetime(2015, 1, 1),
                    'userRoleArn': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success

        
        

        - **studios** *(list) --* 

          A collection of studios.

          
          

          - *(dict) --* 
            

            - **adminRoleArn** *(string) --* 

              The IAM role that studio admins assume when logging in to the Nimble Studio portal.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.

              
            

            - **createdAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was created.

              
            

            - **displayName** *(string) --* 

              A friendly name for the studio.

              
            

            - **homeRegion** *(string) --* 

              The AWS region where the studio resource is located.

              
            

            - **ssoClientId** *(string) --* 

              The AWS SSO application client ID used to integrate with AWS SSO to enable AWS SSO users to log in to Nimble portal.

              
            

            - **state** *(string) --* 

              The current state of the studio resource.

              
            

            - **statusCode** *(string) --* 

              Status codes that provide additional detail on the studio state.

              
            

            - **statusMessage** *(string) --* 

              Additional detail on the studio state.

              
            

            - **studioEncryptionConfiguration** *(dict) --* 

              Configuration of the encryption method that is used for the studio.

              
              

              - **keyArn** *(string) --* 

                The ARN for a KMS key that is used to encrypt studio data.

                
              

              - **keyType** *(string) --* 

                The type of KMS key that is used to encrypt studio data.

                
          
            

            - **studioId** *(string) --* 

              The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.

              
            

            - **studioName** *(string) --* 

              The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.

              
            

            - **studioUrl** *(string) --* 

              The address of the web page for the studio.

              
            

            - **tags** *(dict) --* 

              A collection of labels, in the form of key:value pairs, that apply to this resource.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **updatedAt** *(datetime) --* 

              The Unix epoch timestamp in seconds for when the resource was updated.

              
            

            - **userRoleArn** *(string) --* 

              The IAM role that studio users assume when logging in to the Nimble Studio portal.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    