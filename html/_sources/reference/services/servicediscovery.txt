

****************
ServiceDiscovery
****************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: ServiceDiscovery.Client

  A low-level client representing AWS Cloud Map (ServiceDiscovery)
   

  With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. 

  ::

    
    import boto3
    
    client = boto3.client('servicediscovery')

  
  These are the available methods:
  
  *   :py:meth:`~ServiceDiscovery.Client.can_paginate`

  
  *   :py:meth:`~ServiceDiscovery.Client.create_http_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.create_private_dns_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.create_public_dns_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.create_service`

  
  *   :py:meth:`~ServiceDiscovery.Client.delete_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.delete_service`

  
  *   :py:meth:`~ServiceDiscovery.Client.deregister_instance`

  
  *   :py:meth:`~ServiceDiscovery.Client.discover_instances`

  
  *   :py:meth:`~ServiceDiscovery.Client.generate_presigned_url`

  
  *   :py:meth:`~ServiceDiscovery.Client.get_instance`

  
  *   :py:meth:`~ServiceDiscovery.Client.get_instances_health_status`

  
  *   :py:meth:`~ServiceDiscovery.Client.get_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.get_operation`

  
  *   :py:meth:`~ServiceDiscovery.Client.get_paginator`

  
  *   :py:meth:`~ServiceDiscovery.Client.get_service`

  
  *   :py:meth:`~ServiceDiscovery.Client.get_waiter`

  
  *   :py:meth:`~ServiceDiscovery.Client.list_instances`

  
  *   :py:meth:`~ServiceDiscovery.Client.list_namespaces`

  
  *   :py:meth:`~ServiceDiscovery.Client.list_operations`

  
  *   :py:meth:`~ServiceDiscovery.Client.list_services`

  
  *   :py:meth:`~ServiceDiscovery.Client.list_tags_for_resource`

  
  *   :py:meth:`~ServiceDiscovery.Client.register_instance`

  
  *   :py:meth:`~ServiceDiscovery.Client.tag_resource`

  
  *   :py:meth:`~ServiceDiscovery.Client.untag_resource`

  
  *   :py:meth:`~ServiceDiscovery.Client.update_http_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.update_instance_custom_health_status`

  
  *   :py:meth:`~ServiceDiscovery.Client.update_private_dns_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.update_public_dns_namespace`

  
  *   :py:meth:`~ServiceDiscovery.Client.update_service`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_http_namespace(**kwargs)

    

    Creates an HTTP namespace. Service instances registered using an HTTP namespace can be discovered using a ``DiscoverInstances`` request but can't be discovered using DNS.

     

    For the current quota on the number of namespaces that you can create using the same account, see `Cloud Map quotas <https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html>`__ in the *Cloud Map Developer Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreateHttpNamespace>`_    


    **Request Syntax** 
    ::

      response = client.create_http_namespace(
          Name='string',
          CreatorRequestId='string',
          Description='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name that you want to assign to this namespace.

      

    
    :type CreatorRequestId: string
    :param CreatorRequestId: 

      A unique string that identifies the request and that allows failed ``CreateHttpNamespace`` requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string (for example, a date/time stamp).

      This field is autopopulated if not provided.

    
    :type Description: string
    :param Description: 

      A description for the namespace.

      

    
    :type Tags: list
    :param Tags: 

      The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.

      

    
      - *(dict) --* 

        A custom key-value pair that's associated with a resource.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key identifier, or name, of the tag.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceAlreadyExists`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceLimitExceeded`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.TooManyTagsException`

    

  .. py:method:: create_private_dns_namespace(**kwargs)

    

    Creates a private namespace based on DNS, which is visible only inside a specified Amazon VPC. The namespace defines your service naming scheme. For example, if you name your namespace ``example.com`` and name your service ``backend`` , the resulting DNS name for the service is ``backend.example.com`` . Service instances that are registered using a private DNS namespace can be discovered using either a ``DiscoverInstances`` request or using DNS. For the current quota on the number of namespaces that you can create using the same account, see `Cloud Map quotas <https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html>`__ in the *Cloud Map Developer Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePrivateDnsNamespace>`_    


    **Request Syntax** 
    ::

      response = client.create_private_dns_namespace(
          Name='string',
          CreatorRequestId='string',
          Description='string',
          Vpc='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          Properties={
              'DnsProperties': {
                  'SOA': {
                      'TTL': 123
                  }
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name that you want to assign to this namespace. When you create a private DNS namespace, Cloud Map automatically creates an Amazon Route 53 private hosted zone that has the same name as the namespace.

      

    
    :type CreatorRequestId: string
    :param CreatorRequestId: 

      A unique string that identifies the request and that allows failed ``CreatePrivateDnsNamespace`` requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string (for example, a date/timestamp).

      This field is autopopulated if not provided.

    
    :type Description: string
    :param Description: 

      A description for the namespace.

      

    
    :type Vpc: string
    :param Vpc: **[REQUIRED]** 

      The ID of the Amazon VPC that you want to associate the namespace with.

      

    
    :type Tags: list
    :param Tags: 

      The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.

      

    
      - *(dict) --* 

        A custom key-value pair that's associated with a resource.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key identifier, or name, of the tag.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.

          

        
      
  
    :type Properties: dict
    :param Properties: 

      Properties for the private DNS namespace.

      

    
      - **DnsProperties** *(dict) --* **[REQUIRED]** 

        DNS properties for the private DNS namespace.

        

      
        - **SOA** *(dict) --* **[REQUIRED]** 

          Fields for the Start of Authority (SOA) record for the hosted zone for the private DNS namespace.

          

        
          - **TTL** *(integer) --* **[REQUIRED]** 

            The time to live (TTL) for purposes of negative caching.

            

          
        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceAlreadyExists`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceLimitExceeded`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.TooManyTagsException`

    

  .. py:method:: create_public_dns_namespace(**kwargs)

    

    Creates a public namespace based on DNS, which is visible on the internet. The namespace defines your service naming scheme. For example, if you name your namespace ``example.com`` and name your service ``backend`` , the resulting DNS name for the service is ``backend.example.com`` . You can discover instances that were registered with a public DNS namespace by using either a ``DiscoverInstances`` request or using DNS. For the current quota on the number of namespaces that you can create using the same account, see `Cloud Map quotas <https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html>`__ in the *Cloud Map Developer Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreatePublicDnsNamespace>`_    


    **Request Syntax** 
    ::

      response = client.create_public_dns_namespace(
          Name='string',
          CreatorRequestId='string',
          Description='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          Properties={
              'DnsProperties': {
                  'SOA': {
                      'TTL': 123
                  }
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name that you want to assign to this namespace.

      

    
    :type CreatorRequestId: string
    :param CreatorRequestId: 

      A unique string that identifies the request and that allows failed ``CreatePublicDnsNamespace`` requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string (for example, a date/timestamp).

      This field is autopopulated if not provided.

    
    :type Description: string
    :param Description: 

      A description for the namespace.

      

    
    :type Tags: list
    :param Tags: 

      The tags to add to the namespace. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.

      

    
      - *(dict) --* 

        A custom key-value pair that's associated with a resource.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key identifier, or name, of the tag.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.

          

        
      
  
    :type Properties: dict
    :param Properties: 

      Properties for the public DNS namespace.

      

    
      - **DnsProperties** *(dict) --* **[REQUIRED]** 

        DNS properties for the public DNS namespace.

        

      
        - **SOA** *(dict) --* **[REQUIRED]** 

          Start of Authority (SOA) record for the hosted zone for the public DNS namespace.

          

        
          - **TTL** *(integer) --* **[REQUIRED]** 

            The time to live (TTL) for purposes of negative caching.

            

          
        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceAlreadyExists`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceLimitExceeded`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.TooManyTagsException`

    

  .. py:method:: create_service(**kwargs)

    

    Creates a service. This action defines the configuration for the following entities:

     

     
    * For public and private DNS namespaces, one of the following combinations of DNS records in Amazon Route 53: 

       
      * ``A``   
       
      * ``AAAA``   
       
      * ``A`` and ``AAAA``   
       
      * ``SRV``   
       
      * ``CNAME``   
       

     
     
    * Optionally, a health check 
     

     

    After you create the service, you can submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request, and Cloud Map uses the values in the configuration to create the specified entities.

     

    For the current quota on the number of instances that you can register using the same namespace and using the same service, see `Cloud Map quotas <https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html>`__ in the *Cloud Map Developer Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/CreateService>`_    


    **Request Syntax** 
    ::

      response = client.create_service(
          Name='string',
          NamespaceId='string',
          CreatorRequestId='string',
          Description='string',
          DnsConfig={
              'NamespaceId': 'string',
              'RoutingPolicy': 'MULTIVALUE'|'WEIGHTED',
              'DnsRecords': [
                  {
                      'Type': 'SRV'|'A'|'AAAA'|'CNAME',
                      'TTL': 123
                  },
              ]
          },
          HealthCheckConfig={
              'Type': 'HTTP'|'HTTPS'|'TCP',
              'ResourcePath': 'string',
              'FailureThreshold': 123
          },
          HealthCheckCustomConfig={
              'FailureThreshold': 123
          },
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          Type='HTTP'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name that you want to assign to the service.

       

      If you want Cloud Map to create an ``SRV`` record when you register an instance and you're using a system that requires a specific ``SRV`` format, such as `HAProxy <http://www.haproxy.org/>`__ , specify the following for ``Name`` :

       

       
      * Start the name with an underscore (_), such as ``_exampleservice`` . 
       
      * End the name with *._protocol* , such as ``._tcp`` . 
       

       

      When you register an instance, Cloud Map creates an ``SRV`` record and assigns a name to the record by concatenating the service name and the namespace name (for example,

       

       ``_exampleservice._tcp.example.com`` ).

       

      .. note::

         

        For services that are accessible by DNS queries, you can't create multiple services with names that differ only by case (such as EXAMPLE and example). Otherwise, these services have the same DNS name and can't be distinguished. However, if you use a namespace that's only accessible by API calls, then you can create services that with names that differ only by case.

         

      

    
    :type NamespaceId: string
    :param NamespaceId: 

      The ID of the namespace that you want to use to create the service. The namespace ID must be specified, but it can be specified either here or in the ``DnsConfig`` object.

      

    
    :type CreatorRequestId: string
    :param CreatorRequestId: 

      A unique string that identifies the request and that allows failed ``CreateService`` requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string (for example, a date/timestamp).

      This field is autopopulated if not provided.

    
    :type Description: string
    :param Description: 

      A description for the service.

      

    
    :type DnsConfig: dict
    :param DnsConfig: 

      A complex type that contains information about the Amazon Route 53 records that you want Cloud Map to create when you register an instance. 

      

    
      - **NamespaceId** *(string) --* 

        The ID of the namespace to use for DNS configuration.

        

      
      - **RoutingPolicy** *(string) --* 

        The routing policy that you want to apply to all Route 53 DNS records that Cloud Map creates when you register an instance and specify this service.

         

        .. note::

           

          If you want to use this service to register instances that create alias records, specify ``WEIGHTED`` for the routing policy.

           

         

        You can specify the following values:

          MULTIVALUE  

        If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.

         

        For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.

         

        If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.

         

        For more information about the multivalue routing policy, see `Multivalue Answer Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue>`__ in the *Route 53 Developer Guide* .

          WEIGHTED  

        Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.

         

        For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.

         

        If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.

         

        For more information about the weighted routing policy, see `Weighted Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted>`__ in the *Route 53 Developer Guide* .

          

      
      - **DnsRecords** *(list) --* **[REQUIRED]** 

        An array that contains one ``DnsRecord`` object for each Route 53 DNS record that you want Cloud Map to create when you register an instance.

        

      
        - *(dict) --* 

          A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

          

        
          - **Type** *(string) --* **[REQUIRED]** 

            The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for ``Type`` in the following combinations:

             

             
            * **``A`` **   
             
            * **``AAAA`` **   
             
            * **``A`` ** and ** ``AAAA`` **   
             
            * **``SRV`` **   
             
            * **``CNAME`` **   
             

             

            If you want Cloud Map to create a Route 53 alias record when you register an instance, specify ``A`` or ``AAAA`` for ``Type`` .

             

            You specify other settings, such as the IP address for ``A`` and ``AAAA`` records, when you register an instance. For more information, see `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ .

             

            The following values are supported:

              A  

            Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.

              AAAA  

            Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.

              CNAME  

            Route 53 returns the domain name of the resource, such as www.example.com. Note the following:

             

             
            * You specify the domain name that you want to route traffic to when you register an instance. For more information, see `Attributes <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes>`__ in the topic `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ . 
             
            * You must specify ``WEIGHTED`` for the value of ``RoutingPolicy`` . 
             
            * You can't specify both ``CNAME`` for ``Type`` and settings for ``HealthCheckConfig`` . If you do, the request will fail with an ``InvalidInput`` error. 
             

              SRV  

            Route 53 returns the value for an ``SRV`` record. The value for an ``SRV`` record uses the following values:

             

             ``priority weight port service-hostname``  

             

            Note the following about the values:

             

             
            * The values of ``priority`` and ``weight`` are both set to ``1`` and can't be changed.  
             
            * The value of ``port`` comes from the value that you specify for the ``AWS_INSTANCE_PORT`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request. 
             
            * The value of ``service-hostname`` is a concatenation of the following values: 

               
              * The value that you specify for ``InstanceId`` when you register an instance. 
               
              * The name of the service. 
               
              * The name of the namespace.  
               

             

            For example, if the value of ``InstanceId`` is ``test`` , the name of the service is ``backend`` , and the name of the namespace is ``example.com`` , the value of ``service-hostname`` is the following:

             

             ``test.backend.example.com``  

             
             

             

            If you specify settings for an ``SRV`` record, note the following:

             

             
            * If you specify values for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both in the ``RegisterInstance`` request, Cloud Map automatically creates ``A`` and/or ``AAAA`` records that have the same name as the value of ``service-hostname`` in the ``SRV`` record. You can ignore these records. 
             
            * If you're using a system that requires a specific ``SRV`` format, such as HAProxy, see the `Name <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html#cloudmap-CreateService-request-Name>`__ element in the documentation about ``CreateService`` for information about how to specify the correct name format. 
             

              

          
          - **TTL** *(integer) --* **[REQUIRED]** 

            The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.

             

            .. note::

               

              Alias records don't include a TTL because Route 53 uses the TTL for the Amazon Web Services resource that an alias record routes traffic to. If you include the ``AWS_ALIAS_DNS_NAME`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request, the ``TTL`` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.

               

            

          
        
    
    
    :type HealthCheckConfig: dict
    :param HealthCheckConfig: 

       *Public DNS and HTTP namespaces only.* A complex type that contains settings for an optional Route 53 health check. If you specify settings for a health check, Cloud Map associates the health check with all the Route 53 DNS records that you specify in ``DnsConfig`` .

       

      .. warning::

         

        If you specify a health check configuration, you can specify either ``HealthCheckCustomConfig`` or ``HealthCheckConfig`` but not both.

         

       

      For information about the charges for health checks, see `Cloud Map Pricing <http://aws.amazon.com/cloud-map/pricing/>`__ .

      

    
      - **Type** *(string) --* **[REQUIRED]** 

        The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.

         

        .. warning::

           

          You can't change the value of ``Type`` after you create a health check.

           

         

        You can create the following types of health checks:

         

         
        * **HTTP** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. 
         
        * **HTTPS** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. 

        .. warning::

           If you specify HTTPS for the value of ``Type`` , the endpoint must support TLS v1.0 or later. 

         
         
        * **TCP** : Route 53 tries to establish a TCP connection. If you specify ``TCP`` for ``Type`` , don't specify a value for ``ResourcePath`` . 
         

         

        For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

        

      
      - **ResourcePath** *(string) --* 

        The path that you want Route 53 to request when performing health checks. The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is ``/docs/route53-health-check.html`` . Route 53 automatically adds the DNS name for the service. If you don't specify a value for ``ResourcePath`` , the default value is ``/`` .

         

        If you specify ``TCP`` for ``Type`` , you must *not* specify a value for ``ResourcePath`` .

        

      
      - **FailureThreshold** *(integer) --* 

        The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

        

      
    
    :type HealthCheckCustomConfig: dict
    :param HealthCheckCustomConfig: 

      A complex type that contains information about an optional custom health check.

       

      .. warning::

         

        If you specify a health check configuration, you can specify either ``HealthCheckCustomConfig`` or ``HealthCheckConfig`` but not both.

         

       

      You can't add, update, or delete a ``HealthCheckCustomConfig`` configuration from an existing service.

      

    
      - **FailureThreshold** *(integer) --* 

        .. warning::

           

          This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an ``UpdateInstanceCustomHealthStatus`` request before changing the status of the service instance.

           

         

        The number of 30-second intervals that you want Cloud Map to wait after receiving an ``UpdateInstanceCustomHealthStatus`` request before it changes the health status of a service instance.

         

        Sending a second or subsequent ``UpdateInstanceCustomHealthStatus`` request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits ``30`` seconds after the first request to make the change.

        

      
    
    :type Tags: list
    :param Tags: 

      The tags to add to the service. Each tag consists of a key and an optional value that you define. Tags keys can be up to 128 characters in length, and tag values can be up to 256 characters in length.

      

    
      - *(dict) --* 

        A custom key-value pair that's associated with a resource.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key identifier, or name, of the tag.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.

          

        
      
  
    :type Type: string
    :param Type: 

      If present, specifies that the service instances are only discoverable using the ``DiscoverInstances`` API operation. No DNS records is registered for the service instances. The only valid value is ``HTTP`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Service': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'NamespaceId': 'string',
                'Description': 'string',
                'InstanceCount': 123,
                'DnsConfig': {
                    'NamespaceId': 'string',
                    'RoutingPolicy': 'MULTIVALUE'|'WEIGHTED',
                    'DnsRecords': [
                        {
                            'Type': 'SRV'|'A'|'AAAA'|'CNAME',
                            'TTL': 123
                        },
                    ]
                },
                'Type': 'HTTP'|'DNS_HTTP'|'DNS',
                'HealthCheckConfig': {
                    'Type': 'HTTP'|'HTTPS'|'TCP',
                    'ResourcePath': 'string',
                    'FailureThreshold': 123
                },
                'HealthCheckCustomConfig': {
                    'FailureThreshold': 123
                },
                'CreateDate': datetime(2015, 1, 1),
                'CreatorRequestId': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Service** *(dict) --* 

          A complex type that contains information about the new service.

          
          

          - **Id** *(string) --* 

            The ID that Cloud Map assigned to the service when you created it.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.

            
          

          - **Name** *(string) --* 

            The name of the service.

            
          

          - **NamespaceId** *(string) --* 

            The ID of the namespace that was used to create the service.

            
          

          - **Description** *(string) --* 

            The description of the service.

            
          

          - **InstanceCount** *(integer) --* 

            The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.

            
          

          - **DnsConfig** *(dict) --* 

            A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

            
            

            - **NamespaceId** *(string) --* 

              The ID of the namespace to use for DNS configuration.

              
            

            - **RoutingPolicy** *(string) --* 

              The routing policy that you want to apply to all Route 53 DNS records that Cloud Map creates when you register an instance and specify this service.

               

              .. note::

                 

                If you want to use this service to register instances that create alias records, specify ``WEIGHTED`` for the routing policy.

                 

               

              You can specify the following values:

                MULTIVALUE  

              If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.

               

              For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.

               

              If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.

               

              For more information about the multivalue routing policy, see `Multivalue Answer Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue>`__ in the *Route 53 Developer Guide* .

                WEIGHTED  

              Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.

               

              For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.

               

              If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.

               

              For more information about the weighted routing policy, see `Weighted Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted>`__ in the *Route 53 Developer Guide* .

                
            

            - **DnsRecords** *(list) --* 

              An array that contains one ``DnsRecord`` object for each Route 53 DNS record that you want Cloud Map to create when you register an instance.

              
              

              - *(dict) --* 

                A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

                
                

                - **Type** *(string) --* 

                  The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for ``Type`` in the following combinations:

                   

                   
                  * **``A`` **   
                   
                  * **``AAAA`` **   
                   
                  * **``A`` ** and ** ``AAAA`` **   
                   
                  * **``SRV`` **   
                   
                  * **``CNAME`` **   
                   

                   

                  If you want Cloud Map to create a Route 53 alias record when you register an instance, specify ``A`` or ``AAAA`` for ``Type`` .

                   

                  You specify other settings, such as the IP address for ``A`` and ``AAAA`` records, when you register an instance. For more information, see `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ .

                   

                  The following values are supported:

                    A  

                  Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.

                    AAAA  

                  Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.

                    CNAME  

                  Route 53 returns the domain name of the resource, such as www.example.com. Note the following:

                   

                   
                  * You specify the domain name that you want to route traffic to when you register an instance. For more information, see `Attributes <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes>`__ in the topic `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ . 
                   
                  * You must specify ``WEIGHTED`` for the value of ``RoutingPolicy`` . 
                   
                  * You can't specify both ``CNAME`` for ``Type`` and settings for ``HealthCheckConfig`` . If you do, the request will fail with an ``InvalidInput`` error. 
                   

                    SRV  

                  Route 53 returns the value for an ``SRV`` record. The value for an ``SRV`` record uses the following values:

                   

                   ``priority weight port service-hostname``  

                   

                  Note the following about the values:

                   

                   
                  * The values of ``priority`` and ``weight`` are both set to ``1`` and can't be changed.  
                   
                  * The value of ``port`` comes from the value that you specify for the ``AWS_INSTANCE_PORT`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request. 
                   
                  * The value of ``service-hostname`` is a concatenation of the following values: 

                     
                    * The value that you specify for ``InstanceId`` when you register an instance. 
                     
                    * The name of the service. 
                     
                    * The name of the namespace.  
                     

                   

                  For example, if the value of ``InstanceId`` is ``test`` , the name of the service is ``backend`` , and the name of the namespace is ``example.com`` , the value of ``service-hostname`` is the following:

                   

                   ``test.backend.example.com``  

                   
                   

                   

                  If you specify settings for an ``SRV`` record, note the following:

                   

                   
                  * If you specify values for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both in the ``RegisterInstance`` request, Cloud Map automatically creates ``A`` and/or ``AAAA`` records that have the same name as the value of ``service-hostname`` in the ``SRV`` record. You can ignore these records. 
                   
                  * If you're using a system that requires a specific ``SRV`` format, such as HAProxy, see the `Name <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html#cloudmap-CreateService-request-Name>`__ element in the documentation about ``CreateService`` for information about how to specify the correct name format. 
                   

                    
                

                - **TTL** *(integer) --* 

                  The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.

                   

                  .. note::

                     

                    Alias records don't include a TTL because Route 53 uses the TTL for the Amazon Web Services resource that an alias record routes traffic to. If you include the ``AWS_ALIAS_DNS_NAME`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request, the ``TTL`` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.

                     

                  
            
          
        
          

          - **Type** *(string) --* 

            Describes the systems that can be used to discover the service instances.

              DNS_HTTP  

            The service instances can be discovered using either DNS queries or the ``DiscoverInstances`` API operation.

              HTTP  

            The service instances can only be discovered using the ``DiscoverInstances`` API operation.

              DNS  

            Reserved.

              
          

          - **HealthCheckConfig** *(dict) --* 

             *Public DNS and HTTP namespaces only.* A complex type that contains settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in ``DnsConfig`` .

             

            For information about the charges for health checks, see `Amazon Route 53 Pricing <http://aws.amazon.com/route53/pricing/>`__ .

            
            

            - **Type** *(string) --* 

              The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.

               

              .. warning::

                 

                You can't change the value of ``Type`` after you create a health check.

                 

               

              You can create the following types of health checks:

               

               
              * **HTTP** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. 
               
              * **HTTPS** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. 

              .. warning::

                 If you specify HTTPS for the value of ``Type`` , the endpoint must support TLS v1.0 or later. 

               
               
              * **TCP** : Route 53 tries to establish a TCP connection. If you specify ``TCP`` for ``Type`` , don't specify a value for ``ResourcePath`` . 
               

               

              For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

              
            

            - **ResourcePath** *(string) --* 

              The path that you want Route 53 to request when performing health checks. The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is ``/docs/route53-health-check.html`` . Route 53 automatically adds the DNS name for the service. If you don't specify a value for ``ResourcePath`` , the default value is ``/`` .

               

              If you specify ``TCP`` for ``Type`` , you must *not* specify a value for ``ResourcePath`` .

              
            

            - **FailureThreshold** *(integer) --* 

              The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

              
        
          

          - **HealthCheckCustomConfig** *(dict) --* 

            A complex type that contains information about an optional custom health check.

             

            .. warning::

               

              If you specify a health check configuration, you can specify either ``HealthCheckCustomConfig`` or ``HealthCheckConfig`` but not both.

               

            
            

            - **FailureThreshold** *(integer) --* 

              .. warning::

                 

                This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an ``UpdateInstanceCustomHealthStatus`` request before changing the status of the service instance.

                 

               

              The number of 30-second intervals that you want Cloud Map to wait after receiving an ``UpdateInstanceCustomHealthStatus`` request before it changes the health status of a service instance.

               

              Sending a second or subsequent ``UpdateInstanceCustomHealthStatus`` request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits ``30`` seconds after the first request to make the change.

              
        
          

          - **CreateDate** *(datetime) --* 

            The date and time that the service was created, in Unix format and Coordinated Universal Time (UTC). The value of ``CreateDate`` is accurate to milliseconds. For example, the value ``1516925490.087`` represents Friday, January 26, 2018 12:11:30.087 AM.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string (for example, a date/timestamp).

            
      
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceLimitExceeded`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceAlreadyExists`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.TooManyTagsException`

    

  .. py:method:: delete_namespace(**kwargs)

    

    Deletes a namespace from the current account. If the namespace still contains one or more services, the request fails.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteNamespace>`_    


    **Request Syntax** 
    ::

      response = client.delete_namespace(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the namespace that you want to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceInUse`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    

  .. py:method:: delete_service(**kwargs)

    

    Deletes a specified service. If the service still contains one or more registered instances, the request fails.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeleteService>`_    


    **Request Syntax** 
    ::

      response = client.delete_service(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the service that you want to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceInUse`

    

  .. py:method:: deregister_instance(**kwargs)

    

    Deletes the Amazon Route 53 DNS records and health check, if any, that Cloud Map created for the specified instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DeregisterInstance>`_    


    **Request Syntax** 
    ::

      response = client.deregister_instance(
          ServiceId='string',
          InstanceId='string'
      )
    :type ServiceId: string
    :param ServiceId: **[REQUIRED]** 

      The ID of the service that the instance is associated with.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The value that you specified for ``Id`` in the `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InstanceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceInUse`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    

  .. py:method:: discover_instances(**kwargs)

    

    Discovers registered instances for a specified namespace and service. You can use ``DiscoverInstances`` to discover instances for any type of namespace. For public and private DNS namespaces, you can also use DNS queries to discover instances.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/DiscoverInstances>`_    


    **Request Syntax** 
    ::

      response = client.discover_instances(
          NamespaceName='string',
          ServiceName='string',
          MaxResults=123,
          QueryParameters={
              'string': 'string'
          },
          OptionalParameters={
              'string': 'string'
          },
          HealthStatus='HEALTHY'|'UNHEALTHY'|'ALL'|'HEALTHY_OR_ELSE_ALL'
      )
    :type NamespaceName: string
    :param NamespaceName: **[REQUIRED]** 

      The ``HttpName`` name of the namespace. It's found in the ``HttpProperties`` member of the ``Properties`` member of the namespace.

      

    
    :type ServiceName: string
    :param ServiceName: **[REQUIRED]** 

      The name of the service that you specified when you registered the instance.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of instances that you want Cloud Map to return in the response to a ``DiscoverInstances`` request. If you don't specify a value for ``MaxResults`` , Cloud Map returns up to 100 instances.

      

    
    :type QueryParameters: dict
    :param QueryParameters: 

      Filters to scope the results based on custom attributes for the instance (for example, ``{version=v1, az=1a}`` ). Only instances that match all the specified key-value pairs are returned.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type OptionalParameters: dict
    :param OptionalParameters: 

      Opportunistic filters to scope the results based on custom attributes. If there are instances that match both the filters specified in both the ``QueryParameters`` parameter and this parameter, all of these instances are returned. Otherwise, the filters are ignored, and only instances that match the filters that are specified in the ``QueryParameters`` parameter are returned.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type HealthStatus: string
    :param HealthStatus: 

      The health status of the instances that you want to discover. This parameter is ignored for services that don't have a health check configured, and all instances are returned.

        HEALTHY  

      Returns healthy instances.

        UNHEALTHY  

      Returns unhealthy instances.

        ALL  

      Returns all instances.

        HEALTHY_OR_ELSE_ALL  

      Returns healthy instances, unless none are reporting a healthy state. In that case, return all instances. This is also called failing open.

        

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Instances': [
                {
                    'InstanceId': 'string',
                    'NamespaceName': 'string',
                    'ServiceName': 'string',
                    'HealthStatus': 'HEALTHY'|'UNHEALTHY'|'UNKNOWN',
                    'Attributes': {
                        'string': 'string'
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Instances** *(list) --* 

          A complex type that contains one ``HttpInstanceSummary`` for each registered instance.

          
          

          - *(dict) --* 

            In a response to a `DiscoverInstances <https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html>`__ request, ``HttpInstanceSummary`` contains information about one instance that matches the values that you specified in the request.

            
            

            - **InstanceId** *(string) --* 

              The ID of an instance that matches the values that you specified in the request.

              
            

            - **NamespaceName** *(string) --* 

                  

               

              The ``HttpName`` name of the namespace. It's found in the ``HttpProperties`` member of the ``Properties`` member of the namespace.

              
            

            - **ServiceName** *(string) --* 

              The name of the service that you specified when you registered the instance.

              
            

            - **HealthStatus** *(string) --* 

              If you configured health checking in the service, the current health status of the service instance.

              
            

            - **Attributes** *(dict) --* 

              If you included any attributes when you registered the instance, the values of those attributes.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.RequestLimitExceeded`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_instance(**kwargs)

    

    Gets information about a specified instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstance>`_    


    **Request Syntax** 
    ::

      response = client.get_instance(
          ServiceId='string',
          InstanceId='string'
      )
    :type ServiceId: string
    :param ServiceId: **[REQUIRED]** 

      The ID of the service that the instance is associated with.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The ID of the instance that you want to get information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Instance': {
                'Id': 'string',
                'CreatorRequestId': 'string',
                'Attributes': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Instance** *(dict) --* 

          A complex type that contains information about a specified instance.

          
          

          - **Id** *(string) --* 

            An identifier that you want to associate with the instance. Note the following:

             

             
            * If the service that's specified by ``ServiceId`` includes settings for an ``SRV`` record, the value of ``InstanceId`` is automatically included as part of the value for the ``SRV`` record. For more information, see `DnsRecord > Type <https://docs.aws.amazon.com/cloud-map/latest/api/API_DnsRecord.html#cloudmap-Type-DnsRecord-Type>`__ . 
             
            * You can use this value to update an existing instance. 
             
            * To register a new instance, you must specify a value that's unique among instances that you register by using the same service.  
             
            * If you specify an existing ``InstanceId`` and ``ServiceId`` , Cloud Map updates the existing DNS records. If there's also an existing health check, Cloud Map deletes the old health check and creates a new one.  

            .. note::

               The health check isn't deleted immediately, so it will still appear for a while if you submit a ``ListHealthChecks`` request, for example. 

             
             

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request and that allows failed ``RegisterInstance`` requests to be retried without the risk of executing the operation twice. You must use a unique ``CreatorRequestId`` string every time you submit a ``RegisterInstance`` request if you're registering additional instances for the same namespace and service. ``CreatorRequestId`` can be any unique string (for example, a date/time stamp).

            
          

          - **Attributes** *(dict) --* 

            A string map that contains the following information for the service that you specify in ``ServiceId`` :

             

             
            * The attributes that apply to the records that are defined in the service.  
             
            * For each attribute, the applicable value. 
             

             

            Supported attribute keys include the following:

              AWS_ALIAS_DNS_NAME  

            If you want Cloud Map to create a Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that's associated with the load balancer. For information about how to get the DNS name, see `AliasTarget->DNSName <https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-DNSName>`__ in the *Route 53 API Reference* .

             

            Note the following:

             

             
            * The configuration for the service that's specified by ``ServiceId`` must include settings for an ``A`` record, an ``AAAA`` record, or both. 
             
            * In the service that's specified by ``ServiceId`` , the value of ``RoutingPolicy`` must be ``WEIGHTED`` . 
             
            * If the service that's specified by ``ServiceId`` includes ``HealthCheckConfig`` settings, Cloud Map creates the health check, but it won't associate the health check with the alias record. 
             
            * Auto naming currently doesn't support creating alias records that route traffic to Amazon Web Services resources other than ELB load balancers. 
             
            * If you specify a value for ``AWS_ALIAS_DNS_NAME`` , don't specify values for any of the ``AWS_INSTANCE`` attributes. 
             

              AWS_EC2_INSTANCE_ID  

             *HTTP namespaces only.* The Amazon EC2 instance ID for the instance. The ``AWS_INSTANCE_IPV4`` attribute contains the primary private IPv4 address.

              AWS_INIT_HEALTH_STATUS  

            If the service configuration includes ``HealthCheckCustomConfig`` , you can optionally use ``AWS_INIT_HEALTH_STATUS`` to specify the initial status of the custom health check, ``HEALTHY`` or ``UNHEALTHY`` . If you don't specify a value for ``AWS_INIT_HEALTH_STATUS`` , the initial status is ``HEALTHY`` .

              AWS_INSTANCE_CNAME  

            If the service configuration includes a ``CNAME`` record, the domain name that you want Route 53 to return in response to DNS queries (for example, ``example.com`` ).

             

            This value is required if the service specified by ``ServiceId`` includes settings for an ``CNAME`` record.

              AWS_INSTANCE_IPV4  

            If the service configuration includes an ``A`` record, the IPv4 address that you want Route 53 to return in response to DNS queries (for example, ``192.0.2.44`` ).

             

            This value is required if the service specified by ``ServiceId`` includes settings for an ``A`` record. If the service includes settings for an ``SRV`` record, you must specify a value for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both.

              AWS_INSTANCE_IPV6  

            If the service configuration includes an ``AAAA`` record, the IPv6 address that you want Route 53 to return in response to DNS queries (for example, ``2001:0db8:85a3:0000:0000:abcd:0001:2345`` ).

             

            This value is required if the service specified by ``ServiceId`` includes settings for an ``AAAA`` record. If the service includes settings for an ``SRV`` record, you must specify a value for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both.

              AWS_INSTANCE_PORT  

            If the service includes an ``SRV`` record, the value that you want Route 53 to return for the port.

             

            If the service includes ``HealthCheckConfig`` , the port on the endpoint that you want Route 53 to send requests to. 

             

            This value is required if you specified settings for an ``SRV`` record or a Route 53 health check when you created the service.

              
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InstanceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    

  .. py:method:: get_instances_health_status(**kwargs)

    

    Gets the current health status (``Healthy`` , ``Unhealthy`` , or ``Unknown`` ) of one or more instances that are associated with a specified service.

     

    .. note::

       

      There's a brief delay between when you register an instance and when the health status for the instance is available. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetInstancesHealthStatus>`_    


    **Request Syntax** 
    ::

      response = client.get_instances_health_status(
          ServiceId='string',
          Instances=[
              'string',
          ],
          MaxResults=123,
          NextToken='string'
      )
    :type ServiceId: string
    :param ServiceId: **[REQUIRED]** 

      The ID of the service that the instance is associated with.

      

    
    :type Instances: list
    :param Instances: 

      An array that contains the IDs of all the instances that you want to get the health status for.

       

      If you omit ``Instances`` , Cloud Map returns the health status for all the instances that are associated with the specified service.

       

      .. note::

         

        To get the IDs for the instances that you've registered by using a specified service, submit a `ListInstances <https://docs.aws.amazon.com/cloud-map/latest/api/API_ListInstances.html>`__ request.

         

      

    
      - *(string) --* 

      
  
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of instances that you want Cloud Map to return in the response to a ``GetInstancesHealthStatus`` request. If you don't specify a value for ``MaxResults`` , Cloud Map returns up to 100 instances.

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``GetInstancesHealthStatus`` request, omit this value.

       

      If more than ``MaxResults`` instances match the specified criteria, you can submit another ``GetInstancesHealthStatus`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Status': {
                'string': 'HEALTHY'|'UNHEALTHY'|'UNKNOWN'
            },
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Status** *(dict) --* 

          A complex type that contains the IDs and the health status of the instances that you specified in the ``GetInstancesHealthStatus`` request.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **NextToken** *(string) --* 

          If more than ``MaxResults`` instances match the specified criteria, you can submit another ``GetInstancesHealthStatus`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InstanceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    

  .. py:method:: get_namespace(**kwargs)

    

    Gets information about a namespace.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetNamespace>`_    


    **Request Syntax** 
    ::

      response = client.get_namespace(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the namespace that you want to get information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Namespace': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'Type': 'DNS_PUBLIC'|'DNS_PRIVATE'|'HTTP',
                'Description': 'string',
                'ServiceCount': 123,
                'Properties': {
                    'DnsProperties': {
                        'HostedZoneId': 'string',
                        'SOA': {
                            'TTL': 123
                        }
                    },
                    'HttpProperties': {
                        'HttpName': 'string'
                    }
                },
                'CreateDate': datetime(2015, 1, 1),
                'CreatorRequestId': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Namespace** *(dict) --* 

          A complex type that contains information about the specified namespace.

          
          

          - **Id** *(string) --* 

            The ID of a namespace.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) that Cloud Map assigns to the namespace when you create it.

            
          

          - **Name** *(string) --* 

            The name of the namespace, such as ``example.com`` .

            
          

          - **Type** *(string) --* 

            The type of the namespace. The methods for discovering instances depends on the value that you specify:

              HTTP  

            Instances can be discovered only programmatically, using the Cloud Map ``DiscoverInstances`` API.

              DNS_PUBLIC  

            Instances can be discovered using public DNS queries and using the ``DiscoverInstances`` API.

              DNS_PRIVATE  

            Instances can be discovered using DNS queries in VPCs and using the ``DiscoverInstances`` API.

              
          

          - **Description** *(string) --* 

            The description that you specify for the namespace when you create it.

            
          

          - **ServiceCount** *(integer) --* 

            The number of services that are associated with the namespace.

            
          

          - **Properties** *(dict) --* 

            A complex type that contains information that's specific to the type of the namespace.

            
            

            - **DnsProperties** *(dict) --* 

              A complex type that contains the ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.

              
              

              - **HostedZoneId** *(string) --* 

                The ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.

                
              

              - **SOA** *(dict) --* 

                Start of Authority (SOA) record for the hosted zone.

                
                

                - **TTL** *(integer) --* 

                  The time to live (TTL) for purposes of negative caching.

                  
            
          
            

            - **HttpProperties** *(dict) --* 

              A complex type that contains the name of an HTTP namespace.

              
              

              - **HttpName** *(string) --* 

                The name of an HTTP namespace.

                
          
        
          

          - **CreateDate** *(datetime) --* 

            The date that the namespace was created, in Unix date/time format and Coordinated Universal Time (UTC). The value of ``CreateDate`` is accurate to milliseconds. For example, the value ``1516925490.087`` represents Friday, January 26, 2018 12:11:30.087 AM.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request and that allows failed requests to be retried without the risk of running an operation twice. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceNotFound`

    

  .. py:method:: get_operation(**kwargs)

    

    Gets information about any operation that returns an operation ID in the response, such as a ``CreateService`` request.

     

    .. note::

       

      To get a list of operations that match specified criteria, see `ListOperations <https://docs.aws.amazon.com/cloud-map/latest/api/API_ListOperations.html>`__ .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetOperation>`_    


    **Request Syntax** 
    ::

      response = client.get_operation(
          OperationId='string'
      )
    :type OperationId: string
    :param OperationId: **[REQUIRED]** 

      The ID of the operation that you want to get more information about.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Operation': {
                'Id': 'string',
                'Type': 'CREATE_NAMESPACE'|'DELETE_NAMESPACE'|'UPDATE_NAMESPACE'|'UPDATE_SERVICE'|'REGISTER_INSTANCE'|'DEREGISTER_INSTANCE',
                'Status': 'SUBMITTED'|'PENDING'|'SUCCESS'|'FAIL',
                'ErrorMessage': 'string',
                'ErrorCode': 'string',
                'CreateDate': datetime(2015, 1, 1),
                'UpdateDate': datetime(2015, 1, 1),
                'Targets': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Operation** *(dict) --* 

          A complex type that contains information about the operation.

          
          

          - **Id** *(string) --* 

            The ID of the operation that you want to get information about.

            
          

          - **Type** *(string) --* 

            The name of the operation that's associated with the specified ID.

            
          

          - **Status** *(string) --* 

            The status of the operation. Values include the following:

              SUBMITTED  

            This is the initial state that occurs immediately after you submit a request.

              PENDING  

            Cloud Map is performing the operation.

              SUCCESS  

            The operation succeeded.

              FAIL  

            The operation failed. For the failure reason, see ``ErrorMessage`` .

              
          

          - **ErrorMessage** *(string) --* 

            If the value of ``Status`` is ``FAIL`` , the reason that the operation failed.

            
          

          - **ErrorCode** *(string) --* 

            The code associated with ``ErrorMessage`` . Values for ``ErrorCode`` include the following:

             

             
            * ``ACCESS_DENIED``   
             
            * ``CANNOT_CREATE_HOSTED_ZONE``   
             
            * ``EXPIRED_TOKEN``   
             
            * ``HOSTED_ZONE_NOT_FOUND``   
             
            * ``INTERNAL_FAILURE``   
             
            * ``INVALID_CHANGE_BATCH``   
             
            * ``THROTTLED_REQUEST``   
             

            
          

          - **CreateDate** *(datetime) --* 

            The date and time that the request was submitted, in Unix date/time format and Coordinated Universal Time (UTC). The value of ``CreateDate`` is accurate to milliseconds. For example, the value ``1516925490.087`` represents Friday, January 26, 2018 12:11:30.087 AM.

            
          

          - **UpdateDate** *(datetime) --* 

            The date and time that the value of ``Status`` changed to the current value, in Unix date/time format and Coordinated Universal Time (UTC). The value of ``UpdateDate`` is accurate to milliseconds. For example, the value ``1516925490.087`` represents Friday, January 26, 2018 12:11:30.087 AM.

            
          

          - **Targets** *(dict) --* 

            The name of the target entity that's associated with the operation:

              NAMESPACE  

            The namespace ID is returned in the ``ResourceId`` property.

              SERVICE  

            The service ID is returned in the ``ResourceId`` property.

              INSTANCE  

            The instance ID is returned in the ``ResourceId`` property.

              
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.OperationNotFound`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_service(**kwargs)

    

    Gets the settings for a specified service.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/GetService>`_    


    **Request Syntax** 
    ::

      response = client.get_service(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the service that you want to get settings for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Service': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'NamespaceId': 'string',
                'Description': 'string',
                'InstanceCount': 123,
                'DnsConfig': {
                    'NamespaceId': 'string',
                    'RoutingPolicy': 'MULTIVALUE'|'WEIGHTED',
                    'DnsRecords': [
                        {
                            'Type': 'SRV'|'A'|'AAAA'|'CNAME',
                            'TTL': 123
                        },
                    ]
                },
                'Type': 'HTTP'|'DNS_HTTP'|'DNS',
                'HealthCheckConfig': {
                    'Type': 'HTTP'|'HTTPS'|'TCP',
                    'ResourcePath': 'string',
                    'FailureThreshold': 123
                },
                'HealthCheckCustomConfig': {
                    'FailureThreshold': 123
                },
                'CreateDate': datetime(2015, 1, 1),
                'CreatorRequestId': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Service** *(dict) --* 

          A complex type that contains information about the service.

          
          

          - **Id** *(string) --* 

            The ID that Cloud Map assigned to the service when you created it.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.

            
          

          - **Name** *(string) --* 

            The name of the service.

            
          

          - **NamespaceId** *(string) --* 

            The ID of the namespace that was used to create the service.

            
          

          - **Description** *(string) --* 

            The description of the service.

            
          

          - **InstanceCount** *(integer) --* 

            The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.

            
          

          - **DnsConfig** *(dict) --* 

            A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

            
            

            - **NamespaceId** *(string) --* 

              The ID of the namespace to use for DNS configuration.

              
            

            - **RoutingPolicy** *(string) --* 

              The routing policy that you want to apply to all Route 53 DNS records that Cloud Map creates when you register an instance and specify this service.

               

              .. note::

                 

                If you want to use this service to register instances that create alias records, specify ``WEIGHTED`` for the routing policy.

                 

               

              You can specify the following values:

                MULTIVALUE  

              If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.

               

              For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.

               

              If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.

               

              For more information about the multivalue routing policy, see `Multivalue Answer Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue>`__ in the *Route 53 Developer Guide* .

                WEIGHTED  

              Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.

               

              For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.

               

              If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.

               

              For more information about the weighted routing policy, see `Weighted Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted>`__ in the *Route 53 Developer Guide* .

                
            

            - **DnsRecords** *(list) --* 

              An array that contains one ``DnsRecord`` object for each Route 53 DNS record that you want Cloud Map to create when you register an instance.

              
              

              - *(dict) --* 

                A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

                
                

                - **Type** *(string) --* 

                  The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for ``Type`` in the following combinations:

                   

                   
                  * **``A`` **   
                   
                  * **``AAAA`` **   
                   
                  * **``A`` ** and ** ``AAAA`` **   
                   
                  * **``SRV`` **   
                   
                  * **``CNAME`` **   
                   

                   

                  If you want Cloud Map to create a Route 53 alias record when you register an instance, specify ``A`` or ``AAAA`` for ``Type`` .

                   

                  You specify other settings, such as the IP address for ``A`` and ``AAAA`` records, when you register an instance. For more information, see `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ .

                   

                  The following values are supported:

                    A  

                  Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.

                    AAAA  

                  Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.

                    CNAME  

                  Route 53 returns the domain name of the resource, such as www.example.com. Note the following:

                   

                   
                  * You specify the domain name that you want to route traffic to when you register an instance. For more information, see `Attributes <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes>`__ in the topic `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ . 
                   
                  * You must specify ``WEIGHTED`` for the value of ``RoutingPolicy`` . 
                   
                  * You can't specify both ``CNAME`` for ``Type`` and settings for ``HealthCheckConfig`` . If you do, the request will fail with an ``InvalidInput`` error. 
                   

                    SRV  

                  Route 53 returns the value for an ``SRV`` record. The value for an ``SRV`` record uses the following values:

                   

                   ``priority weight port service-hostname``  

                   

                  Note the following about the values:

                   

                   
                  * The values of ``priority`` and ``weight`` are both set to ``1`` and can't be changed.  
                   
                  * The value of ``port`` comes from the value that you specify for the ``AWS_INSTANCE_PORT`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request. 
                   
                  * The value of ``service-hostname`` is a concatenation of the following values: 

                     
                    * The value that you specify for ``InstanceId`` when you register an instance. 
                     
                    * The name of the service. 
                     
                    * The name of the namespace.  
                     

                   

                  For example, if the value of ``InstanceId`` is ``test`` , the name of the service is ``backend`` , and the name of the namespace is ``example.com`` , the value of ``service-hostname`` is the following:

                   

                   ``test.backend.example.com``  

                   
                   

                   

                  If you specify settings for an ``SRV`` record, note the following:

                   

                   
                  * If you specify values for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both in the ``RegisterInstance`` request, Cloud Map automatically creates ``A`` and/or ``AAAA`` records that have the same name as the value of ``service-hostname`` in the ``SRV`` record. You can ignore these records. 
                   
                  * If you're using a system that requires a specific ``SRV`` format, such as HAProxy, see the `Name <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html#cloudmap-CreateService-request-Name>`__ element in the documentation about ``CreateService`` for information about how to specify the correct name format. 
                   

                    
                

                - **TTL** *(integer) --* 

                  The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.

                   

                  .. note::

                     

                    Alias records don't include a TTL because Route 53 uses the TTL for the Amazon Web Services resource that an alias record routes traffic to. If you include the ``AWS_ALIAS_DNS_NAME`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request, the ``TTL`` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.

                     

                  
            
          
        
          

          - **Type** *(string) --* 

            Describes the systems that can be used to discover the service instances.

              DNS_HTTP  

            The service instances can be discovered using either DNS queries or the ``DiscoverInstances`` API operation.

              HTTP  

            The service instances can only be discovered using the ``DiscoverInstances`` API operation.

              DNS  

            Reserved.

              
          

          - **HealthCheckConfig** *(dict) --* 

             *Public DNS and HTTP namespaces only.* A complex type that contains settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in ``DnsConfig`` .

             

            For information about the charges for health checks, see `Amazon Route 53 Pricing <http://aws.amazon.com/route53/pricing/>`__ .

            
            

            - **Type** *(string) --* 

              The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.

               

              .. warning::

                 

                You can't change the value of ``Type`` after you create a health check.

                 

               

              You can create the following types of health checks:

               

               
              * **HTTP** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. 
               
              * **HTTPS** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. 

              .. warning::

                 If you specify HTTPS for the value of ``Type`` , the endpoint must support TLS v1.0 or later. 

               
               
              * **TCP** : Route 53 tries to establish a TCP connection. If you specify ``TCP`` for ``Type`` , don't specify a value for ``ResourcePath`` . 
               

               

              For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

              
            

            - **ResourcePath** *(string) --* 

              The path that you want Route 53 to request when performing health checks. The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is ``/docs/route53-health-check.html`` . Route 53 automatically adds the DNS name for the service. If you don't specify a value for ``ResourcePath`` , the default value is ``/`` .

               

              If you specify ``TCP`` for ``Type`` , you must *not* specify a value for ``ResourcePath`` .

              
            

            - **FailureThreshold** *(integer) --* 

              The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

              
        
          

          - **HealthCheckCustomConfig** *(dict) --* 

            A complex type that contains information about an optional custom health check.

             

            .. warning::

               

              If you specify a health check configuration, you can specify either ``HealthCheckCustomConfig`` or ``HealthCheckConfig`` but not both.

               

            
            

            - **FailureThreshold** *(integer) --* 

              .. warning::

                 

                This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an ``UpdateInstanceCustomHealthStatus`` request before changing the status of the service instance.

                 

               

              The number of 30-second intervals that you want Cloud Map to wait after receiving an ``UpdateInstanceCustomHealthStatus`` request before it changes the health status of a service instance.

               

              Sending a second or subsequent ``UpdateInstanceCustomHealthStatus`` request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits ``30`` seconds after the first request to make the change.

              
        
          

          - **CreateDate** *(datetime) --* 

            The date and time that the service was created, in Unix format and Coordinated Universal Time (UTC). The value of ``CreateDate`` is accurate to milliseconds. For example, the value ``1516925490.087`` represents Friday, January 26, 2018 12:11:30.087 AM.

            
          

          - **CreatorRequestId** *(string) --* 

            A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. ``CreatorRequestId`` can be any unique string (for example, a date/timestamp).

            
      
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_instances(**kwargs)

    

    Lists summary information about the instances that you registered by using a specified service.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListInstances>`_    


    **Request Syntax** 
    ::

      response = client.list_instances(
          ServiceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type ServiceId: string
    :param ServiceId: **[REQUIRED]** 

      The ID of the service that you want to list instances for.

      

    
    :type NextToken: string
    :param NextToken: 

      For the first ``ListInstances`` request, omit this value.

       

      If more than ``MaxResults`` instances match the specified criteria, you can submit another ``ListInstances`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of instances that you want Cloud Map to return in the response to a ``ListInstances`` request. If you don't specify a value for ``MaxResults`` , Cloud Map returns up to 100 instances.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Instances': [
                {
                    'Id': 'string',
                    'Attributes': {
                        'string': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Instances** *(list) --* 

          Summary information about the instances that are associated with the specified service.

          
          

          - *(dict) --* 

            A complex type that contains information about the instances that you registered by using a specified service.

            
            

            - **Id** *(string) --* 

              The ID for an instance that you created by using a specified service.

              
            

            - **Attributes** *(dict) --* 

              A string map that contains the following information:

               

               
              * The attributes that are associated with the instance.  
               
              * For each attribute, the applicable value. 
               

               

              Supported attribute keys include the following:

                AWS_ALIAS_DNS_NAME  

              For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer. 

                AWS_EC2_INSTANCE_ID (HTTP namespaces only)  

              The Amazon EC2 instance ID for the instance. When the ``AWS_EC2_INSTANCE_ID`` attribute is specified, then the ``AWS_INSTANCE_IPV4`` attribute contains the primary private IPv4 address.

                AWS_INIT_HEALTH_STATUS  

              If the service configuration includes ``HealthCheckCustomConfig`` , you can optionally use ``AWS_INIT_HEALTH_STATUS`` to specify the initial status of the custom health check, ``HEALTHY`` or ``UNHEALTHY`` . If you don't specify a value for ``AWS_INIT_HEALTH_STATUS`` , the initial status is ``HEALTHY`` .

                AWS_INSTANCE_CNAME  

              For a ``CNAME`` record, the domain name that Route 53 returns in response to DNS queries (for example, ``example.com`` ).

                AWS_INSTANCE_IPV4  

              For an ``A`` record, the IPv4 address that Route 53 returns in response to DNS queries (for example, ``192.0.2.44`` ).

                AWS_INSTANCE_IPV6  

              For an ``AAAA`` record, the IPv6 address that Route 53 returns in response to DNS queries (for example, ``2001:0db8:85a3:0000:0000:abcd:0001:2345`` ).

                AWS_INSTANCE_PORT  

              For an ``SRV`` record, the value that Route 53 returns for the port. In addition, if the service includes ``HealthCheckConfig`` , the port on the endpoint that Route 53 sends requests to.

                
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **NextToken** *(string) --* 

          If more than ``MaxResults`` instances match the specified criteria, you can submit another ``ListInstances`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: list_namespaces(**kwargs)

    

    Lists summary information about the namespaces that were created by the current account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListNamespaces>`_    


    **Request Syntax** 
    ::

      response = client.list_namespaces(
          NextToken='string',
          MaxResults=123,
          Filters=[
              {
                  'Name': 'TYPE',
                  'Values': [
                      'string',
                  ],
                  'Condition': 'EQ'|'IN'|'BETWEEN'
              },
          ]
      )
    :type NextToken: string
    :param NextToken: 

      For the first ``ListNamespaces`` request, omit this value.

       

      If the response contains ``NextToken`` , submit another ``ListNamespaces`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

       

      .. note::

         

        Cloud Map gets ``MaxResults`` namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first ``MaxResults`` namespaces matched the specified criteria but that subsequent groups of ``MaxResults`` namespaces do contain namespaces that match the criteria.

         

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of namespaces that you want Cloud Map to return in the response to a ``ListNamespaces`` request. If you don't specify a value for ``MaxResults`` , Cloud Map returns up to 100 namespaces.

      

    
    :type Filters: list
    :param Filters: 

      A complex type that contains specifications for the namespaces that you want to list.

       

      If you specify more than one filter, a namespace must match all filters to be returned by ``ListNamespaces`` .

      

    
      - *(dict) --* 

        A complex type that identifies the namespaces that you want to list. You can choose to list public or private namespaces.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Specify ``TYPE`` .

          

        
        - **Values** *(list) --* **[REQUIRED]** 

          If you specify ``EQ`` for ``Condition`` , specify either ``DNS_PUBLIC`` or ``DNS_PRIVATE`` .

           

          If you specify ``IN`` for ``Condition`` , you can specify ``DNS_PUBLIC`` , ``DNS_PRIVATE`` , or both.

          

        
          - *(string) --* 

          
      
        - **Condition** *(string) --* 

          The operator that you want to use to determine whether ``ListNamespaces`` returns a namespace. Valid values for ``condition`` include:

            EQ  

          When you specify ``EQ`` for the condition, you can choose to list only public namespaces or private namespaces, but not both. ``EQ`` is the default condition and can be omitted.

            IN  

          When you specify ``IN`` for the condition, you can choose to list public namespaces, private namespaces, or both. 

            BETWEEN  

          Not applicable

            

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Namespaces': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'Type': 'DNS_PUBLIC'|'DNS_PRIVATE'|'HTTP',
                    'Description': 'string',
                    'ServiceCount': 123,
                    'Properties': {
                        'DnsProperties': {
                            'HostedZoneId': 'string',
                            'SOA': {
                                'TTL': 123
                            }
                        },
                        'HttpProperties': {
                            'HttpName': 'string'
                        }
                    },
                    'CreateDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Namespaces** *(list) --* 

          An array that contains one ``NamespaceSummary`` object for each namespace that matches the specified filter criteria.

          
          

          - *(dict) --* 

            A complex type that contains information about a namespace.

            
            

            - **Id** *(string) --* 

              The ID of the namespace.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) that Cloud Map assigns to the namespace when you create it.

              
            

            - **Name** *(string) --* 

              The name of the namespace. When you create a namespace, Cloud Map automatically creates a Route 53 hosted zone that has the same name as the namespace.

              
            

            - **Type** *(string) --* 

              The type of the namespace, either public or private.

              
            

            - **Description** *(string) --* 

              A description for the namespace.

              
            

            - **ServiceCount** *(integer) --* 

              The number of services that were created using the namespace.

              
            

            - **Properties** *(dict) --* 

              The properties of the namespace.

              
              

              - **DnsProperties** *(dict) --* 

                A complex type that contains the ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.

                
                

                - **HostedZoneId** *(string) --* 

                  The ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.

                  
                

                - **SOA** *(dict) --* 

                  Start of Authority (SOA) record for the hosted zone.

                  
                  

                  - **TTL** *(integer) --* 

                    The time to live (TTL) for purposes of negative caching.

                    
              
            
              

              - **HttpProperties** *(dict) --* 

                A complex type that contains the name of an HTTP namespace.

                
                

                - **HttpName** *(string) --* 

                  The name of an HTTP namespace.

                  
            
          
            

            - **CreateDate** *(datetime) --* 

              The date and time that the namespace was created.

              
        
      
        

        - **NextToken** *(string) --* 

          If the response contains ``NextToken`` , submit another ``ListNamespaces`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

           

          .. note::

             

            Cloud Map gets ``MaxResults`` namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first ``MaxResults`` namespaces matched the specified criteria but that subsequent groups of ``MaxResults`` namespaces do contain namespaces that match the criteria.

             

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: list_operations(**kwargs)

    

    Lists operations that match the criteria that you specify.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListOperations>`_    


    **Request Syntax** 
    ::

      response = client.list_operations(
          NextToken='string',
          MaxResults=123,
          Filters=[
              {
                  'Name': 'NAMESPACE_ID'|'SERVICE_ID'|'STATUS'|'TYPE'|'UPDATE_DATE',
                  'Values': [
                      'string',
                  ],
                  'Condition': 'EQ'|'IN'|'BETWEEN'
              },
          ]
      )
    :type NextToken: string
    :param NextToken: 

      For the first ``ListOperations`` request, omit this value.

       

      If the response contains ``NextToken`` , submit another ``ListOperations`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

       

      .. note::

         

        Cloud Map gets ``MaxResults`` operations and then filters them based on the specified criteria. It's possible that no operations in the first ``MaxResults`` operations matched the specified criteria but that subsequent groups of ``MaxResults`` operations do contain operations that match the criteria.

         

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of items that you want Cloud Map to return in the response to a ``ListOperations`` request. If you don't specify a value for ``MaxResults`` , Cloud Map returns up to 100 operations.

      

    
    :type Filters: list
    :param Filters: 

      A complex type that contains specifications for the operations that you want to list, for example, operations that you started between a specified start date and end date.

       

      If you specify more than one filter, an operation must match all filters to be returned by ``ListOperations`` .

      

    
      - *(dict) --* 

        A complex type that lets you select the operations that you want to list.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Specify the operations that you want to get:

           

           
          * **NAMESPACE_ID** : Gets operations related to specified namespaces. 
           
          * **SERVICE_ID** : Gets operations related to specified services. 
           
          * **STATUS** : Gets operations based on the status of the operations: ``SUBMITTED`` , ``PENDING`` , ``SUCCEED`` , or ``FAIL`` . 
           
          * **TYPE** : Gets specified types of operation. 
           
          * **UPDATE_DATE** : Gets operations that changed status during a specified date/time range.  
           

          

        
        - **Values** *(list) --* **[REQUIRED]** 

          Specify values that are applicable to the value that you specify for ``Name`` : 

           

           
          * **NAMESPACE_ID** : Specify one namespace ID. 
           
          * **SERVICE_ID** : Specify one service ID. 
           
          * **STATUS** : Specify one or more statuses: ``SUBMITTED`` , ``PENDING`` , ``SUCCEED`` , or ``FAIL`` . 
           
          * **TYPE** : Specify one or more of the following types: ``CREATE_NAMESPACE`` , ``DELETE_NAMESPACE`` , ``UPDATE_SERVICE`` , ``REGISTER_INSTANCE`` , or ``DEREGISTER_INSTANCE`` . 
           
          * **UPDATE_DATE** : Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value. 
           

          

        
          - *(string) --* 

          
      
        - **Condition** *(string) --* 

          The operator that you want to use to determine whether an operation matches the specified value. Valid values for condition include:

           

           
          * ``EQ`` : When you specify ``EQ`` for the condition, you can specify only one value. ``EQ`` is supported for ``NAMESPACE_ID`` , ``SERVICE_ID`` , ``STATUS`` , and ``TYPE`` . ``EQ`` is the default condition and can be omitted. 
           
          * ``IN`` : When you specify ``IN`` for the condition, you can specify a list of one or more values. ``IN`` is supported for ``STATUS`` and ``TYPE`` . An operation must match one of the specified values to be returned in the response. 
           
          * ``BETWEEN`` : Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value. ``BETWEEN`` is supported for ``UPDATE_DATE`` .  
           

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Operations': [
                {
                    'Id': 'string',
                    'Status': 'SUBMITTED'|'PENDING'|'SUCCESS'|'FAIL'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Operations** *(list) --* 

          Summary information about the operations that match the specified criteria.

          
          

          - *(dict) --* 

            A complex type that contains information about an operation that matches the criteria that you specified in a `ListOperations <https://docs.aws.amazon.com/cloud-map/latest/api/API_ListOperations.html>`__ request.

            
            

            - **Id** *(string) --* 

              The ID for an operation.

              
            

            - **Status** *(string) --* 

              The status of the operation. Values include the following:

               

               
              * **SUBMITTED** : This is the initial state immediately after you submit a request. 
               
              * **PENDING** : Cloud Map is performing the operation. 
               
              * **SUCCESS** : The operation succeeded. 
               
              * **FAIL** : The operation failed. For the failure reason, see ``ErrorMessage`` . 
               

              
        
      
        

        - **NextToken** *(string) --* 

          If the response contains ``NextToken`` , submit another ``ListOperations`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

           

          .. note::

             

            Cloud Map gets ``MaxResults`` operations and then filters them based on the specified criteria. It's possible that no operations in the first ``MaxResults`` operations matched the specified criteria but that subsequent groups of ``MaxResults`` operations do contain operations that match the criteria.

             

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: list_services(**kwargs)

    

    Lists summary information for all the services that are associated with one or more specified namespaces.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListServices>`_    


    **Request Syntax** 
    ::

      response = client.list_services(
          NextToken='string',
          MaxResults=123,
          Filters=[
              {
                  'Name': 'NAMESPACE_ID',
                  'Values': [
                      'string',
                  ],
                  'Condition': 'EQ'|'IN'|'BETWEEN'
              },
          ]
      )
    :type NextToken: string
    :param NextToken: 

      For the first ``ListServices`` request, omit this value.

       

      If the response contains ``NextToken`` , submit another ``ListServices`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

       

      .. note::

         

        Cloud Map gets ``MaxResults`` services and then filters them based on the specified criteria. It's possible that no services in the first ``MaxResults`` services matched the specified criteria but that subsequent groups of ``MaxResults`` services do contain services that match the criteria.

         

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of services that you want Cloud Map to return in the response to a ``ListServices`` request. If you don't specify a value for ``MaxResults`` , Cloud Map returns up to 100 services.

      

    
    :type Filters: list
    :param Filters: 

      A complex type that contains specifications for the namespaces that you want to list services for. 

       

      If you specify more than one filter, an operation must match all filters to be returned by ``ListServices`` .

      

    
      - *(dict) --* 

        A complex type that lets you specify the namespaces that you want to list services for.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Specify ``NAMESPACE_ID`` .

          

        
        - **Values** *(list) --* **[REQUIRED]** 

          The values that are applicable to the value that you specify for ``Condition`` to filter the list of services.

          

        
          - *(string) --* 

          
      
        - **Condition** *(string) --* 

          The operator that you want to use to determine whether a service is returned by ``ListServices`` . Valid values for ``Condition`` include the following:

           

           
          * ``EQ`` : When you specify ``EQ`` , specify one namespace ID for ``Values`` . ``EQ`` is the default condition and can be omitted. 
           
          * ``IN`` : When you specify ``IN`` , specify a list of the IDs for the namespaces that you want ``ListServices`` to return a list of services for. 
           
          * ``BETWEEN`` : Not applicable. 
           

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Services': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'Type': 'HTTP'|'DNS_HTTP'|'DNS',
                    'Description': 'string',
                    'InstanceCount': 123,
                    'DnsConfig': {
                        'NamespaceId': 'string',
                        'RoutingPolicy': 'MULTIVALUE'|'WEIGHTED',
                        'DnsRecords': [
                            {
                                'Type': 'SRV'|'A'|'AAAA'|'CNAME',
                                'TTL': 123
                            },
                        ]
                    },
                    'HealthCheckConfig': {
                        'Type': 'HTTP'|'HTTPS'|'TCP',
                        'ResourcePath': 'string',
                        'FailureThreshold': 123
                    },
                    'HealthCheckCustomConfig': {
                        'FailureThreshold': 123
                    },
                    'CreateDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Services** *(list) --* 

          An array that contains one ``ServiceSummary`` object for each service that matches the specified filter criteria.

          
          

          - *(dict) --* 

            A complex type that contains information about a specified service.

            
            

            - **Id** *(string) --* 

              The ID that Cloud Map assigned to the service when you created it.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.

              
            

            - **Name** *(string) --* 

              The name of the service.

              
            

            - **Type** *(string) --* 

              Describes the systems that can be used to discover the service instances.

                DNS_HTTP  

              The service instances can be discovered using either DNS queries or the ``DiscoverInstances`` API operation.

                HTTP  

              The service instances can only be discovered using the ``DiscoverInstances`` API operation.

                DNS  

              Reserved.

                
            

            - **Description** *(string) --* 

              The description that you specify when you create the service.

              
            

            - **InstanceCount** *(integer) --* 

              The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.

              
            

            - **DnsConfig** *(dict) --* 

              Information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

              
              

              - **NamespaceId** *(string) --* 

                The ID of the namespace to use for DNS configuration.

                
              

              - **RoutingPolicy** *(string) --* 

                The routing policy that you want to apply to all Route 53 DNS records that Cloud Map creates when you register an instance and specify this service.

                 

                .. note::

                   

                  If you want to use this service to register instances that create alias records, specify ``WEIGHTED`` for the routing policy.

                   

                 

                You can specify the following values:

                  MULTIVALUE  

                If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.

                 

                For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.

                 

                If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.

                 

                For more information about the multivalue routing policy, see `Multivalue Answer Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue>`__ in the *Route 53 Developer Guide* .

                  WEIGHTED  

                Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.

                 

                For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.

                 

                If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.

                 

                For more information about the weighted routing policy, see `Weighted Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted>`__ in the *Route 53 Developer Guide* .

                  
              

              - **DnsRecords** *(list) --* 

                An array that contains one ``DnsRecord`` object for each Route 53 DNS record that you want Cloud Map to create when you register an instance.

                
                

                - *(dict) --* 

                  A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

                  
                  

                  - **Type** *(string) --* 

                    The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for ``Type`` in the following combinations:

                     

                     
                    * **``A`` **   
                     
                    * **``AAAA`` **   
                     
                    * **``A`` ** and ** ``AAAA`` **   
                     
                    * **``SRV`` **   
                     
                    * **``CNAME`` **   
                     

                     

                    If you want Cloud Map to create a Route 53 alias record when you register an instance, specify ``A`` or ``AAAA`` for ``Type`` .

                     

                    You specify other settings, such as the IP address for ``A`` and ``AAAA`` records, when you register an instance. For more information, see `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ .

                     

                    The following values are supported:

                      A  

                    Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.

                      AAAA  

                    Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.

                      CNAME  

                    Route 53 returns the domain name of the resource, such as www.example.com. Note the following:

                     

                     
                    * You specify the domain name that you want to route traffic to when you register an instance. For more information, see `Attributes <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes>`__ in the topic `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ . 
                     
                    * You must specify ``WEIGHTED`` for the value of ``RoutingPolicy`` . 
                     
                    * You can't specify both ``CNAME`` for ``Type`` and settings for ``HealthCheckConfig`` . If you do, the request will fail with an ``InvalidInput`` error. 
                     

                      SRV  

                    Route 53 returns the value for an ``SRV`` record. The value for an ``SRV`` record uses the following values:

                     

                     ``priority weight port service-hostname``  

                     

                    Note the following about the values:

                     

                     
                    * The values of ``priority`` and ``weight`` are both set to ``1`` and can't be changed.  
                     
                    * The value of ``port`` comes from the value that you specify for the ``AWS_INSTANCE_PORT`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request. 
                     
                    * The value of ``service-hostname`` is a concatenation of the following values: 

                       
                      * The value that you specify for ``InstanceId`` when you register an instance. 
                       
                      * The name of the service. 
                       
                      * The name of the namespace.  
                       

                     

                    For example, if the value of ``InstanceId`` is ``test`` , the name of the service is ``backend`` , and the name of the namespace is ``example.com`` , the value of ``service-hostname`` is the following:

                     

                     ``test.backend.example.com``  

                     
                     

                     

                    If you specify settings for an ``SRV`` record, note the following:

                     

                     
                    * If you specify values for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both in the ``RegisterInstance`` request, Cloud Map automatically creates ``A`` and/or ``AAAA`` records that have the same name as the value of ``service-hostname`` in the ``SRV`` record. You can ignore these records. 
                     
                    * If you're using a system that requires a specific ``SRV`` format, such as HAProxy, see the `Name <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html#cloudmap-CreateService-request-Name>`__ element in the documentation about ``CreateService`` for information about how to specify the correct name format. 
                     

                      
                  

                  - **TTL** *(integer) --* 

                    The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.

                     

                    .. note::

                       

                      Alias records don't include a TTL because Route 53 uses the TTL for the Amazon Web Services resource that an alias record routes traffic to. If you include the ``AWS_ALIAS_DNS_NAME`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request, the ``TTL`` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.

                       

                    
              
            
          
            

            - **HealthCheckConfig** *(dict) --* 

               *Public DNS and HTTP namespaces only.* Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in ``DnsConfig`` .

              
              

              - **Type** *(string) --* 

                The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.

                 

                .. warning::

                   

                  You can't change the value of ``Type`` after you create a health check.

                   

                 

                You can create the following types of health checks:

                 

                 
                * **HTTP** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. 
                 
                * **HTTPS** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. 

                .. warning::

                   If you specify HTTPS for the value of ``Type`` , the endpoint must support TLS v1.0 or later. 

                 
                 
                * **TCP** : Route 53 tries to establish a TCP connection. If you specify ``TCP`` for ``Type`` , don't specify a value for ``ResourcePath`` . 
                 

                 

                For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

                
              

              - **ResourcePath** *(string) --* 

                The path that you want Route 53 to request when performing health checks. The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is ``/docs/route53-health-check.html`` . Route 53 automatically adds the DNS name for the service. If you don't specify a value for ``ResourcePath`` , the default value is ``/`` .

                 

                If you specify ``TCP`` for ``Type`` , you must *not* specify a value for ``ResourcePath`` .

                
              

              - **FailureThreshold** *(integer) --* 

                The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

                
          
            

            - **HealthCheckCustomConfig** *(dict) --* 

              Information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:

               

               
              * You can't use a health check that's defined by ``HealthCheckConfig`` because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.) 
               
              * You want to use a third-party health checker regardless of where your resources are located. 
               

               

              .. warning::

                 

                If you specify a health check configuration, you can specify either ``HealthCheckCustomConfig`` or ``HealthCheckConfig`` but not both.

                 

              
              

              - **FailureThreshold** *(integer) --* 

                .. warning::

                   

                  This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an ``UpdateInstanceCustomHealthStatus`` request before changing the status of the service instance.

                   

                 

                The number of 30-second intervals that you want Cloud Map to wait after receiving an ``UpdateInstanceCustomHealthStatus`` request before it changes the health status of a service instance.

                 

                Sending a second or subsequent ``UpdateInstanceCustomHealthStatus`` request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits ``30`` seconds after the first request to make the change.

                
          
            

            - **CreateDate** *(datetime) --* 

              The date and time that the service was created.

              
        
      
        

        - **NextToken** *(string) --* 

          If the response contains ``NextToken`` , submit another ``ListServices`` request to get the next group of results. Specify the value of ``NextToken`` from the previous response in the next request.

           

          .. note::

             

            Cloud Map gets ``MaxResults`` services and then filters them based on the specified criteria. It's possible that no services in the first ``MaxResults`` services matched the specified criteria but that subsequent groups of ``MaxResults`` services do contain services that match the criteria.

             

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists tags for the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceARN='string'
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tags** *(list) --* 

          The tags that are assigned to the resource.

          
          

          - *(dict) --* 

            A custom key-value pair that's associated with a resource.

            
            

            - **Key** *(string) --* 

              The key identifier, or name, of the tag.

              
            

            - **Value** *(string) --* 

              The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: register_instance(**kwargs)

    

    Creates or updates one or more records and, optionally, creates a health check based on the settings in a specified service. When you submit a ``RegisterInstance`` request, the following occurs:

     

     
    * For each DNS record that you define in the service that's specified by ``ServiceId`` , a record is created or updated in the hosted zone that's associated with the corresponding namespace. 
     
    * If the service includes ``HealthCheckConfig`` , a health check is created based on the settings in the health check configuration. 
     
    * The health check, if any, is associated with each of the new or updated records. 
     

     

    .. warning::

       

      One ``RegisterInstance`` request must complete before you can submit another request and specify the same service ID and instance ID.

       

     

    For more information, see `CreateService <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html>`__ .

     

    When Cloud Map receives a DNS query for the specified DNS name, it returns the applicable value:

     

     
    * **If the health check is healthy** : returns all the records 
     
    * **If the health check is unhealthy** : returns the applicable value for the last healthy instance 
     
    * **If you didn't specify a health check configuration** : returns all the records 
     

     

    For the current quota on the number of instances that you can register using the same namespace and using the same service, see `Cloud Map quotas <https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html>`__ in the *Cloud Map Developer Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/RegisterInstance>`_    


    **Request Syntax** 
    ::

      response = client.register_instance(
          ServiceId='string',
          InstanceId='string',
          CreatorRequestId='string',
          Attributes={
              'string': 'string'
          }
      )
    :type ServiceId: string
    :param ServiceId: **[REQUIRED]** 

      The ID of the service that you want to use for settings for the instance.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      An identifier that you want to associate with the instance. Note the following:

       

       
      * If the service that's specified by ``ServiceId`` includes settings for an ``SRV`` record, the value of ``InstanceId`` is automatically included as part of the value for the ``SRV`` record. For more information, see `DnsRecord > Type <https://docs.aws.amazon.com/cloud-map/latest/api/API_DnsRecord.html#cloudmap-Type-DnsRecord-Type>`__ . 
       
      * You can use this value to update an existing instance. 
       
      * To register a new instance, you must specify a value that's unique among instances that you register by using the same service.  
       
      * If you specify an existing ``InstanceId`` and ``ServiceId`` , Cloud Map updates the existing DNS records, if any. If there's also an existing health check, Cloud Map deletes the old health check and creates a new one.  

      .. note::

         The health check isn't deleted immediately, so it will still appear for a while if you submit a ``ListHealthChecks`` request, for example. 

       
       

      

    
    :type CreatorRequestId: string
    :param CreatorRequestId: 

      A unique string that identifies the request and that allows failed ``RegisterInstance`` requests to be retried without the risk of executing the operation twice. You must use a unique ``CreatorRequestId`` string every time you submit a ``RegisterInstance`` request if you're registering additional instances for the same namespace and service. ``CreatorRequestId`` can be any unique string (for example, a date/time stamp).

      This field is autopopulated if not provided.

    
    :type Attributes: dict
    :param Attributes: **[REQUIRED]** 

      A string map that contains the following information for the service that you specify in ``ServiceId`` :

       

       
      * The attributes that apply to the records that are defined in the service.  
       
      * For each attribute, the applicable value. 
       

       

      Supported attribute keys include the following:

        AWS_ALIAS_DNS_NAME  

      If you want Cloud Map to create an Amazon Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that's associated with the load balancer. For information about how to get the DNS name, see "DNSName" in the topic `AliasTarget <https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html>`__ in the *Route 53 API Reference* .

       

      Note the following:

       

       
      * The configuration for the service that's specified by ``ServiceId`` must include settings for an ``A`` record, an ``AAAA`` record, or both. 
       
      * In the service that's specified by ``ServiceId`` , the value of ``RoutingPolicy`` must be ``WEIGHTED`` . 
       
      * If the service that's specified by ``ServiceId`` includes ``HealthCheckConfig`` settings, Cloud Map will create the Route 53 health check, but it doesn't associate the health check with the alias record. 
       
      * Auto naming currently doesn't support creating alias records that route traffic to Amazon Web Services resources other than Elastic Load Balancing load balancers. 
       
      * If you specify a value for ``AWS_ALIAS_DNS_NAME`` , don't specify values for any of the ``AWS_INSTANCE`` attributes. 
       

        AWS_EC2_INSTANCE_ID  

       *HTTP namespaces only.* The Amazon EC2 instance ID for the instance. If the ``AWS_EC2_INSTANCE_ID`` attribute is specified, then the only other attribute that can be specified is ``AWS_INIT_HEALTH_STATUS`` . When the ``AWS_EC2_INSTANCE_ID`` attribute is specified, then the ``AWS_INSTANCE_IPV4`` attribute will be filled out with the primary private IPv4 address.

        AWS_INIT_HEALTH_STATUS  

      If the service configuration includes ``HealthCheckCustomConfig`` , you can optionally use ``AWS_INIT_HEALTH_STATUS`` to specify the initial status of the custom health check, ``HEALTHY`` or ``UNHEALTHY`` . If you don't specify a value for ``AWS_INIT_HEALTH_STATUS`` , the initial status is ``HEALTHY`` .

        AWS_INSTANCE_CNAME  

      If the service configuration includes a ``CNAME`` record, the domain name that you want Route 53 to return in response to DNS queries (for example, ``example.com`` ).

       

      This value is required if the service specified by ``ServiceId`` includes settings for an ``CNAME`` record.

        AWS_INSTANCE_IPV4  

      If the service configuration includes an ``A`` record, the IPv4 address that you want Route 53 to return in response to DNS queries (for example, ``192.0.2.44`` ).

       

      This value is required if the service specified by ``ServiceId`` includes settings for an ``A`` record. If the service includes settings for an ``SRV`` record, you must specify a value for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both.

        AWS_INSTANCE_IPV6  

      If the service configuration includes an ``AAAA`` record, the IPv6 address that you want Route 53 to return in response to DNS queries (for example, ``2001:0db8:85a3:0000:0000:abcd:0001:2345`` ).

       

      This value is required if the service specified by ``ServiceId`` includes settings for an ``AAAA`` record. If the service includes settings for an ``SRV`` record, you must specify a value for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both.

        AWS_INSTANCE_PORT  

      If the service includes an ``SRV`` record, the value that you want Route 53 to return for the port.

       

      If the service includes ``HealthCheckConfig`` , the port on the endpoint that you want Route 53 to send requests to. 

       

      This value is required if you specified settings for an ``SRV`` record or a Route 53 health check when you created the service.

        Custom attributes  

      You can add up to 30 custom attributes. For each key-value pair, the maximum length of the attribute name is 255 characters, and the maximum length of the attribute value is 1,024 characters. The total size of all provided attributes (sum of all keys and values) must not exceed 5,000 characters.

        

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceInUse`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceLimitExceeded`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds one or more tags to the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceARN='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      The tags to add to the specified resource. Specifying the tag key is required. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.

      

    
      - *(dict) --* 

        A custom key-value pair that's associated with a resource.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          The key identifier, or name, of the tag.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.TooManyTagsException`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes one or more tags from the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceARN='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource that you want to retrieve tags for.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      The tag keys to remove from the specified resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: update_http_namespace(**kwargs)

    

    Updates an HTTP namespace.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdateHttpNamespace>`_    


    **Request Syntax** 
    ::

      response = client.update_http_namespace(
          Id='string',
          UpdaterRequestId='string',
          Namespace={
              'Description': 'string'
          }
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the namespace that you want to update.

      

    
    :type UpdaterRequestId: string
    :param UpdaterRequestId: 

      A unique string that identifies the request and that allows failed ``UpdateHttpNamespace`` requests to be retried without the risk of running the operation twice. ``UpdaterRequestId`` can be any unique string (for example, a date/timestamp).

      This field is autopopulated if not provided.

    
    :type Namespace: dict
    :param Namespace: **[REQUIRED]** 

      Updated properties for the the HTTP namespace.

      

    
      - **Description** *(string) --* **[REQUIRED]** 

        An updated description for the HTTP namespace.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceInUse`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    

  .. py:method:: update_instance_custom_health_status(**kwargs)

    

    Submits a request to change the health status of a custom health check to healthy or unhealthy.

     

    You can use ``UpdateInstanceCustomHealthStatus`` to change the status only for custom health checks, which you define using ``HealthCheckCustomConfig`` when you create a service. You can't use it to change the status for Route 53 health checks, which you define using ``HealthCheckConfig`` .

     

    For more information, see `HealthCheckCustomConfig <https://docs.aws.amazon.com/cloud-map/latest/api/API_HealthCheckCustomConfig.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdateInstanceCustomHealthStatus>`_    


    **Request Syntax** 
    ::

      response = client.update_instance_custom_health_status(
          ServiceId='string',
          InstanceId='string',
          Status='HEALTHY'|'UNHEALTHY'
      )
    :type ServiceId: string
    :param ServiceId: **[REQUIRED]** 

      The ID of the service that includes the configuration for the custom health check that you want to change the status for.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The ID of the instance that you want to change the health status for.

      

    
    :type Status: string
    :param Status: **[REQUIRED]** 

      The new status of the instance, ``HEALTHY`` or ``UNHEALTHY`` .

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InstanceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.CustomHealthNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    

  .. py:method:: update_private_dns_namespace(**kwargs)

    

    Updates a private DNS namespace.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdatePrivateDnsNamespace>`_    


    **Request Syntax** 
    ::

      response = client.update_private_dns_namespace(
          Id='string',
          UpdaterRequestId='string',
          Namespace={
              'Description': 'string',
              'Properties': {
                  'DnsProperties': {
                      'SOA': {
                          'TTL': 123
                      }
                  }
              }
          }
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the namespace that you want to update.

      

    
    :type UpdaterRequestId: string
    :param UpdaterRequestId: 

      A unique string that identifies the request and that allows failed ``UpdatePrivateDnsNamespace`` requests to be retried without the risk of running the operation twice. ``UpdaterRequestId`` can be any unique string (for example, a date/timestamp).

      This field is autopopulated if not provided.

    
    :type Namespace: dict
    :param Namespace: **[REQUIRED]** 

      Updated properties for the private DNS namespace.

      

    
      - **Description** *(string) --* 

        An updated description for the private DNS namespace.

        

      
      - **Properties** *(dict) --* 

        Properties to be updated in the private DNS namespace.

        

      
        - **DnsProperties** *(dict) --* **[REQUIRED]** 

          Updated DNS properties for the private DNS namespace.

          

        
          - **SOA** *(dict) --* **[REQUIRED]** 

            Updated fields for the Start of Authority (SOA) record for the hosted zone for the private DNS namespace.

            

          
            - **TTL** *(integer) --* **[REQUIRED]** 

              The updated time to live (TTL) for purposes of negative caching.

              

            
          
        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceInUse`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    

  .. py:method:: update_public_dns_namespace(**kwargs)

    

    Updates a public DNS namespace.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdatePublicDnsNamespace>`_    


    **Request Syntax** 
    ::

      response = client.update_public_dns_namespace(
          Id='string',
          UpdaterRequestId='string',
          Namespace={
              'Description': 'string',
              'Properties': {
                  'DnsProperties': {
                      'SOA': {
                          'TTL': 123
                      }
                  }
              }
          }
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the namespace being updated.

      

    
    :type UpdaterRequestId: string
    :param UpdaterRequestId: 

      A unique string that identifies the request and that allows failed ``UpdatePublicDnsNamespace`` requests to be retried without the risk of running the operation twice. ``UpdaterRequestId`` can be any unique string (for example, a date/timestamp).

      This field is autopopulated if not provided.

    
    :type Namespace: dict
    :param Namespace: **[REQUIRED]** 

      Updated properties for the public DNS namespace.

      

    
      - **Description** *(string) --* 

        An updated description for the public DNS namespace.

        

      
      - **Properties** *(dict) --* 

        Properties to be updated in the public DNS namespace.

        

      
        - **DnsProperties** *(dict) --* **[REQUIRED]** 

          Updated DNS properties for the hosted zone for the public DNS namespace.

          

        
          - **SOA** *(dict) --* **[REQUIRED]** 

            Updated fields for the Start of Authority (SOA) record for the hosted zone for the public DNS namespace.

            

          
            - **TTL** *(integer) --* **[REQUIRED]** 

              The updated time to live (TTL) for purposes of negative caching.

              

            
          
        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.NamespaceNotFound`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ResourceInUse`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    

  .. py:method:: update_service(**kwargs)

    

    Submits a request to perform the following operations:

     

     
    * Update the TTL setting for existing ``DnsRecords`` configurations 
     
    * Add, update, or delete ``HealthCheckConfig`` for a specified service 

    .. note::

       You can't add, update, or delete a ``HealthCheckCustomConfig`` configuration. 

     
     

     

    For public and private DNS namespaces, note the following:

     

     
    * If you omit any existing ``DnsRecords`` or ``HealthCheckConfig`` configurations from an ``UpdateService`` request, the configurations are deleted from the service. 
     
    * If you omit an existing ``HealthCheckCustomConfig`` configuration from an ``UpdateService`` request, the configuration isn't deleted from the service. 
     

     

    When you update settings for a service, Cloud Map also updates the corresponding settings in all the records and health checks that were created by using the specified service.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/UpdateService>`_    


    **Request Syntax** 
    ::

      response = client.update_service(
          Id='string',
          Service={
              'Description': 'string',
              'DnsConfig': {
                  'DnsRecords': [
                      {
                          'Type': 'SRV'|'A'|'AAAA'|'CNAME',
                          'TTL': 123
                      },
                  ]
              },
              'HealthCheckConfig': {
                  'Type': 'HTTP'|'HTTPS'|'TCP',
                  'ResourcePath': 'string',
                  'FailureThreshold': 123
              }
          }
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The ID of the service that you want to update.

      

    
    :type Service: dict
    :param Service: **[REQUIRED]** 

      A complex type that contains the new settings for the service.

      

    
      - **Description** *(string) --* 

        A description for the service.

        

      
      - **DnsConfig** *(dict) --* 

        Information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

        

      
        - **DnsRecords** *(list) --* **[REQUIRED]** 

          An array that contains one ``DnsRecord`` object for each Route 53 record that you want Cloud Map to create when you register an instance.

          

        
          - *(dict) --* 

            A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

            

          
            - **Type** *(string) --* **[REQUIRED]** 

              The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for ``Type`` in the following combinations:

               

               
              * **``A`` **   
               
              * **``AAAA`` **   
               
              * **``A`` ** and ** ``AAAA`` **   
               
              * **``SRV`` **   
               
              * **``CNAME`` **   
               

               

              If you want Cloud Map to create a Route 53 alias record when you register an instance, specify ``A`` or ``AAAA`` for ``Type`` .

               

              You specify other settings, such as the IP address for ``A`` and ``AAAA`` records, when you register an instance. For more information, see `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ .

               

              The following values are supported:

                A  

              Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.

                AAAA  

              Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.

                CNAME  

              Route 53 returns the domain name of the resource, such as www.example.com. Note the following:

               

               
              * You specify the domain name that you want to route traffic to when you register an instance. For more information, see `Attributes <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes>`__ in the topic `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ . 
               
              * You must specify ``WEIGHTED`` for the value of ``RoutingPolicy`` . 
               
              * You can't specify both ``CNAME`` for ``Type`` and settings for ``HealthCheckConfig`` . If you do, the request will fail with an ``InvalidInput`` error. 
               

                SRV  

              Route 53 returns the value for an ``SRV`` record. The value for an ``SRV`` record uses the following values:

               

               ``priority weight port service-hostname``  

               

              Note the following about the values:

               

               
              * The values of ``priority`` and ``weight`` are both set to ``1`` and can't be changed.  
               
              * The value of ``port`` comes from the value that you specify for the ``AWS_INSTANCE_PORT`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request. 
               
              * The value of ``service-hostname`` is a concatenation of the following values: 

                 
                * The value that you specify for ``InstanceId`` when you register an instance. 
                 
                * The name of the service. 
                 
                * The name of the namespace.  
                 

               

              For example, if the value of ``InstanceId`` is ``test`` , the name of the service is ``backend`` , and the name of the namespace is ``example.com`` , the value of ``service-hostname`` is the following:

               

               ``test.backend.example.com``  

               
               

               

              If you specify settings for an ``SRV`` record, note the following:

               

               
              * If you specify values for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both in the ``RegisterInstance`` request, Cloud Map automatically creates ``A`` and/or ``AAAA`` records that have the same name as the value of ``service-hostname`` in the ``SRV`` record. You can ignore these records. 
               
              * If you're using a system that requires a specific ``SRV`` format, such as HAProxy, see the `Name <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html#cloudmap-CreateService-request-Name>`__ element in the documentation about ``CreateService`` for information about how to specify the correct name format. 
               

                

            
            - **TTL** *(integer) --* **[REQUIRED]** 

              The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.

               

              .. note::

                 

                Alias records don't include a TTL because Route 53 uses the TTL for the Amazon Web Services resource that an alias record routes traffic to. If you include the ``AWS_ALIAS_DNS_NAME`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request, the ``TTL`` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.

                 

              

            
          
      
      
      - **HealthCheckConfig** *(dict) --* 

         *Public DNS and HTTP namespaces only.* Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in ``DnsConfig`` .

        

      
        - **Type** *(string) --* **[REQUIRED]** 

          The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.

           

          .. warning::

             

            You can't change the value of ``Type`` after you create a health check.

             

           

          You can create the following types of health checks:

           

           
          * **HTTP** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. 
           
          * **HTTPS** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. 

          .. warning::

             If you specify HTTPS for the value of ``Type`` , the endpoint must support TLS v1.0 or later. 

           
           
          * **TCP** : Route 53 tries to establish a TCP connection. If you specify ``TCP`` for ``Type`` , don't specify a value for ``ResourcePath`` . 
           

           

          For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

          

        
        - **ResourcePath** *(string) --* 

          The path that you want Route 53 to request when performing health checks. The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is ``/docs/route53-health-check.html`` . Route 53 automatically adds the DNS name for the service. If you don't specify a value for ``ResourcePath`` , the default value is ``/`` .

           

          If you specify ``TCP`` for ``Type`` , you must *not* specify a value for ``ResourcePath`` .

          

        
        - **FailureThreshold** *(integer) --* 

          The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

          

        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'OperationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **OperationId** *(string) --* 

          A value that you can use to determine whether the request completed successfully. To get the status of the operation, see `GetOperation <https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html>`__ .

          
    
    **Exceptions** 
    
    *     :py:class:`ServiceDiscovery.Client.exceptions.DuplicateRequest`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.InvalidInput`

    
    *     :py:class:`ServiceDiscovery.Client.exceptions.ServiceNotFound`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`ServiceDiscovery.Paginator.ListInstances`


* :py:class:`ServiceDiscovery.Paginator.ListNamespaces`


* :py:class:`ServiceDiscovery.Paginator.ListOperations`


* :py:class:`ServiceDiscovery.Paginator.ListServices`



.. py:class:: ServiceDiscovery.Paginator.ListInstances

  ::

    
    paginator = client.get_paginator('list_instances')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ServiceDiscovery.Client.list_instances`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListInstances>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ServiceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ServiceId: string
    :param ServiceId: **[REQUIRED]** 

      The ID of the service that you want to list instances for.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Instances': [
                {
                    'Id': 'string',
                    'Attributes': {
                        'string': 'string'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Instances** *(list) --* 

          Summary information about the instances that are associated with the specified service.

          
          

          - *(dict) --* 

            A complex type that contains information about the instances that you registered by using a specified service.

            
            

            - **Id** *(string) --* 

              The ID for an instance that you created by using a specified service.

              
            

            - **Attributes** *(dict) --* 

              A string map that contains the following information:

               

               
              * The attributes that are associated with the instance.  
               
              * For each attribute, the applicable value. 
               

               

              Supported attribute keys include the following:

                AWS_ALIAS_DNS_NAME  

              For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that's associated with the load balancer. 

                AWS_EC2_INSTANCE_ID (HTTP namespaces only)  

              The Amazon EC2 instance ID for the instance. When the ``AWS_EC2_INSTANCE_ID`` attribute is specified, then the ``AWS_INSTANCE_IPV4`` attribute contains the primary private IPv4 address.

                AWS_INIT_HEALTH_STATUS  

              If the service configuration includes ``HealthCheckCustomConfig`` , you can optionally use ``AWS_INIT_HEALTH_STATUS`` to specify the initial status of the custom health check, ``HEALTHY`` or ``UNHEALTHY`` . If you don't specify a value for ``AWS_INIT_HEALTH_STATUS`` , the initial status is ``HEALTHY`` .

                AWS_INSTANCE_CNAME  

              For a ``CNAME`` record, the domain name that Route 53 returns in response to DNS queries (for example, ``example.com`` ).

                AWS_INSTANCE_IPV4  

              For an ``A`` record, the IPv4 address that Route 53 returns in response to DNS queries (for example, ``192.0.2.44`` ).

                AWS_INSTANCE_IPV6  

              For an ``AAAA`` record, the IPv6 address that Route 53 returns in response to DNS queries (for example, ``2001:0db8:85a3:0000:0000:abcd:0001:2345`` ).

                AWS_INSTANCE_PORT  

              For an ``SRV`` record, the value that Route 53 returns for the port. In addition, if the service includes ``HealthCheckConfig`` , the port on the endpoint that Route 53 sends requests to.

                
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
    

.. py:class:: ServiceDiscovery.Paginator.ListNamespaces

  ::

    
    paginator = client.get_paginator('list_namespaces')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ServiceDiscovery.Client.list_namespaces`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListNamespaces>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'TYPE',
                  'Values': [
                      'string',
                  ],
                  'Condition': 'EQ'|'IN'|'BETWEEN'
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      A complex type that contains specifications for the namespaces that you want to list.

       

      If you specify more than one filter, a namespace must match all filters to be returned by ``ListNamespaces`` .

      

    
      - *(dict) --* 

        A complex type that identifies the namespaces that you want to list. You can choose to list public or private namespaces.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Specify ``TYPE`` .

          

        
        - **Values** *(list) --* **[REQUIRED]** 

          If you specify ``EQ`` for ``Condition`` , specify either ``DNS_PUBLIC`` or ``DNS_PRIVATE`` .

           

          If you specify ``IN`` for ``Condition`` , you can specify ``DNS_PUBLIC`` , ``DNS_PRIVATE`` , or both.

          

        
          - *(string) --* 

          
      
        - **Condition** *(string) --* 

          The operator that you want to use to determine whether ``ListNamespaces`` returns a namespace. Valid values for ``condition`` include:

            EQ  

          When you specify ``EQ`` for the condition, you can choose to list only public namespaces or private namespaces, but not both. ``EQ`` is the default condition and can be omitted.

            IN  

          When you specify ``IN`` for the condition, you can choose to list public namespaces, private namespaces, or both. 

            BETWEEN  

          Not applicable

            

        
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Namespaces': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'Type': 'DNS_PUBLIC'|'DNS_PRIVATE'|'HTTP',
                    'Description': 'string',
                    'ServiceCount': 123,
                    'Properties': {
                        'DnsProperties': {
                            'HostedZoneId': 'string',
                            'SOA': {
                                'TTL': 123
                            }
                        },
                        'HttpProperties': {
                            'HttpName': 'string'
                        }
                    },
                    'CreateDate': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Namespaces** *(list) --* 

          An array that contains one ``NamespaceSummary`` object for each namespace that matches the specified filter criteria.

          
          

          - *(dict) --* 

            A complex type that contains information about a namespace.

            
            

            - **Id** *(string) --* 

              The ID of the namespace.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) that Cloud Map assigns to the namespace when you create it.

              
            

            - **Name** *(string) --* 

              The name of the namespace. When you create a namespace, Cloud Map automatically creates a Route 53 hosted zone that has the same name as the namespace.

              
            

            - **Type** *(string) --* 

              The type of the namespace, either public or private.

              
            

            - **Description** *(string) --* 

              A description for the namespace.

              
            

            - **ServiceCount** *(integer) --* 

              The number of services that were created using the namespace.

              
            

            - **Properties** *(dict) --* 

              The properties of the namespace.

              
              

              - **DnsProperties** *(dict) --* 

                A complex type that contains the ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.

                
                

                - **HostedZoneId** *(string) --* 

                  The ID for the Route 53 hosted zone that Cloud Map creates when you create a namespace.

                  
                

                - **SOA** *(dict) --* 

                  Start of Authority (SOA) record for the hosted zone.

                  
                  

                  - **TTL** *(integer) --* 

                    The time to live (TTL) for purposes of negative caching.

                    
              
            
              

              - **HttpProperties** *(dict) --* 

                A complex type that contains the name of an HTTP namespace.

                
                

                - **HttpName** *(string) --* 

                  The name of an HTTP namespace.

                  
            
          
            

            - **CreateDate** *(datetime) --* 

              The date and time that the namespace was created.

              
        
      
    

.. py:class:: ServiceDiscovery.Paginator.ListOperations

  ::

    
    paginator = client.get_paginator('list_operations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ServiceDiscovery.Client.list_operations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListOperations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'NAMESPACE_ID'|'SERVICE_ID'|'STATUS'|'TYPE'|'UPDATE_DATE',
                  'Values': [
                      'string',
                  ],
                  'Condition': 'EQ'|'IN'|'BETWEEN'
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      A complex type that contains specifications for the operations that you want to list, for example, operations that you started between a specified start date and end date.

       

      If you specify more than one filter, an operation must match all filters to be returned by ``ListOperations`` .

      

    
      - *(dict) --* 

        A complex type that lets you select the operations that you want to list.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Specify the operations that you want to get:

           

           
          * **NAMESPACE_ID** : Gets operations related to specified namespaces. 
           
          * **SERVICE_ID** : Gets operations related to specified services. 
           
          * **STATUS** : Gets operations based on the status of the operations: ``SUBMITTED`` , ``PENDING`` , ``SUCCEED`` , or ``FAIL`` . 
           
          * **TYPE** : Gets specified types of operation. 
           
          * **UPDATE_DATE** : Gets operations that changed status during a specified date/time range.  
           

          

        
        - **Values** *(list) --* **[REQUIRED]** 

          Specify values that are applicable to the value that you specify for ``Name`` : 

           

           
          * **NAMESPACE_ID** : Specify one namespace ID. 
           
          * **SERVICE_ID** : Specify one service ID. 
           
          * **STATUS** : Specify one or more statuses: ``SUBMITTED`` , ``PENDING`` , ``SUCCEED`` , or ``FAIL`` . 
           
          * **TYPE** : Specify one or more of the following types: ``CREATE_NAMESPACE`` , ``DELETE_NAMESPACE`` , ``UPDATE_SERVICE`` , ``REGISTER_INSTANCE`` , or ``DEREGISTER_INSTANCE`` . 
           
          * **UPDATE_DATE** : Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value. 
           

          

        
          - *(string) --* 

          
      
        - **Condition** *(string) --* 

          The operator that you want to use to determine whether an operation matches the specified value. Valid values for condition include:

           

           
          * ``EQ`` : When you specify ``EQ`` for the condition, you can specify only one value. ``EQ`` is supported for ``NAMESPACE_ID`` , ``SERVICE_ID`` , ``STATUS`` , and ``TYPE`` . ``EQ`` is the default condition and can be omitted. 
           
          * ``IN`` : When you specify ``IN`` for the condition, you can specify a list of one or more values. ``IN`` is supported for ``STATUS`` and ``TYPE`` . An operation must match one of the specified values to be returned in the response. 
           
          * ``BETWEEN`` : Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value. ``BETWEEN`` is supported for ``UPDATE_DATE`` .  
           

          

        
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Operations': [
                {
                    'Id': 'string',
                    'Status': 'SUBMITTED'|'PENDING'|'SUCCESS'|'FAIL'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Operations** *(list) --* 

          Summary information about the operations that match the specified criteria.

          
          

          - *(dict) --* 

            A complex type that contains information about an operation that matches the criteria that you specified in a `ListOperations <https://docs.aws.amazon.com/cloud-map/latest/api/API_ListOperations.html>`__ request.

            
            

            - **Id** *(string) --* 

              The ID for an operation.

              
            

            - **Status** *(string) --* 

              The status of the operation. Values include the following:

               

               
              * **SUBMITTED** : This is the initial state immediately after you submit a request. 
               
              * **PENDING** : Cloud Map is performing the operation. 
               
              * **SUCCESS** : The operation succeeded. 
               
              * **FAIL** : The operation failed. For the failure reason, see ``ErrorMessage`` . 
               

              
        
      
    

.. py:class:: ServiceDiscovery.Paginator.ListServices

  ::

    
    paginator = client.get_paginator('list_services')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`ServiceDiscovery.Client.list_services`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/servicediscovery-2017-03-14/ListServices>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'NAMESPACE_ID',
                  'Values': [
                      'string',
                  ],
                  'Condition': 'EQ'|'IN'|'BETWEEN'
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      A complex type that contains specifications for the namespaces that you want to list services for. 

       

      If you specify more than one filter, an operation must match all filters to be returned by ``ListServices`` .

      

    
      - *(dict) --* 

        A complex type that lets you specify the namespaces that you want to list services for.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Specify ``NAMESPACE_ID`` .

          

        
        - **Values** *(list) --* **[REQUIRED]** 

          The values that are applicable to the value that you specify for ``Condition`` to filter the list of services.

          

        
          - *(string) --* 

          
      
        - **Condition** *(string) --* 

          The operator that you want to use to determine whether a service is returned by ``ListServices`` . Valid values for ``Condition`` include the following:

           

           
          * ``EQ`` : When you specify ``EQ`` , specify one namespace ID for ``Values`` . ``EQ`` is the default condition and can be omitted. 
           
          * ``IN`` : When you specify ``IN`` , specify a list of the IDs for the namespaces that you want ``ListServices`` to return a list of services for. 
           
          * ``BETWEEN`` : Not applicable. 
           

          

        
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Services': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'Type': 'HTTP'|'DNS_HTTP'|'DNS',
                    'Description': 'string',
                    'InstanceCount': 123,
                    'DnsConfig': {
                        'NamespaceId': 'string',
                        'RoutingPolicy': 'MULTIVALUE'|'WEIGHTED',
                        'DnsRecords': [
                            {
                                'Type': 'SRV'|'A'|'AAAA'|'CNAME',
                                'TTL': 123
                            },
                        ]
                    },
                    'HealthCheckConfig': {
                        'Type': 'HTTP'|'HTTPS'|'TCP',
                        'ResourcePath': 'string',
                        'FailureThreshold': 123
                    },
                    'HealthCheckCustomConfig': {
                        'FailureThreshold': 123
                    },
                    'CreateDate': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Services** *(list) --* 

          An array that contains one ``ServiceSummary`` object for each service that matches the specified filter criteria.

          
          

          - *(dict) --* 

            A complex type that contains information about a specified service.

            
            

            - **Id** *(string) --* 

              The ID that Cloud Map assigned to the service when you created it.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) that Cloud Map assigns to the service when you create it.

              
            

            - **Name** *(string) --* 

              The name of the service.

              
            

            - **Type** *(string) --* 

              Describes the systems that can be used to discover the service instances.

                DNS_HTTP  

              The service instances can be discovered using either DNS queries or the ``DiscoverInstances`` API operation.

                HTTP  

              The service instances can only be discovered using the ``DiscoverInstances`` API operation.

                DNS  

              Reserved.

                
            

            - **Description** *(string) --* 

              The description that you specify when you create the service.

              
            

            - **InstanceCount** *(integer) --* 

              The number of instances that are currently associated with the service. Instances that were previously associated with the service but that are deleted aren't included in the count. The count might not reflect pending registrations and deregistrations.

              
            

            - **DnsConfig** *(dict) --* 

              Information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

              
              

              - **NamespaceId** *(string) --* 

                The ID of the namespace to use for DNS configuration.

                
              

              - **RoutingPolicy** *(string) --* 

                The routing policy that you want to apply to all Route 53 DNS records that Cloud Map creates when you register an instance and specify this service.

                 

                .. note::

                   

                  If you want to use this service to register instances that create alias records, specify ``WEIGHTED`` for the routing policy.

                   

                 

                You can specify the following values:

                  MULTIVALUE  

                If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.

                 

                For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.

                 

                If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.

                 

                For more information about the multivalue routing policy, see `Multivalue Answer Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue>`__ in the *Route 53 Developer Guide* .

                  WEIGHTED  

                Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.

                 

                For example, suppose that the service includes configurations for one ``A`` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.

                 

                If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.

                 

                For more information about the weighted routing policy, see `Weighted Routing <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted>`__ in the *Route 53 Developer Guide* .

                  
              

              - **DnsRecords** *(list) --* 

                An array that contains one ``DnsRecord`` object for each Route 53 DNS record that you want Cloud Map to create when you register an instance.

                
                

                - *(dict) --* 

                  A complex type that contains information about the Route 53 DNS records that you want Cloud Map to create when you register an instance.

                  
                  

                  - **Type** *(string) --* 

                    The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. You can specify values for ``Type`` in the following combinations:

                     

                     
                    * **``A`` **   
                     
                    * **``AAAA`` **   
                     
                    * **``A`` ** and ** ``AAAA`` **   
                     
                    * **``SRV`` **   
                     
                    * **``CNAME`` **   
                     

                     

                    If you want Cloud Map to create a Route 53 alias record when you register an instance, specify ``A`` or ``AAAA`` for ``Type`` .

                     

                    You specify other settings, such as the IP address for ``A`` and ``AAAA`` records, when you register an instance. For more information, see `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ .

                     

                    The following values are supported:

                      A  

                    Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.

                      AAAA  

                    Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.

                      CNAME  

                    Route 53 returns the domain name of the resource, such as www.example.com. Note the following:

                     

                     
                    * You specify the domain name that you want to route traffic to when you register an instance. For more information, see `Attributes <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes>`__ in the topic `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ . 
                     
                    * You must specify ``WEIGHTED`` for the value of ``RoutingPolicy`` . 
                     
                    * You can't specify both ``CNAME`` for ``Type`` and settings for ``HealthCheckConfig`` . If you do, the request will fail with an ``InvalidInput`` error. 
                     

                      SRV  

                    Route 53 returns the value for an ``SRV`` record. The value for an ``SRV`` record uses the following values:

                     

                     ``priority weight port service-hostname``  

                     

                    Note the following about the values:

                     

                     
                    * The values of ``priority`` and ``weight`` are both set to ``1`` and can't be changed.  
                     
                    * The value of ``port`` comes from the value that you specify for the ``AWS_INSTANCE_PORT`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request. 
                     
                    * The value of ``service-hostname`` is a concatenation of the following values: 

                       
                      * The value that you specify for ``InstanceId`` when you register an instance. 
                       
                      * The name of the service. 
                       
                      * The name of the namespace.  
                       

                     

                    For example, if the value of ``InstanceId`` is ``test`` , the name of the service is ``backend`` , and the name of the namespace is ``example.com`` , the value of ``service-hostname`` is the following:

                     

                     ``test.backend.example.com``  

                     
                     

                     

                    If you specify settings for an ``SRV`` record, note the following:

                     

                     
                    * If you specify values for ``AWS_INSTANCE_IPV4`` , ``AWS_INSTANCE_IPV6`` , or both in the ``RegisterInstance`` request, Cloud Map automatically creates ``A`` and/or ``AAAA`` records that have the same name as the value of ``service-hostname`` in the ``SRV`` record. You can ignore these records. 
                     
                    * If you're using a system that requires a specific ``SRV`` format, such as HAProxy, see the `Name <https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html#cloudmap-CreateService-request-Name>`__ element in the documentation about ``CreateService`` for information about how to specify the correct name format. 
                     

                      
                  

                  - **TTL** *(integer) --* 

                    The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.

                     

                    .. note::

                       

                      Alias records don't include a TTL because Route 53 uses the TTL for the Amazon Web Services resource that an alias record routes traffic to. If you include the ``AWS_ALIAS_DNS_NAME`` attribute when you submit a `RegisterInstance <https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html>`__ request, the ``TTL`` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.

                       

                    
              
            
          
            

            - **HealthCheckConfig** *(dict) --* 

               *Public DNS and HTTP namespaces only.* Settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in ``DnsConfig`` .

              
              

              - **Type** *(string) --* 

                The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.

                 

                .. warning::

                   

                  You can't change the value of ``Type`` after you create a health check.

                   

                 

                You can create the following types of health checks:

                 

                 
                * **HTTP** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400. 
                 
                * **HTTPS** : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400. 

                .. warning::

                   If you specify HTTPS for the value of ``Type`` , the endpoint must support TLS v1.0 or later. 

                 
                 
                * **TCP** : Route 53 tries to establish a TCP connection. If you specify ``TCP`` for ``Type`` , don't specify a value for ``ResourcePath`` . 
                 

                 

                For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

                
              

              - **ResourcePath** *(string) --* 

                The path that you want Route 53 to request when performing health checks. The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is ``/docs/route53-health-check.html`` . Route 53 automatically adds the DNS name for the service. If you don't specify a value for ``ResourcePath`` , the default value is ``/`` .

                 

                If you specify ``TCP`` for ``Type`` , you must *not* specify a value for ``ResourcePath`` .

                
              

              - **FailureThreshold** *(integer) --* 

                The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around. For more information, see `How Route 53 Determines Whether an Endpoint Is Healthy <https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html>`__ in the *Route 53 Developer Guide* .

                
          
            

            - **HealthCheckCustomConfig** *(dict) --* 

              Information about an optional custom health check. A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:

               

               
              * You can't use a health check that's defined by ``HealthCheckConfig`` because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.) 
               
              * You want to use a third-party health checker regardless of where your resources are located. 
               

               

              .. warning::

                 

                If you specify a health check configuration, you can specify either ``HealthCheckCustomConfig`` or ``HealthCheckConfig`` but not both.

                 

              
              

              - **FailureThreshold** *(integer) --* 

                .. warning::

                   

                  This parameter is no longer supported and is always set to 1. Cloud Map waits for approximately 30 seconds after receiving an ``UpdateInstanceCustomHealthStatus`` request before changing the status of the service instance.

                   

                 

                The number of 30-second intervals that you want Cloud Map to wait after receiving an ``UpdateInstanceCustomHealthStatus`` request before it changes the health status of a service instance.

                 

                Sending a second or subsequent ``UpdateInstanceCustomHealthStatus`` request with the same value before 30 seconds has passed doesn't accelerate the change. Cloud Map still waits ``30`` seconds after the first request to make the change.

                
          
            

            - **CreateDate** *(datetime) --* 

              The date and time that the service was created.

              
        
      
    