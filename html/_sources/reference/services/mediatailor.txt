

***********
MediaTailor
***********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: MediaTailor.Client

  A low-level client representing AWS MediaTailor
  

  Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the `AWS Elemental MediaTailor User Guide <https://docs.aws.amazon.com/mediatailor/latest/ug/>`__ .

   

  Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).

  ::

    
    import boto3
    
    client = boto3.client('mediatailor')

  
  These are the available methods:
  
  *   :py:meth:`~MediaTailor.Client.can_paginate`

  
  *   :py:meth:`~MediaTailor.Client.create_channel`

  
  *   :py:meth:`~MediaTailor.Client.create_program`

  
  *   :py:meth:`~MediaTailor.Client.create_source_location`

  
  *   :py:meth:`~MediaTailor.Client.create_vod_source`

  
  *   :py:meth:`~MediaTailor.Client.delete_channel`

  
  *   :py:meth:`~MediaTailor.Client.delete_channel_policy`

  
  *   :py:meth:`~MediaTailor.Client.delete_playback_configuration`

  
  *   :py:meth:`~MediaTailor.Client.delete_program`

  
  *   :py:meth:`~MediaTailor.Client.delete_source_location`

  
  *   :py:meth:`~MediaTailor.Client.delete_vod_source`

  
  *   :py:meth:`~MediaTailor.Client.describe_channel`

  
  *   :py:meth:`~MediaTailor.Client.describe_program`

  
  *   :py:meth:`~MediaTailor.Client.describe_source_location`

  
  *   :py:meth:`~MediaTailor.Client.describe_vod_source`

  
  *   :py:meth:`~MediaTailor.Client.generate_presigned_url`

  
  *   :py:meth:`~MediaTailor.Client.get_channel_policy`

  
  *   :py:meth:`~MediaTailor.Client.get_channel_schedule`

  
  *   :py:meth:`~MediaTailor.Client.get_paginator`

  
  *   :py:meth:`~MediaTailor.Client.get_playback_configuration`

  
  *   :py:meth:`~MediaTailor.Client.get_waiter`

  
  *   :py:meth:`~MediaTailor.Client.list_alerts`

  
  *   :py:meth:`~MediaTailor.Client.list_channels`

  
  *   :py:meth:`~MediaTailor.Client.list_playback_configurations`

  
  *   :py:meth:`~MediaTailor.Client.list_source_locations`

  
  *   :py:meth:`~MediaTailor.Client.list_tags_for_resource`

  
  *   :py:meth:`~MediaTailor.Client.list_vod_sources`

  
  *   :py:meth:`~MediaTailor.Client.put_channel_policy`

  
  *   :py:meth:`~MediaTailor.Client.put_playback_configuration`

  
  *   :py:meth:`~MediaTailor.Client.start_channel`

  
  *   :py:meth:`~MediaTailor.Client.stop_channel`

  
  *   :py:meth:`~MediaTailor.Client.tag_resource`

  
  *   :py:meth:`~MediaTailor.Client.untag_resource`

  
  *   :py:meth:`~MediaTailor.Client.update_channel`

  
  *   :py:meth:`~MediaTailor.Client.update_source_location`

  
  *   :py:meth:`~MediaTailor.Client.update_vod_source`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_channel(**kwargs)

    

    Creates a channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/CreateChannel>`_    


    **Request Syntax** 
    ::

      response = client.create_channel(
          ChannelName='string',
          Outputs=[
              {
                  'DashPlaylistSettings': {
                      'ManifestWindowSeconds': 123,
                      'MinBufferTimeSeconds': 123,
                      'MinUpdatePeriodSeconds': 123,
                      'SuggestedPresentationDelaySeconds': 123
                  },
                  'HlsPlaylistSettings': {
                      'ManifestWindowSeconds': 123
                  },
                  'ManifestName': 'string',
                  'SourceGroup': 'string'
              },
          ],
          PlaybackMode='LOOP',
          Tags={
              'string': 'string'
          }
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type Outputs: list
    :param Outputs: **[REQUIRED]** 

      The channel's output properties.

      

    
      - *(dict) --* 

        The ouput configuration for this channel.

        

      
        - **DashPlaylistSettings** *(dict) --* 

          DASH manifest configuration parameters.

          

        
          - **ManifestWindowSeconds** *(integer) --* 

            The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

            

          
          - **MinBufferTimeSeconds** *(integer) --* 

            Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.

            

          
          - **MinUpdatePeriodSeconds** *(integer) --* 

            Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

            

          
          - **SuggestedPresentationDelaySeconds** *(integer) --* 

            Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

            

          
        
        - **HlsPlaylistSettings** *(dict) --* 

          HLS playlist configuration parameters.

          

        
          - **ManifestWindowSeconds** *(integer) --* 

            The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

            

          
        
        - **ManifestName** *(string) --* **[REQUIRED]** 

          The name of the manifest for the channel. The name appears in the PlaybackUrl.

          

        
        - **SourceGroup** *(string) --* **[REQUIRED]** 

          A string used to match which HttpPackageConfiguration is used for each VodSource.

          

        
      
  
    :type PlaybackMode: string
    :param PlaybackMode: **[REQUIRED]** 

      The type of playback mode for this channel. The only supported value is LOOP.

      

    
    :type Tags: dict
    :param Tags: 

      The tags to assign to the channel.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'ChannelName': 'string',
            'ChannelState': 'RUNNING'|'STOPPED',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1),
            'Outputs': [
                {
                    'DashPlaylistSettings': {
                        'ManifestWindowSeconds': 123,
                        'MinBufferTimeSeconds': 123,
                        'MinUpdatePeriodSeconds': 123,
                        'SuggestedPresentationDelaySeconds': 123
                    },
                    'HlsPlaylistSettings': {
                        'ManifestWindowSeconds': 123
                    },
                    'ManifestName': 'string',
                    'PlaybackUrl': 'string',
                    'SourceGroup': 'string'
                },
            ],
            'PlaybackMode': 'string',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Arn** *(string) --* 

          The ARN of the channel.

          
        

        - **ChannelName** *(string) --* 

          The name of the channel.

          
        

        - **ChannelState** *(string) --* 

          Indicates whether the channel is in a running state or not.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp of when the channel was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          The timestamp of when the channel was last modified.

          
        

        - **Outputs** *(list) --* 

          The channel's output properties.

          
          

          - *(dict) --* 

            This response includes only the "property" : "type" property.

            
            

            - **DashPlaylistSettings** *(dict) --* 

              DASH manifest configuration settings.

              
              

              - **ManifestWindowSeconds** *(integer) --* 

                The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                
              

              - **MinBufferTimeSeconds** *(integer) --* 

                Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
              

              - **MinUpdatePeriodSeconds** *(integer) --* 

                Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
              

              - **SuggestedPresentationDelaySeconds** *(integer) --* 

                Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
          
            

            - **HlsPlaylistSettings** *(dict) --* 

              HLS manifest configuration settings.

              
              

              - **ManifestWindowSeconds** *(integer) --* 

                The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                
          
            

            - **ManifestName** *(string) --* 

              The name of the manifest for the channel that will appear in the channel output's playback URL.

              
            

            - **PlaybackUrl** *(string) --* 

              The URL used for playback by content players.

              
            

            - **SourceGroup** *(string) --* 

              A string used to associate a package configuration source group with a channel output.

              
        
      
        

        - **PlaybackMode** *(string) --* 

          The type of playback for this channel. The only supported value is LOOP.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the channel.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    

  .. py:method:: create_program(**kwargs)

    

    Creates a program.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/CreateProgram>`_    


    **Request Syntax** 
    ::

      response = client.create_program(
          AdBreaks=[
              {
                  'MessageType': 'SPLICE_INSERT',
                  'OffsetMillis': 123,
                  'Slate': {
                      'SourceLocationName': 'string',
                      'VodSourceName': 'string'
                  },
                  'SpliceInsertMessage': {
                      'AvailNum': 123,
                      'AvailsExpected': 123,
                      'SpliceEventId': 123,
                      'UniqueProgramId': 123
                  }
              },
          ],
          ChannelName='string',
          ProgramName='string',
          ScheduleConfiguration={
              'Transition': {
                  'RelativePosition': 'BEFORE_PROGRAM'|'AFTER_PROGRAM',
                  'RelativeProgram': 'string',
                  'Type': 'string'
              }
          },
          SourceLocationName='string',
          VodSourceName='string'
      )
    :type AdBreaks: list
    :param AdBreaks: 

      The ad break configuration settings.

      

    
      - *(dict) --* 

        Ad break configuration parameters.

        

      
        - **MessageType** *(string) --* 

          The SCTE-35 ad insertion type. Accepted value: SPLICE_INSERT.

          

        
        - **OffsetMillis** *(integer) --* 

          How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.

          

        
        - **Slate** *(dict) --* 

          Ad break slate configuration.

          

        
          - **SourceLocationName** *(string) --* 

            The name of the source location where the slate VOD source is stored.

            

          
          - **VodSourceName** *(string) --* 

            The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.

            

          
        
        - **SpliceInsertMessage** *(dict) --* 

          This defines the SCTE-35 splice_insert() message inserted around the ad. For information about using splice_insert(), see the SCTE-35 specficiaiton, section 9.7.3.1.

          

        
          - **AvailNum** *(integer) --* 

            This is written to splice_insert.avail_num, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

            

          
          - **AvailsExpected** *(integer) --* 

            This is written to splice_insert.avails_expected, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

            

          
          - **SpliceEventId** *(integer) --* 

            This is written to splice_insert.splice_event_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 1.

            

          
          - **UniqueProgramId** *(integer) --* 

            This is written to splice_insert.unique_program_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

            

          
        
      
  
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type ProgramName: string
    :param ProgramName: **[REQUIRED]** 

      The identifier for the program you are working on.

      

    
    :type ScheduleConfiguration: dict
    :param ScheduleConfiguration: **[REQUIRED]** 

      The schedule configuration settings.

      

    
      - **Transition** *(dict) --* **[REQUIRED]** 

        Program transition configurations.

        

      
        - **RelativePosition** *(string) --* **[REQUIRED]** 

          The position where this program will be inserted relative to the RelativeProgram. Possible values are: AFTER_PROGRAM, and BEFORE_PROGRAM.

          

        
        - **RelativeProgram** *(string) --* 

          The name of the program that this program will be inserted next to, as defined by RelativePosition.

          

        
        - **Type** *(string) --* **[REQUIRED]** 

          When the program should be played. RELATIVE means that programs will be played back-to-back.

          

        
      
    
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The name of the source location.

      

    
    :type VodSourceName: string
    :param VodSourceName: **[REQUIRED]** 

      The name that's used to refer to a VOD source.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AdBreaks': [
                {
                    'MessageType': 'SPLICE_INSERT',
                    'OffsetMillis': 123,
                    'Slate': {
                        'SourceLocationName': 'string',
                        'VodSourceName': 'string'
                    },
                    'SpliceInsertMessage': {
                        'AvailNum': 123,
                        'AvailsExpected': 123,
                        'SpliceEventId': 123,
                        'UniqueProgramId': 123
                    }
                },
            ],
            'Arn': 'string',
            'ChannelName': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'ProgramName': 'string',
            'SourceLocationName': 'string',
            'VodSourceName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **AdBreaks** *(list) --* 

          The ad break configuration settings.

          
          

          - *(dict) --* 

            Ad break configuration parameters.

            
            

            - **MessageType** *(string) --* 

              The SCTE-35 ad insertion type. Accepted value: SPLICE_INSERT.

              
            

            - **OffsetMillis** *(integer) --* 

              How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.

              
            

            - **Slate** *(dict) --* 

              Ad break slate configuration.

              
              

              - **SourceLocationName** *(string) --* 

                The name of the source location where the slate VOD source is stored.

                
              

              - **VodSourceName** *(string) --* 

                The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.

                
          
            

            - **SpliceInsertMessage** *(dict) --* 

              This defines the SCTE-35 splice_insert() message inserted around the ad. For information about using splice_insert(), see the SCTE-35 specficiaiton, section 9.7.3.1.

              
              

              - **AvailNum** *(integer) --* 

                This is written to splice_insert.avail_num, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

                
              

              - **AvailsExpected** *(integer) --* 

                This is written to splice_insert.avails_expected, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

                
              

              - **SpliceEventId** *(integer) --* 

                This is written to splice_insert.splice_event_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 1.

                
              

              - **UniqueProgramId** *(integer) --* 

                This is written to splice_insert.unique_program_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

                
          
        
      
        

        - **Arn** *(string) --* 

          The ARN of the program.

          
        

        - **ChannelName** *(string) --* 

          The name of the channel that the program belongs to.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp of when the program was created.

          
        

        - **ProgramName** *(string) --* 

          The name of the program.

          
        

        - **SourceLocationName** *(string) --* 

          The source location name.

          
        

        - **VodSourceName** *(string) --* 

          The name that's used to refer to a VOD source.

          
    

  .. py:method:: create_source_location(**kwargs)

    

    Creates a source location on a specific channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/CreateSourceLocation>`_    


    **Request Syntax** 
    ::

      response = client.create_source_location(
          AccessConfiguration={
              'AccessType': 'S3_SIGV4'|'SECRETS_MANAGER_ACCESS_TOKEN',
              'SecretsManagerAccessTokenConfiguration': {
                  'HeaderName': 'string',
                  'SecretArn': 'string',
                  'SecretStringKey': 'string'
              }
          },
          DefaultSegmentDeliveryConfiguration={
              'BaseUrl': 'string'
          },
          HttpConfiguration={
              'BaseUrl': 'string'
          },
          SourceLocationName='string',
          Tags={
              'string': 'string'
          }
      )
    :type AccessConfiguration: dict
    :param AccessConfiguration: 

      Access configuration parameters. Configures the type of authentication used to access content from your source location.

      

    
      - **AccessType** *(string) --* 

        The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.

         

        S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.

         

        Before you can use S3_SIGV4, you must meet these requirements:

         

        • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.

         

        • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.

         

        • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.

        

      
      - **SecretsManagerAccessTokenConfiguration** *(dict) --* 

        AWS Secrets Manager access token configuration parameters.

        

      
        - **HeaderName** *(string) --* 

          The name of the HTTP header used to supply the access token in requests to the source location.

          

        
        - **SecretArn** *(string) --* 

          The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.

          

        
        - **SecretStringKey** *(string) --* 

          The AWS Secrets Manager `SecretString <https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html>`__ key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.

          

        
      
    
    :type DefaultSegmentDeliveryConfiguration: dict
    :param DefaultSegmentDeliveryConfiguration: 

      The optional configuration for the server that serves segments.

      

    
      - **BaseUrl** *(string) --* 

        The hostname of the server that will be used to serve segments. This string must include the protocol, such as **https://** .

        

      
    
    :type HttpConfiguration: dict
    :param HttpConfiguration: **[REQUIRED]** 

      The source's HTTP package configurations.

      

    
      - **BaseUrl** *(string) --* **[REQUIRED]** 

        The base URL for the source location host server. This string must include the protocol, such as **https://** .

        

      
    
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    :type Tags: dict
    :param Tags: 

      The tags to assign to the source location.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AccessConfiguration': {
                'AccessType': 'S3_SIGV4'|'SECRETS_MANAGER_ACCESS_TOKEN',
                'SecretsManagerAccessTokenConfiguration': {
                    'HeaderName': 'string',
                    'SecretArn': 'string',
                    'SecretStringKey': 'string'
                }
            },
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'DefaultSegmentDeliveryConfiguration': {
                'BaseUrl': 'string'
            },
            'HttpConfiguration': {
                'BaseUrl': 'string'
            },
            'LastModifiedTime': datetime(2015, 1, 1),
            'SourceLocationName': 'string',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **AccessConfiguration** *(dict) --* 

          The access configuration for the source location.

          
          

          - **AccessType** *(string) --* 

            The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.

             

            S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.

             

            Before you can use S3_SIGV4, you must meet these requirements:

             

            • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.

             

            • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.

             

            • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.

            
          

          - **SecretsManagerAccessTokenConfiguration** *(dict) --* 

            AWS Secrets Manager access token configuration parameters.

            
            

            - **HeaderName** *(string) --* 

              The name of the HTTP header used to supply the access token in requests to the source location.

              
            

            - **SecretArn** *(string) --* 

              The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.

              
            

            - **SecretStringKey** *(string) --* 

              The AWS Secrets Manager `SecretString <https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html>`__ key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.

              
        
      
        

        - **Arn** *(string) --* 

          The ARN of the source location.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp that indicates when the source location was created.

          
        

        - **DefaultSegmentDeliveryConfiguration** *(dict) --* 

          The default segment delivery configuration settings.

          
          

          - **BaseUrl** *(string) --* 

            The hostname of the server that will be used to serve segments. This string must include the protocol, such as **https://** .

            
      
        

        - **HttpConfiguration** *(dict) --* 

          The HTTP package configuration settings for the source location.

          
          

          - **BaseUrl** *(string) --* 

            The base URL for the source location host server. This string must include the protocol, such as **https://** .

            
      
        

        - **LastModifiedTime** *(datetime) --* 

          The timestamp that indicates when the source location was last modified.

          
        

        - **SourceLocationName** *(string) --* 

          The name of the source location.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the source location.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    

  .. py:method:: create_vod_source(**kwargs)

    

    Creates name for a specific VOD source in a source location.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/CreateVodSource>`_    


    **Request Syntax** 
    ::

      response = client.create_vod_source(
          HttpPackageConfigurations=[
              {
                  'Path': 'string',
                  'SourceGroup': 'string',
                  'Type': 'DASH'|'HLS'
              },
          ],
          SourceLocationName='string',
          Tags={
              'string': 'string'
          },
          VodSourceName='string'
      )
    :type HttpPackageConfigurations: list
    :param HttpPackageConfigurations: **[REQUIRED]** 

      An array of HTTP package configuration parameters for this VOD source.

      

    
      - *(dict) --* 

        The HTTP package configuration properties for the requested VOD source.

        

      
        - **Path** *(string) --* **[REQUIRED]** 

          The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.

          

        
        - **SourceGroup** *(string) --* **[REQUIRED]** 

          The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.

          

        
        - **Type** *(string) --* **[REQUIRED]** 

          The streaming protocol for this package configuration. Supported values are HLS and DASH.

          

        
      
  
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    :type Tags: dict
    :param Tags: 

      The tags to assign to the VOD source.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type VodSourceName: string
    :param VodSourceName: **[REQUIRED]** 

      The identifier for the VOD source you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'HttpPackageConfigurations': [
                {
                    'Path': 'string',
                    'SourceGroup': 'string',
                    'Type': 'DASH'|'HLS'
                },
            ],
            'LastModifiedTime': datetime(2015, 1, 1),
            'SourceLocationName': 'string',
            'Tags': {
                'string': 'string'
            },
            'VodSourceName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Arn** *(string) --* 

          The ARN of the VOD source.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp that indicates when the VOD source was created.

          
        

        - **HttpPackageConfigurations** *(list) --* 

          The HTTP package configurations.

          
          

          - *(dict) --* 

            The HTTP package configuration properties for the requested VOD source.

            
            

            - **Path** *(string) --* 

              The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.

              
            

            - **SourceGroup** *(string) --* 

              The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.

              
            

            - **Type** *(string) --* 

              The streaming protocol for this package configuration. Supported values are HLS and DASH.

              
        
      
        

        - **LastModifiedTime** *(datetime) --* 

          The ARN for the VOD source.

          
        

        - **SourceLocationName** *(string) --* 

          The name of the source location associated with the VOD source.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the VOD source.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **VodSourceName** *(string) --* 

          The name of the VOD source.

          
    

  .. py:method:: delete_channel(**kwargs)

    

    Deletes a channel. You must stop the channel before it can be deleted.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DeleteChannel>`_    


    **Request Syntax** 
    ::

      response = client.delete_channel(
          ChannelName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: delete_channel_policy(**kwargs)

    

    Deletes a channel's IAM policy.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DeleteChannelPolicy>`_    


    **Request Syntax** 
    ::

      response = client.delete_channel_policy(
          ChannelName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: delete_playback_configuration(**kwargs)

    

    Deletes the playback configuration for the specified name.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DeletePlaybackConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.delete_playback_configuration(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The identifier for the playback configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        The request was successful and there is no content in the response.

        
    

  .. py:method:: delete_program(**kwargs)

    

    Deletes a specific program on a specific channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DeleteProgram>`_    


    **Request Syntax** 
    ::

      response = client.delete_program(
          ChannelName='string',
          ProgramName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type ProgramName: string
    :param ProgramName: **[REQUIRED]** 

      The identifier for the program you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: delete_source_location(**kwargs)

    

    Deletes a source location on a specific channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DeleteSourceLocation>`_    


    **Request Syntax** 
    ::

      response = client.delete_source_location(
          SourceLocationName='string'
      )
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: delete_vod_source(**kwargs)

    

    Deletes a specific VOD source in a specific source location.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DeleteVodSource>`_    


    **Request Syntax** 
    ::

      response = client.delete_vod_source(
          SourceLocationName='string',
          VodSourceName='string'
      )
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    :type VodSourceName: string
    :param VodSourceName: **[REQUIRED]** 

      The identifier for the VOD source you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: describe_channel(**kwargs)

    

    Describes the properties of a specific channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DescribeChannel>`_    


    **Request Syntax** 
    ::

      response = client.describe_channel(
          ChannelName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'ChannelName': 'string',
            'ChannelState': 'RUNNING'|'STOPPED',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1),
            'Outputs': [
                {
                    'DashPlaylistSettings': {
                        'ManifestWindowSeconds': 123,
                        'MinBufferTimeSeconds': 123,
                        'MinUpdatePeriodSeconds': 123,
                        'SuggestedPresentationDelaySeconds': 123
                    },
                    'HlsPlaylistSettings': {
                        'ManifestWindowSeconds': 123
                    },
                    'ManifestName': 'string',
                    'PlaybackUrl': 'string',
                    'SourceGroup': 'string'
                },
            ],
            'PlaybackMode': 'string',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Arn** *(string) --* 

          The ARN of the channel.

          
        

        - **ChannelName** *(string) --* 

          The name of the channel.

          
        

        - **ChannelState** *(string) --* 

          Indicates whether the channel is in a running state or not.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp of when the channel was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          The timestamp of when the channel was last modified.

          
        

        - **Outputs** *(list) --* 

          The channel's output properties.

          
          

          - *(dict) --* 

            This response includes only the "property" : "type" property.

            
            

            - **DashPlaylistSettings** *(dict) --* 

              DASH manifest configuration settings.

              
              

              - **ManifestWindowSeconds** *(integer) --* 

                The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                
              

              - **MinBufferTimeSeconds** *(integer) --* 

                Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
              

              - **MinUpdatePeriodSeconds** *(integer) --* 

                Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
              

              - **SuggestedPresentationDelaySeconds** *(integer) --* 

                Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
          
            

            - **HlsPlaylistSettings** *(dict) --* 

              HLS manifest configuration settings.

              
              

              - **ManifestWindowSeconds** *(integer) --* 

                The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                
          
            

            - **ManifestName** *(string) --* 

              The name of the manifest for the channel that will appear in the channel output's playback URL.

              
            

            - **PlaybackUrl** *(string) --* 

              The URL used for playback by content players.

              
            

            - **SourceGroup** *(string) --* 

              A string used to associate a package configuration source group with a channel output.

              
        
      
        

        - **PlaybackMode** *(string) --* 

          The type of playback for this channel. The only supported value is LOOP.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the channel.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    

  .. py:method:: describe_program(**kwargs)

    

    Retrieves the properties of the requested program.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DescribeProgram>`_    


    **Request Syntax** 
    ::

      response = client.describe_program(
          ChannelName='string',
          ProgramName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type ProgramName: string
    :param ProgramName: **[REQUIRED]** 

      The identifier for the program you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AdBreaks': [
                {
                    'MessageType': 'SPLICE_INSERT',
                    'OffsetMillis': 123,
                    'Slate': {
                        'SourceLocationName': 'string',
                        'VodSourceName': 'string'
                    },
                    'SpliceInsertMessage': {
                        'AvailNum': 123,
                        'AvailsExpected': 123,
                        'SpliceEventId': 123,
                        'UniqueProgramId': 123
                    }
                },
            ],
            'Arn': 'string',
            'ChannelName': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'ProgramName': 'string',
            'SourceLocationName': 'string',
            'VodSourceName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **AdBreaks** *(list) --* 

          The ad break configuration settings.

          
          

          - *(dict) --* 

            Ad break configuration parameters.

            
            

            - **MessageType** *(string) --* 

              The SCTE-35 ad insertion type. Accepted value: SPLICE_INSERT.

              
            

            - **OffsetMillis** *(integer) --* 

              How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.

              
            

            - **Slate** *(dict) --* 

              Ad break slate configuration.

              
              

              - **SourceLocationName** *(string) --* 

                The name of the source location where the slate VOD source is stored.

                
              

              - **VodSourceName** *(string) --* 

                The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.

                
          
            

            - **SpliceInsertMessage** *(dict) --* 

              This defines the SCTE-35 splice_insert() message inserted around the ad. For information about using splice_insert(), see the SCTE-35 specficiaiton, section 9.7.3.1.

              
              

              - **AvailNum** *(integer) --* 

                This is written to splice_insert.avail_num, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

                
              

              - **AvailsExpected** *(integer) --* 

                This is written to splice_insert.avails_expected, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

                
              

              - **SpliceEventId** *(integer) --* 

                This is written to splice_insert.splice_event_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 1.

                
              

              - **UniqueProgramId** *(integer) --* 

                This is written to splice_insert.unique_program_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.

                
          
        
      
        

        - **Arn** *(string) --* 

          The ARN of the program.

          
        

        - **ChannelName** *(string) --* 

          The name of the channel that the program belongs to.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp of when the program was created.

          
        

        - **ProgramName** *(string) --* 

          The name of the program.

          
        

        - **SourceLocationName** *(string) --* 

          The source location name.

          
        

        - **VodSourceName** *(string) --* 

          The name that's used to refer to a VOD source.

          
    

  .. py:method:: describe_source_location(**kwargs)

    

    Retrieves the properties of the requested source location.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DescribeSourceLocation>`_    


    **Request Syntax** 
    ::

      response = client.describe_source_location(
          SourceLocationName='string'
      )
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AccessConfiguration': {
                'AccessType': 'S3_SIGV4'|'SECRETS_MANAGER_ACCESS_TOKEN',
                'SecretsManagerAccessTokenConfiguration': {
                    'HeaderName': 'string',
                    'SecretArn': 'string',
                    'SecretStringKey': 'string'
                }
            },
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'DefaultSegmentDeliveryConfiguration': {
                'BaseUrl': 'string'
            },
            'HttpConfiguration': {
                'BaseUrl': 'string'
            },
            'LastModifiedTime': datetime(2015, 1, 1),
            'SourceLocationName': 'string',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **AccessConfiguration** *(dict) --* 

          The access configuration for the source location.

          
          

          - **AccessType** *(string) --* 

            The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.

             

            S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.

             

            Before you can use S3_SIGV4, you must meet these requirements:

             

            • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.

             

            • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.

             

            • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.

            
          

          - **SecretsManagerAccessTokenConfiguration** *(dict) --* 

            AWS Secrets Manager access token configuration parameters.

            
            

            - **HeaderName** *(string) --* 

              The name of the HTTP header used to supply the access token in requests to the source location.

              
            

            - **SecretArn** *(string) --* 

              The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.

              
            

            - **SecretStringKey** *(string) --* 

              The AWS Secrets Manager `SecretString <https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html>`__ key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.

              
        
      
        

        - **Arn** *(string) --* 

          The ARN of the source location.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp that indicates when the source location was created.

          
        

        - **DefaultSegmentDeliveryConfiguration** *(dict) --* 

          The default segment delivery configuration settings.

          
          

          - **BaseUrl** *(string) --* 

            The hostname of the server that will be used to serve segments. This string must include the protocol, such as **https://** .

            
      
        

        - **HttpConfiguration** *(dict) --* 

          The HTTP package configuration settings for the source location.

          
          

          - **BaseUrl** *(string) --* 

            The base URL for the source location host server. This string must include the protocol, such as **https://** .

            
      
        

        - **LastModifiedTime** *(datetime) --* 

          The timestamp that indicates when the source location was last modified.

          
        

        - **SourceLocationName** *(string) --* 

          The name of the source location.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the source location.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    

  .. py:method:: describe_vod_source(**kwargs)

    

    Provides details about a specific VOD source in a specific source location.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/DescribeVodSource>`_    


    **Request Syntax** 
    ::

      response = client.describe_vod_source(
          SourceLocationName='string',
          VodSourceName='string'
      )
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    :type VodSourceName: string
    :param VodSourceName: **[REQUIRED]** 

      The identifier for the VOD source you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'HttpPackageConfigurations': [
                {
                    'Path': 'string',
                    'SourceGroup': 'string',
                    'Type': 'DASH'|'HLS'
                },
            ],
            'LastModifiedTime': datetime(2015, 1, 1),
            'SourceLocationName': 'string',
            'Tags': {
                'string': 'string'
            },
            'VodSourceName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Arn** *(string) --* 

          The ARN of the VOD source.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp that indicates when the VOD source was created.

          
        

        - **HttpPackageConfigurations** *(list) --* 

          The HTTP package configurations.

          
          

          - *(dict) --* 

            The HTTP package configuration properties for the requested VOD source.

            
            

            - **Path** *(string) --* 

              The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.

              
            

            - **SourceGroup** *(string) --* 

              The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.

              
            

            - **Type** *(string) --* 

              The streaming protocol for this package configuration. Supported values are HLS and DASH.

              
        
      
        

        - **LastModifiedTime** *(datetime) --* 

          The ARN for the VOD source.

          
        

        - **SourceLocationName** *(string) --* 

          The name of the source location associated with the VOD source.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the VOD source.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **VodSourceName** *(string) --* 

          The name of the VOD source.

          
    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_channel_policy(**kwargs)

    

    Retrieves information about a channel's IAM policy.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/GetChannelPolicy>`_    


    **Request Syntax** 
    ::

      response = client.get_channel_policy(
          ChannelName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Policy': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Policy** *(string) --* 

          The IAM policy for the channel.

          
    

  .. py:method:: get_channel_schedule(**kwargs)

    

    Retrieves information about your channel's schedule.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/GetChannelSchedule>`_    


    **Request Syntax** 
    ::

      response = client.get_channel_schedule(
          ChannelName='string',
          DurationMinutes='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type DurationMinutes: string
    :param DurationMinutes: 

      The schedule duration in minutes. The maximum duration is 4320 minutes (three days).

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Upper bound on number of records to return. The maximum number of results is 100.

      

    
    :type NextToken: string
    :param NextToken: 

      Pagination token from the GET list request. Use the token to fetch the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'ApproximateDurationSeconds': 123,
                    'ApproximateStartTime': datetime(2015, 1, 1),
                    'Arn': 'string',
                    'ChannelName': 'string',
                    'ProgramName': 'string',
                    'ScheduleAdBreaks': [
                        {
                            'ApproximateDurationSeconds': 123,
                            'ApproximateStartTime': datetime(2015, 1, 1),
                            'SourceLocationName': 'string',
                            'VodSourceName': 'string'
                        },
                    ],
                    'SourceLocationName': 'string',
                    'VodSourceName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of schedule entries for the channel.

          
          

          - *(dict) --* 

            The properties for a schedule.

            
            

            - **ApproximateDurationSeconds** *(integer) --* 

              The approximate duration of this program, in seconds.

              
            

            - **ApproximateStartTime** *(datetime) --* 

              The approximate time that the program will start playing.

              
            

            - **Arn** *(string) --* 

              The ARN of the program.

              
            

            - **ChannelName** *(string) --* 

              The name of the channel that uses this schedule.

              
            

            - **ProgramName** *(string) --* 

              The name of the program.

              
            

            - **ScheduleAdBreaks** *(list) --* 

              The schedule's ad break properties.

              
              

              - *(dict) --* 

                The schedule's ad break properties.

                
                

                - **ApproximateDurationSeconds** *(integer) --* 

                  The approximate duration of the ad break, in seconds.

                  
                

                - **ApproximateStartTime** *(datetime) --* 

                  The approximate time that the ad will start playing.

                  
                

                - **SourceLocationName** *(string) --* 

                  The name of the source location containing the VOD source used for the ad break.

                  
                

                - **VodSourceName** *(string) --* 

                  The name of the VOD source used for the ad break.

                  
            
          
            

            - **SourceLocationName** *(string) --* 

              The name of the source location.

              
            

            - **VodSourceName** *(string) --* 

              The name of the VOD source.

              
        
      
        

        - **NextToken** *(string) --* 

          Pagination token from the GET list request. Use the token to fetch the next page of results.

          
    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_playback_configuration(**kwargs)

    

    Returns the playback configuration for the specified name.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/GetPlaybackConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_playback_configuration(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The identifier for the playback configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AdDecisionServerUrl': 'string',
            'AvailSuppression': {
                'Mode': 'OFF'|'BEHIND_LIVE_EDGE',
                'Value': 'string'
            },
            'Bumper': {
                'EndUrl': 'string',
                'StartUrl': 'string'
            },
            'CdnConfiguration': {
                'AdSegmentUrlPrefix': 'string',
                'ContentSegmentUrlPrefix': 'string'
            },
            'ConfigurationAliases': {
                'string': {
                    'string': 'string'
                }
            },
            'DashConfiguration': {
                'ManifestEndpointPrefix': 'string',
                'MpdLocation': 'string',
                'OriginManifestType': 'SINGLE_PERIOD'|'MULTI_PERIOD'
            },
            'HlsConfiguration': {
                'ManifestEndpointPrefix': 'string'
            },
            'LivePreRollConfiguration': {
                'AdDecisionServerUrl': 'string',
                'MaxDurationSeconds': 123
            },
            'ManifestProcessingRules': {
                'AdMarkerPassthrough': {
                    'Enabled': True|False
                }
            },
            'Name': 'string',
            'PersonalizationThresholdSeconds': 123,
            'PlaybackConfigurationArn': 'string',
            'PlaybackEndpointPrefix': 'string',
            'SessionInitializationEndpointPrefix': 'string',
            'SlateAdUrl': 'string',
            'Tags': {
                'string': 'string'
            },
            'TranscodeProfileName': 'string',
            'VideoContentSourceUrl': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **AdDecisionServerUrl** *(string) --* 

          The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.

          
        

        - **AvailSuppression** *(dict) --* 

          The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see `Ad Suppression <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

          
          

          - **Mode** *(string) --* 

            Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.

            
          

          - **Value** *(string) --* 

            A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.

            
      
        

        - **Bumper** *(dict) --* 

          The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see `Bumpers <https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html>`__ .

          
          

          - **EndUrl** *(string) --* 

            The URL for the end bumper asset.

            
          

          - **StartUrl** *(string) --* 

            The URL for the start bumper asset.

            
      
        

        - **CdnConfiguration** *(dict) --* 

          The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.

          
          

          - **AdSegmentUrlPrefix** *(string) --* 

            A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.

            
          

          - **ContentSegmentUrlPrefix** *(string) --* 

            A content delivery network (CDN) to cache content segments, so that content requests don’t always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.

            
      
        

        - **ConfigurationAliases** *(dict) --* 

          The player parameters and aliases used as dynamic variables during session initialization. For more information, see `Domain Variables <https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html>`__ .

          
          

          - *(string) --* 

            The dynamic variable that has aliases.

            
            

            - *(dict) --* 

              Map of aliases to the value to be used at request time.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
      
    
        

        - **DashConfiguration** *(dict) --* 

          The configuration for DASH content.

          
          

          - **ManifestEndpointPrefix** *(string) --* 

            The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.

            
          

          - **MpdLocation** *(string) --* 

            The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.

            
          

          - **OriginManifestType** *(string) --* 

            The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.

            
      
        

        - **HlsConfiguration** *(dict) --* 

          The configuration for HLS content.

          
          

          - **ManifestEndpointPrefix** *(string) --* 

            The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.

            
      
        

        - **LivePreRollConfiguration** *(dict) --* 

          The configuration for pre-roll ad insertion.

          
          

          - **AdDecisionServerUrl** *(string) --* 

            The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.

            
          

          - **MaxDurationSeconds** *(integer) --* The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
      
        

        - **ManifestProcessingRules** *(dict) --* 

          The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.

          
          

          - **AdMarkerPassthrough** *(dict) --* 

            For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.

             

            No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.

            
            

            - **Enabled** *(boolean) --* 

              Enables ad marker passthrough for your configuration.

              
        
      
        

        - **Name** *(string) --* 

          The identifier for the playback configuration.

          
        

        - **PersonalizationThresholdSeconds** *(integer) --* 

          Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to *ad replacement* in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see `Ad Behavior in AWS Elemental MediaTailor <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

          
        

        - **PlaybackConfigurationArn** *(string) --* 

          The Amazon Resource Name (ARN) for the playback configuration.

          
        

        - **PlaybackEndpointPrefix** *(string) --* 

          The URL that the player accesses to get a manifest from AWS Elemental MediaTailor. This session will use server-side reporting.

          
        

        - **SessionInitializationEndpointPrefix** *(string) --* 

          The URL that the player uses to initialize a session that uses client-side reporting.

          
        

        - **SlateAdUrl** *(string) --* 

          The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID playback configurations. For VPAID, the slate is required because MediaTailor provides it in the slots designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the playback configuration.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **TranscodeProfileName** *(string) --* 

          The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.

          
        

        - **VideoContentSourceUrl** *(string) --* 

          The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.

          
    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_alerts(**kwargs)

    

    Returns a list of alerts for the given resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListAlerts>`_    


    **Request Syntax** 
    ::

      response = client.list_alerts(
          MaxResults=123,
          NextToken='string',
          ResourceArn='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Upper bound on number of records to return. The maximum number of results is 100.

      

    
    :type NextToken: string
    :param NextToken: 

      Pagination token from the GET list request. Use the token to fetch the next page of results.

      

    
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'AlertCode': 'string',
                    'AlertMessage': 'string',
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'RelatedResourceArns': [
                        'string',
                    ],
                    'ResourceArn': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of alerts that are associated with this resource.

          
          

          - *(dict) --* 

            Alert configuration parameters.

            
            

            - **AlertCode** *(string) --* 

              The code for the alert. For example, NOT_PROCESSED.

              
            

            - **AlertMessage** *(string) --* 

              If an alert is generated for a resource, an explanation of the reason for the alert.

              
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp when the alert was last modified.

              
            

            - **RelatedResourceArns** *(list) --* 

              The Amazon Resource Names (ARNs) related to this alert.

              
              

              - *(string) --* 
          
            

            - **ResourceArn** *(string) --* 

              The Amazon Resource Name (ARN) of the resource.

              
        
      
        

        - **NextToken** *(string) --* 

          Pagination token from the list request. Use the token to fetch the next page of results.

          
    

  .. py:method:: list_channels(**kwargs)

    

    Retrieves a list of channels that are associated with this account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListChannels>`_    


    **Request Syntax** 
    ::

      response = client.list_channels(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Upper bound on number of records to return. The maximum number of results is 100.

      

    
    :type NextToken: string
    :param NextToken: 

      Pagination token from the GET list request. Use the token to fetch the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'Arn': 'string',
                    'ChannelName': 'string',
                    'ChannelState': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'Outputs': [
                        {
                            'DashPlaylistSettings': {
                                'ManifestWindowSeconds': 123,
                                'MinBufferTimeSeconds': 123,
                                'MinUpdatePeriodSeconds': 123,
                                'SuggestedPresentationDelaySeconds': 123
                            },
                            'HlsPlaylistSettings': {
                                'ManifestWindowSeconds': 123
                            },
                            'ManifestName': 'string',
                            'PlaybackUrl': 'string',
                            'SourceGroup': 'string'
                        },
                    ],
                    'PlaybackMode': 'string',
                    'Tags': {
                        'string': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of channels that are associated with this account.

          
          

          - *(dict) --* 

            The configuration parameters for a channel.

            
            

            - **Arn** *(string) --* 

              The ARN of the channel.

              
            

            - **ChannelName** *(string) --* 

              The name of the channel.

              
            

            - **ChannelState** *(string) --* 

              Returns the state whether the channel is running or not.

              
            

            - **CreationTime** *(datetime) --* 

              The timestamp of when the channel was created.

              
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp of when the channel was last modified.

              
            

            - **Outputs** *(list) --* 

              The channel's output properties.

              
              

              - *(dict) --* 

                This response includes only the "property" : "type" property.

                
                

                - **DashPlaylistSettings** *(dict) --* 

                  DASH manifest configuration settings.

                  
                  

                  - **ManifestWindowSeconds** *(integer) --* 

                    The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                    
                  

                  - **MinBufferTimeSeconds** *(integer) --* 

                    Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.

                    
                  

                  - **MinUpdatePeriodSeconds** *(integer) --* 

                    Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                    
                  

                  - **SuggestedPresentationDelaySeconds** *(integer) --* 

                    Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                    
              
                

                - **HlsPlaylistSettings** *(dict) --* 

                  HLS manifest configuration settings.

                  
                  

                  - **ManifestWindowSeconds** *(integer) --* 

                    The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                    
              
                

                - **ManifestName** *(string) --* 

                  The name of the manifest for the channel that will appear in the channel output's playback URL.

                  
                

                - **PlaybackUrl** *(string) --* 

                  The URL used for playback by content players.

                  
                

                - **SourceGroup** *(string) --* 

                  A string used to associate a package configuration source group with a channel output.

                  
            
          
            

            - **PlaybackMode** *(string) --* 

              The type of playback mode for this channel. Possible values: ONCE or LOOP.

              
            

            - **Tags** *(dict) --* 

              The tags to assign to the channel.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **NextToken** *(string) --* 

          Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.

          
    

  .. py:method:: list_playback_configurations(**kwargs)

    

    Returns a list of the playback configurations defined in AWS Elemental MediaTailor. You can specify a maximum number of configurations to return at a time. The default maximum is 50. Results are returned in pagefuls. If MediaTailor has more configurations than the specified maximum, it provides parameters in the response that you can use to retrieve the next pageful.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListPlaybackConfigurations>`_    


    **Request Syntax** 
    ::

      response = client.list_playback_configurations(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of records to return.

      

    
    :type NextToken: string
    :param NextToken: 

      Pagination token returned by the GET list request when results exceed the maximum allowed. Use the token to fetch the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'AdDecisionServerUrl': 'string',
                    'AvailSuppression': {
                        'Mode': 'OFF'|'BEHIND_LIVE_EDGE',
                        'Value': 'string'
                    },
                    'Bumper': {
                        'EndUrl': 'string',
                        'StartUrl': 'string'
                    },
                    'CdnConfiguration': {
                        'AdSegmentUrlPrefix': 'string',
                        'ContentSegmentUrlPrefix': 'string'
                    },
                    'ConfigurationAliases': {
                        'string': {
                            'string': 'string'
                        }
                    },
                    'DashConfiguration': {
                        'ManifestEndpointPrefix': 'string',
                        'MpdLocation': 'string',
                        'OriginManifestType': 'SINGLE_PERIOD'|'MULTI_PERIOD'
                    },
                    'HlsConfiguration': {
                        'ManifestEndpointPrefix': 'string'
                    },
                    'LivePreRollConfiguration': {
                        'AdDecisionServerUrl': 'string',
                        'MaxDurationSeconds': 123
                    },
                    'ManifestProcessingRules': {
                        'AdMarkerPassthrough': {
                            'Enabled': True|False
                        }
                    },
                    'Name': 'string',
                    'PersonalizationThresholdSeconds': 123,
                    'PlaybackConfigurationArn': 'string',
                    'PlaybackEndpointPrefix': 'string',
                    'SessionInitializationEndpointPrefix': 'string',
                    'SlateAdUrl': 'string',
                    'Tags': {
                        'string': 'string'
                    },
                    'TranscodeProfileName': 'string',
                    'VideoContentSourceUrl': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          Array of playback configurations. This might be all the available configurations or a subset, depending on the settings that you provide and the total number of configurations stored.

          
          

          - *(dict) --* 

            Creates a playback configuration. For information about MediaTailor configurations, see `Working with configurations in AWS Elemental MediaTailor <https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html>`__ .

            
            

            - **AdDecisionServerUrl** *(string) --* 

              The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.

              
            

            - **AvailSuppression** *(dict) --* 

              The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see `Ad Suppression <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

              
              

              - **Mode** *(string) --* 

                Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.

                
              

              - **Value** *(string) --* 

                A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.

                
          
            

            - **Bumper** *(dict) --* 

              The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see `Bumpers <https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html>`__ .

              
              

              - **EndUrl** *(string) --* 

                The URL for the end bumper asset.

                
              

              - **StartUrl** *(string) --* 

                The URL for the start bumper asset.

                
          
            

            - **CdnConfiguration** *(dict) --* 

              The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.

              
              

              - **AdSegmentUrlPrefix** *(string) --* 

                A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.

                
              

              - **ContentSegmentUrlPrefix** *(string) --* 

                A content delivery network (CDN) to cache content segments, so that content requests don’t always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.

                
          
            

            - **ConfigurationAliases** *(dict) --* 

              The player parameters and aliases used as dynamic variables during session initialization. For more information, see `Domain Variables <https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html>`__ .

              
              

              - *(string) --* 

                The dynamic variable that has aliases.

                
                

                - *(dict) --* 

                  Map of aliases to the value to be used at request time.

                  
                  

                  - *(string) --* 
                    

                    - *(string) --* 
              
            
          
        
            

            - **DashConfiguration** *(dict) --* 

              The configuration for a DASH source.

              
              

              - **ManifestEndpointPrefix** *(string) --* 

                The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.

                
              

              - **MpdLocation** *(string) --* 

                The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.

                
              

              - **OriginManifestType** *(string) --* 

                The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.

                
          
            

            - **HlsConfiguration** *(dict) --* 

              The configuration for HLS content.

              
              

              - **ManifestEndpointPrefix** *(string) --* 

                The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.

                
          
            

            - **LivePreRollConfiguration** *(dict) --* 

              The configuration for pre-roll ad insertion.

              
              

              - **AdDecisionServerUrl** *(string) --* 

                The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.

                
              

              - **MaxDurationSeconds** *(integer) --* The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
          
            

            - **ManifestProcessingRules** *(dict) --* 

              The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.

              
              

              - **AdMarkerPassthrough** *(dict) --* 

                For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.

                 

                No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.

                
                

                - **Enabled** *(boolean) --* 

                  Enables ad marker passthrough for your configuration.

                  
            
          
            

            - **Name** *(string) --* 

              The identifier for the playback configuration.

              
            

            - **PersonalizationThresholdSeconds** *(integer) --* 

              Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to *ad replacement* in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see `Ad Behavior in AWS Elemental MediaTailor <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

              
            

            - **PlaybackConfigurationArn** *(string) --* 

              The Amazon Resource Name (ARN) for the playback configuration.

              
            

            - **PlaybackEndpointPrefix** *(string) --* 

              The URL that the player accesses to get a manifest from AWS Elemental MediaTailor.

              
            

            - **SessionInitializationEndpointPrefix** *(string) --* 

              The URL that the player uses to initialize a session that uses client-side reporting.

              
            

            - **SlateAdUrl** *(string) --* 

              The URL for a video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID playback configurations. For VPAID, the slate is required because MediaTailor provides it in the slots designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.

              
            

            - **Tags** *(dict) --* 

              The tags to assign to the playback configuration.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **TranscodeProfileName** *(string) --* 

              The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.

              
            

            - **VideoContentSourceUrl** *(string) --* 

              The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.

              
        
      
        

        - **NextToken** *(string) --* 

          Pagination token returned by the GET list request when results exceed the maximum allowed. Use the token to fetch the next page of results.

          
    

  .. py:method:: list_source_locations(**kwargs)

    

    Retrieves a list of source locations.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListSourceLocations>`_    


    **Request Syntax** 
    ::

      response = client.list_source_locations(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Upper bound on number of records to return. The maximum number of results is 100.

      

    
    :type NextToken: string
    :param NextToken: 

      Pagination token from the GET list request. Use the token to fetch the next page of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'AccessConfiguration': {
                        'AccessType': 'S3_SIGV4'|'SECRETS_MANAGER_ACCESS_TOKEN',
                        'SecretsManagerAccessTokenConfiguration': {
                            'HeaderName': 'string',
                            'SecretArn': 'string',
                            'SecretStringKey': 'string'
                        }
                    },
                    'Arn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'DefaultSegmentDeliveryConfiguration': {
                        'BaseUrl': 'string'
                    },
                    'HttpConfiguration': {
                        'BaseUrl': 'string'
                    },
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'SourceLocationName': 'string',
                    'Tags': {
                        'string': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of source locations.

          
          

          - *(dict) --* 

            This response includes only the "type" : "object" property.

            
            

            - **AccessConfiguration** *(dict) --* 

              The access configuration for the source location.

              
              

              - **AccessType** *(string) --* 

                The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.

                 

                S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.

                 

                Before you can use S3_SIGV4, you must meet these requirements:

                 

                • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.

                 

                • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.

                 

                • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.

                
              

              - **SecretsManagerAccessTokenConfiguration** *(dict) --* 

                AWS Secrets Manager access token configuration parameters.

                
                

                - **HeaderName** *(string) --* 

                  The name of the HTTP header used to supply the access token in requests to the source location.

                  
                

                - **SecretArn** *(string) --* 

                  The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.

                  
                

                - **SecretStringKey** *(string) --* 

                  The AWS Secrets Manager `SecretString <https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html>`__ key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.

                  
            
          
            

            - **Arn** *(string) --* 

              The ARN of the SourceLocation.

              
            

            - **CreationTime** *(datetime) --* 

              The timestamp that indicates when the source location was created.

              
            

            - **DefaultSegmentDeliveryConfiguration** *(dict) --* 

              The default segment delivery configuration.

              
              

              - **BaseUrl** *(string) --* 

                The hostname of the server that will be used to serve segments. This string must include the protocol, such as **https://** .

                
          
            

            - **HttpConfiguration** *(dict) --* 

              The HTTP configuration for the source location.

              
              

              - **BaseUrl** *(string) --* 

                The base URL for the source location host server. This string must include the protocol, such as **https://** .

                
          
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp that indicates when the source location was last modified.

              
            

            - **SourceLocationName** *(string) --* 

              The name of the source location.

              
            

            - **Tags** *(dict) --* 

              The tags assigned to the source location.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **NextToken** *(string) --* 

          Pagination token from the list request. Use the token to fetch the next page of results.

          
    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Returns a list of the tags assigned to the specified playback configuration resource.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the playback configuration. You can get this from the response to any playback configuration request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Tags** *(dict) --* 

          A comma-separated list of tag key:value pairs.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`MediaTailor.Client.exceptions.BadRequestException`

    

  .. py:method:: list_vod_sources(**kwargs)

    

    Lists all the VOD sources in a source location.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListVodSources>`_    


    **Request Syntax** 
    ::

      response = client.list_vod_sources(
          MaxResults=123,
          NextToken='string',
          SourceLocationName='string'
      )
    :type MaxResults: integer
    :param MaxResults: 

      Upper bound on number of records to return. The maximum number of results is 100.

      

    
    :type NextToken: string
    :param NextToken: 

      Pagination token from the GET list request. Use the token to fetch the next page of results.

      

    
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'Arn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'HttpPackageConfigurations': [
                        {
                            'Path': 'string',
                            'SourceGroup': 'string',
                            'Type': 'DASH'|'HLS'
                        },
                    ],
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'SourceLocationName': 'string',
                    'Tags': {
                        'string': 'string'
                    },
                    'VodSourceName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          Lists the VOD sources.

          
          

          - *(dict) --* 

            VOD source configuration parameters.

            
            

            - **Arn** *(string) --* 

              The ARN for the VOD source.

              
            

            - **CreationTime** *(datetime) --* 

              The timestamp that indicates when the VOD source was created.

              
            

            - **HttpPackageConfigurations** *(list) --* 

              The HTTP package configurations for the VOD source.

              
              

              - *(dict) --* 

                The HTTP package configuration properties for the requested VOD source.

                
                

                - **Path** *(string) --* 

                  The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.

                  
                

                - **SourceGroup** *(string) --* 

                  The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.

                  
                

                - **Type** *(string) --* 

                  The streaming protocol for this package configuration. Supported values are HLS and DASH.

                  
            
          
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp that indicates when the VOD source was last modified.

              
            

            - **SourceLocationName** *(string) --* 

              The name of the source location that the VOD source is associated with.

              
            

            - **Tags** *(dict) --* 

              The tags assigned to the VOD source.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **VodSourceName** *(string) --* 

              The name of the VOD source.

              
        
      
        

        - **NextToken** *(string) --* 

          Pagination token from the list request. Use the token to fetch the next page of results.

          
    

  .. py:method:: put_channel_policy(**kwargs)

    

    Creates an IAM policy for the channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/PutChannelPolicy>`_    


    **Request Syntax** 
    ::

      response = client.put_channel_policy(
          ChannelName='string',
          Policy='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type Policy: string
    :param Policy: **[REQUIRED]** 

      Adds an IAM role that determines the permissions of your channel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: put_playback_configuration(**kwargs)

    

    Adds a new playback configuration to AWS Elemental MediaTailor.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/PutPlaybackConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_playback_configuration(
          AdDecisionServerUrl='string',
          AvailSuppression={
              'Mode': 'OFF'|'BEHIND_LIVE_EDGE',
              'Value': 'string'
          },
          Bumper={
              'EndUrl': 'string',
              'StartUrl': 'string'
          },
          CdnConfiguration={
              'AdSegmentUrlPrefix': 'string',
              'ContentSegmentUrlPrefix': 'string'
          },
          ConfigurationAliases={
              'string': {
                  'string': 'string'
              }
          },
          DashConfiguration={
              'MpdLocation': 'string',
              'OriginManifestType': 'SINGLE_PERIOD'|'MULTI_PERIOD'
          },
          LivePreRollConfiguration={
              'AdDecisionServerUrl': 'string',
              'MaxDurationSeconds': 123
          },
          ManifestProcessingRules={
              'AdMarkerPassthrough': {
                  'Enabled': True|False
              }
          },
          Name='string',
          PersonalizationThresholdSeconds=123,
          SlateAdUrl='string',
          Tags={
              'string': 'string'
          },
          TranscodeProfileName='string',
          VideoContentSourceUrl='string'
      )
    :type AdDecisionServerUrl: string
    :param AdDecisionServerUrl: 

      The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.

      

    
    :type AvailSuppression: dict
    :param AvailSuppression: 

      The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see `Ad Suppression <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

      

    
      - **Mode** *(string) --* 

        Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.

        

      
      - **Value** *(string) --* 

        A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.

        

      
    
    :type Bumper: dict
    :param Bumper: 

      The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see `Bumpers <https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html>`__ .

      

    
      - **EndUrl** *(string) --* 

        The URL for the end bumper asset.

        

      
      - **StartUrl** *(string) --* 

        The URL for the start bumper asset.

        

      
    
    :type CdnConfiguration: dict
    :param CdnConfiguration: 

      The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.

      

    
      - **AdSegmentUrlPrefix** *(string) --* 

        A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.

        

      
      - **ContentSegmentUrlPrefix** *(string) --* 

        A content delivery network (CDN) to cache content segments, so that content requests don’t always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.

        

      
    
    :type ConfigurationAliases: dict
    :param ConfigurationAliases: 

      The player parameters and aliases used as dynamic variables during session initialization. For more information, see `Domain Variables <https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html>`__ .

       

    
      - *(string) --* 

        The dynamic variable that has aliases.

        

      
        - *(dict) --* 

          Map of aliases to the value to be used at request time.

          

        
          - *(string) --* 

          
            - *(string) --* 

            
      
    
  

    :type DashConfiguration: dict
    :param DashConfiguration: 

      The configuration for DASH content.

      

    
      - **MpdLocation** *(string) --* 

        The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.

        

      
      - **OriginManifestType** *(string) --* 

        The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.

        

      
    
    :type LivePreRollConfiguration: dict
    :param LivePreRollConfiguration: 

      The configuration for pre-roll ad insertion.

      

    
      - **AdDecisionServerUrl** *(string) --* 

        The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.

        

      
      - **MaxDurationSeconds** *(integer) --* The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.

      
    
    :type ManifestProcessingRules: dict
    :param ManifestProcessingRules: 

      The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.

      

    
      - **AdMarkerPassthrough** *(dict) --* 

        For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.

         

        No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.

        

      
        - **Enabled** *(boolean) --* 

          Enables ad marker passthrough for your configuration.

          

        
      
    
    :type Name: string
    :param Name: 

      The identifier for the playback configuration.

      

    
    :type PersonalizationThresholdSeconds: integer
    :param PersonalizationThresholdSeconds: 

      Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to *ad replacement* in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see `Ad Behavior in AWS Elemental MediaTailor <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

      

    
    :type SlateAdUrl: string
    :param SlateAdUrl: 

      The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.

      

    
    :type Tags: dict
    :param Tags: 

      The tags to assign to the playback configuration.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type TranscodeProfileName: string
    :param TranscodeProfileName: 

      The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.

      

    
    :type VideoContentSourceUrl: string
    :param VideoContentSourceUrl: 

      The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AdDecisionServerUrl': 'string',
            'AvailSuppression': {
                'Mode': 'OFF'|'BEHIND_LIVE_EDGE',
                'Value': 'string'
            },
            'Bumper': {
                'EndUrl': 'string',
                'StartUrl': 'string'
            },
            'CdnConfiguration': {
                'AdSegmentUrlPrefix': 'string',
                'ContentSegmentUrlPrefix': 'string'
            },
            'ConfigurationAliases': {
                'string': {
                    'string': 'string'
                }
            },
            'DashConfiguration': {
                'ManifestEndpointPrefix': 'string',
                'MpdLocation': 'string',
                'OriginManifestType': 'SINGLE_PERIOD'|'MULTI_PERIOD'
            },
            'HlsConfiguration': {
                'ManifestEndpointPrefix': 'string'
            },
            'LivePreRollConfiguration': {
                'AdDecisionServerUrl': 'string',
                'MaxDurationSeconds': 123
            },
            'ManifestProcessingRules': {
                'AdMarkerPassthrough': {
                    'Enabled': True|False
                }
            },
            'Name': 'string',
            'PersonalizationThresholdSeconds': 123,
            'PlaybackConfigurationArn': 'string',
            'PlaybackEndpointPrefix': 'string',
            'SessionInitializationEndpointPrefix': 'string',
            'SlateAdUrl': 'string',
            'Tags': {
                'string': 'string'
            },
            'TranscodeProfileName': 'string',
            'VideoContentSourceUrl': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **AdDecisionServerUrl** *(string) --* 

          The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.

          
        

        - **AvailSuppression** *(dict) --* 

          The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see `Ad Suppression <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

          
          

          - **Mode** *(string) --* 

            Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.

            
          

          - **Value** *(string) --* 

            A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.

            
      
        

        - **Bumper** *(dict) --* 

          The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see `Bumpers <https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html>`__ .

          
          

          - **EndUrl** *(string) --* 

            The URL for the end bumper asset.

            
          

          - **StartUrl** *(string) --* 

            The URL for the start bumper asset.

            
      
        

        - **CdnConfiguration** *(dict) --* 

          The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.

          
          

          - **AdSegmentUrlPrefix** *(string) --* 

            A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.

            
          

          - **ContentSegmentUrlPrefix** *(string) --* 

            A content delivery network (CDN) to cache content segments, so that content requests don’t always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.

            
      
        

        - **ConfigurationAliases** *(dict) --* 

          The player parameters and aliases used as dynamic variables during session initialization. For more information, see `Domain Variables <https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html>`__ .

          
          

          - *(string) --* 

            The dynamic variable that has aliases.

            
            

            - *(dict) --* 

              Map of aliases to the value to be used at request time.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
      
    
        

        - **DashConfiguration** *(dict) --* 

          The configuration for DASH content.

          
          

          - **ManifestEndpointPrefix** *(string) --* 

            The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.

            
          

          - **MpdLocation** *(string) --* 

            The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.

            
          

          - **OriginManifestType** *(string) --* 

            The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.

            
      
        

        - **HlsConfiguration** *(dict) --* 

          The configuration for HLS content.

          
          

          - **ManifestEndpointPrefix** *(string) --* 

            The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.

            
      
        

        - **LivePreRollConfiguration** *(dict) --* 

          The configuration for pre-roll ad insertion.

          
          

          - **AdDecisionServerUrl** *(string) --* 

            The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.

            
          

          - **MaxDurationSeconds** *(integer) --* The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
      
        

        - **ManifestProcessingRules** *(dict) --* 

          The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.

          
          

          - **AdMarkerPassthrough** *(dict) --* 

            For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.

             

            No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.

            
            

            - **Enabled** *(boolean) --* 

              Enables ad marker passthrough for your configuration.

              
        
      
        

        - **Name** *(string) --* 

          The identifier for the playback configuration.

          
        

        - **PersonalizationThresholdSeconds** *(integer) --* 

          Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to *ad replacement* in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see `Ad Behavior in AWS Elemental MediaTailor <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

          
        

        - **PlaybackConfigurationArn** *(string) --* 

          The Amazon Resource Name (ARN) for the playback configuration.

          
        

        - **PlaybackEndpointPrefix** *(string) --* 

          The URL that the player accesses to get a manifest from AWS Elemental MediaTailor. This session will use server-side reporting.

          
        

        - **SessionInitializationEndpointPrefix** *(string) --* 

          The URL that the player uses to initialize a session that uses client-side reporting.

          
        

        - **SlateAdUrl** *(string) --* 

          The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID playback configurations. For VPAID, the slate is required because MediaTailor provides it in the slots designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the playback configuration.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **TranscodeProfileName** *(string) --* 

          The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.

          
        

        - **VideoContentSourceUrl** *(string) --* 

          The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.

          
    

  .. py:method:: start_channel(**kwargs)

    

    Starts a specific channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/StartChannel>`_    


    **Request Syntax** 
    ::

      response = client.start_channel(
          ChannelName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: stop_channel(**kwargs)

    

    Stops a specific channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/StopChannel>`_    


    **Request Syntax** 
    ::

      response = client.stop_channel(
          ChannelName='string'
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
    

  .. py:method:: tag_resource(**kwargs)

    

    Adds tags to the specified playback configuration resource. You can specify one or more tags to add.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceArn='string',
          Tags={
              'string': 'string'
          }
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the playback configuration. You can get this from the response to any playback configuration request.

      

    
    :type Tags: dict
    :param Tags: **[REQUIRED]** 

      A comma-separated list of tag key:value pairs.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`MediaTailor.Client.exceptions.BadRequestException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes tags from the specified playback configuration resource. You can specify one or more tags to remove.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceArn='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the playback configuration. You can get this from the response to any playback configuration request.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      A comma-separated list of the tag keys to remove from the playback configuration.

      

    
      - *(string) --* 

      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`MediaTailor.Client.exceptions.BadRequestException`

    

  .. py:method:: update_channel(**kwargs)

    

    Updates an existing channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/UpdateChannel>`_    


    **Request Syntax** 
    ::

      response = client.update_channel(
          ChannelName='string',
          Outputs=[
              {
                  'DashPlaylistSettings': {
                      'ManifestWindowSeconds': 123,
                      'MinBufferTimeSeconds': 123,
                      'MinUpdatePeriodSeconds': 123,
                      'SuggestedPresentationDelaySeconds': 123
                  },
                  'HlsPlaylistSettings': {
                      'ManifestWindowSeconds': 123
                  },
                  'ManifestName': 'string',
                  'SourceGroup': 'string'
              },
          ]
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type Outputs: list
    :param Outputs: **[REQUIRED]** 

      The channel's output properties.

      

    
      - *(dict) --* 

        The ouput configuration for this channel.

        

      
        - **DashPlaylistSettings** *(dict) --* 

          DASH manifest configuration parameters.

          

        
          - **ManifestWindowSeconds** *(integer) --* 

            The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

            

          
          - **MinBufferTimeSeconds** *(integer) --* 

            Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.

            

          
          - **MinUpdatePeriodSeconds** *(integer) --* 

            Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

            

          
          - **SuggestedPresentationDelaySeconds** *(integer) --* 

            Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

            

          
        
        - **HlsPlaylistSettings** *(dict) --* 

          HLS playlist configuration parameters.

          

        
          - **ManifestWindowSeconds** *(integer) --* 

            The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

            

          
        
        - **ManifestName** *(string) --* **[REQUIRED]** 

          The name of the manifest for the channel. The name appears in the PlaybackUrl.

          

        
        - **SourceGroup** *(string) --* **[REQUIRED]** 

          A string used to match which HttpPackageConfiguration is used for each VodSource.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'ChannelName': 'string',
            'ChannelState': 'RUNNING'|'STOPPED',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1),
            'Outputs': [
                {
                    'DashPlaylistSettings': {
                        'ManifestWindowSeconds': 123,
                        'MinBufferTimeSeconds': 123,
                        'MinUpdatePeriodSeconds': 123,
                        'SuggestedPresentationDelaySeconds': 123
                    },
                    'HlsPlaylistSettings': {
                        'ManifestWindowSeconds': 123
                    },
                    'ManifestName': 'string',
                    'PlaybackUrl': 'string',
                    'SourceGroup': 'string'
                },
            ],
            'PlaybackMode': 'string',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Arn** *(string) --* 

          The ARN of the channel.

          
        

        - **ChannelName** *(string) --* 

          The name of the channel.

          
        

        - **ChannelState** *(string) --* 

          Indicates whether the channel is in a running state or not.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp of when the channel was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          The timestamp of when the channel was last modified.

          
        

        - **Outputs** *(list) --* 

          The channel's output properties.

          
          

          - *(dict) --* 

            This response includes only the "property" : "type" property.

            
            

            - **DashPlaylistSettings** *(dict) --* 

              DASH manifest configuration settings.

              
              

              - **ManifestWindowSeconds** *(integer) --* 

                The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                
              

              - **MinBufferTimeSeconds** *(integer) --* 

                Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
              

              - **MinUpdatePeriodSeconds** *(integer) --* 

                Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
              

              - **SuggestedPresentationDelaySeconds** *(integer) --* 

                Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                
          
            

            - **HlsPlaylistSettings** *(dict) --* 

              HLS manifest configuration settings.

              
              

              - **ManifestWindowSeconds** *(integer) --* 

                The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                
          
            

            - **ManifestName** *(string) --* 

              The name of the manifest for the channel that will appear in the channel output's playback URL.

              
            

            - **PlaybackUrl** *(string) --* 

              The URL used for playback by content players.

              
            

            - **SourceGroup** *(string) --* 

              A string used to associate a package configuration source group with a channel output.

              
        
      
        

        - **PlaybackMode** *(string) --* 

          The type of playback for this channel. The only supported value is LOOP.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the channel.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    

  .. py:method:: update_source_location(**kwargs)

    

    Updates a source location on a specific channel.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/UpdateSourceLocation>`_    


    **Request Syntax** 
    ::

      response = client.update_source_location(
          AccessConfiguration={
              'AccessType': 'S3_SIGV4'|'SECRETS_MANAGER_ACCESS_TOKEN',
              'SecretsManagerAccessTokenConfiguration': {
                  'HeaderName': 'string',
                  'SecretArn': 'string',
                  'SecretStringKey': 'string'
              }
          },
          DefaultSegmentDeliveryConfiguration={
              'BaseUrl': 'string'
          },
          HttpConfiguration={
              'BaseUrl': 'string'
          },
          SourceLocationName='string'
      )
    :type AccessConfiguration: dict
    :param AccessConfiguration: 

      Access configuration parameters. Configures the type of authentication used to access content from your source location.

      

    
      - **AccessType** *(string) --* 

        The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.

         

        S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.

         

        Before you can use S3_SIGV4, you must meet these requirements:

         

        • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.

         

        • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.

         

        • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.

        

      
      - **SecretsManagerAccessTokenConfiguration** *(dict) --* 

        AWS Secrets Manager access token configuration parameters.

        

      
        - **HeaderName** *(string) --* 

          The name of the HTTP header used to supply the access token in requests to the source location.

          

        
        - **SecretArn** *(string) --* 

          The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.

          

        
        - **SecretStringKey** *(string) --* 

          The AWS Secrets Manager `SecretString <https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html>`__ key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.

          

        
      
    
    :type DefaultSegmentDeliveryConfiguration: dict
    :param DefaultSegmentDeliveryConfiguration: 

      The optional configuration for the host server that serves segments.

      

    
      - **BaseUrl** *(string) --* 

        The hostname of the server that will be used to serve segments. This string must include the protocol, such as **https://** .

        

      
    
    :type HttpConfiguration: dict
    :param HttpConfiguration: **[REQUIRED]** 

      The HTTP configuration for the source location.

      

    
      - **BaseUrl** *(string) --* **[REQUIRED]** 

        The base URL for the source location host server. This string must include the protocol, such as **https://** .

        

      
    
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AccessConfiguration': {
                'AccessType': 'S3_SIGV4'|'SECRETS_MANAGER_ACCESS_TOKEN',
                'SecretsManagerAccessTokenConfiguration': {
                    'HeaderName': 'string',
                    'SecretArn': 'string',
                    'SecretStringKey': 'string'
                }
            },
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'DefaultSegmentDeliveryConfiguration': {
                'BaseUrl': 'string'
            },
            'HttpConfiguration': {
                'BaseUrl': 'string'
            },
            'LastModifiedTime': datetime(2015, 1, 1),
            'SourceLocationName': 'string',
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **AccessConfiguration** *(dict) --* 

          The access configuration for the source location.

          
          

          - **AccessType** *(string) --* 

            The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.

             

            S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.

             

            Before you can use S3_SIGV4, you must meet these requirements:

             

            • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.

             

            • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.

             

            • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.

            
          

          - **SecretsManagerAccessTokenConfiguration** *(dict) --* 

            AWS Secrets Manager access token configuration parameters.

            
            

            - **HeaderName** *(string) --* 

              The name of the HTTP header used to supply the access token in requests to the source location.

              
            

            - **SecretArn** *(string) --* 

              The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.

              
            

            - **SecretStringKey** *(string) --* 

              The AWS Secrets Manager `SecretString <https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html>`__ key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.

              
        
      
        

        - **Arn** *(string) --* 

          The ARN of the source location.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp that indicates when the source location was created.

          
        

        - **DefaultSegmentDeliveryConfiguration** *(dict) --* 

          The default segment delivery configuration settings.

          
          

          - **BaseUrl** *(string) --* 

            The hostname of the server that will be used to serve segments. This string must include the protocol, such as **https://** .

            
      
        

        - **HttpConfiguration** *(dict) --* 

          The HTTP package configuration settings for the source location.

          
          

          - **BaseUrl** *(string) --* 

            The base URL for the source location host server. This string must include the protocol, such as **https://** .

            
      
        

        - **LastModifiedTime** *(datetime) --* 

          The timestamp that indicates when the source location was last modified.

          
        

        - **SourceLocationName** *(string) --* 

          The name of the source location.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the source location.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    

  .. py:method:: update_vod_source(**kwargs)

    

    Updates a specific VOD source in a specific source location.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/UpdateVodSource>`_    


    **Request Syntax** 
    ::

      response = client.update_vod_source(
          HttpPackageConfigurations=[
              {
                  'Path': 'string',
                  'SourceGroup': 'string',
                  'Type': 'DASH'|'HLS'
              },
          ],
          SourceLocationName='string',
          VodSourceName='string'
      )
    :type HttpPackageConfigurations: list
    :param HttpPackageConfigurations: **[REQUIRED]** 

      An array of HTTP package configurations for the VOD source on this account.

      

    
      - *(dict) --* 

        The HTTP package configuration properties for the requested VOD source.

        

      
        - **Path** *(string) --* **[REQUIRED]** 

          The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.

          

        
        - **SourceGroup** *(string) --* **[REQUIRED]** 

          The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.

          

        
        - **Type** *(string) --* **[REQUIRED]** 

          The streaming protocol for this package configuration. Supported values are HLS and DASH.

          

        
      
  
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    :type VodSourceName: string
    :param VodSourceName: **[REQUIRED]** 

      The identifier for the VOD source you are working on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'HttpPackageConfigurations': [
                {
                    'Path': 'string',
                    'SourceGroup': 'string',
                    'Type': 'DASH'|'HLS'
                },
            ],
            'LastModifiedTime': datetime(2015, 1, 1),
            'SourceLocationName': 'string',
            'Tags': {
                'string': 'string'
            },
            'VodSourceName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Arn** *(string) --* 

          The ARN of the VOD source.

          
        

        - **CreationTime** *(datetime) --* 

          The timestamp that indicates when the VOD source was created.

          
        

        - **HttpPackageConfigurations** *(list) --* 

          The HTTP package configurations.

          
          

          - *(dict) --* 

            The HTTP package configuration properties for the requested VOD source.

            
            

            - **Path** *(string) --* 

              The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.

              
            

            - **SourceGroup** *(string) --* 

              The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.

              
            

            - **Type** *(string) --* 

              The streaming protocol for this package configuration. Supported values are HLS and DASH.

              
        
      
        

        - **LastModifiedTime** *(datetime) --* 

          The ARN for the VOD source.

          
        

        - **SourceLocationName** *(string) --* 

          The name of the source location associated with the VOD source.

          
        

        - **Tags** *(dict) --* 

          The tags assigned to the VOD source.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **VodSourceName** *(string) --* 

          The name of the VOD source.

          
    

==========
Paginators
==========


The available paginators are:

* :py:class:`MediaTailor.Paginator.GetChannelSchedule`


* :py:class:`MediaTailor.Paginator.ListAlerts`


* :py:class:`MediaTailor.Paginator.ListChannels`


* :py:class:`MediaTailor.Paginator.ListPlaybackConfigurations`


* :py:class:`MediaTailor.Paginator.ListSourceLocations`


* :py:class:`MediaTailor.Paginator.ListVodSources`



.. py:class:: MediaTailor.Paginator.GetChannelSchedule

  ::

    
    paginator = client.get_paginator('get_channel_schedule')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaTailor.Client.get_channel_schedule`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/GetChannelSchedule>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ChannelName='string',
          DurationMinutes='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ChannelName: string
    :param ChannelName: **[REQUIRED]** 

      The identifier for the channel you are working on.

      

    
    :type DurationMinutes: string
    :param DurationMinutes: 

      The schedule duration in minutes. The maximum duration is 4320 minutes (three days).

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'ApproximateDurationSeconds': 123,
                    'ApproximateStartTime': datetime(2015, 1, 1),
                    'Arn': 'string',
                    'ChannelName': 'string',
                    'ProgramName': 'string',
                    'ScheduleAdBreaks': [
                        {
                            'ApproximateDurationSeconds': 123,
                            'ApproximateStartTime': datetime(2015, 1, 1),
                            'SourceLocationName': 'string',
                            'VodSourceName': 'string'
                        },
                    ],
                    'SourceLocationName': 'string',
                    'VodSourceName': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of schedule entries for the channel.

          
          

          - *(dict) --* 

            The properties for a schedule.

            
            

            - **ApproximateDurationSeconds** *(integer) --* 

              The approximate duration of this program, in seconds.

              
            

            - **ApproximateStartTime** *(datetime) --* 

              The approximate time that the program will start playing.

              
            

            - **Arn** *(string) --* 

              The ARN of the program.

              
            

            - **ChannelName** *(string) --* 

              The name of the channel that uses this schedule.

              
            

            - **ProgramName** *(string) --* 

              The name of the program.

              
            

            - **ScheduleAdBreaks** *(list) --* 

              The schedule's ad break properties.

              
              

              - *(dict) --* 

                The schedule's ad break properties.

                
                

                - **ApproximateDurationSeconds** *(integer) --* 

                  The approximate duration of the ad break, in seconds.

                  
                

                - **ApproximateStartTime** *(datetime) --* 

                  The approximate time that the ad will start playing.

                  
                

                - **SourceLocationName** *(string) --* 

                  The name of the source location containing the VOD source used for the ad break.

                  
                

                - **VodSourceName** *(string) --* 

                  The name of the VOD source used for the ad break.

                  
            
          
            

            - **SourceLocationName** *(string) --* 

              The name of the source location.

              
            

            - **VodSourceName** *(string) --* 

              The name of the VOD source.

              
        
      
    

.. py:class:: MediaTailor.Paginator.ListAlerts

  ::

    
    paginator = client.get_paginator('list_alerts')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaTailor.Client.list_alerts`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListAlerts>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ResourceArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'AlertCode': 'string',
                    'AlertMessage': 'string',
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'RelatedResourceArns': [
                        'string',
                    ],
                    'ResourceArn': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of alerts that are associated with this resource.

          
          

          - *(dict) --* 

            Alert configuration parameters.

            
            

            - **AlertCode** *(string) --* 

              The code for the alert. For example, NOT_PROCESSED.

              
            

            - **AlertMessage** *(string) --* 

              If an alert is generated for a resource, an explanation of the reason for the alert.

              
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp when the alert was last modified.

              
            

            - **RelatedResourceArns** *(list) --* 

              The Amazon Resource Names (ARNs) related to this alert.

              
              

              - *(string) --* 
          
            

            - **ResourceArn** *(string) --* 

              The Amazon Resource Name (ARN) of the resource.

              
        
      
    

.. py:class:: MediaTailor.Paginator.ListChannels

  ::

    
    paginator = client.get_paginator('list_channels')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaTailor.Client.list_channels`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListChannels>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'Arn': 'string',
                    'ChannelName': 'string',
                    'ChannelState': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'Outputs': [
                        {
                            'DashPlaylistSettings': {
                                'ManifestWindowSeconds': 123,
                                'MinBufferTimeSeconds': 123,
                                'MinUpdatePeriodSeconds': 123,
                                'SuggestedPresentationDelaySeconds': 123
                            },
                            'HlsPlaylistSettings': {
                                'ManifestWindowSeconds': 123
                            },
                            'ManifestName': 'string',
                            'PlaybackUrl': 'string',
                            'SourceGroup': 'string'
                        },
                    ],
                    'PlaybackMode': 'string',
                    'Tags': {
                        'string': 'string'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of channels that are associated with this account.

          
          

          - *(dict) --* 

            The configuration parameters for a channel.

            
            

            - **Arn** *(string) --* 

              The ARN of the channel.

              
            

            - **ChannelName** *(string) --* 

              The name of the channel.

              
            

            - **ChannelState** *(string) --* 

              Returns the state whether the channel is running or not.

              
            

            - **CreationTime** *(datetime) --* 

              The timestamp of when the channel was created.

              
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp of when the channel was last modified.

              
            

            - **Outputs** *(list) --* 

              The channel's output properties.

              
              

              - *(dict) --* 

                This response includes only the "property" : "type" property.

                
                

                - **DashPlaylistSettings** *(dict) --* 

                  DASH manifest configuration settings.

                  
                  

                  - **ManifestWindowSeconds** *(integer) --* 

                    The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                    
                  

                  - **MinBufferTimeSeconds** *(integer) --* 

                    Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.

                    
                  

                  - **MinUpdatePeriodSeconds** *(integer) --* 

                    Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                    
                  

                  - **SuggestedPresentationDelaySeconds** *(integer) --* 

                    Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.

                    
              
                

                - **HlsPlaylistSettings** *(dict) --* 

                  HLS manifest configuration settings.

                  
                  

                  - **ManifestWindowSeconds** *(integer) --* 

                    The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.

                    
              
                

                - **ManifestName** *(string) --* 

                  The name of the manifest for the channel that will appear in the channel output's playback URL.

                  
                

                - **PlaybackUrl** *(string) --* 

                  The URL used for playback by content players.

                  
                

                - **SourceGroup** *(string) --* 

                  A string used to associate a package configuration source group with a channel output.

                  
            
          
            

            - **PlaybackMode** *(string) --* 

              The type of playback mode for this channel. Possible values: ONCE or LOOP.

              
            

            - **Tags** *(dict) --* 

              The tags to assign to the channel.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
    

.. py:class:: MediaTailor.Paginator.ListPlaybackConfigurations

  ::

    
    paginator = client.get_paginator('list_playback_configurations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaTailor.Client.list_playback_configurations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListPlaybackConfigurations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'AdDecisionServerUrl': 'string',
                    'AvailSuppression': {
                        'Mode': 'OFF'|'BEHIND_LIVE_EDGE',
                        'Value': 'string'
                    },
                    'Bumper': {
                        'EndUrl': 'string',
                        'StartUrl': 'string'
                    },
                    'CdnConfiguration': {
                        'AdSegmentUrlPrefix': 'string',
                        'ContentSegmentUrlPrefix': 'string'
                    },
                    'ConfigurationAliases': {
                        'string': {
                            'string': 'string'
                        }
                    },
                    'DashConfiguration': {
                        'ManifestEndpointPrefix': 'string',
                        'MpdLocation': 'string',
                        'OriginManifestType': 'SINGLE_PERIOD'|'MULTI_PERIOD'
                    },
                    'HlsConfiguration': {
                        'ManifestEndpointPrefix': 'string'
                    },
                    'LivePreRollConfiguration': {
                        'AdDecisionServerUrl': 'string',
                        'MaxDurationSeconds': 123
                    },
                    'ManifestProcessingRules': {
                        'AdMarkerPassthrough': {
                            'Enabled': True|False
                        }
                    },
                    'Name': 'string',
                    'PersonalizationThresholdSeconds': 123,
                    'PlaybackConfigurationArn': 'string',
                    'PlaybackEndpointPrefix': 'string',
                    'SessionInitializationEndpointPrefix': 'string',
                    'SlateAdUrl': 'string',
                    'Tags': {
                        'string': 'string'
                    },
                    'TranscodeProfileName': 'string',
                    'VideoContentSourceUrl': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          Array of playback configurations. This might be all the available configurations or a subset, depending on the settings that you provide and the total number of configurations stored.

          
          

          - *(dict) --* 

            Creates a playback configuration. For information about MediaTailor configurations, see `Working with configurations in AWS Elemental MediaTailor <https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html>`__ .

            
            

            - **AdDecisionServerUrl** *(string) --* 

              The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.

              
            

            - **AvailSuppression** *(dict) --* 

              The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see `Ad Suppression <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

              
              

              - **Mode** *(string) --* 

                Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.

                
              

              - **Value** *(string) --* 

                A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.

                
          
            

            - **Bumper** *(dict) --* 

              The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see `Bumpers <https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html>`__ .

              
              

              - **EndUrl** *(string) --* 

                The URL for the end bumper asset.

                
              

              - **StartUrl** *(string) --* 

                The URL for the start bumper asset.

                
          
            

            - **CdnConfiguration** *(dict) --* 

              The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.

              
              

              - **AdSegmentUrlPrefix** *(string) --* 

                A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.

                
              

              - **ContentSegmentUrlPrefix** *(string) --* 

                A content delivery network (CDN) to cache content segments, so that content requests don’t always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.

                
          
            

            - **ConfigurationAliases** *(dict) --* 

              The player parameters and aliases used as dynamic variables during session initialization. For more information, see `Domain Variables <https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html>`__ .

              
              

              - *(string) --* 

                The dynamic variable that has aliases.

                
                

                - *(dict) --* 

                  Map of aliases to the value to be used at request time.

                  
                  

                  - *(string) --* 
                    

                    - *(string) --* 
              
            
          
        
            

            - **DashConfiguration** *(dict) --* 

              The configuration for a DASH source.

              
              

              - **ManifestEndpointPrefix** *(string) --* 

                The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.

                
              

              - **MpdLocation** *(string) --* 

                The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.

                
              

              - **OriginManifestType** *(string) --* 

                The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.

                
          
            

            - **HlsConfiguration** *(dict) --* 

              The configuration for HLS content.

              
              

              - **ManifestEndpointPrefix** *(string) --* 

                The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.

                
          
            

            - **LivePreRollConfiguration** *(dict) --* 

              The configuration for pre-roll ad insertion.

              
              

              - **AdDecisionServerUrl** *(string) --* 

                The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.

                
              

              - **MaxDurationSeconds** *(integer) --* The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
          
            

            - **ManifestProcessingRules** *(dict) --* 

              The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.

              
              

              - **AdMarkerPassthrough** *(dict) --* 

                For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.

                 

                No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.

                
                

                - **Enabled** *(boolean) --* 

                  Enables ad marker passthrough for your configuration.

                  
            
          
            

            - **Name** *(string) --* 

              The identifier for the playback configuration.

              
            

            - **PersonalizationThresholdSeconds** *(integer) --* 

              Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to *ad replacement* in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see `Ad Behavior in AWS Elemental MediaTailor <https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html>`__ .

              
            

            - **PlaybackConfigurationArn** *(string) --* 

              The Amazon Resource Name (ARN) for the playback configuration.

              
            

            - **PlaybackEndpointPrefix** *(string) --* 

              The URL that the player accesses to get a manifest from AWS Elemental MediaTailor.

              
            

            - **SessionInitializationEndpointPrefix** *(string) --* 

              The URL that the player uses to initialize a session that uses client-side reporting.

              
            

            - **SlateAdUrl** *(string) --* 

              The URL for a video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID playback configurations. For VPAID, the slate is required because MediaTailor provides it in the slots designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.

              
            

            - **Tags** *(dict) --* 

              The tags to assign to the playback configuration.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **TranscodeProfileName** *(string) --* 

              The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.

              
            

            - **VideoContentSourceUrl** *(string) --* 

              The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.

              
        
      
    

.. py:class:: MediaTailor.Paginator.ListSourceLocations

  ::

    
    paginator = client.get_paginator('list_source_locations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaTailor.Client.list_source_locations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListSourceLocations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'AccessConfiguration': {
                        'AccessType': 'S3_SIGV4'|'SECRETS_MANAGER_ACCESS_TOKEN',
                        'SecretsManagerAccessTokenConfiguration': {
                            'HeaderName': 'string',
                            'SecretArn': 'string',
                            'SecretStringKey': 'string'
                        }
                    },
                    'Arn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'DefaultSegmentDeliveryConfiguration': {
                        'BaseUrl': 'string'
                    },
                    'HttpConfiguration': {
                        'BaseUrl': 'string'
                    },
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'SourceLocationName': 'string',
                    'Tags': {
                        'string': 'string'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          An array of source locations.

          
          

          - *(dict) --* 

            This response includes only the "type" : "object" property.

            
            

            - **AccessConfiguration** *(dict) --* 

              The access configuration for the source location.

              
              

              - **AccessType** *(string) --* 

                The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.

                 

                S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.

                 

                Before you can use S3_SIGV4, you must meet these requirements:

                 

                • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.

                 

                • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.

                 

                • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.

                
              

              - **SecretsManagerAccessTokenConfiguration** *(dict) --* 

                AWS Secrets Manager access token configuration parameters.

                
                

                - **HeaderName** *(string) --* 

                  The name of the HTTP header used to supply the access token in requests to the source location.

                  
                

                - **SecretArn** *(string) --* 

                  The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.

                  
                

                - **SecretStringKey** *(string) --* 

                  The AWS Secrets Manager `SecretString <https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html>`__ key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.

                  
            
          
            

            - **Arn** *(string) --* 

              The ARN of the SourceLocation.

              
            

            - **CreationTime** *(datetime) --* 

              The timestamp that indicates when the source location was created.

              
            

            - **DefaultSegmentDeliveryConfiguration** *(dict) --* 

              The default segment delivery configuration.

              
              

              - **BaseUrl** *(string) --* 

                The hostname of the server that will be used to serve segments. This string must include the protocol, such as **https://** .

                
          
            

            - **HttpConfiguration** *(dict) --* 

              The HTTP configuration for the source location.

              
              

              - **BaseUrl** *(string) --* 

                The base URL for the source location host server. This string must include the protocol, such as **https://** .

                
          
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp that indicates when the source location was last modified.

              
            

            - **SourceLocationName** *(string) --* 

              The name of the source location.

              
            

            - **Tags** *(dict) --* 

              The tags assigned to the source location.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
    

.. py:class:: MediaTailor.Paginator.ListVodSources

  ::

    
    paginator = client.get_paginator('list_vod_sources')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`MediaTailor.Client.list_vod_sources`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/mediatailor-2018-04-23/ListVodSources>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          SourceLocationName='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type SourceLocationName: string
    :param SourceLocationName: **[REQUIRED]** 

      The identifier for the source location you are working on.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Items': [
                {
                    'Arn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'HttpPackageConfigurations': [
                        {
                            'Path': 'string',
                            'SourceGroup': 'string',
                            'Type': 'DASH'|'HLS'
                        },
                    ],
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'SourceLocationName': 'string',
                    'Tags': {
                        'string': 'string'
                    },
                    'VodSourceName': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 

        Success.

        
        

        - **Items** *(list) --* 

          Lists the VOD sources.

          
          

          - *(dict) --* 

            VOD source configuration parameters.

            
            

            - **Arn** *(string) --* 

              The ARN for the VOD source.

              
            

            - **CreationTime** *(datetime) --* 

              The timestamp that indicates when the VOD source was created.

              
            

            - **HttpPackageConfigurations** *(list) --* 

              The HTTP package configurations for the VOD source.

              
              

              - *(dict) --* 

                The HTTP package configuration properties for the requested VOD source.

                
                

                - **Path** *(string) --* 

                  The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.

                  
                

                - **SourceGroup** *(string) --* 

                  The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.

                  
                

                - **Type** *(string) --* 

                  The streaming protocol for this package configuration. Supported values are HLS and DASH.

                  
            
          
            

            - **LastModifiedTime** *(datetime) --* 

              The timestamp that indicates when the VOD source was last modified.

              
            

            - **SourceLocationName** *(string) --* 

              The name of the source location that the VOD source is associated with.

              
            

            - **Tags** *(dict) --* 

              The tags assigned to the VOD source.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **VodSourceName** *(string) --* 

              The name of the VOD source.

              
        
      
    