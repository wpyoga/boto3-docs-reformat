

.. _https://docs.aws.amazon.com/robomaker/latest/dg/API_TagResource.html: https://docs.aws.amazon.com/robomaker/latest/dg/API_TagResource.html


*********
RoboMaker
*********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: RoboMaker.Client

  A low-level client representing AWS RoboMaker
  

  This section provides documentation for the AWS RoboMaker API operations.

  ::

    
    import boto3
    
    client = boto3.client('robomaker')

  
  These are the available methods:
  
  *   :py:meth:`~RoboMaker.Client.batch_delete_worlds`

  
  *   :py:meth:`~RoboMaker.Client.batch_describe_simulation_job`

  
  *   :py:meth:`~RoboMaker.Client.can_paginate`

  
  *   :py:meth:`~RoboMaker.Client.cancel_deployment_job`

  
  *   :py:meth:`~RoboMaker.Client.cancel_simulation_job`

  
  *   :py:meth:`~RoboMaker.Client.cancel_simulation_job_batch`

  
  *   :py:meth:`~RoboMaker.Client.cancel_world_export_job`

  
  *   :py:meth:`~RoboMaker.Client.cancel_world_generation_job`

  
  *   :py:meth:`~RoboMaker.Client.create_deployment_job`

  
  *   :py:meth:`~RoboMaker.Client.create_fleet`

  
  *   :py:meth:`~RoboMaker.Client.create_robot`

  
  *   :py:meth:`~RoboMaker.Client.create_robot_application`

  
  *   :py:meth:`~RoboMaker.Client.create_robot_application_version`

  
  *   :py:meth:`~RoboMaker.Client.create_simulation_application`

  
  *   :py:meth:`~RoboMaker.Client.create_simulation_application_version`

  
  *   :py:meth:`~RoboMaker.Client.create_simulation_job`

  
  *   :py:meth:`~RoboMaker.Client.create_world_export_job`

  
  *   :py:meth:`~RoboMaker.Client.create_world_generation_job`

  
  *   :py:meth:`~RoboMaker.Client.create_world_template`

  
  *   :py:meth:`~RoboMaker.Client.delete_fleet`

  
  *   :py:meth:`~RoboMaker.Client.delete_robot`

  
  *   :py:meth:`~RoboMaker.Client.delete_robot_application`

  
  *   :py:meth:`~RoboMaker.Client.delete_simulation_application`

  
  *   :py:meth:`~RoboMaker.Client.delete_world_template`

  
  *   :py:meth:`~RoboMaker.Client.deregister_robot`

  
  *   :py:meth:`~RoboMaker.Client.describe_deployment_job`

  
  *   :py:meth:`~RoboMaker.Client.describe_fleet`

  
  *   :py:meth:`~RoboMaker.Client.describe_robot`

  
  *   :py:meth:`~RoboMaker.Client.describe_robot_application`

  
  *   :py:meth:`~RoboMaker.Client.describe_simulation_application`

  
  *   :py:meth:`~RoboMaker.Client.describe_simulation_job`

  
  *   :py:meth:`~RoboMaker.Client.describe_simulation_job_batch`

  
  *   :py:meth:`~RoboMaker.Client.describe_world`

  
  *   :py:meth:`~RoboMaker.Client.describe_world_export_job`

  
  *   :py:meth:`~RoboMaker.Client.describe_world_generation_job`

  
  *   :py:meth:`~RoboMaker.Client.describe_world_template`

  
  *   :py:meth:`~RoboMaker.Client.generate_presigned_url`

  
  *   :py:meth:`~RoboMaker.Client.get_paginator`

  
  *   :py:meth:`~RoboMaker.Client.get_waiter`

  
  *   :py:meth:`~RoboMaker.Client.get_world_template_body`

  
  *   :py:meth:`~RoboMaker.Client.list_deployment_jobs`

  
  *   :py:meth:`~RoboMaker.Client.list_fleets`

  
  *   :py:meth:`~RoboMaker.Client.list_robot_applications`

  
  *   :py:meth:`~RoboMaker.Client.list_robots`

  
  *   :py:meth:`~RoboMaker.Client.list_simulation_applications`

  
  *   :py:meth:`~RoboMaker.Client.list_simulation_job_batches`

  
  *   :py:meth:`~RoboMaker.Client.list_simulation_jobs`

  
  *   :py:meth:`~RoboMaker.Client.list_tags_for_resource`

  
  *   :py:meth:`~RoboMaker.Client.list_world_export_jobs`

  
  *   :py:meth:`~RoboMaker.Client.list_world_generation_jobs`

  
  *   :py:meth:`~RoboMaker.Client.list_world_templates`

  
  *   :py:meth:`~RoboMaker.Client.list_worlds`

  
  *   :py:meth:`~RoboMaker.Client.register_robot`

  
  *   :py:meth:`~RoboMaker.Client.restart_simulation_job`

  
  *   :py:meth:`~RoboMaker.Client.start_simulation_job_batch`

  
  *   :py:meth:`~RoboMaker.Client.sync_deployment_job`

  
  *   :py:meth:`~RoboMaker.Client.tag_resource`

  
  *   :py:meth:`~RoboMaker.Client.untag_resource`

  
  *   :py:meth:`~RoboMaker.Client.update_robot_application`

  
  *   :py:meth:`~RoboMaker.Client.update_simulation_application`

  
  *   :py:meth:`~RoboMaker.Client.update_world_template`

  

  .. py:method:: batch_delete_worlds(**kwargs)

    

    Deletes one or more worlds in a batch operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/BatchDeleteWorlds>`_    


    **Request Syntax** 
    ::

      response = client.batch_delete_worlds(
          worlds=[
              'string',
          ]
      )
    :type worlds: list
    :param worlds: **[REQUIRED]** 

      A list of Amazon Resource Names (arns) that correspond to worlds to delete.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'unprocessedWorlds': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **unprocessedWorlds** *(list) --* 

          A list of unprocessed worlds associated with the call. These worlds were not deleted.

          
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: batch_describe_simulation_job(**kwargs)

    

    Describes one or more simulation jobs.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/BatchDescribeSimulationJob>`_    


    **Request Syntax** 
    ::

      response = client.batch_describe_simulation_job(
          jobs=[
              'string',
          ]
      )
    :type jobs: list
    :param jobs: **[REQUIRED]** 

      A list of Amazon Resource Names (ARNs) of simulation jobs to describe.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'jobs': [
                {
                    'arn': 'string',
                    'name': 'string',
                    'status': 'Pending'|'Preparing'|'Running'|'Restarting'|'Completed'|'Failed'|'RunningFailed'|'Terminating'|'Terminated'|'Canceled',
                    'lastStartedAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'failureBehavior': 'Fail'|'Continue',
                    'failureCode': 'InternalServiceError'|'RobotApplicationCrash'|'SimulationApplicationCrash'|'RobotApplicationHealthCheckFailure'|'SimulationApplicationHealthCheckFailure'|'BadPermissionsRobotApplication'|'BadPermissionsSimulationApplication'|'BadPermissionsS3Object'|'BadPermissionsS3Output'|'BadPermissionsCloudwatchLogs'|'SubnetIpLimitExceeded'|'ENILimitExceeded'|'BadPermissionsUserCredentials'|'InvalidBundleRobotApplication'|'InvalidBundleSimulationApplication'|'InvalidS3Resource'|'ThrottlingError'|'LimitExceeded'|'MismatchedEtag'|'RobotApplicationVersionMismatchedEtag'|'SimulationApplicationVersionMismatchedEtag'|'ResourceNotFound'|'RequestThrottled'|'BatchTimedOut'|'BatchCanceled'|'InvalidInput'|'WrongRegionS3Bucket'|'WrongRegionS3Output'|'WrongRegionRobotApplication'|'WrongRegionSimulationApplication'|'UploadContentMismatchError',
                    'failureReason': 'string',
                    'clientRequestToken': 'string',
                    'outputLocation': {
                        's3Bucket': 'string',
                        's3Prefix': 'string'
                    },
                    'loggingConfig': {
                        'recordAllRosTopics': True|False
                    },
                    'maxJobDurationInSeconds': 123,
                    'simulationTimeMillis': 123,
                    'iamRole': 'string',
                    'robotApplications': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'launchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                },
                                'portForwardingConfig': {
                                    'portMappings': [
                                        {
                                            'jobPort': 123,
                                            'applicationPort': 123,
                                            'enableOnPublicIp': True|False
                                        },
                                    ]
                                },
                                'streamUI': True|False
                            },
                            'uploadConfigurations': [
                                {
                                    'name': 'string',
                                    'path': 'string',
                                    'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                },
                            ],
                            'useDefaultUploadConfigurations': True|False,
                            'tools': [
                                {
                                    'streamUI': True|False,
                                    'name': 'string',
                                    'command': 'string',
                                    'streamOutputToCloudWatch': True|False,
                                    'exitBehavior': 'FAIL'|'RESTART'
                                },
                            ],
                            'useDefaultTools': True|False
                        },
                    ],
                    'simulationApplications': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'launchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                },
                                'portForwardingConfig': {
                                    'portMappings': [
                                        {
                                            'jobPort': 123,
                                            'applicationPort': 123,
                                            'enableOnPublicIp': True|False
                                        },
                                    ]
                                },
                                'streamUI': True|False
                            },
                            'uploadConfigurations': [
                                {
                                    'name': 'string',
                                    'path': 'string',
                                    'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                },
                            ],
                            'worldConfigs': [
                                {
                                    'world': 'string'
                                },
                            ],
                            'useDefaultUploadConfigurations': True|False,
                            'tools': [
                                {
                                    'streamUI': True|False,
                                    'name': 'string',
                                    'command': 'string',
                                    'streamOutputToCloudWatch': True|False,
                                    'exitBehavior': 'FAIL'|'RESTART'
                                },
                            ],
                            'useDefaultTools': True|False
                        },
                    ],
                    'dataSources': [
                        {
                            'name': 'string',
                            's3Bucket': 'string',
                            's3Keys': [
                                {
                                    's3Key': 'string',
                                    'etag': 'string'
                                },
                            ]
                        },
                    ],
                    'tags': {
                        'string': 'string'
                    },
                    'vpcConfig': {
                        'subnets': [
                            'string',
                        ],
                        'securityGroups': [
                            'string',
                        ],
                        'vpcId': 'string',
                        'assignPublicIp': True|False
                    },
                    'networkInterface': {
                        'networkInterfaceId': 'string',
                        'privateIpAddress': 'string',
                        'publicIpAddress': 'string'
                    },
                    'compute': {
                        'simulationUnitLimit': 123
                    }
                },
            ],
            'unprocessedJobs': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **jobs** *(list) --* 

          A list of simulation jobs.

          
          

          - *(dict) --* 

            Information about a simulation job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the simulation job.

              
            

            - **name** *(string) --* 

              The name of the simulation job.

              
            

            - **status** *(string) --* 

              Status of the simulation job.

              
            

            - **lastStartedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job was last started.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job was last updated.

              
            

            - **failureBehavior** *(string) --* 

              The failure behavior the simulation job.

                Continue  

              Restart the simulation job in the same host instance.

                Fail  

              Stop the simulation job and terminate the instance.

                
            

            - **failureCode** *(string) --* 

              The failure code of the simulation job if it failed.

              
            

            - **failureReason** *(string) --* 

              The reason why the simulation job failed.

              
            

            - **clientRequestToken** *(string) --* 

              A unique identifier for this ``SimulationJob`` request.

              
            

            - **outputLocation** *(dict) --* 

              Location for output files generated by the simulation job.

              
              

              - **s3Bucket** *(string) --* 

                The S3 bucket for output.

                
              

              - **s3Prefix** *(string) --* 

                The S3 folder in the ``s3Bucket`` where output files will be placed.

                
          
            

            - **loggingConfig** *(dict) --* 

              The logging configuration.

              
              

              - **recordAllRosTopics** *(boolean) --* 

                A boolean indicating whether to record all ROS topics.

                
          
            

            - **maxJobDurationInSeconds** *(integer) --* 

              The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.

              
            

            - **simulationTimeMillis** *(integer) --* 

              The simulation job execution duration in milliseconds.

              
            

            - **iamRole** *(string) --* 

              The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

              
            

            - **robotApplications** *(list) --* 

              A list of robot applications.

              
              

              - *(dict) --* 

                Application configuration information for a robot.

                
                

                - **application** *(string) --* 

                  The application information for the robot application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the robot application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration for the robot application.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    The environment variables for the application launch.

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
                  

                  - **portForwardingConfig** *(dict) --* 

                    The port forwarding configuration.

                    
                    

                    - **portMappings** *(list) --* 

                      The port mappings for the configuration.

                      
                      

                      - *(dict) --* 

                        An object representing a port mapping.

                        
                        

                        - **jobPort** *(integer) --* 

                          The port number on the simulation job instance to use as a remote connection point. 

                          
                        

                        - **applicationPort** *(integer) --* 

                          The port number on the application.

                          
                        

                        - **enableOnPublicIp** *(boolean) --* 

                          A Boolean indicating whether to enable this port mapping on public IP.

                          
                    
                  
                
                  

                  - **streamUI** *(boolean) --* 

                    Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                    
              
                

                - **uploadConfigurations** *(list) --* 

                  The upload configurations for the robot application.

                  
                  

                  - *(dict) --* 

                    Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                    
                    

                    - **name** *(string) --* 

                      A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                       

                      For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                      
                    

                    - **path** *(string) --* 

                      Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                      
                    

                    - **uploadBehavior** *(string) --* 

                      Specifies when to upload the files:

                        UPLOAD_ON_TERMINATE  

                      Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                       

                      If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                        UPLOAD_ROLLING_AUTO_REMOVE  

                      Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                        
                
              
                

                - **useDefaultUploadConfigurations** *(boolean) --* 

                  A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                   

                  If you set this value, you must specify an ``outputLocation`` . 

                  
                

                - **tools** *(list) --* 

                  Information about tools configured for the robot application.

                  
                  

                  - *(dict) --* 

                    Information about a tool. Tools are used in a simulation job.

                    
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                      
                    

                    - **name** *(string) --* 

                      The name of the tool.

                      
                    

                    - **command** *(string) --* 

                      Command-line arguments for the tool. It must include the tool executable name.

                      
                    

                    - **streamOutputToCloudWatch** *(boolean) --* 

                      Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                      
                    

                    - **exitBehavior** *(string) --* 

                      Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                      
                
              
                

                - **useDefaultTools** *(boolean) --* 

                  A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                  
            
          
            

            - **simulationApplications** *(list) --* 

              A list of simulation applications.

              
              

              - *(dict) --* 

                Information about a simulation application configuration.

                
                

                - **application** *(string) --* 

                  The application information for the simulation application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the simulation application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration for the simulation application.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    The environment variables for the application launch.

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
                  

                  - **portForwardingConfig** *(dict) --* 

                    The port forwarding configuration.

                    
                    

                    - **portMappings** *(list) --* 

                      The port mappings for the configuration.

                      
                      

                      - *(dict) --* 

                        An object representing a port mapping.

                        
                        

                        - **jobPort** *(integer) --* 

                          The port number on the simulation job instance to use as a remote connection point. 

                          
                        

                        - **applicationPort** *(integer) --* 

                          The port number on the application.

                          
                        

                        - **enableOnPublicIp** *(boolean) --* 

                          A Boolean indicating whether to enable this port mapping on public IP.

                          
                    
                  
                
                  

                  - **streamUI** *(boolean) --* 

                    Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                    
              
                

                - **uploadConfigurations** *(list) --* 

                  Information about upload configurations for the simulation application.

                  
                  

                  - *(dict) --* 

                    Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                    
                    

                    - **name** *(string) --* 

                      A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                       

                      For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                      
                    

                    - **path** *(string) --* 

                      Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                      
                    

                    - **uploadBehavior** *(string) --* 

                      Specifies when to upload the files:

                        UPLOAD_ON_TERMINATE  

                      Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                       

                      If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                        UPLOAD_ROLLING_AUTO_REMOVE  

                      Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                        
                
              
                

                - **worldConfigs** *(list) --* 

                  A list of world configurations.

                  
                  

                  - *(dict) --* 

                    Configuration information for a world.

                    
                    

                    - **world** *(string) --* 

                      The world generated by Simulation WorldForge.

                      
                
              
                

                - **useDefaultUploadConfigurations** *(boolean) --* 

                  A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                   

                  If you set this value, you must specify an ``outputLocation`` . 

                  
                

                - **tools** *(list) --* 

                  Information about tools configured for the simulation application.

                  
                  

                  - *(dict) --* 

                    Information about a tool. Tools are used in a simulation job.

                    
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                      
                    

                    - **name** *(string) --* 

                      The name of the tool.

                      
                    

                    - **command** *(string) --* 

                      Command-line arguments for the tool. It must include the tool executable name.

                      
                    

                    - **streamOutputToCloudWatch** *(boolean) --* 

                      Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                      
                    

                    - **exitBehavior** *(string) --* 

                      Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                      
                
              
                

                - **useDefaultTools** *(boolean) --* 

                  A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                  
            
          
            

            - **dataSources** *(list) --* 

              The data sources for the simulation job.

              
              

              - *(dict) --* 

                Information about a data source.

                
                

                - **name** *(string) --* 

                  The name of the data source.

                  
                

                - **s3Bucket** *(string) --* 

                  The S3 bucket where the data files are located.

                  
                

                - **s3Keys** *(list) --* 

                  The list of S3 keys identifying the data source files.

                  
                  

                  - *(dict) --* 

                    Information about S3 keys.

                    
                    

                    - **s3Key** *(string) --* 

                      The S3 key.

                      
                    

                    - **etag** *(string) --* 

                      The etag for the object.

                      
                
              
            
          
            

            - **tags** *(dict) --* 

              A map that contains tag keys and tag values that are attached to the simulation job.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **vpcConfig** *(dict) --* 

              VPC configuration information.

              
              

              - **subnets** *(list) --* 

                A list of subnet IDs associated with the simulation job.

                
                

                - *(string) --* 
            
              

              - **securityGroups** *(list) --* 

                A list of security group IDs associated with the simulation job.

                
                

                - *(string) --* 
            
              

              - **vpcId** *(string) --* 

                The VPC ID associated with your simulation job.

                
              

              - **assignPublicIp** *(boolean) --* 

                A boolean indicating if a public IP was assigned.

                
          
            

            - **networkInterface** *(dict) --* 

              Information about a network interface.

              
              

              - **networkInterfaceId** *(string) --* 

                The ID of the network interface.

                
              

              - **privateIpAddress** *(string) --* 

                The IPv4 address of the network interface within the subnet.

                
              

              - **publicIpAddress** *(string) --* 

                The IPv4 public address of the network interface.

                
          
            

            - **compute** *(dict) --* 

              Compute information for the simulation job

              
              

              - **simulationUnitLimit** *(integer) --* 

                The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

                
          
        
      
        

        - **unprocessedJobs** *(list) --* 

          A list of unprocessed simulation job Amazon Resource Names (ARNs).

          
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: cancel_deployment_job(**kwargs)

    

    Cancels the specified deployment job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CancelDeploymentJob>`_    


    **Request Syntax** 
    ::

      response = client.cancel_deployment_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The deployment job ARN to cancel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: cancel_simulation_job(**kwargs)

    

    Cancels the specified simulation job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CancelSimulationJob>`_    


    **Request Syntax** 
    ::

      response = client.cancel_simulation_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The simulation job ARN to cancel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: cancel_simulation_job_batch(**kwargs)

    

    Cancels a simulation job batch. When you cancel a simulation job batch, you are also cancelling all of the active simulation jobs created as part of the batch. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CancelSimulationJobBatch>`_    


    **Request Syntax** 
    ::

      response = client.cancel_simulation_job_batch(
          batch='string'
      )
    :type batch: string
    :param batch: **[REQUIRED]** 

      The id of the batch to cancel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: cancel_world_export_job(**kwargs)

    

    Cancels the specified export job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CancelWorldExportJob>`_    


    **Request Syntax** 
    ::

      response = client.cancel_world_export_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world export job to cancel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: cancel_world_generation_job(**kwargs)

    

    Cancels the specified world generator job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CancelWorldGenerationJob>`_    


    **Request Syntax** 
    ::

      response = client.cancel_world_generation_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world generator job to cancel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_deployment_job(**kwargs)

    

    Deploys a specific version of a robot application to robots in a fleet.

     

    The robot application must have a numbered ``applicationVersion`` for consistency reasons. To create a new version, use ``CreateRobotApplicationVersion`` or see `Creating a Robot Application Version <https://docs.aws.amazon.com/robomaker/latest/dg/create-robot-application-version.html>`__ . 

     

    .. note::

       

      After 90 days, deployment jobs expire and will be deleted. They will no longer be accessible. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateDeploymentJob>`_    


    **Request Syntax** 
    ::

      response = client.create_deployment_job(
          deploymentConfig={
              'concurrentDeploymentPercentage': 123,
              'failureThresholdPercentage': 123,
              'robotDeploymentTimeoutInSeconds': 123,
              'downloadConditionFile': {
                  'bucket': 'string',
                  'key': 'string',
                  'etag': 'string'
              }
          },
          clientRequestToken='string',
          fleet='string',
          deploymentApplicationConfigs=[
              {
                  'application': 'string',
                  'applicationVersion': 'string',
                  'launchConfig': {
                      'packageName': 'string',
                      'preLaunchFile': 'string',
                      'launchFile': 'string',
                      'postLaunchFile': 'string',
                      'environmentVariables': {
                          'string': 'string'
                      }
                  }
              },
          ],
          tags={
              'string': 'string'
          }
      )
    :type deploymentConfig: dict
    :param deploymentConfig: 

      The requested deployment configuration.

      

    
      - **concurrentDeploymentPercentage** *(integer) --* 

        The percentage of robots receiving the deployment at the same time.

        

      
      - **failureThresholdPercentage** *(integer) --* 

        The percentage of deployments that need to fail before stopping deployment.

        

      
      - **robotDeploymentTimeoutInSeconds** *(integer) --* 

        The amount of time, in seconds, to wait for deployment to a single robot to complete. Choose a time between 1 minute and 7 days. The default is 5 hours.

        

      
      - **downloadConditionFile** *(dict) --* 

        The download condition file.

        

      
        - **bucket** *(string) --* **[REQUIRED]** 

          The bucket containing the object.

          

        
        - **key** *(string) --* **[REQUIRED]** 

          The key of the object.

          

        
        - **etag** *(string) --* 

          The etag of the object.

          

        
      
    
    :type clientRequestToken: string
    :param clientRequestToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    :type fleet: string
    :param fleet: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the fleet to deploy.

      

    
    :type deploymentApplicationConfigs: list
    :param deploymentApplicationConfigs: **[REQUIRED]** 

      The deployment application configuration.

      

    
      - *(dict) --* 

        Information about a deployment application configuration.

        

      
        - **application** *(string) --* **[REQUIRED]** 

          The Amazon Resource Name (ARN) of the robot application.

          

        
        - **applicationVersion** *(string) --* **[REQUIRED]** 

          The version of the application.

          

        
        - **launchConfig** *(dict) --* **[REQUIRED]** 

          The launch configuration.

          

        
          - **packageName** *(string) --* **[REQUIRED]** 

            The package name.

            

          
          - **preLaunchFile** *(string) --* 

            The deployment pre-launch file. This file will be executed prior to the launch file.

            

          
          - **launchFile** *(string) --* **[REQUIRED]** 

            The launch file name.

            

          
          - **postLaunchFile** *(string) --* 

            The deployment post-launch file. This file will be executed after the launch file.

            

          
          - **environmentVariables** *(dict) --* 

            An array of key/value pairs specifying environment variables for the robot application

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
        
      
  
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the deployment job.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'fleet': 'string',
            'status': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
            'deploymentApplicationConfigs': [
                {
                    'application': 'string',
                    'applicationVersion': 'string',
                    'launchConfig': {
                        'packageName': 'string',
                        'preLaunchFile': 'string',
                        'launchFile': 'string',
                        'postLaunchFile': 'string',
                        'environmentVariables': {
                            'string': 'string'
                        }
                    }
                },
            ],
            'failureReason': 'string',
            'failureCode': 'ResourceNotFound'|'EnvironmentSetupError'|'EtagMismatch'|'FailureThresholdBreached'|'RobotDeploymentAborted'|'RobotDeploymentNoResponse'|'RobotAgentConnectionTimeout'|'GreengrassDeploymentFailed'|'InvalidGreengrassGroup'|'MissingRobotArchitecture'|'MissingRobotApplicationArchitecture'|'MissingRobotDeploymentResource'|'GreengrassGroupVersionDoesNotExist'|'LambdaDeleted'|'ExtractingBundleFailure'|'PreLaunchFileFailure'|'PostLaunchFileFailure'|'BadPermissionError'|'DownloadConditionFailed'|'BadLambdaAssociated'|'InternalServerError'|'RobotApplicationDoesNotExist'|'DeploymentFleetDoesNotExist'|'FleetDeploymentTimeout',
            'createdAt': datetime(2015, 1, 1),
            'deploymentConfig': {
                'concurrentDeploymentPercentage': 123,
                'failureThresholdPercentage': 123,
                'robotDeploymentTimeoutInSeconds': 123,
                'downloadConditionFile': {
                    'bucket': 'string',
                    'key': 'string',
                    'etag': 'string'
                }
            },
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the deployment job.

          
        

        - **fleet** *(string) --* 

          The target fleet for the deployment job.

          
        

        - **status** *(string) --* 

          The status of the deployment job.

          
        

        - **deploymentApplicationConfigs** *(list) --* 

          The deployment application configuration.

          
          

          - *(dict) --* 

            Information about a deployment application configuration.

            
            

            - **application** *(string) --* 

              The Amazon Resource Name (ARN) of the robot application.

              
            

            - **applicationVersion** *(string) --* 

              The version of the application.

              
            

            - **launchConfig** *(dict) --* 

              The launch configuration.

              
              

              - **packageName** *(string) --* 

                The package name.

                
              

              - **preLaunchFile** *(string) --* 

                The deployment pre-launch file. This file will be executed prior to the launch file.

                
              

              - **launchFile** *(string) --* 

                The launch file name.

                
              

              - **postLaunchFile** *(string) --* 

                The deployment post-launch file. This file will be executed after the launch file.

                
              

              - **environmentVariables** *(dict) --* 

                An array of key/value pairs specifying environment variables for the robot application

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
        
      
        

        - **failureReason** *(string) --* 

          The failure reason of the deployment job if it failed.

          
        

        - **failureCode** *(string) --* 

          The failure code of the simulation job if it failed:

            BadPermissionError  

          AWS Greengrass requires a service-level role permission to access other services. The role must include the ` ``AWSGreengrassResourceAccessRolePolicy`` managed policy <https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor>`__ . 

            ExtractingBundleFailure  

          The robot application could not be extracted from the bundle.

            FailureThresholdBreached  

          The percentage of robots that could not be updated exceeded the percentage set for the deployment.

            GreengrassDeploymentFailed  

          The robot application could not be deployed to the robot.

            GreengrassGroupVersionDoesNotExist  

          The AWS Greengrass group or version associated with a robot is missing.

            InternalServerError  

          An internal error has occurred. Retry your request, but if the problem persists, contact us with details.

            MissingRobotApplicationArchitecture  

          The robot application does not have a source that matches the architecture of the robot.

            MissingRobotDeploymentResource  

          One or more of the resources specified for the robot application are missing. For example, does the robot application have the correct launch package and launch file?

            PostLaunchFileFailure  

          The post-launch script failed.

            PreLaunchFileFailure  

          The pre-launch script failed.

            ResourceNotFound  

          One or more deployment resources are missing. For example, do robot application source bundles still exist? 

            RobotDeploymentNoResponse  

          There is no response from the robot. It might not be powered on or connected to the internet.

            
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the fleet was created.

          
        

        - **deploymentConfig** *(dict) --* 

          The deployment configuration.

          
          

          - **concurrentDeploymentPercentage** *(integer) --* 

            The percentage of robots receiving the deployment at the same time.

            
          

          - **failureThresholdPercentage** *(integer) --* 

            The percentage of deployments that need to fail before stopping deployment.

            
          

          - **robotDeploymentTimeoutInSeconds** *(integer) --* 

            The amount of time, in seconds, to wait for deployment to a single robot to complete. Choose a time between 1 minute and 7 days. The default is 5 hours.

            
          

          - **downloadConditionFile** *(dict) --* 

            The download condition file.

            
            

            - **bucket** *(string) --* 

              The bucket containing the object.

              
            

            - **key** *(string) --* 

              The key of the object.

              
            

            - **etag** *(string) --* 

              The etag of the object.

              
        
      
        

        - **tags** *(dict) --* 

          The list of all tags added to the deployment job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ConcurrentDeploymentException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    

  .. py:method:: create_fleet(**kwargs)

    

    Creates a fleet, a logical group of robots running the same robot application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateFleet>`_    


    **Request Syntax** 
    ::

      response = client.create_fleet(
          name='string',
          tags={
              'string': 'string'
          }
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the fleet.

      

    
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the fleet.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'createdAt': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the fleet.

          
        

        - **name** *(string) --* 

          The name of the fleet.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the fleet was created.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the fleet.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_robot(**kwargs)

    

    Creates a robot.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateRobot>`_    


    **Request Syntax** 
    ::

      response = client.create_robot(
          name='string',
          architecture='X86_64'|'ARM64'|'ARMHF',
          greengrassGroupId='string',
          tags={
              'string': 'string'
          }
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name for the robot.

      

    
    :type architecture: string
    :param architecture: **[REQUIRED]** 

      The target architecture of the robot.

      

    
    :type greengrassGroupId: string
    :param greengrassGroupId: **[REQUIRED]** 

      The Greengrass group id.

      

    
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the robot.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'createdAt': datetime(2015, 1, 1),
            'greengrassGroupId': 'string',
            'architecture': 'X86_64'|'ARM64'|'ARMHF',
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the robot.

          
        

        - **name** *(string) --* 

          The name of the robot.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the robot was created.

          
        

        - **greengrassGroupId** *(string) --* 

          The Amazon Resource Name (ARN) of the Greengrass group associated with the robot.

          
        

        - **architecture** *(string) --* 

          The target architecture of the robot.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the robot.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceAlreadyExistsException`

    

  .. py:method:: create_robot_application(**kwargs)

    

    Creates a robot application. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateRobotApplication>`_    


    **Request Syntax** 
    ::

      response = client.create_robot_application(
          name='string',
          sources=[
              {
                  's3Bucket': 'string',
                  's3Key': 'string',
                  'architecture': 'X86_64'|'ARM64'|'ARMHF'
              },
          ],
          robotSoftwareSuite={
              'name': 'ROS'|'ROS2',
              'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
          },
          tags={
              'string': 'string'
          }
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the robot application.

      

    
    :type sources: list
    :param sources: **[REQUIRED]** 

      The sources of the robot application.

      

    
      - *(dict) --* 

        Information about a source configuration.

        

      
        - **s3Bucket** *(string) --* 

          The Amazon S3 bucket name.

          

        
        - **s3Key** *(string) --* 

          The s3 object key.

          

        
        - **architecture** *(string) --* 

          The target processor architecture for the application.

          

        
      
  
    :type robotSoftwareSuite: dict
    :param robotSoftwareSuite: **[REQUIRED]** 

      The robot software suite (ROS distribuition) used by the robot application.

      

    
      - **name** *(string) --* 

        The name of the robot software suite (ROS distribution).

        

      
      - **version** *(string) --* 

        The version of the robot software suite (ROS distribution).

        

      
    
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the robot application.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'lastUpdatedAt': datetime(2015, 1, 1),
            'revisionId': 'string',
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the robot application.

          
        

        - **name** *(string) --* 

          The name of the robot application.

          
        

        - **version** *(string) --* 

          The version of the robot application.

          
        

        - **sources** *(list) --* 

          The sources of the robot application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **robotSoftwareSuite** *(dict) --* 

          The robot software suite (ROS distribution) used by the robot application.

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the robot application was last updated.

          
        

        - **revisionId** *(string) --* 

          The revision id of the robot application.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the robot application.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    

  .. py:method:: create_robot_application_version(**kwargs)

    

    Creates a version of a robot application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateRobotApplicationVersion>`_    


    **Request Syntax** 
    ::

      response = client.create_robot_application_version(
          application='string',
          currentRevisionId='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The application information for the robot application.

      

    
    :type currentRevisionId: string
    :param currentRevisionId: 

      The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'lastUpdatedAt': datetime(2015, 1, 1),
            'revisionId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the robot application.

          
        

        - **name** *(string) --* 

          The name of the robot application.

          
        

        - **version** *(string) --* 

          The version of the robot application.

          
        

        - **sources** *(list) --* 

          The sources of the robot application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **robotSoftwareSuite** *(dict) --* 

          The robot software suite (ROS distribution) used by the robot application.

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the robot application was last updated.

          
        

        - **revisionId** *(string) --* 

          The revision id of the robot application.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: create_simulation_application(**kwargs)

    

    Creates a simulation application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateSimulationApplication>`_    


    **Request Syntax** 
    ::

      response = client.create_simulation_application(
          name='string',
          sources=[
              {
                  's3Bucket': 'string',
                  's3Key': 'string',
                  'architecture': 'X86_64'|'ARM64'|'ARMHF'
              },
          ],
          simulationSoftwareSuite={
              'name': 'Gazebo'|'RosbagPlay',
              'version': 'string'
          },
          robotSoftwareSuite={
              'name': 'ROS'|'ROS2',
              'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
          },
          renderingEngine={
              'name': 'OGRE',
              'version': 'string'
          },
          tags={
              'string': 'string'
          }
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the simulation application.

      

    
    :type sources: list
    :param sources: **[REQUIRED]** 

      The sources of the simulation application.

      

    
      - *(dict) --* 

        Information about a source configuration.

        

      
        - **s3Bucket** *(string) --* 

          The Amazon S3 bucket name.

          

        
        - **s3Key** *(string) --* 

          The s3 object key.

          

        
        - **architecture** *(string) --* 

          The target processor architecture for the application.

          

        
      
  
    :type simulationSoftwareSuite: dict
    :param simulationSoftwareSuite: **[REQUIRED]** 

      The simulation software suite used by the simulation application.

      

    
      - **name** *(string) --* 

        The name of the simulation software suite.

        

      
      - **version** *(string) --* 

        The version of the simulation software suite.

        

      
    
    :type robotSoftwareSuite: dict
    :param robotSoftwareSuite: **[REQUIRED]** 

      The robot software suite (ROS distribution) used by the simulation application.

      

    
      - **name** *(string) --* 

        The name of the robot software suite (ROS distribution).

        

      
      - **version** *(string) --* 

        The version of the robot software suite (ROS distribution).

        

      
    
    :type renderingEngine: dict
    :param renderingEngine: 

      The rendering engine for the simulation application.

      

    
      - **name** *(string) --* 

        The name of the rendering engine.

        

      
      - **version** *(string) --* 

        The version of the rendering engine.

        

      
    
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the simulation application.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'simulationSoftwareSuite': {
                'name': 'Gazebo'|'RosbagPlay',
                'version': 'string'
            },
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'renderingEngine': {
                'name': 'OGRE',
                'version': 'string'
            },
            'lastUpdatedAt': datetime(2015, 1, 1),
            'revisionId': 'string',
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the simulation application.

          
        

        - **name** *(string) --* 

          The name of the simulation application.

          
        

        - **version** *(string) --* 

          The version of the simulation application.

          
        

        - **sources** *(list) --* 

          The sources of the simulation application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **simulationSoftwareSuite** *(dict) --* 

          The simulation software suite used by the simulation application.

          
          

          - **name** *(string) --* 

            The name of the simulation software suite.

            
          

          - **version** *(string) --* 

            The version of the simulation software suite.

            
      
        

        - **robotSoftwareSuite** *(dict) --* 

          Information about the robot software suite (ROS distribution).

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **renderingEngine** *(dict) --* 

          The rendering engine for the simulation application.

          
          

          - **name** *(string) --* 

            The name of the rendering engine.

            
          

          - **version** *(string) --* 

            The version of the rendering engine.

            
      
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation application was last updated.

          
        

        - **revisionId** *(string) --* 

          The revision id of the simulation application.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the simulation application.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    

  .. py:method:: create_simulation_application_version(**kwargs)

    

    Creates a simulation application with a specific revision id.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateSimulationApplicationVersion>`_    


    **Request Syntax** 
    ::

      response = client.create_simulation_application_version(
          application='string',
          currentRevisionId='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The application information for the simulation application.

      

    
    :type currentRevisionId: string
    :param currentRevisionId: 

      The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'simulationSoftwareSuite': {
                'name': 'Gazebo'|'RosbagPlay',
                'version': 'string'
            },
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'renderingEngine': {
                'name': 'OGRE',
                'version': 'string'
            },
            'lastUpdatedAt': datetime(2015, 1, 1),
            'revisionId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the simulation application.

          
        

        - **name** *(string) --* 

          The name of the simulation application.

          
        

        - **version** *(string) --* 

          The version of the simulation application.

          
        

        - **sources** *(list) --* 

          The sources of the simulation application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **simulationSoftwareSuite** *(dict) --* 

          The simulation software suite used by the simulation application.

          
          

          - **name** *(string) --* 

            The name of the simulation software suite.

            
          

          - **version** *(string) --* 

            The version of the simulation software suite.

            
      
        

        - **robotSoftwareSuite** *(dict) --* 

          Information about the robot software suite (ROS distribution).

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **renderingEngine** *(dict) --* 

          The rendering engine for the simulation application.

          
          

          - **name** *(string) --* 

            The name of the rendering engine.

            
          

          - **version** *(string) --* 

            The version of the rendering engine.

            
      
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation application was last updated.

          
        

        - **revisionId** *(string) --* 

          The revision ID of the simulation application.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: create_simulation_job(**kwargs)

    

    Creates a simulation job.

     

    .. note::

       

      After 90 days, simulation jobs expire and will be deleted. They will no longer be accessible. 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateSimulationJob>`_    


    **Request Syntax** 
    ::

      response = client.create_simulation_job(
          clientRequestToken='string',
          outputLocation={
              's3Bucket': 'string',
              's3Prefix': 'string'
          },
          loggingConfig={
              'recordAllRosTopics': True|False
          },
          maxJobDurationInSeconds=123,
          iamRole='string',
          failureBehavior='Fail'|'Continue',
          robotApplications=[
              {
                  'application': 'string',
                  'applicationVersion': 'string',
                  'launchConfig': {
                      'packageName': 'string',
                      'launchFile': 'string',
                      'environmentVariables': {
                          'string': 'string'
                      },
                      'portForwardingConfig': {
                          'portMappings': [
                              {
                                  'jobPort': 123,
                                  'applicationPort': 123,
                                  'enableOnPublicIp': True|False
                              },
                          ]
                      },
                      'streamUI': True|False
                  },
                  'uploadConfigurations': [
                      {
                          'name': 'string',
                          'path': 'string',
                          'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                      },
                  ],
                  'useDefaultUploadConfigurations': True|False,
                  'tools': [
                      {
                          'streamUI': True|False,
                          'name': 'string',
                          'command': 'string',
                          'streamOutputToCloudWatch': True|False,
                          'exitBehavior': 'FAIL'|'RESTART'
                      },
                  ],
                  'useDefaultTools': True|False
              },
          ],
          simulationApplications=[
              {
                  'application': 'string',
                  'applicationVersion': 'string',
                  'launchConfig': {
                      'packageName': 'string',
                      'launchFile': 'string',
                      'environmentVariables': {
                          'string': 'string'
                      },
                      'portForwardingConfig': {
                          'portMappings': [
                              {
                                  'jobPort': 123,
                                  'applicationPort': 123,
                                  'enableOnPublicIp': True|False
                              },
                          ]
                      },
                      'streamUI': True|False
                  },
                  'uploadConfigurations': [
                      {
                          'name': 'string',
                          'path': 'string',
                          'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                      },
                  ],
                  'worldConfigs': [
                      {
                          'world': 'string'
                      },
                  ],
                  'useDefaultUploadConfigurations': True|False,
                  'tools': [
                      {
                          'streamUI': True|False,
                          'name': 'string',
                          'command': 'string',
                          'streamOutputToCloudWatch': True|False,
                          'exitBehavior': 'FAIL'|'RESTART'
                      },
                  ],
                  'useDefaultTools': True|False
              },
          ],
          dataSources=[
              {
                  'name': 'string',
                  's3Bucket': 'string',
                  's3Keys': [
                      'string',
                  ]
              },
          ],
          tags={
              'string': 'string'
          },
          vpcConfig={
              'subnets': [
                  'string',
              ],
              'securityGroups': [
                  'string',
              ],
              'assignPublicIp': True|False
          },
          compute={
              'simulationUnitLimit': 123
          }
      )
    :type clientRequestToken: string
    :param clientRequestToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    :type outputLocation: dict
    :param outputLocation: 

      Location for output files generated by the simulation job.

      

    
      - **s3Bucket** *(string) --* 

        The S3 bucket for output.

        

      
      - **s3Prefix** *(string) --* 

        The S3 folder in the ``s3Bucket`` where output files will be placed.

        

      
    
    :type loggingConfig: dict
    :param loggingConfig: 

      The logging configuration.

      

    
      - **recordAllRosTopics** *(boolean) --* **[REQUIRED]** 

        A boolean indicating whether to record all ROS topics.

        

      
    
    :type maxJobDurationInSeconds: integer
    :param maxJobDurationInSeconds: **[REQUIRED]** 

      The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When ``maxJobDurationInSeconds`` is reached, the simulation job will status will transition to ``Completed`` .

      

    
    :type iamRole: string
    :param iamRole: **[REQUIRED]** 

      The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

      

    
    :type failureBehavior: string
    :param failureBehavior: 

      The failure behavior the simulation job.

        Continue  

      Restart the simulation job in the same host instance.

        Fail  

      Stop the simulation job and terminate the instance.

        

    
    :type robotApplications: list
    :param robotApplications: 

      The robot application to use in the simulation job.

      

    
      - *(dict) --* 

        Application configuration information for a robot.

        

      
        - **application** *(string) --* **[REQUIRED]** 

          The application information for the robot application.

          

        
        - **applicationVersion** *(string) --* 

          The version of the robot application.

          

        
        - **launchConfig** *(dict) --* **[REQUIRED]** 

          The launch configuration for the robot application.

          

        
          - **packageName** *(string) --* **[REQUIRED]** 

            The package name.

            

          
          - **launchFile** *(string) --* **[REQUIRED]** 

            The launch file name.

            

          
          - **environmentVariables** *(dict) --* 

            The environment variables for the application launch.

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
          - **portForwardingConfig** *(dict) --* 

            The port forwarding configuration.

            

          
            - **portMappings** *(list) --* 

              The port mappings for the configuration.

              

            
              - *(dict) --* 

                An object representing a port mapping.

                

              
                - **jobPort** *(integer) --* **[REQUIRED]** 

                  The port number on the simulation job instance to use as a remote connection point. 

                  

                
                - **applicationPort** *(integer) --* **[REQUIRED]** 

                  The port number on the application.

                  

                
                - **enableOnPublicIp** *(boolean) --* 

                  A Boolean indicating whether to enable this port mapping on public IP.

                  

                
              
          
          
          - **streamUI** *(boolean) --* 

            Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

            

          
        
        - **uploadConfigurations** *(list) --* 

          The upload configurations for the robot application.

          

        
          - *(dict) --* 

            Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

            

          
            - **name** *(string) --* **[REQUIRED]** 

              A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

               

              For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

              

            
            - **path** *(string) --* **[REQUIRED]** 

              Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

              

            
            - **uploadBehavior** *(string) --* **[REQUIRED]** 

              Specifies when to upload the files:

                UPLOAD_ON_TERMINATE  

              Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

               

              If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                UPLOAD_ROLLING_AUTO_REMOVE  

              Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                

            
          
      
        - **useDefaultUploadConfigurations** *(boolean) --* 

          A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

           

          If you set this value, you must specify an ``outputLocation`` . 

          

        
        - **tools** *(list) --* 

          Information about tools configured for the robot application.

          

        
          - *(dict) --* 

            Information about a tool. Tools are used in a simulation job.

            

          
            - **streamUI** *(boolean) --* 

              Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

              

            
            - **name** *(string) --* **[REQUIRED]** 

              The name of the tool.

              

            
            - **command** *(string) --* **[REQUIRED]** 

              Command-line arguments for the tool. It must include the tool executable name.

              

            
            - **streamOutputToCloudWatch** *(boolean) --* 

              Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

              

            
            - **exitBehavior** *(string) --* 

              Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

              

            
          
      
        - **useDefaultTools** *(boolean) --* 

          A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

          

        
      
  
    :type simulationApplications: list
    :param simulationApplications: 

      The simulation application to use in the simulation job.

      

    
      - *(dict) --* 

        Information about a simulation application configuration.

        

      
        - **application** *(string) --* **[REQUIRED]** 

          The application information for the simulation application.

          

        
        - **applicationVersion** *(string) --* 

          The version of the simulation application.

          

        
        - **launchConfig** *(dict) --* **[REQUIRED]** 

          The launch configuration for the simulation application.

          

        
          - **packageName** *(string) --* **[REQUIRED]** 

            The package name.

            

          
          - **launchFile** *(string) --* **[REQUIRED]** 

            The launch file name.

            

          
          - **environmentVariables** *(dict) --* 

            The environment variables for the application launch.

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
          - **portForwardingConfig** *(dict) --* 

            The port forwarding configuration.

            

          
            - **portMappings** *(list) --* 

              The port mappings for the configuration.

              

            
              - *(dict) --* 

                An object representing a port mapping.

                

              
                - **jobPort** *(integer) --* **[REQUIRED]** 

                  The port number on the simulation job instance to use as a remote connection point. 

                  

                
                - **applicationPort** *(integer) --* **[REQUIRED]** 

                  The port number on the application.

                  

                
                - **enableOnPublicIp** *(boolean) --* 

                  A Boolean indicating whether to enable this port mapping on public IP.

                  

                
              
          
          
          - **streamUI** *(boolean) --* 

            Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

            

          
        
        - **uploadConfigurations** *(list) --* 

          Information about upload configurations for the simulation application.

          

        
          - *(dict) --* 

            Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

            

          
            - **name** *(string) --* **[REQUIRED]** 

              A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

               

              For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

              

            
            - **path** *(string) --* **[REQUIRED]** 

              Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

              

            
            - **uploadBehavior** *(string) --* **[REQUIRED]** 

              Specifies when to upload the files:

                UPLOAD_ON_TERMINATE  

              Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

               

              If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                UPLOAD_ROLLING_AUTO_REMOVE  

              Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                

            
          
      
        - **worldConfigs** *(list) --* 

          A list of world configurations.

          

        
          - *(dict) --* 

            Configuration information for a world.

            

          
            - **world** *(string) --* 

              The world generated by Simulation WorldForge.

              

            
          
      
        - **useDefaultUploadConfigurations** *(boolean) --* 

          A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

           

          If you set this value, you must specify an ``outputLocation`` . 

          

        
        - **tools** *(list) --* 

          Information about tools configured for the simulation application.

          

        
          - *(dict) --* 

            Information about a tool. Tools are used in a simulation job.

            

          
            - **streamUI** *(boolean) --* 

              Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

              

            
            - **name** *(string) --* **[REQUIRED]** 

              The name of the tool.

              

            
            - **command** *(string) --* **[REQUIRED]** 

              Command-line arguments for the tool. It must include the tool executable name.

              

            
            - **streamOutputToCloudWatch** *(boolean) --* 

              Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

              

            
            - **exitBehavior** *(string) --* 

              Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

              

            
          
      
        - **useDefaultTools** *(boolean) --* 

          A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

          

        
      
  
    :type dataSources: list
    :param dataSources: 

      Specify data sources to mount read-only files from S3 into your simulation. These files are available under ``/opt/robomaker/datasources/data_source_name`` . 

       

      .. note::

         

        There is a limit of 100 files and a combined size of 25GB for all ``DataSourceConfig`` objects. 

         

      

    
      - *(dict) --* 

        Information about a data source.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the data source.

          

        
        - **s3Bucket** *(string) --* **[REQUIRED]** 

          The S3 bucket where the data files are located.

          

        
        - **s3Keys** *(list) --* **[REQUIRED]** 

          The list of S3 keys identifying the data source files.

          

        
          - *(string) --* 

          
      
      
  
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the simulation job.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type vpcConfig: dict
    :param vpcConfig: 

      If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and one subnet ID. 

      

    
      - **subnets** *(list) --* **[REQUIRED]** 

        A list of one or more subnet IDs in your VPC.

        

      
        - *(string) --* 

        
    
      - **securityGroups** *(list) --* 

        A list of one or more security groups IDs in your VPC.

        

      
        - *(string) --* 

        
    
      - **assignPublicIp** *(boolean) --* 

        A boolean indicating whether to assign a public IP address.

        

      
    
    :type compute: dict
    :param compute: 

      Compute information for the simulation job.

      

    
      - **simulationUnitLimit** *(integer) --* 

        The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'status': 'Pending'|'Preparing'|'Running'|'Restarting'|'Completed'|'Failed'|'RunningFailed'|'Terminating'|'Terminated'|'Canceled',
            'lastStartedAt': datetime(2015, 1, 1),
            'lastUpdatedAt': datetime(2015, 1, 1),
            'failureBehavior': 'Fail'|'Continue',
            'failureCode': 'InternalServiceError'|'RobotApplicationCrash'|'SimulationApplicationCrash'|'RobotApplicationHealthCheckFailure'|'SimulationApplicationHealthCheckFailure'|'BadPermissionsRobotApplication'|'BadPermissionsSimulationApplication'|'BadPermissionsS3Object'|'BadPermissionsS3Output'|'BadPermissionsCloudwatchLogs'|'SubnetIpLimitExceeded'|'ENILimitExceeded'|'BadPermissionsUserCredentials'|'InvalidBundleRobotApplication'|'InvalidBundleSimulationApplication'|'InvalidS3Resource'|'ThrottlingError'|'LimitExceeded'|'MismatchedEtag'|'RobotApplicationVersionMismatchedEtag'|'SimulationApplicationVersionMismatchedEtag'|'ResourceNotFound'|'RequestThrottled'|'BatchTimedOut'|'BatchCanceled'|'InvalidInput'|'WrongRegionS3Bucket'|'WrongRegionS3Output'|'WrongRegionRobotApplication'|'WrongRegionSimulationApplication'|'UploadContentMismatchError',
            'clientRequestToken': 'string',
            'outputLocation': {
                's3Bucket': 'string',
                's3Prefix': 'string'
            },
            'loggingConfig': {
                'recordAllRosTopics': True|False
            },
            'maxJobDurationInSeconds': 123,
            'simulationTimeMillis': 123,
            'iamRole': 'string',
            'robotApplications': [
                {
                    'application': 'string',
                    'applicationVersion': 'string',
                    'launchConfig': {
                        'packageName': 'string',
                        'launchFile': 'string',
                        'environmentVariables': {
                            'string': 'string'
                        },
                        'portForwardingConfig': {
                            'portMappings': [
                                {
                                    'jobPort': 123,
                                    'applicationPort': 123,
                                    'enableOnPublicIp': True|False
                                },
                            ]
                        },
                        'streamUI': True|False
                    },
                    'uploadConfigurations': [
                        {
                            'name': 'string',
                            'path': 'string',
                            'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                        },
                    ],
                    'useDefaultUploadConfigurations': True|False,
                    'tools': [
                        {
                            'streamUI': True|False,
                            'name': 'string',
                            'command': 'string',
                            'streamOutputToCloudWatch': True|False,
                            'exitBehavior': 'FAIL'|'RESTART'
                        },
                    ],
                    'useDefaultTools': True|False
                },
            ],
            'simulationApplications': [
                {
                    'application': 'string',
                    'applicationVersion': 'string',
                    'launchConfig': {
                        'packageName': 'string',
                        'launchFile': 'string',
                        'environmentVariables': {
                            'string': 'string'
                        },
                        'portForwardingConfig': {
                            'portMappings': [
                                {
                                    'jobPort': 123,
                                    'applicationPort': 123,
                                    'enableOnPublicIp': True|False
                                },
                            ]
                        },
                        'streamUI': True|False
                    },
                    'uploadConfigurations': [
                        {
                            'name': 'string',
                            'path': 'string',
                            'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                        },
                    ],
                    'worldConfigs': [
                        {
                            'world': 'string'
                        },
                    ],
                    'useDefaultUploadConfigurations': True|False,
                    'tools': [
                        {
                            'streamUI': True|False,
                            'name': 'string',
                            'command': 'string',
                            'streamOutputToCloudWatch': True|False,
                            'exitBehavior': 'FAIL'|'RESTART'
                        },
                    ],
                    'useDefaultTools': True|False
                },
            ],
            'dataSources': [
                {
                    'name': 'string',
                    's3Bucket': 'string',
                    's3Keys': [
                        {
                            's3Key': 'string',
                            'etag': 'string'
                        },
                    ]
                },
            ],
            'tags': {
                'string': 'string'
            },
            'vpcConfig': {
                'subnets': [
                    'string',
                ],
                'securityGroups': [
                    'string',
                ],
                'vpcId': 'string',
                'assignPublicIp': True|False
            },
            'compute': {
                'simulationUnitLimit': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the simulation job.

          
        

        - **status** *(string) --* 

          The status of the simulation job.

          
        

        - **lastStartedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation job was last started.

          
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation job was last updated.

          
        

        - **failureBehavior** *(string) --* 

          the failure behavior for the simulation job.

          
        

        - **failureCode** *(string) --* 

          The failure code of the simulation job if it failed:

            InternalServiceError  

          Internal service error.

            RobotApplicationCrash  

          Robot application exited abnormally.

            SimulationApplicationCrash  

          Simulation application exited abnormally.

            BadPermissionsRobotApplication  

          Robot application bundle could not be downloaded.

            BadPermissionsSimulationApplication  

          Simulation application bundle could not be downloaded.

            BadPermissionsS3Output  

          Unable to publish outputs to customer-provided S3 bucket.

            BadPermissionsCloudwatchLogs  

          Unable to publish logs to customer-provided CloudWatch Logs resource.

            SubnetIpLimitExceeded  

          Subnet IP limit exceeded.

            ENILimitExceeded  

          ENI limit exceeded.

            BadPermissionsUserCredentials  

          Unable to use the Role provided.

            InvalidBundleRobotApplication  

          Robot bundle cannot be extracted (invalid format, bundling error, or other issue).

            InvalidBundleSimulationApplication  

          Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).

            RobotApplicationVersionMismatchedEtag  

          Etag for RobotApplication does not match value during version creation.

            SimulationApplicationVersionMismatchedEtag  

          Etag for SimulationApplication does not match value during version creation.

            
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **outputLocation** *(dict) --* 

          Simulation job output files location.

          
          

          - **s3Bucket** *(string) --* 

            The S3 bucket for output.

            
          

          - **s3Prefix** *(string) --* 

            The S3 folder in the ``s3Bucket`` where output files will be placed.

            
      
        

        - **loggingConfig** *(dict) --* 

          The logging configuration.

          
          

          - **recordAllRosTopics** *(boolean) --* 

            A boolean indicating whether to record all ROS topics.

            
      
        

        - **maxJobDurationInSeconds** *(integer) --* 

          The maximum simulation job duration in seconds. 

          
        

        - **simulationTimeMillis** *(integer) --* 

          The simulation job execution duration in milliseconds.

          
        

        - **iamRole** *(string) --* 

          The IAM role that allows the simulation job to call the AWS APIs that are specified in its associated policies on your behalf.

          
        

        - **robotApplications** *(list) --* 

          The robot application used by the simulation job.

          
          

          - *(dict) --* 

            Application configuration information for a robot.

            
            

            - **application** *(string) --* 

              The application information for the robot application.

              
            

            - **applicationVersion** *(string) --* 

              The version of the robot application.

              
            

            - **launchConfig** *(dict) --* 

              The launch configuration for the robot application.

              
              

              - **packageName** *(string) --* 

                The package name.

                
              

              - **launchFile** *(string) --* 

                The launch file name.

                
              

              - **environmentVariables** *(dict) --* 

                The environment variables for the application launch.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **portForwardingConfig** *(dict) --* 

                The port forwarding configuration.

                
                

                - **portMappings** *(list) --* 

                  The port mappings for the configuration.

                  
                  

                  - *(dict) --* 

                    An object representing a port mapping.

                    
                    

                    - **jobPort** *(integer) --* 

                      The port number on the simulation job instance to use as a remote connection point. 

                      
                    

                    - **applicationPort** *(integer) --* 

                      The port number on the application.

                      
                    

                    - **enableOnPublicIp** *(boolean) --* 

                      A Boolean indicating whether to enable this port mapping on public IP.

                      
                
              
            
              

              - **streamUI** *(boolean) --* 

                Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                
          
            

            - **uploadConfigurations** *(list) --* 

              The upload configurations for the robot application.

              
              

              - *(dict) --* 

                Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                
                

                - **name** *(string) --* 

                  A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                   

                  For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                  
                

                - **path** *(string) --* 

                  Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                  
                

                - **uploadBehavior** *(string) --* 

                  Specifies when to upload the files:

                    UPLOAD_ON_TERMINATE  

                  Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                   

                  If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                    UPLOAD_ROLLING_AUTO_REMOVE  

                  Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                    
            
          
            

            - **useDefaultUploadConfigurations** *(boolean) --* 

              A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

               

              If you set this value, you must specify an ``outputLocation`` . 

              
            

            - **tools** *(list) --* 

              Information about tools configured for the robot application.

              
              

              - *(dict) --* 

                Information about a tool. Tools are used in a simulation job.

                
                

                - **streamUI** *(boolean) --* 

                  Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                  
                

                - **name** *(string) --* 

                  The name of the tool.

                  
                

                - **command** *(string) --* 

                  Command-line arguments for the tool. It must include the tool executable name.

                  
                

                - **streamOutputToCloudWatch** *(boolean) --* 

                  Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                  
                

                - **exitBehavior** *(string) --* 

                  Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                  
            
          
            

            - **useDefaultTools** *(boolean) --* 

              A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

              
        
      
        

        - **simulationApplications** *(list) --* 

          The simulation application used by the simulation job.

          
          

          - *(dict) --* 

            Information about a simulation application configuration.

            
            

            - **application** *(string) --* 

              The application information for the simulation application.

              
            

            - **applicationVersion** *(string) --* 

              The version of the simulation application.

              
            

            - **launchConfig** *(dict) --* 

              The launch configuration for the simulation application.

              
              

              - **packageName** *(string) --* 

                The package name.

                
              

              - **launchFile** *(string) --* 

                The launch file name.

                
              

              - **environmentVariables** *(dict) --* 

                The environment variables for the application launch.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **portForwardingConfig** *(dict) --* 

                The port forwarding configuration.

                
                

                - **portMappings** *(list) --* 

                  The port mappings for the configuration.

                  
                  

                  - *(dict) --* 

                    An object representing a port mapping.

                    
                    

                    - **jobPort** *(integer) --* 

                      The port number on the simulation job instance to use as a remote connection point. 

                      
                    

                    - **applicationPort** *(integer) --* 

                      The port number on the application.

                      
                    

                    - **enableOnPublicIp** *(boolean) --* 

                      A Boolean indicating whether to enable this port mapping on public IP.

                      
                
              
            
              

              - **streamUI** *(boolean) --* 

                Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                
          
            

            - **uploadConfigurations** *(list) --* 

              Information about upload configurations for the simulation application.

              
              

              - *(dict) --* 

                Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                
                

                - **name** *(string) --* 

                  A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                   

                  For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                  
                

                - **path** *(string) --* 

                  Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                  
                

                - **uploadBehavior** *(string) --* 

                  Specifies when to upload the files:

                    UPLOAD_ON_TERMINATE  

                  Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                   

                  If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                    UPLOAD_ROLLING_AUTO_REMOVE  

                  Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                    
            
          
            

            - **worldConfigs** *(list) --* 

              A list of world configurations.

              
              

              - *(dict) --* 

                Configuration information for a world.

                
                

                - **world** *(string) --* 

                  The world generated by Simulation WorldForge.

                  
            
          
            

            - **useDefaultUploadConfigurations** *(boolean) --* 

              A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

               

              If you set this value, you must specify an ``outputLocation`` . 

              
            

            - **tools** *(list) --* 

              Information about tools configured for the simulation application.

              
              

              - *(dict) --* 

                Information about a tool. Tools are used in a simulation job.

                
                

                - **streamUI** *(boolean) --* 

                  Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                  
                

                - **name** *(string) --* 

                  The name of the tool.

                  
                

                - **command** *(string) --* 

                  Command-line arguments for the tool. It must include the tool executable name.

                  
                

                - **streamOutputToCloudWatch** *(boolean) --* 

                  Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                  
                

                - **exitBehavior** *(string) --* 

                  Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                  
            
          
            

            - **useDefaultTools** *(boolean) --* 

              A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

              
        
      
        

        - **dataSources** *(list) --* 

          The data sources for the simulation job.

          
          

          - *(dict) --* 

            Information about a data source.

            
            

            - **name** *(string) --* 

              The name of the data source.

              
            

            - **s3Bucket** *(string) --* 

              The S3 bucket where the data files are located.

              
            

            - **s3Keys** *(list) --* 

              The list of S3 keys identifying the data source files.

              
              

              - *(dict) --* 

                Information about S3 keys.

                
                

                - **s3Key** *(string) --* 

                  The S3 key.

                  
                

                - **etag** *(string) --* 

                  The etag for the object.

                  
            
          
        
      
        

        - **tags** *(dict) --* 

          The list of all tags added to the simulation job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **vpcConfig** *(dict) --* 

          Information about the vpc configuration.

          
          

          - **subnets** *(list) --* 

            A list of subnet IDs associated with the simulation job.

            
            

            - *(string) --* 
        
          

          - **securityGroups** *(list) --* 

            A list of security group IDs associated with the simulation job.

            
            

            - *(string) --* 
        
          

          - **vpcId** *(string) --* 

            The VPC ID associated with your simulation job.

            
          

          - **assignPublicIp** *(boolean) --* 

            A boolean indicating if a public IP was assigned.

            
      
        

        - **compute** *(dict) --* 

          Compute information for the simulation job.

          
          

          - **simulationUnitLimit** *(integer) --* 

            The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: create_world_export_job(**kwargs)

    

    Creates a world export job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateWorldExportJob>`_    


    **Request Syntax** 
    ::

      response = client.create_world_export_job(
          clientRequestToken='string',
          worlds=[
              'string',
          ],
          outputLocation={
              's3Bucket': 'string',
              's3Prefix': 'string'
          },
          iamRole='string',
          tags={
              'string': 'string'
          }
      )
    :type clientRequestToken: string
    :param clientRequestToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    :type worlds: list
    :param worlds: **[REQUIRED]** 

      A list of Amazon Resource Names (arns) that correspond to worlds to export.

      

    
      - *(string) --* 

      
  
    :type outputLocation: dict
    :param outputLocation: **[REQUIRED]** 

      The output location.

      

    
      - **s3Bucket** *(string) --* 

        The S3 bucket for output.

        

      
      - **s3Prefix** *(string) --* 

        The S3 folder in the ``s3Bucket`` where output files will be placed.

        

      
    
    :type iamRole: string
    :param iamRole: **[REQUIRED]** 

      The IAM role that the world export process uses to access the Amazon S3 bucket and put the export.

      

    
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the world export job.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'status': 'Pending'|'Running'|'Completed'|'Failed'|'Canceling'|'Canceled',
            'createdAt': datetime(2015, 1, 1),
            'failureCode': 'InternalServiceError'|'LimitExceeded'|'ResourceNotFound'|'RequestThrottled'|'InvalidInput'|'AccessDenied',
            'clientRequestToken': 'string',
            'outputLocation': {
                's3Bucket': 'string',
                's3Prefix': 'string'
            },
            'iamRole': 'string',
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the world export job.

          
        

        - **status** *(string) --* 

          The status of the world export job.

            Pending  

          The world export job request is pending.

            Running  

          The world export job is running. 

            Completed  

          The world export job completed. 

            Failed  

          The world export job failed. See ``failureCode`` for more information. 

            Canceled  

          The world export job was cancelled.

            Canceling  

          The world export job is being cancelled.

            
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world export job was created.

          
        

        - **failureCode** *(string) --* 

          The failure code of the world export job if it failed:

            InternalServiceError  

          Internal service error.

            LimitExceeded  

          The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. 

            ResourceNotFound  

          The specified resource could not be found. 

            RequestThrottled  

          The request was throttled.

            InvalidInput  

          An input parameter in the request is not valid.

            AllWorldGenerationFailed  

          All of the worlds in the world generation job failed. This can happen if your ``worldCount`` is greater than 50 or less than 1. 

             

          For more information about troubleshooting WorldForge, see `Troubleshooting Simulation WorldForge <https://docs.aws.amazon.com/robomaker/latest/dg/troubleshooting-worldforge.html>`__ . 

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **outputLocation** *(dict) --* 

          The output location.

          
          

          - **s3Bucket** *(string) --* 

            The S3 bucket for output.

            
          

          - **s3Prefix** *(string) --* 

            The S3 folder in the ``s3Bucket`` where output files will be placed.

            
      
        

        - **iamRole** *(string) --* 

          The IAM role that the world export process uses to access the Amazon S3 bucket and put the export. 

          
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the world export job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: create_world_generation_job(**kwargs)

    

    Creates worlds using the specified template.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateWorldGenerationJob>`_    


    **Request Syntax** 
    ::

      response = client.create_world_generation_job(
          clientRequestToken='string',
          template='string',
          worldCount={
              'floorplanCount': 123,
              'interiorCountPerFloorplan': 123
          },
          tags={
              'string': 'string'
          },
          worldTags={
              'string': 'string'
          }
      )
    :type clientRequestToken: string
    :param clientRequestToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    :type template: string
    :param template: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world template describing the worlds you want to create.

      

    
    :type worldCount: dict
    :param worldCount: **[REQUIRED]** 

      Information about the world count.

      

    
      - **floorplanCount** *(integer) --* 

        The number of unique floorplans.

        

      
      - **interiorCountPerFloorplan** *(integer) --* 

        The number of unique interiors per floorplan.

        

      
    
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the world generator job.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type worldTags: dict
    :param worldTags: 

      A map that contains tag keys and tag values that are attached to the generated worlds.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'status': 'Pending'|'Running'|'Completed'|'Failed'|'PartialFailed'|'Canceling'|'Canceled',
            'createdAt': datetime(2015, 1, 1),
            'failureCode': 'InternalServiceError'|'LimitExceeded'|'ResourceNotFound'|'RequestThrottled'|'InvalidInput'|'AllWorldGenerationFailed',
            'clientRequestToken': 'string',
            'template': 'string',
            'worldCount': {
                'floorplanCount': 123,
                'interiorCountPerFloorplan': 123
            },
            'tags': {
                'string': 'string'
            },
            'worldTags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the world generator job.

          
        

        - **status** *(string) --* 

          The status of the world generator job.

            Pending  

          The world generator job request is pending.

            Running  

          The world generator job is running. 

            Completed  

          The world generator job completed. 

            Failed  

          The world generator job failed. See ``failureCode`` for more information. 

            PartialFailed  

          Some worlds did not generate.

            Canceled  

          The world generator job was cancelled.

            Canceling  

          The world generator job is being cancelled.

            
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world generator job was created.

          
        

        - **failureCode** *(string) --* 

          The failure code of the world generator job if it failed:

            InternalServiceError  

          Internal service error.

            LimitExceeded  

          The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. 

            ResourceNotFound  

          The specified resource could not be found. 

            RequestThrottled  

          The request was throttled.

            InvalidInput  

          An input parameter in the request is not valid.

            
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **template** *(string) --* 

          The Amazon Resource Name (arn) of the world template.

          
        

        - **worldCount** *(dict) --* 

          Information about the world count. 

          
          

          - **floorplanCount** *(integer) --* 

            The number of unique floorplans.

            
          

          - **interiorCountPerFloorplan** *(integer) --* 

            The number of unique interiors per floorplan.

            
      
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the world generator job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **worldTags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the generated worlds.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: create_world_template(**kwargs)

    

    Creates a world template.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/CreateWorldTemplate>`_    


    **Request Syntax** 
    ::

      response = client.create_world_template(
          clientRequestToken='string',
          name='string',
          templateBody='string',
          templateLocation={
              's3Bucket': 'string',
              's3Key': 'string'
          },
          tags={
              'string': 'string'
          }
      )
    :type clientRequestToken: string
    :param clientRequestToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    :type name: string
    :param name: 

      The name of the world template.

      

    
    :type templateBody: string
    :param templateBody: 

      The world template body.

      

    
    :type templateLocation: dict
    :param templateLocation: 

      The location of the world template.

      

    
      - **s3Bucket** *(string) --* **[REQUIRED]** 

        The Amazon S3 bucket name.

        

      
      - **s3Key** *(string) --* **[REQUIRED]** 

        The list of S3 keys identifying the data source files.

        

      
    
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the world template.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'clientRequestToken': 'string',
            'createdAt': datetime(2015, 1, 1),
            'name': 'string',
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the world template.

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world template was created.

          
        

        - **name** *(string) --* 

          The name of the world template.

          
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the world template.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_fleet(**kwargs)

    

    Deletes a fleet.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DeleteFleet>`_    


    **Request Syntax** 
    ::

      response = client.delete_fleet(
          fleet='string'
      )
    :type fleet: string
    :param fleet: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the fleet.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_robot(**kwargs)

    

    Deletes a robot.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DeleteRobot>`_    


    **Request Syntax** 
    ::

      response = client.delete_robot(
          robot='string'
      )
    :type robot: string
    :param robot: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the robot.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_robot_application(**kwargs)

    

    Deletes a robot application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DeleteRobotApplication>`_    


    **Request Syntax** 
    ::

      response = client.delete_robot_application(
          application='string',
          applicationVersion='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the the robot application.

      

    
    :type applicationVersion: string
    :param applicationVersion: 

      The version of the robot application to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_simulation_application(**kwargs)

    

    Deletes a simulation application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DeleteSimulationApplication>`_    


    **Request Syntax** 
    ::

      response = client.delete_simulation_application(
          application='string',
          applicationVersion='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The application information for the simulation application to delete.

      

    
    :type applicationVersion: string
    :param applicationVersion: 

      The version of the simulation application to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_world_template(**kwargs)

    

    Deletes a world template.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DeleteWorldTemplate>`_    


    **Request Syntax** 
    ::

      response = client.delete_world_template(
          template='string'
      )
    :type template: string
    :param template: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world template you want to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: deregister_robot(**kwargs)

    

    Deregisters a robot.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DeregisterRobot>`_    


    **Request Syntax** 
    ::

      response = client.deregister_robot(
          fleet='string',
          robot='string'
      )
    :type fleet: string
    :param fleet: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the fleet.

      

    
    :type robot: string
    :param robot: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the robot.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'fleet': 'string',
            'robot': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **fleet** *(string) --* 

          The Amazon Resource Name (ARN) of the fleet.

          
        

        - **robot** *(string) --* 

          The Amazon Resource Name (ARN) of the robot.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_deployment_job(**kwargs)

    

    Describes a deployment job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeDeploymentJob>`_    


    **Request Syntax** 
    ::

      response = client.describe_deployment_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the deployment job.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'fleet': 'string',
            'status': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
            'deploymentConfig': {
                'concurrentDeploymentPercentage': 123,
                'failureThresholdPercentage': 123,
                'robotDeploymentTimeoutInSeconds': 123,
                'downloadConditionFile': {
                    'bucket': 'string',
                    'key': 'string',
                    'etag': 'string'
                }
            },
            'deploymentApplicationConfigs': [
                {
                    'application': 'string',
                    'applicationVersion': 'string',
                    'launchConfig': {
                        'packageName': 'string',
                        'preLaunchFile': 'string',
                        'launchFile': 'string',
                        'postLaunchFile': 'string',
                        'environmentVariables': {
                            'string': 'string'
                        }
                    }
                },
            ],
            'failureReason': 'string',
            'failureCode': 'ResourceNotFound'|'EnvironmentSetupError'|'EtagMismatch'|'FailureThresholdBreached'|'RobotDeploymentAborted'|'RobotDeploymentNoResponse'|'RobotAgentConnectionTimeout'|'GreengrassDeploymentFailed'|'InvalidGreengrassGroup'|'MissingRobotArchitecture'|'MissingRobotApplicationArchitecture'|'MissingRobotDeploymentResource'|'GreengrassGroupVersionDoesNotExist'|'LambdaDeleted'|'ExtractingBundleFailure'|'PreLaunchFileFailure'|'PostLaunchFileFailure'|'BadPermissionError'|'DownloadConditionFailed'|'BadLambdaAssociated'|'InternalServerError'|'RobotApplicationDoesNotExist'|'DeploymentFleetDoesNotExist'|'FleetDeploymentTimeout',
            'createdAt': datetime(2015, 1, 1),
            'robotDeploymentSummary': [
                {
                    'arn': 'string',
                    'deploymentStartTime': datetime(2015, 1, 1),
                    'deploymentFinishTime': datetime(2015, 1, 1),
                    'status': 'Available'|'Registered'|'PendingNewDeployment'|'Deploying'|'Failed'|'InSync'|'NoResponse',
                    'progressDetail': {
                        'currentProgress': 'Validating'|'DownloadingExtracting'|'ExecutingDownloadCondition'|'ExecutingPreLaunch'|'Launching'|'ExecutingPostLaunch'|'Finished',
                        'percentDone': ...,
                        'estimatedTimeRemainingSeconds': 123,
                        'targetResource': 'string'
                    },
                    'failureReason': 'string',
                    'failureCode': 'ResourceNotFound'|'EnvironmentSetupError'|'EtagMismatch'|'FailureThresholdBreached'|'RobotDeploymentAborted'|'RobotDeploymentNoResponse'|'RobotAgentConnectionTimeout'|'GreengrassDeploymentFailed'|'InvalidGreengrassGroup'|'MissingRobotArchitecture'|'MissingRobotApplicationArchitecture'|'MissingRobotDeploymentResource'|'GreengrassGroupVersionDoesNotExist'|'LambdaDeleted'|'ExtractingBundleFailure'|'PreLaunchFileFailure'|'PostLaunchFileFailure'|'BadPermissionError'|'DownloadConditionFailed'|'BadLambdaAssociated'|'InternalServerError'|'RobotApplicationDoesNotExist'|'DeploymentFleetDoesNotExist'|'FleetDeploymentTimeout'
                },
            ],
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the deployment job.

          
        

        - **fleet** *(string) --* 

          The Amazon Resource Name (ARN) of the fleet.

          
        

        - **status** *(string) --* 

          The status of the deployment job.

          
        

        - **deploymentConfig** *(dict) --* 

          The deployment configuration.

          
          

          - **concurrentDeploymentPercentage** *(integer) --* 

            The percentage of robots receiving the deployment at the same time.

            
          

          - **failureThresholdPercentage** *(integer) --* 

            The percentage of deployments that need to fail before stopping deployment.

            
          

          - **robotDeploymentTimeoutInSeconds** *(integer) --* 

            The amount of time, in seconds, to wait for deployment to a single robot to complete. Choose a time between 1 minute and 7 days. The default is 5 hours.

            
          

          - **downloadConditionFile** *(dict) --* 

            The download condition file.

            
            

            - **bucket** *(string) --* 

              The bucket containing the object.

              
            

            - **key** *(string) --* 

              The key of the object.

              
            

            - **etag** *(string) --* 

              The etag of the object.

              
        
      
        

        - **deploymentApplicationConfigs** *(list) --* 

          The deployment application configuration.

          
          

          - *(dict) --* 

            Information about a deployment application configuration.

            
            

            - **application** *(string) --* 

              The Amazon Resource Name (ARN) of the robot application.

              
            

            - **applicationVersion** *(string) --* 

              The version of the application.

              
            

            - **launchConfig** *(dict) --* 

              The launch configuration.

              
              

              - **packageName** *(string) --* 

                The package name.

                
              

              - **preLaunchFile** *(string) --* 

                The deployment pre-launch file. This file will be executed prior to the launch file.

                
              

              - **launchFile** *(string) --* 

                The launch file name.

                
              

              - **postLaunchFile** *(string) --* 

                The deployment post-launch file. This file will be executed after the launch file.

                
              

              - **environmentVariables** *(dict) --* 

                An array of key/value pairs specifying environment variables for the robot application

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
        
      
        

        - **failureReason** *(string) --* 

          A short description of the reason why the deployment job failed.

          
        

        - **failureCode** *(string) --* 

          The deployment job failure code.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the deployment job was created.

          
        

        - **robotDeploymentSummary** *(list) --* 

          A list of robot deployment summaries.

          
          

          - *(dict) --* 

            Information about a robot deployment.

            
            

            - **arn** *(string) --* 

              The robot deployment Amazon Resource Name (ARN).

              
            

            - **deploymentStartTime** *(datetime) --* 

              The time, in milliseconds since the epoch, when the deployment was started.

              
            

            - **deploymentFinishTime** *(datetime) --* 

              The time, in milliseconds since the epoch, when the deployment finished.

              
            

            - **status** *(string) --* 

              The status of the robot deployment.

              
            

            - **progressDetail** *(dict) --* 

              Information about how the deployment is progressing.

              
              

              - **currentProgress** *(string) --* 

                The current progress status.

                  Validating  

                Validating the deployment.

                  DownloadingExtracting  

                Downloading and extracting the bundle on the robot.

                  ExecutingPreLaunch  

                Executing pre-launch script(s) if provided.

                  Launching  

                Launching the robot application.

                  ExecutingPostLaunch  

                Executing post-launch script(s) if provided.

                  Finished  

                Deployment is complete.

                  
              

              - **percentDone** *(float) --* 

                Precentage of the step that is done. This currently only applies to the ``Downloading/Extracting`` step of the deployment. It is empty for other steps.

                
              

              - **estimatedTimeRemainingSeconds** *(integer) --* 

                Estimated amount of time in seconds remaining in the step. This currently only applies to the ``Downloading/Extracting`` step of the deployment. It is empty for other steps.

                
              

              - **targetResource** *(string) --* 

                The Amazon Resource Name (ARN) of the deployment job.

                
          
            

            - **failureReason** *(string) --* 

              A short description of the reason why the robot deployment failed.

              
            

            - **failureCode** *(string) --* 

              The robot deployment failure code.

              
        
      
        

        - **tags** *(dict) --* 

          The list of all tags added to the specified deployment job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_fleet(**kwargs)

    

    Describes a fleet.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeFleet>`_    


    **Request Syntax** 
    ::

      response = client.describe_fleet(
          fleet='string'
      )
    :type fleet: string
    :param fleet: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the fleet.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'name': 'string',
            'arn': 'string',
            'robots': [
                {
                    'arn': 'string',
                    'name': 'string',
                    'fleetArn': 'string',
                    'status': 'Available'|'Registered'|'PendingNewDeployment'|'Deploying'|'Failed'|'InSync'|'NoResponse',
                    'greenGrassGroupId': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'architecture': 'X86_64'|'ARM64'|'ARMHF',
                    'lastDeploymentJob': 'string',
                    'lastDeploymentTime': datetime(2015, 1, 1)
                },
            ],
            'createdAt': datetime(2015, 1, 1),
            'lastDeploymentStatus': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
            'lastDeploymentJob': 'string',
            'lastDeploymentTime': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **name** *(string) --* 

          The name of the fleet.

          
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the fleet.

          
        

        - **robots** *(list) --* 

          A list of robots.

          
          

          - *(dict) --* 

            Information about a robot.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the robot.

              
            

            - **name** *(string) --* 

              The name of the robot.

              
            

            - **fleetArn** *(string) --* 

              The Amazon Resource Name (ARN) of the fleet.

              
            

            - **status** *(string) --* 

              The status of the robot.

              
            

            - **greenGrassGroupId** *(string) --* 

              The Greengrass group associated with the robot.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the robot was created.

              
            

            - **architecture** *(string) --* 

              The architecture of the robot.

              
            

            - **lastDeploymentJob** *(string) --* 

              The Amazon Resource Name (ARN) of the last deployment job.

              
            

            - **lastDeploymentTime** *(datetime) --* 

              The time of the last deployment.

              
        
      
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the fleet was created.

          
        

        - **lastDeploymentStatus** *(string) --* 

          The status of the last deployment.

          
        

        - **lastDeploymentJob** *(string) --* 

          The Amazon Resource Name (ARN) of the last deployment job.

          
        

        - **lastDeploymentTime** *(datetime) --* 

          The time of the last deployment.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the specified fleet.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_robot(**kwargs)

    

    Describes a robot.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeRobot>`_    


    **Request Syntax** 
    ::

      response = client.describe_robot(
          robot='string'
      )
    :type robot: string
    :param robot: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the robot to be described.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'fleetArn': 'string',
            'status': 'Available'|'Registered'|'PendingNewDeployment'|'Deploying'|'Failed'|'InSync'|'NoResponse',
            'greengrassGroupId': 'string',
            'createdAt': datetime(2015, 1, 1),
            'architecture': 'X86_64'|'ARM64'|'ARMHF',
            'lastDeploymentJob': 'string',
            'lastDeploymentTime': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the robot.

          
        

        - **name** *(string) --* 

          The name of the robot.

          
        

        - **fleetArn** *(string) --* 

          The Amazon Resource Name (ARN) of the fleet.

          
        

        - **status** *(string) --* 

          The status of the fleet.

          
        

        - **greengrassGroupId** *(string) --* 

          The Greengrass group id.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the robot was created.

          
        

        - **architecture** *(string) --* 

          The target architecture of the robot application.

          
        

        - **lastDeploymentJob** *(string) --* 

          The Amazon Resource Name (ARN) of the last deployment job.

          
        

        - **lastDeploymentTime** *(datetime) --* 

          The time of the last deployment job.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the specified robot.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_robot_application(**kwargs)

    

    Describes a robot application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeRobotApplication>`_    


    **Request Syntax** 
    ::

      response = client.describe_robot_application(
          application='string',
          applicationVersion='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the robot application.

      

    
    :type applicationVersion: string
    :param applicationVersion: 

      The version of the robot application to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'revisionId': 'string',
            'lastUpdatedAt': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the robot application.

          
        

        - **name** *(string) --* 

          The name of the robot application.

          
        

        - **version** *(string) --* 

          The version of the robot application.

          
        

        - **sources** *(list) --* 

          The sources of the robot application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **robotSoftwareSuite** *(dict) --* 

          The robot software suite (ROS distribution) used by the robot application.

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **revisionId** *(string) --* 

          The revision id of the robot application.

          
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the robot application was last updated.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the specified robot application.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_simulation_application(**kwargs)

    

    Describes a simulation application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeSimulationApplication>`_    


    **Request Syntax** 
    ::

      response = client.describe_simulation_application(
          application='string',
          applicationVersion='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The application information for the simulation application.

      

    
    :type applicationVersion: string
    :param applicationVersion: 

      The version of the simulation application to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'simulationSoftwareSuite': {
                'name': 'Gazebo'|'RosbagPlay',
                'version': 'string'
            },
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'renderingEngine': {
                'name': 'OGRE',
                'version': 'string'
            },
            'revisionId': 'string',
            'lastUpdatedAt': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the robot simulation application.

          
        

        - **name** *(string) --* 

          The name of the simulation application.

          
        

        - **version** *(string) --* 

          The version of the simulation application.

          
        

        - **sources** *(list) --* 

          The sources of the simulation application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **simulationSoftwareSuite** *(dict) --* 

          The simulation software suite used by the simulation application.

          
          

          - **name** *(string) --* 

            The name of the simulation software suite.

            
          

          - **version** *(string) --* 

            The version of the simulation software suite.

            
      
        

        - **robotSoftwareSuite** *(dict) --* 

          Information about the robot software suite (ROS distribution).

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **renderingEngine** *(dict) --* 

          The rendering engine for the simulation application.

          
          

          - **name** *(string) --* 

            The name of the rendering engine.

            
          

          - **version** *(string) --* 

            The version of the rendering engine.

            
      
        

        - **revisionId** *(string) --* 

          The revision id of the simulation application.

          
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation application was last updated.

          
        

        - **tags** *(dict) --* 

          The list of all tags added to the specified simulation application.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_simulation_job(**kwargs)

    

    Describes a simulation job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeSimulationJob>`_    


    **Request Syntax** 
    ::

      response = client.describe_simulation_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the simulation job to be described.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'status': 'Pending'|'Preparing'|'Running'|'Restarting'|'Completed'|'Failed'|'RunningFailed'|'Terminating'|'Terminated'|'Canceled',
            'lastStartedAt': datetime(2015, 1, 1),
            'lastUpdatedAt': datetime(2015, 1, 1),
            'failureBehavior': 'Fail'|'Continue',
            'failureCode': 'InternalServiceError'|'RobotApplicationCrash'|'SimulationApplicationCrash'|'RobotApplicationHealthCheckFailure'|'SimulationApplicationHealthCheckFailure'|'BadPermissionsRobotApplication'|'BadPermissionsSimulationApplication'|'BadPermissionsS3Object'|'BadPermissionsS3Output'|'BadPermissionsCloudwatchLogs'|'SubnetIpLimitExceeded'|'ENILimitExceeded'|'BadPermissionsUserCredentials'|'InvalidBundleRobotApplication'|'InvalidBundleSimulationApplication'|'InvalidS3Resource'|'ThrottlingError'|'LimitExceeded'|'MismatchedEtag'|'RobotApplicationVersionMismatchedEtag'|'SimulationApplicationVersionMismatchedEtag'|'ResourceNotFound'|'RequestThrottled'|'BatchTimedOut'|'BatchCanceled'|'InvalidInput'|'WrongRegionS3Bucket'|'WrongRegionS3Output'|'WrongRegionRobotApplication'|'WrongRegionSimulationApplication'|'UploadContentMismatchError',
            'failureReason': 'string',
            'clientRequestToken': 'string',
            'outputLocation': {
                's3Bucket': 'string',
                's3Prefix': 'string'
            },
            'loggingConfig': {
                'recordAllRosTopics': True|False
            },
            'maxJobDurationInSeconds': 123,
            'simulationTimeMillis': 123,
            'iamRole': 'string',
            'robotApplications': [
                {
                    'application': 'string',
                    'applicationVersion': 'string',
                    'launchConfig': {
                        'packageName': 'string',
                        'launchFile': 'string',
                        'environmentVariables': {
                            'string': 'string'
                        },
                        'portForwardingConfig': {
                            'portMappings': [
                                {
                                    'jobPort': 123,
                                    'applicationPort': 123,
                                    'enableOnPublicIp': True|False
                                },
                            ]
                        },
                        'streamUI': True|False
                    },
                    'uploadConfigurations': [
                        {
                            'name': 'string',
                            'path': 'string',
                            'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                        },
                    ],
                    'useDefaultUploadConfigurations': True|False,
                    'tools': [
                        {
                            'streamUI': True|False,
                            'name': 'string',
                            'command': 'string',
                            'streamOutputToCloudWatch': True|False,
                            'exitBehavior': 'FAIL'|'RESTART'
                        },
                    ],
                    'useDefaultTools': True|False
                },
            ],
            'simulationApplications': [
                {
                    'application': 'string',
                    'applicationVersion': 'string',
                    'launchConfig': {
                        'packageName': 'string',
                        'launchFile': 'string',
                        'environmentVariables': {
                            'string': 'string'
                        },
                        'portForwardingConfig': {
                            'portMappings': [
                                {
                                    'jobPort': 123,
                                    'applicationPort': 123,
                                    'enableOnPublicIp': True|False
                                },
                            ]
                        },
                        'streamUI': True|False
                    },
                    'uploadConfigurations': [
                        {
                            'name': 'string',
                            'path': 'string',
                            'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                        },
                    ],
                    'worldConfigs': [
                        {
                            'world': 'string'
                        },
                    ],
                    'useDefaultUploadConfigurations': True|False,
                    'tools': [
                        {
                            'streamUI': True|False,
                            'name': 'string',
                            'command': 'string',
                            'streamOutputToCloudWatch': True|False,
                            'exitBehavior': 'FAIL'|'RESTART'
                        },
                    ],
                    'useDefaultTools': True|False
                },
            ],
            'dataSources': [
                {
                    'name': 'string',
                    's3Bucket': 'string',
                    's3Keys': [
                        {
                            's3Key': 'string',
                            'etag': 'string'
                        },
                    ]
                },
            ],
            'tags': {
                'string': 'string'
            },
            'vpcConfig': {
                'subnets': [
                    'string',
                ],
                'securityGroups': [
                    'string',
                ],
                'vpcId': 'string',
                'assignPublicIp': True|False
            },
            'networkInterface': {
                'networkInterfaceId': 'string',
                'privateIpAddress': 'string',
                'publicIpAddress': 'string'
            },
            'compute': {
                'simulationUnitLimit': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the simulation job.

          
        

        - **name** *(string) --* 

          The name of the simulation job.

          
        

        - **status** *(string) --* 

          The status of the simulation job.

          
        

        - **lastStartedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation job was last started.

          
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation job was last updated.

          
        

        - **failureBehavior** *(string) --* 

          The failure behavior for the simulation job.

          
        

        - **failureCode** *(string) --* 

          The failure code of the simulation job if it failed:

            InternalServiceError  

          Internal service error.

            RobotApplicationCrash  

          Robot application exited abnormally.

            SimulationApplicationCrash  

          Simulation application exited abnormally.

            BadPermissionsRobotApplication  

          Robot application bundle could not be downloaded.

            BadPermissionsSimulationApplication  

          Simulation application bundle could not be downloaded.

            BadPermissionsS3Output  

          Unable to publish outputs to customer-provided S3 bucket.

            BadPermissionsCloudwatchLogs  

          Unable to publish logs to customer-provided CloudWatch Logs resource.

            SubnetIpLimitExceeded  

          Subnet IP limit exceeded.

            ENILimitExceeded  

          ENI limit exceeded.

            BadPermissionsUserCredentials  

          Unable to use the Role provided.

            InvalidBundleRobotApplication  

          Robot bundle cannot be extracted (invalid format, bundling error, or other issue).

            InvalidBundleSimulationApplication  

          Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).

            RobotApplicationVersionMismatchedEtag  

          Etag for RobotApplication does not match value during version creation.

            SimulationApplicationVersionMismatchedEtag  

          Etag for SimulationApplication does not match value during version creation.

            
        

        - **failureReason** *(string) --* 

          Details about why the simulation job failed. For more information about troubleshooting, see `Troubleshooting <https://docs.aws.amazon.com/robomaker/latest/dg/troubleshooting.html>`__ .

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **outputLocation** *(dict) --* 

          Location for output files generated by the simulation job.

          
          

          - **s3Bucket** *(string) --* 

            The S3 bucket for output.

            
          

          - **s3Prefix** *(string) --* 

            The S3 folder in the ``s3Bucket`` where output files will be placed.

            
      
        

        - **loggingConfig** *(dict) --* 

          The logging configuration.

          
          

          - **recordAllRosTopics** *(boolean) --* 

            A boolean indicating whether to record all ROS topics.

            
      
        

        - **maxJobDurationInSeconds** *(integer) --* 

          The maximum job duration in seconds. The value must be 8 days (691,200 seconds) or less.

          
        

        - **simulationTimeMillis** *(integer) --* 

          The simulation job execution duration in milliseconds.

          
        

        - **iamRole** *(string) --* 

          The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf.

          
        

        - **robotApplications** *(list) --* 

          A list of robot applications.

          
          

          - *(dict) --* 

            Application configuration information for a robot.

            
            

            - **application** *(string) --* 

              The application information for the robot application.

              
            

            - **applicationVersion** *(string) --* 

              The version of the robot application.

              
            

            - **launchConfig** *(dict) --* 

              The launch configuration for the robot application.

              
              

              - **packageName** *(string) --* 

                The package name.

                
              

              - **launchFile** *(string) --* 

                The launch file name.

                
              

              - **environmentVariables** *(dict) --* 

                The environment variables for the application launch.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **portForwardingConfig** *(dict) --* 

                The port forwarding configuration.

                
                

                - **portMappings** *(list) --* 

                  The port mappings for the configuration.

                  
                  

                  - *(dict) --* 

                    An object representing a port mapping.

                    
                    

                    - **jobPort** *(integer) --* 

                      The port number on the simulation job instance to use as a remote connection point. 

                      
                    

                    - **applicationPort** *(integer) --* 

                      The port number on the application.

                      
                    

                    - **enableOnPublicIp** *(boolean) --* 

                      A Boolean indicating whether to enable this port mapping on public IP.

                      
                
              
            
              

              - **streamUI** *(boolean) --* 

                Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                
          
            

            - **uploadConfigurations** *(list) --* 

              The upload configurations for the robot application.

              
              

              - *(dict) --* 

                Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                
                

                - **name** *(string) --* 

                  A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                   

                  For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                  
                

                - **path** *(string) --* 

                  Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                  
                

                - **uploadBehavior** *(string) --* 

                  Specifies when to upload the files:

                    UPLOAD_ON_TERMINATE  

                  Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                   

                  If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                    UPLOAD_ROLLING_AUTO_REMOVE  

                  Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                    
            
          
            

            - **useDefaultUploadConfigurations** *(boolean) --* 

              A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

               

              If you set this value, you must specify an ``outputLocation`` . 

              
            

            - **tools** *(list) --* 

              Information about tools configured for the robot application.

              
              

              - *(dict) --* 

                Information about a tool. Tools are used in a simulation job.

                
                

                - **streamUI** *(boolean) --* 

                  Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                  
                

                - **name** *(string) --* 

                  The name of the tool.

                  
                

                - **command** *(string) --* 

                  Command-line arguments for the tool. It must include the tool executable name.

                  
                

                - **streamOutputToCloudWatch** *(boolean) --* 

                  Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                  
                

                - **exitBehavior** *(string) --* 

                  Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                  
            
          
            

            - **useDefaultTools** *(boolean) --* 

              A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

              
        
      
        

        - **simulationApplications** *(list) --* 

          A list of simulation applications.

          
          

          - *(dict) --* 

            Information about a simulation application configuration.

            
            

            - **application** *(string) --* 

              The application information for the simulation application.

              
            

            - **applicationVersion** *(string) --* 

              The version of the simulation application.

              
            

            - **launchConfig** *(dict) --* 

              The launch configuration for the simulation application.

              
              

              - **packageName** *(string) --* 

                The package name.

                
              

              - **launchFile** *(string) --* 

                The launch file name.

                
              

              - **environmentVariables** *(dict) --* 

                The environment variables for the application launch.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **portForwardingConfig** *(dict) --* 

                The port forwarding configuration.

                
                

                - **portMappings** *(list) --* 

                  The port mappings for the configuration.

                  
                  

                  - *(dict) --* 

                    An object representing a port mapping.

                    
                    

                    - **jobPort** *(integer) --* 

                      The port number on the simulation job instance to use as a remote connection point. 

                      
                    

                    - **applicationPort** *(integer) --* 

                      The port number on the application.

                      
                    

                    - **enableOnPublicIp** *(boolean) --* 

                      A Boolean indicating whether to enable this port mapping on public IP.

                      
                
              
            
              

              - **streamUI** *(boolean) --* 

                Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                
          
            

            - **uploadConfigurations** *(list) --* 

              Information about upload configurations for the simulation application.

              
              

              - *(dict) --* 

                Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                
                

                - **name** *(string) --* 

                  A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                   

                  For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                  
                

                - **path** *(string) --* 

                  Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                  
                

                - **uploadBehavior** *(string) --* 

                  Specifies when to upload the files:

                    UPLOAD_ON_TERMINATE  

                  Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                   

                  If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                    UPLOAD_ROLLING_AUTO_REMOVE  

                  Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                    
            
          
            

            - **worldConfigs** *(list) --* 

              A list of world configurations.

              
              

              - *(dict) --* 

                Configuration information for a world.

                
                

                - **world** *(string) --* 

                  The world generated by Simulation WorldForge.

                  
            
          
            

            - **useDefaultUploadConfigurations** *(boolean) --* 

              A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

               

              If you set this value, you must specify an ``outputLocation`` . 

              
            

            - **tools** *(list) --* 

              Information about tools configured for the simulation application.

              
              

              - *(dict) --* 

                Information about a tool. Tools are used in a simulation job.

                
                

                - **streamUI** *(boolean) --* 

                  Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                  
                

                - **name** *(string) --* 

                  The name of the tool.

                  
                

                - **command** *(string) --* 

                  Command-line arguments for the tool. It must include the tool executable name.

                  
                

                - **streamOutputToCloudWatch** *(boolean) --* 

                  Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                  
                

                - **exitBehavior** *(string) --* 

                  Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                  
            
          
            

            - **useDefaultTools** *(boolean) --* 

              A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

              
        
      
        

        - **dataSources** *(list) --* 

          The data sources for the simulation job.

          
          

          - *(dict) --* 

            Information about a data source.

            
            

            - **name** *(string) --* 

              The name of the data source.

              
            

            - **s3Bucket** *(string) --* 

              The S3 bucket where the data files are located.

              
            

            - **s3Keys** *(list) --* 

              The list of S3 keys identifying the data source files.

              
              

              - *(dict) --* 

                Information about S3 keys.

                
                

                - **s3Key** *(string) --* 

                  The S3 key.

                  
                

                - **etag** *(string) --* 

                  The etag for the object.

                  
            
          
        
      
        

        - **tags** *(dict) --* 

          The list of all tags added to the specified simulation job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **vpcConfig** *(dict) --* 

          The VPC configuration.

          
          

          - **subnets** *(list) --* 

            A list of subnet IDs associated with the simulation job.

            
            

            - *(string) --* 
        
          

          - **securityGroups** *(list) --* 

            A list of security group IDs associated with the simulation job.

            
            

            - *(string) --* 
        
          

          - **vpcId** *(string) --* 

            The VPC ID associated with your simulation job.

            
          

          - **assignPublicIp** *(boolean) --* 

            A boolean indicating if a public IP was assigned.

            
      
        

        - **networkInterface** *(dict) --* 

          The network interface information for the simulation job.

          
          

          - **networkInterfaceId** *(string) --* 

            The ID of the network interface.

            
          

          - **privateIpAddress** *(string) --* 

            The IPv4 address of the network interface within the subnet.

            
          

          - **publicIpAddress** *(string) --* 

            The IPv4 public address of the network interface.

            
      
        

        - **compute** *(dict) --* 

          Compute information for the simulation job.

          
          

          - **simulationUnitLimit** *(integer) --* 

            The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

            
      
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_simulation_job_batch(**kwargs)

    

    Describes a simulation job batch.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeSimulationJobBatch>`_    


    **Request Syntax** 
    ::

      response = client.describe_simulation_job_batch(
          batch='string'
      )
    :type batch: string
    :param batch: **[REQUIRED]** 

      The id of the batch to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'status': 'Pending'|'InProgress'|'Failed'|'Completed'|'Canceled'|'Canceling'|'Completing'|'TimingOut'|'TimedOut',
            'lastUpdatedAt': datetime(2015, 1, 1),
            'createdAt': datetime(2015, 1, 1),
            'clientRequestToken': 'string',
            'batchPolicy': {
                'timeoutInSeconds': 123,
                'maxConcurrency': 123
            },
            'failureCode': 'InternalServiceError',
            'failureReason': 'string',
            'failedRequests': [
                {
                    'request': {
                        'outputLocation': {
                            's3Bucket': 'string',
                            's3Prefix': 'string'
                        },
                        'loggingConfig': {
                            'recordAllRosTopics': True|False
                        },
                        'maxJobDurationInSeconds': 123,
                        'iamRole': 'string',
                        'failureBehavior': 'Fail'|'Continue',
                        'useDefaultApplications': True|False,
                        'robotApplications': [
                            {
                                'application': 'string',
                                'applicationVersion': 'string',
                                'launchConfig': {
                                    'packageName': 'string',
                                    'launchFile': 'string',
                                    'environmentVariables': {
                                        'string': 'string'
                                    },
                                    'portForwardingConfig': {
                                        'portMappings': [
                                            {
                                                'jobPort': 123,
                                                'applicationPort': 123,
                                                'enableOnPublicIp': True|False
                                            },
                                        ]
                                    },
                                    'streamUI': True|False
                                },
                                'uploadConfigurations': [
                                    {
                                        'name': 'string',
                                        'path': 'string',
                                        'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                    },
                                ],
                                'useDefaultUploadConfigurations': True|False,
                                'tools': [
                                    {
                                        'streamUI': True|False,
                                        'name': 'string',
                                        'command': 'string',
                                        'streamOutputToCloudWatch': True|False,
                                        'exitBehavior': 'FAIL'|'RESTART'
                                    },
                                ],
                                'useDefaultTools': True|False
                            },
                        ],
                        'simulationApplications': [
                            {
                                'application': 'string',
                                'applicationVersion': 'string',
                                'launchConfig': {
                                    'packageName': 'string',
                                    'launchFile': 'string',
                                    'environmentVariables': {
                                        'string': 'string'
                                    },
                                    'portForwardingConfig': {
                                        'portMappings': [
                                            {
                                                'jobPort': 123,
                                                'applicationPort': 123,
                                                'enableOnPublicIp': True|False
                                            },
                                        ]
                                    },
                                    'streamUI': True|False
                                },
                                'uploadConfigurations': [
                                    {
                                        'name': 'string',
                                        'path': 'string',
                                        'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                    },
                                ],
                                'worldConfigs': [
                                    {
                                        'world': 'string'
                                    },
                                ],
                                'useDefaultUploadConfigurations': True|False,
                                'tools': [
                                    {
                                        'streamUI': True|False,
                                        'name': 'string',
                                        'command': 'string',
                                        'streamOutputToCloudWatch': True|False,
                                        'exitBehavior': 'FAIL'|'RESTART'
                                    },
                                ],
                                'useDefaultTools': True|False
                            },
                        ],
                        'dataSources': [
                            {
                                'name': 'string',
                                's3Bucket': 'string',
                                's3Keys': [
                                    'string',
                                ]
                            },
                        ],
                        'vpcConfig': {
                            'subnets': [
                                'string',
                            ],
                            'securityGroups': [
                                'string',
                            ],
                            'assignPublicIp': True|False
                        },
                        'compute': {
                            'simulationUnitLimit': 123
                        },
                        'tags': {
                            'string': 'string'
                        }
                    },
                    'failureReason': 'string',
                    'failureCode': 'InternalServiceError'|'RobotApplicationCrash'|'SimulationApplicationCrash'|'RobotApplicationHealthCheckFailure'|'SimulationApplicationHealthCheckFailure'|'BadPermissionsRobotApplication'|'BadPermissionsSimulationApplication'|'BadPermissionsS3Object'|'BadPermissionsS3Output'|'BadPermissionsCloudwatchLogs'|'SubnetIpLimitExceeded'|'ENILimitExceeded'|'BadPermissionsUserCredentials'|'InvalidBundleRobotApplication'|'InvalidBundleSimulationApplication'|'InvalidS3Resource'|'ThrottlingError'|'LimitExceeded'|'MismatchedEtag'|'RobotApplicationVersionMismatchedEtag'|'SimulationApplicationVersionMismatchedEtag'|'ResourceNotFound'|'RequestThrottled'|'BatchTimedOut'|'BatchCanceled'|'InvalidInput'|'WrongRegionS3Bucket'|'WrongRegionS3Output'|'WrongRegionRobotApplication'|'WrongRegionSimulationApplication'|'UploadContentMismatchError',
                    'failedAt': datetime(2015, 1, 1)
                },
            ],
            'pendingRequests': [
                {
                    'outputLocation': {
                        's3Bucket': 'string',
                        's3Prefix': 'string'
                    },
                    'loggingConfig': {
                        'recordAllRosTopics': True|False
                    },
                    'maxJobDurationInSeconds': 123,
                    'iamRole': 'string',
                    'failureBehavior': 'Fail'|'Continue',
                    'useDefaultApplications': True|False,
                    'robotApplications': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'launchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                },
                                'portForwardingConfig': {
                                    'portMappings': [
                                        {
                                            'jobPort': 123,
                                            'applicationPort': 123,
                                            'enableOnPublicIp': True|False
                                        },
                                    ]
                                },
                                'streamUI': True|False
                            },
                            'uploadConfigurations': [
                                {
                                    'name': 'string',
                                    'path': 'string',
                                    'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                },
                            ],
                            'useDefaultUploadConfigurations': True|False,
                            'tools': [
                                {
                                    'streamUI': True|False,
                                    'name': 'string',
                                    'command': 'string',
                                    'streamOutputToCloudWatch': True|False,
                                    'exitBehavior': 'FAIL'|'RESTART'
                                },
                            ],
                            'useDefaultTools': True|False
                        },
                    ],
                    'simulationApplications': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'launchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                },
                                'portForwardingConfig': {
                                    'portMappings': [
                                        {
                                            'jobPort': 123,
                                            'applicationPort': 123,
                                            'enableOnPublicIp': True|False
                                        },
                                    ]
                                },
                                'streamUI': True|False
                            },
                            'uploadConfigurations': [
                                {
                                    'name': 'string',
                                    'path': 'string',
                                    'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                },
                            ],
                            'worldConfigs': [
                                {
                                    'world': 'string'
                                },
                            ],
                            'useDefaultUploadConfigurations': True|False,
                            'tools': [
                                {
                                    'streamUI': True|False,
                                    'name': 'string',
                                    'command': 'string',
                                    'streamOutputToCloudWatch': True|False,
                                    'exitBehavior': 'FAIL'|'RESTART'
                                },
                            ],
                            'useDefaultTools': True|False
                        },
                    ],
                    'dataSources': [
                        {
                            'name': 'string',
                            's3Bucket': 'string',
                            's3Keys': [
                                'string',
                            ]
                        },
                    ],
                    'vpcConfig': {
                        'subnets': [
                            'string',
                        ],
                        'securityGroups': [
                            'string',
                        ],
                        'assignPublicIp': True|False
                    },
                    'compute': {
                        'simulationUnitLimit': 123
                    },
                    'tags': {
                        'string': 'string'
                    }
                },
            ],
            'createdRequests': [
                {
                    'arn': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'name': 'string',
                    'status': 'Pending'|'Preparing'|'Running'|'Restarting'|'Completed'|'Failed'|'RunningFailed'|'Terminating'|'Terminated'|'Canceled',
                    'simulationApplicationNames': [
                        'string',
                    ],
                    'robotApplicationNames': [
                        'string',
                    ],
                    'dataSourceNames': [
                        'string',
                    ]
                },
            ],
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the batch.

          
        

        - **status** *(string) --* 

          The status of the batch.

            Pending  

          The simulation job batch request is pending.

            InProgress  

          The simulation job batch is in progress. 

            Failed  

          The simulation job batch failed. One or more simulation job requests could not be completed due to an internal failure (like ``InternalServiceError`` ). See ``failureCode`` and ``failureReason`` for more information.

            Completed  

          The simulation batch job completed. A batch is complete when (1) there are no pending simulation job requests in the batch and none of the failed simulation job requests are due to ``InternalServiceError`` and (2) when all created simulation jobs have reached a terminal state (for example, ``Completed`` or ``Failed`` ). 

            Canceled  

          The simulation batch job was cancelled.

            Canceling  

          The simulation batch job is being cancelled.

            Completing  

          The simulation batch job is completing.

            TimingOut  

          The simulation job batch is timing out.

           

          If a batch timing out, and there are pending requests that were failing due to an internal failure (like ``InternalServiceError`` ), the batch status will be ``Failed`` . If there are no such failing request, the batch status will be ``TimedOut`` . 

            TimedOut  

          The simulation batch job timed out.

            
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation job batch was last updated.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation job batch was created.

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **batchPolicy** *(dict) --* 

          The batch policy.

          
          

          - **timeoutInSeconds** *(integer) --* 

            The amount of time, in seconds, to wait for the batch to complete. 

             

            If a batch times out, and there are pending requests that were failing due to an internal failure (like ``InternalServiceError`` ), they will be moved to the failed list and the batch status will be ``Failed`` . If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be ``TimedOut`` . 

            
          

          - **maxConcurrency** *(integer) --* 

            The number of active simulation jobs create as part of the batch that can be in an active state at the same time. 

             

            Active states include: ``Pending`` ,``Preparing`` , ``Running`` , ``Restarting`` , ``RunningFailed`` and ``Terminating`` . All other states are terminal states. 

            
      
        

        - **failureCode** *(string) --* 

          The failure code of the simulation job batch.

          
        

        - **failureReason** *(string) --* 

          The reason the simulation job batch failed.

          
        

        - **failedRequests** *(list) --* 

          A list of failed create simulation job requests. The request failed to be created into a simulation job. Failed requests do not have a simulation job ID. 

          
          

          - *(dict) --* 

            Information about a failed create simulation job request.

            
            

            - **request** *(dict) --* 

              The simulation job request.

              
              

              - **outputLocation** *(dict) --* 

                The output location.

                
                

                - **s3Bucket** *(string) --* 

                  The S3 bucket for output.

                  
                

                - **s3Prefix** *(string) --* 

                  The S3 folder in the ``s3Bucket`` where output files will be placed.

                  
            
              

              - **loggingConfig** *(dict) --* 

                The logging configuration.

                
                

                - **recordAllRosTopics** *(boolean) --* 

                  A boolean indicating whether to record all ROS topics.

                  
            
              

              - **maxJobDurationInSeconds** *(integer) --* 

                The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.

                
              

              - **iamRole** *(string) --* 

                The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

                
              

              - **failureBehavior** *(string) --* 

                The failure behavior the simulation job.

                  Continue  

                Restart the simulation job in the same host instance.

                  Fail  

                Stop the simulation job and terminate the instance.

                  
              

              - **useDefaultApplications** *(boolean) --* 

                A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. 

                
              

              - **robotApplications** *(list) --* 

                The robot applications to use in the simulation job.

                
                

                - *(dict) --* 

                  Application configuration information for a robot.

                  
                  

                  - **application** *(string) --* 

                    The application information for the robot application.

                    
                  

                  - **applicationVersion** *(string) --* 

                    The version of the robot application.

                    
                  

                  - **launchConfig** *(dict) --* 

                    The launch configuration for the robot application.

                    
                    

                    - **packageName** *(string) --* 

                      The package name.

                      
                    

                    - **launchFile** *(string) --* 

                      The launch file name.

                      
                    

                    - **environmentVariables** *(dict) --* 

                      The environment variables for the application launch.

                      
                      

                      - *(string) --* 
                        

                        - *(string) --* 
                  
                
                    

                    - **portForwardingConfig** *(dict) --* 

                      The port forwarding configuration.

                      
                      

                      - **portMappings** *(list) --* 

                        The port mappings for the configuration.

                        
                        

                        - *(dict) --* 

                          An object representing a port mapping.

                          
                          

                          - **jobPort** *(integer) --* 

                            The port number on the simulation job instance to use as a remote connection point. 

                            
                          

                          - **applicationPort** *(integer) --* 

                            The port number on the application.

                            
                          

                          - **enableOnPublicIp** *(boolean) --* 

                            A Boolean indicating whether to enable this port mapping on public IP.

                            
                      
                    
                  
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                      
                
                  

                  - **uploadConfigurations** *(list) --* 

                    The upload configurations for the robot application.

                    
                    

                    - *(dict) --* 

                      Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                      
                      

                      - **name** *(string) --* 

                        A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                         

                        For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                        
                      

                      - **path** *(string) --* 

                        Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                        
                      

                      - **uploadBehavior** *(string) --* 

                        Specifies when to upload the files:

                          UPLOAD_ON_TERMINATE  

                        Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                         

                        If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                          UPLOAD_ROLLING_AUTO_REMOVE  

                        Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                          
                  
                
                  

                  - **useDefaultUploadConfigurations** *(boolean) --* 

                    A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                     

                    If you set this value, you must specify an ``outputLocation`` . 

                    
                  

                  - **tools** *(list) --* 

                    Information about tools configured for the robot application.

                    
                    

                    - *(dict) --* 

                      Information about a tool. Tools are used in a simulation job.

                      
                      

                      - **streamUI** *(boolean) --* 

                        Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                        
                      

                      - **name** *(string) --* 

                        The name of the tool.

                        
                      

                      - **command** *(string) --* 

                        Command-line arguments for the tool. It must include the tool executable name.

                        
                      

                      - **streamOutputToCloudWatch** *(boolean) --* 

                        Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                        
                      

                      - **exitBehavior** *(string) --* 

                        Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                        
                  
                
                  

                  - **useDefaultTools** *(boolean) --* 

                    A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                    
              
            
              

              - **simulationApplications** *(list) --* 

                The simulation applications to use in the simulation job.

                
                

                - *(dict) --* 

                  Information about a simulation application configuration.

                  
                  

                  - **application** *(string) --* 

                    The application information for the simulation application.

                    
                  

                  - **applicationVersion** *(string) --* 

                    The version of the simulation application.

                    
                  

                  - **launchConfig** *(dict) --* 

                    The launch configuration for the simulation application.

                    
                    

                    - **packageName** *(string) --* 

                      The package name.

                      
                    

                    - **launchFile** *(string) --* 

                      The launch file name.

                      
                    

                    - **environmentVariables** *(dict) --* 

                      The environment variables for the application launch.

                      
                      

                      - *(string) --* 
                        

                        - *(string) --* 
                  
                
                    

                    - **portForwardingConfig** *(dict) --* 

                      The port forwarding configuration.

                      
                      

                      - **portMappings** *(list) --* 

                        The port mappings for the configuration.

                        
                        

                        - *(dict) --* 

                          An object representing a port mapping.

                          
                          

                          - **jobPort** *(integer) --* 

                            The port number on the simulation job instance to use as a remote connection point. 

                            
                          

                          - **applicationPort** *(integer) --* 

                            The port number on the application.

                            
                          

                          - **enableOnPublicIp** *(boolean) --* 

                            A Boolean indicating whether to enable this port mapping on public IP.

                            
                      
                    
                  
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                      
                
                  

                  - **uploadConfigurations** *(list) --* 

                    Information about upload configurations for the simulation application.

                    
                    

                    - *(dict) --* 

                      Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                      
                      

                      - **name** *(string) --* 

                        A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                         

                        For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                        
                      

                      - **path** *(string) --* 

                        Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                        
                      

                      - **uploadBehavior** *(string) --* 

                        Specifies when to upload the files:

                          UPLOAD_ON_TERMINATE  

                        Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                         

                        If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                          UPLOAD_ROLLING_AUTO_REMOVE  

                        Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                          
                  
                
                  

                  - **worldConfigs** *(list) --* 

                    A list of world configurations.

                    
                    

                    - *(dict) --* 

                      Configuration information for a world.

                      
                      

                      - **world** *(string) --* 

                        The world generated by Simulation WorldForge.

                        
                  
                
                  

                  - **useDefaultUploadConfigurations** *(boolean) --* 

                    A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                     

                    If you set this value, you must specify an ``outputLocation`` . 

                    
                  

                  - **tools** *(list) --* 

                    Information about tools configured for the simulation application.

                    
                    

                    - *(dict) --* 

                      Information about a tool. Tools are used in a simulation job.

                      
                      

                      - **streamUI** *(boolean) --* 

                        Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                        
                      

                      - **name** *(string) --* 

                        The name of the tool.

                        
                      

                      - **command** *(string) --* 

                        Command-line arguments for the tool. It must include the tool executable name.

                        
                      

                      - **streamOutputToCloudWatch** *(boolean) --* 

                        Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                        
                      

                      - **exitBehavior** *(string) --* 

                        Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                        
                  
                
                  

                  - **useDefaultTools** *(boolean) --* 

                    A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                    
              
            
              

              - **dataSources** *(list) --* 

                Specify data sources to mount read-only files from S3 into your simulation. These files are available under ``/opt/robomaker/datasources/data_source_name`` . 

                 

                .. note::

                   

                  There is a limit of 100 files and a combined size of 25GB for all ``DataSourceConfig`` objects. 

                   

                
                

                - *(dict) --* 

                  Information about a data source.

                  
                  

                  - **name** *(string) --* 

                    The name of the data source.

                    
                  

                  - **s3Bucket** *(string) --* 

                    The S3 bucket where the data files are located.

                    
                  

                  - **s3Keys** *(list) --* 

                    The list of S3 keys identifying the data source files.

                    
                    

                    - *(string) --* 
                
              
            
              

              - **vpcConfig** *(dict) --* 

                If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.

                
                

                - **subnets** *(list) --* 

                  A list of one or more subnet IDs in your VPC.

                  
                  

                  - *(string) --* 
              
                

                - **securityGroups** *(list) --* 

                  A list of one or more security groups IDs in your VPC.

                  
                  

                  - *(string) --* 
              
                

                - **assignPublicIp** *(boolean) --* 

                  A boolean indicating whether to assign a public IP address.

                  
            
              

              - **compute** *(dict) --* 

                Compute information for the simulation job

                
                

                - **simulationUnitLimit** *(integer) --* 

                  The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

                  
            
              

              - **tags** *(dict) --* 

                A map that contains tag keys and tag values that are attached to the simulation job request.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
            

            - **failureReason** *(string) --* 

              The failure reason of the simulation job request.

              
            

            - **failureCode** *(string) --* 

              The failure code.

              
            

            - **failedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job batch failed.

              
        
      
        

        - **pendingRequests** *(list) --* 

          A list of pending simulation job requests. These requests have not yet been created into simulation jobs.

          
          

          - *(dict) --* 

            Information about a simulation job request.

            
            

            - **outputLocation** *(dict) --* 

              The output location.

              
              

              - **s3Bucket** *(string) --* 

                The S3 bucket for output.

                
              

              - **s3Prefix** *(string) --* 

                The S3 folder in the ``s3Bucket`` where output files will be placed.

                
          
            

            - **loggingConfig** *(dict) --* 

              The logging configuration.

              
              

              - **recordAllRosTopics** *(boolean) --* 

                A boolean indicating whether to record all ROS topics.

                
          
            

            - **maxJobDurationInSeconds** *(integer) --* 

              The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.

              
            

            - **iamRole** *(string) --* 

              The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

              
            

            - **failureBehavior** *(string) --* 

              The failure behavior the simulation job.

                Continue  

              Restart the simulation job in the same host instance.

                Fail  

              Stop the simulation job and terminate the instance.

                
            

            - **useDefaultApplications** *(boolean) --* 

              A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. 

              
            

            - **robotApplications** *(list) --* 

              The robot applications to use in the simulation job.

              
              

              - *(dict) --* 

                Application configuration information for a robot.

                
                

                - **application** *(string) --* 

                  The application information for the robot application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the robot application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration for the robot application.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    The environment variables for the application launch.

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
                  

                  - **portForwardingConfig** *(dict) --* 

                    The port forwarding configuration.

                    
                    

                    - **portMappings** *(list) --* 

                      The port mappings for the configuration.

                      
                      

                      - *(dict) --* 

                        An object representing a port mapping.

                        
                        

                        - **jobPort** *(integer) --* 

                          The port number on the simulation job instance to use as a remote connection point. 

                          
                        

                        - **applicationPort** *(integer) --* 

                          The port number on the application.

                          
                        

                        - **enableOnPublicIp** *(boolean) --* 

                          A Boolean indicating whether to enable this port mapping on public IP.

                          
                    
                  
                
                  

                  - **streamUI** *(boolean) --* 

                    Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                    
              
                

                - **uploadConfigurations** *(list) --* 

                  The upload configurations for the robot application.

                  
                  

                  - *(dict) --* 

                    Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                    
                    

                    - **name** *(string) --* 

                      A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                       

                      For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                      
                    

                    - **path** *(string) --* 

                      Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                      
                    

                    - **uploadBehavior** *(string) --* 

                      Specifies when to upload the files:

                        UPLOAD_ON_TERMINATE  

                      Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                       

                      If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                        UPLOAD_ROLLING_AUTO_REMOVE  

                      Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                        
                
              
                

                - **useDefaultUploadConfigurations** *(boolean) --* 

                  A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                   

                  If you set this value, you must specify an ``outputLocation`` . 

                  
                

                - **tools** *(list) --* 

                  Information about tools configured for the robot application.

                  
                  

                  - *(dict) --* 

                    Information about a tool. Tools are used in a simulation job.

                    
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                      
                    

                    - **name** *(string) --* 

                      The name of the tool.

                      
                    

                    - **command** *(string) --* 

                      Command-line arguments for the tool. It must include the tool executable name.

                      
                    

                    - **streamOutputToCloudWatch** *(boolean) --* 

                      Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                      
                    

                    - **exitBehavior** *(string) --* 

                      Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                      
                
              
                

                - **useDefaultTools** *(boolean) --* 

                  A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                  
            
          
            

            - **simulationApplications** *(list) --* 

              The simulation applications to use in the simulation job.

              
              

              - *(dict) --* 

                Information about a simulation application configuration.

                
                

                - **application** *(string) --* 

                  The application information for the simulation application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the simulation application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration for the simulation application.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    The environment variables for the application launch.

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
                  

                  - **portForwardingConfig** *(dict) --* 

                    The port forwarding configuration.

                    
                    

                    - **portMappings** *(list) --* 

                      The port mappings for the configuration.

                      
                      

                      - *(dict) --* 

                        An object representing a port mapping.

                        
                        

                        - **jobPort** *(integer) --* 

                          The port number on the simulation job instance to use as a remote connection point. 

                          
                        

                        - **applicationPort** *(integer) --* 

                          The port number on the application.

                          
                        

                        - **enableOnPublicIp** *(boolean) --* 

                          A Boolean indicating whether to enable this port mapping on public IP.

                          
                    
                  
                
                  

                  - **streamUI** *(boolean) --* 

                    Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                    
              
                

                - **uploadConfigurations** *(list) --* 

                  Information about upload configurations for the simulation application.

                  
                  

                  - *(dict) --* 

                    Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                    
                    

                    - **name** *(string) --* 

                      A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                       

                      For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                      
                    

                    - **path** *(string) --* 

                      Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                      
                    

                    - **uploadBehavior** *(string) --* 

                      Specifies when to upload the files:

                        UPLOAD_ON_TERMINATE  

                      Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                       

                      If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                        UPLOAD_ROLLING_AUTO_REMOVE  

                      Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                        
                
              
                

                - **worldConfigs** *(list) --* 

                  A list of world configurations.

                  
                  

                  - *(dict) --* 

                    Configuration information for a world.

                    
                    

                    - **world** *(string) --* 

                      The world generated by Simulation WorldForge.

                      
                
              
                

                - **useDefaultUploadConfigurations** *(boolean) --* 

                  A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                   

                  If you set this value, you must specify an ``outputLocation`` . 

                  
                

                - **tools** *(list) --* 

                  Information about tools configured for the simulation application.

                  
                  

                  - *(dict) --* 

                    Information about a tool. Tools are used in a simulation job.

                    
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                      
                    

                    - **name** *(string) --* 

                      The name of the tool.

                      
                    

                    - **command** *(string) --* 

                      Command-line arguments for the tool. It must include the tool executable name.

                      
                    

                    - **streamOutputToCloudWatch** *(boolean) --* 

                      Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                      
                    

                    - **exitBehavior** *(string) --* 

                      Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                      
                
              
                

                - **useDefaultTools** *(boolean) --* 

                  A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                  
            
          
            

            - **dataSources** *(list) --* 

              Specify data sources to mount read-only files from S3 into your simulation. These files are available under ``/opt/robomaker/datasources/data_source_name`` . 

               

              .. note::

                 

                There is a limit of 100 files and a combined size of 25GB for all ``DataSourceConfig`` objects. 

                 

              
              

              - *(dict) --* 

                Information about a data source.

                
                

                - **name** *(string) --* 

                  The name of the data source.

                  
                

                - **s3Bucket** *(string) --* 

                  The S3 bucket where the data files are located.

                  
                

                - **s3Keys** *(list) --* 

                  The list of S3 keys identifying the data source files.

                  
                  

                  - *(string) --* 
              
            
          
            

            - **vpcConfig** *(dict) --* 

              If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.

              
              

              - **subnets** *(list) --* 

                A list of one or more subnet IDs in your VPC.

                
                

                - *(string) --* 
            
              

              - **securityGroups** *(list) --* 

                A list of one or more security groups IDs in your VPC.

                
                

                - *(string) --* 
            
              

              - **assignPublicIp** *(boolean) --* 

                A boolean indicating whether to assign a public IP address.

                
          
            

            - **compute** *(dict) --* 

              Compute information for the simulation job

              
              

              - **simulationUnitLimit** *(integer) --* 

                The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

                
          
            

            - **tags** *(dict) --* 

              A map that contains tag keys and tag values that are attached to the simulation job request.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **createdRequests** *(list) --* 

          A list of created simulation job summaries.

          
          

          - *(dict) --* 

            Summary information for a simulation job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the simulation job.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job was last updated.

              
            

            - **name** *(string) --* 

              The name of the simulation job.

              
            

            - **status** *(string) --* 

              The status of the simulation job.

              
            

            - **simulationApplicationNames** *(list) --* 

              A list of simulation job simulation application names.

              
              

              - *(string) --* 
          
            

            - **robotApplicationNames** *(list) --* 

              A list of simulation job robot application names.

              
              

              - *(string) --* 
          
            

            - **dataSourceNames** *(list) --* 

              The names of the data sources.

              
              

              - *(string) --* 
          
        
      
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the simulation job batch.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_world(**kwargs)

    

    Describes a world.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeWorld>`_    


    **Request Syntax** 
    ::

      response = client.describe_world(
          world='string'
      )
    :type world: string
    :param world: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world you want to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'generationJob': 'string',
            'template': 'string',
            'createdAt': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            },
            'worldDescriptionBody': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (arn) of the world.

          
        

        - **generationJob** *(string) --* 

          The Amazon Resource Name (arn) of the world generation job that generated the world.

          
        

        - **template** *(string) --* 

          The world template.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world was created.

          
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the world.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **worldDescriptionBody** *(string) --* 

          Returns the JSON formatted string that describes the contents of your world.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_world_export_job(**kwargs)

    

    Describes a world export job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeWorldExportJob>`_    


    **Request Syntax** 
    ::

      response = client.describe_world_export_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world export job to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'status': 'Pending'|'Running'|'Completed'|'Failed'|'Canceling'|'Canceled',
            'createdAt': datetime(2015, 1, 1),
            'failureCode': 'InternalServiceError'|'LimitExceeded'|'ResourceNotFound'|'RequestThrottled'|'InvalidInput'|'AccessDenied',
            'failureReason': 'string',
            'clientRequestToken': 'string',
            'worlds': [
                'string',
            ],
            'outputLocation': {
                's3Bucket': 'string',
                's3Prefix': 'string'
            },
            'iamRole': 'string',
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the world export job.

          
        

        - **status** *(string) --* 

          The status of the world export job.

            Pending  

          The world export job request is pending.

            Running  

          The world export job is running. 

            Completed  

          The world export job completed. 

            Failed  

          The world export job failed. See ``failureCode`` and ``failureReason`` for more information. 

            Canceled  

          The world export job was cancelled.

            Canceling  

          The world export job is being cancelled.

            
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world export job was created.

          
        

        - **failureCode** *(string) --* 

          The failure code of the world export job if it failed:

            InternalServiceError  

          Internal service error.

            LimitExceeded  

          The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. 

            ResourceNotFound  

          The specified resource could not be found. 

            RequestThrottled  

          The request was throttled.

            InvalidInput  

          An input parameter in the request is not valid.

            
        

        - **failureReason** *(string) --* 

          The reason why the world export job failed.

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **worlds** *(list) --* 

          A list of Amazon Resource Names (arns) that correspond to worlds to be exported.

          
          

          - *(string) --* 
      
        

        - **outputLocation** *(dict) --* 

          The output location.

          
          

          - **s3Bucket** *(string) --* 

            The S3 bucket for output.

            
          

          - **s3Prefix** *(string) --* 

            The S3 folder in the ``s3Bucket`` where output files will be placed.

            
      
        

        - **iamRole** *(string) --* 

          The IAM role that the world export process uses to access the Amazon S3 bucket and put the export.

          
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the world export job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_world_generation_job(**kwargs)

    

    Describes a world generation job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeWorldGenerationJob>`_    


    **Request Syntax** 
    ::

      response = client.describe_world_generation_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world generation job to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'status': 'Pending'|'Running'|'Completed'|'Failed'|'PartialFailed'|'Canceling'|'Canceled',
            'createdAt': datetime(2015, 1, 1),
            'failureCode': 'InternalServiceError'|'LimitExceeded'|'ResourceNotFound'|'RequestThrottled'|'InvalidInput'|'AllWorldGenerationFailed',
            'failureReason': 'string',
            'clientRequestToken': 'string',
            'template': 'string',
            'worldCount': {
                'floorplanCount': 123,
                'interiorCountPerFloorplan': 123
            },
            'finishedWorldsSummary': {
                'finishedCount': 123,
                'succeededWorlds': [
                    'string',
                ],
                'failureSummary': {
                    'totalFailureCount': 123,
                    'failures': [
                        {
                            'failureCode': 'InternalServiceError'|'LimitExceeded'|'ResourceNotFound'|'RequestThrottled'|'InvalidInput'|'AllWorldGenerationFailed',
                            'sampleFailureReason': 'string',
                            'failureCount': 123
                        },
                    ]
                }
            },
            'tags': {
                'string': 'string'
            },
            'worldTags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the world generation job.

          
        

        - **status** *(string) --* 

          The status of the world generation job:

            Pending  

          The world generation job request is pending.

            Running  

          The world generation job is running. 

            Completed  

          The world generation job completed. 

            Failed  

          The world generation job failed. See ``failureCode`` for more information. 

            PartialFailed  

          Some worlds did not generate.

            Canceled  

          The world generation job was cancelled.

            Canceling  

          The world generation job is being cancelled.

            
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world generation job was created.

          
        

        - **failureCode** *(string) --* 

          The failure code of the world generation job if it failed:

            InternalServiceError  

          Internal service error.

            LimitExceeded  

          The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. 

            ResourceNotFound  

          The specified resource could not be found. 

            RequestThrottled  

          The request was throttled.

            InvalidInput  

          An input parameter in the request is not valid.

            
        

        - **failureReason** *(string) --* 

          The reason why the world generation job failed.

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **template** *(string) --* 

          The Amazon Resource Name (arn) of the world template.

          
        

        - **worldCount** *(dict) --* 

          Information about the world count.

          
          

          - **floorplanCount** *(integer) --* 

            The number of unique floorplans.

            
          

          - **interiorCountPerFloorplan** *(integer) --* 

            The number of unique interiors per floorplan.

            
      
        

        - **finishedWorldsSummary** *(dict) --* 

          Summary information about finished worlds.

          
          

          - **finishedCount** *(integer) --* 

            The total number of finished worlds.

            
          

          - **succeededWorlds** *(list) --* 

            A list of worlds that succeeded.

            
            

            - *(string) --* 
        
          

          - **failureSummary** *(dict) --* 

            Information about worlds that failed.

            
            

            - **totalFailureCount** *(integer) --* 

              The total number of failures.

              
            

            - **failures** *(list) --* 

              The worlds that failed.

              
              

              - *(dict) --* 

                Information about a failed world.

                
                

                - **failureCode** *(string) --* 

                  The failure code of the world export job if it failed:

                    InternalServiceError  

                  Internal service error.

                    LimitExceeded  

                  The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. 

                    ResourceNotFound  

                  The specified resource could not be found. 

                    RequestThrottled  

                  The request was throttled.

                    InvalidInput  

                  An input parameter in the request is not valid.

                    
                

                - **sampleFailureReason** *(string) --* 

                  The sample reason why the world failed. World errors are aggregated. A sample is used as the ``sampleFailureReason`` . 

                  
                

                - **failureCount** *(integer) --* 

                  The number of failed worlds.

                  
            
          
        
      
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the world generation job.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **worldTags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the generated worlds.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_world_template(**kwargs)

    

    Describes a world template.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/DescribeWorldTemplate>`_    


    **Request Syntax** 
    ::

      response = client.describe_world_template(
          template='string'
      )
    :type template: string
    :param template: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world template you want to describe.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'clientRequestToken': 'string',
            'name': 'string',
            'createdAt': datetime(2015, 1, 1),
            'lastUpdatedAt': datetime(2015, 1, 1),
            'tags': {
                'string': 'string'
            },
            'version': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the world template.

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **name** *(string) --* 

          The name of the world template.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world template was created.

          
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world template was last updated.

          
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the world template.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
        

        - **version** *(string) --* 

          The version of the world template that you're using.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: get_world_template_body(**kwargs)

    

    Gets the world template body.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/GetWorldTemplateBody>`_    


    **Request Syntax** 
    ::

      response = client.get_world_template_body(
          template='string',
          generationJob='string'
      )
    :type template: string
    :param template: 

      The Amazon Resource Name (arn) of the world template.

      

    
    :type generationJob: string
    :param generationJob: 

      The Amazon Resource Name (arn) of the world generator job.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'templateBody': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **templateBody** *(string) --* 

          The world template body.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: list_deployment_jobs(**kwargs)

    

    Returns a list of deployment jobs for a fleet. You can optionally provide filters to retrieve specific deployment jobs. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListDeploymentJobs>`_    


    **Request Syntax** 
    ::

      response = client.list_deployment_jobs(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          nextToken='string',
          maxResults=123
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter names ``status`` and ``fleetName`` are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status ``InProgress`` or the status ``Pending`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListDeploymentJobs`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListDeploymentJobs`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListDeploymentJobs`` request with the returned ``nextToken`` value. This value can be between 1 and 200. If this parameter is not used, then ``ListDeploymentJobs`` returns up to 200 results and a ``nextToken`` value if applicable. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'deploymentJobs': [
                {
                    'arn': 'string',
                    'fleet': 'string',
                    'status': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
                    'deploymentApplicationConfigs': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'preLaunchFile': 'string',
                                'launchFile': 'string',
                                'postLaunchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                }
                            }
                        },
                    ],
                    'deploymentConfig': {
                        'concurrentDeploymentPercentage': 123,
                        'failureThresholdPercentage': 123,
                        'robotDeploymentTimeoutInSeconds': 123,
                        'downloadConditionFile': {
                            'bucket': 'string',
                            'key': 'string',
                            'etag': 'string'
                        }
                    },
                    'failureReason': 'string',
                    'failureCode': 'ResourceNotFound'|'EnvironmentSetupError'|'EtagMismatch'|'FailureThresholdBreached'|'RobotDeploymentAborted'|'RobotDeploymentNoResponse'|'RobotAgentConnectionTimeout'|'GreengrassDeploymentFailed'|'InvalidGreengrassGroup'|'MissingRobotArchitecture'|'MissingRobotApplicationArchitecture'|'MissingRobotDeploymentResource'|'GreengrassGroupVersionDoesNotExist'|'LambdaDeleted'|'ExtractingBundleFailure'|'PreLaunchFileFailure'|'PostLaunchFileFailure'|'BadPermissionError'|'DownloadConditionFailed'|'BadLambdaAssociated'|'InternalServerError'|'RobotApplicationDoesNotExist'|'DeploymentFleetDoesNotExist'|'FleetDeploymentTimeout',
                    'createdAt': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **deploymentJobs** *(list) --* 

          A list of deployment jobs that meet the criteria of the request.

          
          

          - *(dict) --* 

            Information about a deployment job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the deployment job.

              
            

            - **fleet** *(string) --* 

              The Amazon Resource Name (ARN) of the fleet.

              
            

            - **status** *(string) --* 

              The status of the deployment job.

              
            

            - **deploymentApplicationConfigs** *(list) --* 

              The deployment application configuration.

              
              

              - *(dict) --* 

                Information about a deployment application configuration.

                
                

                - **application** *(string) --* 

                  The Amazon Resource Name (ARN) of the robot application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **preLaunchFile** *(string) --* 

                    The deployment pre-launch file. This file will be executed prior to the launch file.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **postLaunchFile** *(string) --* 

                    The deployment post-launch file. This file will be executed after the launch file.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    An array of key/value pairs specifying environment variables for the robot application

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
              
            
          
            

            - **deploymentConfig** *(dict) --* 

              The deployment configuration.

              
              

              - **concurrentDeploymentPercentage** *(integer) --* 

                The percentage of robots receiving the deployment at the same time.

                
              

              - **failureThresholdPercentage** *(integer) --* 

                The percentage of deployments that need to fail before stopping deployment.

                
              

              - **robotDeploymentTimeoutInSeconds** *(integer) --* 

                The amount of time, in seconds, to wait for deployment to a single robot to complete. Choose a time between 1 minute and 7 days. The default is 5 hours.

                
              

              - **downloadConditionFile** *(dict) --* 

                The download condition file.

                
                

                - **bucket** *(string) --* 

                  The bucket containing the object.

                  
                

                - **key** *(string) --* 

                  The key of the object.

                  
                

                - **etag** *(string) --* 

                  The etag of the object.

                  
            
          
            

            - **failureReason** *(string) --* 

              A short description of the reason why the deployment job failed.

              
            

            - **failureCode** *(string) --* 

              The deployment job failure code.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the deployment job was created.

              
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListDeploymentJobs`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_fleets(**kwargs)

    

    Returns a list of fleets. You can optionally provide filters to retrieve specific fleets. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListFleets>`_    


    **Request Syntax** 
    ::

      response = client.list_fleets(
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListFleets`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

       

      .. note::

         

        This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.

         

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListFleets`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListFleets`` request with the returned ``nextToken`` value. This value can be between 1 and 200. If this parameter is not used, then ``ListFleets`` returns up to 200 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter name ``name`` is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'fleetDetails': [
                {
                    'name': 'string',
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastDeploymentStatus': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
                    'lastDeploymentJob': 'string',
                    'lastDeploymentTime': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **fleetDetails** *(list) --* 

          A list of fleet details meeting the request criteria.

          
          

          - *(dict) --* 

            Information about a fleet.

            
            

            - **name** *(string) --* 

              The name of the fleet.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the fleet.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the fleet was created.

              
            

            - **lastDeploymentStatus** *(string) --* 

              The status of the last fleet deployment.

              
            

            - **lastDeploymentJob** *(string) --* 

              The Amazon Resource Name (ARN) of the last deployment job.

              
            

            - **lastDeploymentTime** *(datetime) --* 

              The time of the last deployment.

              
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListFleets`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_robot_applications(**kwargs)

    

    Returns a list of robot application. You can optionally provide filters to retrieve specific robot applications.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListRobotApplications>`_    


    **Request Syntax** 
    ::

      response = client.list_robot_applications(
          versionQualifier='string',
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type versionQualifier: string
    :param versionQualifier: 

      The version qualifier of the robot application.

      

    
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListRobotApplications`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListRobotApplications`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListRobotApplications`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If this parameter is not used, then ``ListRobotApplications`` returns up to 100 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter name ``name`` is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'robotApplicationSummaries': [
                {
                    'name': 'string',
                    'arn': 'string',
                    'version': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'robotSoftwareSuite': {
                        'name': 'ROS'|'ROS2',
                        'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **robotApplicationSummaries** *(list) --* 

          A list of robot application summaries that meet the criteria of the request.

          
          

          - *(dict) --* 

            Summary information for a robot application.

            
            

            - **name** *(string) --* 

              The name of the robot application.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the robot.

              
            

            - **version** *(string) --* 

              The version of the robot application.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the robot application was last updated.

              
            

            - **robotSoftwareSuite** *(dict) --* 

              Information about a robot software suite (ROS distribution).

              
              

              - **name** *(string) --* 

                The name of the robot software suite (ROS distribution).

                
              

              - **version** *(string) --* 

                The version of the robot software suite (ROS distribution).

                
          
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListRobotApplications`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: list_robots(**kwargs)

    

    Returns a list of robots. You can optionally provide filters to retrieve specific robots.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListRobots>`_    


    **Request Syntax** 
    ::

      response = client.list_robots(
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListRobots`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListRobots`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListRobots`` request with the returned ``nextToken`` value. This value can be between 1 and 200. If this parameter is not used, then ``ListRobots`` returns up to 200 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter names ``status`` and ``fleetName`` are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status ``Registered`` or the status ``Available`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'robots': [
                {
                    'arn': 'string',
                    'name': 'string',
                    'fleetArn': 'string',
                    'status': 'Available'|'Registered'|'PendingNewDeployment'|'Deploying'|'Failed'|'InSync'|'NoResponse',
                    'greenGrassGroupId': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'architecture': 'X86_64'|'ARM64'|'ARMHF',
                    'lastDeploymentJob': 'string',
                    'lastDeploymentTime': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **robots** *(list) --* 

          A list of robots that meet the criteria of the request.

          
          

          - *(dict) --* 

            Information about a robot.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the robot.

              
            

            - **name** *(string) --* 

              The name of the robot.

              
            

            - **fleetArn** *(string) --* 

              The Amazon Resource Name (ARN) of the fleet.

              
            

            - **status** *(string) --* 

              The status of the robot.

              
            

            - **greenGrassGroupId** *(string) --* 

              The Greengrass group associated with the robot.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the robot was created.

              
            

            - **architecture** *(string) --* 

              The architecture of the robot.

              
            

            - **lastDeploymentJob** *(string) --* 

              The Amazon Resource Name (ARN) of the last deployment job.

              
            

            - **lastDeploymentTime** *(datetime) --* 

              The time of the last deployment.

              
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListRobots`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_simulation_applications(**kwargs)

    

    Returns a list of simulation applications. You can optionally provide filters to retrieve specific simulation applications. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListSimulationApplications>`_    


    **Request Syntax** 
    ::

      response = client.list_simulation_applications(
          versionQualifier='string',
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type versionQualifier: string
    :param versionQualifier: 

      The version qualifier of the simulation application.

      

    
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListSimulationApplications`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListSimulationApplications`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListSimulationApplications`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If this parameter is not used, then ``ListSimulationApplications`` returns up to 100 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional list of filters to limit results.

       

      The filter name ``name`` is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'simulationApplicationSummaries': [
                {
                    'name': 'string',
                    'arn': 'string',
                    'version': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'robotSoftwareSuite': {
                        'name': 'ROS'|'ROS2',
                        'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
                    },
                    'simulationSoftwareSuite': {
                        'name': 'Gazebo'|'RosbagPlay',
                        'version': 'string'
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **simulationApplicationSummaries** *(list) --* 

          A list of simulation application summaries that meet the criteria of the request.

          
          

          - *(dict) --* 

            Summary information for a simulation application.

            
            

            - **name** *(string) --* 

              The name of the simulation application.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the simulation application.

              
            

            - **version** *(string) --* 

              The version of the simulation application.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation application was last updated.

              
            

            - **robotSoftwareSuite** *(dict) --* 

              Information about a robot software suite (ROS distribution).

              
              

              - **name** *(string) --* 

                The name of the robot software suite (ROS distribution).

                
              

              - **version** *(string) --* 

                The version of the robot software suite (ROS distribution).

                
          
            

            - **simulationSoftwareSuite** *(dict) --* 

              Information about a simulation software suite.

              
              

              - **name** *(string) --* 

                The name of the simulation software suite.

                
              

              - **version** *(string) --* 

                The version of the simulation software suite.

                
          
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListSimulationApplications`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: list_simulation_job_batches(**kwargs)

    

    Returns a list simulation job batches. You can optionally provide filters to retrieve specific simulation batch jobs. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListSimulationJobBatches>`_    


    **Request Syntax** 
    ::

      response = client.list_simulation_job_batches(
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListSimulationJobBatches`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListSimulationJobBatches`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListSimulationJobBatches`` request with the returned ``nextToken`` value. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'simulationJobBatchSummaries': [
                {
                    'arn': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'createdAt': datetime(2015, 1, 1),
                    'status': 'Pending'|'InProgress'|'Failed'|'Completed'|'Canceled'|'Canceling'|'Completing'|'TimingOut'|'TimedOut',
                    'failedRequestCount': 123,
                    'pendingRequestCount': 123,
                    'createdRequestCount': 123
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **simulationJobBatchSummaries** *(list) --* 

          A list of simulation job batch summaries.

          
          

          - *(dict) --* 

            Information about a simulation job batch.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the batch.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job batch was last updated.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job batch was created.

              
            

            - **status** *(string) --* 

              The status of the simulation job batch.

                Pending  

              The simulation job batch request is pending.

                InProgress  

              The simulation job batch is in progress. 

                Failed  

              The simulation job batch failed. One or more simulation job requests could not be completed due to an internal failure (like ``InternalServiceError`` ). See ``failureCode`` and ``failureReason`` for more information.

                Completed  

              The simulation batch job completed. A batch is complete when (1) there are no pending simulation job requests in the batch and none of the failed simulation job requests are due to ``InternalServiceError`` and (2) when all created simulation jobs have reached a terminal state (for example, ``Completed`` or ``Failed`` ). 

                Canceled  

              The simulation batch job was cancelled.

                Canceling  

              The simulation batch job is being cancelled.

                Completing  

              The simulation batch job is completing.

                TimingOut  

              The simulation job batch is timing out.

               

              If a batch timing out, and there are pending requests that were failing due to an internal failure (like ``InternalServiceError`` ), the batch status will be ``Failed`` . If there are no such failing request, the batch status will be ``TimedOut`` . 

                TimedOut  

              The simulation batch job timed out.

                
            

            - **failedRequestCount** *(integer) --* 

              The number of failed simulation job requests.

              
            

            - **pendingRequestCount** *(integer) --* 

              The number of pending simulation job requests.

              
            

            - **createdRequestCount** *(integer) --* 

              The number of created simulation job requests.

              
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListSimulationJobBatches`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: list_simulation_jobs(**kwargs)

    

    Returns a list of simulation jobs. You can optionally provide filters to retrieve specific simulation jobs. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListSimulationJobs>`_    


    **Request Syntax** 
    ::

      response = client.list_simulation_jobs(
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListSimulationJobs`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListSimulationJobs`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListSimulationJobs`` request with the returned ``nextToken`` value. This value can be between 1 and 1000. If this parameter is not used, then ``ListSimulationJobs`` returns up to 1000 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter names ``status`` and ``simulationApplicationName`` and ``robotApplicationName`` are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status ``Preparing`` or the status ``Running`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'simulationJobSummaries': [
                {
                    'arn': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'name': 'string',
                    'status': 'Pending'|'Preparing'|'Running'|'Restarting'|'Completed'|'Failed'|'RunningFailed'|'Terminating'|'Terminated'|'Canceled',
                    'simulationApplicationNames': [
                        'string',
                    ],
                    'robotApplicationNames': [
                        'string',
                    ],
                    'dataSourceNames': [
                        'string',
                    ]
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **simulationJobSummaries** *(list) --* 

          A list of simulation job summaries that meet the criteria of the request.

          
          

          - *(dict) --* 

            Summary information for a simulation job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the simulation job.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job was last updated.

              
            

            - **name** *(string) --* 

              The name of the simulation job.

              
            

            - **status** *(string) --* 

              The status of the simulation job.

              
            

            - **simulationApplicationNames** *(list) --* 

              A list of simulation job simulation application names.

              
              

              - *(string) --* 
          
            

            - **robotApplicationNames** *(list) --* 

              A list of simulation job robot application names.

              
              

              - *(string) --* 
          
            

            - **dataSourceNames** *(list) --* 

              The names of the data sources.

              
              

              - *(string) --* 
          
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListSimulationJobs`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists all tags on a AWS RoboMaker resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The AWS RoboMaker Amazon Resource Name (ARN) with tags to be listed.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(dict) --* 

          The list of all tags added to the specified resource.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_world_export_jobs(**kwargs)

    

    Lists world export jobs.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorldExportJobs>`_    


    **Request Syntax** 
    ::

      response = client.list_world_export_jobs(
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorldExportJobs`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListWorldExportJobs`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListWorldExportJobs`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If this parameter is not used, then ``ListWorldExportJobs`` returns up to 100 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results. You can use ``generationJobId`` and ``templateId`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'worldExportJobSummaries': [
                {
                    'arn': 'string',
                    'status': 'Pending'|'Running'|'Completed'|'Failed'|'Canceling'|'Canceled',
                    'createdAt': datetime(2015, 1, 1),
                    'worlds': [
                        'string',
                    ]
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **worldExportJobSummaries** *(list) --* 

          Summary information for world export jobs.

          
          

          - *(dict) --* 

            Information about a world export job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the world export job.

              
            

            - **status** *(string) --* 

              The status of the world export job.

                Pending  

              The world export job request is pending.

                Running  

              The world export job is running. 

                Completed  

              The world export job completed. 

                Failed  

              The world export job failed. See ``failureCode`` for more information. 

                Canceled  

              The world export job was cancelled.

                Canceling  

              The world export job is being cancelled.

                
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the world export job was created.

              
            

            - **worlds** *(list) --* 

              A list of worlds.

              
              

              - *(string) --* 
          
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorldExportJobsRequest`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_world_generation_jobs(**kwargs)

    

    Lists world generator jobs.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorldGenerationJobs>`_    


    **Request Syntax** 
    ::

      response = client.list_world_generation_jobs(
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorldGenerationJobsRequest`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListWorldGeneratorJobs`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListWorldGeneratorJobs`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If this parameter is not used, then ``ListWorldGeneratorJobs`` returns up to 100 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results. You can use ``status`` and ``templateId`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'worldGenerationJobSummaries': [
                {
                    'arn': 'string',
                    'template': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'status': 'Pending'|'Running'|'Completed'|'Failed'|'PartialFailed'|'Canceling'|'Canceled',
                    'worldCount': {
                        'floorplanCount': 123,
                        'interiorCountPerFloorplan': 123
                    },
                    'succeededWorldCount': 123,
                    'failedWorldCount': 123
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **worldGenerationJobSummaries** *(list) --* 

          Summary information for world generator jobs.

          
          

          - *(dict) --* 

            Information about a world generator job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the world generator job.

              
            

            - **template** *(string) --* 

              The Amazon Resource Name (arn) of the world template.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the world generator job was created.

              
            

            - **status** *(string) --* 

              The status of the world generator job:

                Pending  

              The world generator job request is pending.

                Running  

              The world generator job is running. 

                Completed  

              The world generator job completed. 

                Failed  

              The world generator job failed. See ``failureCode`` for more information. 

                PartialFailed  

              Some worlds did not generate.

                Canceled  

              The world generator job was cancelled.

                Canceling  

              The world generator job is being cancelled.

                
            

            - **worldCount** *(dict) --* 

              Information about the world count.

              
              

              - **floorplanCount** *(integer) --* 

                The number of unique floorplans.

                
              

              - **interiorCountPerFloorplan** *(integer) --* 

                The number of unique interiors per floorplan.

                
          
            

            - **succeededWorldCount** *(integer) --* 

              The number of worlds that were generated.

              
            

            - **failedWorldCount** *(integer) --* 

              The number of worlds that failed.

              
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorldGeneratorJobsRequest`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_world_templates(**kwargs)

    

    Lists world templates.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorldTemplates>`_    


    **Request Syntax** 
    ::

      response = client.list_world_templates(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorldTemplates`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListWorldTemplates`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListWorldTemplates`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If this parameter is not used, then ``ListWorldTemplates`` returns up to 100 results and a ``nextToken`` value if applicable. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'templateSummaries': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'name': 'string',
                    'version': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **templateSummaries** *(list) --* 

          Summary information for templates.

          
          

          - *(dict) --* 

            Summary information for a template.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the template.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the template was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the template was last updated.

              
            

            - **name** *(string) --* 

              The name of the template.

              
            

            - **version** *(string) --* 

              The version of the template that you're using.

              
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorldTemplates`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: list_worlds(**kwargs)

    

    Lists worlds.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorlds>`_    


    **Request Syntax** 
    ::

      response = client.list_worlds(
          nextToken='string',
          maxResults=123,
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ]
      )
    :type nextToken: string
    :param nextToken: 

      If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorlds`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

      

    
    :type maxResults: integer
    :param maxResults: 

      When this parameter is used, ``ListWorlds`` only returns ``maxResults`` results in a single page along with a ``nextToken`` response element. The remaining results of the initial request can be seen by sending another ``ListWorlds`` request with the returned ``nextToken`` value. This value can be between 1 and 100. If this parameter is not used, then ``ListWorlds`` returns up to 100 results and a ``nextToken`` value if applicable. 

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results. You can use ``status`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'worldSummaries': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'generationJob': 'string',
                    'template': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **worldSummaries** *(list) --* 

          Summary information for worlds.

          
          

          - *(dict) --* 

            Information about a world.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the world.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the world was created.

              
            

            - **generationJob** *(string) --* 

              The Amazon Resource Name (arn) of the world generation job.

              
            

            - **template** *(string) --* 

              The Amazon Resource Name (arn) of the world template.

              
        
      
        

        - **nextToken** *(string) --* 

          If the previous paginated request did not return all of the remaining results, the response object's ``nextToken`` parameter value is set to a token. To retrieve the next set of results, call ``ListWorlds`` again and assign that token to the request object's ``nextToken`` parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. 

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: register_robot(**kwargs)

    

    Registers a robot with a fleet.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/RegisterRobot>`_    


    **Request Syntax** 
    ::

      response = client.register_robot(
          fleet='string',
          robot='string'
      )
    :type fleet: string
    :param fleet: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the fleet.

      

    
    :type robot: string
    :param robot: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the robot.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'fleet': 'string',
            'robot': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **fleet** *(string) --* 

          The Amazon Resource Name (ARN) of the fleet that the robot will join.

          
        

        - **robot** *(string) --* 

          Information about the robot registration.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: restart_simulation_job(**kwargs)

    

    Restarts a running simulation job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/RestartSimulationJob>`_    


    **Request Syntax** 
    ::

      response = client.restart_simulation_job(
          job='string'
      )
    :type job: string
    :param job: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the simulation job.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: start_simulation_job_batch(**kwargs)

    

    Starts a new simulation job batch. The batch is defined using one or more ``SimulationJobRequest`` objects. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/StartSimulationJobBatch>`_    


    **Request Syntax** 
    ::

      response = client.start_simulation_job_batch(
          clientRequestToken='string',
          batchPolicy={
              'timeoutInSeconds': 123,
              'maxConcurrency': 123
          },
          createSimulationJobRequests=[
              {
                  'outputLocation': {
                      's3Bucket': 'string',
                      's3Prefix': 'string'
                  },
                  'loggingConfig': {
                      'recordAllRosTopics': True|False
                  },
                  'maxJobDurationInSeconds': 123,
                  'iamRole': 'string',
                  'failureBehavior': 'Fail'|'Continue',
                  'useDefaultApplications': True|False,
                  'robotApplications': [
                      {
                          'application': 'string',
                          'applicationVersion': 'string',
                          'launchConfig': {
                              'packageName': 'string',
                              'launchFile': 'string',
                              'environmentVariables': {
                                  'string': 'string'
                              },
                              'portForwardingConfig': {
                                  'portMappings': [
                                      {
                                          'jobPort': 123,
                                          'applicationPort': 123,
                                          'enableOnPublicIp': True|False
                                      },
                                  ]
                              },
                              'streamUI': True|False
                          },
                          'uploadConfigurations': [
                              {
                                  'name': 'string',
                                  'path': 'string',
                                  'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                              },
                          ],
                          'useDefaultUploadConfigurations': True|False,
                          'tools': [
                              {
                                  'streamUI': True|False,
                                  'name': 'string',
                                  'command': 'string',
                                  'streamOutputToCloudWatch': True|False,
                                  'exitBehavior': 'FAIL'|'RESTART'
                              },
                          ],
                          'useDefaultTools': True|False
                      },
                  ],
                  'simulationApplications': [
                      {
                          'application': 'string',
                          'applicationVersion': 'string',
                          'launchConfig': {
                              'packageName': 'string',
                              'launchFile': 'string',
                              'environmentVariables': {
                                  'string': 'string'
                              },
                              'portForwardingConfig': {
                                  'portMappings': [
                                      {
                                          'jobPort': 123,
                                          'applicationPort': 123,
                                          'enableOnPublicIp': True|False
                                      },
                                  ]
                              },
                              'streamUI': True|False
                          },
                          'uploadConfigurations': [
                              {
                                  'name': 'string',
                                  'path': 'string',
                                  'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                              },
                          ],
                          'worldConfigs': [
                              {
                                  'world': 'string'
                              },
                          ],
                          'useDefaultUploadConfigurations': True|False,
                          'tools': [
                              {
                                  'streamUI': True|False,
                                  'name': 'string',
                                  'command': 'string',
                                  'streamOutputToCloudWatch': True|False,
                                  'exitBehavior': 'FAIL'|'RESTART'
                              },
                          ],
                          'useDefaultTools': True|False
                      },
                  ],
                  'dataSources': [
                      {
                          'name': 'string',
                          's3Bucket': 'string',
                          's3Keys': [
                              'string',
                          ]
                      },
                  ],
                  'vpcConfig': {
                      'subnets': [
                          'string',
                      ],
                      'securityGroups': [
                          'string',
                      ],
                      'assignPublicIp': True|False
                  },
                  'compute': {
                      'simulationUnitLimit': 123
                  },
                  'tags': {
                      'string': 'string'
                  }
              },
          ],
          tags={
              'string': 'string'
          }
      )
    :type clientRequestToken: string
    :param clientRequestToken: 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    :type batchPolicy: dict
    :param batchPolicy: 

      The batch policy.

      

    
      - **timeoutInSeconds** *(integer) --* 

        The amount of time, in seconds, to wait for the batch to complete. 

         

        If a batch times out, and there are pending requests that were failing due to an internal failure (like ``InternalServiceError`` ), they will be moved to the failed list and the batch status will be ``Failed`` . If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be ``TimedOut`` . 

        

      
      - **maxConcurrency** *(integer) --* 

        The number of active simulation jobs create as part of the batch that can be in an active state at the same time. 

         

        Active states include: ``Pending`` ,``Preparing`` , ``Running`` , ``Restarting`` , ``RunningFailed`` and ``Terminating`` . All other states are terminal states. 

        

      
    
    :type createSimulationJobRequests: list
    :param createSimulationJobRequests: **[REQUIRED]** 

      A list of simulation job requests to create in the batch.

      

    
      - *(dict) --* 

        Information about a simulation job request.

        

      
        - **outputLocation** *(dict) --* 

          The output location.

          

        
          - **s3Bucket** *(string) --* 

            The S3 bucket for output.

            

          
          - **s3Prefix** *(string) --* 

            The S3 folder in the ``s3Bucket`` where output files will be placed.

            

          
        
        - **loggingConfig** *(dict) --* 

          The logging configuration.

          

        
          - **recordAllRosTopics** *(boolean) --* **[REQUIRED]** 

            A boolean indicating whether to record all ROS topics.

            

          
        
        - **maxJobDurationInSeconds** *(integer) --* **[REQUIRED]** 

          The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.

          

        
        - **iamRole** *(string) --* 

          The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

          

        
        - **failureBehavior** *(string) --* 

          The failure behavior the simulation job.

            Continue  

          Restart the simulation job in the same host instance.

            Fail  

          Stop the simulation job and terminate the instance.

            

        
        - **useDefaultApplications** *(boolean) --* 

          A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. 

          

        
        - **robotApplications** *(list) --* 

          The robot applications to use in the simulation job.

          

        
          - *(dict) --* 

            Application configuration information for a robot.

            

          
            - **application** *(string) --* **[REQUIRED]** 

              The application information for the robot application.

              

            
            - **applicationVersion** *(string) --* 

              The version of the robot application.

              

            
            - **launchConfig** *(dict) --* **[REQUIRED]** 

              The launch configuration for the robot application.

              

            
              - **packageName** *(string) --* **[REQUIRED]** 

                The package name.

                

              
              - **launchFile** *(string) --* **[REQUIRED]** 

                The launch file name.

                

              
              - **environmentVariables** *(dict) --* 

                The environment variables for the application launch.

                

              
                - *(string) --* 

                
                  - *(string) --* 

                  
            
          
              - **portForwardingConfig** *(dict) --* 

                The port forwarding configuration.

                

              
                - **portMappings** *(list) --* 

                  The port mappings for the configuration.

                  

                
                  - *(dict) --* 

                    An object representing a port mapping.

                    

                  
                    - **jobPort** *(integer) --* **[REQUIRED]** 

                      The port number on the simulation job instance to use as a remote connection point. 

                      

                    
                    - **applicationPort** *(integer) --* **[REQUIRED]** 

                      The port number on the application.

                      

                    
                    - **enableOnPublicIp** *(boolean) --* 

                      A Boolean indicating whether to enable this port mapping on public IP.

                      

                    
                  
              
              
              - **streamUI** *(boolean) --* 

                Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                

              
            
            - **uploadConfigurations** *(list) --* 

              The upload configurations for the robot application.

              

            
              - *(dict) --* 

                Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                

              
                - **name** *(string) --* **[REQUIRED]** 

                  A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                   

                  For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                  

                
                - **path** *(string) --* **[REQUIRED]** 

                  Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                  

                
                - **uploadBehavior** *(string) --* **[REQUIRED]** 

                  Specifies when to upload the files:

                    UPLOAD_ON_TERMINATE  

                  Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                   

                  If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                    UPLOAD_ROLLING_AUTO_REMOVE  

                  Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                    

                
              
          
            - **useDefaultUploadConfigurations** *(boolean) --* 

              A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

               

              If you set this value, you must specify an ``outputLocation`` . 

              

            
            - **tools** *(list) --* 

              Information about tools configured for the robot application.

              

            
              - *(dict) --* 

                Information about a tool. Tools are used in a simulation job.

                

              
                - **streamUI** *(boolean) --* 

                  Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                  

                
                - **name** *(string) --* **[REQUIRED]** 

                  The name of the tool.

                  

                
                - **command** *(string) --* **[REQUIRED]** 

                  Command-line arguments for the tool. It must include the tool executable name.

                  

                
                - **streamOutputToCloudWatch** *(boolean) --* 

                  Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                  

                
                - **exitBehavior** *(string) --* 

                  Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                  

                
              
          
            - **useDefaultTools** *(boolean) --* 

              A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

              

            
          
      
        - **simulationApplications** *(list) --* 

          The simulation applications to use in the simulation job.

          

        
          - *(dict) --* 

            Information about a simulation application configuration.

            

          
            - **application** *(string) --* **[REQUIRED]** 

              The application information for the simulation application.

              

            
            - **applicationVersion** *(string) --* 

              The version of the simulation application.

              

            
            - **launchConfig** *(dict) --* **[REQUIRED]** 

              The launch configuration for the simulation application.

              

            
              - **packageName** *(string) --* **[REQUIRED]** 

                The package name.

                

              
              - **launchFile** *(string) --* **[REQUIRED]** 

                The launch file name.

                

              
              - **environmentVariables** *(dict) --* 

                The environment variables for the application launch.

                

              
                - *(string) --* 

                
                  - *(string) --* 

                  
            
          
              - **portForwardingConfig** *(dict) --* 

                The port forwarding configuration.

                

              
                - **portMappings** *(list) --* 

                  The port mappings for the configuration.

                  

                
                  - *(dict) --* 

                    An object representing a port mapping.

                    

                  
                    - **jobPort** *(integer) --* **[REQUIRED]** 

                      The port number on the simulation job instance to use as a remote connection point. 

                      

                    
                    - **applicationPort** *(integer) --* **[REQUIRED]** 

                      The port number on the application.

                      

                    
                    - **enableOnPublicIp** *(boolean) --* 

                      A Boolean indicating whether to enable this port mapping on public IP.

                      

                    
                  
              
              
              - **streamUI** *(boolean) --* 

                Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                

              
            
            - **uploadConfigurations** *(list) --* 

              Information about upload configurations for the simulation application.

              

            
              - *(dict) --* 

                Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                

              
                - **name** *(string) --* **[REQUIRED]** 

                  A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                   

                  For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                  

                
                - **path** *(string) --* **[REQUIRED]** 

                  Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                  

                
                - **uploadBehavior** *(string) --* **[REQUIRED]** 

                  Specifies when to upload the files:

                    UPLOAD_ON_TERMINATE  

                  Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                   

                  If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                    UPLOAD_ROLLING_AUTO_REMOVE  

                  Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                    

                
              
          
            - **worldConfigs** *(list) --* 

              A list of world configurations.

              

            
              - *(dict) --* 

                Configuration information for a world.

                

              
                - **world** *(string) --* 

                  The world generated by Simulation WorldForge.

                  

                
              
          
            - **useDefaultUploadConfigurations** *(boolean) --* 

              A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

               

              If you set this value, you must specify an ``outputLocation`` . 

              

            
            - **tools** *(list) --* 

              Information about tools configured for the simulation application.

              

            
              - *(dict) --* 

                Information about a tool. Tools are used in a simulation job.

                

              
                - **streamUI** *(boolean) --* 

                  Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                  

                
                - **name** *(string) --* **[REQUIRED]** 

                  The name of the tool.

                  

                
                - **command** *(string) --* **[REQUIRED]** 

                  Command-line arguments for the tool. It must include the tool executable name.

                  

                
                - **streamOutputToCloudWatch** *(boolean) --* 

                  Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                  

                
                - **exitBehavior** *(string) --* 

                  Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                  

                
              
          
            - **useDefaultTools** *(boolean) --* 

              A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

              

            
          
      
        - **dataSources** *(list) --* 

          Specify data sources to mount read-only files from S3 into your simulation. These files are available under ``/opt/robomaker/datasources/data_source_name`` . 

           

          .. note::

             

            There is a limit of 100 files and a combined size of 25GB for all ``DataSourceConfig`` objects. 

             

          

        
          - *(dict) --* 

            Information about a data source.

            

          
            - **name** *(string) --* **[REQUIRED]** 

              The name of the data source.

              

            
            - **s3Bucket** *(string) --* **[REQUIRED]** 

              The S3 bucket where the data files are located.

              

            
            - **s3Keys** *(list) --* **[REQUIRED]** 

              The list of S3 keys identifying the data source files.

              

            
              - *(string) --* 

              
          
          
      
        - **vpcConfig** *(dict) --* 

          If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.

          

        
          - **subnets** *(list) --* **[REQUIRED]** 

            A list of one or more subnet IDs in your VPC.

            

          
            - *(string) --* 

            
        
          - **securityGroups** *(list) --* 

            A list of one or more security groups IDs in your VPC.

            

          
            - *(string) --* 

            
        
          - **assignPublicIp** *(boolean) --* 

            A boolean indicating whether to assign a public IP address.

            

          
        
        - **compute** *(dict) --* 

          Compute information for the simulation job

          

        
          - **simulationUnitLimit** *(integer) --* 

            The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

            

          
        
        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the simulation job request.

          

        
          - *(string) --* 

          
            - *(string) --* 

            
      
    
      
  
    :type tags: dict
    :param tags: 

      A map that contains tag keys and tag values that are attached to the deployment job batch.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'status': 'Pending'|'InProgress'|'Failed'|'Completed'|'Canceled'|'Canceling'|'Completing'|'TimingOut'|'TimedOut',
            'createdAt': datetime(2015, 1, 1),
            'clientRequestToken': 'string',
            'batchPolicy': {
                'timeoutInSeconds': 123,
                'maxConcurrency': 123
            },
            'failureCode': 'InternalServiceError',
            'failureReason': 'string',
            'failedRequests': [
                {
                    'request': {
                        'outputLocation': {
                            's3Bucket': 'string',
                            's3Prefix': 'string'
                        },
                        'loggingConfig': {
                            'recordAllRosTopics': True|False
                        },
                        'maxJobDurationInSeconds': 123,
                        'iamRole': 'string',
                        'failureBehavior': 'Fail'|'Continue',
                        'useDefaultApplications': True|False,
                        'robotApplications': [
                            {
                                'application': 'string',
                                'applicationVersion': 'string',
                                'launchConfig': {
                                    'packageName': 'string',
                                    'launchFile': 'string',
                                    'environmentVariables': {
                                        'string': 'string'
                                    },
                                    'portForwardingConfig': {
                                        'portMappings': [
                                            {
                                                'jobPort': 123,
                                                'applicationPort': 123,
                                                'enableOnPublicIp': True|False
                                            },
                                        ]
                                    },
                                    'streamUI': True|False
                                },
                                'uploadConfigurations': [
                                    {
                                        'name': 'string',
                                        'path': 'string',
                                        'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                    },
                                ],
                                'useDefaultUploadConfigurations': True|False,
                                'tools': [
                                    {
                                        'streamUI': True|False,
                                        'name': 'string',
                                        'command': 'string',
                                        'streamOutputToCloudWatch': True|False,
                                        'exitBehavior': 'FAIL'|'RESTART'
                                    },
                                ],
                                'useDefaultTools': True|False
                            },
                        ],
                        'simulationApplications': [
                            {
                                'application': 'string',
                                'applicationVersion': 'string',
                                'launchConfig': {
                                    'packageName': 'string',
                                    'launchFile': 'string',
                                    'environmentVariables': {
                                        'string': 'string'
                                    },
                                    'portForwardingConfig': {
                                        'portMappings': [
                                            {
                                                'jobPort': 123,
                                                'applicationPort': 123,
                                                'enableOnPublicIp': True|False
                                            },
                                        ]
                                    },
                                    'streamUI': True|False
                                },
                                'uploadConfigurations': [
                                    {
                                        'name': 'string',
                                        'path': 'string',
                                        'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                    },
                                ],
                                'worldConfigs': [
                                    {
                                        'world': 'string'
                                    },
                                ],
                                'useDefaultUploadConfigurations': True|False,
                                'tools': [
                                    {
                                        'streamUI': True|False,
                                        'name': 'string',
                                        'command': 'string',
                                        'streamOutputToCloudWatch': True|False,
                                        'exitBehavior': 'FAIL'|'RESTART'
                                    },
                                ],
                                'useDefaultTools': True|False
                            },
                        ],
                        'dataSources': [
                            {
                                'name': 'string',
                                's3Bucket': 'string',
                                's3Keys': [
                                    'string',
                                ]
                            },
                        ],
                        'vpcConfig': {
                            'subnets': [
                                'string',
                            ],
                            'securityGroups': [
                                'string',
                            ],
                            'assignPublicIp': True|False
                        },
                        'compute': {
                            'simulationUnitLimit': 123
                        },
                        'tags': {
                            'string': 'string'
                        }
                    },
                    'failureReason': 'string',
                    'failureCode': 'InternalServiceError'|'RobotApplicationCrash'|'SimulationApplicationCrash'|'RobotApplicationHealthCheckFailure'|'SimulationApplicationHealthCheckFailure'|'BadPermissionsRobotApplication'|'BadPermissionsSimulationApplication'|'BadPermissionsS3Object'|'BadPermissionsS3Output'|'BadPermissionsCloudwatchLogs'|'SubnetIpLimitExceeded'|'ENILimitExceeded'|'BadPermissionsUserCredentials'|'InvalidBundleRobotApplication'|'InvalidBundleSimulationApplication'|'InvalidS3Resource'|'ThrottlingError'|'LimitExceeded'|'MismatchedEtag'|'RobotApplicationVersionMismatchedEtag'|'SimulationApplicationVersionMismatchedEtag'|'ResourceNotFound'|'RequestThrottled'|'BatchTimedOut'|'BatchCanceled'|'InvalidInput'|'WrongRegionS3Bucket'|'WrongRegionS3Output'|'WrongRegionRobotApplication'|'WrongRegionSimulationApplication'|'UploadContentMismatchError',
                    'failedAt': datetime(2015, 1, 1)
                },
            ],
            'pendingRequests': [
                {
                    'outputLocation': {
                        's3Bucket': 'string',
                        's3Prefix': 'string'
                    },
                    'loggingConfig': {
                        'recordAllRosTopics': True|False
                    },
                    'maxJobDurationInSeconds': 123,
                    'iamRole': 'string',
                    'failureBehavior': 'Fail'|'Continue',
                    'useDefaultApplications': True|False,
                    'robotApplications': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'launchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                },
                                'portForwardingConfig': {
                                    'portMappings': [
                                        {
                                            'jobPort': 123,
                                            'applicationPort': 123,
                                            'enableOnPublicIp': True|False
                                        },
                                    ]
                                },
                                'streamUI': True|False
                            },
                            'uploadConfigurations': [
                                {
                                    'name': 'string',
                                    'path': 'string',
                                    'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                },
                            ],
                            'useDefaultUploadConfigurations': True|False,
                            'tools': [
                                {
                                    'streamUI': True|False,
                                    'name': 'string',
                                    'command': 'string',
                                    'streamOutputToCloudWatch': True|False,
                                    'exitBehavior': 'FAIL'|'RESTART'
                                },
                            ],
                            'useDefaultTools': True|False
                        },
                    ],
                    'simulationApplications': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'launchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                },
                                'portForwardingConfig': {
                                    'portMappings': [
                                        {
                                            'jobPort': 123,
                                            'applicationPort': 123,
                                            'enableOnPublicIp': True|False
                                        },
                                    ]
                                },
                                'streamUI': True|False
                            },
                            'uploadConfigurations': [
                                {
                                    'name': 'string',
                                    'path': 'string',
                                    'uploadBehavior': 'UPLOAD_ON_TERMINATE'|'UPLOAD_ROLLING_AUTO_REMOVE'
                                },
                            ],
                            'worldConfigs': [
                                {
                                    'world': 'string'
                                },
                            ],
                            'useDefaultUploadConfigurations': True|False,
                            'tools': [
                                {
                                    'streamUI': True|False,
                                    'name': 'string',
                                    'command': 'string',
                                    'streamOutputToCloudWatch': True|False,
                                    'exitBehavior': 'FAIL'|'RESTART'
                                },
                            ],
                            'useDefaultTools': True|False
                        },
                    ],
                    'dataSources': [
                        {
                            'name': 'string',
                            's3Bucket': 'string',
                            's3Keys': [
                                'string',
                            ]
                        },
                    ],
                    'vpcConfig': {
                        'subnets': [
                            'string',
                        ],
                        'securityGroups': [
                            'string',
                        ],
                        'assignPublicIp': True|False
                    },
                    'compute': {
                        'simulationUnitLimit': 123
                    },
                    'tags': {
                        'string': 'string'
                    }
                },
            ],
            'createdRequests': [
                {
                    'arn': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'name': 'string',
                    'status': 'Pending'|'Preparing'|'Running'|'Restarting'|'Completed'|'Failed'|'RunningFailed'|'Terminating'|'Terminated'|'Canceled',
                    'simulationApplicationNames': [
                        'string',
                    ],
                    'robotApplicationNames': [
                        'string',
                    ],
                    'dataSourceNames': [
                        'string',
                    ]
                },
            ],
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (arn) of the batch.

          
        

        - **status** *(string) --* 

          The status of the simulation job batch.

            Pending  

          The simulation job batch request is pending.

            InProgress  

          The simulation job batch is in progress. 

            Failed  

          The simulation job batch failed. One or more simulation job requests could not be completed due to an internal failure (like ``InternalServiceError`` ). See ``failureCode`` and ``failureReason`` for more information.

            Completed  

          The simulation batch job completed. A batch is complete when (1) there are no pending simulation job requests in the batch and none of the failed simulation job requests are due to ``InternalServiceError`` and (2) when all created simulation jobs have reached a terminal state (for example, ``Completed`` or ``Failed`` ). 

            Canceled  

          The simulation batch job was cancelled.

            Canceling  

          The simulation batch job is being cancelled.

            Completing  

          The simulation batch job is completing.

            TimingOut  

          The simulation job batch is timing out.

           

          If a batch timing out, and there are pending requests that were failing due to an internal failure (like ``InternalServiceError`` ), the batch status will be ``Failed`` . If there are no such failing request, the batch status will be ``TimedOut`` . 

            TimedOut  

          The simulation batch job timed out.

            
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation job batch was created.

          
        

        - **clientRequestToken** *(string) --* 

          Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

          
        

        - **batchPolicy** *(dict) --* 

          The batch policy.

          
          

          - **timeoutInSeconds** *(integer) --* 

            The amount of time, in seconds, to wait for the batch to complete. 

             

            If a batch times out, and there are pending requests that were failing due to an internal failure (like ``InternalServiceError`` ), they will be moved to the failed list and the batch status will be ``Failed`` . If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be ``TimedOut`` . 

            
          

          - **maxConcurrency** *(integer) --* 

            The number of active simulation jobs create as part of the batch that can be in an active state at the same time. 

             

            Active states include: ``Pending`` ,``Preparing`` , ``Running`` , ``Restarting`` , ``RunningFailed`` and ``Terminating`` . All other states are terminal states. 

            
      
        

        - **failureCode** *(string) --* 

          The failure code if the simulation job batch failed.

          
        

        - **failureReason** *(string) --* 

          The reason the simulation job batch failed.

          
        

        - **failedRequests** *(list) --* 

          A list of failed simulation job requests. The request failed to be created into a simulation job. Failed requests do not have a simulation job ID. 

          
          

          - *(dict) --* 

            Information about a failed create simulation job request.

            
            

            - **request** *(dict) --* 

              The simulation job request.

              
              

              - **outputLocation** *(dict) --* 

                The output location.

                
                

                - **s3Bucket** *(string) --* 

                  The S3 bucket for output.

                  
                

                - **s3Prefix** *(string) --* 

                  The S3 folder in the ``s3Bucket`` where output files will be placed.

                  
            
              

              - **loggingConfig** *(dict) --* 

                The logging configuration.

                
                

                - **recordAllRosTopics** *(boolean) --* 

                  A boolean indicating whether to record all ROS topics.

                  
            
              

              - **maxJobDurationInSeconds** *(integer) --* 

                The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.

                
              

              - **iamRole** *(string) --* 

                The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

                
              

              - **failureBehavior** *(string) --* 

                The failure behavior the simulation job.

                  Continue  

                Restart the simulation job in the same host instance.

                  Fail  

                Stop the simulation job and terminate the instance.

                  
              

              - **useDefaultApplications** *(boolean) --* 

                A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. 

                
              

              - **robotApplications** *(list) --* 

                The robot applications to use in the simulation job.

                
                

                - *(dict) --* 

                  Application configuration information for a robot.

                  
                  

                  - **application** *(string) --* 

                    The application information for the robot application.

                    
                  

                  - **applicationVersion** *(string) --* 

                    The version of the robot application.

                    
                  

                  - **launchConfig** *(dict) --* 

                    The launch configuration for the robot application.

                    
                    

                    - **packageName** *(string) --* 

                      The package name.

                      
                    

                    - **launchFile** *(string) --* 

                      The launch file name.

                      
                    

                    - **environmentVariables** *(dict) --* 

                      The environment variables for the application launch.

                      
                      

                      - *(string) --* 
                        

                        - *(string) --* 
                  
                
                    

                    - **portForwardingConfig** *(dict) --* 

                      The port forwarding configuration.

                      
                      

                      - **portMappings** *(list) --* 

                        The port mappings for the configuration.

                        
                        

                        - *(dict) --* 

                          An object representing a port mapping.

                          
                          

                          - **jobPort** *(integer) --* 

                            The port number on the simulation job instance to use as a remote connection point. 

                            
                          

                          - **applicationPort** *(integer) --* 

                            The port number on the application.

                            
                          

                          - **enableOnPublicIp** *(boolean) --* 

                            A Boolean indicating whether to enable this port mapping on public IP.

                            
                      
                    
                  
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                      
                
                  

                  - **uploadConfigurations** *(list) --* 

                    The upload configurations for the robot application.

                    
                    

                    - *(dict) --* 

                      Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                      
                      

                      - **name** *(string) --* 

                        A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                         

                        For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                        
                      

                      - **path** *(string) --* 

                        Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                        
                      

                      - **uploadBehavior** *(string) --* 

                        Specifies when to upload the files:

                          UPLOAD_ON_TERMINATE  

                        Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                         

                        If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                          UPLOAD_ROLLING_AUTO_REMOVE  

                        Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                          
                  
                
                  

                  - **useDefaultUploadConfigurations** *(boolean) --* 

                    A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                     

                    If you set this value, you must specify an ``outputLocation`` . 

                    
                  

                  - **tools** *(list) --* 

                    Information about tools configured for the robot application.

                    
                    

                    - *(dict) --* 

                      Information about a tool. Tools are used in a simulation job.

                      
                      

                      - **streamUI** *(boolean) --* 

                        Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                        
                      

                      - **name** *(string) --* 

                        The name of the tool.

                        
                      

                      - **command** *(string) --* 

                        Command-line arguments for the tool. It must include the tool executable name.

                        
                      

                      - **streamOutputToCloudWatch** *(boolean) --* 

                        Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                        
                      

                      - **exitBehavior** *(string) --* 

                        Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                        
                  
                
                  

                  - **useDefaultTools** *(boolean) --* 

                    A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                    
              
            
              

              - **simulationApplications** *(list) --* 

                The simulation applications to use in the simulation job.

                
                

                - *(dict) --* 

                  Information about a simulation application configuration.

                  
                  

                  - **application** *(string) --* 

                    The application information for the simulation application.

                    
                  

                  - **applicationVersion** *(string) --* 

                    The version of the simulation application.

                    
                  

                  - **launchConfig** *(dict) --* 

                    The launch configuration for the simulation application.

                    
                    

                    - **packageName** *(string) --* 

                      The package name.

                      
                    

                    - **launchFile** *(string) --* 

                      The launch file name.

                      
                    

                    - **environmentVariables** *(dict) --* 

                      The environment variables for the application launch.

                      
                      

                      - *(string) --* 
                        

                        - *(string) --* 
                  
                
                    

                    - **portForwardingConfig** *(dict) --* 

                      The port forwarding configuration.

                      
                      

                      - **portMappings** *(list) --* 

                        The port mappings for the configuration.

                        
                        

                        - *(dict) --* 

                          An object representing a port mapping.

                          
                          

                          - **jobPort** *(integer) --* 

                            The port number on the simulation job instance to use as a remote connection point. 

                            
                          

                          - **applicationPort** *(integer) --* 

                            The port number on the application.

                            
                          

                          - **enableOnPublicIp** *(boolean) --* 

                            A Boolean indicating whether to enable this port mapping on public IP.

                            
                      
                    
                  
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                      
                
                  

                  - **uploadConfigurations** *(list) --* 

                    Information about upload configurations for the simulation application.

                    
                    

                    - *(dict) --* 

                      Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                      
                      

                      - **name** *(string) --* 

                        A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                         

                        For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                        
                      

                      - **path** *(string) --* 

                        Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                        
                      

                      - **uploadBehavior** *(string) --* 

                        Specifies when to upload the files:

                          UPLOAD_ON_TERMINATE  

                        Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                         

                        If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                          UPLOAD_ROLLING_AUTO_REMOVE  

                        Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                          
                  
                
                  

                  - **worldConfigs** *(list) --* 

                    A list of world configurations.

                    
                    

                    - *(dict) --* 

                      Configuration information for a world.

                      
                      

                      - **world** *(string) --* 

                        The world generated by Simulation WorldForge.

                        
                  
                
                  

                  - **useDefaultUploadConfigurations** *(boolean) --* 

                    A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                     

                    If you set this value, you must specify an ``outputLocation`` . 

                    
                  

                  - **tools** *(list) --* 

                    Information about tools configured for the simulation application.

                    
                    

                    - *(dict) --* 

                      Information about a tool. Tools are used in a simulation job.

                      
                      

                      - **streamUI** *(boolean) --* 

                        Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                        
                      

                      - **name** *(string) --* 

                        The name of the tool.

                        
                      

                      - **command** *(string) --* 

                        Command-line arguments for the tool. It must include the tool executable name.

                        
                      

                      - **streamOutputToCloudWatch** *(boolean) --* 

                        Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                        
                      

                      - **exitBehavior** *(string) --* 

                        Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                        
                  
                
                  

                  - **useDefaultTools** *(boolean) --* 

                    A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                    
              
            
              

              - **dataSources** *(list) --* 

                Specify data sources to mount read-only files from S3 into your simulation. These files are available under ``/opt/robomaker/datasources/data_source_name`` . 

                 

                .. note::

                   

                  There is a limit of 100 files and a combined size of 25GB for all ``DataSourceConfig`` objects. 

                   

                
                

                - *(dict) --* 

                  Information about a data source.

                  
                  

                  - **name** *(string) --* 

                    The name of the data source.

                    
                  

                  - **s3Bucket** *(string) --* 

                    The S3 bucket where the data files are located.

                    
                  

                  - **s3Keys** *(list) --* 

                    The list of S3 keys identifying the data source files.

                    
                    

                    - *(string) --* 
                
              
            
              

              - **vpcConfig** *(dict) --* 

                If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.

                
                

                - **subnets** *(list) --* 

                  A list of one or more subnet IDs in your VPC.

                  
                  

                  - *(string) --* 
              
                

                - **securityGroups** *(list) --* 

                  A list of one or more security groups IDs in your VPC.

                  
                  

                  - *(string) --* 
              
                

                - **assignPublicIp** *(boolean) --* 

                  A boolean indicating whether to assign a public IP address.

                  
            
              

              - **compute** *(dict) --* 

                Compute information for the simulation job

                
                

                - **simulationUnitLimit** *(integer) --* 

                  The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

                  
            
              

              - **tags** *(dict) --* 

                A map that contains tag keys and tag values that are attached to the simulation job request.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
            

            - **failureReason** *(string) --* 

              The failure reason of the simulation job request.

              
            

            - **failureCode** *(string) --* 

              The failure code.

              
            

            - **failedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job batch failed.

              
        
      
        

        - **pendingRequests** *(list) --* 

          A list of pending simulation job requests. These requests have not yet been created into simulation jobs.

          
          

          - *(dict) --* 

            Information about a simulation job request.

            
            

            - **outputLocation** *(dict) --* 

              The output location.

              
              

              - **s3Bucket** *(string) --* 

                The S3 bucket for output.

                
              

              - **s3Prefix** *(string) --* 

                The S3 folder in the ``s3Bucket`` where output files will be placed.

                
          
            

            - **loggingConfig** *(dict) --* 

              The logging configuration.

              
              

              - **recordAllRosTopics** *(boolean) --* 

                A boolean indicating whether to record all ROS topics.

                
          
            

            - **maxJobDurationInSeconds** *(integer) --* 

              The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.

              
            

            - **iamRole** *(string) --* 

              The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. 

              
            

            - **failureBehavior** *(string) --* 

              The failure behavior the simulation job.

                Continue  

              Restart the simulation job in the same host instance.

                Fail  

              Stop the simulation job and terminate the instance.

                
            

            - **useDefaultApplications** *(boolean) --* 

              A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. 

              
            

            - **robotApplications** *(list) --* 

              The robot applications to use in the simulation job.

              
              

              - *(dict) --* 

                Application configuration information for a robot.

                
                

                - **application** *(string) --* 

                  The application information for the robot application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the robot application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration for the robot application.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    The environment variables for the application launch.

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
                  

                  - **portForwardingConfig** *(dict) --* 

                    The port forwarding configuration.

                    
                    

                    - **portMappings** *(list) --* 

                      The port mappings for the configuration.

                      
                      

                      - *(dict) --* 

                        An object representing a port mapping.

                        
                        

                        - **jobPort** *(integer) --* 

                          The port number on the simulation job instance to use as a remote connection point. 

                          
                        

                        - **applicationPort** *(integer) --* 

                          The port number on the application.

                          
                        

                        - **enableOnPublicIp** *(boolean) --* 

                          A Boolean indicating whether to enable this port mapping on public IP.

                          
                    
                  
                
                  

                  - **streamUI** *(boolean) --* 

                    Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                    
              
                

                - **uploadConfigurations** *(list) --* 

                  The upload configurations for the robot application.

                  
                  

                  - *(dict) --* 

                    Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                    
                    

                    - **name** *(string) --* 

                      A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                       

                      For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                      
                    

                    - **path** *(string) --* 

                      Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                      
                    

                    - **uploadBehavior** *(string) --* 

                      Specifies when to upload the files:

                        UPLOAD_ON_TERMINATE  

                      Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                       

                      If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                        UPLOAD_ROLLING_AUTO_REMOVE  

                      Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                        
                
              
                

                - **useDefaultUploadConfigurations** *(boolean) --* 

                  A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                   

                  If you set this value, you must specify an ``outputLocation`` . 

                  
                

                - **tools** *(list) --* 

                  Information about tools configured for the robot application.

                  
                  

                  - *(dict) --* 

                    Information about a tool. Tools are used in a simulation job.

                    
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                      
                    

                    - **name** *(string) --* 

                      The name of the tool.

                      
                    

                    - **command** *(string) --* 

                      Command-line arguments for the tool. It must include the tool executable name.

                      
                    

                    - **streamOutputToCloudWatch** *(boolean) --* 

                      Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                      
                    

                    - **exitBehavior** *(string) --* 

                      Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                      
                
              
                

                - **useDefaultTools** *(boolean) --* 

                  A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                  
            
          
            

            - **simulationApplications** *(list) --* 

              The simulation applications to use in the simulation job.

              
              

              - *(dict) --* 

                Information about a simulation application configuration.

                
                

                - **application** *(string) --* 

                  The application information for the simulation application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the simulation application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration for the simulation application.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    The environment variables for the application launch.

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
                  

                  - **portForwardingConfig** *(dict) --* 

                    The port forwarding configuration.

                    
                    

                    - **portMappings** *(list) --* 

                      The port mappings for the configuration.

                      
                      

                      - *(dict) --* 

                        An object representing a port mapping.

                        
                        

                        - **jobPort** *(integer) --* 

                          The port number on the simulation job instance to use as a remote connection point. 

                          
                        

                        - **applicationPort** *(integer) --* 

                          The port number on the application.

                          
                        

                        - **enableOnPublicIp** *(boolean) --* 

                          A Boolean indicating whether to enable this port mapping on public IP.

                          
                    
                  
                
                  

                  - **streamUI** *(boolean) --* 

                    Boolean indicating whether a streaming session will be configured for the application. If ``True`` , AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. 

                    
              
                

                - **uploadConfigurations** *(list) --* 

                  Information about upload configurations for the simulation application.

                  
                  

                  - *(dict) --* 

                    Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. 

                    
                    

                    - **name** *(string) --* 

                      A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. 

                       

                      For example, if your simulation output location is ``s3://my-bucket`` and your upload configuration name is ``robot-test`` , your files will be uploaded to ``s3://my-bucket/<simid>/<runid>/robot-test`` . 

                      
                    

                    - **path** *(string) --* 

                      Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of ``**`` as a *super asterisk* . For example, specifying ``/var/log/**.log`` causes all .log files in the ``/var/log`` directory tree to be collected. For more examples, see `Glob Library <https://github.com/gobwas/glob>`__ . 

                      
                    

                    - **uploadBehavior** *(string) --* 

                      Specifies when to upload the files:

                        UPLOAD_ON_TERMINATE  

                      Matching files are uploaded once the simulation enters the ``TERMINATING`` state. Matching files are not uploaded until all of your code (including tools) have stopped. 

                       

                      If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.

                        UPLOAD_ROLLING_AUTO_REMOVE  

                      Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. 

                        
                
              
                

                - **worldConfigs** *(list) --* 

                  A list of world configurations.

                  
                  

                  - *(dict) --* 

                    Configuration information for a world.

                    
                    

                    - **world** *(string) --* 

                      The world generated by Simulation WorldForge.

                      
                
              
                

                - **useDefaultUploadConfigurations** *(boolean) --* 

                  A Boolean indicating whether to use default upload configurations. By default, ``.ros`` and ``.gazebo`` files are uploaded when the application terminates and all ROS topics will be recorded.

                   

                  If you set this value, you must specify an ``outputLocation`` . 

                  
                

                - **tools** *(list) --* 

                  Information about tools configured for the simulation application.

                  
                  

                  - *(dict) --* 

                    Information about a tool. Tools are used in a simulation job.

                    
                    

                    - **streamUI** *(boolean) --* 

                      Boolean indicating whether a streaming session will be configured for the tool. If ``True`` , AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is ``False`` . 

                      
                    

                    - **name** *(string) --* 

                      The name of the tool.

                      
                    

                    - **command** *(string) --* 

                      Command-line arguments for the tool. It must include the tool executable name.

                      
                    

                    - **streamOutputToCloudWatch** *(boolean) --* 

                      Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is ``False`` . 

                      
                    

                    - **exitBehavior** *(string) --* 

                      Exit behavior determines what happens when your tool quits running. ``RESTART`` will cause your tool to be restarted. ``FAIL`` will cause your job to exit. The default is ``RESTART`` . 

                      
                
              
                

                - **useDefaultTools** *(boolean) --* 

                  A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is ``False`` . 

                  
            
          
            

            - **dataSources** *(list) --* 

              Specify data sources to mount read-only files from S3 into your simulation. These files are available under ``/opt/robomaker/datasources/data_source_name`` . 

               

              .. note::

                 

                There is a limit of 100 files and a combined size of 25GB for all ``DataSourceConfig`` objects. 

                 

              
              

              - *(dict) --* 

                Information about a data source.

                
                

                - **name** *(string) --* 

                  The name of the data source.

                  
                

                - **s3Bucket** *(string) --* 

                  The S3 bucket where the data files are located.

                  
                

                - **s3Keys** *(list) --* 

                  The list of S3 keys identifying the data source files.

                  
                  

                  - *(string) --* 
              
            
          
            

            - **vpcConfig** *(dict) --* 

              If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.

              
              

              - **subnets** *(list) --* 

                A list of one or more subnet IDs in your VPC.

                
                

                - *(string) --* 
            
              

              - **securityGroups** *(list) --* 

                A list of one or more security groups IDs in your VPC.

                
                

                - *(string) --* 
            
              

              - **assignPublicIp** *(boolean) --* 

                A boolean indicating whether to assign a public IP address.

                
          
            

            - **compute** *(dict) --* 

              Compute information for the simulation job

              
              

              - **simulationUnitLimit** *(integer) --* 

                The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximim value provided. The default is 15. 

                
          
            

            - **tags** *(dict) --* 

              A map that contains tag keys and tag values that are attached to the simulation job request.

              
              

              - *(string) --* 
                

                - *(string) --* 
          
        
        
      
        

        - **createdRequests** *(list) --* 

          A list of created simulation job request summaries.

          
          

          - *(dict) --* 

            Summary information for a simulation job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the simulation job.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job was last updated.

              
            

            - **name** *(string) --* 

              The name of the simulation job.

              
            

            - **status** *(string) --* 

              The status of the simulation job.

              
            

            - **simulationApplicationNames** *(list) --* 

              A list of simulation job simulation application names.

              
              

              - *(string) --* 
          
            

            - **robotApplicationNames** *(list) --* 

              A list of simulation job robot application names.

              
              

              - *(string) --* 
          
            

            - **dataSourceNames** *(list) --* 

              The names of the data sources.

              
              

              - *(string) --* 
          
        
      
        

        - **tags** *(dict) --* 

          A map that contains tag keys and tag values that are attached to the deployment job batch.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: sync_deployment_job(**kwargs)

    

    Syncrhonizes robots in a fleet to the latest deployment. This is helpful if robots were added after a deployment.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/SyncDeploymentJob>`_    


    **Request Syntax** 
    ::

      response = client.sync_deployment_job(
          clientRequestToken='string',
          fleet='string'
      )
    :type clientRequestToken: string
    :param clientRequestToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    :type fleet: string
    :param fleet: **[REQUIRED]** 

      The target fleet for the synchronization.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'fleet': 'string',
            'status': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
            'deploymentConfig': {
                'concurrentDeploymentPercentage': 123,
                'failureThresholdPercentage': 123,
                'robotDeploymentTimeoutInSeconds': 123,
                'downloadConditionFile': {
                    'bucket': 'string',
                    'key': 'string',
                    'etag': 'string'
                }
            },
            'deploymentApplicationConfigs': [
                {
                    'application': 'string',
                    'applicationVersion': 'string',
                    'launchConfig': {
                        'packageName': 'string',
                        'preLaunchFile': 'string',
                        'launchFile': 'string',
                        'postLaunchFile': 'string',
                        'environmentVariables': {
                            'string': 'string'
                        }
                    }
                },
            ],
            'failureReason': 'string',
            'failureCode': 'ResourceNotFound'|'EnvironmentSetupError'|'EtagMismatch'|'FailureThresholdBreached'|'RobotDeploymentAborted'|'RobotDeploymentNoResponse'|'RobotAgentConnectionTimeout'|'GreengrassDeploymentFailed'|'InvalidGreengrassGroup'|'MissingRobotArchitecture'|'MissingRobotApplicationArchitecture'|'MissingRobotDeploymentResource'|'GreengrassGroupVersionDoesNotExist'|'LambdaDeleted'|'ExtractingBundleFailure'|'PreLaunchFileFailure'|'PostLaunchFileFailure'|'BadPermissionError'|'DownloadConditionFailed'|'BadLambdaAssociated'|'InternalServerError'|'RobotApplicationDoesNotExist'|'DeploymentFleetDoesNotExist'|'FleetDeploymentTimeout',
            'createdAt': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the synchronization request.

          
        

        - **fleet** *(string) --* 

          The Amazon Resource Name (ARN) of the fleet.

          
        

        - **status** *(string) --* 

          The status of the synchronization job.

          
        

        - **deploymentConfig** *(dict) --* 

          Information about the deployment configuration.

          
          

          - **concurrentDeploymentPercentage** *(integer) --* 

            The percentage of robots receiving the deployment at the same time.

            
          

          - **failureThresholdPercentage** *(integer) --* 

            The percentage of deployments that need to fail before stopping deployment.

            
          

          - **robotDeploymentTimeoutInSeconds** *(integer) --* 

            The amount of time, in seconds, to wait for deployment to a single robot to complete. Choose a time between 1 minute and 7 days. The default is 5 hours.

            
          

          - **downloadConditionFile** *(dict) --* 

            The download condition file.

            
            

            - **bucket** *(string) --* 

              The bucket containing the object.

              
            

            - **key** *(string) --* 

              The key of the object.

              
            

            - **etag** *(string) --* 

              The etag of the object.

              
        
      
        

        - **deploymentApplicationConfigs** *(list) --* 

          Information about the deployment application configurations.

          
          

          - *(dict) --* 

            Information about a deployment application configuration.

            
            

            - **application** *(string) --* 

              The Amazon Resource Name (ARN) of the robot application.

              
            

            - **applicationVersion** *(string) --* 

              The version of the application.

              
            

            - **launchConfig** *(dict) --* 

              The launch configuration.

              
              

              - **packageName** *(string) --* 

                The package name.

                
              

              - **preLaunchFile** *(string) --* 

                The deployment pre-launch file. This file will be executed prior to the launch file.

                
              

              - **launchFile** *(string) --* 

                The launch file name.

                
              

              - **postLaunchFile** *(string) --* 

                The deployment post-launch file. This file will be executed after the launch file.

                
              

              - **environmentVariables** *(dict) --* 

                An array of key/value pairs specifying environment variables for the robot application

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
        
      
        

        - **failureReason** *(string) --* 

          The failure reason if the job fails.

          
        

        - **failureCode** *(string) --* 

          The failure code if the job fails:

            InternalServiceError  

          Internal service error.

            RobotApplicationCrash  

          Robot application exited abnormally.

            SimulationApplicationCrash  

          Simulation application exited abnormally.

            BadPermissionsRobotApplication  

          Robot application bundle could not be downloaded.

            BadPermissionsSimulationApplication  

          Simulation application bundle could not be downloaded.

            BadPermissionsS3Output  

          Unable to publish outputs to customer-provided S3 bucket.

            BadPermissionsCloudwatchLogs  

          Unable to publish logs to customer-provided CloudWatch Logs resource.

            SubnetIpLimitExceeded  

          Subnet IP limit exceeded.

            ENILimitExceeded  

          ENI limit exceeded.

            BadPermissionsUserCredentials  

          Unable to use the Role provided.

            InvalidBundleRobotApplication  

          Robot bundle cannot be extracted (invalid format, bundling error, or other issue).

            InvalidBundleSimulationApplication  

          Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).

            RobotApplicationVersionMismatchedEtag  

          Etag for RobotApplication does not match value during version creation.

            SimulationApplicationVersionMismatchedEtag  

          Etag for SimulationApplication does not match value during version creation.

            
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the fleet was created.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ConcurrentDeploymentException`

    
    *     :py:class:`RoboMaker.Client.exceptions.IdempotentParameterMismatchException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds or edits tags for a AWS RoboMaker resource.

     

    Each tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty strings. 

     

    For information about the rules that apply to tag keys and tag values, see `User-Defined Tag Restrictions <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html>`__ in the *AWS Billing and Cost Management User Guide* . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags={
              'string': 'string'
          }
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are tagging.

      

    
    :type tags: dict
    :param tags: **[REQUIRED]** 

      A map that contains tag keys and tag values that are attached to the resource.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes the specified tags from the specified AWS RoboMaker resource.

     

    To remove a tag, specify the tag key. To change the tag value of an existing tag key, use ` ``TagResource`` https://docs.aws.amazon.com/robomaker/latest/dg/API_TagResource.html`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are removing tags.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      A map that contains tag keys and tag values that will be unattached from the resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_robot_application(**kwargs)

    

    Updates a robot application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/UpdateRobotApplication>`_    


    **Request Syntax** 
    ::

      response = client.update_robot_application(
          application='string',
          sources=[
              {
                  's3Bucket': 'string',
                  's3Key': 'string',
                  'architecture': 'X86_64'|'ARM64'|'ARMHF'
              },
          ],
          robotSoftwareSuite={
              'name': 'ROS'|'ROS2',
              'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
          },
          currentRevisionId='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The application information for the robot application.

      

    
    :type sources: list
    :param sources: **[REQUIRED]** 

      The sources of the robot application.

      

    
      - *(dict) --* 

        Information about a source configuration.

        

      
        - **s3Bucket** *(string) --* 

          The Amazon S3 bucket name.

          

        
        - **s3Key** *(string) --* 

          The s3 object key.

          

        
        - **architecture** *(string) --* 

          The target processor architecture for the application.

          

        
      
  
    :type robotSoftwareSuite: dict
    :param robotSoftwareSuite: **[REQUIRED]** 

      The robot software suite (ROS distribution) used by the robot application.

      

    
      - **name** *(string) --* 

        The name of the robot software suite (ROS distribution).

        

      
      - **version** *(string) --* 

        The version of the robot software suite (ROS distribution).

        

      
    
    :type currentRevisionId: string
    :param currentRevisionId: 

      The revision id for the robot application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'lastUpdatedAt': datetime(2015, 1, 1),
            'revisionId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the updated robot application.

          
        

        - **name** *(string) --* 

          The name of the robot application.

          
        

        - **version** *(string) --* 

          The version of the robot application.

          
        

        - **sources** *(list) --* 

          The sources of the robot application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **robotSoftwareSuite** *(dict) --* 

          The robot software suite (ROS distribution) used by the robot application.

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the robot application was last updated.

          
        

        - **revisionId** *(string) --* 

          The revision id of the robot application.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: update_simulation_application(**kwargs)

    

    Updates a simulation application.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/UpdateSimulationApplication>`_    


    **Request Syntax** 
    ::

      response = client.update_simulation_application(
          application='string',
          sources=[
              {
                  's3Bucket': 'string',
                  's3Key': 'string',
                  'architecture': 'X86_64'|'ARM64'|'ARMHF'
              },
          ],
          simulationSoftwareSuite={
              'name': 'Gazebo'|'RosbagPlay',
              'version': 'string'
          },
          robotSoftwareSuite={
              'name': 'ROS'|'ROS2',
              'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
          },
          renderingEngine={
              'name': 'OGRE',
              'version': 'string'
          },
          currentRevisionId='string'
      )
    :type application: string
    :param application: **[REQUIRED]** 

      The application information for the simulation application.

      

    
    :type sources: list
    :param sources: **[REQUIRED]** 

      The sources of the simulation application.

      

    
      - *(dict) --* 

        Information about a source configuration.

        

      
        - **s3Bucket** *(string) --* 

          The Amazon S3 bucket name.

          

        
        - **s3Key** *(string) --* 

          The s3 object key.

          

        
        - **architecture** *(string) --* 

          The target processor architecture for the application.

          

        
      
  
    :type simulationSoftwareSuite: dict
    :param simulationSoftwareSuite: **[REQUIRED]** 

      The simulation software suite used by the simulation application.

      

    
      - **name** *(string) --* 

        The name of the simulation software suite.

        

      
      - **version** *(string) --* 

        The version of the simulation software suite.

        

      
    
    :type robotSoftwareSuite: dict
    :param robotSoftwareSuite: **[REQUIRED]** 

      Information about the robot software suite (ROS distribution).

      

    
      - **name** *(string) --* 

        The name of the robot software suite (ROS distribution).

        

      
      - **version** *(string) --* 

        The version of the robot software suite (ROS distribution).

        

      
    
    :type renderingEngine: dict
    :param renderingEngine: 

      The rendering engine for the simulation application.

      

    
      - **name** *(string) --* 

        The name of the rendering engine.

        

      
      - **version** *(string) --* 

        The version of the rendering engine.

        

      
    
    :type currentRevisionId: string
    :param currentRevisionId: 

      The revision id for the robot application.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'version': 'string',
            'sources': [
                {
                    's3Bucket': 'string',
                    's3Key': 'string',
                    'etag': 'string',
                    'architecture': 'X86_64'|'ARM64'|'ARMHF'
                },
            ],
            'simulationSoftwareSuite': {
                'name': 'Gazebo'|'RosbagPlay',
                'version': 'string'
            },
            'robotSoftwareSuite': {
                'name': 'ROS'|'ROS2',
                'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
            },
            'renderingEngine': {
                'name': 'OGRE',
                'version': 'string'
            },
            'lastUpdatedAt': datetime(2015, 1, 1),
            'revisionId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (ARN) of the updated simulation application.

          
        

        - **name** *(string) --* 

          The name of the simulation application.

          
        

        - **version** *(string) --* 

          The version of the robot application.

          
        

        - **sources** *(list) --* 

          The sources of the simulation application.

          
          

          - *(dict) --* 

            Information about a source.

            
            

            - **s3Bucket** *(string) --* 

              The s3 bucket name.

              
            

            - **s3Key** *(string) --* 

              The s3 object key.

              
            

            - **etag** *(string) --* 

              A hash of the object specified by ``s3Bucket`` and ``s3Key`` .

              
            

            - **architecture** *(string) --* 

              The taget processor architecture for the application.

              
        
      
        

        - **simulationSoftwareSuite** *(dict) --* 

          The simulation software suite used by the simulation application.

          
          

          - **name** *(string) --* 

            The name of the simulation software suite.

            
          

          - **version** *(string) --* 

            The version of the simulation software suite.

            
      
        

        - **robotSoftwareSuite** *(dict) --* 

          Information about the robot software suite (ROS distribution).

          
          

          - **name** *(string) --* 

            The name of the robot software suite (ROS distribution).

            
          

          - **version** *(string) --* 

            The version of the robot software suite (ROS distribution).

            
      
        

        - **renderingEngine** *(dict) --* 

          The rendering engine for the simulation application.

          
          

          - **name** *(string) --* 

            The name of the rendering engine.

            
          

          - **version** *(string) --* 

            The version of the rendering engine.

            
      
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the simulation application was last updated.

          
        

        - **revisionId** *(string) --* 

          The revision id of the simulation application.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.LimitExceededException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

  .. py:method:: update_world_template(**kwargs)

    

    Updates a world template.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/UpdateWorldTemplate>`_    


    **Request Syntax** 
    ::

      response = client.update_world_template(
          template='string',
          name='string',
          templateBody='string',
          templateLocation={
              's3Bucket': 'string',
              's3Key': 'string'
          }
      )
    :type template: string
    :param template: **[REQUIRED]** 

      The Amazon Resource Name (arn) of the world template to update.

      

    
    :type name: string
    :param name: 

      The name of the template.

      

    
    :type templateBody: string
    :param templateBody: 

      The world template body.

      

    
    :type templateLocation: dict
    :param templateLocation: 

      The location of the world template.

      

    
      - **s3Bucket** *(string) --* **[REQUIRED]** 

        The Amazon S3 bucket name.

        

      
      - **s3Key** *(string) --* **[REQUIRED]** 

        The list of S3 keys identifying the data source files.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'arn': 'string',
            'name': 'string',
            'createdAt': datetime(2015, 1, 1),
            'lastUpdatedAt': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **arn** *(string) --* 

          The Amazon Resource Name (arn) of the world template.

          
        

        - **name** *(string) --* 

          The name of the world template.

          
        

        - **createdAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world template was created.

          
        

        - **lastUpdatedAt** *(datetime) --* 

          The time, in milliseconds since the epoch, when the world template was last updated.

          
    
    **Exceptions** 
    
    *     :py:class:`RoboMaker.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RoboMaker.Client.exceptions.ThrottlingException`

    
    *     :py:class:`RoboMaker.Client.exceptions.InternalServerException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`RoboMaker.Paginator.ListDeploymentJobs`


* :py:class:`RoboMaker.Paginator.ListFleets`


* :py:class:`RoboMaker.Paginator.ListRobotApplications`


* :py:class:`RoboMaker.Paginator.ListRobots`


* :py:class:`RoboMaker.Paginator.ListSimulationApplications`


* :py:class:`RoboMaker.Paginator.ListSimulationJobBatches`


* :py:class:`RoboMaker.Paginator.ListSimulationJobs`


* :py:class:`RoboMaker.Paginator.ListWorldExportJobs`


* :py:class:`RoboMaker.Paginator.ListWorldGenerationJobs`


* :py:class:`RoboMaker.Paginator.ListWorldTemplates`


* :py:class:`RoboMaker.Paginator.ListWorlds`



.. py:class:: RoboMaker.Paginator.ListDeploymentJobs

  ::

    
    paginator = client.get_paginator('list_deployment_jobs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_deployment_jobs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListDeploymentJobs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter names ``status`` and ``fleetName`` are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status ``InProgress`` or the status ``Pending`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'deploymentJobs': [
                {
                    'arn': 'string',
                    'fleet': 'string',
                    'status': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
                    'deploymentApplicationConfigs': [
                        {
                            'application': 'string',
                            'applicationVersion': 'string',
                            'launchConfig': {
                                'packageName': 'string',
                                'preLaunchFile': 'string',
                                'launchFile': 'string',
                                'postLaunchFile': 'string',
                                'environmentVariables': {
                                    'string': 'string'
                                }
                            }
                        },
                    ],
                    'deploymentConfig': {
                        'concurrentDeploymentPercentage': 123,
                        'failureThresholdPercentage': 123,
                        'robotDeploymentTimeoutInSeconds': 123,
                        'downloadConditionFile': {
                            'bucket': 'string',
                            'key': 'string',
                            'etag': 'string'
                        }
                    },
                    'failureReason': 'string',
                    'failureCode': 'ResourceNotFound'|'EnvironmentSetupError'|'EtagMismatch'|'FailureThresholdBreached'|'RobotDeploymentAborted'|'RobotDeploymentNoResponse'|'RobotAgentConnectionTimeout'|'GreengrassDeploymentFailed'|'InvalidGreengrassGroup'|'MissingRobotArchitecture'|'MissingRobotApplicationArchitecture'|'MissingRobotDeploymentResource'|'GreengrassGroupVersionDoesNotExist'|'LambdaDeleted'|'ExtractingBundleFailure'|'PreLaunchFileFailure'|'PostLaunchFileFailure'|'BadPermissionError'|'DownloadConditionFailed'|'BadLambdaAssociated'|'InternalServerError'|'RobotApplicationDoesNotExist'|'DeploymentFleetDoesNotExist'|'FleetDeploymentTimeout',
                    'createdAt': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **deploymentJobs** *(list) --* 

          A list of deployment jobs that meet the criteria of the request.

          
          

          - *(dict) --* 

            Information about a deployment job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the deployment job.

              
            

            - **fleet** *(string) --* 

              The Amazon Resource Name (ARN) of the fleet.

              
            

            - **status** *(string) --* 

              The status of the deployment job.

              
            

            - **deploymentApplicationConfigs** *(list) --* 

              The deployment application configuration.

              
              

              - *(dict) --* 

                Information about a deployment application configuration.

                
                

                - **application** *(string) --* 

                  The Amazon Resource Name (ARN) of the robot application.

                  
                

                - **applicationVersion** *(string) --* 

                  The version of the application.

                  
                

                - **launchConfig** *(dict) --* 

                  The launch configuration.

                  
                  

                  - **packageName** *(string) --* 

                    The package name.

                    
                  

                  - **preLaunchFile** *(string) --* 

                    The deployment pre-launch file. This file will be executed prior to the launch file.

                    
                  

                  - **launchFile** *(string) --* 

                    The launch file name.

                    
                  

                  - **postLaunchFile** *(string) --* 

                    The deployment post-launch file. This file will be executed after the launch file.

                    
                  

                  - **environmentVariables** *(dict) --* 

                    An array of key/value pairs specifying environment variables for the robot application

                    
                    

                    - *(string) --* 
                      

                      - *(string) --* 
                
              
              
            
          
            

            - **deploymentConfig** *(dict) --* 

              The deployment configuration.

              
              

              - **concurrentDeploymentPercentage** *(integer) --* 

                The percentage of robots receiving the deployment at the same time.

                
              

              - **failureThresholdPercentage** *(integer) --* 

                The percentage of deployments that need to fail before stopping deployment.

                
              

              - **robotDeploymentTimeoutInSeconds** *(integer) --* 

                The amount of time, in seconds, to wait for deployment to a single robot to complete. Choose a time between 1 minute and 7 days. The default is 5 hours.

                
              

              - **downloadConditionFile** *(dict) --* 

                The download condition file.

                
                

                - **bucket** *(string) --* 

                  The bucket containing the object.

                  
                

                - **key** *(string) --* 

                  The key of the object.

                  
                

                - **etag** *(string) --* 

                  The etag of the object.

                  
            
          
            

            - **failureReason** *(string) --* 

              A short description of the reason why the deployment job failed.

              
            

            - **failureCode** *(string) --* 

              The deployment job failure code.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the deployment job was created.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListFleets

  ::

    
    paginator = client.get_paginator('list_fleets')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_fleets`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListFleets>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter name ``name`` is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'fleetDetails': [
                {
                    'name': 'string',
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastDeploymentStatus': 'Pending'|'Preparing'|'InProgress'|'Failed'|'Succeeded'|'Canceled',
                    'lastDeploymentJob': 'string',
                    'lastDeploymentTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **fleetDetails** *(list) --* 

          A list of fleet details meeting the request criteria.

          
          

          - *(dict) --* 

            Information about a fleet.

            
            

            - **name** *(string) --* 

              The name of the fleet.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the fleet.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the fleet was created.

              
            

            - **lastDeploymentStatus** *(string) --* 

              The status of the last fleet deployment.

              
            

            - **lastDeploymentJob** *(string) --* 

              The Amazon Resource Name (ARN) of the last deployment job.

              
            

            - **lastDeploymentTime** *(datetime) --* 

              The time of the last deployment.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListRobotApplications

  ::

    
    paginator = client.get_paginator('list_robot_applications')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_robot_applications`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListRobotApplications>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          versionQualifier='string',
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type versionQualifier: string
    :param versionQualifier: 

      The version qualifier of the robot application.

      

    
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter name ``name`` is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'robotApplicationSummaries': [
                {
                    'name': 'string',
                    'arn': 'string',
                    'version': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'robotSoftwareSuite': {
                        'name': 'ROS'|'ROS2',
                        'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **robotApplicationSummaries** *(list) --* 

          A list of robot application summaries that meet the criteria of the request.

          
          

          - *(dict) --* 

            Summary information for a robot application.

            
            

            - **name** *(string) --* 

              The name of the robot application.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the robot.

              
            

            - **version** *(string) --* 

              The version of the robot application.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the robot application was last updated.

              
            

            - **robotSoftwareSuite** *(dict) --* 

              Information about a robot software suite (ROS distribution).

              
              

              - **name** *(string) --* 

                The name of the robot software suite (ROS distribution).

                
              

              - **version** *(string) --* 

                The version of the robot software suite (ROS distribution).

                
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListRobots

  ::

    
    paginator = client.get_paginator('list_robots')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_robots`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListRobots>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter names ``status`` and ``fleetName`` are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status ``Registered`` or the status ``Available`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'robots': [
                {
                    'arn': 'string',
                    'name': 'string',
                    'fleetArn': 'string',
                    'status': 'Available'|'Registered'|'PendingNewDeployment'|'Deploying'|'Failed'|'InSync'|'NoResponse',
                    'greenGrassGroupId': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'architecture': 'X86_64'|'ARM64'|'ARMHF',
                    'lastDeploymentJob': 'string',
                    'lastDeploymentTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **robots** *(list) --* 

          A list of robots that meet the criteria of the request.

          
          

          - *(dict) --* 

            Information about a robot.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the robot.

              
            

            - **name** *(string) --* 

              The name of the robot.

              
            

            - **fleetArn** *(string) --* 

              The Amazon Resource Name (ARN) of the fleet.

              
            

            - **status** *(string) --* 

              The status of the robot.

              
            

            - **greenGrassGroupId** *(string) --* 

              The Greengrass group associated with the robot.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the robot was created.

              
            

            - **architecture** *(string) --* 

              The architecture of the robot.

              
            

            - **lastDeploymentJob** *(string) --* 

              The Amazon Resource Name (ARN) of the last deployment job.

              
            

            - **lastDeploymentTime** *(datetime) --* 

              The time of the last deployment.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListSimulationApplications

  ::

    
    paginator = client.get_paginator('list_simulation_applications')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_simulation_applications`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListSimulationApplications>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          versionQualifier='string',
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type versionQualifier: string
    :param versionQualifier: 

      The version qualifier of the simulation application.

      

    
    :type filters: list
    :param filters: 

      Optional list of filters to limit results.

       

      The filter name ``name`` is supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'simulationApplicationSummaries': [
                {
                    'name': 'string',
                    'arn': 'string',
                    'version': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'robotSoftwareSuite': {
                        'name': 'ROS'|'ROS2',
                        'version': 'Kinetic'|'Melodic'|'Dashing'|'Foxy'
                    },
                    'simulationSoftwareSuite': {
                        'name': 'Gazebo'|'RosbagPlay',
                        'version': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **simulationApplicationSummaries** *(list) --* 

          A list of simulation application summaries that meet the criteria of the request.

          
          

          - *(dict) --* 

            Summary information for a simulation application.

            
            

            - **name** *(string) --* 

              The name of the simulation application.

              
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the simulation application.

              
            

            - **version** *(string) --* 

              The version of the simulation application.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation application was last updated.

              
            

            - **robotSoftwareSuite** *(dict) --* 

              Information about a robot software suite (ROS distribution).

              
              

              - **name** *(string) --* 

                The name of the robot software suite (ROS distribution).

                
              

              - **version** *(string) --* 

                The version of the robot software suite (ROS distribution).

                
          
            

            - **simulationSoftwareSuite** *(dict) --* 

              Information about a simulation software suite.

              
              

              - **name** *(string) --* 

                The name of the simulation software suite.

                
              

              - **version** *(string) --* 

                The version of the simulation software suite.

                
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListSimulationJobBatches

  ::

    
    paginator = client.get_paginator('list_simulation_job_batches')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_simulation_job_batches`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListSimulationJobBatches>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results.

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'simulationJobBatchSummaries': [
                {
                    'arn': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'createdAt': datetime(2015, 1, 1),
                    'status': 'Pending'|'InProgress'|'Failed'|'Completed'|'Canceled'|'Canceling'|'Completing'|'TimingOut'|'TimedOut',
                    'failedRequestCount': 123,
                    'pendingRequestCount': 123,
                    'createdRequestCount': 123
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **simulationJobBatchSummaries** *(list) --* 

          A list of simulation job batch summaries.

          
          

          - *(dict) --* 

            Information about a simulation job batch.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the batch.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job batch was last updated.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job batch was created.

              
            

            - **status** *(string) --* 

              The status of the simulation job batch.

                Pending  

              The simulation job batch request is pending.

                InProgress  

              The simulation job batch is in progress. 

                Failed  

              The simulation job batch failed. One or more simulation job requests could not be completed due to an internal failure (like ``InternalServiceError`` ). See ``failureCode`` and ``failureReason`` for more information.

                Completed  

              The simulation batch job completed. A batch is complete when (1) there are no pending simulation job requests in the batch and none of the failed simulation job requests are due to ``InternalServiceError`` and (2) when all created simulation jobs have reached a terminal state (for example, ``Completed`` or ``Failed`` ). 

                Canceled  

              The simulation batch job was cancelled.

                Canceling  

              The simulation batch job is being cancelled.

                Completing  

              The simulation batch job is completing.

                TimingOut  

              The simulation job batch is timing out.

               

              If a batch timing out, and there are pending requests that were failing due to an internal failure (like ``InternalServiceError`` ), the batch status will be ``Failed`` . If there are no such failing request, the batch status will be ``TimedOut`` . 

                TimedOut  

              The simulation batch job timed out.

                
            

            - **failedRequestCount** *(integer) --* 

              The number of failed simulation job requests.

              
            

            - **pendingRequestCount** *(integer) --* 

              The number of pending simulation job requests.

              
            

            - **createdRequestCount** *(integer) --* 

              The number of created simulation job requests.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListSimulationJobs

  ::

    
    paginator = client.get_paginator('list_simulation_jobs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_simulation_jobs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListSimulationJobs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results.

       

      The filter names ``status`` and ``simulationApplicationName`` and ``robotApplicationName`` are supported. When filtering, you must use the complete value of the filtered item. You can use up to three filters, but they must be for the same named item. For example, if you are looking for items with the status ``Preparing`` or the status ``Running`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'simulationJobSummaries': [
                {
                    'arn': 'string',
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'name': 'string',
                    'status': 'Pending'|'Preparing'|'Running'|'Restarting'|'Completed'|'Failed'|'RunningFailed'|'Terminating'|'Terminated'|'Canceled',
                    'simulationApplicationNames': [
                        'string',
                    ],
                    'robotApplicationNames': [
                        'string',
                    ],
                    'dataSourceNames': [
                        'string',
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **simulationJobSummaries** *(list) --* 

          A list of simulation job summaries that meet the criteria of the request.

          
          

          - *(dict) --* 

            Summary information for a simulation job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the simulation job.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the simulation job was last updated.

              
            

            - **name** *(string) --* 

              The name of the simulation job.

              
            

            - **status** *(string) --* 

              The status of the simulation job.

              
            

            - **simulationApplicationNames** *(list) --* 

              A list of simulation job simulation application names.

              
              

              - *(string) --* 
          
            

            - **robotApplicationNames** *(list) --* 

              A list of simulation job robot application names.

              
              

              - *(string) --* 
          
            

            - **dataSourceNames** *(list) --* 

              The names of the data sources.

              
              

              - *(string) --* 
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListWorldExportJobs

  ::

    
    paginator = client.get_paginator('list_world_export_jobs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_world_export_jobs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorldExportJobs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results. You can use ``generationJobId`` and ``templateId`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'worldExportJobSummaries': [
                {
                    'arn': 'string',
                    'status': 'Pending'|'Running'|'Completed'|'Failed'|'Canceling'|'Canceled',
                    'createdAt': datetime(2015, 1, 1),
                    'worlds': [
                        'string',
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **worldExportJobSummaries** *(list) --* 

          Summary information for world export jobs.

          
          

          - *(dict) --* 

            Information about a world export job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the world export job.

              
            

            - **status** *(string) --* 

              The status of the world export job.

                Pending  

              The world export job request is pending.

                Running  

              The world export job is running. 

                Completed  

              The world export job completed. 

                Failed  

              The world export job failed. See ``failureCode`` for more information. 

                Canceled  

              The world export job was cancelled.

                Canceling  

              The world export job is being cancelled.

                
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the world export job was created.

              
            

            - **worlds** *(list) --* 

              A list of worlds.

              
              

              - *(string) --* 
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListWorldGenerationJobs

  ::

    
    paginator = client.get_paginator('list_world_generation_jobs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_world_generation_jobs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorldGenerationJobs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results. You can use ``status`` and ``templateId`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'worldGenerationJobSummaries': [
                {
                    'arn': 'string',
                    'template': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'status': 'Pending'|'Running'|'Completed'|'Failed'|'PartialFailed'|'Canceling'|'Canceled',
                    'worldCount': {
                        'floorplanCount': 123,
                        'interiorCountPerFloorplan': 123
                    },
                    'succeededWorldCount': 123,
                    'failedWorldCount': 123
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **worldGenerationJobSummaries** *(list) --* 

          Summary information for world generator jobs.

          
          

          - *(dict) --* 

            Information about a world generator job.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the world generator job.

              
            

            - **template** *(string) --* 

              The Amazon Resource Name (arn) of the world template.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the world generator job was created.

              
            

            - **status** *(string) --* 

              The status of the world generator job:

                Pending  

              The world generator job request is pending.

                Running  

              The world generator job is running. 

                Completed  

              The world generator job completed. 

                Failed  

              The world generator job failed. See ``failureCode`` for more information. 

                PartialFailed  

              Some worlds did not generate.

                Canceled  

              The world generator job was cancelled.

                Canceling  

              The world generator job is being cancelled.

                
            

            - **worldCount** *(dict) --* 

              Information about the world count.

              
              

              - **floorplanCount** *(integer) --* 

                The number of unique floorplans.

                
              

              - **interiorCountPerFloorplan** *(integer) --* 

                The number of unique interiors per floorplan.

                
          
            

            - **succeededWorldCount** *(integer) --* 

              The number of worlds that were generated.

              
            

            - **failedWorldCount** *(integer) --* 

              The number of worlds that failed.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListWorldTemplates

  ::

    
    paginator = client.get_paginator('list_world_templates')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_world_templates`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorldTemplates>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'templateSummaries': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'lastUpdatedAt': datetime(2015, 1, 1),
                    'name': 'string',
                    'version': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **templateSummaries** *(list) --* 

          Summary information for templates.

          
          

          - *(dict) --* 

            Summary information for a template.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the template.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the template was created.

              
            

            - **lastUpdatedAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the template was last updated.

              
            

            - **name** *(string) --* 

              The name of the template.

              
            

            - **version** *(string) --* 

              The version of the template that you're using.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: RoboMaker.Paginator.ListWorlds

  ::

    
    paginator = client.get_paginator('list_worlds')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RoboMaker.Client.list_worlds`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/robomaker-2018-06-29/ListWorlds>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          filters=[
              {
                  'name': 'string',
                  'values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type filters: list
    :param filters: 

      Optional filters to limit results. You can use ``status`` .

      

    
      - *(dict) --* 

        Information about a filter.

        

      
        - **name** *(string) --* 

          The name of the filter.

          

        
        - **values** *(list) --* 

          A list of values.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'worldSummaries': [
                {
                    'arn': 'string',
                    'createdAt': datetime(2015, 1, 1),
                    'generationJob': 'string',
                    'template': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **worldSummaries** *(list) --* 

          Summary information for worlds.

          
          

          - *(dict) --* 

            Information about a world.

            
            

            - **arn** *(string) --* 

              The Amazon Resource Name (ARN) of the world.

              
            

            - **createdAt** *(datetime) --* 

              The time, in milliseconds since the epoch, when the world was created.

              
            

            - **generationJob** *(string) --* 

              The Amazon Resource Name (arn) of the world generation job.

              
            

            - **template** *(string) --* 

              The Amazon Resource Name (arn) of the world template.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    