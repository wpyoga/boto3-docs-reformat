

******************
MigrationHubConfig
******************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: MigrationHubConfig.Client

  A low-level client representing AWS Migration Hub Config
  

  The AWS Migration Hub home region APIs are available specifically for working with your Migration Hub home region. You can use these APIs to determine a home region, as well as to create and work with controls that describe the home region.

   

   
  * You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home region, or a ``HomeRegionNotSetException`` error is returned. 
   
  * API calls for read actions (list, describe, stop, and delete) are permitted outside of your home region. 
   
  * If you call a write API outside the home region, an ``InvalidInputException`` is returned. 
   
  * You can call ``GetHomeRegion`` action to obtain the account's Migration Hub home region. 
   

   

  For specific API usage, see the sections that follow in this AWS Migration Hub Home Region API reference. 

  ::

    
    import boto3
    
    client = boto3.client('migrationhub-config')

  
  These are the available methods:
  
  *   :py:meth:`~MigrationHubConfig.Client.can_paginate`

  
  *   :py:meth:`~MigrationHubConfig.Client.create_home_region_control`

  
  *   :py:meth:`~MigrationHubConfig.Client.describe_home_region_controls`

  
  *   :py:meth:`~MigrationHubConfig.Client.generate_presigned_url`

  
  *   :py:meth:`~MigrationHubConfig.Client.get_home_region`

  
  *   :py:meth:`~MigrationHubConfig.Client.get_paginator`

  
  *   :py:meth:`~MigrationHubConfig.Client.get_waiter`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_home_region_control(**kwargs)

    

    This API sets up the home region for the calling account only.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/migrationhub-config-2019-06-30/CreateHomeRegionControl>`_    


    **Request Syntax** 
    ::

      response = client.create_home_region_control(
          HomeRegion='string',
          Target={
              'Type': 'ACCOUNT',
              'Id': 'string'
          },
          DryRun=True|False
      )
    :type HomeRegion: string
    :param HomeRegion: **[REQUIRED]** 

      The name of the home region of the calling account.

      

    
    :type Target: dict
    :param Target: **[REQUIRED]** 

      The account for which this command sets up a home region control. The ``Target`` is always of type ``ACCOUNT`` .

      

    
      - **Type** *(string) --* **[REQUIRED]** 

        The target type is always an ``ACCOUNT`` .

        

      
      - **Id** *(string) --* 

        The ``TargetID`` is a 12-character identifier of the ``ACCOUNT`` for which the control was created. (This must be the current account.) 

        

      
    
    :type DryRun: boolean
    :param DryRun: 

      Optional Boolean flag to indicate whether any effect should take place. It tests whether the caller has permission to make the call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HomeRegionControl': {
                'ControlId': 'string',
                'HomeRegion': 'string',
                'Target': {
                    'Type': 'ACCOUNT',
                    'Id': 'string'
                },
                'RequestedTime': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HomeRegionControl** *(dict) --* 

          This object is the ``HomeRegionControl`` object that's returned by a successful call to ``CreateHomeRegionControl`` .

          
          

          - **ControlId** *(string) --* 

            A unique identifier that's generated for each home region control. It's always a string that begins with "hrc-" followed by 12 lowercase letters and numbers.

            
          

          - **HomeRegion** *(string) --* 

            The AWS Region that's been set as home region. For example, "us-west-2" or "eu-central-1" are valid home regions.

            
          

          - **Target** *(dict) --* 

            The target parameter specifies the identifier to which the home region is applied, which is always an ``ACCOUNT`` . It applies the home region to the current ``ACCOUNT`` .

            
            

            - **Type** *(string) --* 

              The target type is always an ``ACCOUNT`` .

              
            

            - **Id** *(string) --* 

              The ``TargetID`` is a 12-character identifier of the ``ACCOUNT`` for which the control was created. (This must be the current account.) 

              
        
          

          - **RequestedTime** *(datetime) --* 

            A timestamp representing the time when the customer called ``CreateHomeregionControl`` and set the home region for the account.

            
      
    
    **Exceptions** 
    
    *     :py:class:`MigrationHubConfig.Client.exceptions.InternalServerError`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.ThrottlingException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.DryRunOperation`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.InvalidInputException`

    

  .. py:method:: describe_home_region_controls(**kwargs)

    

    This API permits filtering on the ``ControlId`` and ``HomeRegion`` fields.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/migrationhub-config-2019-06-30/DescribeHomeRegionControls>`_    


    **Request Syntax** 
    ::

      response = client.describe_home_region_controls(
          ControlId='string',
          HomeRegion='string',
          Target={
              'Type': 'ACCOUNT',
              'Id': 'string'
          },
          MaxResults=123,
          NextToken='string'
      )
    :type ControlId: string
    :param ControlId: 

      The ``ControlID`` is a unique identifier string of your ``HomeRegionControl`` object.

      

    
    :type HomeRegion: string
    :param HomeRegion: 

      The name of the home region you'd like to view.

      

    
    :type Target: dict
    :param Target: 

      The target parameter specifies the identifier to which the home region is applied, which is always of type ``ACCOUNT`` . It applies the home region to the current ``ACCOUNT`` .

      

    
      - **Type** *(string) --* **[REQUIRED]** 

        The target type is always an ``ACCOUNT`` .

        

      
      - **Id** *(string) --* 

        The ``TargetID`` is a 12-character identifier of the ``ACCOUNT`` for which the control was created. (This must be the current account.) 

        

      
    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of filtering results to display per page. 

      

    
    :type NextToken: string
    :param NextToken: 

      If a ``NextToken`` was returned by a previous call, more results are available. To retrieve the next page of results, make the call again using the returned token in ``NextToken`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HomeRegionControls': [
                {
                    'ControlId': 'string',
                    'HomeRegion': 'string',
                    'Target': {
                        'Type': 'ACCOUNT',
                        'Id': 'string'
                    },
                    'RequestedTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HomeRegionControls** *(list) --* 

          An array that contains your ``HomeRegionControl`` objects.

          
          

          - *(dict) --* 

            A home region control is an object that specifies the home region for an account, with some additional information. It contains a target (always of type ``ACCOUNT`` ), an ID, and a time at which the home region was set.

            
            

            - **ControlId** *(string) --* 

              A unique identifier that's generated for each home region control. It's always a string that begins with "hrc-" followed by 12 lowercase letters and numbers.

              
            

            - **HomeRegion** *(string) --* 

              The AWS Region that's been set as home region. For example, "us-west-2" or "eu-central-1" are valid home regions.

              
            

            - **Target** *(dict) --* 

              The target parameter specifies the identifier to which the home region is applied, which is always an ``ACCOUNT`` . It applies the home region to the current ``ACCOUNT`` .

              
              

              - **Type** *(string) --* 

                The target type is always an ``ACCOUNT`` .

                
              

              - **Id** *(string) --* 

                The ``TargetID`` is a 12-character identifier of the ``ACCOUNT`` for which the control was created. (This must be the current account.) 

                
          
            

            - **RequestedTime** *(datetime) --* 

              A timestamp representing the time when the customer called ``CreateHomeregionControl`` and set the home region for the account.

              
        
      
        

        - **NextToken** *(string) --* 

          If a ``NextToken`` was returned by a previous call, more results are available. To retrieve the next page of results, make the call again using the returned token in ``NextToken`` .

          
    
    **Exceptions** 
    
    *     :py:class:`MigrationHubConfig.Client.exceptions.InternalServerError`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.ThrottlingException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.InvalidInputException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_home_region()

    

    Returns the calling account’s home region, if configured. This API is used by other AWS services to determine the regional endpoint for calling AWS Application Discovery Service and Migration Hub. You must call ``GetHomeRegion`` at least once before you call any other AWS Application Discovery Service and AWS Migration Hub APIs, to obtain the account's Migration Hub home region.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/migrationhub-config-2019-06-30/GetHomeRegion>`_    


    **Request Syntax** 
    ::

      response = client.get_home_region()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HomeRegion': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HomeRegion** *(string) --* 

          The name of the home region of the calling account.

          
    
    **Exceptions** 
    
    *     :py:class:`MigrationHubConfig.Client.exceptions.InternalServerError`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.ThrottlingException`

    
    *     :py:class:`MigrationHubConfig.Client.exceptions.InvalidInputException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


==========
Paginators
==========


The available paginators are:
