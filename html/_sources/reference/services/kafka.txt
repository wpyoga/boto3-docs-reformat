

*****
Kafka
*****

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: Kafka.Client

  A low-level client representing Managed Streaming for Kafka
   

  The operations for managing an Amazon MSK cluster.

   ::

    
    import boto3
    
    client = boto3.client('kafka')

  
  These are the available methods:
  
  *   :py:meth:`~Kafka.Client.batch_associate_scram_secret`

  
  *   :py:meth:`~Kafka.Client.batch_disassociate_scram_secret`

  
  *   :py:meth:`~Kafka.Client.can_paginate`

  
  *   :py:meth:`~Kafka.Client.create_cluster`

  
  *   :py:meth:`~Kafka.Client.create_configuration`

  
  *   :py:meth:`~Kafka.Client.delete_cluster`

  
  *   :py:meth:`~Kafka.Client.delete_configuration`

  
  *   :py:meth:`~Kafka.Client.describe_cluster`

  
  *   :py:meth:`~Kafka.Client.describe_cluster_operation`

  
  *   :py:meth:`~Kafka.Client.describe_configuration`

  
  *   :py:meth:`~Kafka.Client.describe_configuration_revision`

  
  *   :py:meth:`~Kafka.Client.generate_presigned_url`

  
  *   :py:meth:`~Kafka.Client.get_bootstrap_brokers`

  
  *   :py:meth:`~Kafka.Client.get_compatible_kafka_versions`

  
  *   :py:meth:`~Kafka.Client.get_paginator`

  
  *   :py:meth:`~Kafka.Client.get_waiter`

  
  *   :py:meth:`~Kafka.Client.list_cluster_operations`

  
  *   :py:meth:`~Kafka.Client.list_clusters`

  
  *   :py:meth:`~Kafka.Client.list_configuration_revisions`

  
  *   :py:meth:`~Kafka.Client.list_configurations`

  
  *   :py:meth:`~Kafka.Client.list_kafka_versions`

  
  *   :py:meth:`~Kafka.Client.list_nodes`

  
  *   :py:meth:`~Kafka.Client.list_scram_secrets`

  
  *   :py:meth:`~Kafka.Client.list_tags_for_resource`

  
  *   :py:meth:`~Kafka.Client.reboot_broker`

  
  *   :py:meth:`~Kafka.Client.tag_resource`

  
  *   :py:meth:`~Kafka.Client.untag_resource`

  
  *   :py:meth:`~Kafka.Client.update_broker_count`

  
  *   :py:meth:`~Kafka.Client.update_broker_storage`

  
  *   :py:meth:`~Kafka.Client.update_broker_type`

  
  *   :py:meth:`~Kafka.Client.update_cluster_configuration`

  
  *   :py:meth:`~Kafka.Client.update_cluster_kafka_version`

  
  *   :py:meth:`~Kafka.Client.update_configuration`

  
  *   :py:meth:`~Kafka.Client.update_monitoring`

  

  .. py:method:: batch_associate_scram_secret(**kwargs)

     

    Associates one or more Scram Secrets with an Amazon MSK cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/BatchAssociateScramSecret>`_    


    **Request Syntax** 
    ::

      response = client.batch_associate_scram_secret(
          ClusterArn='string',
          SecretArnList=[
              'string',
          ]
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) of the cluster to be updated.

       

    
    :type SecretArnList: list
    :param SecretArnList: **[REQUIRED]**  

      List of AWS Secrets Manager secret ARNs.

       

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'UnprocessedScramSecrets': [
                {
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string',
                    'SecretArn': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **UnprocessedScramSecrets** *(list) --*  

          List of errors when associating secrets to cluster.

           
          

          - *(dict) --*  

            Error info for scram secret associate/disassociate failure.

             
            

            - **ErrorCode** *(string) --*  

              Error code for associate/disassociate failure.

               
            

            - **ErrorMessage** *(string) --*  

              Error message for associate/disassociate failure.

               
            

            - **SecretArn** *(string) --*  

              AWS Secrets Manager secret ARN.

               
        
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: batch_disassociate_scram_secret(**kwargs)

     

    Disassociates one or more Scram Secrets from an Amazon MSK cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/BatchDisassociateScramSecret>`_    


    **Request Syntax** 
    ::

      response = client.batch_disassociate_scram_secret(
          ClusterArn='string',
          SecretArnList=[
              'string',
          ]
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) of the cluster to be updated.

       

    
    :type SecretArnList: list
    :param SecretArnList: **[REQUIRED]**  

      List of AWS Secrets Manager secret ARNs.

       

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'UnprocessedScramSecrets': [
                {
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string',
                    'SecretArn': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **UnprocessedScramSecrets** *(list) --*  

          List of errors when disassociating secrets to cluster.

           
          

          - *(dict) --*  

            Error info for scram secret associate/disassociate failure.

             
            

            - **ErrorCode** *(string) --*  

              Error code for associate/disassociate failure.

               
            

            - **ErrorMessage** *(string) --*  

              Error message for associate/disassociate failure.

               
            

            - **SecretArn** *(string) --*  

              AWS Secrets Manager secret ARN.

               
        
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_cluster(**kwargs)

     

    Creates a new MSK cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/CreateCluster>`_    


    **Request Syntax** 
    ::

      response = client.create_cluster(
          BrokerNodeGroupInfo={
              'BrokerAZDistribution': 'DEFAULT',
              'ClientSubnets': [
                  'string',
              ],
              'InstanceType': 'string',
              'SecurityGroups': [
                  'string',
              ],
              'StorageInfo': {
                  'EbsStorageInfo': {
                      'VolumeSize': 123
                  }
              }
          },
          ClientAuthentication={
              'Sasl': {
                  'Scram': {
                      'Enabled': True|False
                  },
                  'Iam': {
                      'Enabled': True|False
                  }
              },
              'Tls': {
                  'CertificateAuthorityArnList': [
                      'string',
                  ]
              }
          },
          ClusterName='string',
          ConfigurationInfo={
              'Arn': 'string',
              'Revision': 123
          },
          EncryptionInfo={
              'EncryptionAtRest': {
                  'DataVolumeKMSKeyId': 'string'
              },
              'EncryptionInTransit': {
                  'ClientBroker': 'TLS'|'TLS_PLAINTEXT'|'PLAINTEXT',
                  'InCluster': True|False
              }
          },
          EnhancedMonitoring='DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
          OpenMonitoring={
              'Prometheus': {
                  'JmxExporter': {
                      'EnabledInBroker': True|False
                  },
                  'NodeExporter': {
                      'EnabledInBroker': True|False
                  }
              }
          },
          KafkaVersion='string',
          LoggingInfo={
              'BrokerLogs': {
                  'CloudWatchLogs': {
                      'Enabled': True|False,
                      'LogGroup': 'string'
                  },
                  'Firehose': {
                      'DeliveryStream': 'string',
                      'Enabled': True|False
                  },
                  'S3': {
                      'Bucket': 'string',
                      'Enabled': True|False,
                      'Prefix': 'string'
                  }
              }
          },
          NumberOfBrokerNodes=123,
          Tags={
              'string': 'string'
          }
      )
    :type BrokerNodeGroupInfo: dict
    :param BrokerNodeGroupInfo: **[REQUIRED]**  

      Information about the broker nodes in the cluster.

       

    
      - **BrokerAZDistribution** *(string) --*  

        The distribution of broker nodes across Availability Zones. This is an optional parameter. If you don't specify it, Amazon MSK gives it the value DEFAULT. You can also explicitly set this parameter to the value DEFAULT. No other values are currently allowed.

         

        Amazon MSK distributes the broker nodes evenly across the Availability Zones that correspond to the subnets you provide when you create the cluster.

         

      
      - **ClientSubnets** *(list) --* **[REQUIRED]**  

        The list of subnets to connect to in the client virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets. Client applications use elastic network interfaces to produce and consume data. Client subnets can't be in Availability Zone us-east-1e.

         

      
        - *(string) --* 

        
    
      - **InstanceType** *(string) --* **[REQUIRED]**  

        The type of Amazon EC2 instances to use for Kafka brokers. The following instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge, kafka.m5.4xlarge, kafka.m5.12xlarge, and kafka.m5.24xlarge.

         

      
      - **SecurityGroups** *(list) --*  

        The AWS security groups to associate with the elastic network interfaces in order to specify who can connect to and communicate with the Amazon MSK cluster. If you don't specify a security group, Amazon MSK uses the default security group associated with the VPC.

         

      
        - *(string) --* 

        
    
      - **StorageInfo** *(dict) --*  

        Contains information about storage volumes attached to MSK broker nodes.

         

      
        - **EbsStorageInfo** *(dict) --*  

          EBS volume information.

           

        
          - **VolumeSize** *(integer) --*  

            The size in GiB of the EBS volume for the data drive on each broker node.

             

          
        
      
    
    :type ClientAuthentication: dict
    :param ClientAuthentication:  

      Includes all client authentication related information.

       

    
      - **Sasl** *(dict) --*  

        Details for ClientAuthentication using SASL.

         

      
        - **Scram** *(dict) --*  

          Details for SASL/SCRAM client authentication.

           

        
          - **Enabled** *(boolean) --*  

            SASL/SCRAM authentication is enabled or not.

             

          
        
        - **Iam** *(dict) --*  

          Indicates whether IAM access control is enabled.

           

        
          - **Enabled** *(boolean) --*  

            Indicates whether IAM access control is enabled.

             

          
        
      
      - **Tls** *(dict) --*  

        Details for ClientAuthentication using TLS.

         

      
        - **CertificateAuthorityArnList** *(list) --*  

          List of ACM Certificate Authority ARNs.

           

        
          - *(string) --* 

          
      
      
    
    :type ClusterName: string
    :param ClusterName: **[REQUIRED]**  

      The name of the cluster.

       

    
    :type ConfigurationInfo: dict
    :param ConfigurationInfo:  

      Represents the configuration that you want MSK to use for the brokers in a cluster.

       

    
      - **Arn** *(string) --* **[REQUIRED]**  

        ARN of the configuration to use.

         

      
      - **Revision** *(integer) --* **[REQUIRED]**  

        The revision of the configuration to use.

         

      
    
    :type EncryptionInfo: dict
    :param EncryptionInfo:  

      Includes all encryption-related information.

       

    
      - **EncryptionAtRest** *(dict) --*  

        The data-volume encryption details.

         

      
        - **DataVolumeKMSKeyId** *(string) --* **[REQUIRED]**  

          The ARN of the AWS KMS key for encrypting data at rest. If you don't specify a KMS key, MSK creates one for you and uses it.

           

        
      
      - **EncryptionInTransit** *(dict) --*  

        The details for encryption in transit.

         

      
        - **ClientBroker** *(string) --*  

          Indicates the encryption setting for data in transit between clients and brokers. The following are the possible values.

           

          TLS means that client-broker communication is enabled with TLS only.

           

          TLS_PLAINTEXT means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data.

           

          PLAINTEXT means that client-broker communication is enabled in plaintext only.

           

          The default value is TLS_PLAINTEXT.

           

        
        - **InCluster** *(boolean) --*  

          When set to true, it indicates that data communication among the broker nodes of the cluster is encrypted. When set to false, the communication happens in plaintext.

           

          The default value is true.

           

        
      
    
    :type EnhancedMonitoring: string
    :param EnhancedMonitoring:  

      Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.

       

    
    :type OpenMonitoring: dict
    :param OpenMonitoring:  

      The settings for open monitoring.

       

    
      - **Prometheus** *(dict) --* **[REQUIRED]**  

        Prometheus settings.

         

      
        - **JmxExporter** *(dict) --*  

          Indicates whether you want to enable or disable the JMX Exporter.

           

        
          - **EnabledInBroker** *(boolean) --* **[REQUIRED]**  

            Indicates whether you want to enable or disable the JMX Exporter.

             

          
        
        - **NodeExporter** *(dict) --*  

          Indicates whether you want to enable or disable the Node Exporter.

           

        
          - **EnabledInBroker** *(boolean) --* **[REQUIRED]**  

            Indicates whether you want to enable or disable the Node Exporter.

             

          
        
      
    
    :type KafkaVersion: string
    :param KafkaVersion: **[REQUIRED]**  

      The version of Apache Kafka.

       

    
    :type LoggingInfo: dict
    :param LoggingInfo: 

    
      - **BrokerLogs** *(dict) --* **[REQUIRED]** 

      
        - **CloudWatchLogs** *(dict) --* 

        
          - **Enabled** *(boolean) --* **[REQUIRED]** 

          
          - **LogGroup** *(string) --* 

          
        
        - **Firehose** *(dict) --* 

        
          - **DeliveryStream** *(string) --* 

          
          - **Enabled** *(boolean) --* **[REQUIRED]** 

          
        
        - **S3** *(dict) --* 

        
          - **Bucket** *(string) --* 

          
          - **Enabled** *(boolean) --* **[REQUIRED]** 

          
          - **Prefix** *(string) --* 

          
        
      
    
    :type NumberOfBrokerNodes: integer
    :param NumberOfBrokerNodes: **[REQUIRED]**  

      The number of broker nodes in the cluster.

       

    
    :type Tags: dict
    :param Tags:  

      Create tags when creating the cluster.

       

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterName': 'string',
            'State': 'ACTIVE'|'CREATING'|'DELETING'|'FAILED'|'HEALING'|'MAINTENANCE'|'REBOOTING_BROKER'|'UPDATING'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterName** *(string) --*  

          The name of the MSK cluster.

           
        

        - **State** *(string) --*  

          The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`Kafka.Client.exceptions.ConflictException`

    

  .. py:method:: create_configuration(**kwargs)

     

    Creates a new MSK configuration.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/CreateConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.create_configuration(
          Description='string',
          KafkaVersions=[
              'string',
          ],
          Name='string',
          ServerProperties=b'bytes'
      )
    :type Description: string
    :param Description:  

      The description of the configuration.

       

    
    :type KafkaVersions: list
    :param KafkaVersions:  

      The versions of Apache Kafka with which you can use this MSK configuration.

       

    
      - *(string) --* 

      
  
    :type Name: string
    :param Name: **[REQUIRED]**  

      The name of the configuration.

       

    
    :type ServerProperties: bytes
    :param ServerProperties: **[REQUIRED]**  

      Contents of the server.propertiesfile. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of server.propertiescan be in plaintext.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'LatestRevision': {
                'CreationTime': datetime(2015, 1, 1),
                'Description': 'string',
                'Revision': 123
            },
            'Name': 'string',
            'State': 'ACTIVE'|'DELETING'|'DELETE_FAILED'
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **Arn** *(string) --*  

          The Amazon Resource Name (ARN) of the configuration.

           
        

        - **CreationTime** *(datetime) --*  

          The time when the configuration was created.

           
        

        - **LatestRevision** *(dict) --*  

          Latest revision of the configuration.

           
          

          - **CreationTime** *(datetime) --*  

            The time when the configuration revision was created.

             
          

          - **Description** *(string) --*  

            The description of the configuration revision.

             
          

          - **Revision** *(integer) --*  

            The revision number.

             
      
        

        - **Name** *(string) --*  

          The name of the configuration.

           
        

        - **State** *(string) --*  

          The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. 

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    
    *     :py:class:`Kafka.Client.exceptions.ConflictException`

    

  .. py:method:: delete_cluster(**kwargs)

     

    Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/DeleteCluster>`_    


    **Request Syntax** 
    ::

      response = client.delete_cluster(
          ClusterArn='string',
          CurrentVersion='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type CurrentVersion: string
    :param CurrentVersion:  

      The current version of the MSK cluster.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'State': 'ACTIVE'|'CREATING'|'DELETING'|'FAILED'|'HEALING'|'MAINTENANCE'|'REBOOTING_BROKER'|'UPDATING'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **State** *(string) --*  

          The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: delete_configuration(**kwargs)

     

    Deletes an MSK Configuration.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/DeleteConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.delete_configuration(
          Arn='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'State': 'ACTIVE'|'DELETING'|'DELETE_FAILED'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **Arn** *(string) --*  

          The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.

           
        

        - **State** *(string) --*  

          The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. 

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: describe_cluster(**kwargs)

     

    Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/DescribeCluster>`_    


    **Request Syntax** 
    ::

      response = client.describe_cluster(
          ClusterArn='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterInfo': {
                'ActiveOperationArn': 'string',
                'BrokerNodeGroupInfo': {
                    'BrokerAZDistribution': 'DEFAULT',
                    'ClientSubnets': [
                        'string',
                    ],
                    'InstanceType': 'string',
                    'SecurityGroups': [
                        'string',
                    ],
                    'StorageInfo': {
                        'EbsStorageInfo': {
                            'VolumeSize': 123
                        }
                    }
                },
                'ClientAuthentication': {
                    'Sasl': {
                        'Scram': {
                            'Enabled': True|False
                        },
                        'Iam': {
                            'Enabled': True|False
                        }
                    },
                    'Tls': {
                        'CertificateAuthorityArnList': [
                            'string',
                        ]
                    }
                },
                'ClusterArn': 'string',
                'ClusterName': 'string',
                'CreationTime': datetime(2015, 1, 1),
                'CurrentBrokerSoftwareInfo': {
                    'ConfigurationArn': 'string',
                    'ConfigurationRevision': 123,
                    'KafkaVersion': 'string'
                },
                'CurrentVersion': 'string',
                'EncryptionInfo': {
                    'EncryptionAtRest': {
                        'DataVolumeKMSKeyId': 'string'
                    },
                    'EncryptionInTransit': {
                        'ClientBroker': 'TLS'|'TLS_PLAINTEXT'|'PLAINTEXT',
                        'InCluster': True|False
                    }
                },
                'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                'OpenMonitoring': {
                    'Prometheus': {
                        'JmxExporter': {
                            'EnabledInBroker': True|False
                        },
                        'NodeExporter': {
                            'EnabledInBroker': True|False
                        }
                    }
                },
                'LoggingInfo': {
                    'BrokerLogs': {
                        'CloudWatchLogs': {
                            'Enabled': True|False,
                            'LogGroup': 'string'
                        },
                        'Firehose': {
                            'DeliveryStream': 'string',
                            'Enabled': True|False
                        },
                        'S3': {
                            'Bucket': 'string',
                            'Enabled': True|False,
                            'Prefix': 'string'
                        }
                    }
                },
                'NumberOfBrokerNodes': 123,
                'State': 'ACTIVE'|'CREATING'|'DELETING'|'FAILED'|'HEALING'|'MAINTENANCE'|'REBOOTING_BROKER'|'UPDATING',
                'StateInfo': {
                    'Code': 'string',
                    'Message': 'string'
                },
                'Tags': {
                    'string': 'string'
                },
                'ZookeeperConnectString': 'string',
                'ZookeeperConnectStringTls': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterInfo** *(dict) --*  

          The cluster information.

           
          

          - **ActiveOperationArn** *(string) --*  

            Arn of active cluster operation.

             
          

          - **BrokerNodeGroupInfo** *(dict) --*  

            Information about the broker nodes.

             
            

            - **BrokerAZDistribution** *(string) --*  

              The distribution of broker nodes across Availability Zones. This is an optional parameter. If you don't specify it, Amazon MSK gives it the value DEFAULT. You can also explicitly set this parameter to the value DEFAULT. No other values are currently allowed.

               

              Amazon MSK distributes the broker nodes evenly across the Availability Zones that correspond to the subnets you provide when you create the cluster.

               
            

            - **ClientSubnets** *(list) --*  

              The list of subnets to connect to in the client virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets. Client applications use elastic network interfaces to produce and consume data. Client subnets can't be in Availability Zone us-east-1e.

               
              

              - *(string) --* 
          
            

            - **InstanceType** *(string) --*  

              The type of Amazon EC2 instances to use for Kafka brokers. The following instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge, kafka.m5.4xlarge, kafka.m5.12xlarge, and kafka.m5.24xlarge.

               
            

            - **SecurityGroups** *(list) --*  

              The AWS security groups to associate with the elastic network interfaces in order to specify who can connect to and communicate with the Amazon MSK cluster. If you don't specify a security group, Amazon MSK uses the default security group associated with the VPC.

               
              

              - *(string) --* 
          
            

            - **StorageInfo** *(dict) --*  

              Contains information about storage volumes attached to MSK broker nodes.

               
              

              - **EbsStorageInfo** *(dict) --*  

                EBS volume information.

                 
                

                - **VolumeSize** *(integer) --*  

                  The size in GiB of the EBS volume for the data drive on each broker node.

                   
            
          
        
          

          - **ClientAuthentication** *(dict) --*  

            Includes all client authentication information.

             
            

            - **Sasl** *(dict) --*  

              Details for ClientAuthentication using SASL.

               
              

              - **Scram** *(dict) --*  

                Details for SASL/SCRAM client authentication.

                 
                

                - **Enabled** *(boolean) --*  

                  SASL/SCRAM authentication is enabled or not.

                   
            
              

              - **Iam** *(dict) --*  

                Indicates whether IAM access control is enabled.

                 
                

                - **Enabled** *(boolean) --*  

                  Indicates whether IAM access control is enabled.

                   
            
          
            

            - **Tls** *(dict) --*  

              Details for ClientAuthentication using TLS.

               
              

              - **CertificateAuthorityArnList** *(list) --*  

                List of ACM Certificate Authority ARNs.

                 
                

                - *(string) --* 
            
          
        
          

          - **ClusterArn** *(string) --*  

            The Amazon Resource Name (ARN) that uniquely identifies the cluster.

             
          

          - **ClusterName** *(string) --*  

            The name of the cluster.

             
          

          - **CreationTime** *(datetime) --*  

            The time when the cluster was created.

             
          

          - **CurrentBrokerSoftwareInfo** *(dict) --*  

            Information about the version of software currently deployed on the Kafka brokers in the cluster.

             
            

            - **ConfigurationArn** *(string) --*  

              The Amazon Resource Name (ARN) of the configuration used for the cluster. This field isn't visible in this preview release.

               
            

            - **ConfigurationRevision** *(integer) --*  

              The revision of the configuration to use. This field isn't visible in this preview release.

               
            

            - **KafkaVersion** *(string) --*  

              The version of Apache Kafka.

               
        
          

          - **CurrentVersion** *(string) --*  

            The current version of the MSK cluster.

             
          

          - **EncryptionInfo** *(dict) --*  

            Includes all encryption-related information.

             
            

            - **EncryptionAtRest** *(dict) --*  

              The data-volume encryption details.

               
              

              - **DataVolumeKMSKeyId** *(string) --*  

                The ARN of the AWS KMS key for encrypting data at rest. If you don't specify a KMS key, MSK creates one for you and uses it.

                 
          
            

            - **EncryptionInTransit** *(dict) --*  

              The details for encryption in transit.

               
              

              - **ClientBroker** *(string) --*  

                Indicates the encryption setting for data in transit between clients and brokers. The following are the possible values.

                 

                TLS means that client-broker communication is enabled with TLS only.

                 

                TLS_PLAINTEXT means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data.

                 

                PLAINTEXT means that client-broker communication is enabled in plaintext only.

                 

                The default value is TLS_PLAINTEXT.

                 
              

              - **InCluster** *(boolean) --*  

                When set to true, it indicates that data communication among the broker nodes of the cluster is encrypted. When set to false, the communication happens in plaintext.

                 

                The default value is true.

                 
          
        
          

          - **EnhancedMonitoring** *(string) --*  

            Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see `Monitoring <https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html>`__ .

             
          

          - **OpenMonitoring** *(dict) --*  

            Settings for open monitoring using Prometheus.

             
            

            - **Prometheus** *(dict) --*  

              Prometheus settings.

               
              

              - **JmxExporter** *(dict) --*  

                Indicates whether you want to enable or disable the JMX Exporter.

                 
                

                - **EnabledInBroker** *(boolean) --*  

                  Indicates whether you want to enable or disable the JMX Exporter.

                   
            
              

              - **NodeExporter** *(dict) --*  

                Indicates whether you want to enable or disable the Node Exporter.

                 
                

                - **EnabledInBroker** *(boolean) --*  

                  Indicates whether you want to enable or disable the Node Exporter.

                   
            
          
        
          

          - **LoggingInfo** *(dict) --* 
            

            - **BrokerLogs** *(dict) --* 
              

              - **CloudWatchLogs** *(dict) --* 
                

                - **Enabled** *(boolean) --* 
                

                - **LogGroup** *(string) --* 
            
              

              - **Firehose** *(dict) --* 
                

                - **DeliveryStream** *(string) --* 
                

                - **Enabled** *(boolean) --* 
            
              

              - **S3** *(dict) --* 
                

                - **Bucket** *(string) --* 
                

                - **Enabled** *(boolean) --* 
                

                - **Prefix** *(string) --* 
            
          
        
          

          - **NumberOfBrokerNodes** *(integer) --*  

            The number of broker nodes in the cluster.

             
          

          - **State** *(string) --*  

            The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.

             
          

          - **StateInfo** *(dict) --* 
            

            - **Code** *(string) --* 
            

            - **Message** *(string) --* 
        
          

          - **Tags** *(dict) --*  

            Tags attached to the cluster.

             
            

            - *(string) --* 
              

              - *(string) --* 
        
      
          

          - **ZookeeperConnectString** *(string) --*  

            The connection string to use to connect to the Apache ZooKeeper cluster.

             
          

          - **ZookeeperConnectStringTls** *(string) --*  

            The connection string to use to connect to zookeeper cluster on Tls port.

             
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: describe_cluster_operation(**kwargs)

     

    Returns a description of the cluster operation specified by the ARN.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/DescribeClusterOperation>`_    


    **Request Syntax** 
    ::

      response = client.describe_cluster_operation(
          ClusterOperationArn='string'
      )
    :type ClusterOperationArn: string
    :param ClusterOperationArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the MSK cluster operation.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterOperationInfo': {
                'ClientRequestId': 'string',
                'ClusterArn': 'string',
                'CreationTime': datetime(2015, 1, 1),
                'EndTime': datetime(2015, 1, 1),
                'ErrorInfo': {
                    'ErrorCode': 'string',
                    'ErrorString': 'string'
                },
                'OperationArn': 'string',
                'OperationState': 'string',
                'OperationSteps': [
                    {
                        'StepInfo': {
                            'StepStatus': 'string'
                        },
                        'StepName': 'string'
                    },
                ],
                'OperationType': 'string',
                'SourceClusterInfo': {
                    'BrokerEBSVolumeInfo': [
                        {
                            'KafkaBrokerNodeId': 'string',
                            'VolumeSizeGB': 123
                        },
                    ],
                    'ConfigurationInfo': {
                        'Arn': 'string',
                        'Revision': 123
                    },
                    'NumberOfBrokerNodes': 123,
                    'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                    'OpenMonitoring': {
                        'Prometheus': {
                            'JmxExporter': {
                                'EnabledInBroker': True|False
                            },
                            'NodeExporter': {
                                'EnabledInBroker': True|False
                            }
                        }
                    },
                    'KafkaVersion': 'string',
                    'LoggingInfo': {
                        'BrokerLogs': {
                            'CloudWatchLogs': {
                                'Enabled': True|False,
                                'LogGroup': 'string'
                            },
                            'Firehose': {
                                'DeliveryStream': 'string',
                                'Enabled': True|False
                            },
                            'S3': {
                                'Bucket': 'string',
                                'Enabled': True|False,
                                'Prefix': 'string'
                            }
                        }
                    },
                    'InstanceType': 'string'
                },
                'TargetClusterInfo': {
                    'BrokerEBSVolumeInfo': [
                        {
                            'KafkaBrokerNodeId': 'string',
                            'VolumeSizeGB': 123
                        },
                    ],
                    'ConfigurationInfo': {
                        'Arn': 'string',
                        'Revision': 123
                    },
                    'NumberOfBrokerNodes': 123,
                    'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                    'OpenMonitoring': {
                        'Prometheus': {
                            'JmxExporter': {
                                'EnabledInBroker': True|False
                            },
                            'NodeExporter': {
                                'EnabledInBroker': True|False
                            }
                        }
                    },
                    'KafkaVersion': 'string',
                    'LoggingInfo': {
                        'BrokerLogs': {
                            'CloudWatchLogs': {
                                'Enabled': True|False,
                                'LogGroup': 'string'
                            },
                            'Firehose': {
                                'DeliveryStream': 'string',
                                'Enabled': True|False
                            },
                            'S3': {
                                'Bucket': 'string',
                                'Enabled': True|False,
                                'Prefix': 'string'
                            }
                        }
                    },
                    'InstanceType': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **ClusterOperationInfo** *(dict) --*  

          Cluster operation information

           
          

          - **ClientRequestId** *(string) --*  

            The ID of the API request that triggered this operation.

             
          

          - **ClusterArn** *(string) --*  

            ARN of the cluster.

             
          

          - **CreationTime** *(datetime) --*  

            The time that the operation was created.

             
          

          - **EndTime** *(datetime) --*  

            The time at which the operation finished.

             
          

          - **ErrorInfo** *(dict) --*  

            Describes the error if the operation fails.

             
            

            - **ErrorCode** *(string) --*  

              A number describing the error programmatically.

               
            

            - **ErrorString** *(string) --*  

              An optional field to provide more details about the error.

               
        
          

          - **OperationArn** *(string) --*  

            ARN of the cluster operation.

             
          

          - **OperationState** *(string) --*  

            State of the cluster operation.

             
          

          - **OperationSteps** *(list) --*  

            Steps completed during the operation.

             
            

            - *(dict) --*  

              Step taken during a cluster operation.

               
              

              - **StepInfo** *(dict) --*  

                Information about the step and its status.

                 
                

                - **StepStatus** *(string) --*  

                  The steps current status.

                   
            
              

              - **StepName** *(string) --*  

                The name of the step.

                 
          
        
          

          - **OperationType** *(string) --*  

            Type of the cluster operation.

             
          

          - **SourceClusterInfo** *(dict) --*  

            Information about cluster attributes before a cluster is updated.

             
            

            - **BrokerEBSVolumeInfo** *(list) --*  

              Specifies the size of the EBS volume and the ID of the associated broker.

               
              

              - *(dict) --*  

                Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.

                 
                

                - **KafkaBrokerNodeId** *(string) --*  

                  The ID of the broker to update.

                   
                

                - **VolumeSizeGB** *(integer) --*  

                  Size of the EBS volume to update.

                   
            
          
            

            - **ConfigurationInfo** *(dict) --*  

              Information about the changes in the configuration of the brokers.

               
              

              - **Arn** *(string) --*  

                ARN of the configuration to use.

                 
              

              - **Revision** *(integer) --*  

                The revision of the configuration to use.

                 
          
            

            - **NumberOfBrokerNodes** *(integer) --*  

              The number of broker nodes in the cluster.

               
            

            - **EnhancedMonitoring** *(string) --*  

              Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.

               
            

            - **OpenMonitoring** *(dict) --*  

              The settings for open monitoring.

               
              

              - **Prometheus** *(dict) --*  

                Prometheus settings.

                 
                

                - **JmxExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the JMX Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
              
                

                - **NodeExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the Node Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
              
            
          
            

            - **KafkaVersion** *(string) --*  

              The Kafka version.

               
            

            - **LoggingInfo** *(dict) --* 
              

              - **BrokerLogs** *(dict) --* 
                

                - **CloudWatchLogs** *(dict) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **LogGroup** *(string) --* 
              
                

                - **Firehose** *(dict) --* 
                  

                  - **DeliveryStream** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
              
                

                - **S3** *(dict) --* 
                  

                  - **Bucket** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **Prefix** *(string) --* 
              
            
          
            

            - **InstanceType** *(string) --*  

              Information about the Amazon MSK broker type.

               
        
          

          - **TargetClusterInfo** *(dict) --*  

            Information about cluster attributes after a cluster is updated.

             
            

            - **BrokerEBSVolumeInfo** *(list) --*  

              Specifies the size of the EBS volume and the ID of the associated broker.

               
              

              - *(dict) --*  

                Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.

                 
                

                - **KafkaBrokerNodeId** *(string) --*  

                  The ID of the broker to update.

                   
                

                - **VolumeSizeGB** *(integer) --*  

                  Size of the EBS volume to update.

                   
            
          
            

            - **ConfigurationInfo** *(dict) --*  

              Information about the changes in the configuration of the brokers.

               
              

              - **Arn** *(string) --*  

                ARN of the configuration to use.

                 
              

              - **Revision** *(integer) --*  

                The revision of the configuration to use.

                 
          
            

            - **NumberOfBrokerNodes** *(integer) --*  

              The number of broker nodes in the cluster.

               
            

            - **EnhancedMonitoring** *(string) --*  

              Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.

               
            

            - **OpenMonitoring** *(dict) --*  

              The settings for open monitoring.

               
              

              - **Prometheus** *(dict) --*  

                Prometheus settings.

                 
                

                - **JmxExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the JMX Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
              
                

                - **NodeExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the Node Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
              
            
          
            

            - **KafkaVersion** *(string) --*  

              The Kafka version.

               
            

            - **LoggingInfo** *(dict) --* 
              

              - **BrokerLogs** *(dict) --* 
                

                - **CloudWatchLogs** *(dict) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **LogGroup** *(string) --* 
              
                

                - **Firehose** *(dict) --* 
                  

                  - **DeliveryStream** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
              
                

                - **S3** *(dict) --* 
                  

                  - **Bucket** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **Prefix** *(string) --* 
              
            
          
            

            - **InstanceType** *(string) --*  

              Information about the Amazon MSK broker type.

               
        
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: describe_configuration(**kwargs)

     

    Returns a description of this MSK configuration.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/DescribeConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.describe_configuration(
          Arn='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'Description': 'string',
            'KafkaVersions': [
                'string',
            ],
            'LatestRevision': {
                'CreationTime': datetime(2015, 1, 1),
                'Description': 'string',
                'Revision': 123
            },
            'Name': 'string',
            'State': 'ACTIVE'|'DELETING'|'DELETE_FAILED'
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **Arn** *(string) --*  

          The Amazon Resource Name (ARN) of the configuration.

           
        

        - **CreationTime** *(datetime) --*  

          The time when the configuration was created.

           
        

        - **Description** *(string) --*  

          The description of the configuration.

           
        

        - **KafkaVersions** *(list) --*  

          The versions of Apache Kafka with which you can use this MSK configuration.

           
          

          - *(string) --* 
      
        

        - **LatestRevision** *(dict) --*  

          Latest revision of the configuration.

           
          

          - **CreationTime** *(datetime) --*  

            The time when the configuration revision was created.

             
          

          - **Description** *(string) --*  

            The description of the configuration revision.

             
          

          - **Revision** *(integer) --*  

            The revision number.

             
      
        

        - **Name** *(string) --*  

          The name of the configuration.

           
        

        - **State** *(string) --*  

          The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. 

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: describe_configuration_revision(**kwargs)

     

    Returns a description of this revision of the configuration.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/DescribeConfigurationRevision>`_    


    **Request Syntax** 
    ::

      response = client.describe_configuration_revision(
          Arn='string',
          Revision=123
      )
    :type Arn: string
    :param Arn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.

       

    
    :type Revision: integer
    :param Revision: **[REQUIRED]**  

      A string that uniquely identifies a revision of an MSK configuration.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'Description': 'string',
            'Revision': 123,
            'ServerProperties': b'bytes'
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **Arn** *(string) --*  

          The Amazon Resource Name (ARN) of the configuration.

           
        

        - **CreationTime** *(datetime) --*  

          The time when the configuration was created.

           
        

        - **Description** *(string) --*  

          The description of the configuration.

           
        

        - **Revision** *(integer) --*  

          The revision number.

           
        

        - **ServerProperties** *(bytes) --*  

          Contents of the server.propertiesfile. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of server.propertiescan be in plaintext.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_bootstrap_brokers(**kwargs)

     

    A list of brokers that a client application can use to bootstrap.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/GetBootstrapBrokers>`_    


    **Request Syntax** 
    ::

      response = client.get_bootstrap_brokers(
          ClusterArn='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'BootstrapBrokerString': 'string',
            'BootstrapBrokerStringTls': 'string',
            'BootstrapBrokerStringSaslScram': 'string',
            'BootstrapBrokerStringSaslIam': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **BootstrapBrokerString** *(string) --*  

          A string containing one or more hostname:port pairs.

           
        

        - **BootstrapBrokerStringTls** *(string) --*  

          A string containing one or more DNS names (or IP) and TLS port pairs.

           
        

        - **BootstrapBrokerStringSaslScram** *(string) --*  

          A string containing one or more DNS names (or IP) and Sasl Scram port pairs.

           
        

        - **BootstrapBrokerStringSaslIam** *(string) --*  

          A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ConflictException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: get_compatible_kafka_versions(**kwargs)

     

    Gets the Apache Kafka versions to which you can update the MSK cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/GetCompatibleKafkaVersions>`_    


    **Request Syntax** 
    ::

      response = client.get_compatible_kafka_versions(
          ClusterArn='string'
      )
    :type ClusterArn: string
    :param ClusterArn:  

      The Amazon Resource Name (ARN) of the cluster check.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CompatibleKafkaVersions': [
                {
                    'SourceVersion': 'string',
                    'TargetVersions': [
                        'string',
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **CompatibleKafkaVersions** *(list) --*  

          A list of CompatibleKafkaVersion objects.

           
          

          - *(dict) --*  

            Contains source Kafka versions and compatible target Kafka versions.

             
            

            - **SourceVersion** *(string) --*  

              A Kafka version.

               
            

            - **TargetVersions** *(list) --*  

              A list of Kafka versions.

               
              

              - *(string) --* 
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_cluster_operations(**kwargs)

     

    Returns a list of all the operations that have been performed on the specified MSK cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListClusterOperations>`_    


    **Request Syntax** 
    ::

      response = client.list_cluster_operations(
          ClusterArn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type MaxResults: integer
    :param MaxResults:  

      The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.

       

    
    :type NextToken: string
    :param NextToken:  

      The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterOperationInfoList': [
                {
                    'ClientRequestId': 'string',
                    'ClusterArn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'EndTime': datetime(2015, 1, 1),
                    'ErrorInfo': {
                        'ErrorCode': 'string',
                        'ErrorString': 'string'
                    },
                    'OperationArn': 'string',
                    'OperationState': 'string',
                    'OperationSteps': [
                        {
                            'StepInfo': {
                                'StepStatus': 'string'
                            },
                            'StepName': 'string'
                        },
                    ],
                    'OperationType': 'string',
                    'SourceClusterInfo': {
                        'BrokerEBSVolumeInfo': [
                            {
                                'KafkaBrokerNodeId': 'string',
                                'VolumeSizeGB': 123
                            },
                        ],
                        'ConfigurationInfo': {
                            'Arn': 'string',
                            'Revision': 123
                        },
                        'NumberOfBrokerNodes': 123,
                        'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                        'OpenMonitoring': {
                            'Prometheus': {
                                'JmxExporter': {
                                    'EnabledInBroker': True|False
                                },
                                'NodeExporter': {
                                    'EnabledInBroker': True|False
                                }
                            }
                        },
                        'KafkaVersion': 'string',
                        'LoggingInfo': {
                            'BrokerLogs': {
                                'CloudWatchLogs': {
                                    'Enabled': True|False,
                                    'LogGroup': 'string'
                                },
                                'Firehose': {
                                    'DeliveryStream': 'string',
                                    'Enabled': True|False
                                },
                                'S3': {
                                    'Bucket': 'string',
                                    'Enabled': True|False,
                                    'Prefix': 'string'
                                }
                            }
                        },
                        'InstanceType': 'string'
                    },
                    'TargetClusterInfo': {
                        'BrokerEBSVolumeInfo': [
                            {
                                'KafkaBrokerNodeId': 'string',
                                'VolumeSizeGB': 123
                            },
                        ],
                        'ConfigurationInfo': {
                            'Arn': 'string',
                            'Revision': 123
                        },
                        'NumberOfBrokerNodes': 123,
                        'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                        'OpenMonitoring': {
                            'Prometheus': {
                                'JmxExporter': {
                                    'EnabledInBroker': True|False
                                },
                                'NodeExporter': {
                                    'EnabledInBroker': True|False
                                }
                            }
                        },
                        'KafkaVersion': 'string',
                        'LoggingInfo': {
                            'BrokerLogs': {
                                'CloudWatchLogs': {
                                    'Enabled': True|False,
                                    'LogGroup': 'string'
                                },
                                'Firehose': {
                                    'DeliveryStream': 'string',
                                    'Enabled': True|False
                                },
                                'S3': {
                                    'Bucket': 'string',
                                    'Enabled': True|False,
                                    'Prefix': 'string'
                                }
                            }
                        },
                        'InstanceType': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterOperationInfoList** *(list) --*  

          An array of cluster operation information objects.

           
          

          - *(dict) --*  

            Returns information about a cluster operation.

             
            

            - **ClientRequestId** *(string) --*  

              The ID of the API request that triggered this operation.

               
            

            - **ClusterArn** *(string) --*  

              ARN of the cluster.

               
            

            - **CreationTime** *(datetime) --*  

              The time that the operation was created.

               
            

            - **EndTime** *(datetime) --*  

              The time at which the operation finished.

               
            

            - **ErrorInfo** *(dict) --*  

              Describes the error if the operation fails.

               
              

              - **ErrorCode** *(string) --*  

                A number describing the error programmatically.

                 
              

              - **ErrorString** *(string) --*  

                An optional field to provide more details about the error.

                 
          
            

            - **OperationArn** *(string) --*  

              ARN of the cluster operation.

               
            

            - **OperationState** *(string) --*  

              State of the cluster operation.

               
            

            - **OperationSteps** *(list) --*  

              Steps completed during the operation.

               
              

              - *(dict) --*  

                Step taken during a cluster operation.

                 
                

                - **StepInfo** *(dict) --*  

                  Information about the step and its status.

                   
                  

                  - **StepStatus** *(string) --*  

                    The steps current status.

                     
              
                

                - **StepName** *(string) --*  

                  The name of the step.

                   
            
          
            

            - **OperationType** *(string) --*  

              Type of the cluster operation.

               
            

            - **SourceClusterInfo** *(dict) --*  

              Information about cluster attributes before a cluster is updated.

               
              

              - **BrokerEBSVolumeInfo** *(list) --*  

                Specifies the size of the EBS volume and the ID of the associated broker.

                 
                

                - *(dict) --*  

                  Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.

                   
                  

                  - **KafkaBrokerNodeId** *(string) --*  

                    The ID of the broker to update.

                     
                  

                  - **VolumeSizeGB** *(integer) --*  

                    Size of the EBS volume to update.

                     
              
            
              

              - **ConfigurationInfo** *(dict) --*  

                Information about the changes in the configuration of the brokers.

                 
                

                - **Arn** *(string) --*  

                  ARN of the configuration to use.

                   
                

                - **Revision** *(integer) --*  

                  The revision of the configuration to use.

                   
            
              

              - **NumberOfBrokerNodes** *(integer) --*  

                The number of broker nodes in the cluster.

                 
              

              - **EnhancedMonitoring** *(string) --*  

                Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.

                 
              

              - **OpenMonitoring** *(dict) --*  

                The settings for open monitoring.

                 
                

                - **Prometheus** *(dict) --*  

                  Prometheus settings.

                   
                  

                  - **JmxExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the JMX Exporter.

                       
                
                  

                  - **NodeExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the Node Exporter.

                       
                
              
            
              

              - **KafkaVersion** *(string) --*  

                The Kafka version.

                 
              

              - **LoggingInfo** *(dict) --* 
                

                - **BrokerLogs** *(dict) --* 
                  

                  - **CloudWatchLogs** *(dict) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **LogGroup** *(string) --* 
                
                  

                  - **Firehose** *(dict) --* 
                    

                    - **DeliveryStream** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                
                  

                  - **S3** *(dict) --* 
                    

                    - **Bucket** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **Prefix** *(string) --* 
                
              
            
              

              - **InstanceType** *(string) --*  

                Information about the Amazon MSK broker type.

                 
          
            

            - **TargetClusterInfo** *(dict) --*  

              Information about cluster attributes after a cluster is updated.

               
              

              - **BrokerEBSVolumeInfo** *(list) --*  

                Specifies the size of the EBS volume and the ID of the associated broker.

                 
                

                - *(dict) --*  

                  Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.

                   
                  

                  - **KafkaBrokerNodeId** *(string) --*  

                    The ID of the broker to update.

                     
                  

                  - **VolumeSizeGB** *(integer) --*  

                    Size of the EBS volume to update.

                     
              
            
              

              - **ConfigurationInfo** *(dict) --*  

                Information about the changes in the configuration of the brokers.

                 
                

                - **Arn** *(string) --*  

                  ARN of the configuration to use.

                   
                

                - **Revision** *(integer) --*  

                  The revision of the configuration to use.

                   
            
              

              - **NumberOfBrokerNodes** *(integer) --*  

                The number of broker nodes in the cluster.

                 
              

              - **EnhancedMonitoring** *(string) --*  

                Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.

                 
              

              - **OpenMonitoring** *(dict) --*  

                The settings for open monitoring.

                 
                

                - **Prometheus** *(dict) --*  

                  Prometheus settings.

                   
                  

                  - **JmxExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the JMX Exporter.

                       
                
                  

                  - **NodeExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the Node Exporter.

                       
                
              
            
              

              - **KafkaVersion** *(string) --*  

                The Kafka version.

                 
              

              - **LoggingInfo** *(dict) --* 
                

                - **BrokerLogs** *(dict) --* 
                  

                  - **CloudWatchLogs** *(dict) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **LogGroup** *(string) --* 
                
                  

                  - **Firehose** *(dict) --* 
                    

                    - **DeliveryStream** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                
                  

                  - **S3** *(dict) --* 
                    

                    - **Bucket** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **Prefix** *(string) --* 
                
              
            
              

              - **InstanceType** *(string) --*  

                Information about the Amazon MSK broker type.

                 
          
        
      
        

        - **NextToken** *(string) --*  

          If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: list_clusters(**kwargs)

     

    Returns a list of all the MSK clusters in the current Region.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListClusters>`_    


    **Request Syntax** 
    ::

      response = client.list_clusters(
          ClusterNameFilter='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ClusterNameFilter: string
    :param ClusterNameFilter:  

      Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.

       

    
    :type MaxResults: integer
    :param MaxResults:  

      The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.

       

    
    :type NextToken: string
    :param NextToken:  

      The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterInfoList': [
                {
                    'ActiveOperationArn': 'string',
                    'BrokerNodeGroupInfo': {
                        'BrokerAZDistribution': 'DEFAULT',
                        'ClientSubnets': [
                            'string',
                        ],
                        'InstanceType': 'string',
                        'SecurityGroups': [
                            'string',
                        ],
                        'StorageInfo': {
                            'EbsStorageInfo': {
                                'VolumeSize': 123
                            }
                        }
                    },
                    'ClientAuthentication': {
                        'Sasl': {
                            'Scram': {
                                'Enabled': True|False
                            },
                            'Iam': {
                                'Enabled': True|False
                            }
                        },
                        'Tls': {
                            'CertificateAuthorityArnList': [
                                'string',
                            ]
                        }
                    },
                    'ClusterArn': 'string',
                    'ClusterName': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'CurrentBrokerSoftwareInfo': {
                        'ConfigurationArn': 'string',
                        'ConfigurationRevision': 123,
                        'KafkaVersion': 'string'
                    },
                    'CurrentVersion': 'string',
                    'EncryptionInfo': {
                        'EncryptionAtRest': {
                            'DataVolumeKMSKeyId': 'string'
                        },
                        'EncryptionInTransit': {
                            'ClientBroker': 'TLS'|'TLS_PLAINTEXT'|'PLAINTEXT',
                            'InCluster': True|False
                        }
                    },
                    'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                    'OpenMonitoring': {
                        'Prometheus': {
                            'JmxExporter': {
                                'EnabledInBroker': True|False
                            },
                            'NodeExporter': {
                                'EnabledInBroker': True|False
                            }
                        }
                    },
                    'LoggingInfo': {
                        'BrokerLogs': {
                            'CloudWatchLogs': {
                                'Enabled': True|False,
                                'LogGroup': 'string'
                            },
                            'Firehose': {
                                'DeliveryStream': 'string',
                                'Enabled': True|False
                            },
                            'S3': {
                                'Bucket': 'string',
                                'Enabled': True|False,
                                'Prefix': 'string'
                            }
                        }
                    },
                    'NumberOfBrokerNodes': 123,
                    'State': 'ACTIVE'|'CREATING'|'DELETING'|'FAILED'|'HEALING'|'MAINTENANCE'|'REBOOTING_BROKER'|'UPDATING',
                    'StateInfo': {
                        'Code': 'string',
                        'Message': 'string'
                    },
                    'Tags': {
                        'string': 'string'
                    },
                    'ZookeeperConnectString': 'string',
                    'ZookeeperConnectStringTls': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterInfoList** *(list) --*  

          Information on each of the MSK clusters in the response.

           
          

          - *(dict) --*  

            Returns information about a cluster.

             
            

            - **ActiveOperationArn** *(string) --*  

              Arn of active cluster operation.

               
            

            - **BrokerNodeGroupInfo** *(dict) --*  

              Information about the broker nodes.

               
              

              - **BrokerAZDistribution** *(string) --*  

                The distribution of broker nodes across Availability Zones. This is an optional parameter. If you don't specify it, Amazon MSK gives it the value DEFAULT. You can also explicitly set this parameter to the value DEFAULT. No other values are currently allowed.

                 

                Amazon MSK distributes the broker nodes evenly across the Availability Zones that correspond to the subnets you provide when you create the cluster.

                 
              

              - **ClientSubnets** *(list) --*  

                The list of subnets to connect to in the client virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets. Client applications use elastic network interfaces to produce and consume data. Client subnets can't be in Availability Zone us-east-1e.

                 
                

                - *(string) --* 
            
              

              - **InstanceType** *(string) --*  

                The type of Amazon EC2 instances to use for Kafka brokers. The following instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge, kafka.m5.4xlarge, kafka.m5.12xlarge, and kafka.m5.24xlarge.

                 
              

              - **SecurityGroups** *(list) --*  

                The AWS security groups to associate with the elastic network interfaces in order to specify who can connect to and communicate with the Amazon MSK cluster. If you don't specify a security group, Amazon MSK uses the default security group associated with the VPC.

                 
                

                - *(string) --* 
            
              

              - **StorageInfo** *(dict) --*  

                Contains information about storage volumes attached to MSK broker nodes.

                 
                

                - **EbsStorageInfo** *(dict) --*  

                  EBS volume information.

                   
                  

                  - **VolumeSize** *(integer) --*  

                    The size in GiB of the EBS volume for the data drive on each broker node.

                     
              
            
          
            

            - **ClientAuthentication** *(dict) --*  

              Includes all client authentication information.

               
              

              - **Sasl** *(dict) --*  

                Details for ClientAuthentication using SASL.

                 
                

                - **Scram** *(dict) --*  

                  Details for SASL/SCRAM client authentication.

                   
                  

                  - **Enabled** *(boolean) --*  

                    SASL/SCRAM authentication is enabled or not.

                     
              
                

                - **Iam** *(dict) --*  

                  Indicates whether IAM access control is enabled.

                   
                  

                  - **Enabled** *(boolean) --*  

                    Indicates whether IAM access control is enabled.

                     
              
            
              

              - **Tls** *(dict) --*  

                Details for ClientAuthentication using TLS.

                 
                

                - **CertificateAuthorityArnList** *(list) --*  

                  List of ACM Certificate Authority ARNs.

                   
                  

                  - *(string) --* 
              
            
          
            

            - **ClusterArn** *(string) --*  

              The Amazon Resource Name (ARN) that uniquely identifies the cluster.

               
            

            - **ClusterName** *(string) --*  

              The name of the cluster.

               
            

            - **CreationTime** *(datetime) --*  

              The time when the cluster was created.

               
            

            - **CurrentBrokerSoftwareInfo** *(dict) --*  

              Information about the version of software currently deployed on the Kafka brokers in the cluster.

               
              

              - **ConfigurationArn** *(string) --*  

                The Amazon Resource Name (ARN) of the configuration used for the cluster. This field isn't visible in this preview release.

                 
              

              - **ConfigurationRevision** *(integer) --*  

                The revision of the configuration to use. This field isn't visible in this preview release.

                 
              

              - **KafkaVersion** *(string) --*  

                The version of Apache Kafka.

                 
          
            

            - **CurrentVersion** *(string) --*  

              The current version of the MSK cluster.

               
            

            - **EncryptionInfo** *(dict) --*  

              Includes all encryption-related information.

               
              

              - **EncryptionAtRest** *(dict) --*  

                The data-volume encryption details.

                 
                

                - **DataVolumeKMSKeyId** *(string) --*  

                  The ARN of the AWS KMS key for encrypting data at rest. If you don't specify a KMS key, MSK creates one for you and uses it.

                   
            
              

              - **EncryptionInTransit** *(dict) --*  

                The details for encryption in transit.

                 
                

                - **ClientBroker** *(string) --*  

                  Indicates the encryption setting for data in transit between clients and brokers. The following are the possible values.

                   

                  TLS means that client-broker communication is enabled with TLS only.

                   

                  TLS_PLAINTEXT means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data.

                   

                  PLAINTEXT means that client-broker communication is enabled in plaintext only.

                   

                  The default value is TLS_PLAINTEXT.

                   
                

                - **InCluster** *(boolean) --*  

                  When set to true, it indicates that data communication among the broker nodes of the cluster is encrypted. When set to false, the communication happens in plaintext.

                   

                  The default value is true.

                   
            
          
            

            - **EnhancedMonitoring** *(string) --*  

              Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see `Monitoring <https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html>`__ .

               
            

            - **OpenMonitoring** *(dict) --*  

              Settings for open monitoring using Prometheus.

               
              

              - **Prometheus** *(dict) --*  

                Prometheus settings.

                 
                

                - **JmxExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the JMX Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
              
                

                - **NodeExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the Node Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
              
            
          
            

            - **LoggingInfo** *(dict) --* 
              

              - **BrokerLogs** *(dict) --* 
                

                - **CloudWatchLogs** *(dict) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **LogGroup** *(string) --* 
              
                

                - **Firehose** *(dict) --* 
                  

                  - **DeliveryStream** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
              
                

                - **S3** *(dict) --* 
                  

                  - **Bucket** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **Prefix** *(string) --* 
              
            
          
            

            - **NumberOfBrokerNodes** *(integer) --*  

              The number of broker nodes in the cluster.

               
            

            - **State** *(string) --*  

              The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.

               
            

            - **StateInfo** *(dict) --* 
              

              - **Code** *(string) --* 
              

              - **Message** *(string) --* 
          
            

            - **Tags** *(dict) --*  

              Tags attached to the cluster.

               
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **ZookeeperConnectString** *(string) --*  

              The connection string to use to connect to the Apache ZooKeeper cluster.

               
            

            - **ZookeeperConnectStringTls** *(string) --*  

              The connection string to use to connect to zookeeper cluster on Tls port.

               
        
      
        

        - **NextToken** *(string) --*  

          The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: list_configuration_revisions(**kwargs)

     

    Returns a list of all the MSK configurations in this Region.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListConfigurationRevisions>`_    


    **Request Syntax** 
    ::

      response = client.list_configuration_revisions(
          Arn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.

       

    
    :type MaxResults: integer
    :param MaxResults:  

      The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.

       

    
    :type NextToken: string
    :param NextToken:  

      The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Revisions': [
                {
                    'CreationTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'Revision': 123
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **NextToken** *(string) --*  

          Paginated results marker.

           
        

        - **Revisions** *(list) --*  

          List of ConfigurationRevision objects.

           
          

          - *(dict) --*  

            Describes a configuration revision.

             
            

            - **CreationTime** *(datetime) --*  

              The time when the configuration revision was created.

               
            

            - **Description** *(string) --*  

              The description of the configuration revision.

               
            

            - **Revision** *(integer) --*  

              The revision number.

               
        
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: list_configurations(**kwargs)

     

    Returns a list of all the MSK configurations in this Region.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListConfigurations>`_    


    **Request Syntax** 
    ::

      response = client.list_configurations(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults:  

      The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.

       

    
    :type NextToken: string
    :param NextToken:  

      The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Configurations': [
                {
                    'Arn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'KafkaVersions': [
                        'string',
                    ],
                    'LatestRevision': {
                        'CreationTime': datetime(2015, 1, 1),
                        'Description': 'string',
                        'Revision': 123
                    },
                    'Name': 'string',
                    'State': 'ACTIVE'|'DELETING'|'DELETE_FAILED'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **Configurations** *(list) --*  

          An array of MSK configurations.

           
          

          - *(dict) --*  

            Represents an MSK Configuration.

             
            

            - **Arn** *(string) --*  

              The Amazon Resource Name (ARN) of the configuration.

               
            

            - **CreationTime** *(datetime) --*  

              The time when the configuration was created.

               
            

            - **Description** *(string) --*  

              The description of the configuration.

               
            

            - **KafkaVersions** *(list) --*  

              An array of the versions of Apache Kafka with which you can use this MSK configuration. You can use this configuration for an MSK cluster only if the Apache Kafka version specified for the cluster appears in this array.

               
              

              - *(string) --* 
          
            

            - **LatestRevision** *(dict) --*  

              Latest revision of the configuration.

               
              

              - **CreationTime** *(datetime) --*  

                The time when the configuration revision was created.

                 
              

              - **Description** *(string) --*  

                The description of the configuration revision.

                 
              

              - **Revision** *(integer) --*  

                The revision number.

                 
          
            

            - **Name** *(string) --*  

              The name of the configuration.

               
            

            - **State** *(string) --*  

              The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. 

               
        
      
        

        - **NextToken** *(string) --*  

          The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response. To get another batch of configurations, provide this token in your next request.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: list_kafka_versions(**kwargs)

     

    Returns a list of Kafka versions.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListKafkaVersions>`_    


    **Request Syntax** 
    ::

      response = client.list_kafka_versions(
          MaxResults=123,
          NextToken='string'
      )
    :type MaxResults: integer
    :param MaxResults:  

      The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.

      

    
    :type NextToken: string
    :param NextToken:  

      The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'KafkaVersions': [
                {
                    'Version': 'string',
                    'Status': 'ACTIVE'|'DEPRECATED'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **KafkaVersions** *(list) --* 
          

          - *(dict) --* 
            

            - **Version** *(string) --* 
            

            - **Status** *(string) --* 
        
      
        

        - **NextToken** *(string) --* 
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: list_nodes(**kwargs)

     

    Returns a list of the broker nodes in the cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListNodes>`_    


    **Request Syntax** 
    ::

      response = client.list_nodes(
          ClusterArn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type MaxResults: integer
    :param MaxResults:  

      The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.

       

    
    :type NextToken: string
    :param NextToken:  

      The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'NodeInfoList': [
                {
                    'AddedToClusterTime': 'string',
                    'BrokerNodeInfo': {
                        'AttachedENIId': 'string',
                        'BrokerId': 123.0,
                        'ClientSubnet': 'string',
                        'ClientVpcIpAddress': 'string',
                        'CurrentBrokerSoftwareInfo': {
                            'ConfigurationArn': 'string',
                            'ConfigurationRevision': 123,
                            'KafkaVersion': 'string'
                        },
                        'Endpoints': [
                            'string',
                        ]
                    },
                    'InstanceType': 'string',
                    'NodeARN': 'string',
                    'NodeType': 'BROKER',
                    'ZookeeperNodeInfo': {
                        'AttachedENIId': 'string',
                        'ClientVpcIpAddress': 'string',
                        'Endpoints': [
                            'string',
                        ],
                        'ZookeeperId': 123.0,
                        'ZookeeperVersion': 'string'
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **NextToken** *(string) --*  

          The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response. To get another batch of nodes, provide this token in your next request.

           
        

        - **NodeInfoList** *(list) --*  

          List containing a NodeInfo object.

           
          

          - *(dict) --*  

            The node information object.

             
            

            - **AddedToClusterTime** *(string) --*  

              The start time.

               
            

            - **BrokerNodeInfo** *(dict) --*  

              The broker node info.

               
              

              - **AttachedENIId** *(string) --*  

                The attached elastic network interface of the broker.

                 
              

              - **BrokerId** *(float) --*  

                The ID of the broker.

                 
              

              - **ClientSubnet** *(string) --*  

                The client subnet to which this broker node belongs.

                 
              

              - **ClientVpcIpAddress** *(string) --*  

                The virtual private cloud (VPC) of the client.

                 
              

              - **CurrentBrokerSoftwareInfo** *(dict) --*  

                Information about the version of software currently deployed on the Kafka brokers in the cluster.

                 
                

                - **ConfigurationArn** *(string) --*  

                  The Amazon Resource Name (ARN) of the configuration used for the cluster. This field isn't visible in this preview release.

                   
                

                - **ConfigurationRevision** *(integer) --*  

                  The revision of the configuration to use. This field isn't visible in this preview release.

                   
                

                - **KafkaVersion** *(string) --*  

                  The version of Apache Kafka.

                   
            
              

              - **Endpoints** *(list) --*  

                Endpoints for accessing the broker.

                 
                

                - *(string) --* 
            
          
            

            - **InstanceType** *(string) --*  

              The instance type.

               
            

            - **NodeARN** *(string) --*  

              The Amazon Resource Name (ARN) of the node.

               
            

            - **NodeType** *(string) --*  

              The node type.

               
            

            - **ZookeeperNodeInfo** *(dict) --*  

              The ZookeeperNodeInfo.

               
              

              - **AttachedENIId** *(string) --*  

                The attached elastic network interface of the broker.

                 
              

              - **ClientVpcIpAddress** *(string) --*  

                The virtual private cloud (VPC) IP address of the client.

                 
              

              - **Endpoints** *(list) --*  

                Endpoints for accessing the ZooKeeper.

                 
                

                - *(string) --* 
            
              

              - **ZookeeperId** *(float) --*  

                The role-specific ID for Zookeeper.

                 
              

              - **ZookeeperVersion** *(string) --*  

                The version of Zookeeper.

                 
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: list_scram_secrets(**kwargs)

     

    Returns a list of the Scram Secrets associated with an Amazon MSK cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListScramSecrets>`_    


    **Request Syntax** 
    ::

      response = client.list_scram_secrets(
          ClusterArn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The arn of the cluster.

       

    
    :type MaxResults: integer
    :param MaxResults:  

      The maxResults of the query.

       

    
    :type NextToken: string
    :param NextToken:  

      The nextToken of the query.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'SecretArnList': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **NextToken** *(string) --*  

          Paginated results marker.

           
        

        - **SecretArnList** *(list) --*  

          The list of scram secrets associated with the cluster.

           
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

     

    Returns a list of the tags associated with the specified resource.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --*  

        Success response.

         
        

        - **Tags** *(dict) --*  

          The key-value pair for the resource tag.

           
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: reboot_broker(**kwargs)

    Reboots brokers.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/RebootBroker>`_    


    **Request Syntax** 
    ::

      response = client.reboot_broker(
          BrokerIds=[
              'string',
          ],
          ClusterArn='string'
      )
    :type BrokerIds: list
    :param BrokerIds: **[REQUIRED]**  

      The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.

       

    
      - *(string) --* 

      
  
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) of the cluster to be updated.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterOperationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterOperationArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster operation.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: tag_resource(**kwargs)

     

    Adds tags to the specified MSK resource.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceArn='string',
          Tags={
              'string': 'string'
          }
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.

       

    
    :type Tags: dict
    :param Tags: **[REQUIRED]**  

      The key-value pair for the resource tag.

       

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: untag_resource(**kwargs)

     

    Removes the tags associated with the keys that are provided in the query.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceArn='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.

       

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]**  

      Tag keys must be unique for a given cluster. In addition, the following restrictions apply:

       

       
      * Each tag key must be unique. If you add a tag with a key that's already in use, your new tag overwrites the existing key-value pair.  
       
      * You can't start a tag key with aws: because this prefix is reserved for use by AWS. AWS creates tags that begin with this prefix on your behalf, but you can't edit or delete them. 
       
      * Tag keys must be between 1 and 128 Unicode characters in length. 
       
      * Tag keys must consist of the following characters: Unicode letters, digits, white space, and the following special characters: _ . / = + - @. 
       

       

    
      - *(string) --* 

      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    

  .. py:method:: update_broker_count(**kwargs)

     

    Updates the number of broker nodes in the cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UpdateBrokerCount>`_    


    **Request Syntax** 
    ::

      response = client.update_broker_count(
          ClusterArn='string',
          CurrentVersion='string',
          TargetNumberOfBrokerNodes=123
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type CurrentVersion: string
    :param CurrentVersion: **[REQUIRED]**  

      The version of cluster to update from. A successful operation will then generate a new version.

       

    
    :type TargetNumberOfBrokerNodes: integer
    :param TargetNumberOfBrokerNodes: **[REQUIRED]**  

      The number of broker nodes that you want the cluster to have after this operation completes successfully.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterOperationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterOperationArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster operation.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: update_broker_storage(**kwargs)

     

    Updates the EBS storage associated with MSK brokers.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UpdateBrokerStorage>`_    


    **Request Syntax** 
    ::

      response = client.update_broker_storage(
          ClusterArn='string',
          CurrentVersion='string',
          TargetBrokerEBSVolumeInfo=[
              {
                  'KafkaBrokerNodeId': 'string',
                  'VolumeSizeGB': 123
              },
          ]
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type CurrentVersion: string
    :param CurrentVersion: **[REQUIRED]**  

      The version of cluster to update from. A successful operation will then generate a new version.

       

    
    :type TargetBrokerEBSVolumeInfo: list
    :param TargetBrokerEBSVolumeInfo: **[REQUIRED]**  

      Describes the target volume size and the ID of the broker to apply the update to.

       

    
      - *(dict) --*  

        Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.

         

      
        - **KafkaBrokerNodeId** *(string) --* **[REQUIRED]**  

          The ID of the broker to update.

           

        
        - **VolumeSizeGB** *(integer) --* **[REQUIRED]**  

          Size of the EBS volume to update.

           

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterOperationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterOperationArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster operation.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

  .. py:method:: update_broker_type(**kwargs)

     

    Updates EC2 instance type.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UpdateBrokerType>`_    


    **Request Syntax** 
    ::

      response = client.update_broker_type(
          ClusterArn='string',
          CurrentVersion='string',
          TargetInstanceType='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type CurrentVersion: string
    :param CurrentVersion: **[REQUIRED]**  

      The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.

       

    
    :type TargetInstanceType: string
    :param TargetInstanceType: **[REQUIRED]**  

      The Amazon MSK broker type that you want all of the brokers in this cluster to be.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterOperationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterOperationArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster operation.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: update_cluster_configuration(**kwargs)

     

    Updates the cluster with the configuration that is specified in the request body.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UpdateClusterConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.update_cluster_configuration(
          ClusterArn='string',
          ConfigurationInfo={
              'Arn': 'string',
              'Revision': 123
          },
          CurrentVersion='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type ConfigurationInfo: dict
    :param ConfigurationInfo: **[REQUIRED]**  

      Represents the configuration that you want MSK to use for the brokers in a cluster.

       

    
      - **Arn** *(string) --* **[REQUIRED]**  

        ARN of the configuration to use.

         

      
      - **Revision** *(integer) --* **[REQUIRED]**  

        The revision of the configuration to use.

         

      
    
    :type CurrentVersion: string
    :param CurrentVersion: **[REQUIRED]**  

      The version of the cluster that needs to be updated.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterOperationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterOperationArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster operation.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: update_cluster_kafka_version(**kwargs)

     

    Updates the Apache Kafka version for the cluster.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UpdateClusterKafkaVersion>`_    


    **Request Syntax** 
    ::

      response = client.update_cluster_kafka_version(
          ClusterArn='string',
          ConfigurationInfo={
              'Arn': 'string',
              'Revision': 123
          },
          CurrentVersion='string',
          TargetKafkaVersion='string'
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) of the cluster to be updated.

       

    
    :type ConfigurationInfo: dict
    :param ConfigurationInfo:  

      The custom configuration that should be applied on the new version of cluster.

       

    
      - **Arn** *(string) --* **[REQUIRED]**  

        ARN of the configuration to use.

         

      
      - **Revision** *(integer) --* **[REQUIRED]**  

        The revision of the configuration to use.

         

      
    
    :type CurrentVersion: string
    :param CurrentVersion: **[REQUIRED]**  

      Current cluster version.

       

    
    :type TargetKafkaVersion: string
    :param TargetKafkaVersion: **[REQUIRED]**  

      Target Kafka version.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterOperationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterOperationArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster operation.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.TooManyRequestsException`

    

  .. py:method:: update_configuration(**kwargs)

     

    Updates an MSK configuration.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UpdateConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.update_configuration(
          Arn='string',
          Description='string',
          ServerProperties=b'bytes'
      )
    :type Arn: string
    :param Arn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) of the configuration.

       

    
    :type Description: string
    :param Description:  

      The description of the configuration revision.

       

    
    :type ServerProperties: bytes
    :param ServerProperties: **[REQUIRED]**  

      Contents of the server.propertiesfile. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of server.propertiescan be in plaintext.

       

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'LatestRevision': {
                'CreationTime': datetime(2015, 1, 1),
                'Description': 'string',
                'Revision': 123
            }
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **Arn** *(string) --*  

          The Amazon Resource Name (ARN) of the configuration.

           
        

        - **LatestRevision** *(dict) --*  

          Latest revision of the configuration.

           
          

          - **CreationTime** *(datetime) --*  

            The time when the configuration revision was created.

             
          

          - **Description** *(string) --*  

            The description of the configuration revision.

             
          

          - **Revision** *(integer) --*  

            The revision number.

             
      
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    
    *     :py:class:`Kafka.Client.exceptions.NotFoundException`

    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: update_monitoring(**kwargs)

     

    Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.

     

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/UpdateMonitoring>`_    


    **Request Syntax** 
    ::

      response = client.update_monitoring(
          ClusterArn='string',
          CurrentVersion='string',
          EnhancedMonitoring='DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
          OpenMonitoring={
              'Prometheus': {
                  'JmxExporter': {
                      'EnabledInBroker': True|False
                  },
                  'NodeExporter': {
                      'EnabledInBroker': True|False
                  }
              }
          },
          LoggingInfo={
              'BrokerLogs': {
                  'CloudWatchLogs': {
                      'Enabled': True|False,
                      'LogGroup': 'string'
                  },
                  'Firehose': {
                      'DeliveryStream': 'string',
                      'Enabled': True|False
                  },
                  'S3': {
                      'Bucket': 'string',
                      'Enabled': True|False,
                      'Prefix': 'string'
                  }
              }
          }
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type CurrentVersion: string
    :param CurrentVersion: **[REQUIRED]**  

      The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.

       

    
    :type EnhancedMonitoring: string
    :param EnhancedMonitoring:  

      Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.

       

    
    :type OpenMonitoring: dict
    :param OpenMonitoring:  

      The settings for open monitoring.

       

    
      - **Prometheus** *(dict) --* **[REQUIRED]**  

        Prometheus settings.

         

      
        - **JmxExporter** *(dict) --*  

          Indicates whether you want to enable or disable the JMX Exporter.

           

        
          - **EnabledInBroker** *(boolean) --* **[REQUIRED]**  

            Indicates whether you want to enable or disable the JMX Exporter.

             

          
        
        - **NodeExporter** *(dict) --*  

          Indicates whether you want to enable or disable the Node Exporter.

           

        
          - **EnabledInBroker** *(boolean) --* **[REQUIRED]**  

            Indicates whether you want to enable or disable the Node Exporter.

             

          
        
      
    
    :type LoggingInfo: dict
    :param LoggingInfo: 

    
      - **BrokerLogs** *(dict) --* **[REQUIRED]** 

      
        - **CloudWatchLogs** *(dict) --* 

        
          - **Enabled** *(boolean) --* **[REQUIRED]** 

          
          - **LogGroup** *(string) --* 

          
        
        - **Firehose** *(dict) --* 

        
          - **DeliveryStream** *(string) --* 

          
          - **Enabled** *(boolean) --* **[REQUIRED]** 

          
        
        - **S3** *(dict) --* 

        
          - **Bucket** *(string) --* 

          
          - **Enabled** *(boolean) --* **[REQUIRED]** 

          
          - **Prefix** *(string) --* 

          
        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterArn': 'string',
            'ClusterOperationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --*  

        HTTP Status Code 200: OK.

         
        

        - **ClusterArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster.

           
        

        - **ClusterOperationArn** *(string) --*  

          The Amazon Resource Name (ARN) of the cluster operation.

           
    
    **Exceptions** 
    
    *     :py:class:`Kafka.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`Kafka.Client.exceptions.BadRequestException`

    
    *     :py:class:`Kafka.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`Kafka.Client.exceptions.InternalServerErrorException`

    
    *     :py:class:`Kafka.Client.exceptions.ForbiddenException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`Kafka.Paginator.ListClusterOperations`


* :py:class:`Kafka.Paginator.ListClusters`


* :py:class:`Kafka.Paginator.ListConfigurationRevisions`


* :py:class:`Kafka.Paginator.ListConfigurations`


* :py:class:`Kafka.Paginator.ListKafkaVersions`


* :py:class:`Kafka.Paginator.ListNodes`


* :py:class:`Kafka.Paginator.ListScramSecrets`



.. py:class:: Kafka.Paginator.ListClusterOperations

  ::

    
    paginator = client.get_paginator('list_cluster_operations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Kafka.Client.list_cluster_operations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListClusterOperations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterOperationInfoList': [
                {
                    'ClientRequestId': 'string',
                    'ClusterArn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'EndTime': datetime(2015, 1, 1),
                    'ErrorInfo': {
                        'ErrorCode': 'string',
                        'ErrorString': 'string'
                    },
                    'OperationArn': 'string',
                    'OperationState': 'string',
                    'OperationSteps': [
                        {
                            'StepInfo': {
                                'StepStatus': 'string'
                            },
                            'StepName': 'string'
                        },
                    ],
                    'OperationType': 'string',
                    'SourceClusterInfo': {
                        'BrokerEBSVolumeInfo': [
                            {
                                'KafkaBrokerNodeId': 'string',
                                'VolumeSizeGB': 123
                            },
                        ],
                        'ConfigurationInfo': {
                            'Arn': 'string',
                            'Revision': 123
                        },
                        'NumberOfBrokerNodes': 123,
                        'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                        'OpenMonitoring': {
                            'Prometheus': {
                                'JmxExporter': {
                                    'EnabledInBroker': True|False
                                },
                                'NodeExporter': {
                                    'EnabledInBroker': True|False
                                }
                            }
                        },
                        'KafkaVersion': 'string',
                        'LoggingInfo': {
                            'BrokerLogs': {
                                'CloudWatchLogs': {
                                    'Enabled': True|False,
                                    'LogGroup': 'string'
                                },
                                'Firehose': {
                                    'DeliveryStream': 'string',
                                    'Enabled': True|False
                                },
                                'S3': {
                                    'Bucket': 'string',
                                    'Enabled': True|False,
                                    'Prefix': 'string'
                                }
                            }
                        },
                        'InstanceType': 'string'
                    },
                    'TargetClusterInfo': {
                        'BrokerEBSVolumeInfo': [
                            {
                                'KafkaBrokerNodeId': 'string',
                                'VolumeSizeGB': 123
                            },
                        ],
                        'ConfigurationInfo': {
                            'Arn': 'string',
                            'Revision': 123
                        },
                        'NumberOfBrokerNodes': 123,
                        'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                        'OpenMonitoring': {
                            'Prometheus': {
                                'JmxExporter': {
                                    'EnabledInBroker': True|False
                                },
                                'NodeExporter': {
                                    'EnabledInBroker': True|False
                                }
                            }
                        },
                        'KafkaVersion': 'string',
                        'LoggingInfo': {
                            'BrokerLogs': {
                                'CloudWatchLogs': {
                                    'Enabled': True|False,
                                    'LogGroup': 'string'
                                },
                                'Firehose': {
                                    'DeliveryStream': 'string',
                                    'Enabled': True|False
                                },
                                'S3': {
                                    'Bucket': 'string',
                                    'Enabled': True|False,
                                    'Prefix': 'string'
                                }
                            }
                        },
                        'InstanceType': 'string'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterOperationInfoList** *(list) --*  

          An array of cluster operation information objects.

           
          

          - *(dict) --*  

            Returns information about a cluster operation.

             
            

            - **ClientRequestId** *(string) --*  

              The ID of the API request that triggered this operation.

               
            

            - **ClusterArn** *(string) --*  

              ARN of the cluster.

               
            

            - **CreationTime** *(datetime) --*  

              The time that the operation was created.

               
            

            - **EndTime** *(datetime) --*  

              The time at which the operation finished.

               
            

            - **ErrorInfo** *(dict) --*  

              Describes the error if the operation fails.

               
              

              - **ErrorCode** *(string) --*  

                A number describing the error programmatically.

                 
              

              - **ErrorString** *(string) --*  

                An optional field to provide more details about the error.

                 
          
            

            - **OperationArn** *(string) --*  

              ARN of the cluster operation.

               
            

            - **OperationState** *(string) --*  

              State of the cluster operation.

               
            

            - **OperationSteps** *(list) --*  

              Steps completed during the operation.

               
              

              - *(dict) --*  

                Step taken during a cluster operation.

                 
                

                - **StepInfo** *(dict) --*  

                  Information about the step and its status.

                   
                  

                  - **StepStatus** *(string) --*  

                    The steps current status.

                     
              
                

                - **StepName** *(string) --*  

                  The name of the step.

                   
            
          
            

            - **OperationType** *(string) --*  

              Type of the cluster operation.

               
            

            - **SourceClusterInfo** *(dict) --*  

              Information about cluster attributes before a cluster is updated.

               
              

              - **BrokerEBSVolumeInfo** *(list) --*  

                Specifies the size of the EBS volume and the ID of the associated broker.

                 
                

                - *(dict) --*  

                  Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.

                   
                  

                  - **KafkaBrokerNodeId** *(string) --*  

                    The ID of the broker to update.

                     
                  

                  - **VolumeSizeGB** *(integer) --*  

                    Size of the EBS volume to update.

                     
              
            
              

              - **ConfigurationInfo** *(dict) --*  

                Information about the changes in the configuration of the brokers.

                 
                

                - **Arn** *(string) --*  

                  ARN of the configuration to use.

                   
                

                - **Revision** *(integer) --*  

                  The revision of the configuration to use.

                   
            
              

              - **NumberOfBrokerNodes** *(integer) --*  

                The number of broker nodes in the cluster.

                 
              

              - **EnhancedMonitoring** *(string) --*  

                Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.

                 
              

              - **OpenMonitoring** *(dict) --*  

                The settings for open monitoring.

                 
                

                - **Prometheus** *(dict) --*  

                  Prometheus settings.

                   
                  

                  - **JmxExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the JMX Exporter.

                       
                
                  

                  - **NodeExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the Node Exporter.

                       
                
              
            
              

              - **KafkaVersion** *(string) --*  

                The Kafka version.

                 
              

              - **LoggingInfo** *(dict) --* 
                

                - **BrokerLogs** *(dict) --* 
                  

                  - **CloudWatchLogs** *(dict) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **LogGroup** *(string) --* 
                
                  

                  - **Firehose** *(dict) --* 
                    

                    - **DeliveryStream** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                
                  

                  - **S3** *(dict) --* 
                    

                    - **Bucket** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **Prefix** *(string) --* 
                
              
            
              

              - **InstanceType** *(string) --*  

                Information about the Amazon MSK broker type.

                 
          
            

            - **TargetClusterInfo** *(dict) --*  

              Information about cluster attributes after a cluster is updated.

               
              

              - **BrokerEBSVolumeInfo** *(list) --*  

                Specifies the size of the EBS volume and the ID of the associated broker.

                 
                

                - *(dict) --*  

                  Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.

                   
                  

                  - **KafkaBrokerNodeId** *(string) --*  

                    The ID of the broker to update.

                     
                  

                  - **VolumeSizeGB** *(integer) --*  

                    Size of the EBS volume to update.

                     
              
            
              

              - **ConfigurationInfo** *(dict) --*  

                Information about the changes in the configuration of the brokers.

                 
                

                - **Arn** *(string) --*  

                  ARN of the configuration to use.

                   
                

                - **Revision** *(integer) --*  

                  The revision of the configuration to use.

                   
            
              

              - **NumberOfBrokerNodes** *(integer) --*  

                The number of broker nodes in the cluster.

                 
              

              - **EnhancedMonitoring** *(string) --*  

                Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.

                 
              

              - **OpenMonitoring** *(dict) --*  

                The settings for open monitoring.

                 
                

                - **Prometheus** *(dict) --*  

                  Prometheus settings.

                   
                  

                  - **JmxExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the JMX Exporter.

                       
                
                  

                  - **NodeExporter** *(dict) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
                    

                    - **EnabledInBroker** *(boolean) --*  

                      Indicates whether you want to enable or disable the Node Exporter.

                       
                
              
            
              

              - **KafkaVersion** *(string) --*  

                The Kafka version.

                 
              

              - **LoggingInfo** *(dict) --* 
                

                - **BrokerLogs** *(dict) --* 
                  

                  - **CloudWatchLogs** *(dict) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **LogGroup** *(string) --* 
                
                  

                  - **Firehose** *(dict) --* 
                    

                    - **DeliveryStream** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                
                  

                  - **S3** *(dict) --* 
                    

                    - **Bucket** *(string) --* 
                    

                    - **Enabled** *(boolean) --* 
                    

                    - **Prefix** *(string) --* 
                
              
            
              

              - **InstanceType** *(string) --*  

                Information about the Amazon MSK broker type.

                 
          
        
      
    

.. py:class:: Kafka.Paginator.ListClusters

  ::

    
    paginator = client.get_paginator('list_clusters')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Kafka.Client.list_clusters`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListClusters>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterNameFilter='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterNameFilter: string
    :param ClusterNameFilter:  

      Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.

       

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterInfoList': [
                {
                    'ActiveOperationArn': 'string',
                    'BrokerNodeGroupInfo': {
                        'BrokerAZDistribution': 'DEFAULT',
                        'ClientSubnets': [
                            'string',
                        ],
                        'InstanceType': 'string',
                        'SecurityGroups': [
                            'string',
                        ],
                        'StorageInfo': {
                            'EbsStorageInfo': {
                                'VolumeSize': 123
                            }
                        }
                    },
                    'ClientAuthentication': {
                        'Sasl': {
                            'Scram': {
                                'Enabled': True|False
                            },
                            'Iam': {
                                'Enabled': True|False
                            }
                        },
                        'Tls': {
                            'CertificateAuthorityArnList': [
                                'string',
                            ]
                        }
                    },
                    'ClusterArn': 'string',
                    'ClusterName': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'CurrentBrokerSoftwareInfo': {
                        'ConfigurationArn': 'string',
                        'ConfigurationRevision': 123,
                        'KafkaVersion': 'string'
                    },
                    'CurrentVersion': 'string',
                    'EncryptionInfo': {
                        'EncryptionAtRest': {
                            'DataVolumeKMSKeyId': 'string'
                        },
                        'EncryptionInTransit': {
                            'ClientBroker': 'TLS'|'TLS_PLAINTEXT'|'PLAINTEXT',
                            'InCluster': True|False
                        }
                    },
                    'EnhancedMonitoring': 'DEFAULT'|'PER_BROKER'|'PER_TOPIC_PER_BROKER'|'PER_TOPIC_PER_PARTITION',
                    'OpenMonitoring': {
                        'Prometheus': {
                            'JmxExporter': {
                                'EnabledInBroker': True|False
                            },
                            'NodeExporter': {
                                'EnabledInBroker': True|False
                            }
                        }
                    },
                    'LoggingInfo': {
                        'BrokerLogs': {
                            'CloudWatchLogs': {
                                'Enabled': True|False,
                                'LogGroup': 'string'
                            },
                            'Firehose': {
                                'DeliveryStream': 'string',
                                'Enabled': True|False
                            },
                            'S3': {
                                'Bucket': 'string',
                                'Enabled': True|False,
                                'Prefix': 'string'
                            }
                        }
                    },
                    'NumberOfBrokerNodes': 123,
                    'State': 'ACTIVE'|'CREATING'|'DELETING'|'FAILED'|'HEALING'|'MAINTENANCE'|'REBOOTING_BROKER'|'UPDATING',
                    'StateInfo': {
                        'Code': 'string',
                        'Message': 'string'
                    },
                    'Tags': {
                        'string': 'string'
                    },
                    'ZookeeperConnectString': 'string',
                    'ZookeeperConnectStringTls': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **ClusterInfoList** *(list) --*  

          Information on each of the MSK clusters in the response.

           
          

          - *(dict) --*  

            Returns information about a cluster.

             
            

            - **ActiveOperationArn** *(string) --*  

              Arn of active cluster operation.

               
            

            - **BrokerNodeGroupInfo** *(dict) --*  

              Information about the broker nodes.

               
              

              - **BrokerAZDistribution** *(string) --*  

                The distribution of broker nodes across Availability Zones. This is an optional parameter. If you don't specify it, Amazon MSK gives it the value DEFAULT. You can also explicitly set this parameter to the value DEFAULT. No other values are currently allowed.

                 

                Amazon MSK distributes the broker nodes evenly across the Availability Zones that correspond to the subnets you provide when you create the cluster.

                 
              

              - **ClientSubnets** *(list) --*  

                The list of subnets to connect to in the client virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets. Client applications use elastic network interfaces to produce and consume data. Client subnets can't be in Availability Zone us-east-1e.

                 
                

                - *(string) --* 
            
              

              - **InstanceType** *(string) --*  

                The type of Amazon EC2 instances to use for Kafka brokers. The following instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge, kafka.m5.4xlarge, kafka.m5.12xlarge, and kafka.m5.24xlarge.

                 
              

              - **SecurityGroups** *(list) --*  

                The AWS security groups to associate with the elastic network interfaces in order to specify who can connect to and communicate with the Amazon MSK cluster. If you don't specify a security group, Amazon MSK uses the default security group associated with the VPC.

                 
                

                - *(string) --* 
            
              

              - **StorageInfo** *(dict) --*  

                Contains information about storage volumes attached to MSK broker nodes.

                 
                

                - **EbsStorageInfo** *(dict) --*  

                  EBS volume information.

                   
                  

                  - **VolumeSize** *(integer) --*  

                    The size in GiB of the EBS volume for the data drive on each broker node.

                     
              
            
          
            

            - **ClientAuthentication** *(dict) --*  

              Includes all client authentication information.

               
              

              - **Sasl** *(dict) --*  

                Details for ClientAuthentication using SASL.

                 
                

                - **Scram** *(dict) --*  

                  Details for SASL/SCRAM client authentication.

                   
                  

                  - **Enabled** *(boolean) --*  

                    SASL/SCRAM authentication is enabled or not.

                     
              
                

                - **Iam** *(dict) --*  

                  Indicates whether IAM access control is enabled.

                   
                  

                  - **Enabled** *(boolean) --*  

                    Indicates whether IAM access control is enabled.

                     
              
            
              

              - **Tls** *(dict) --*  

                Details for ClientAuthentication using TLS.

                 
                

                - **CertificateAuthorityArnList** *(list) --*  

                  List of ACM Certificate Authority ARNs.

                   
                  

                  - *(string) --* 
              
            
          
            

            - **ClusterArn** *(string) --*  

              The Amazon Resource Name (ARN) that uniquely identifies the cluster.

               
            

            - **ClusterName** *(string) --*  

              The name of the cluster.

               
            

            - **CreationTime** *(datetime) --*  

              The time when the cluster was created.

               
            

            - **CurrentBrokerSoftwareInfo** *(dict) --*  

              Information about the version of software currently deployed on the Kafka brokers in the cluster.

               
              

              - **ConfigurationArn** *(string) --*  

                The Amazon Resource Name (ARN) of the configuration used for the cluster. This field isn't visible in this preview release.

                 
              

              - **ConfigurationRevision** *(integer) --*  

                The revision of the configuration to use. This field isn't visible in this preview release.

                 
              

              - **KafkaVersion** *(string) --*  

                The version of Apache Kafka.

                 
          
            

            - **CurrentVersion** *(string) --*  

              The current version of the MSK cluster.

               
            

            - **EncryptionInfo** *(dict) --*  

              Includes all encryption-related information.

               
              

              - **EncryptionAtRest** *(dict) --*  

                The data-volume encryption details.

                 
                

                - **DataVolumeKMSKeyId** *(string) --*  

                  The ARN of the AWS KMS key for encrypting data at rest. If you don't specify a KMS key, MSK creates one for you and uses it.

                   
            
              

              - **EncryptionInTransit** *(dict) --*  

                The details for encryption in transit.

                 
                

                - **ClientBroker** *(string) --*  

                  Indicates the encryption setting for data in transit between clients and brokers. The following are the possible values.

                   

                  TLS means that client-broker communication is enabled with TLS only.

                   

                  TLS_PLAINTEXT means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data.

                   

                  PLAINTEXT means that client-broker communication is enabled in plaintext only.

                   

                  The default value is TLS_PLAINTEXT.

                   
                

                - **InCluster** *(boolean) --*  

                  When set to true, it indicates that data communication among the broker nodes of the cluster is encrypted. When set to false, the communication happens in plaintext.

                   

                  The default value is true.

                   
            
          
            

            - **EnhancedMonitoring** *(string) --*  

              Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see `Monitoring <https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html>`__ .

               
            

            - **OpenMonitoring** *(dict) --*  

              Settings for open monitoring using Prometheus.

               
              

              - **Prometheus** *(dict) --*  

                Prometheus settings.

                 
                

                - **JmxExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the JMX Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the JMX Exporter.

                     
              
                

                - **NodeExporter** *(dict) --*  

                  Indicates whether you want to enable or disable the Node Exporter.

                   
                  

                  - **EnabledInBroker** *(boolean) --*  

                    Indicates whether you want to enable or disable the Node Exporter.

                     
              
            
          
            

            - **LoggingInfo** *(dict) --* 
              

              - **BrokerLogs** *(dict) --* 
                

                - **CloudWatchLogs** *(dict) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **LogGroup** *(string) --* 
              
                

                - **Firehose** *(dict) --* 
                  

                  - **DeliveryStream** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
              
                

                - **S3** *(dict) --* 
                  

                  - **Bucket** *(string) --* 
                  

                  - **Enabled** *(boolean) --* 
                  

                  - **Prefix** *(string) --* 
              
            
          
            

            - **NumberOfBrokerNodes** *(integer) --*  

              The number of broker nodes in the cluster.

               
            

            - **State** *(string) --*  

              The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.

               
            

            - **StateInfo** *(dict) --* 
              

              - **Code** *(string) --* 
              

              - **Message** *(string) --* 
          
            

            - **Tags** *(dict) --*  

              Tags attached to the cluster.

               
              

              - *(string) --* 
                

                - *(string) --* 
          
        
            

            - **ZookeeperConnectString** *(string) --*  

              The connection string to use to connect to the Apache ZooKeeper cluster.

               
            

            - **ZookeeperConnectStringTls** *(string) --*  

              The connection string to use to connect to zookeeper cluster on Tls port.

               
        
      
    

.. py:class:: Kafka.Paginator.ListConfigurationRevisions

  ::

    
    paginator = client.get_paginator('list_configuration_revisions')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Kafka.Client.list_configuration_revisions`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListConfigurationRevisions>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Arn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Arn: string
    :param Arn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.

       

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Revisions': [
                {
                    'CreationTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'Revision': 123
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **Revisions** *(list) --*  

          List of ConfigurationRevision objects.

           
          

          - *(dict) --*  

            Describes a configuration revision.

             
            

            - **CreationTime** *(datetime) --*  

              The time when the configuration revision was created.

               
            

            - **Description** *(string) --*  

              The description of the configuration revision.

               
            

            - **Revision** *(integer) --*  

              The revision number.

               
        
      
    

.. py:class:: Kafka.Paginator.ListConfigurations

  ::

    
    paginator = client.get_paginator('list_configurations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Kafka.Client.list_configurations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListConfigurations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Configurations': [
                {
                    'Arn': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'Description': 'string',
                    'KafkaVersions': [
                        'string',
                    ],
                    'LatestRevision': {
                        'CreationTime': datetime(2015, 1, 1),
                        'Description': 'string',
                        'Revision': 123
                    },
                    'Name': 'string',
                    'State': 'ACTIVE'|'DELETING'|'DELETE_FAILED'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **Configurations** *(list) --*  

          An array of MSK configurations.

           
          

          - *(dict) --*  

            Represents an MSK Configuration.

             
            

            - **Arn** *(string) --*  

              The Amazon Resource Name (ARN) of the configuration.

               
            

            - **CreationTime** *(datetime) --*  

              The time when the configuration was created.

               
            

            - **Description** *(string) --*  

              The description of the configuration.

               
            

            - **KafkaVersions** *(list) --*  

              An array of the versions of Apache Kafka with which you can use this MSK configuration. You can use this configuration for an MSK cluster only if the Apache Kafka version specified for the cluster appears in this array.

               
              

              - *(string) --* 
          
            

            - **LatestRevision** *(dict) --*  

              Latest revision of the configuration.

               
              

              - **CreationTime** *(datetime) --*  

                The time when the configuration revision was created.

                 
              

              - **Description** *(string) --*  

                The description of the configuration revision.

                 
              

              - **Revision** *(integer) --*  

                The revision number.

                 
          
            

            - **Name** *(string) --*  

              The name of the configuration.

               
            

            - **State** *(string) --*  

              The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. 

               
        
      
    

.. py:class:: Kafka.Paginator.ListKafkaVersions

  ::

    
    paginator = client.get_paginator('list_kafka_versions')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Kafka.Client.list_kafka_versions`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListKafkaVersions>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'KafkaVersions': [
                {
                    'Version': 'string',
                    'Status': 'ACTIVE'|'DEPRECATED'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **KafkaVersions** *(list) --* 
          

          - *(dict) --* 
            

            - **Version** *(string) --* 
            

            - **Status** *(string) --* 
        
      
    

.. py:class:: Kafka.Paginator.ListNodes

  ::

    
    paginator = client.get_paginator('list_nodes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Kafka.Client.list_nodes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListNodes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The Amazon Resource Name (ARN) that uniquely identifies the cluster.

       

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NodeInfoList': [
                {
                    'AddedToClusterTime': 'string',
                    'BrokerNodeInfo': {
                        'AttachedENIId': 'string',
                        'BrokerId': 123.0,
                        'ClientSubnet': 'string',
                        'ClientVpcIpAddress': 'string',
                        'CurrentBrokerSoftwareInfo': {
                            'ConfigurationArn': 'string',
                            'ConfigurationRevision': 123,
                            'KafkaVersion': 'string'
                        },
                        'Endpoints': [
                            'string',
                        ]
                    },
                    'InstanceType': 'string',
                    'NodeARN': 'string',
                    'NodeType': 'BROKER',
                    'ZookeeperNodeInfo': {
                        'AttachedENIId': 'string',
                        'ClientVpcIpAddress': 'string',
                        'Endpoints': [
                            'string',
                        ],
                        'ZookeeperId': 123.0,
                        'ZookeeperVersion': 'string'
                    }
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        Successful response.

         
        

        - **NodeInfoList** *(list) --*  

          List containing a NodeInfo object.

           
          

          - *(dict) --*  

            The node information object.

             
            

            - **AddedToClusterTime** *(string) --*  

              The start time.

               
            

            - **BrokerNodeInfo** *(dict) --*  

              The broker node info.

               
              

              - **AttachedENIId** *(string) --*  

                The attached elastic network interface of the broker.

                 
              

              - **BrokerId** *(float) --*  

                The ID of the broker.

                 
              

              - **ClientSubnet** *(string) --*  

                The client subnet to which this broker node belongs.

                 
              

              - **ClientVpcIpAddress** *(string) --*  

                The virtual private cloud (VPC) of the client.

                 
              

              - **CurrentBrokerSoftwareInfo** *(dict) --*  

                Information about the version of software currently deployed on the Kafka brokers in the cluster.

                 
                

                - **ConfigurationArn** *(string) --*  

                  The Amazon Resource Name (ARN) of the configuration used for the cluster. This field isn't visible in this preview release.

                   
                

                - **ConfigurationRevision** *(integer) --*  

                  The revision of the configuration to use. This field isn't visible in this preview release.

                   
                

                - **KafkaVersion** *(string) --*  

                  The version of Apache Kafka.

                   
            
              

              - **Endpoints** *(list) --*  

                Endpoints for accessing the broker.

                 
                

                - *(string) --* 
            
          
            

            - **InstanceType** *(string) --*  

              The instance type.

               
            

            - **NodeARN** *(string) --*  

              The Amazon Resource Name (ARN) of the node.

               
            

            - **NodeType** *(string) --*  

              The node type.

               
            

            - **ZookeeperNodeInfo** *(dict) --*  

              The ZookeeperNodeInfo.

               
              

              - **AttachedENIId** *(string) --*  

                The attached elastic network interface of the broker.

                 
              

              - **ClientVpcIpAddress** *(string) --*  

                The virtual private cloud (VPC) IP address of the client.

                 
              

              - **Endpoints** *(list) --*  

                Endpoints for accessing the ZooKeeper.

                 
                

                - *(string) --* 
            
              

              - **ZookeeperId** *(float) --*  

                The role-specific ID for Zookeeper.

                 
              

              - **ZookeeperVersion** *(string) --*  

                The version of Zookeeper.

                 
          
        
      
    

.. py:class:: Kafka.Paginator.ListScramSecrets

  ::

    
    paginator = client.get_paginator('list_scram_secrets')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Kafka.Client.list_scram_secrets`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/kafka-2018-11-14/ListScramSecrets>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterArn: string
    :param ClusterArn: **[REQUIRED]**  

      The arn of the cluster.

       

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecretArnList': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --*  

        200 response

         
        

        - **SecretArnList** *(list) --*  

          The list of scram secrets associated with the cluster.

           
          

          - *(string) --* 
      
    