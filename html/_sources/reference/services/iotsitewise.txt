

***********
IoTSiteWise
***********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: IoTSiteWise.Client

  A low-level client representing AWS IoT SiteWise
  

  Welcome to the IoT SiteWise API Reference. IoT SiteWise is an Amazon Web Services service that connects `Industrial Internet of Things (IIoT) <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ devices to the power of the Amazon Web Services Cloud. For more information, see the `IoT SiteWise User Guide <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/>`__ . For information about IoT SiteWise quotas, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

  ::

    
    import boto3
    
    client = boto3.client('iotsitewise')

  
  These are the available methods:
  
  *   :py:meth:`~IoTSiteWise.Client.associate_assets`

  
  *   :py:meth:`~IoTSiteWise.Client.batch_associate_project_assets`

  
  *   :py:meth:`~IoTSiteWise.Client.batch_disassociate_project_assets`

  
  *   :py:meth:`~IoTSiteWise.Client.batch_put_asset_property_value`

  
  *   :py:meth:`~IoTSiteWise.Client.can_paginate`

  
  *   :py:meth:`~IoTSiteWise.Client.create_access_policy`

  
  *   :py:meth:`~IoTSiteWise.Client.create_asset`

  
  *   :py:meth:`~IoTSiteWise.Client.create_asset_model`

  
  *   :py:meth:`~IoTSiteWise.Client.create_dashboard`

  
  *   :py:meth:`~IoTSiteWise.Client.create_gateway`

  
  *   :py:meth:`~IoTSiteWise.Client.create_portal`

  
  *   :py:meth:`~IoTSiteWise.Client.create_project`

  
  *   :py:meth:`~IoTSiteWise.Client.delete_access_policy`

  
  *   :py:meth:`~IoTSiteWise.Client.delete_asset`

  
  *   :py:meth:`~IoTSiteWise.Client.delete_asset_model`

  
  *   :py:meth:`~IoTSiteWise.Client.delete_dashboard`

  
  *   :py:meth:`~IoTSiteWise.Client.delete_gateway`

  
  *   :py:meth:`~IoTSiteWise.Client.delete_portal`

  
  *   :py:meth:`~IoTSiteWise.Client.delete_project`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_access_policy`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_asset`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_asset_model`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_asset_property`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_dashboard`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_default_encryption_configuration`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_gateway`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_gateway_capability_configuration`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_logging_options`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_portal`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_project`

  
  *   :py:meth:`~IoTSiteWise.Client.describe_storage_configuration`

  
  *   :py:meth:`~IoTSiteWise.Client.disassociate_assets`

  
  *   :py:meth:`~IoTSiteWise.Client.generate_presigned_url`

  
  *   :py:meth:`~IoTSiteWise.Client.get_asset_property_aggregates`

  
  *   :py:meth:`~IoTSiteWise.Client.get_asset_property_value`

  
  *   :py:meth:`~IoTSiteWise.Client.get_asset_property_value_history`

  
  *   :py:meth:`~IoTSiteWise.Client.get_interpolated_asset_property_values`

  
  *   :py:meth:`~IoTSiteWise.Client.get_paginator`

  
  *   :py:meth:`~IoTSiteWise.Client.get_waiter`

  
  *   :py:meth:`~IoTSiteWise.Client.list_access_policies`

  
  *   :py:meth:`~IoTSiteWise.Client.list_asset_models`

  
  *   :py:meth:`~IoTSiteWise.Client.list_asset_relationships`

  
  *   :py:meth:`~IoTSiteWise.Client.list_assets`

  
  *   :py:meth:`~IoTSiteWise.Client.list_associated_assets`

  
  *   :py:meth:`~IoTSiteWise.Client.list_dashboards`

  
  *   :py:meth:`~IoTSiteWise.Client.list_gateways`

  
  *   :py:meth:`~IoTSiteWise.Client.list_portals`

  
  *   :py:meth:`~IoTSiteWise.Client.list_project_assets`

  
  *   :py:meth:`~IoTSiteWise.Client.list_projects`

  
  *   :py:meth:`~IoTSiteWise.Client.list_tags_for_resource`

  
  *   :py:meth:`~IoTSiteWise.Client.put_default_encryption_configuration`

  
  *   :py:meth:`~IoTSiteWise.Client.put_logging_options`

  
  *   :py:meth:`~IoTSiteWise.Client.put_storage_configuration`

  
  *   :py:meth:`~IoTSiteWise.Client.tag_resource`

  
  *   :py:meth:`~IoTSiteWise.Client.untag_resource`

  
  *   :py:meth:`~IoTSiteWise.Client.update_access_policy`

  
  *   :py:meth:`~IoTSiteWise.Client.update_asset`

  
  *   :py:meth:`~IoTSiteWise.Client.update_asset_model`

  
  *   :py:meth:`~IoTSiteWise.Client.update_asset_property`

  
  *   :py:meth:`~IoTSiteWise.Client.update_dashboard`

  
  *   :py:meth:`~IoTSiteWise.Client.update_gateway`

  
  *   :py:meth:`~IoTSiteWise.Client.update_gateway_capability_configuration`

  
  *   :py:meth:`~IoTSiteWise.Client.update_portal`

  
  *   :py:meth:`~IoTSiteWise.Client.update_project`

  

  .. py:method:: associate_assets(**kwargs)

    

    Associates a child asset with the given parent asset through a hierarchy defined in the parent asset's model. For more information, see `Associating assets <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/add-associated-assets.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/AssociateAssets>`_    


    **Request Syntax** 
    ::

      response = client.associate_assets(
          assetId='string',
          hierarchyId='string',
          childAssetId='string',
          clientToken='string'
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the parent asset.

      

    
    :type hierarchyId: string
    :param hierarchyId: **[REQUIRED]** 

      The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type childAssetId: string
    :param childAssetId: **[REQUIRED]** 

      The ID of the child asset to be associated.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: batch_associate_project_assets(**kwargs)

    

    Associates a group (batch) of assets with an IoT SiteWise Monitor project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/BatchAssociateProjectAssets>`_    


    **Request Syntax** 
    ::

      response = client.batch_associate_project_assets(
          projectId='string',
          assetIds=[
              'string',
          ],
          clientToken='string'
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project to which to associate the assets.

      

    
    :type assetIds: list
    :param assetIds: **[REQUIRED]** 

      The IDs of the assets to be associated to the project.

      

    
      - *(string) --* 

      
  
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'errors': [
                {
                    'assetId': 'string',
                    'code': 'INTERNAL_FAILURE',
                    'message': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **errors** *(list) --* 

          A list of associated error information, if any.

          
          

          - *(dict) --* 

            Contains error details for the requested associate project asset action.

            
            

            - **assetId** *(string) --* 

              The ID of the asset.

              
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    

  .. py:method:: batch_disassociate_project_assets(**kwargs)

    

    Disassociates a group (batch) of assets from an IoT SiteWise Monitor project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/BatchDisassociateProjectAssets>`_    


    **Request Syntax** 
    ::

      response = client.batch_disassociate_project_assets(
          projectId='string',
          assetIds=[
              'string',
          ],
          clientToken='string'
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project from which to disassociate the assets.

      

    
    :type assetIds: list
    :param assetIds: **[REQUIRED]** 

      The IDs of the assets to be disassociated from the project.

      

    
      - *(string) --* 

      
  
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'errors': [
                {
                    'assetId': 'string',
                    'code': 'INTERNAL_FAILURE',
                    'message': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **errors** *(list) --* 

          A list of associated error information, if any.

          
          

          - *(dict) --* 

            Contains error details for the requested associate project asset action.

            
            

            - **assetId** *(string) --* 

              The ID of the asset.

              
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: batch_put_asset_property_value(**kwargs)

    

    Sends a list of asset property values to IoT SiteWise. Each value is a timestamp-quality-value (TQV) data point. For more information, see `Ingesting data using the API <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/ingest-api.html>`__ in the *IoT SiteWise User Guide* .

     

    To identify an asset property, you must specify one of the following:

     

     
    * The ``assetId`` and ``propertyId`` of an asset property. 
     
    * A ``propertyAlias`` , which is a data stream alias (for example, ``/company/windfarm/3/turbine/7/temperature`` ). To define an asset property's alias, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ . 
     

     

    .. warning::

       

      With respect to Unix epoch time, IoT SiteWise accepts only TQVs that have a timestamp of no more than 7 days in the past and no more than 10 minutes in the future. IoT SiteWise rejects timestamps outside of the inclusive range of [-7 days, +10 minutes] and returns a ``TimestampOutOfRangeException`` error.

       

      For each asset property, IoT SiteWise overwrites TQVs with duplicate timestamps unless the newer TQV has a different quality. For example, if you store a TQV ``{T1, GOOD, V1}`` , then storing ``{T1, GOOD, V2}`` replaces the existing TQV.

       

     

    IoT SiteWise authorizes access to each ``BatchPutAssetPropertyValue`` entry individually. For more information, see `BatchPutAssetPropertyValue authorization <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-batchputassetpropertyvalue-action>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/BatchPutAssetPropertyValue>`_    


    **Request Syntax** 
    ::

      response = client.batch_put_asset_property_value(
          entries=[
              {
                  'entryId': 'string',
                  'assetId': 'string',
                  'propertyId': 'string',
                  'propertyAlias': 'string',
                  'propertyValues': [
                      {
                          'value': {
                              'stringValue': 'string',
                              'integerValue': 123,
                              'doubleValue': 123.0,
                              'booleanValue': True|False
                          },
                          'timestamp': {
                              'timeInSeconds': 123,
                              'offsetInNanos': 123
                          },
                          'quality': 'GOOD'|'BAD'|'UNCERTAIN'
                      },
                  ]
              },
          ]
      )
    :type entries: list
    :param entries: **[REQUIRED]** 

      The list of asset property value entries for the batch put request. You can specify up to 10 entries per request.

      

    
      - *(dict) --* 

        Contains a list of value updates for an asset property in the list of asset entries consumed by the `BatchPutAssetPropertyValue <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_BatchPutAssetPropertyValue.html>`__ API operation.

        

      
        - **entryId** *(string) --* **[REQUIRED]** 

          The user specified ID for the entry. You can use this ID to identify which entries failed.

          

        
        - **assetId** *(string) --* 

          The ID of the asset to update.

          

        
        - **propertyId** *(string) --* 

          The ID of the asset property for this entry.

          

        
        - **propertyAlias** *(string) --* 

          The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

          

        
        - **propertyValues** *(list) --* **[REQUIRED]** 

          The list of property values to upload. You can specify up to 10 ``propertyValues`` array elements. 

          

        
          - *(dict) --* 

            Contains asset property value information.

            

          
            - **value** *(dict) --* **[REQUIRED]** 

              The value of the asset property (see ``Variant`` ).

              

            
              - **stringValue** *(string) --* 

                Asset property data of type string (sequence of characters).

                

              
              - **integerValue** *(integer) --* 

                Asset property data of type integer (whole number).

                

              
              - **doubleValue** *(float) --* 

                Asset property data of type double (floating point number).

                

              
              - **booleanValue** *(boolean) --* 

                Asset property data of type Boolean (true or false).

                

              
            
            - **timestamp** *(dict) --* **[REQUIRED]** 

              The timestamp of the asset property value.

              

            
              - **timeInSeconds** *(integer) --* **[REQUIRED]** 

                The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by ``offsetInNanos`` .

                

              
              - **offsetInNanos** *(integer) --* 

                The nanosecond offset from ``timeInSeconds`` .

                

              
            
            - **quality** *(string) --* 

              The quality of the asset property value.

              

            
          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'errorEntries': [
                {
                    'entryId': 'string',
                    'errors': [
                        {
                            'errorCode': 'ResourceNotFoundException'|'InvalidRequestException'|'InternalFailureException'|'ServiceUnavailableException'|'ThrottlingException'|'LimitExceededException'|'ConflictingOperationException'|'TimestampOutOfRangeException'|'AccessDeniedException',
                            'errorMessage': 'string',
                            'timestamps': [
                                {
                                    'timeInSeconds': 123,
                                    'offsetInNanos': 123
                                },
                            ]
                        },
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **errorEntries** *(list) --* 

          A list of the errors (if any) associated with the batch put request. Each error entry contains the ``entryId`` of the entry that failed.

          
          

          - *(dict) --* 

            Contains error information for asset property value entries that are associated with the `BatchPutAssetPropertyValue <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_BatchPutAssetPropertyValue.html>`__ API.

            
            

            - **entryId** *(string) --* 

              The ID of the failed entry.

              
            

            - **errors** *(list) --* 

              The list of update property value errors.

              
              

              - *(dict) --* 

                Contains error information from updating a batch of asset property values.

                
                

                - **errorCode** *(string) --* 

                  The error code.

                  
                

                - **errorMessage** *(string) --* 

                  The associated error message.

                  
                

                - **timestamps** *(list) --* 

                  A list of timestamps for each error, if any.

                  
                  

                  - *(dict) --* 

                    Contains a timestamp with optional nanosecond granularity.

                    
                    

                    - **timeInSeconds** *(integer) --* 

                      The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by ``offsetInNanos`` .

                      
                    

                    - **offsetInNanos** *(integer) --* 

                      The nanosecond offset from ``timeInSeconds`` .

                      
                
              
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ServiceUnavailableException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_access_policy(**kwargs)

    

    Creates an access policy that grants the specified identity (Amazon Web Services SSO user, Amazon Web Services SSO group, or IAM user) access to the specified IoT SiteWise Monitor portal or project resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/CreateAccessPolicy>`_    


    **Request Syntax** 
    ::

      response = client.create_access_policy(
          accessPolicyIdentity={
              'user': {
                  'id': 'string'
              },
              'group': {
                  'id': 'string'
              },
              'iamUser': {
                  'arn': 'string'
              },
              'iamRole': {
                  'arn': 'string'
              }
          },
          accessPolicyResource={
              'portal': {
                  'id': 'string'
              },
              'project': {
                  'id': 'string'
              }
          },
          accessPolicyPermission='ADMINISTRATOR'|'VIEWER',
          clientToken='string',
          tags={
              'string': 'string'
          }
      )
    :type accessPolicyIdentity: dict
    :param accessPolicyIdentity: **[REQUIRED]** 

      The identity for this access policy. Choose an Amazon Web Services SSO user, an Amazon Web Services SSO group, or an IAM user.

      

    
      - **user** *(dict) --* 

        An Amazon Web Services SSO user identity.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The Amazon Web Services SSO ID of the user.

          

        
      
      - **group** *(dict) --* 

        An Amazon Web Services SSO group identity.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The Amazon Web Services SSO ID of the group.

          

        
      
      - **iamUser** *(dict) --* 

        An IAM user identity.

        

      
        - **arn** *(string) --* **[REQUIRED]** 

          The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

           

          .. note::

             

            If you delete the IAM user, access policies that contain this identity include an empty ``arn`` . You can delete the access policy for the IAM user that no longer exists.

             

          

        
      
      - **iamRole** *(dict) --* 

        An IAM role identity.

        

      
        - **arn** *(string) --* **[REQUIRED]** 

          The ARN of the IAM role. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

          

        
      
    
    :type accessPolicyResource: dict
    :param accessPolicyResource: **[REQUIRED]** 

      The IoT SiteWise Monitor resource for this access policy. Choose either a portal or a project.

      

    
      - **portal** *(dict) --* 

        A portal resource.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The ID of the portal.

          

        
      
      - **project** *(dict) --* 

        A project resource.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The ID of the project.

          

        
      
    
    :type accessPolicyPermission: string
    :param accessPolicyPermission: **[REQUIRED]** 

      The permission level for this access policy. Note that a project ``ADMINISTRATOR`` is also known as a project owner.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    :type tags: dict
    :param tags: 

      A list of key-value pairs that contain metadata for the access policy. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'accessPolicyId': 'string',
            'accessPolicyArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **accessPolicyId** *(string) --* 

          The ID of the access policy.

          
        

        - **accessPolicyArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the access policy, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:access-policy/${AccessPolicyId}``  

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_asset(**kwargs)

    

    Creates an asset from an existing asset model. For more information, see `Creating assets <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-assets.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/CreateAsset>`_    


    **Request Syntax** 
    ::

      response = client.create_asset(
          assetName='string',
          assetModelId='string',
          clientToken='string',
          tags={
              'string': 'string'
          }
      )
    :type assetName: string
    :param assetName: **[REQUIRED]** 

      A unique, friendly name for the asset.

      

    
    :type assetModelId: string
    :param assetModelId: **[REQUIRED]** 

      The ID of the asset model from which to create the asset.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    :type tags: dict
    :param tags: 

      A list of key-value pairs that contain metadata for the asset. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetId': 'string',
            'assetArn': 'string',
            'assetStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetId** *(string) --* 

          The ID of the asset. This ID uniquely identifies the asset within IoT SiteWise and can be used with other IoT SiteWise APIs.

          
        

        - **assetArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}``  

          
        

        - **assetStatus** *(dict) --* 

          The status of the asset, which contains a state (``CREATING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current status of the asset.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: create_asset_model(**kwargs)

    

    Creates an asset model from specified property and hierarchy definitions. You create assets from asset models. With asset models, you can easily create assets of the same type that have standardized definitions. Each asset created from a model inherits the asset model's property and hierarchy definitions. For more information, see `Defining asset models <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/define-models.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/CreateAssetModel>`_    


    **Request Syntax** 
    ::

      response = client.create_asset_model(
          assetModelName='string',
          assetModelDescription='string',
          assetModelProperties=[
              {
                  'name': 'string',
                  'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                  'dataTypeSpec': 'string',
                  'unit': 'string',
                  'type': {
                      'attribute': {
                          'defaultValue': 'string'
                      },
                      'measurement': {}
                      ,
                      'transform': {
                          'expression': 'string',
                          'variables': [
                              {
                                  'name': 'string',
                                  'value': {
                                      'propertyId': 'string',
                                      'hierarchyId': 'string'
                                  }
                              },
                          ]
                      },
                      'metric': {
                          'expression': 'string',
                          'variables': [
                              {
                                  'name': 'string',
                                  'value': {
                                      'propertyId': 'string',
                                      'hierarchyId': 'string'
                                  }
                              },
                          ],
                          'window': {
                              'tumbling': {
                                  'interval': 'string'
                              }
                          }
                      }
                  }
              },
          ],
          assetModelHierarchies=[
              {
                  'name': 'string',
                  'childAssetModelId': 'string'
              },
          ],
          assetModelCompositeModels=[
              {
                  'name': 'string',
                  'description': 'string',
                  'type': 'string',
                  'properties': [
                      {
                          'name': 'string',
                          'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                          'dataTypeSpec': 'string',
                          'unit': 'string',
                          'type': {
                              'attribute': {
                                  'defaultValue': 'string'
                              },
                              'measurement': {}
                              ,
                              'transform': {
                                  'expression': 'string',
                                  'variables': [
                                      {
                                          'name': 'string',
                                          'value': {
                                              'propertyId': 'string',
                                              'hierarchyId': 'string'
                                          }
                                      },
                                  ]
                              },
                              'metric': {
                                  'expression': 'string',
                                  'variables': [
                                      {
                                          'name': 'string',
                                          'value': {
                                              'propertyId': 'string',
                                              'hierarchyId': 'string'
                                          }
                                      },
                                  ],
                                  'window': {
                                      'tumbling': {
                                          'interval': 'string'
                                      }
                                  }
                              }
                          }
                      },
                  ]
              },
          ],
          clientToken='string',
          tags={
              'string': 'string'
          }
      )
    :type assetModelName: string
    :param assetModelName: **[REQUIRED]** 

      A unique, friendly name for the asset model.

      

    
    :type assetModelDescription: string
    :param assetModelDescription: 

      A description for the asset model.

      

    
    :type assetModelProperties: list
    :param assetModelProperties: 

      The property definitions of the asset model. For more information, see `Asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html>`__ in the *IoT SiteWise User Guide* .

       

      You can specify up to 200 properties per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(dict) --* 

        Contains an asset model property definition. This property definition is applied to all assets created from the asset model.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the property definition.

          

        
        - **dataType** *(string) --* **[REQUIRED]** 

          The data type of the property definition.

           

          If you specify ``STRUCT`` , you must also specify ``dataTypeSpec`` to identify the type of the structure for this property.

          

        
        - **dataTypeSpec** *(string) --* 

          The data type of the structure for this property. This parameter is required on properties that have the ``STRUCT`` data type.

           

          The options for this parameter depend on the type of the composite model in which you define this property. Use ``AWS/ALARM_STATE`` for alarm state in alarm composite models.

          

        
        - **unit** *(string) --* 

          The unit of the property definition, such as ``Newtons`` or ``RPM`` .

          

        
        - **type** *(dict) --* **[REQUIRED]** 

          The property definition type (see ``PropertyType`` ). You can only specify one type in a property definition.

          

        
          - **attribute** *(dict) --* 

            Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

            

          
            - **defaultValue** *(string) --* 

              The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

              

            
          
          - **measurement** *(dict) --* 

            Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

            

          
          
          - **transform** *(dict) --* 

            Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

            

          
            - **expression** *(string) --* **[REQUIRED]** 

              The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

               

              For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

              

            
            - **variables** *(list) --* **[REQUIRED]** 

              The list of variables used in the expression.

              

            
              - *(dict) --* 

                Contains expression variable information.

                

              
                - **name** *(string) --* **[REQUIRED]** 

                  The friendly name of the variable to be used in the expression.

                  

                
                - **value** *(dict) --* **[REQUIRED]** 

                  The variable that identifies an asset property from which to use values.

                  

                
                  - **propertyId** *(string) --* **[REQUIRED]** 

                    The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                    

                  
                  - **hierarchyId** *(string) --* 

                    The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                     

                    You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                    

                  
                
              
          
          
          - **metric** *(dict) --* 

            Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

            

          
            - **expression** *(string) --* **[REQUIRED]** 

              The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

               

              For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

              

            
            - **variables** *(list) --* **[REQUIRED]** 

              The list of variables used in the expression.

              

            
              - *(dict) --* 

                Contains expression variable information.

                

              
                - **name** *(string) --* **[REQUIRED]** 

                  The friendly name of the variable to be used in the expression.

                  

                
                - **value** *(dict) --* **[REQUIRED]** 

                  The variable that identifies an asset property from which to use values.

                  

                
                  - **propertyId** *(string) --* **[REQUIRED]** 

                    The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                    

                  
                  - **hierarchyId** *(string) --* 

                    The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                     

                    You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                    

                  
                
              
          
            - **window** *(dict) --* **[REQUIRED]** 

              The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

              

            
              - **tumbling** *(dict) --* 

                The tumbling time interval window.

                

              
                - **interval** *(string) --* **[REQUIRED]** 

                  The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                   

                  When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                  

                
              
            
          
        
      
  
    :type assetModelHierarchies: list
    :param assetModelHierarchies: 

      The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

       

      You can specify up to 10 hierarchies per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(dict) --* 

        Contains an asset model hierarchy used in asset model creation. An asset model hierarchy determines the kind (or type) of asset that can belong to a hierarchy.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the asset model hierarchy definition (as specified in the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation).

          

        
        - **childAssetModelId** *(string) --* **[REQUIRED]** 

          The ID of an asset model for this hierarchy.

          

        
      
  
    :type assetModelCompositeModels: list
    :param assetModelCompositeModels: 

      The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.

      

    
      - *(dict) --* 

        Contains a composite model definition in an asset model. This composite model definition is applied to all assets created from the asset model.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the composite model.

          

        
        - **description** *(string) --* 

          The description of the composite model.

          

        
        - **type** *(string) --* **[REQUIRED]** 

          The type of the composite model. For alarm composite models, this type is ``AWS/ALARM`` .

          

        
        - **properties** *(list) --* 

          The asset property definitions for this composite model.

          

        
          - *(dict) --* 

            Contains an asset model property definition. This property definition is applied to all assets created from the asset model.

            

          
            - **name** *(string) --* **[REQUIRED]** 

              The name of the property definition.

              

            
            - **dataType** *(string) --* **[REQUIRED]** 

              The data type of the property definition.

               

              If you specify ``STRUCT`` , you must also specify ``dataTypeSpec`` to identify the type of the structure for this property.

              

            
            - **dataTypeSpec** *(string) --* 

              The data type of the structure for this property. This parameter is required on properties that have the ``STRUCT`` data type.

               

              The options for this parameter depend on the type of the composite model in which you define this property. Use ``AWS/ALARM_STATE`` for alarm state in alarm composite models.

              

            
            - **unit** *(string) --* 

              The unit of the property definition, such as ``Newtons`` or ``RPM`` .

              

            
            - **type** *(dict) --* **[REQUIRED]** 

              The property definition type (see ``PropertyType`` ). You can only specify one type in a property definition.

              

            
              - **attribute** *(dict) --* 

                Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

                

              
                - **defaultValue** *(string) --* 

                  The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

                  

                
              
              - **measurement** *(dict) --* 

                Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

                

              
              
              - **transform** *(dict) --* 

                Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

                

              
                - **expression** *(string) --* **[REQUIRED]** 

                  The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  

                
                - **variables** *(list) --* **[REQUIRED]** 

                  The list of variables used in the expression.

                  

                
                  - *(dict) --* 

                    Contains expression variable information.

                    

                  
                    - **name** *(string) --* **[REQUIRED]** 

                      The friendly name of the variable to be used in the expression.

                      

                    
                    - **value** *(dict) --* **[REQUIRED]** 

                      The variable that identifies an asset property from which to use values.

                      

                    
                      - **propertyId** *(string) --* **[REQUIRED]** 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        

                      
                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        

                      
                    
                  
              
              
              - **metric** *(dict) --* 

                Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

                

              
                - **expression** *(string) --* **[REQUIRED]** 

                  The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  

                
                - **variables** *(list) --* **[REQUIRED]** 

                  The list of variables used in the expression.

                  

                
                  - *(dict) --* 

                    Contains expression variable information.

                    

                  
                    - **name** *(string) --* **[REQUIRED]** 

                      The friendly name of the variable to be used in the expression.

                      

                    
                    - **value** *(dict) --* **[REQUIRED]** 

                      The variable that identifies an asset property from which to use values.

                      

                    
                      - **propertyId** *(string) --* **[REQUIRED]** 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        

                      
                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        

                      
                    
                  
              
                - **window** *(dict) --* **[REQUIRED]** 

                  The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

                  

                
                  - **tumbling** *(dict) --* 

                    The tumbling time interval window.

                    

                  
                    - **interval** *(string) --* **[REQUIRED]** 

                      The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                       

                      When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                      

                    
                  
                
              
            
          
      
      
  
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    :type tags: dict
    :param tags: 

      A list of key-value pairs that contain metadata for the asset model. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetModelId': 'string',
            'assetModelArn': 'string',
            'assetModelStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'PROPAGATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetModelId** *(string) --* 

          The ID of the asset model. You can use this ID when you call other IoT SiteWise APIs.

          
        

        - **assetModelArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset model, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset-model/${AssetModelId}``  

          
        

        - **assetModelStatus** *(dict) --* 

          The status of the asset model, which contains a state (``CREATING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current state of the asset model.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: create_dashboard(**kwargs)

    

    Creates a dashboard in an IoT SiteWise Monitor project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/CreateDashboard>`_    


    **Request Syntax** 
    ::

      response = client.create_dashboard(
          projectId='string',
          dashboardName='string',
          dashboardDescription='string',
          dashboardDefinition='string',
          clientToken='string',
          tags={
              'string': 'string'
          }
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project in which to create the dashboard.

      

    
    :type dashboardName: string
    :param dashboardName: **[REQUIRED]** 

      A friendly name for the dashboard.

      

    
    :type dashboardDescription: string
    :param dashboardDescription: 

      A description for the dashboard.

      

    
    :type dashboardDefinition: string
    :param dashboardDefinition: **[REQUIRED]** 

      The dashboard definition specified in a JSON literal. For detailed information, see `Creating dashboards (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    :type tags: dict
    :param tags: 

      A list of key-value pairs that contain metadata for the dashboard. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'dashboardId': 'string',
            'dashboardArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **dashboardId** *(string) --* 

          The ID of the dashboard.

          
        

        - **dashboardArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the dashboard, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}``  

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_gateway(**kwargs)

    

    Creates a gateway, which is a virtual or edge device that delivers industrial data streams from local servers to IoT SiteWise. For more information, see `Ingesting data using a gateway <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/gateway-connector.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/CreateGateway>`_    


    **Request Syntax** 
    ::

      response = client.create_gateway(
          gatewayName='string',
          gatewayPlatform={
              'greengrass': {
                  'groupArn': 'string'
              }
          },
          tags={
              'string': 'string'
          }
      )
    :type gatewayName: string
    :param gatewayName: **[REQUIRED]** 

      A unique, friendly name for the gateway.

      

    
    :type gatewayPlatform: dict
    :param gatewayPlatform: **[REQUIRED]** 

      The gateway's platform. You can only specify one platform in a gateway.

      

    
      - **greengrass** *(dict) --* **[REQUIRED]** 

        A gateway that runs on IoT Greengrass.

        

      
        - **groupArn** *(string) --* **[REQUIRED]** 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Greengrass group. For more information about how to find a group's ARN, see `ListGroups <https://docs.aws.amazon.com/greengrass/latest/apireference/listgroups-get.html>`__ and `GetGroup <https://docs.aws.amazon.com/greengrass/latest/apireference/getgroup-get.html>`__ in the *IoT Greengrass API Reference* .

          

        
      
    
    :type tags: dict
    :param tags: 

      A list of key-value pairs that contain metadata for the gateway. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayId': 'string',
            'gatewayArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayId** *(string) --* 

          The ID of the gateway device. You can use this ID when you call other IoT SiteWise APIs.

          
        

        - **gatewayArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the gateway, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:gateway/${GatewayId}``  

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_portal(**kwargs)

    

    Creates a portal, which can contain projects and dashboards. IoT SiteWise Monitor uses Amazon Web Services SSO or IAM to authenticate portal users and manage user permissions.

     

    .. note::

       

      Before you can sign in to a new portal, you must add at least one identity to that portal. For more information, see `Adding or removing portal administrators <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/administer-portals.html#portal-change-admins>`__ in the *IoT SiteWise User Guide* .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/CreatePortal>`_    


    **Request Syntax** 
    ::

      response = client.create_portal(
          portalName='string',
          portalDescription='string',
          portalContactEmail='string',
          clientToken='string',
          portalLogoImageFile={
              'data': b'bytes',
              'type': 'PNG'
          },
          roleArn='string',
          tags={
              'string': 'string'
          },
          portalAuthMode='IAM'|'SSO',
          notificationSenderEmail='string',
          alarms={
              'alarmRoleArn': 'string',
              'notificationLambdaArn': 'string'
          }
      )
    :type portalName: string
    :param portalName: **[REQUIRED]** 

      A friendly name for the portal.

      

    
    :type portalDescription: string
    :param portalDescription: 

      A description for the portal.

      

    
    :type portalContactEmail: string
    :param portalContactEmail: **[REQUIRED]** 

      The Amazon Web Services administrator's contact email address.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    :type portalLogoImageFile: dict
    :param portalLogoImageFile: 

      A logo image to display in the portal. Upload a square, high-resolution image. The image is displayed on a dark background.

      

    
      - **data** *(bytes) --* **[REQUIRED]** 

        The image file contents, represented as a base64-encoded string. The file size must be less than 1 MB.

        

      
      - **type** *(string) --* **[REQUIRED]** 

        The file type of the image.

        

      
    
    :type roleArn: string
    :param roleArn: **[REQUIRED]** 

      The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see `Using service roles for IoT SiteWise Monitor <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type tags: dict
    :param tags: 

      A list of key-value pairs that contain metadata for the portal. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type portalAuthMode: string
    :param portalAuthMode: 

      The service to use to authenticate users to the portal. Choose from the following options:

       

       
      * ``SSO`` – The portal uses Amazon Web Services Single Sign On to authenticate users and manage user permissions. Before you can create a portal that uses Amazon Web Services SSO, you must enable Amazon Web Services SSO. For more information, see `Enabling Amazon Web Services SSO <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-get-started.html#mon-gs-sso>`__ in the *IoT SiteWise User Guide* . This option is only available in Amazon Web Services Regions other than the China Regions. 
       
      * ``IAM`` – The portal uses Identity and Access Management to authenticate users and manage user permissions. This option is only available in the China Regions. 
       

       

      You can't change this value after you create a portal.

       

      Default: ``SSO``  

      

    
    :type notificationSenderEmail: string
    :param notificationSenderEmail: 

      The email address that sends alarm notifications.

       

      .. warning::

         

        If you use the `IoT Events managed Lambda function <https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html>`__ to manage your emails, you must `verify the sender email address in Amazon SES <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html>`__ .

         

      

    
    :type alarms: dict
    :param alarms: 

      Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see `Monitoring with alarms <https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html>`__ in the *IoT SiteWise Application Guide* .

      

    
      - **alarmRoleArn** *(string) --* **[REQUIRED]** 

        The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the IAM role that allows the alarm to perform actions and access Amazon Web Services resources and services, such as IoT Events.

        

      
      - **notificationLambdaArn** *(string) --* 

        The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Lambda function that manages alarm notifications. For more information, see `Managing alarm notifications <https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html>`__ in the *IoT Events Developer Guide* .

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'portalId': 'string',
            'portalArn': 'string',
            'portalStartUrl': 'string',
            'portalStatus': {
                'state': 'CREATING'|'UPDATING'|'DELETING'|'ACTIVE'|'FAILED',
                'error': {
                    'code': 'INTERNAL_FAILURE'|'VALIDATION_ERROR'|'LIMIT_EXCEEDED',
                    'message': 'string'
                }
            },
            'ssoApplicationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **portalId** *(string) --* 

          The ID of the created portal.

          
        

        - **portalArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the portal, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}``  

          
        

        - **portalStartUrl** *(string) --* 

          The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use Amazon Web Services SSO for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.

          
        

        - **portalStatus** *(dict) --* 

          The status of the portal, which contains a state (``CREATING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current state of the portal.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
        

        - **ssoApplicationId** *(string) --* 

          The associated Amazon Web Services SSO application ID, if the portal uses Amazon Web Services SSO.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    

  .. py:method:: create_project(**kwargs)

    

    Creates a project in the specified portal.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/CreateProject>`_    


    **Request Syntax** 
    ::

      response = client.create_project(
          portalId='string',
          projectName='string',
          projectDescription='string',
          clientToken='string',
          tags={
              'string': 'string'
          }
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal in which to create the project.

      

    
    :type projectName: string
    :param projectName: **[REQUIRED]** 

      A friendly name for the project.

      

    
    :type projectDescription: string
    :param projectDescription: 

      A description for the project.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    :type tags: dict
    :param tags: 

      A list of key-value pairs that contain metadata for the project. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'projectId': 'string',
            'projectArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **projectId** *(string) --* 

          The ID of the project.

          
        

        - **projectArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the project, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:project/${ProjectId}``  

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    

  .. py:method:: delete_access_policy(**kwargs)

    

    Deletes an access policy that grants the specified identity access to the specified IoT SiteWise Monitor resource. You can use this operation to revoke access to an IoT SiteWise Monitor resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DeleteAccessPolicy>`_    


    **Request Syntax** 
    ::

      response = client.delete_access_policy(
          accessPolicyId='string',
          clientToken='string'
      )
    :type accessPolicyId: string
    :param accessPolicyId: **[REQUIRED]** 

      The ID of the access policy to be deleted.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_asset(**kwargs)

    

    Deletes an asset. This action can't be undone. For more information, see `Deleting assets and models <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html>`__ in the *IoT SiteWise User Guide* . 

     

    .. note::

       

      You can't delete an asset that's associated to another asset. For more information, see `DisassociateAssets <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DisassociateAssets.html>`__ .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DeleteAsset>`_    


    **Request Syntax** 
    ::

      response = client.delete_asset(
          assetId='string',
          clientToken='string'
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset to delete.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetStatus** *(dict) --* 

          The status of the asset, which contains a state (``DELETING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current status of the asset.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: delete_asset_model(**kwargs)

    

    Deletes an asset model. This action can't be undone. You must delete all assets created from an asset model before you can delete the model. Also, you can't delete an asset model if a parent asset model exists that contains a property formula expression that depends on the asset model that you want to delete. For more information, see `Deleting assets and models <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/delete-assets-and-models.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DeleteAssetModel>`_    


    **Request Syntax** 
    ::

      response = client.delete_asset_model(
          assetModelId='string',
          clientToken='string'
      )
    :type assetModelId: string
    :param assetModelId: **[REQUIRED]** 

      The ID of the asset model to delete.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetModelStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'PROPAGATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetModelStatus** *(dict) --* 

          The status of the asset model, which contains a state (``DELETING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current state of the asset model.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: delete_dashboard(**kwargs)

    

    Deletes a dashboard from IoT SiteWise Monitor.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DeleteDashboard>`_    


    **Request Syntax** 
    ::

      response = client.delete_dashboard(
          dashboardId='string',
          clientToken='string'
      )
    :type dashboardId: string
    :param dashboardId: **[REQUIRED]** 

      The ID of the dashboard to delete.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_gateway(**kwargs)

    

    Deletes a gateway from IoT SiteWise. When you delete a gateway, some of the gateway's files remain in your gateway's file system.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DeleteGateway>`_    


    **Request Syntax** 
    ::

      response = client.delete_gateway(
          gatewayId='string'
      )
    :type gatewayId: string
    :param gatewayId: **[REQUIRED]** 

      The ID of the gateway to delete.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_portal(**kwargs)

    

    Deletes a portal from IoT SiteWise Monitor.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DeletePortal>`_    


    **Request Syntax** 
    ::

      response = client.delete_portal(
          portalId='string',
          clientToken='string'
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal to delete.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'portalStatus': {
                'state': 'CREATING'|'UPDATING'|'DELETING'|'ACTIVE'|'FAILED',
                'error': {
                    'code': 'INTERNAL_FAILURE'|'VALIDATION_ERROR'|'LIMIT_EXCEEDED',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **portalStatus** *(dict) --* 

          The status of the portal, which contains a state (``DELETING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current state of the portal.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: delete_project(**kwargs)

    

    Deletes a project from IoT SiteWise Monitor.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DeleteProject>`_    


    **Request Syntax** 
    ::

      response = client.delete_project(
          projectId='string',
          clientToken='string'
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_access_policy(**kwargs)

    

    Describes an access policy, which specifies an identity's access to an IoT SiteWise Monitor portal or project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAccessPolicy>`_    


    **Request Syntax** 
    ::

      response = client.describe_access_policy(
          accessPolicyId='string'
      )
    :type accessPolicyId: string
    :param accessPolicyId: **[REQUIRED]** 

      The ID of the access policy.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'accessPolicyId': 'string',
            'accessPolicyArn': 'string',
            'accessPolicyIdentity': {
                'user': {
                    'id': 'string'
                },
                'group': {
                    'id': 'string'
                },
                'iamUser': {
                    'arn': 'string'
                },
                'iamRole': {
                    'arn': 'string'
                }
            },
            'accessPolicyResource': {
                'portal': {
                    'id': 'string'
                },
                'project': {
                    'id': 'string'
                }
            },
            'accessPolicyPermission': 'ADMINISTRATOR'|'VIEWER',
            'accessPolicyCreationDate': datetime(2015, 1, 1),
            'accessPolicyLastUpdateDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **accessPolicyId** *(string) --* 

          The ID of the access policy.

          
        

        - **accessPolicyArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the access policy, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:access-policy/${AccessPolicyId}``  

          
        

        - **accessPolicyIdentity** *(dict) --* 

          The identity (Amazon Web Services SSO user, Amazon Web Services SSO group, or IAM user) to which this access policy applies.

          
          

          - **user** *(dict) --* 

            An Amazon Web Services SSO user identity.

            
            

            - **id** *(string) --* 

              The Amazon Web Services SSO ID of the user.

              
        
          

          - **group** *(dict) --* 

            An Amazon Web Services SSO group identity.

            
            

            - **id** *(string) --* 

              The Amazon Web Services SSO ID of the group.

              
        
          

          - **iamUser** *(dict) --* 

            An IAM user identity.

            
            

            - **arn** *(string) --* 

              The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

               

              .. note::

                 

                If you delete the IAM user, access policies that contain this identity include an empty ``arn`` . You can delete the access policy for the IAM user that no longer exists.

                 

              
        
          

          - **iamRole** *(dict) --* 

            An IAM role identity.

            
            

            - **arn** *(string) --* 

              The ARN of the IAM role. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

              
        
      
        

        - **accessPolicyResource** *(dict) --* 

          The IoT SiteWise Monitor resource (portal or project) to which this access policy provides access.

          
          

          - **portal** *(dict) --* 

            A portal resource.

            
            

            - **id** *(string) --* 

              The ID of the portal.

              
        
          

          - **project** *(dict) --* 

            A project resource.

            
            

            - **id** *(string) --* 

              The ID of the project.

              
        
      
        

        - **accessPolicyPermission** *(string) --* 

          The access policy permission. Note that a project ``ADMINISTRATOR`` is also known as a project owner.

          
        

        - **accessPolicyCreationDate** *(datetime) --* 

          The date the access policy was created, in Unix epoch time.

          
        

        - **accessPolicyLastUpdateDate** *(datetime) --* 

          The date the access policy was last updated, in Unix epoch time.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_asset(**kwargs)

    

    Retrieves information about an asset.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAsset>`_    


    **Request Syntax** 
    ::

      response = client.describe_asset(
          assetId='string'
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetId': 'string',
            'assetArn': 'string',
            'assetName': 'string',
            'assetModelId': 'string',
            'assetProperties': [
                {
                    'id': 'string',
                    'name': 'string',
                    'alias': 'string',
                    'notification': {
                        'topic': 'string',
                        'state': 'ENABLED'|'DISABLED'
                    },
                    'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                    'dataTypeSpec': 'string',
                    'unit': 'string'
                },
            ],
            'assetHierarchies': [
                {
                    'id': 'string',
                    'name': 'string'
                },
            ],
            'assetCompositeModels': [
                {
                    'name': 'string',
                    'description': 'string',
                    'type': 'string',
                    'properties': [
                        {
                            'id': 'string',
                            'name': 'string',
                            'alias': 'string',
                            'notification': {
                                'topic': 'string',
                                'state': 'ENABLED'|'DISABLED'
                            },
                            'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                            'dataTypeSpec': 'string',
                            'unit': 'string'
                        },
                    ]
                },
            ],
            'assetCreationDate': datetime(2015, 1, 1),
            'assetLastUpdateDate': datetime(2015, 1, 1),
            'assetStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetId** *(string) --* 

          The ID of the asset.

          
        

        - **assetArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}``  

          
        

        - **assetName** *(string) --* 

          The name of the asset.

          
        

        - **assetModelId** *(string) --* 

          The ID of the asset model that was used to create the asset.

          
        

        - **assetProperties** *(list) --* 

          The list of asset properties for the asset.

           

          This object doesn't include properties that you define in composite models. You can find composite model properties in the ``assetCompositeModels`` object.

          
          

          - *(dict) --* 

            Contains asset property information.

            
            

            - **id** *(string) --* 

              The ID of the asset property.

              
            

            - **name** *(string) --* 

              The name of the property.

              
            

            - **alias** *(string) --* 

              The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

              
            

            - **notification** *(dict) --* 

              The asset property's notification topic and state. For more information, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ .

              
              

              - **topic** *(string) --* 

                The MQTT topic to which IoT SiteWise publishes property value update notifications.

                
              

              - **state** *(string) --* 

                The current notification state.

                
          
            

            - **dataType** *(string) --* 

              The data type of the asset property.

              
            

            - **dataTypeSpec** *(string) --* 

              The data type of the structure for this property. This parameter exists on properties that have the ``STRUCT`` data type.

              
            

            - **unit** *(string) --* 

              The unit (such as ``Newtons`` or ``RPM`` ) of the asset property.

              
        
      
        

        - **assetHierarchies** *(list) --* 

          A list of asset hierarchies that each contain a ``hierarchyId`` . A hierarchy specifies allowed parent/child asset relationships.

          
          

          - *(dict) --* 

            Describes an asset hierarchy that contains a hierarchy's name and ID.

            
            

            - **id** *(string) --* 

              The ID of the hierarchy. This ID is a ``hierarchyId`` .

              
            

            - **name** *(string) --* 

              The hierarchy name provided in the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation.

              
        
      
        

        - **assetCompositeModels** *(list) --* 

          The composite models for the asset.

          
          

          - *(dict) --* 

            Contains information about a composite model in an asset. This object contains the asset's properties that you define in the composite model.

            
            

            - **name** *(string) --* 

              The name of the composite model.

              
            

            - **description** *(string) --* 

              The description of the composite model.

              
            

            - **type** *(string) --* 

              The type of the composite model. For alarm composite models, this type is ``AWS/ALARM`` .

              
            

            - **properties** *(list) --* 

              The asset properties that this composite model defines.

              
              

              - *(dict) --* 

                Contains asset property information.

                
                

                - **id** *(string) --* 

                  The ID of the asset property.

                  
                

                - **name** *(string) --* 

                  The name of the property.

                  
                

                - **alias** *(string) --* 

                  The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

                  
                

                - **notification** *(dict) --* 

                  The asset property's notification topic and state. For more information, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ .

                  
                  

                  - **topic** *(string) --* 

                    The MQTT topic to which IoT SiteWise publishes property value update notifications.

                    
                  

                  - **state** *(string) --* 

                    The current notification state.

                    
              
                

                - **dataType** *(string) --* 

                  The data type of the asset property.

                  
                

                - **dataTypeSpec** *(string) --* 

                  The data type of the structure for this property. This parameter exists on properties that have the ``STRUCT`` data type.

                  
                

                - **unit** *(string) --* 

                  The unit (such as ``Newtons`` or ``RPM`` ) of the asset property.

                  
            
          
        
      
        

        - **assetCreationDate** *(datetime) --* 

          The date the asset was created, in Unix epoch time.

          
        

        - **assetLastUpdateDate** *(datetime) --* 

          The date the asset was last updated, in Unix epoch time.

          
        

        - **assetStatus** *(dict) --* 

          The current status of the asset, which contains a state and any error message.

          
          

          - **state** *(string) --* 

            The current status of the asset.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_asset_model(**kwargs)

    

    Retrieves information about an asset model.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAssetModel>`_    


    **Request Syntax** 
    ::

      response = client.describe_asset_model(
          assetModelId='string'
      )
    :type assetModelId: string
    :param assetModelId: **[REQUIRED]** 

      The ID of the asset model.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetModelId': 'string',
            'assetModelArn': 'string',
            'assetModelName': 'string',
            'assetModelDescription': 'string',
            'assetModelProperties': [
                {
                    'id': 'string',
                    'name': 'string',
                    'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                    'dataTypeSpec': 'string',
                    'unit': 'string',
                    'type': {
                        'attribute': {
                            'defaultValue': 'string'
                        },
                        'measurement': {},
                        'transform': {
                            'expression': 'string',
                            'variables': [
                                {
                                    'name': 'string',
                                    'value': {
                                        'propertyId': 'string',
                                        'hierarchyId': 'string'
                                    }
                                },
                            ]
                        },
                        'metric': {
                            'expression': 'string',
                            'variables': [
                                {
                                    'name': 'string',
                                    'value': {
                                        'propertyId': 'string',
                                        'hierarchyId': 'string'
                                    }
                                },
                            ],
                            'window': {
                                'tumbling': {
                                    'interval': 'string'
                                }
                            }
                        }
                    }
                },
            ],
            'assetModelHierarchies': [
                {
                    'id': 'string',
                    'name': 'string',
                    'childAssetModelId': 'string'
                },
            ],
            'assetModelCompositeModels': [
                {
                    'name': 'string',
                    'description': 'string',
                    'type': 'string',
                    'properties': [
                        {
                            'id': 'string',
                            'name': 'string',
                            'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                            'dataTypeSpec': 'string',
                            'unit': 'string',
                            'type': {
                                'attribute': {
                                    'defaultValue': 'string'
                                },
                                'measurement': {},
                                'transform': {
                                    'expression': 'string',
                                    'variables': [
                                        {
                                            'name': 'string',
                                            'value': {
                                                'propertyId': 'string',
                                                'hierarchyId': 'string'
                                            }
                                        },
                                    ]
                                },
                                'metric': {
                                    'expression': 'string',
                                    'variables': [
                                        {
                                            'name': 'string',
                                            'value': {
                                                'propertyId': 'string',
                                                'hierarchyId': 'string'
                                            }
                                        },
                                    ],
                                    'window': {
                                        'tumbling': {
                                            'interval': 'string'
                                        }
                                    }
                                }
                            }
                        },
                    ]
                },
            ],
            'assetModelCreationDate': datetime(2015, 1, 1),
            'assetModelLastUpdateDate': datetime(2015, 1, 1),
            'assetModelStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'PROPAGATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetModelId** *(string) --* 

          The ID of the asset model.

          
        

        - **assetModelArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset model, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset-model/${AssetModelId}``  

          
        

        - **assetModelName** *(string) --* 

          The name of the asset model.

          
        

        - **assetModelDescription** *(string) --* 

          The asset model's description.

          
        

        - **assetModelProperties** *(list) --* 

          The list of asset properties for the asset model.

           

          This object doesn't include properties that you define in composite models. You can find composite model properties in the ``assetModelCompositeModels`` object.

          
          

          - *(dict) --* 

            Contains information about an asset model property.

            
            

            - **id** *(string) --* 

              The ID of the asset model property.

              
            

            - **name** *(string) --* 

              The name of the asset model property.

              
            

            - **dataType** *(string) --* 

              The data type of the asset model property.

              
            

            - **dataTypeSpec** *(string) --* 

              The data type of the structure for this property. This parameter exists on properties that have the ``STRUCT`` data type.

              
            

            - **unit** *(string) --* 

              The unit of the asset model property, such as ``Newtons`` or ``RPM`` .

              
            

            - **type** *(dict) --* 

              The property type (see ``PropertyType`` ).

              
              

              - **attribute** *(dict) --* 

                Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

                
                

                - **defaultValue** *(string) --* 

                  The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

                  
            
              

              - **measurement** *(dict) --* 

                Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

                
            
              

              - **transform** *(dict) --* 

                Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

                
                

                - **expression** *(string) --* 

                  The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  
                

                - **variables** *(list) --* 

                  The list of variables used in the expression.

                  
                  

                  - *(dict) --* 

                    Contains expression variable information.

                    
                    

                    - **name** *(string) --* 

                      The friendly name of the variable to be used in the expression.

                      
                    

                    - **value** *(dict) --* 

                      The variable that identifies an asset property from which to use values.

                      
                      

                      - **propertyId** *(string) --* 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        
                      

                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        
                  
                
              
            
              

              - **metric** *(dict) --* 

                Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

                
                

                - **expression** *(string) --* 

                  The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  
                

                - **variables** *(list) --* 

                  The list of variables used in the expression.

                  
                  

                  - *(dict) --* 

                    Contains expression variable information.

                    
                    

                    - **name** *(string) --* 

                      The friendly name of the variable to be used in the expression.

                      
                    

                    - **value** *(dict) --* 

                      The variable that identifies an asset property from which to use values.

                      
                      

                      - **propertyId** *(string) --* 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        
                      

                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        
                  
                
              
                

                - **window** *(dict) --* 

                  The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

                  
                  

                  - **tumbling** *(dict) --* 

                    The tumbling time interval window.

                    
                    

                    - **interval** *(string) --* 

                      The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                       

                      When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                      
                
              
            
          
        
      
        

        - **assetModelHierarchies** *(list) --* 

          A list of asset model hierarchies that each contain a ``childAssetModelId`` and a ``hierarchyId`` (named ``id`` ). A hierarchy specifies allowed parent/child asset relationships for an asset model.

          
          

          - *(dict) --* 

            Describes an asset hierarchy that contains a hierarchy's name, ID, and child asset model ID that specifies the type of asset that can be in this hierarchy.

            
            

            - **id** *(string) --* 

              The ID of the asset model hierarchy. This ID is a ``hierarchyId`` .

              
            

            - **name** *(string) --* 

              The name of the asset model hierarchy that you specify by using the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation.

              
            

            - **childAssetModelId** *(string) --* 

              The ID of the asset model. All assets in this hierarchy must be instances of the ``childAssetModelId`` asset model.

              
        
      
        

        - **assetModelCompositeModels** *(list) --* 

          The list of composite asset models for the asset model.

          
          

          - *(dict) --* 

            Contains information about a composite model in an asset model. This object contains the asset property definitions that you define in the composite model.

            
            

            - **name** *(string) --* 

              The name of the composite model.

              
            

            - **description** *(string) --* 

              The description of the composite model.

              
            

            - **type** *(string) --* 

              The type of the composite model. For alarm composite models, this type is ``AWS/ALARM`` .

              
            

            - **properties** *(list) --* 

              The asset property definitions for this composite model.

              
              

              - *(dict) --* 

                Contains information about an asset model property.

                
                

                - **id** *(string) --* 

                  The ID of the asset model property.

                  
                

                - **name** *(string) --* 

                  The name of the asset model property.

                  
                

                - **dataType** *(string) --* 

                  The data type of the asset model property.

                  
                

                - **dataTypeSpec** *(string) --* 

                  The data type of the structure for this property. This parameter exists on properties that have the ``STRUCT`` data type.

                  
                

                - **unit** *(string) --* 

                  The unit of the asset model property, such as ``Newtons`` or ``RPM`` .

                  
                

                - **type** *(dict) --* 

                  The property type (see ``PropertyType`` ).

                  
                  

                  - **attribute** *(dict) --* 

                    Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

                    
                    

                    - **defaultValue** *(string) --* 

                      The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

                      
                
                  

                  - **measurement** *(dict) --* 

                    Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

                    
                
                  

                  - **transform** *(dict) --* 

                    Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

                    
                    

                    - **expression** *(string) --* 

                      The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                       

                      For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                      
                    

                    - **variables** *(list) --* 

                      The list of variables used in the expression.

                      
                      

                      - *(dict) --* 

                        Contains expression variable information.

                        
                        

                        - **name** *(string) --* 

                          The friendly name of the variable to be used in the expression.

                          
                        

                        - **value** *(dict) --* 

                          The variable that identifies an asset property from which to use values.

                          
                          

                          - **propertyId** *(string) --* 

                            The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                            
                          

                          - **hierarchyId** *(string) --* 

                            The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                             

                            You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                            
                      
                    
                  
                
                  

                  - **metric** *(dict) --* 

                    Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

                    
                    

                    - **expression** *(string) --* 

                      The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                       

                      For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                      
                    

                    - **variables** *(list) --* 

                      The list of variables used in the expression.

                      
                      

                      - *(dict) --* 

                        Contains expression variable information.

                        
                        

                        - **name** *(string) --* 

                          The friendly name of the variable to be used in the expression.

                          
                        

                        - **value** *(dict) --* 

                          The variable that identifies an asset property from which to use values.

                          
                          

                          - **propertyId** *(string) --* 

                            The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                            
                          

                          - **hierarchyId** *(string) --* 

                            The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                             

                            You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                            
                      
                    
                  
                    

                    - **window** *(dict) --* 

                      The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

                      
                      

                      - **tumbling** *(dict) --* 

                        The tumbling time interval window.

                        
                        

                        - **interval** *(string) --* 

                          The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                           

                          When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                          
                    
                  
                
              
            
          
        
      
        

        - **assetModelCreationDate** *(datetime) --* 

          The date the asset model was created, in Unix epoch time.

          
        

        - **assetModelLastUpdateDate** *(datetime) --* 

          The date the asset model was last updated, in Unix epoch time.

          
        

        - **assetModelStatus** *(dict) --* 

          The current status of the asset model, which contains a state and any error message.

          
          

          - **state** *(string) --* 

            The current state of the asset model.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_asset_property(**kwargs)

    

    Retrieves information about an asset property.

     

    .. note::

       

      When you call this operation for an attribute property, this response includes the default attribute value that you define in the asset model. If you update the default value in the model, this operation's response includes the new default value.

       

     

    This operation doesn't return the value of the asset property. To get the value of an asset property, use `GetAssetPropertyValue <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_GetAssetPropertyValue.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAssetProperty>`_    


    **Request Syntax** 
    ::

      response = client.describe_asset_property(
          assetId='string',
          propertyId='string'
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: **[REQUIRED]** 

      The ID of the asset property.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetId': 'string',
            'assetName': 'string',
            'assetModelId': 'string',
            'assetProperty': {
                'id': 'string',
                'name': 'string',
                'alias': 'string',
                'notification': {
                    'topic': 'string',
                    'state': 'ENABLED'|'DISABLED'
                },
                'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                'unit': 'string',
                'type': {
                    'attribute': {
                        'defaultValue': 'string'
                    },
                    'measurement': {},
                    'transform': {
                        'expression': 'string',
                        'variables': [
                            {
                                'name': 'string',
                                'value': {
                                    'propertyId': 'string',
                                    'hierarchyId': 'string'
                                }
                            },
                        ]
                    },
                    'metric': {
                        'expression': 'string',
                        'variables': [
                            {
                                'name': 'string',
                                'value': {
                                    'propertyId': 'string',
                                    'hierarchyId': 'string'
                                }
                            },
                        ],
                        'window': {
                            'tumbling': {
                                'interval': 'string'
                            }
                        }
                    }
                }
            },
            'compositeModel': {
                'name': 'string',
                'type': 'string',
                'assetProperty': {
                    'id': 'string',
                    'name': 'string',
                    'alias': 'string',
                    'notification': {
                        'topic': 'string',
                        'state': 'ENABLED'|'DISABLED'
                    },
                    'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                    'unit': 'string',
                    'type': {
                        'attribute': {
                            'defaultValue': 'string'
                        },
                        'measurement': {},
                        'transform': {
                            'expression': 'string',
                            'variables': [
                                {
                                    'name': 'string',
                                    'value': {
                                        'propertyId': 'string',
                                        'hierarchyId': 'string'
                                    }
                                },
                            ]
                        },
                        'metric': {
                            'expression': 'string',
                            'variables': [
                                {
                                    'name': 'string',
                                    'value': {
                                        'propertyId': 'string',
                                        'hierarchyId': 'string'
                                    }
                                },
                            ],
                            'window': {
                                'tumbling': {
                                    'interval': 'string'
                                }
                            }
                        }
                    }
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetId** *(string) --* 

          The ID of the asset.

          
        

        - **assetName** *(string) --* 

          The name of the asset.

          
        

        - **assetModelId** *(string) --* 

          The ID of the asset model.

          
        

        - **assetProperty** *(dict) --* 

          The asset property's definition, alias, and notification state.

           

          This response includes this object for normal asset properties. If you describe an asset property in a composite model, this response includes the asset property information in ``compositeModel`` .

          
          

          - **id** *(string) --* 

            The ID of the asset property.

            
          

          - **name** *(string) --* 

            The name of the property.

            
          

          - **alias** *(string) --* 

            The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

            
          

          - **notification** *(dict) --* 

            The asset property's notification topic and state. For more information, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ .

            
            

            - **topic** *(string) --* 

              The MQTT topic to which IoT SiteWise publishes property value update notifications.

              
            

            - **state** *(string) --* 

              The current notification state.

              
        
          

          - **dataType** *(string) --* 

            The property data type.

            
          

          - **unit** *(string) --* 

            The unit (such as ``Newtons`` or ``RPM`` ) of the asset property.

            
          

          - **type** *(dict) --* 

            The property type (see ``PropertyType`` ). A property contains one type.

            
            

            - **attribute** *(dict) --* 

              Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

              
              

              - **defaultValue** *(string) --* 

                The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

                
          
            

            - **measurement** *(dict) --* 

              Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

              
          
            

            - **transform** *(dict) --* 

              Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

              
              

              - **expression** *(string) --* 

                The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                 

                For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                
              

              - **variables** *(list) --* 

                The list of variables used in the expression.

                
                

                - *(dict) --* 

                  Contains expression variable information.

                  
                  

                  - **name** *(string) --* 

                    The friendly name of the variable to be used in the expression.

                    
                  

                  - **value** *(dict) --* 

                    The variable that identifies an asset property from which to use values.

                    
                    

                    - **propertyId** *(string) --* 

                      The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                      
                    

                    - **hierarchyId** *(string) --* 

                      The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                       

                      You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                      
                
              
            
          
            

            - **metric** *(dict) --* 

              Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

              
              

              - **expression** *(string) --* 

                The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                 

                For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                
              

              - **variables** *(list) --* 

                The list of variables used in the expression.

                
                

                - *(dict) --* 

                  Contains expression variable information.

                  
                  

                  - **name** *(string) --* 

                    The friendly name of the variable to be used in the expression.

                    
                  

                  - **value** *(dict) --* 

                    The variable that identifies an asset property from which to use values.

                    
                    

                    - **propertyId** *(string) --* 

                      The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                      
                    

                    - **hierarchyId** *(string) --* 

                      The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                       

                      You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                      
                
              
            
              

              - **window** *(dict) --* 

                The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

                
                

                - **tumbling** *(dict) --* 

                  The tumbling time interval window.

                  
                  

                  - **interval** *(string) --* 

                    The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                     

                    When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                    
              
            
          
        
      
        

        - **compositeModel** *(dict) --* 

          The composite asset model that declares this asset property, if this asset property exists in a composite model.

          
          

          - **name** *(string) --* 

            The name of the property.

            
          

          - **type** *(string) --* 

            The type of the composite model that defines this property.

            
          

          - **assetProperty** *(dict) --* 

            Contains asset property information.

            
            

            - **id** *(string) --* 

              The ID of the asset property.

              
            

            - **name** *(string) --* 

              The name of the property.

              
            

            - **alias** *(string) --* 

              The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

              
            

            - **notification** *(dict) --* 

              The asset property's notification topic and state. For more information, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ .

              
              

              - **topic** *(string) --* 

                The MQTT topic to which IoT SiteWise publishes property value update notifications.

                
              

              - **state** *(string) --* 

                The current notification state.

                
          
            

            - **dataType** *(string) --* 

              The property data type.

              
            

            - **unit** *(string) --* 

              The unit (such as ``Newtons`` or ``RPM`` ) of the asset property.

              
            

            - **type** *(dict) --* 

              The property type (see ``PropertyType`` ). A property contains one type.

              
              

              - **attribute** *(dict) --* 

                Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

                
                

                - **defaultValue** *(string) --* 

                  The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

                  
            
              

              - **measurement** *(dict) --* 

                Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

                
            
              

              - **transform** *(dict) --* 

                Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

                
                

                - **expression** *(string) --* 

                  The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  
                

                - **variables** *(list) --* 

                  The list of variables used in the expression.

                  
                  

                  - *(dict) --* 

                    Contains expression variable information.

                    
                    

                    - **name** *(string) --* 

                      The friendly name of the variable to be used in the expression.

                      
                    

                    - **value** *(dict) --* 

                      The variable that identifies an asset property from which to use values.

                      
                      

                      - **propertyId** *(string) --* 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        
                      

                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        
                  
                
              
            
              

              - **metric** *(dict) --* 

                Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

                
                

                - **expression** *(string) --* 

                  The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  
                

                - **variables** *(list) --* 

                  The list of variables used in the expression.

                  
                  

                  - *(dict) --* 

                    Contains expression variable information.

                    
                    

                    - **name** *(string) --* 

                      The friendly name of the variable to be used in the expression.

                      
                    

                    - **value** *(dict) --* 

                      The variable that identifies an asset property from which to use values.

                      
                      

                      - **propertyId** *(string) --* 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        
                      

                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        
                  
                
              
                

                - **window** *(dict) --* 

                  The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

                  
                  

                  - **tumbling** *(dict) --* 

                    The tumbling time interval window.

                    
                    

                    - **interval** *(string) --* 

                      The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                       

                      When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                      
                
              
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_dashboard(**kwargs)

    

    Retrieves information about a dashboard.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeDashboard>`_    


    **Request Syntax** 
    ::

      response = client.describe_dashboard(
          dashboardId='string'
      )
    :type dashboardId: string
    :param dashboardId: **[REQUIRED]** 

      The ID of the dashboard.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'dashboardId': 'string',
            'dashboardArn': 'string',
            'dashboardName': 'string',
            'projectId': 'string',
            'dashboardDescription': 'string',
            'dashboardDefinition': 'string',
            'dashboardCreationDate': datetime(2015, 1, 1),
            'dashboardLastUpdateDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **dashboardId** *(string) --* 

          The ID of the dashboard.

          
        

        - **dashboardArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the dashboard, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:dashboard/${DashboardId}``  

          
        

        - **dashboardName** *(string) --* 

          The name of the dashboard.

          
        

        - **projectId** *(string) --* 

          The ID of the project that the dashboard is in.

          
        

        - **dashboardDescription** *(string) --* 

          The dashboard's description.

          
        

        - **dashboardDefinition** *(string) --* 

          The dashboard's definition JSON literal. For detailed information, see `Creating dashboards (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html>`__ in the *IoT SiteWise User Guide* .

          
        

        - **dashboardCreationDate** *(datetime) --* 

          The date the dashboard was created, in Unix epoch time.

          
        

        - **dashboardLastUpdateDate** *(datetime) --* 

          The date the dashboard was last updated, in Unix epoch time.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_default_encryption_configuration()

    

    Retrieves information about the default encryption configuration for the Amazon Web Services account in the default or specified Region. For more information, see `Key management <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeDefaultEncryptionConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.describe_default_encryption_configuration()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'encryptionType': 'SITEWISE_DEFAULT_ENCRYPTION'|'KMS_BASED_ENCRYPTION',
            'kmsKeyArn': 'string',
            'configurationStatus': {
                'state': 'ACTIVE'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **encryptionType** *(string) --* 

          The type of encryption used for the encryption configuration.

          
        

        - **kmsKeyArn** *(string) --* 

          The key ARN of the customer managed customer master key (CMK) used for KMS encryption if you use ``KMS_BASED_ENCRYPTION`` .

          
        

        - **configurationStatus** *(dict) --* 

          The status of the account configuration. This contains the ``ConfigurationState`` . If there's an error, it also contains the ``ErrorDetails`` .

          
          

          - **state** *(string) --* 

            The current state of the configuration.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_gateway(**kwargs)

    

    Retrieves information about a gateway.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeGateway>`_    


    **Request Syntax** 
    ::

      response = client.describe_gateway(
          gatewayId='string'
      )
    :type gatewayId: string
    :param gatewayId: **[REQUIRED]** 

      The ID of the gateway device.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayId': 'string',
            'gatewayName': 'string',
            'gatewayArn': 'string',
            'gatewayPlatform': {
                'greengrass': {
                    'groupArn': 'string'
                }
            },
            'gatewayCapabilitySummaries': [
                {
                    'capabilityNamespace': 'string',
                    'capabilitySyncStatus': 'IN_SYNC'|'OUT_OF_SYNC'|'SYNC_FAILED'
                },
            ],
            'creationDate': datetime(2015, 1, 1),
            'lastUpdateDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayId** *(string) --* 

          The ID of the gateway device.

          
        

        - **gatewayName** *(string) --* 

          The name of the gateway.

          
        

        - **gatewayArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the gateway, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:gateway/${GatewayId}``  

          
        

        - **gatewayPlatform** *(dict) --* 

          The gateway's platform.

          
          

          - **greengrass** *(dict) --* 

            A gateway that runs on IoT Greengrass.

            
            

            - **groupArn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Greengrass group. For more information about how to find a group's ARN, see `ListGroups <https://docs.aws.amazon.com/greengrass/latest/apireference/listgroups-get.html>`__ and `GetGroup <https://docs.aws.amazon.com/greengrass/latest/apireference/getgroup-get.html>`__ in the *IoT Greengrass API Reference* .

              
        
      
        

        - **gatewayCapabilitySummaries** *(list) --* 

          A list of gateway capability summaries that each contain a namespace and status. Each gateway capability defines data sources for the gateway. To retrieve a capability configuration's definition, use `DescribeGatewayCapabilityConfiguration <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGatewayCapabilityConfiguration.html>`__ .

          
          

          - *(dict) --* 

            Contains a summary of a gateway capability configuration.

            
            

            - **capabilityNamespace** *(string) --* 

              The namespace of the capability configuration. For example, if you configure OPC-UA sources from the IoT SiteWise console, your OPC-UA capability configuration has the namespace ``iotsitewise:opcuacollector:version`` , where ``version`` is a number such as ``1`` .

              
            

            - **capabilitySyncStatus** *(string) --* 

              The synchronization status of the capability configuration. The sync status can be one of the following:

               

               
              * ``IN_SYNC`` – The gateway is running the capability configuration. 
               
              * ``OUT_OF_SYNC`` – The gateway hasn't received the capability configuration. 
               
              * ``SYNC_FAILED`` – The gateway rejected the capability configuration. 
               

              
        
      
        

        - **creationDate** *(datetime) --* 

          The date the gateway was created, in Unix epoch time.

          
        

        - **lastUpdateDate** *(datetime) --* 

          The date the gateway was last updated, in Unix epoch time.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_gateway_capability_configuration(**kwargs)

    

    Retrieves information about a gateway capability configuration. Each gateway capability defines data sources for a gateway. A capability configuration can contain multiple data source configurations. If you define OPC-UA sources for a gateway in the IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To list all capability configurations for a gateway, use `DescribeGateway <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeGatewayCapabilityConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.describe_gateway_capability_configuration(
          gatewayId='string',
          capabilityNamespace='string'
      )
    :type gatewayId: string
    :param gatewayId: **[REQUIRED]** 

      The ID of the gateway that defines the capability configuration.

      

    
    :type capabilityNamespace: string
    :param capabilityNamespace: **[REQUIRED]** 

      The namespace of the capability configuration. For example, if you configure OPC-UA sources from the IoT SiteWise console, your OPC-UA capability configuration has the namespace ``iotsitewise:opcuacollector:version`` , where ``version`` is a number such as ``1`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewayId': 'string',
            'capabilityNamespace': 'string',
            'capabilityConfiguration': 'string',
            'capabilitySyncStatus': 'IN_SYNC'|'OUT_OF_SYNC'|'SYNC_FAILED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewayId** *(string) --* 

          The ID of the gateway that defines the capability configuration.

          
        

        - **capabilityNamespace** *(string) --* 

          The namespace of the gateway capability.

          
        

        - **capabilityConfiguration** *(string) --* 

          The JSON document that defines the gateway capability's configuration. For more information, see `Configuring data sources (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/configure-sources.html#configure-source-cli>`__ in the *IoT SiteWise User Guide* .

          
        

        - **capabilitySyncStatus** *(string) --* 

          The synchronization status of the capability configuration. The sync status can be one of the following:

           

           
          * ``IN_SYNC`` – The gateway is running the capability configuration. 
           
          * ``OUT_OF_SYNC`` – The gateway hasn't received the capability configuration. 
           
          * ``SYNC_FAILED`` – The gateway rejected the capability configuration. 
           

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_logging_options()

    

    Retrieves the current IoT SiteWise logging options.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeLoggingOptions>`_    


    **Request Syntax** 
    ::

      response = client.describe_logging_options()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'loggingOptions': {
                'level': 'ERROR'|'INFO'|'OFF'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **loggingOptions** *(dict) --* 

          The current logging options.

          
          

          - **level** *(string) --* 

            The IoT SiteWise logging verbosity level.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_portal(**kwargs)

    

    Retrieves information about a portal.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribePortal>`_    


    **Request Syntax** 
    ::

      response = client.describe_portal(
          portalId='string'
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'portalId': 'string',
            'portalArn': 'string',
            'portalName': 'string',
            'portalDescription': 'string',
            'portalClientId': 'string',
            'portalStartUrl': 'string',
            'portalContactEmail': 'string',
            'portalStatus': {
                'state': 'CREATING'|'UPDATING'|'DELETING'|'ACTIVE'|'FAILED',
                'error': {
                    'code': 'INTERNAL_FAILURE'|'VALIDATION_ERROR'|'LIMIT_EXCEEDED',
                    'message': 'string'
                }
            },
            'portalCreationDate': datetime(2015, 1, 1),
            'portalLastUpdateDate': datetime(2015, 1, 1),
            'portalLogoImageLocation': {
                'id': 'string',
                'url': 'string'
            },
            'roleArn': 'string',
            'portalAuthMode': 'IAM'|'SSO',
            'notificationSenderEmail': 'string',
            'alarms': {
                'alarmRoleArn': 'string',
                'notificationLambdaArn': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **portalId** *(string) --* 

          The ID of the portal.

          
        

        - **portalArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the portal, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:portal/${PortalId}``  

          
        

        - **portalName** *(string) --* 

          The name of the portal.

          
        

        - **portalDescription** *(string) --* 

          The portal's description.

          
        

        - **portalClientId** *(string) --* 

          The Amazon Web Services SSO application generated client ID (used with Amazon Web Services SSO APIs). IoT SiteWise includes ``portalClientId`` for only portals that use Amazon Web Services SSO to authenticate users.

          
        

        - **portalStartUrl** *(string) --* 

          The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use Amazon Web Services SSO for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.

          
        

        - **portalContactEmail** *(string) --* 

          The Amazon Web Services administrator's contact email address.

          
        

        - **portalStatus** *(dict) --* 

          The current status of the portal, which contains a state and any error message.

          
          

          - **state** *(string) --* 

            The current state of the portal.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
        

        - **portalCreationDate** *(datetime) --* 

          The date the portal was created, in Unix epoch time.

          
        

        - **portalLastUpdateDate** *(datetime) --* 

          The date the portal was last updated, in Unix epoch time.

          
        

        - **portalLogoImageLocation** *(dict) --* 

          The portal's logo image, which is available at a URL.

          
          

          - **id** *(string) --* 

            The ID of the image.

            
          

          - **url** *(string) --* 

            The URL where the image is available. The URL is valid for 15 minutes so that you can view and download the image

            
      
        

        - **roleArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see `Using service roles for IoT SiteWise Monitor <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html>`__ in the *IoT SiteWise User Guide* .

          
        

        - **portalAuthMode** *(string) --* 

          The service to use to authenticate users to the portal.

          
        

        - **notificationSenderEmail** *(string) --* 

          The email address that sends alarm notifications.

          
        

        - **alarms** *(dict) --* 

          Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal.

          
          

          - **alarmRoleArn** *(string) --* 

            The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the IAM role that allows the alarm to perform actions and access Amazon Web Services resources and services, such as IoT Events.

            
          

          - **notificationLambdaArn** *(string) --* 

            The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Lambda function that manages alarm notifications. For more information, see `Managing alarm notifications <https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html>`__ in the *IoT Events Developer Guide* .

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_project(**kwargs)

    

    Retrieves information about a project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeProject>`_    


    **Request Syntax** 
    ::

      response = client.describe_project(
          projectId='string'
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'projectId': 'string',
            'projectArn': 'string',
            'projectName': 'string',
            'portalId': 'string',
            'projectDescription': 'string',
            'projectCreationDate': datetime(2015, 1, 1),
            'projectLastUpdateDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **projectId** *(string) --* 

          The ID of the project.

          
        

        - **projectArn** *(string) --* 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the project, which has the following format.

           

           ``arn:${Partition}:iotsitewise:${Region}:${Account}:project/${ProjectId}``  

          
        

        - **projectName** *(string) --* 

          The name of the project.

          
        

        - **portalId** *(string) --* 

          The ID of the portal that the project is in.

          
        

        - **projectDescription** *(string) --* 

          The project's description.

          
        

        - **projectCreationDate** *(datetime) --* 

          The date the project was created, in Unix epoch time.

          
        

        - **projectLastUpdateDate** *(datetime) --* 

          The date the project was last updated, in Unix epoch time.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_storage_configuration()

    

    Retrieves information about the storage configuration for IoT SiteWise.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeStorageConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.describe_storage_configuration()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'storageType': 'SITEWISE_DEFAULT_STORAGE'|'MULTI_LAYER_STORAGE',
            'multiLayerStorage': {
                'customerManagedS3Storage': {
                    's3ResourceArn': 'string',
                    'roleArn': 'string'
                }
            },
            'configurationStatus': {
                'state': 'ACTIVE'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            },
            'lastUpdateDate': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **storageType** *(string) --* 

          The type of storage that you specified for your data. The storage type can be one of the following values:

           

           
          * ``SITEWISE_DEFAULT_STORAGE`` – IoT SiteWise replicates your data into a service managed database. 
           
          * ``MULTI_LAYER_STORAGE`` – IoT SiteWise replicates your data into a service managed database and saves a copy of your raw data and metadata in an Amazon S3 object that you specified. 
           

          
        

        - **multiLayerStorage** *(dict) --* 

          Contains information about the storage destination.

          
          

          - **customerManagedS3Storage** *(dict) --* 

            Contains information about a customer managed Amazon S3 bucket.

            
            

            - **s3ResourceArn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Amazon S3 object. For more information about how to find the ARN for an Amazon S3 object, see `Amazon S3 resources <https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-arn-format.html>`__ in the *Amazon Simple Storage Service User Guide* .

              
            

            - **roleArn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Identity and Access Management role that allows IoT SiteWise to send data to Amazon S3.

              
        
      
        

        - **configurationStatus** *(dict) --* 

          Contains current status information for the configuration.

          
          

          - **state** *(string) --* 

            The current state of the configuration.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
        

        - **lastUpdateDate** *(datetime) --* 

          The date the storage configuration was last updated, in Unix epoch time.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: disassociate_assets(**kwargs)

    

    Disassociates a child asset from the given parent asset through a hierarchy defined in the parent asset's model.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DisassociateAssets>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_assets(
          assetId='string',
          hierarchyId='string',
          childAssetId='string',
          clientToken='string'
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the parent asset from which to disassociate the child asset.

      

    
    :type hierarchyId: string
    :param hierarchyId: **[REQUIRED]** 

      The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type childAssetId: string
    :param childAssetId: **[REQUIRED]** 

      The ID of the child asset to disassociate.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_asset_property_aggregates(**kwargs)

    

    Gets aggregated values for an asset property. For more information, see `Querying aggregates <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#aggregates>`__ in the *IoT SiteWise User Guide* .

     

    To identify an asset property, you must specify one of the following:

     

     
    * The ``assetId`` and ``propertyId`` of an asset property. 
     
    * A ``propertyAlias`` , which is a data stream alias (for example, ``/company/windfarm/3/turbine/7/temperature`` ). To define an asset property's alias, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ . 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/GetAssetPropertyAggregates>`_    


    **Request Syntax** 
    ::

      response = client.get_asset_property_aggregates(
          assetId='string',
          propertyId='string',
          propertyAlias='string',
          aggregateTypes=[
              'AVERAGE'|'COUNT'|'MAXIMUM'|'MINIMUM'|'SUM'|'STANDARD_DEVIATION',
          ],
          resolution='string',
          qualities=[
              'GOOD'|'BAD'|'UNCERTAIN',
          ],
          startDate=datetime(2015, 1, 1),
          endDate=datetime(2015, 1, 1),
          timeOrdering='ASCENDING'|'DESCENDING',
          nextToken='string',
          maxResults=123
      )
    :type assetId: string
    :param assetId: 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: 

      The ID of the asset property.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type aggregateTypes: list
    :param aggregateTypes: **[REQUIRED]** 

      The data aggregating function.

      

    
      - *(string) --* 

      
  
    :type resolution: string
    :param resolution: **[REQUIRED]** 

      The time interval over which to aggregate data.

      

    
    :type qualities: list
    :param qualities: 

      The quality by which to filter asset data.

      

    
      - *(string) --* 

      
  
    :type startDate: datetime
    :param startDate: **[REQUIRED]** 

      The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type endDate: datetime
    :param endDate: **[REQUIRED]** 

      The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type timeOrdering: string
    :param timeOrdering: 

      The chronological sorting order of the requested information.

       

      Default: ``ASCENDING``  

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 100

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'aggregatedValues': [
                {
                    'timestamp': datetime(2015, 1, 1),
                    'quality': 'GOOD'|'BAD'|'UNCERTAIN',
                    'value': {
                        'average': 123.0,
                        'count': 123.0,
                        'maximum': 123.0,
                        'minimum': 123.0,
                        'sum': 123.0,
                        'standardDeviation': 123.0
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **aggregatedValues** *(list) --* 

          The requested aggregated values.

          
          

          - *(dict) --* 

            Contains aggregated asset property values (for example, average, minimum, and maximum).

            
            

            - **timestamp** *(datetime) --* 

              The date the aggregating computations occurred, in Unix epoch time.

              
            

            - **quality** *(string) --* 

              The quality of the aggregated data.

              
            

            - **value** *(dict) --* 

              The value of the aggregates.

              
              

              - **average** *(float) --* 

                The average (mean) value of the time series over a time interval window.

                
              

              - **count** *(float) --* 

                The count of data points in the time series over a time interval window.

                
              

              - **maximum** *(float) --* 

                The maximum value of the time series over a time interval window.

                
              

              - **minimum** *(float) --* 

                The minimum value of the time series over a time interval window.

                
              

              - **sum** *(float) --* 

                The sum of the time series over a time interval window.

                
              

              - **standardDeviation** *(float) --* 

                The standard deviation of the time series over a time interval window.

                
          
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: get_asset_property_value(**kwargs)

    

    Gets an asset property's current value. For more information, see `Querying current values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#current-values>`__ in the *IoT SiteWise User Guide* .

     

    To identify an asset property, you must specify one of the following:

     

     
    * The ``assetId`` and ``propertyId`` of an asset property. 
     
    * A ``propertyAlias`` , which is a data stream alias (for example, ``/company/windfarm/3/turbine/7/temperature`` ). To define an asset property's alias, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ . 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/GetAssetPropertyValue>`_    


    **Request Syntax** 
    ::

      response = client.get_asset_property_value(
          assetId='string',
          propertyId='string',
          propertyAlias='string'
      )
    :type assetId: string
    :param assetId: 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: 

      The ID of the asset property.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'propertyValue': {
                'value': {
                    'stringValue': 'string',
                    'integerValue': 123,
                    'doubleValue': 123.0,
                    'booleanValue': True|False
                },
                'timestamp': {
                    'timeInSeconds': 123,
                    'offsetInNanos': 123
                },
                'quality': 'GOOD'|'BAD'|'UNCERTAIN'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **propertyValue** *(dict) --* 

          The current asset property value.

          
          

          - **value** *(dict) --* 

            The value of the asset property (see ``Variant`` ).

            
            

            - **stringValue** *(string) --* 

              Asset property data of type string (sequence of characters).

              
            

            - **integerValue** *(integer) --* 

              Asset property data of type integer (whole number).

              
            

            - **doubleValue** *(float) --* 

              Asset property data of type double (floating point number).

              
            

            - **booleanValue** *(boolean) --* 

              Asset property data of type Boolean (true or false).

              
        
          

          - **timestamp** *(dict) --* 

            The timestamp of the asset property value.

            
            

            - **timeInSeconds** *(integer) --* 

              The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by ``offsetInNanos`` .

              
            

            - **offsetInNanos** *(integer) --* 

              The nanosecond offset from ``timeInSeconds`` .

              
        
          

          - **quality** *(string) --* 

            The quality of the asset property value.

            
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: get_asset_property_value_history(**kwargs)

    

    Gets the history of an asset property's values. For more information, see `Querying historical values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/query-industrial-data.html#historical-values>`__ in the *IoT SiteWise User Guide* .

     

    To identify an asset property, you must specify one of the following:

     

     
    * The ``assetId`` and ``propertyId`` of an asset property. 
     
    * A ``propertyAlias`` , which is a data stream alias (for example, ``/company/windfarm/3/turbine/7/temperature`` ). To define an asset property's alias, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ . 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/GetAssetPropertyValueHistory>`_    


    **Request Syntax** 
    ::

      response = client.get_asset_property_value_history(
          assetId='string',
          propertyId='string',
          propertyAlias='string',
          startDate=datetime(2015, 1, 1),
          endDate=datetime(2015, 1, 1),
          qualities=[
              'GOOD'|'BAD'|'UNCERTAIN',
          ],
          timeOrdering='ASCENDING'|'DESCENDING',
          nextToken='string',
          maxResults=123
      )
    :type assetId: string
    :param assetId: 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: 

      The ID of the asset property.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type startDate: datetime
    :param startDate: 

      The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type endDate: datetime
    :param endDate: 

      The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type qualities: list
    :param qualities: 

      The quality by which to filter asset data.

      

    
      - *(string) --* 

      
  
    :type timeOrdering: string
    :param timeOrdering: 

      The chronological sorting order of the requested information.

       

      Default: ``ASCENDING``  

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 100

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetPropertyValueHistory': [
                {
                    'value': {
                        'stringValue': 'string',
                        'integerValue': 123,
                        'doubleValue': 123.0,
                        'booleanValue': True|False
                    },
                    'timestamp': {
                        'timeInSeconds': 123,
                        'offsetInNanos': 123
                    },
                    'quality': 'GOOD'|'BAD'|'UNCERTAIN'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetPropertyValueHistory** *(list) --* 

          The asset property's value history.

          
          

          - *(dict) --* 

            Contains asset property value information.

            
            

            - **value** *(dict) --* 

              The value of the asset property (see ``Variant`` ).

              
              

              - **stringValue** *(string) --* 

                Asset property data of type string (sequence of characters).

                
              

              - **integerValue** *(integer) --* 

                Asset property data of type integer (whole number).

                
              

              - **doubleValue** *(float) --* 

                Asset property data of type double (floating point number).

                
              

              - **booleanValue** *(boolean) --* 

                Asset property data of type Boolean (true or false).

                
          
            

            - **timestamp** *(dict) --* 

              The timestamp of the asset property value.

              
              

              - **timeInSeconds** *(integer) --* 

                The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by ``offsetInNanos`` .

                
              

              - **offsetInNanos** *(integer) --* 

                The nanosecond offset from ``timeInSeconds`` .

                
          
            

            - **quality** *(string) --* 

              The quality of the asset property value.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: get_interpolated_asset_property_values(**kwargs)

    

    Get interpolated values for an asset property for a specified time interval, during a period of time. For example, you can use the this operation to return the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days.

     

    To identify an asset property, you must specify one of the following:

     

     
    * The ``assetId`` and ``propertyId`` of an asset property. 
     
    * A ``propertyAlias`` , which is a data stream alias (for example, ``/company/windfarm/3/turbine/7/temperature`` ). To define an asset property's alias, see `UpdateAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetProperty.html>`__ . 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/GetInterpolatedAssetPropertyValues>`_    


    **Request Syntax** 
    ::

      response = client.get_interpolated_asset_property_values(
          assetId='string',
          propertyId='string',
          propertyAlias='string',
          startTimeInSeconds=123,
          startTimeOffsetInNanos=123,
          endTimeInSeconds=123,
          endTimeOffsetInNanos=123,
          quality='GOOD'|'BAD'|'UNCERTAIN',
          intervalInSeconds=123,
          nextToken='string',
          maxResults=123,
          type='string'
      )
    :type assetId: string
    :param assetId: 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: 

      The ID of the asset property.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type startTimeInSeconds: integer
    :param startTimeInSeconds: **[REQUIRED]** 

      The exclusive start of the range from which to interpolate data, expressed in seconds in Unix epoch time.

      

    
    :type startTimeOffsetInNanos: integer
    :param startTimeOffsetInNanos: 

      The nanosecond offset converted from ``startTimeInSeconds`` .

      

    
    :type endTimeInSeconds: integer
    :param endTimeInSeconds: **[REQUIRED]** 

      The inclusive end of the range from which to interpolate data, expressed in seconds in Unix epoch time.

      

    
    :type endTimeOffsetInNanos: integer
    :param endTimeOffsetInNanos: 

      The nanosecond offset converted from ``endTimeInSeconds`` .

      

    
    :type quality: string
    :param quality: **[REQUIRED]** 

      The quality of the asset property value. You can use this parameter as a filter to choose only the asset property values that have a specific quality.

      

    
    :type intervalInSeconds: integer
    :param intervalInSeconds: **[REQUIRED]** 

      The time interval in seconds over which to interpolate data. Each interval starts when the previous one ends.

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request. If not specified, the default value is 10.

      

    
    :type type: string
    :param type: **[REQUIRED]** 

      The interpolation type.

       

      Valid values: ``LINEAR_INTERPOLATION``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'interpolatedAssetPropertyValues': [
                {
                    'timestamp': {
                        'timeInSeconds': 123,
                        'offsetInNanos': 123
                    },
                    'value': {
                        'stringValue': 'string',
                        'integerValue': 123,
                        'doubleValue': 123.0,
                        'booleanValue': True|False
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **interpolatedAssetPropertyValues** *(list) --* 

          The requested interpolated values.

          
          

          - *(dict) --* 

            Contains information about an interpolated asset property value.

            
            

            - **timestamp** *(dict) --* 

              Contains a timestamp with optional nanosecond granularity.

              
              

              - **timeInSeconds** *(integer) --* 

                The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by ``offsetInNanos`` .

                
              

              - **offsetInNanos** *(integer) --* 

                The nanosecond offset from ``timeInSeconds`` .

                
          
            

            - **value** *(dict) --* 

              Contains an asset property value (of a single type only).

              
              

              - **stringValue** *(string) --* 

                Asset property data of type string (sequence of characters).

                
              

              - **integerValue** *(integer) --* 

                Asset property data of type integer (whole number).

                
              

              - **doubleValue** *(float) --* 

                Asset property data of type double (floating point number).

                
              

              - **booleanValue** *(boolean) --* 

                Asset property data of type Boolean (true or false).

                
          
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ServiceUnavailableException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_access_policies(**kwargs)

    

    Retrieves a paginated list of access policies for an identity (an Amazon Web Services SSO user, an Amazon Web Services SSO group, or an IAM user) or an IoT SiteWise Monitor resource (a portal or project).

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAccessPolicies>`_    


    **Request Syntax** 
    ::

      response = client.list_access_policies(
          identityType='USER'|'GROUP'|'IAM',
          identityId='string',
          resourceType='PORTAL'|'PROJECT',
          resourceId='string',
          iamArn='string',
          nextToken='string',
          maxResults=123
      )
    :type identityType: string
    :param identityType: 

      The type of identity (Amazon Web Services SSO user, Amazon Web Services SSO group, or IAM user). This parameter is required if you specify ``identityId`` .

      

    
    :type identityId: string
    :param identityId: 

      The ID of the identity. This parameter is required if you specify ``USER`` or ``GROUP`` for ``identityType`` .

      

    
    :type resourceType: string
    :param resourceType: 

      The type of resource (portal or project). This parameter is required if you specify ``resourceId`` .

      

    
    :type resourceId: string
    :param resourceId: 

      The ID of the resource. This parameter is required if you specify ``resourceType`` .

      

    
    :type iamArn: string
    :param iamArn: 

      The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* . This parameter is required if you specify ``IAM`` for ``identityType`` .

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'accessPolicySummaries': [
                {
                    'id': 'string',
                    'identity': {
                        'user': {
                            'id': 'string'
                        },
                        'group': {
                            'id': 'string'
                        },
                        'iamUser': {
                            'arn': 'string'
                        },
                        'iamRole': {
                            'arn': 'string'
                        }
                    },
                    'resource': {
                        'portal': {
                            'id': 'string'
                        },
                        'project': {
                            'id': 'string'
                        }
                    },
                    'permission': 'ADMINISTRATOR'|'VIEWER',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **accessPolicySummaries** *(list) --* 

          A list that summarizes each access policy.

          
          

          - *(dict) --* 

            Contains an access policy that defines an identity's access to an IoT SiteWise Monitor resource.

            
            

            - **id** *(string) --* 

              The ID of the access policy.

              
            

            - **identity** *(dict) --* 

              The identity (an Amazon Web Services SSO user, an Amazon Web Services SSO group, or an IAM user).

              
              

              - **user** *(dict) --* 

                An Amazon Web Services SSO user identity.

                
                

                - **id** *(string) --* 

                  The Amazon Web Services SSO ID of the user.

                  
            
              

              - **group** *(dict) --* 

                An Amazon Web Services SSO group identity.

                
                

                - **id** *(string) --* 

                  The Amazon Web Services SSO ID of the group.

                  
            
              

              - **iamUser** *(dict) --* 

                An IAM user identity.

                
                

                - **arn** *(string) --* 

                  The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

                   

                  .. note::

                     

                    If you delete the IAM user, access policies that contain this identity include an empty ``arn`` . You can delete the access policy for the IAM user that no longer exists.

                     

                  
            
              

              - **iamRole** *(dict) --* 

                An IAM role identity.

                
                

                - **arn** *(string) --* 

                  The ARN of the IAM role. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

                  
            
          
            

            - **resource** *(dict) --* 

              The IoT SiteWise Monitor resource (a portal or project).

              
              

              - **portal** *(dict) --* 

                A portal resource.

                
                

                - **id** *(string) --* 

                  The ID of the portal.

                  
            
              

              - **project** *(dict) --* 

                A project resource.

                
                

                - **id** *(string) --* 

                  The ID of the project.

                  
            
          
            

            - **permission** *(string) --* 

              The permissions for the access policy. Note that a project ``ADMINISTRATOR`` is also known as a project owner.

              
            

            - **creationDate** *(datetime) --* 

              The date the access policy was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the access policy was last updated, in Unix epoch time.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_asset_models(**kwargs)

    

    Retrieves a paginated list of summaries of all asset models.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssetModels>`_    


    **Request Syntax** 
    ::

      response = client.list_asset_models(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetModelSummaries': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'status': {
                        'state': 'CREATING'|'ACTIVE'|'UPDATING'|'PROPAGATING'|'DELETING'|'FAILED',
                        'error': {
                            'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                            'message': 'string'
                        }
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetModelSummaries** *(list) --* 

          A list that summarizes each asset model.

          
          

          - *(dict) --* 

            Contains a summary of an asset model.

            
            

            - **id** *(string) --* 

              The ID of the asset model (used with IoT SiteWise APIs).

              
            

            - **arn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset model, which has the following format.

               

               ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset-model/${AssetModelId}``  

              
            

            - **name** *(string) --* 

              The name of the asset model.

              
            

            - **description** *(string) --* 

              The asset model description.

              
            

            - **creationDate** *(datetime) --* 

              The date the asset model was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the asset model was last updated, in Unix epoch time.

              
            

            - **status** *(dict) --* 

              The current status of the asset model.

              
              

              - **state** *(string) --* 

                The current state of the asset model.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_asset_relationships(**kwargs)

    

    Retrieves a paginated list of asset relationships for an asset. You can use this operation to identify an asset's root asset and all associated assets between that asset and its root.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssetRelationships>`_    


    **Request Syntax** 
    ::

      response = client.list_asset_relationships(
          assetId='string',
          traversalType='PATH_TO_ROOT',
          nextToken='string',
          maxResults=123
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset.

      

    
    :type traversalType: string
    :param traversalType: **[REQUIRED]** 

      The type of traversal to use to identify asset relationships. Choose the following option:

       

       
      * ``PATH_TO_ROOT`` – Identify the asset's parent assets up to the root asset. The asset that you specify in ``assetId`` is the first result in the list of ``assetRelationshipSummaries`` , and the root asset is the last result. 
       

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetRelationshipSummaries': [
                {
                    'hierarchyInfo': {
                        'parentAssetId': 'string',
                        'childAssetId': 'string'
                    },
                    'relationshipType': 'HIERARCHY'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetRelationshipSummaries** *(list) --* 

          A list that summarizes each asset relationship.

          
          

          - *(dict) --* 

            Contains information about assets that are related to one another.

            
            

            - **hierarchyInfo** *(dict) --* 

              The assets that are related through an asset hierarchy.

               

              This object is present if the ``relationshipType`` is ``HIERARCHY`` .

              
              

              - **parentAssetId** *(string) --* 

                The ID of the parent asset in this asset relationship.

                
              

              - **childAssetId** *(string) --* 

                The ID of the child asset in this asset relationship.

                
          
            

            - **relationshipType** *(string) --* 

              The relationship type of the assets in this relationship. This value is one of the following:

               

               
              * ``HIERARCHY`` – The assets are related through an asset hierarchy. If you specify this relationship type, this asset relationship includes the ``hierarchyInfo`` object. 
               

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_assets(**kwargs)

    

    Retrieves a paginated list of asset summaries.

     

    You can use this operation to do the following:

     

     
    * List assets based on a specific asset model. 
     
    * List top-level assets. 
     

     

    You can't use this operation to list all assets. To retrieve summaries for all of your assets, use `ListAssetModels <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_ListAssetModels.html>`__ to get all of your asset model IDs. Then, use ListAssets to get all assets for each asset model.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssets>`_    


    **Request Syntax** 
    ::

      response = client.list_assets(
          nextToken='string',
          maxResults=123,
          assetModelId='string',
          filter='ALL'|'TOP_LEVEL'
      )
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    :type assetModelId: string
    :param assetModelId: 

      The ID of the asset model by which to filter the list of assets. This parameter is required if you choose ``ALL`` for ``filter`` .

      

    
    :type filter: string
    :param filter: 

      The filter for the requested list of assets. Choose one of the following options:

       

       
      * ``ALL`` – The list includes all assets for a given asset model ID. The ``assetModelId`` parameter is required if you filter by ``ALL`` . 
       
      * ``TOP_LEVEL`` – The list includes only top-level assets in the asset hierarchy tree. 
       

       

      Default: ``ALL``  

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetSummaries': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'assetModelId': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'status': {
                        'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                        'error': {
                            'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                            'message': 'string'
                        }
                    },
                    'hierarchies': [
                        {
                            'id': 'string',
                            'name': 'string'
                        },
                    ]
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetSummaries** *(list) --* 

          A list that summarizes each asset.

          
          

          - *(dict) --* 

            Contains a summary of an asset.

            
            

            - **id** *(string) --* 

              The ID of the asset.

              
            

            - **arn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset, which has the following format.

               

               ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}``  

              
            

            - **name** *(string) --* 

              The name of the asset.

              
            

            - **assetModelId** *(string) --* 

              The ID of the asset model used to create this asset.

              
            

            - **creationDate** *(datetime) --* 

              The date the asset was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the asset was last updated, in Unix epoch time.

              
            

            - **status** *(dict) --* 

              The current status of the asset.

              
              

              - **state** *(string) --* 

                The current status of the asset.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
            

            - **hierarchies** *(list) --* 

              A list of asset hierarchies that each contain a ``hierarchyId`` . A hierarchy specifies allowed parent/child asset relationships.

              
              

              - *(dict) --* 

                Describes an asset hierarchy that contains a hierarchy's name and ID.

                
                

                - **id** *(string) --* 

                  The ID of the hierarchy. This ID is a ``hierarchyId`` .

                  
                

                - **name** *(string) --* 

                  The hierarchy name provided in the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation.

                  
            
          
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_associated_assets(**kwargs)

    

    Retrieves a paginated list of associated assets.

     

    You can use this operation to do the following:

     

     
    * List child assets associated to a parent asset by a hierarchy that you specify. 
     
    * List an asset's parent asset. 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssociatedAssets>`_    


    **Request Syntax** 
    ::

      response = client.list_associated_assets(
          assetId='string',
          hierarchyId='string',
          traversalDirection='PARENT'|'CHILD',
          nextToken='string',
          maxResults=123
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset to query.

      

    
    :type hierarchyId: string
    :param hierarchyId: 

      The ID of the hierarchy by which child assets are associated to the asset. To find a hierarchy ID, use the `DescribeAsset <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAsset.html>`__ or `DescribeAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetModel.html>`__ operations. This parameter is required if you choose ``CHILD`` for ``traversalDirection`` .

       

      For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type traversalDirection: string
    :param traversalDirection: 

      The direction to list associated assets. Choose one of the following options:

       

       
      * ``CHILD`` – The list includes all child assets associated to the asset. The ``hierarchyId`` parameter is required if you choose ``CHILD`` . 
       
      * ``PARENT`` – The list includes the asset's parent asset. 
       

       

      Default: ``CHILD``  

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetSummaries': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'assetModelId': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'status': {
                        'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                        'error': {
                            'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                            'message': 'string'
                        }
                    },
                    'hierarchies': [
                        {
                            'id': 'string',
                            'name': 'string'
                        },
                    ]
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetSummaries** *(list) --* 

          A list that summarizes the associated assets.

          
          

          - *(dict) --* 

            Contains a summary of an associated asset.

            
            

            - **id** *(string) --* 

              The ID of the asset.

              
            

            - **arn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset, which has the following format.

               

               ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}``  

              
            

            - **name** *(string) --* 

              The name of the asset.

              
            

            - **assetModelId** *(string) --* 

              The ID of the asset model used to create the asset.

              
            

            - **creationDate** *(datetime) --* 

              The date the asset was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the asset was last updated, in Unix epoch time.

              
            

            - **status** *(dict) --* 

              The current status of the asset.

              
              

              - **state** *(string) --* 

                The current status of the asset.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
            

            - **hierarchies** *(list) --* 

              A list of asset hierarchies that each contain a ``hierarchyId`` . A hierarchy specifies allowed parent/child asset relationships.

              
              

              - *(dict) --* 

                Describes an asset hierarchy that contains a hierarchy's name and ID.

                
                

                - **id** *(string) --* 

                  The ID of the hierarchy. This ID is a ``hierarchyId`` .

                  
                

                - **name** *(string) --* 

                  The hierarchy name provided in the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation.

                  
            
          
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_dashboards(**kwargs)

    

    Retrieves a paginated list of dashboards for an IoT SiteWise Monitor project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListDashboards>`_    


    **Request Syntax** 
    ::

      response = client.list_dashboards(
          projectId='string',
          nextToken='string',
          maxResults=123
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project.

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'dashboardSummaries': [
                {
                    'id': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **dashboardSummaries** *(list) --* 

          A list that summarizes each dashboard in the project.

          
          

          - *(dict) --* 

            Contains a dashboard summary.

            
            

            - **id** *(string) --* 

              The ID of the dashboard.

              
            

            - **name** *(string) --* 

              The name of the dashboard

              
            

            - **description** *(string) --* 

              The dashboard's description.

              
            

            - **creationDate** *(datetime) --* 

              The date the dashboard was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the dashboard was last updated, in Unix epoch time.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_gateways(**kwargs)

    

    Retrieves a paginated list of gateways.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListGateways>`_    


    **Request Syntax** 
    ::

      response = client.list_gateways(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewaySummaries': [
                {
                    'gatewayId': 'string',
                    'gatewayName': 'string',
                    'gatewayCapabilitySummaries': [
                        {
                            'capabilityNamespace': 'string',
                            'capabilitySyncStatus': 'IN_SYNC'|'OUT_OF_SYNC'|'SYNC_FAILED'
                        },
                    ],
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewaySummaries** *(list) --* 

          A list that summarizes each gateway.

          
          

          - *(dict) --* 

            Contains a summary of a gateway.

            
            

            - **gatewayId** *(string) --* 

              The ID of the gateway device.

              
            

            - **gatewayName** *(string) --* 

              The name of the asset.

              
            

            - **gatewayCapabilitySummaries** *(list) --* 

              A list of gateway capability summaries that each contain a namespace and status. Each gateway capability defines data sources for the gateway. To retrieve a capability configuration's definition, use `DescribeGatewayCapabilityConfiguration <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGatewayCapabilityConfiguration.html>`__ .

              
              

              - *(dict) --* 

                Contains a summary of a gateway capability configuration.

                
                

                - **capabilityNamespace** *(string) --* 

                  The namespace of the capability configuration. For example, if you configure OPC-UA sources from the IoT SiteWise console, your OPC-UA capability configuration has the namespace ``iotsitewise:opcuacollector:version`` , where ``version`` is a number such as ``1`` .

                  
                

                - **capabilitySyncStatus** *(string) --* 

                  The synchronization status of the capability configuration. The sync status can be one of the following:

                   

                   
                  * ``IN_SYNC`` – The gateway is running the capability configuration. 
                   
                  * ``OUT_OF_SYNC`` – The gateway hasn't received the capability configuration. 
                   
                  * ``SYNC_FAILED`` – The gateway rejected the capability configuration. 
                   

                  
            
          
            

            - **creationDate** *(datetime) --* 

              The date the gateway was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the gateway was last updated, in Unix epoch time.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_portals(**kwargs)

    

    Retrieves a paginated list of IoT SiteWise Monitor portals.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListPortals>`_    


    **Request Syntax** 
    ::

      response = client.list_portals(
          nextToken='string',
          maxResults=123
      )
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'portalSummaries': [
                {
                    'id': 'string',
                    'name': 'string',
                    'description': 'string',
                    'startUrl': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'roleArn': 'string',
                    'status': {
                        'state': 'CREATING'|'UPDATING'|'DELETING'|'ACTIVE'|'FAILED',
                        'error': {
                            'code': 'INTERNAL_FAILURE'|'VALIDATION_ERROR'|'LIMIT_EXCEEDED',
                            'message': 'string'
                        }
                    }
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **portalSummaries** *(list) --* 

          A list that summarizes each portal.

          
          

          - *(dict) --* 

            Contains a portal summary.

            
            

            - **id** *(string) --* 

              The ID of the portal.

              
            

            - **name** *(string) --* 

              The name of the portal.

              
            

            - **description** *(string) --* 

              The portal's description.

              
            

            - **startUrl** *(string) --* 

              The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use Amazon Web Services SSO for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.

              
            

            - **creationDate** *(datetime) --* 

              The date the portal was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the portal was last updated, in Unix epoch time.

              
            

            - **roleArn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see `Using service roles for IoT SiteWise Monitor <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html>`__ in the *IoT SiteWise User Guide* .

              
            

            - **status** *(dict) --* 

              Contains information about the current status of a portal.

              
              

              - **state** *(string) --* 

                The current state of the portal.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_project_assets(**kwargs)

    

    Retrieves a paginated list of assets associated with an IoT SiteWise Monitor project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListProjectAssets>`_    


    **Request Syntax** 
    ::

      response = client.list_project_assets(
          projectId='string',
          nextToken='string',
          maxResults=123
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project.

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetIds': [
                'string',
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetIds** *(list) --* 

          A list that contains the IDs of each asset associated with the project.

          
          

          - *(string) --* 
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_projects(**kwargs)

    

    Retrieves a paginated list of projects for an IoT SiteWise Monitor portal.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListProjects>`_    


    **Request Syntax** 
    ::

      response = client.list_projects(
          portalId='string',
          nextToken='string',
          maxResults=123
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal.

      

    
    :type nextToken: string
    :param nextToken: 

      The token to be used for the next set of paginated results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for each paginated request.

       

      Default: 50

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'projectSummaries': [
                {
                    'id': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **projectSummaries** *(list) --* 

          A list that summarizes each project in the portal.

          
          

          - *(dict) --* 

            Contains project summary information.

            
            

            - **id** *(string) --* 

              The ID of the project.

              
            

            - **name** *(string) --* 

              The name of the project.

              
            

            - **description** *(string) --* 

              The project's description.

              
            

            - **creationDate** *(datetime) --* 

              The date the project was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the project was last updated, in Unix epoch time.

              
        
      
        

        - **nextToken** *(string) --* 

          The token for the next set of results, or null if there are no additional results.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Retrieves the list of tags for an IoT SiteWise resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(dict) --* 

          The list of key-value pairs that contain metadata for the resource. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.UnauthorizedException`

    

  .. py:method:: put_default_encryption_configuration(**kwargs)

    

    Sets the default encryption configuration for the Amazon Web Services account. For more information, see `Key management <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/PutDefaultEncryptionConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_default_encryption_configuration(
          encryptionType='SITEWISE_DEFAULT_ENCRYPTION'|'KMS_BASED_ENCRYPTION',
          kmsKeyId='string'
      )
    :type encryptionType: string
    :param encryptionType: **[REQUIRED]** 

      The type of encryption used for the encryption configuration.

      

    
    :type kmsKeyId: string
    :param kmsKeyId: 

      The Key ID of the customer managed customer master key (CMK) used for KMS encryption. This is required if you use ``KMS_BASED_ENCRYPTION`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'encryptionType': 'SITEWISE_DEFAULT_ENCRYPTION'|'KMS_BASED_ENCRYPTION',
            'kmsKeyArn': 'string',
            'configurationStatus': {
                'state': 'ACTIVE'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **encryptionType** *(string) --* 

          The type of encryption used for the encryption configuration.

          
        

        - **kmsKeyArn** *(string) --* 

          The Key ARN of the KMS CMK used for KMS encryption if you use ``KMS_BASED_ENCRYPTION`` .

          
        

        - **configurationStatus** *(dict) --* 

          The status of the account configuration. This contains the ``ConfigurationState`` . If there is an error, it also contains the ``ErrorDetails`` .

          
          

          - **state** *(string) --* 

            The current state of the configuration.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: put_logging_options(**kwargs)

    

    Sets logging options for IoT SiteWise.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/PutLoggingOptions>`_    


    **Request Syntax** 
    ::

      response = client.put_logging_options(
          loggingOptions={
              'level': 'ERROR'|'INFO'|'OFF'
          }
      )
    :type loggingOptions: dict
    :param loggingOptions: **[REQUIRED]** 

      The logging options to set.

      

    
      - **level** *(string) --* **[REQUIRED]** 

        The IoT SiteWise logging verbosity level.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: put_storage_configuration(**kwargs)

    

    Configures storage settings for IoT SiteWise.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/PutStorageConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.put_storage_configuration(
          storageType='SITEWISE_DEFAULT_STORAGE'|'MULTI_LAYER_STORAGE',
          multiLayerStorage={
              'customerManagedS3Storage': {
                  's3ResourceArn': 'string',
                  'roleArn': 'string'
              }
          }
      )
    :type storageType: string
    :param storageType: **[REQUIRED]** 

      The type of storage that you specified for your data. The storage type can be one of the following values:

       

       
      * ``SITEWISE_DEFAULT_STORAGE`` – IoT SiteWise replicates your data into a service managed database. 
       
      * ``MULTI_LAYER_STORAGE`` – IoT SiteWise replicates your data into a service managed database and saves a copy of your raw data and metadata in an Amazon S3 object that you specified. 
       

      

    
    :type multiLayerStorage: dict
    :param multiLayerStorage: 

      Identifies a storage destination. If you specified ``MULTI_LAYER_STORAGE`` for the storage type, you must specify a ``MultiLayerStorage`` object.

      

    
      - **customerManagedS3Storage** *(dict) --* **[REQUIRED]** 

        Contains information about a customer managed Amazon S3 bucket.

        

      
        - **s3ResourceArn** *(string) --* **[REQUIRED]** 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Amazon S3 object. For more information about how to find the ARN for an Amazon S3 object, see `Amazon S3 resources <https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-arn-format.html>`__ in the *Amazon Simple Storage Service User Guide* .

          

        
        - **roleArn** *(string) --* **[REQUIRED]** 

          The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Identity and Access Management role that allows IoT SiteWise to send data to Amazon S3.

          

        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'storageType': 'SITEWISE_DEFAULT_STORAGE'|'MULTI_LAYER_STORAGE',
            'multiLayerStorage': {
                'customerManagedS3Storage': {
                    's3ResourceArn': 'string',
                    'roleArn': 'string'
                }
            },
            'configurationStatus': {
                'state': 'ACTIVE'|'UPDATE_IN_PROGRESS'|'UPDATE_FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **storageType** *(string) --* 

          The type of storage that you specified for your data. The storage type can be one of the following values:

           

           
          * ``SITEWISE_DEFAULT_STORAGE`` – IoT SiteWise replicates your data into a service managed database. 
           
          * ``MULTI_LAYER_STORAGE`` – IoT SiteWise replicates your data into a service managed database and saves a copy of your raw data and metadata in an Amazon S3 object that you specified. 
           

          
        

        - **multiLayerStorage** *(dict) --* 

          Contains information about the storage destination.

          
          

          - **customerManagedS3Storage** *(dict) --* 

            Contains information about a customer managed Amazon S3 bucket.

            
            

            - **s3ResourceArn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Amazon S3 object. For more information about how to find the ARN for an Amazon S3 object, see `Amazon S3 resources <https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-arn-format.html>`__ in the *Amazon Simple Storage Service User Guide* .

              
            

            - **roleArn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Identity and Access Management role that allows IoT SiteWise to send data to Amazon S3.

              
        
      
        

        - **configurationStatus** *(dict) --* 

          Contains current status information for the configuration.

          
          

          - **state** *(string) --* 

            The current state of the configuration.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds tags to an IoT SiteWise resource. If a tag already exists for the resource, this operation updates the tag's value.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags={
              'string': 'string'
          }
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the resource to tag.

      

    
    :type tags: dict
    :param tags: **[REQUIRED]** 

      A list of key-value pairs that contain metadata for the resource. For more information, see `Tagging your IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.UnauthorizedException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.TooManyTagsException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes a tag from an IoT SiteWise resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the resource to untag.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      A list of keys for tags to remove from the resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.UnauthorizedException`

    

  .. py:method:: update_access_policy(**kwargs)

    

    Updates an existing access policy that specifies an identity's access to an IoT SiteWise Monitor portal or project resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateAccessPolicy>`_    


    **Request Syntax** 
    ::

      response = client.update_access_policy(
          accessPolicyId='string',
          accessPolicyIdentity={
              'user': {
                  'id': 'string'
              },
              'group': {
                  'id': 'string'
              },
              'iamUser': {
                  'arn': 'string'
              },
              'iamRole': {
                  'arn': 'string'
              }
          },
          accessPolicyResource={
              'portal': {
                  'id': 'string'
              },
              'project': {
                  'id': 'string'
              }
          },
          accessPolicyPermission='ADMINISTRATOR'|'VIEWER',
          clientToken='string'
      )
    :type accessPolicyId: string
    :param accessPolicyId: **[REQUIRED]** 

      The ID of the access policy.

      

    
    :type accessPolicyIdentity: dict
    :param accessPolicyIdentity: **[REQUIRED]** 

      The identity for this access policy. Choose an Amazon Web Services SSO user, an Amazon Web Services SSO group, or an IAM user.

      

    
      - **user** *(dict) --* 

        An Amazon Web Services SSO user identity.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The Amazon Web Services SSO ID of the user.

          

        
      
      - **group** *(dict) --* 

        An Amazon Web Services SSO group identity.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The Amazon Web Services SSO ID of the group.

          

        
      
      - **iamUser** *(dict) --* 

        An IAM user identity.

        

      
        - **arn** *(string) --* **[REQUIRED]** 

          The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

           

          .. note::

             

            If you delete the IAM user, access policies that contain this identity include an empty ``arn`` . You can delete the access policy for the IAM user that no longer exists.

             

          

        
      
      - **iamRole** *(dict) --* 

        An IAM role identity.

        

      
        - **arn** *(string) --* **[REQUIRED]** 

          The ARN of the IAM role. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

          

        
      
    
    :type accessPolicyResource: dict
    :param accessPolicyResource: **[REQUIRED]** 

      The IoT SiteWise Monitor resource for this access policy. Choose either a portal or a project.

      

    
      - **portal** *(dict) --* 

        A portal resource.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The ID of the portal.

          

        
      
      - **project** *(dict) --* 

        A project resource.

        

      
        - **id** *(string) --* **[REQUIRED]** 

          The ID of the project.

          

        
      
    
    :type accessPolicyPermission: string
    :param accessPolicyPermission: **[REQUIRED]** 

      The permission level for this access policy. Note that a project ``ADMINISTRATOR`` is also known as a project owner.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_asset(**kwargs)

    

    Updates an asset's name. For more information, see `Updating assets and models <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html>`__ in the *IoT SiteWise User Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateAsset>`_    


    **Request Syntax** 
    ::

      response = client.update_asset(
          assetId='string',
          assetName='string',
          clientToken='string'
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset to update.

      

    
    :type assetName: string
    :param assetName: **[REQUIRED]** 

      A unique, friendly name for the asset.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetStatus** *(dict) --* 

          The status of the asset, which contains a state (``UPDATING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current status of the asset.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: update_asset_model(**kwargs)

    

    Updates an asset model and all of the assets that were created from the model. Each asset created from the model inherits the updated asset model's property and hierarchy definitions. For more information, see `Updating assets and models <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-assets-and-models.html>`__ in the *IoT SiteWise User Guide* .

     

    .. warning::

       

      This operation overwrites the existing model with the provided model. To avoid deleting your asset model's properties or hierarchies, you must include their IDs and definitions in the updated asset model payload. For more information, see `DescribeAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetModel.html>`__ .

       

      If you remove a property from an asset model, IoT SiteWise deletes all previous data for that property. If you remove a hierarchy definition from an asset model, IoT SiteWise disassociates every asset associated with that hierarchy. You can't change the type or data type of an existing property.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateAssetModel>`_    


    **Request Syntax** 
    ::

      response = client.update_asset_model(
          assetModelId='string',
          assetModelName='string',
          assetModelDescription='string',
          assetModelProperties=[
              {
                  'id': 'string',
                  'name': 'string',
                  'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                  'dataTypeSpec': 'string',
                  'unit': 'string',
                  'type': {
                      'attribute': {
                          'defaultValue': 'string'
                      },
                      'measurement': {}
                      ,
                      'transform': {
                          'expression': 'string',
                          'variables': [
                              {
                                  'name': 'string',
                                  'value': {
                                      'propertyId': 'string',
                                      'hierarchyId': 'string'
                                  }
                              },
                          ]
                      },
                      'metric': {
                          'expression': 'string',
                          'variables': [
                              {
                                  'name': 'string',
                                  'value': {
                                      'propertyId': 'string',
                                      'hierarchyId': 'string'
                                  }
                              },
                          ],
                          'window': {
                              'tumbling': {
                                  'interval': 'string'
                              }
                          }
                      }
                  }
              },
          ],
          assetModelHierarchies=[
              {
                  'id': 'string',
                  'name': 'string',
                  'childAssetModelId': 'string'
              },
          ],
          assetModelCompositeModels=[
              {
                  'name': 'string',
                  'description': 'string',
                  'type': 'string',
                  'properties': [
                      {
                          'id': 'string',
                          'name': 'string',
                          'dataType': 'STRING'|'INTEGER'|'DOUBLE'|'BOOLEAN'|'STRUCT',
                          'dataTypeSpec': 'string',
                          'unit': 'string',
                          'type': {
                              'attribute': {
                                  'defaultValue': 'string'
                              },
                              'measurement': {}
                              ,
                              'transform': {
                                  'expression': 'string',
                                  'variables': [
                                      {
                                          'name': 'string',
                                          'value': {
                                              'propertyId': 'string',
                                              'hierarchyId': 'string'
                                          }
                                      },
                                  ]
                              },
                              'metric': {
                                  'expression': 'string',
                                  'variables': [
                                      {
                                          'name': 'string',
                                          'value': {
                                              'propertyId': 'string',
                                              'hierarchyId': 'string'
                                          }
                                      },
                                  ],
                                  'window': {
                                      'tumbling': {
                                          'interval': 'string'
                                      }
                                  }
                              }
                          }
                      },
                  ]
              },
          ],
          clientToken='string'
      )
    :type assetModelId: string
    :param assetModelId: **[REQUIRED]** 

      The ID of the asset model to update.

      

    
    :type assetModelName: string
    :param assetModelName: **[REQUIRED]** 

      A unique, friendly name for the asset model.

      

    
    :type assetModelDescription: string
    :param assetModelDescription: 

      A description for the asset model.

      

    
    :type assetModelProperties: list
    :param assetModelProperties: 

      The updated property definitions of the asset model. For more information, see `Asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html>`__ in the *IoT SiteWise User Guide* .

       

      You can specify up to 200 properties per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(dict) --* 

        Contains information about an asset model property.

        

      
        - **id** *(string) --* 

          The ID of the asset model property.

          

        
        - **name** *(string) --* **[REQUIRED]** 

          The name of the asset model property.

          

        
        - **dataType** *(string) --* **[REQUIRED]** 

          The data type of the asset model property.

          

        
        - **dataTypeSpec** *(string) --* 

          The data type of the structure for this property. This parameter exists on properties that have the ``STRUCT`` data type.

          

        
        - **unit** *(string) --* 

          The unit of the asset model property, such as ``Newtons`` or ``RPM`` .

          

        
        - **type** *(dict) --* **[REQUIRED]** 

          The property type (see ``PropertyType`` ).

          

        
          - **attribute** *(dict) --* 

            Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

            

          
            - **defaultValue** *(string) --* 

              The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

              

            
          
          - **measurement** *(dict) --* 

            Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

            

          
          
          - **transform** *(dict) --* 

            Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

            

          
            - **expression** *(string) --* **[REQUIRED]** 

              The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

               

              For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

              

            
            - **variables** *(list) --* **[REQUIRED]** 

              The list of variables used in the expression.

              

            
              - *(dict) --* 

                Contains expression variable information.

                

              
                - **name** *(string) --* **[REQUIRED]** 

                  The friendly name of the variable to be used in the expression.

                  

                
                - **value** *(dict) --* **[REQUIRED]** 

                  The variable that identifies an asset property from which to use values.

                  

                
                  - **propertyId** *(string) --* **[REQUIRED]** 

                    The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                    

                  
                  - **hierarchyId** *(string) --* 

                    The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                     

                    You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                    

                  
                
              
          
          
          - **metric** *(dict) --* 

            Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

            

          
            - **expression** *(string) --* **[REQUIRED]** 

              The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

               

              For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

              

            
            - **variables** *(list) --* **[REQUIRED]** 

              The list of variables used in the expression.

              

            
              - *(dict) --* 

                Contains expression variable information.

                

              
                - **name** *(string) --* **[REQUIRED]** 

                  The friendly name of the variable to be used in the expression.

                  

                
                - **value** *(dict) --* **[REQUIRED]** 

                  The variable that identifies an asset property from which to use values.

                  

                
                  - **propertyId** *(string) --* **[REQUIRED]** 

                    The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                    

                  
                  - **hierarchyId** *(string) --* 

                    The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                     

                    You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                    

                  
                
              
          
            - **window** *(dict) --* **[REQUIRED]** 

              The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

              

            
              - **tumbling** *(dict) --* 

                The tumbling time interval window.

                

              
                - **interval** *(string) --* **[REQUIRED]** 

                  The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                   

                  When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                  

                
              
            
          
        
      
  
    :type assetModelHierarchies: list
    :param assetModelHierarchies: 

      The updated hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

       

      You can specify up to 10 hierarchies per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

      

    
      - *(dict) --* 

        Describes an asset hierarchy that contains a hierarchy's name, ID, and child asset model ID that specifies the type of asset that can be in this hierarchy.

        

      
        - **id** *(string) --* 

          The ID of the asset model hierarchy. This ID is a ``hierarchyId`` .

          

        
        - **name** *(string) --* **[REQUIRED]** 

          The name of the asset model hierarchy that you specify by using the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation.

          

        
        - **childAssetModelId** *(string) --* **[REQUIRED]** 

          The ID of the asset model. All assets in this hierarchy must be instances of the ``childAssetModelId`` asset model.

          

        
      
  
    :type assetModelCompositeModels: list
    :param assetModelCompositeModels: 

      The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model.

      

    
      - *(dict) --* 

        Contains information about a composite model in an asset model. This object contains the asset property definitions that you define in the composite model.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the composite model.

          

        
        - **description** *(string) --* 

          The description of the composite model.

          

        
        - **type** *(string) --* **[REQUIRED]** 

          The type of the composite model. For alarm composite models, this type is ``AWS/ALARM`` .

          

        
        - **properties** *(list) --* 

          The asset property definitions for this composite model.

          

        
          - *(dict) --* 

            Contains information about an asset model property.

            

          
            - **id** *(string) --* 

              The ID of the asset model property.

              

            
            - **name** *(string) --* **[REQUIRED]** 

              The name of the asset model property.

              

            
            - **dataType** *(string) --* **[REQUIRED]** 

              The data type of the asset model property.

              

            
            - **dataTypeSpec** *(string) --* 

              The data type of the structure for this property. This parameter exists on properties that have the ``STRUCT`` data type.

              

            
            - **unit** *(string) --* 

              The unit of the asset model property, such as ``Newtons`` or ``RPM`` .

              

            
            - **type** *(dict) --* **[REQUIRED]** 

              The property type (see ``PropertyType`` ).

              

            
              - **attribute** *(dict) --* 

                Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `IIoT <https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`__ wind turbine.

                

              
                - **defaultValue** *(string) --* 

                  The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`__ in the *IoT SiteWise User Guide* .

                  

                
              
              - **measurement** *(dict) --* 

                Specifies an asset measurement property. A measurement represents a device's raw sensor data stream, such as timestamped temperature values or timestamped power values.

                

              
              
              - **transform** *(dict) --* 

                Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.

                

              
                - **expression** *(string) --* **[REQUIRED]** 

                  The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  

                
                - **variables** *(list) --* **[REQUIRED]** 

                  The list of variables used in the expression.

                  

                
                  - *(dict) --* 

                    Contains expression variable information.

                    

                  
                    - **name** *(string) --* **[REQUIRED]** 

                      The friendly name of the variable to be used in the expression.

                      

                    
                    - **value** *(dict) --* **[REQUIRED]** 

                      The variable that identifies an asset property from which to use values.

                      

                    
                      - **propertyId** *(string) --* **[REQUIRED]** 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        

                      
                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        

                      
                    
                  
              
              
              - **metric** *(dict) --* 

                Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.

                

              
                - **expression** *(string) --* **[REQUIRED]** 

                  The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. 

                   

                  For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`__ in the *IoT SiteWise User Guide* .

                  

                
                - **variables** *(list) --* **[REQUIRED]** 

                  The list of variables used in the expression.

                  

                
                  - *(dict) --* 

                    Contains expression variable information.

                    

                  
                    - **name** *(string) --* **[REQUIRED]** 

                      The friendly name of the variable to be used in the expression.

                      

                    
                    - **value** *(dict) --* **[REQUIRED]** 

                      The variable that identifies an asset property from which to use values.

                      

                    
                      - **propertyId** *(string) --* **[REQUIRED]** 

                        The ID of the property to use as the variable. You can use the property ``name`` if it's from the same asset model.

                        

                      
                      - **hierarchyId** *(string) --* 

                        The ID of the hierarchy to query for the property ID. You can use the hierarchy's name instead of the hierarchy's ID.

                         

                        You use a hierarchy ID instead of a model ID because you can have several hierarchies using the same model and therefore the same ``propertyId`` . For example, you might have separately grouped assets that come from the same asset model. For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

                        

                      
                    
                  
              
                - **window** *(dict) --* **[REQUIRED]** 

                  The window (time interval) over which IoT SiteWise computes the metric's aggregation expression. IoT SiteWise computes one data point per ``window`` .

                  

                
                  - **tumbling** *(dict) --* 

                    The tumbling time interval window.

                    

                  
                    - **interval** *(string) --* **[REQUIRED]** 

                      The time interval for the tumbling window. Note that ``w`` represents weeks, ``d`` represents days, ``h`` represents hours, and ``m`` represents minutes. IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. 

                       

                      When IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. IoT SiteWise places the computed data point at the end of the interval.

                      

                    
                  
                
              
            
          
      
      
  
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetModelStatus': {
                'state': 'CREATING'|'ACTIVE'|'UPDATING'|'PROPAGATING'|'DELETING'|'FAILED',
                'error': {
                    'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetModelStatus** *(dict) --* 

          The status of the asset model, which contains a state (``UPDATING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current state of the asset model.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: update_asset_property(**kwargs)

    

    Updates an asset property's alias and notification state.

     

    .. warning::

       

      This operation overwrites the property's existing alias and notification state. To keep your existing property's alias or notification state, you must include the existing values in the UpdateAssetProperty request. For more information, see `DescribeAssetProperty <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetProperty.html>`__ .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateAssetProperty>`_    


    **Request Syntax** 
    ::

      response = client.update_asset_property(
          assetId='string',
          propertyId='string',
          propertyAlias='string',
          propertyNotificationState='ENABLED'|'DISABLED',
          clientToken='string'
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset to be updated.

      

    
    :type propertyId: string
    :param propertyId: **[REQUIRED]** 

      The ID of the asset property to be updated.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

       

      If you omit this parameter, the alias is removed from the property.

      

    
    :type propertyNotificationState: string
    :param propertyNotificationState: 

      The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see `Interacting with other services <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html>`__ in the *IoT SiteWise User Guide* .

       

      If you omit this parameter, the notification state is set to ``DISABLED`` .

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: update_dashboard(**kwargs)

    

    Updates an IoT SiteWise Monitor dashboard.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateDashboard>`_    


    **Request Syntax** 
    ::

      response = client.update_dashboard(
          dashboardId='string',
          dashboardName='string',
          dashboardDescription='string',
          dashboardDefinition='string',
          clientToken='string'
      )
    :type dashboardId: string
    :param dashboardId: **[REQUIRED]** 

      The ID of the dashboard to update.

      

    
    :type dashboardName: string
    :param dashboardName: **[REQUIRED]** 

      A new friendly name for the dashboard.

      

    
    :type dashboardDescription: string
    :param dashboardDescription: 

      A new description for the dashboard.

      

    
    :type dashboardDefinition: string
    :param dashboardDefinition: **[REQUIRED]** 

      The new dashboard definition, as specified in a JSON literal. For detailed information, see `Creating dashboards (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_gateway(**kwargs)

    

    Updates a gateway's name.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateGateway>`_    


    **Request Syntax** 
    ::

      response = client.update_gateway(
          gatewayId='string',
          gatewayName='string'
      )
    :type gatewayId: string
    :param gatewayId: **[REQUIRED]** 

      The ID of the gateway to update.

      

    
    :type gatewayName: string
    :param gatewayName: **[REQUIRED]** 

      A unique, friendly name for the gateway.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_gateway_capability_configuration(**kwargs)

    

    Updates a gateway capability configuration or defines a new capability configuration. Each gateway capability defines data sources for a gateway. A capability configuration can contain multiple data source configurations. If you define OPC-UA sources for a gateway in the IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To list all capability configurations for a gateway, use `DescribeGateway <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGateway.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateGatewayCapabilityConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.update_gateway_capability_configuration(
          gatewayId='string',
          capabilityNamespace='string',
          capabilityConfiguration='string'
      )
    :type gatewayId: string
    :param gatewayId: **[REQUIRED]** 

      The ID of the gateway to be updated.

      

    
    :type capabilityNamespace: string
    :param capabilityNamespace: **[REQUIRED]** 

      The namespace of the gateway capability configuration to be updated. For example, if you configure OPC-UA sources from the IoT SiteWise console, your OPC-UA capability configuration has the namespace ``iotsitewise:opcuacollector:version`` , where ``version`` is a number such as ``1`` .

      

    
    :type capabilityConfiguration: string
    :param capabilityConfiguration: **[REQUIRED]** 

      The JSON document that defines the configuration for the gateway capability. For more information, see `Configuring data sources (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/configure-sources.html#configure-source-cli>`__ in the *IoT SiteWise User Guide* .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'capabilityNamespace': 'string',
            'capabilitySyncStatus': 'IN_SYNC'|'OUT_OF_SYNC'|'SYNC_FAILED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **capabilityNamespace** *(string) --* 

          The namespace of the gateway capability.

          
        

        - **capabilitySyncStatus** *(string) --* 

          The synchronization status of the capability configuration. The sync status can be one of the following:

           

           
          * ``IN_SYNC`` – The gateway is running the capability configuration. 
           
          * ``OUT_OF_SYNC`` – The gateway hasn't received the capability configuration. 
           
          * ``SYNC_FAILED`` – The gateway rejected the capability configuration. 
           

           

          After you update a capability configuration, its sync status is ``OUT_OF_SYNC`` until the gateway receives and applies or rejects the updated configuration.

          
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.LimitExceededException`

    

  .. py:method:: update_portal(**kwargs)

    

    Updates an IoT SiteWise Monitor portal.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdatePortal>`_    


    **Request Syntax** 
    ::

      response = client.update_portal(
          portalId='string',
          portalName='string',
          portalDescription='string',
          portalContactEmail='string',
          portalLogoImage={
              'id': 'string',
              'file': {
                  'data': b'bytes',
                  'type': 'PNG'
              }
          },
          roleArn='string',
          clientToken='string',
          notificationSenderEmail='string',
          alarms={
              'alarmRoleArn': 'string',
              'notificationLambdaArn': 'string'
          }
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal to update.

      

    
    :type portalName: string
    :param portalName: **[REQUIRED]** 

      A new friendly name for the portal.

      

    
    :type portalDescription: string
    :param portalDescription: 

      A new description for the portal.

      

    
    :type portalContactEmail: string
    :param portalContactEmail: **[REQUIRED]** 

      The Amazon Web Services administrator's contact email address.

      

    
    :type portalLogoImage: dict
    :param portalLogoImage: 

      Contains an image that is one of the following:

       

       
      * An image file. Choose this option to upload a new image. 
       
      * The ID of an existing image. Choose this option to keep an existing image. 
       

      

    
      - **id** *(string) --* 

        The ID of an existing image. Specify this parameter to keep an existing image.

        

      
      - **file** *(dict) --* 

        Contains an image file.

        

      
        - **data** *(bytes) --* **[REQUIRED]** 

          The image file contents, represented as a base64-encoded string. The file size must be less than 1 MB.

          

        
        - **type** *(string) --* **[REQUIRED]** 

          The file type of the image.

          

        
      
    
    :type roleArn: string
    :param roleArn: **[REQUIRED]** 

      The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see `Using service roles for IoT SiteWise Monitor <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    :type notificationSenderEmail: string
    :param notificationSenderEmail: 

      The email address that sends alarm notifications.

      

    
    :type alarms: dict
    :param alarms: 

      Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see `Monitoring with alarms <https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html>`__ in the *IoT SiteWise Application Guide* .

      

    
      - **alarmRoleArn** *(string) --* **[REQUIRED]** 

        The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the IAM role that allows the alarm to perform actions and access Amazon Web Services resources and services, such as IoT Events.

        

      
      - **notificationLambdaArn** *(string) --* 

        The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the Lambda function that manages alarm notifications. For more information, see `Managing alarm notifications <https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html>`__ in the *IoT Events Developer Guide* .

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'portalStatus': {
                'state': 'CREATING'|'UPDATING'|'DELETING'|'ACTIVE'|'FAILED',
                'error': {
                    'code': 'INTERNAL_FAILURE'|'VALIDATION_ERROR'|'LIMIT_EXCEEDED',
                    'message': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **portalStatus** *(dict) --* 

          The status of the portal, which contains a state (``UPDATING`` after successfully calling this operation) and any error message.

          
          

          - **state** *(string) --* 

            The current state of the portal.

            
          

          - **error** *(dict) --* 

            Contains associated error information, if any.

            
            

            - **code** *(string) --* 

              The error code.

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ConflictingOperationException`

    

  .. py:method:: update_project(**kwargs)

    

    Updates an IoT SiteWise Monitor project.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/UpdateProject>`_    


    **Request Syntax** 
    ::

      response = client.update_project(
          projectId='string',
          projectName='string',
          projectDescription='string',
          clientToken='string'
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project to update.

      

    
    :type projectName: string
    :param projectName: **[REQUIRED]** 

      A new friendly name for the project.

      

    
    :type projectDescription: string
    :param projectDescription: 

      A new description for the project.

      

    
    :type clientToken: string
    :param clientToken: 

      A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`IoTSiteWise.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.InternalFailureException`

    
    *     :py:class:`IoTSiteWise.Client.exceptions.ThrottlingException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`IoTSiteWise.Paginator.GetAssetPropertyAggregates`


* :py:class:`IoTSiteWise.Paginator.GetAssetPropertyValueHistory`


* :py:class:`IoTSiteWise.Paginator.GetInterpolatedAssetPropertyValues`


* :py:class:`IoTSiteWise.Paginator.ListAccessPolicies`


* :py:class:`IoTSiteWise.Paginator.ListAssetModels`


* :py:class:`IoTSiteWise.Paginator.ListAssetRelationships`


* :py:class:`IoTSiteWise.Paginator.ListAssets`


* :py:class:`IoTSiteWise.Paginator.ListAssociatedAssets`


* :py:class:`IoTSiteWise.Paginator.ListDashboards`


* :py:class:`IoTSiteWise.Paginator.ListGateways`


* :py:class:`IoTSiteWise.Paginator.ListPortals`


* :py:class:`IoTSiteWise.Paginator.ListProjectAssets`


* :py:class:`IoTSiteWise.Paginator.ListProjects`



.. py:class:: IoTSiteWise.Paginator.GetAssetPropertyAggregates

  ::

    
    paginator = client.get_paginator('get_asset_property_aggregates')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.get_asset_property_aggregates`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/GetAssetPropertyAggregates>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          assetId='string',
          propertyId='string',
          propertyAlias='string',
          aggregateTypes=[
              'AVERAGE'|'COUNT'|'MAXIMUM'|'MINIMUM'|'SUM'|'STANDARD_DEVIATION',
          ],
          resolution='string',
          qualities=[
              'GOOD'|'BAD'|'UNCERTAIN',
          ],
          startDate=datetime(2015, 1, 1),
          endDate=datetime(2015, 1, 1),
          timeOrdering='ASCENDING'|'DESCENDING',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type assetId: string
    :param assetId: 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: 

      The ID of the asset property.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type aggregateTypes: list
    :param aggregateTypes: **[REQUIRED]** 

      The data aggregating function.

      

    
      - *(string) --* 

      
  
    :type resolution: string
    :param resolution: **[REQUIRED]** 

      The time interval over which to aggregate data.

      

    
    :type qualities: list
    :param qualities: 

      The quality by which to filter asset data.

      

    
      - *(string) --* 

      
  
    :type startDate: datetime
    :param startDate: **[REQUIRED]** 

      The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type endDate: datetime
    :param endDate: **[REQUIRED]** 

      The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type timeOrdering: string
    :param timeOrdering: 

      The chronological sorting order of the requested information.

       

      Default: ``ASCENDING``  

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'aggregatedValues': [
                {
                    'timestamp': datetime(2015, 1, 1),
                    'quality': 'GOOD'|'BAD'|'UNCERTAIN',
                    'value': {
                        'average': 123.0,
                        'count': 123.0,
                        'maximum': 123.0,
                        'minimum': 123.0,
                        'sum': 123.0,
                        'standardDeviation': 123.0
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **aggregatedValues** *(list) --* 

          The requested aggregated values.

          
          

          - *(dict) --* 

            Contains aggregated asset property values (for example, average, minimum, and maximum).

            
            

            - **timestamp** *(datetime) --* 

              The date the aggregating computations occurred, in Unix epoch time.

              
            

            - **quality** *(string) --* 

              The quality of the aggregated data.

              
            

            - **value** *(dict) --* 

              The value of the aggregates.

              
              

              - **average** *(float) --* 

                The average (mean) value of the time series over a time interval window.

                
              

              - **count** *(float) --* 

                The count of data points in the time series over a time interval window.

                
              

              - **maximum** *(float) --* 

                The maximum value of the time series over a time interval window.

                
              

              - **minimum** *(float) --* 

                The minimum value of the time series over a time interval window.

                
              

              - **sum** *(float) --* 

                The sum of the time series over a time interval window.

                
              

              - **standardDeviation** *(float) --* 

                The standard deviation of the time series over a time interval window.

                
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.GetAssetPropertyValueHistory

  ::

    
    paginator = client.get_paginator('get_asset_property_value_history')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.get_asset_property_value_history`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/GetAssetPropertyValueHistory>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          assetId='string',
          propertyId='string',
          propertyAlias='string',
          startDate=datetime(2015, 1, 1),
          endDate=datetime(2015, 1, 1),
          qualities=[
              'GOOD'|'BAD'|'UNCERTAIN',
          ],
          timeOrdering='ASCENDING'|'DESCENDING',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type assetId: string
    :param assetId: 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: 

      The ID of the asset property.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type startDate: datetime
    :param startDate: 

      The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type endDate: datetime
    :param endDate: 

      The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.

      

    
    :type qualities: list
    :param qualities: 

      The quality by which to filter asset data.

      

    
      - *(string) --* 

      
  
    :type timeOrdering: string
    :param timeOrdering: 

      The chronological sorting order of the requested information.

       

      Default: ``ASCENDING``  

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetPropertyValueHistory': [
                {
                    'value': {
                        'stringValue': 'string',
                        'integerValue': 123,
                        'doubleValue': 123.0,
                        'booleanValue': True|False
                    },
                    'timestamp': {
                        'timeInSeconds': 123,
                        'offsetInNanos': 123
                    },
                    'quality': 'GOOD'|'BAD'|'UNCERTAIN'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetPropertyValueHistory** *(list) --* 

          The asset property's value history.

          
          

          - *(dict) --* 

            Contains asset property value information.

            
            

            - **value** *(dict) --* 

              The value of the asset property (see ``Variant`` ).

              
              

              - **stringValue** *(string) --* 

                Asset property data of type string (sequence of characters).

                
              

              - **integerValue** *(integer) --* 

                Asset property data of type integer (whole number).

                
              

              - **doubleValue** *(float) --* 

                Asset property data of type double (floating point number).

                
              

              - **booleanValue** *(boolean) --* 

                Asset property data of type Boolean (true or false).

                
          
            

            - **timestamp** *(dict) --* 

              The timestamp of the asset property value.

              
              

              - **timeInSeconds** *(integer) --* 

                The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by ``offsetInNanos`` .

                
              

              - **offsetInNanos** *(integer) --* 

                The nanosecond offset from ``timeInSeconds`` .

                
          
            

            - **quality** *(string) --* 

              The quality of the asset property value.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.GetInterpolatedAssetPropertyValues

  ::

    
    paginator = client.get_paginator('get_interpolated_asset_property_values')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.get_interpolated_asset_property_values`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/GetInterpolatedAssetPropertyValues>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          assetId='string',
          propertyId='string',
          propertyAlias='string',
          startTimeInSeconds=123,
          startTimeOffsetInNanos=123,
          endTimeInSeconds=123,
          endTimeOffsetInNanos=123,
          quality='GOOD'|'BAD'|'UNCERTAIN',
          intervalInSeconds=123,
          type='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type assetId: string
    :param assetId: 

      The ID of the asset.

      

    
    :type propertyId: string
    :param propertyId: 

      The ID of the asset property.

      

    
    :type propertyAlias: string
    :param propertyAlias: 

      The alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type startTimeInSeconds: integer
    :param startTimeInSeconds: **[REQUIRED]** 

      The exclusive start of the range from which to interpolate data, expressed in seconds in Unix epoch time.

      

    
    :type startTimeOffsetInNanos: integer
    :param startTimeOffsetInNanos: 

      The nanosecond offset converted from ``startTimeInSeconds`` .

      

    
    :type endTimeInSeconds: integer
    :param endTimeInSeconds: **[REQUIRED]** 

      The inclusive end of the range from which to interpolate data, expressed in seconds in Unix epoch time.

      

    
    :type endTimeOffsetInNanos: integer
    :param endTimeOffsetInNanos: 

      The nanosecond offset converted from ``endTimeInSeconds`` .

      

    
    :type quality: string
    :param quality: **[REQUIRED]** 

      The quality of the asset property value. You can use this parameter as a filter to choose only the asset property values that have a specific quality.

      

    
    :type intervalInSeconds: integer
    :param intervalInSeconds: **[REQUIRED]** 

      The time interval in seconds over which to interpolate data. Each interval starts when the previous one ends.

      

    
    :type type: string
    :param type: **[REQUIRED]** 

      The interpolation type.

       

      Valid values: ``LINEAR_INTERPOLATION``  

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'interpolatedAssetPropertyValues': [
                {
                    'timestamp': {
                        'timeInSeconds': 123,
                        'offsetInNanos': 123
                    },
                    'value': {
                        'stringValue': 'string',
                        'integerValue': 123,
                        'doubleValue': 123.0,
                        'booleanValue': True|False
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **interpolatedAssetPropertyValues** *(list) --* 

          The requested interpolated values.

          
          

          - *(dict) --* 

            Contains information about an interpolated asset property value.

            
            

            - **timestamp** *(dict) --* 

              Contains a timestamp with optional nanosecond granularity.

              
              

              - **timeInSeconds** *(integer) --* 

                The timestamp date, in seconds, in the Unix epoch format. Fractional nanosecond data is provided by ``offsetInNanos`` .

                
              

              - **offsetInNanos** *(integer) --* 

                The nanosecond offset from ``timeInSeconds`` .

                
          
            

            - **value** *(dict) --* 

              Contains an asset property value (of a single type only).

              
              

              - **stringValue** *(string) --* 

                Asset property data of type string (sequence of characters).

                
              

              - **integerValue** *(integer) --* 

                Asset property data of type integer (whole number).

                
              

              - **doubleValue** *(float) --* 

                Asset property data of type double (floating point number).

                
              

              - **booleanValue** *(boolean) --* 

                Asset property data of type Boolean (true or false).

                
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListAccessPolicies

  ::

    
    paginator = client.get_paginator('list_access_policies')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_access_policies`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAccessPolicies>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          identityType='USER'|'GROUP'|'IAM',
          identityId='string',
          resourceType='PORTAL'|'PROJECT',
          resourceId='string',
          iamArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type identityType: string
    :param identityType: 

      The type of identity (Amazon Web Services SSO user, Amazon Web Services SSO group, or IAM user). This parameter is required if you specify ``identityId`` .

      

    
    :type identityId: string
    :param identityId: 

      The ID of the identity. This parameter is required if you specify ``USER`` or ``GROUP`` for ``identityType`` .

      

    
    :type resourceType: string
    :param resourceType: 

      The type of resource (portal or project). This parameter is required if you specify ``resourceId`` .

      

    
    :type resourceId: string
    :param resourceId: 

      The ID of the resource. This parameter is required if you specify ``resourceType`` .

      

    
    :type iamArn: string
    :param iamArn: 

      The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* . This parameter is required if you specify ``IAM`` for ``identityType`` .

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'accessPolicySummaries': [
                {
                    'id': 'string',
                    'identity': {
                        'user': {
                            'id': 'string'
                        },
                        'group': {
                            'id': 'string'
                        },
                        'iamUser': {
                            'arn': 'string'
                        },
                        'iamRole': {
                            'arn': 'string'
                        }
                    },
                    'resource': {
                        'portal': {
                            'id': 'string'
                        },
                        'project': {
                            'id': 'string'
                        }
                    },
                    'permission': 'ADMINISTRATOR'|'VIEWER',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **accessPolicySummaries** *(list) --* 

          A list that summarizes each access policy.

          
          

          - *(dict) --* 

            Contains an access policy that defines an identity's access to an IoT SiteWise Monitor resource.

            
            

            - **id** *(string) --* 

              The ID of the access policy.

              
            

            - **identity** *(dict) --* 

              The identity (an Amazon Web Services SSO user, an Amazon Web Services SSO group, or an IAM user).

              
              

              - **user** *(dict) --* 

                An Amazon Web Services SSO user identity.

                
                

                - **id** *(string) --* 

                  The Amazon Web Services SSO ID of the user.

                  
            
              

              - **group** *(dict) --* 

                An Amazon Web Services SSO group identity.

                
                

                - **id** *(string) --* 

                  The Amazon Web Services SSO ID of the group.

                  
            
              

              - **iamUser** *(dict) --* 

                An IAM user identity.

                
                

                - **arn** *(string) --* 

                  The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

                   

                  .. note::

                     

                    If you delete the IAM user, access policies that contain this identity include an empty ``arn`` . You can delete the access policy for the IAM user that no longer exists.

                     

                  
            
              

              - **iamRole** *(dict) --* 

                An IAM role identity.

                
                

                - **arn** *(string) --* 

                  The ARN of the IAM role. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`__ in the *IAM User Guide* .

                  
            
          
            

            - **resource** *(dict) --* 

              The IoT SiteWise Monitor resource (a portal or project).

              
              

              - **portal** *(dict) --* 

                A portal resource.

                
                

                - **id** *(string) --* 

                  The ID of the portal.

                  
            
              

              - **project** *(dict) --* 

                A project resource.

                
                

                - **id** *(string) --* 

                  The ID of the project.

                  
            
          
            

            - **permission** *(string) --* 

              The permissions for the access policy. Note that a project ``ADMINISTRATOR`` is also known as a project owner.

              
            

            - **creationDate** *(datetime) --* 

              The date the access policy was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the access policy was last updated, in Unix epoch time.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListAssetModels

  ::

    
    paginator = client.get_paginator('list_asset_models')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_asset_models`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssetModels>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetModelSummaries': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'status': {
                        'state': 'CREATING'|'ACTIVE'|'UPDATING'|'PROPAGATING'|'DELETING'|'FAILED',
                        'error': {
                            'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                            'message': 'string'
                        }
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetModelSummaries** *(list) --* 

          A list that summarizes each asset model.

          
          

          - *(dict) --* 

            Contains a summary of an asset model.

            
            

            - **id** *(string) --* 

              The ID of the asset model (used with IoT SiteWise APIs).

              
            

            - **arn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset model, which has the following format.

               

               ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset-model/${AssetModelId}``  

              
            

            - **name** *(string) --* 

              The name of the asset model.

              
            

            - **description** *(string) --* 

              The asset model description.

              
            

            - **creationDate** *(datetime) --* 

              The date the asset model was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the asset model was last updated, in Unix epoch time.

              
            

            - **status** *(dict) --* 

              The current status of the asset model.

              
              

              - **state** *(string) --* 

                The current state of the asset model.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListAssetRelationships

  ::

    
    paginator = client.get_paginator('list_asset_relationships')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_asset_relationships`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssetRelationships>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          assetId='string',
          traversalType='PATH_TO_ROOT',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset.

      

    
    :type traversalType: string
    :param traversalType: **[REQUIRED]** 

      The type of traversal to use to identify asset relationships. Choose the following option:

       

       
      * ``PATH_TO_ROOT`` – Identify the asset's parent assets up to the root asset. The asset that you specify in ``assetId`` is the first result in the list of ``assetRelationshipSummaries`` , and the root asset is the last result. 
       

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetRelationshipSummaries': [
                {
                    'hierarchyInfo': {
                        'parentAssetId': 'string',
                        'childAssetId': 'string'
                    },
                    'relationshipType': 'HIERARCHY'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetRelationshipSummaries** *(list) --* 

          A list that summarizes each asset relationship.

          
          

          - *(dict) --* 

            Contains information about assets that are related to one another.

            
            

            - **hierarchyInfo** *(dict) --* 

              The assets that are related through an asset hierarchy.

               

              This object is present if the ``relationshipType`` is ``HIERARCHY`` .

              
              

              - **parentAssetId** *(string) --* 

                The ID of the parent asset in this asset relationship.

                
              

              - **childAssetId** *(string) --* 

                The ID of the child asset in this asset relationship.

                
          
            

            - **relationshipType** *(string) --* 

              The relationship type of the assets in this relationship. This value is one of the following:

               

               
              * ``HIERARCHY`` – The assets are related through an asset hierarchy. If you specify this relationship type, this asset relationship includes the ``hierarchyInfo`` object. 
               

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListAssets

  ::

    
    paginator = client.get_paginator('list_assets')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_assets`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssets>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          assetModelId='string',
          filter='ALL'|'TOP_LEVEL',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type assetModelId: string
    :param assetModelId: 

      The ID of the asset model by which to filter the list of assets. This parameter is required if you choose ``ALL`` for ``filter`` .

      

    
    :type filter: string
    :param filter: 

      The filter for the requested list of assets. Choose one of the following options:

       

       
      * ``ALL`` – The list includes all assets for a given asset model ID. The ``assetModelId`` parameter is required if you filter by ``ALL`` . 
       
      * ``TOP_LEVEL`` – The list includes only top-level assets in the asset hierarchy tree. 
       

       

      Default: ``ALL``  

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetSummaries': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'assetModelId': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'status': {
                        'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                        'error': {
                            'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                            'message': 'string'
                        }
                    },
                    'hierarchies': [
                        {
                            'id': 'string',
                            'name': 'string'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetSummaries** *(list) --* 

          A list that summarizes each asset.

          
          

          - *(dict) --* 

            Contains a summary of an asset.

            
            

            - **id** *(string) --* 

              The ID of the asset.

              
            

            - **arn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset, which has the following format.

               

               ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}``  

              
            

            - **name** *(string) --* 

              The name of the asset.

              
            

            - **assetModelId** *(string) --* 

              The ID of the asset model used to create this asset.

              
            

            - **creationDate** *(datetime) --* 

              The date the asset was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the asset was last updated, in Unix epoch time.

              
            

            - **status** *(dict) --* 

              The current status of the asset.

              
              

              - **state** *(string) --* 

                The current status of the asset.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
            

            - **hierarchies** *(list) --* 

              A list of asset hierarchies that each contain a ``hierarchyId`` . A hierarchy specifies allowed parent/child asset relationships.

              
              

              - *(dict) --* 

                Describes an asset hierarchy that contains a hierarchy's name and ID.

                
                

                - **id** *(string) --* 

                  The ID of the hierarchy. This ID is a ``hierarchyId`` .

                  
                

                - **name** *(string) --* 

                  The hierarchy name provided in the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListAssociatedAssets

  ::

    
    paginator = client.get_paginator('list_associated_assets')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_associated_assets`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListAssociatedAssets>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          assetId='string',
          hierarchyId='string',
          traversalDirection='PARENT'|'CHILD',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset to query.

      

    
    :type hierarchyId: string
    :param hierarchyId: 

      The ID of the hierarchy by which child assets are associated to the asset. To find a hierarchy ID, use the `DescribeAsset <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAsset.html>`__ or `DescribeAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeAssetModel.html>`__ operations. This parameter is required if you choose ``CHILD`` for ``traversalDirection`` .

       

      For more information, see `Asset hierarchies <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`__ in the *IoT SiteWise User Guide* .

      

    
    :type traversalDirection: string
    :param traversalDirection: 

      The direction to list associated assets. Choose one of the following options:

       

       
      * ``CHILD`` – The list includes all child assets associated to the asset. The ``hierarchyId`` parameter is required if you choose ``CHILD`` . 
       
      * ``PARENT`` – The list includes the asset's parent asset. 
       

       

      Default: ``CHILD``  

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetSummaries': [
                {
                    'id': 'string',
                    'arn': 'string',
                    'name': 'string',
                    'assetModelId': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'status': {
                        'state': 'CREATING'|'ACTIVE'|'UPDATING'|'DELETING'|'FAILED',
                        'error': {
                            'code': 'VALIDATION_ERROR'|'INTERNAL_FAILURE',
                            'message': 'string'
                        }
                    },
                    'hierarchies': [
                        {
                            'id': 'string',
                            'name': 'string'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetSummaries** *(list) --* 

          A list that summarizes the associated assets.

          
          

          - *(dict) --* 

            Contains a summary of an associated asset.

            
            

            - **id** *(string) --* 

              The ID of the asset.

              
            

            - **arn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the asset, which has the following format.

               

               ``arn:${Partition}:iotsitewise:${Region}:${Account}:asset/${AssetId}``  

              
            

            - **name** *(string) --* 

              The name of the asset.

              
            

            - **assetModelId** *(string) --* 

              The ID of the asset model used to create the asset.

              
            

            - **creationDate** *(datetime) --* 

              The date the asset was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the asset was last updated, in Unix epoch time.

              
            

            - **status** *(dict) --* 

              The current status of the asset.

              
              

              - **state** *(string) --* 

                The current status of the asset.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
            

            - **hierarchies** *(list) --* 

              A list of asset hierarchies that each contain a ``hierarchyId`` . A hierarchy specifies allowed parent/child asset relationships.

              
              

              - *(dict) --* 

                Describes an asset hierarchy that contains a hierarchy's name and ID.

                
                

                - **id** *(string) --* 

                  The ID of the hierarchy. This ID is a ``hierarchyId`` .

                  
                

                - **name** *(string) --* 

                  The hierarchy name provided in the `CreateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_CreateAssetModel.html>`__ or `UpdateAssetModel <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_UpdateAssetModel.html>`__ API operation.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListDashboards

  ::

    
    paginator = client.get_paginator('list_dashboards')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_dashboards`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListDashboards>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          projectId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'dashboardSummaries': [
                {
                    'id': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **dashboardSummaries** *(list) --* 

          A list that summarizes each dashboard in the project.

          
          

          - *(dict) --* 

            Contains a dashboard summary.

            
            

            - **id** *(string) --* 

              The ID of the dashboard.

              
            

            - **name** *(string) --* 

              The name of the dashboard

              
            

            - **description** *(string) --* 

              The dashboard's description.

              
            

            - **creationDate** *(datetime) --* 

              The date the dashboard was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the dashboard was last updated, in Unix epoch time.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListGateways

  ::

    
    paginator = client.get_paginator('list_gateways')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_gateways`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListGateways>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'gatewaySummaries': [
                {
                    'gatewayId': 'string',
                    'gatewayName': 'string',
                    'gatewayCapabilitySummaries': [
                        {
                            'capabilityNamespace': 'string',
                            'capabilitySyncStatus': 'IN_SYNC'|'OUT_OF_SYNC'|'SYNC_FAILED'
                        },
                    ],
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **gatewaySummaries** *(list) --* 

          A list that summarizes each gateway.

          
          

          - *(dict) --* 

            Contains a summary of a gateway.

            
            

            - **gatewayId** *(string) --* 

              The ID of the gateway device.

              
            

            - **gatewayName** *(string) --* 

              The name of the asset.

              
            

            - **gatewayCapabilitySummaries** *(list) --* 

              A list of gateway capability summaries that each contain a namespace and status. Each gateway capability defines data sources for the gateway. To retrieve a capability configuration's definition, use `DescribeGatewayCapabilityConfiguration <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGatewayCapabilityConfiguration.html>`__ .

              
              

              - *(dict) --* 

                Contains a summary of a gateway capability configuration.

                
                

                - **capabilityNamespace** *(string) --* 

                  The namespace of the capability configuration. For example, if you configure OPC-UA sources from the IoT SiteWise console, your OPC-UA capability configuration has the namespace ``iotsitewise:opcuacollector:version`` , where ``version`` is a number such as ``1`` .

                  
                

                - **capabilitySyncStatus** *(string) --* 

                  The synchronization status of the capability configuration. The sync status can be one of the following:

                   

                   
                  * ``IN_SYNC`` – The gateway is running the capability configuration. 
                   
                  * ``OUT_OF_SYNC`` – The gateway hasn't received the capability configuration. 
                   
                  * ``SYNC_FAILED`` – The gateway rejected the capability configuration. 
                   

                  
            
          
            

            - **creationDate** *(datetime) --* 

              The date the gateway was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the gateway was last updated, in Unix epoch time.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListPortals

  ::

    
    paginator = client.get_paginator('list_portals')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_portals`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListPortals>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'portalSummaries': [
                {
                    'id': 'string',
                    'name': 'string',
                    'description': 'string',
                    'startUrl': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1),
                    'roleArn': 'string',
                    'status': {
                        'state': 'CREATING'|'UPDATING'|'DELETING'|'ACTIVE'|'FAILED',
                        'error': {
                            'code': 'INTERNAL_FAILURE'|'VALIDATION_ERROR'|'LIMIT_EXCEEDED',
                            'message': 'string'
                        }
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **portalSummaries** *(list) --* 

          A list that summarizes each portal.

          
          

          - *(dict) --* 

            Contains a portal summary.

            
            

            - **id** *(string) --* 

              The ID of the portal.

              
            

            - **name** *(string) --* 

              The name of the portal.

              
            

            - **description** *(string) --* 

              The portal's description.

              
            

            - **startUrl** *(string) --* 

              The URL for the IoT SiteWise Monitor portal. You can use this URL to access portals that use Amazon Web Services SSO for authentication. For portals that use IAM for authentication, you must use the IoT SiteWise console to get a URL that you can use to access the portal.

              
            

            - **creationDate** *(datetime) --* 

              The date the portal was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the portal was last updated, in Unix epoch time.

              
            

            - **roleArn** *(string) --* 

              The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__ of the service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see `Using service roles for IoT SiteWise Monitor <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html>`__ in the *IoT SiteWise User Guide* .

              
            

            - **status** *(dict) --* 

              Contains information about the current status of a portal.

              
              

              - **state** *(string) --* 

                The current state of the portal.

                
              

              - **error** *(dict) --* 

                Contains associated error information, if any.

                
                

                - **code** *(string) --* 

                  The error code.

                  
                

                - **message** *(string) --* 

                  The error message.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListProjectAssets

  ::

    
    paginator = client.get_paginator('list_project_assets')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_project_assets`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListProjectAssets>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          projectId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type projectId: string
    :param projectId: **[REQUIRED]** 

      The ID of the project.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'assetIds': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **assetIds** *(list) --* 

          A list that contains the IDs of each asset associated with the project.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

.. py:class:: IoTSiteWise.Paginator.ListProjects

  ::

    
    paginator = client.get_paginator('list_projects')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`IoTSiteWise.Client.list_projects`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/ListProjects>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          portalId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'projectSummaries': [
                {
                    'id': 'string',
                    'name': 'string',
                    'description': 'string',
                    'creationDate': datetime(2015, 1, 1),
                    'lastUpdateDate': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **projectSummaries** *(list) --* 

          A list that summarizes each project in the portal.

          
          

          - *(dict) --* 

            Contains project summary information.

            
            

            - **id** *(string) --* 

              The ID of the project.

              
            

            - **name** *(string) --* 

              The name of the project.

              
            

            - **description** *(string) --* 

              The project's description.

              
            

            - **creationDate** *(datetime) --* 

              The date the project was created, in Unix epoch time.

              
            

            - **lastUpdateDate** *(datetime) --* 

              The date the project was last updated, in Unix epoch time.

              
        
      
        

        - **NextToken** *(string) --* 

          A token to resume pagination.

          
    

=======
Waiters
=======


The available waiters are:

* :py:class:`IoTSiteWise.Waiter.AssetActive`


* :py:class:`IoTSiteWise.Waiter.AssetModelActive`


* :py:class:`IoTSiteWise.Waiter.AssetModelNotExists`


* :py:class:`IoTSiteWise.Waiter.AssetNotExists`


* :py:class:`IoTSiteWise.Waiter.PortalActive`


* :py:class:`IoTSiteWise.Waiter.PortalNotExists`



.. py:class:: IoTSiteWise.Waiter.AssetActive

  ::

    
    waiter = client.get_waiter('asset_active')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`IoTSiteWise.Client.describe_asset` every 3 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAsset>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          assetId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: IoTSiteWise.Waiter.AssetModelActive

  ::

    
    waiter = client.get_waiter('asset_model_active')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`IoTSiteWise.Client.describe_asset_model` every 3 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAssetModel>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          assetModelId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type assetModelId: string
    :param assetModelId: **[REQUIRED]** 

      The ID of the asset model.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: IoTSiteWise.Waiter.AssetModelNotExists

  ::

    
    waiter = client.get_waiter('asset_model_not_exists')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`IoTSiteWise.Client.describe_asset_model` every 3 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAssetModel>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          assetModelId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type assetModelId: string
    :param assetModelId: **[REQUIRED]** 

      The ID of the asset model.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: IoTSiteWise.Waiter.AssetNotExists

  ::

    
    waiter = client.get_waiter('asset_not_exists')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`IoTSiteWise.Client.describe_asset` every 3 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribeAsset>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          assetId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type assetId: string
    :param assetId: **[REQUIRED]** 

      The ID of the asset.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: IoTSiteWise.Waiter.PortalActive

  ::

    
    waiter = client.get_waiter('portal_active')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`IoTSiteWise.Client.describe_portal` every 3 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribePortal>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          portalId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None

.. py:class:: IoTSiteWise.Waiter.PortalNotExists

  ::

    
    waiter = client.get_waiter('portal_not_exists')

  
  

  .. py:method:: wait(**kwargs)

    Polls :py:meth:`IoTSiteWise.Client.describe_portal` every 3 seconds until a successful state is reached. An error is returned after 20 failed checks.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/iotsitewise-2019-12-02/DescribePortal>`_    


    **Request Syntax** 
    ::

      waiter.wait(
          portalId='string',
          WaiterConfig={
              'Delay': 123,
              'MaxAttempts': 123
          }
      )
    :type portalId: string
    :param portalId: **[REQUIRED]** 

      The ID of the portal.

      

    
    :type WaiterConfig: dict
    :param WaiterConfig: 

      A dictionary that provides parameters to control waiting behavior.

      

    
      - **Delay** *(integer) --* 

        The amount of time in seconds to wait between attempts. Default: 3

        

      
      - **MaxAttempts** *(integer) --* 

        The maximum number of attempts to be made. Default: 20

        

      
    
    
    :returns: None