

*************
FraudDetector
*************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: FraudDetector.Client

  A low-level client representing Amazon Fraud Detector
  

  This is the Amazon Fraud Detector API Reference. This guide is for developers who need detailed information about Amazon Fraud Detector API actions, data types, and errors. For more information about Amazon Fraud Detector features, see the `Amazon Fraud Detector User Guide <https://docs.aws.amazon.com/frauddetector/latest/ug/>`__ .

  ::

    
    import boto3
    
    client = boto3.client('frauddetector')

  
  These are the available methods:
  
  *   :py:meth:`~FraudDetector.Client.batch_create_variable`

  
  *   :py:meth:`~FraudDetector.Client.batch_get_variable`

  
  *   :py:meth:`~FraudDetector.Client.can_paginate`

  
  *   :py:meth:`~FraudDetector.Client.cancel_batch_prediction_job`

  
  *   :py:meth:`~FraudDetector.Client.create_batch_prediction_job`

  
  *   :py:meth:`~FraudDetector.Client.create_detector_version`

  
  *   :py:meth:`~FraudDetector.Client.create_model`

  
  *   :py:meth:`~FraudDetector.Client.create_model_version`

  
  *   :py:meth:`~FraudDetector.Client.create_rule`

  
  *   :py:meth:`~FraudDetector.Client.create_variable`

  
  *   :py:meth:`~FraudDetector.Client.delete_batch_prediction_job`

  
  *   :py:meth:`~FraudDetector.Client.delete_detector`

  
  *   :py:meth:`~FraudDetector.Client.delete_detector_version`

  
  *   :py:meth:`~FraudDetector.Client.delete_entity_type`

  
  *   :py:meth:`~FraudDetector.Client.delete_event`

  
  *   :py:meth:`~FraudDetector.Client.delete_event_type`

  
  *   :py:meth:`~FraudDetector.Client.delete_external_model`

  
  *   :py:meth:`~FraudDetector.Client.delete_label`

  
  *   :py:meth:`~FraudDetector.Client.delete_model`

  
  *   :py:meth:`~FraudDetector.Client.delete_model_version`

  
  *   :py:meth:`~FraudDetector.Client.delete_outcome`

  
  *   :py:meth:`~FraudDetector.Client.delete_rule`

  
  *   :py:meth:`~FraudDetector.Client.delete_variable`

  
  *   :py:meth:`~FraudDetector.Client.describe_detector`

  
  *   :py:meth:`~FraudDetector.Client.describe_model_versions`

  
  *   :py:meth:`~FraudDetector.Client.generate_presigned_url`

  
  *   :py:meth:`~FraudDetector.Client.get_batch_prediction_jobs`

  
  *   :py:meth:`~FraudDetector.Client.get_detector_version`

  
  *   :py:meth:`~FraudDetector.Client.get_detectors`

  
  *   :py:meth:`~FraudDetector.Client.get_entity_types`

  
  *   :py:meth:`~FraudDetector.Client.get_event_prediction`

  
  *   :py:meth:`~FraudDetector.Client.get_event_types`

  
  *   :py:meth:`~FraudDetector.Client.get_external_models`

  
  *   :py:meth:`~FraudDetector.Client.get_kms_encryption_key`

  
  *   :py:meth:`~FraudDetector.Client.get_labels`

  
  *   :py:meth:`~FraudDetector.Client.get_model_version`

  
  *   :py:meth:`~FraudDetector.Client.get_models`

  
  *   :py:meth:`~FraudDetector.Client.get_outcomes`

  
  *   :py:meth:`~FraudDetector.Client.get_paginator`

  
  *   :py:meth:`~FraudDetector.Client.get_rules`

  
  *   :py:meth:`~FraudDetector.Client.get_variables`

  
  *   :py:meth:`~FraudDetector.Client.get_waiter`

  
  *   :py:meth:`~FraudDetector.Client.list_tags_for_resource`

  
  *   :py:meth:`~FraudDetector.Client.put_detector`

  
  *   :py:meth:`~FraudDetector.Client.put_entity_type`

  
  *   :py:meth:`~FraudDetector.Client.put_event_type`

  
  *   :py:meth:`~FraudDetector.Client.put_external_model`

  
  *   :py:meth:`~FraudDetector.Client.put_kms_encryption_key`

  
  *   :py:meth:`~FraudDetector.Client.put_label`

  
  *   :py:meth:`~FraudDetector.Client.put_outcome`

  
  *   :py:meth:`~FraudDetector.Client.tag_resource`

  
  *   :py:meth:`~FraudDetector.Client.untag_resource`

  
  *   :py:meth:`~FraudDetector.Client.update_detector_version`

  
  *   :py:meth:`~FraudDetector.Client.update_detector_version_metadata`

  
  *   :py:meth:`~FraudDetector.Client.update_detector_version_status`

  
  *   :py:meth:`~FraudDetector.Client.update_model`

  
  *   :py:meth:`~FraudDetector.Client.update_model_version`

  
  *   :py:meth:`~FraudDetector.Client.update_model_version_status`

  
  *   :py:meth:`~FraudDetector.Client.update_rule_metadata`

  
  *   :py:meth:`~FraudDetector.Client.update_rule_version`

  
  *   :py:meth:`~FraudDetector.Client.update_variable`

  

  .. py:method:: batch_create_variable(**kwargs)

    

    Creates a batch of variables.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/BatchCreateVariable>`_    


    **Request Syntax** 
    ::

      response = client.batch_create_variable(
          variableEntries=[
              {
                  'name': 'string',
                  'dataType': 'string',
                  'dataSource': 'string',
                  'defaultValue': 'string',
                  'description': 'string',
                  'variableType': 'string'
              },
          ],
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type variableEntries: list
    :param variableEntries: **[REQUIRED]** 

      The list of variables for the batch create variable request.

      

    
      - *(dict) --* 

        A variable in the list of variables for the batch create variable request.

        

      
        - **name** *(string) --* 

          The name of the variable.

          

        
        - **dataType** *(string) --* 

          The data type of the variable.

          

        
        - **dataSource** *(string) --* 

          The data source of the variable.

          

        
        - **defaultValue** *(string) --* 

          The default value of the variable.

          

        
        - **description** *(string) --* 

          The description of the variable.

          

        
        - **variableType** *(string) --* 

          The type of the variable. For more information see `Variable types <https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types>`__ .

           

          Valid Values: ``AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT``  

          

        
      
  
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'errors': [
                {
                    'name': 'string',
                    'code': 123,
                    'message': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **errors** *(list) --* 

          Provides the errors for the ``BatchCreateVariable`` request.

          
          

          - *(dict) --* 

            Provides the error of the batch create variable API.

            
            

            - **name** *(string) --* 

              The name.

              
            

            - **code** *(integer) --* 

              The error code. 

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: batch_get_variable(**kwargs)

    

    Gets a batch of variables.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/BatchGetVariable>`_    


    **Request Syntax** 
    ::

      response = client.batch_get_variable(
          names=[
              'string',
          ]
      )
    :type names: list
    :param names: **[REQUIRED]** 

      The list of variable names to get.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'variables': [
                {
                    'name': 'string',
                    'dataType': 'STRING'|'INTEGER'|'FLOAT'|'BOOLEAN',
                    'dataSource': 'EVENT'|'MODEL_SCORE'|'EXTERNAL_MODEL_SCORE',
                    'defaultValue': 'string',
                    'description': 'string',
                    'variableType': 'string',
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'errors': [
                {
                    'name': 'string',
                    'code': 123,
                    'message': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **variables** *(list) --* 

          The returned variables.

          
          

          - *(dict) --* 

            The variable.

            
            

            - **name** *(string) --* 

              The name of the variable.

              
            

            - **dataType** *(string) --* 

              The data type of the variable. For more information see `Variable types <https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types>`__ .

              
            

            - **dataSource** *(string) --* 

              The data source of the variable.

              
            

            - **defaultValue** *(string) --* 

              The default value of the variable.

              
            

            - **description** *(string) --* 

              The description of the variable. 

              
            

            - **variableType** *(string) --* 

              The variable type of the variable.

               

              Valid Values: ``AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT``  

              
            

            - **lastUpdatedTime** *(string) --* 

              The time when variable was last updated.

              
            

            - **createdTime** *(string) --* 

              The time when the variable was created.

              
            

            - **arn** *(string) --* 

              The ARN of the variable.

              
        
      
        

        - **errors** *(list) --* 

          The errors from the request.

          
          

          - *(dict) --* 

            Provides the error of the batch get variable API.

            
            

            - **name** *(string) --* 

              The error name. 

              
            

            - **code** *(integer) --* 

              The error code. 

              
            

            - **message** *(string) --* 

              The error message.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: cancel_batch_prediction_job(**kwargs)

    

    Cancels the specified batch prediction job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/CancelBatchPredictionJob>`_    


    **Request Syntax** 
    ::

      response = client.cancel_batch_prediction_job(
          jobId='string'
      )
    :type jobId: string
    :param jobId: **[REQUIRED]** 

      The ID of the batch prediction job to cancel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_batch_prediction_job(**kwargs)

    

    Creates a batch prediction job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/CreateBatchPredictionJob>`_    


    **Request Syntax** 
    ::

      response = client.create_batch_prediction_job(
          jobId='string',
          inputPath='string',
          outputPath='string',
          eventTypeName='string',
          detectorName='string',
          detectorVersion='string',
          iamRoleArn='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type jobId: string
    :param jobId: **[REQUIRED]** 

      The ID of the batch prediction job.

      

    
    :type inputPath: string
    :param inputPath: **[REQUIRED]** 

      The Amazon S3 location of your training file.

      

    
    :type outputPath: string
    :param outputPath: **[REQUIRED]** 

      The Amazon S3 location of your output file.

      

    
    :type eventTypeName: string
    :param eventTypeName: **[REQUIRED]** 

      The name of the event type.

      

    
    :type detectorName: string
    :param detectorName: **[REQUIRED]** 

      The name of the detector.

      

    
    :type detectorVersion: string
    :param detectorVersion: 

      The detector version.

      

    
    :type iamRoleArn: string
    :param iamRoleArn: **[REQUIRED]** 

      The ARN of the IAM role to use for this job request.

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: create_detector_version(**kwargs)

    

    Creates a detector version. The detector version starts in a ``DRAFT`` status.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/CreateDetectorVersion>`_    


    **Request Syntax** 
    ::

      response = client.create_detector_version(
          detectorId='string',
          description='string',
          externalModelEndpoints=[
              'string',
          ],
          rules=[
              {
                  'detectorId': 'string',
                  'ruleId': 'string',
                  'ruleVersion': 'string'
              },
          ],
          modelVersions=[
              {
                  'modelId': 'string',
                  'modelType': 'ONLINE_FRAUD_INSIGHTS',
                  'modelVersionNumber': 'string',
                  'arn': 'string'
              },
          ],
          ruleExecutionMode='ALL_MATCHED'|'FIRST_MATCHED',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The ID of the detector under which you want to create a new version.

      

    
    :type description: string
    :param description: 

      The description of the detector version.

      

    
    :type externalModelEndpoints: list
    :param externalModelEndpoints: 

      The Amazon Sagemaker model endpoints to include in the detector version.

      

    
      - *(string) --* 

      
  
    :type rules: list
    :param rules: **[REQUIRED]** 

      The rules to include in the detector version.

      

    
      - *(dict) --* 

        A rule.

        

      
        - **detectorId** *(string) --* **[REQUIRED]** 

          The detector for which the rule is associated.

          

        
        - **ruleId** *(string) --* **[REQUIRED]** 

          The rule ID.

          

        
        - **ruleVersion** *(string) --* **[REQUIRED]** 

          The rule version.

          

        
      
  
    :type modelVersions: list
    :param modelVersions: 

      The model versions to include in the detector version.

      

    
      - *(dict) --* 

        The model version.

        

      
        - **modelId** *(string) --* **[REQUIRED]** 

          The model ID.

          

        
        - **modelType** *(string) --* **[REQUIRED]** 

          The model type.

          

        
        - **modelVersionNumber** *(string) --* **[REQUIRED]** 

          The model version number.

          

        
        - **arn** *(string) --* 

          The model version ARN.

          

        
      
  
    :type ruleExecutionMode: string
    :param ruleExecutionMode: 

      The rule execution mode for the rules included in the detector version.

       

      You can define and edit the rule mode at the detector version level, when it is in draft status.

       

      If you specify ``FIRST_MATCHED`` , Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.

       

      If you specifiy ``ALL_MATCHED`` , Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. 

       

      The default behavior is ``FIRST_MATCHED`` .

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'detectorId': 'string',
            'detectorVersionId': 'string',
            'status': 'DRAFT'|'ACTIVE'|'INACTIVE'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **detectorId** *(string) --* 

          The ID for the created version's parent detector.

          
        

        - **detectorVersionId** *(string) --* 

          The ID for the created detector. 

          
        

        - **status** *(string) --* 

          The status of the detector version.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_model(**kwargs)

    

    Creates a model using the specified model type.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/CreateModel>`_    


    **Request Syntax** 
    ::

      response = client.create_model(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          description='string',
          eventTypeName='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID.

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type. 

      

    
    :type description: string
    :param description: 

      The model description. 

      

    
    :type eventTypeName: string
    :param eventTypeName: **[REQUIRED]** 

      The name of the event type.

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_model_version(**kwargs)

    

    Creates a version of the model using the specified model type and model id. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/CreateModelVersion>`_    


    **Request Syntax** 
    ::

      response = client.create_model_version(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          trainingDataSource='EXTERNAL_EVENTS',
          trainingDataSchema={
              'modelVariables': [
                  'string',
              ],
              'labelSchema': {
                  'labelMapper': {
                      'string': [
                          'string',
                      ]
                  }
              }
          },
          externalEventsDetail={
              'dataLocation': 'string',
              'dataAccessRoleArn': 'string'
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID. 

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type.

      

    
    :type trainingDataSource: string
    :param trainingDataSource: **[REQUIRED]** 

      The training data source location in Amazon S3. 

      

    
    :type trainingDataSchema: dict
    :param trainingDataSchema: **[REQUIRED]** 

      The training data schema.

      

    
      - **modelVariables** *(list) --* **[REQUIRED]** 

        The training data schema variables.

        

      
        - *(string) --* 

        
    
      - **labelSchema** *(dict) --* **[REQUIRED]** 

        The label schema.

        

      
        - **labelMapper** *(dict) --* **[REQUIRED]** 

          The label mapper maps the Amazon Fraud Detector supported model classification labels (``FRAUD`` , ``LEGIT`` ) to the appropriate event type labels. For example, if "``FRAUD`` " and "``LEGIT`` " are Amazon Fraud Detector supported labels, this mapper could be: ``{"FRAUD" => ["0"]`` , ``"LEGIT" => ["1"]}`` or ``{"FRAUD" => ["false"]`` , ``"LEGIT" => ["true"]}`` or ``{"FRAUD" => ["fraud", "abuse"]`` , ``"LEGIT" => ["legit", "safe"]}`` . The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. 

          

        
          - *(string) --* 

          
            - *(list) --* 

            
              - *(string) --* 

              
          
      
    
      
    
    :type externalEventsDetail: dict
    :param externalEventsDetail: 

      Details for the external events data used for model version training. Required if ``trainingDataSource`` is ``EXTERNAL_EVENTS`` .

      

    
      - **dataLocation** *(string) --* **[REQUIRED]** 

        The Amazon S3 bucket location for the data.

        

      
      - **dataAccessRoleArn** *(string) --* **[REQUIRED]** 

        The ARN of the role that provides Amazon Fraud Detector access to the data location.

        

      
    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'modelId': 'string',
            'modelType': 'ONLINE_FRAUD_INSIGHTS',
            'modelVersionNumber': 'string',
            'status': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **modelId** *(string) --* 

          The model ID.

          
        

        - **modelType** *(string) --* 

          The model type.

          
        

        - **modelVersionNumber** *(string) --* 

          The model version number of the model version created.

          
        

        - **status** *(string) --* 

          The model version status. 

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    

  .. py:method:: create_rule(**kwargs)

    

    Creates a rule for use with the specified detector. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/CreateRule>`_    


    **Request Syntax** 
    ::

      response = client.create_rule(
          ruleId='string',
          detectorId='string',
          description='string',
          expression='string',
          language='DETECTORPL',
          outcomes=[
              'string',
          ],
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type ruleId: string
    :param ruleId: **[REQUIRED]** 

      The rule ID.

      

    
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID for the rule's parent detector.

      

    
    :type description: string
    :param description: 

      The rule description.

      

    
    :type expression: string
    :param expression: **[REQUIRED]** 

      The rule expression.

      

    
    :type language: string
    :param language: **[REQUIRED]** 

      The language of the rule.

      

    
    :type outcomes: list
    :param outcomes: **[REQUIRED]** 

      The outcome or outcomes returned when the rule expression matches.

      

    
      - *(string) --* 

      
  
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'rule': {
                'detectorId': 'string',
                'ruleId': 'string',
                'ruleVersion': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **rule** *(dict) --* 

          The created rule.

          
          

          - **detectorId** *(string) --* 

            The detector for which the rule is associated.

            
          

          - **ruleId** *(string) --* 

            The rule ID.

            
          

          - **ruleVersion** *(string) --* 

            The rule version.

            
      
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_variable(**kwargs)

    

    Creates a variable.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/CreateVariable>`_    


    **Request Syntax** 
    ::

      response = client.create_variable(
          name='string',
          dataType='STRING'|'INTEGER'|'FLOAT'|'BOOLEAN',
          dataSource='EVENT'|'MODEL_SCORE'|'EXTERNAL_MODEL_SCORE',
          defaultValue='string',
          description='string',
          variableType='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the variable.

      

    
    :type dataType: string
    :param dataType: **[REQUIRED]** 

      The data type.

      

    
    :type dataSource: string
    :param dataSource: **[REQUIRED]** 

      The source of the data.

      

    
    :type defaultValue: string
    :param defaultValue: **[REQUIRED]** 

      The default value for the variable when no value is received.

      

    
    :type description: string
    :param description: 

      The description.

      

    
    :type variableType: string
    :param variableType: 

      The variable type. For more information see `Variable types <https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types>`__ . 

       

      Valid Values: ``AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT``  

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_batch_prediction_job(**kwargs)

    

    Deletes a batch prediction job.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteBatchPredictionJob>`_    


    **Request Syntax** 
    ::

      response = client.delete_batch_prediction_job(
          jobId='string'
      )
    :type jobId: string
    :param jobId: **[REQUIRED]** 

      The ID of the batch prediction job to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_detector(**kwargs)

    

    Deletes the detector. Before deleting a detector, you must first delete all detector versions and rule versions associated with the detector.

     

    When you delete a detector, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteDetector>`_    


    **Request Syntax** 
    ::

      response = client.delete_detector(
          detectorId='string'
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The ID of the detector to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_detector_version(**kwargs)

    

    Deletes the detector version. You cannot delete detector versions that are in ``ACTIVE`` status.

     

    When you delete a detector version, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteDetectorVersion>`_    


    **Request Syntax** 
    ::

      response = client.delete_detector_version(
          detectorId='string',
          detectorVersionId='string'
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The ID of the parent detector for the detector version to delete.

      

    
    :type detectorVersionId: string
    :param detectorVersionId: **[REQUIRED]** 

      The ID of the detector version to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_entity_type(**kwargs)

    

    Deletes an entity type.

     

    You cannot delete an entity type that is included in an event type.

     

    When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteEntityType>`_    


    **Request Syntax** 
    ::

      response = client.delete_entity_type(
          name='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the entity type to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_event(**kwargs)

    

    Deletes the specified event.

     

    When you delete an event, Amazon Fraud Detector permanently deletes that event and the event data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteEvent>`_    


    **Request Syntax** 
    ::

      response = client.delete_event(
          eventId='string',
          eventTypeName='string'
      )
    :type eventId: string
    :param eventId: **[REQUIRED]** 

      The ID of the event to delete.

      

    
    :type eventTypeName: string
    :param eventTypeName: **[REQUIRED]** 

      The name of the event type.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    

  .. py:method:: delete_event_type(**kwargs)

    

    Deletes an event type.

     

    You cannot delete an event type that is used in a detector or a model.

     

    When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteEventType>`_    


    **Request Syntax** 
    ::

      response = client.delete_event_type(
          name='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the event type to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_external_model(**kwargs)

    

    Removes a SageMaker model from Amazon Fraud Detector.

     

    You can remove an Amazon SageMaker model if it is not associated with a detector version. Removing a SageMaker model disconnects it from Amazon Fraud Detector, but the model remains available in SageMaker.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteExternalModel>`_    


    **Request Syntax** 
    ::

      response = client.delete_external_model(
          modelEndpoint='string'
      )
    :type modelEndpoint: string
    :param modelEndpoint: **[REQUIRED]** 

      The endpoint of the Amazon Sagemaker model to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_label(**kwargs)

    

    Deletes a label.

     

    You cannot delete labels that are included in an event type in Amazon Fraud Detector.

     

    You cannot delete a label assigned to an event ID. You must first delete the relevant event ID.

     

    When you delete a label, Amazon Fraud Detector permanently deletes that label and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteLabel>`_    


    **Request Syntax** 
    ::

      response = client.delete_label(
          name='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the label to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    

  .. py:method:: delete_model(**kwargs)

    

    Deletes a model.

     

    You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.

     

    When you delete a model, Amazon Fraud Detector permanently deletes that model and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteModel>`_    


    **Request Syntax** 
    ::

      response = client.delete_model(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS'
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID of the model to delete.

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type of the model to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_model_version(**kwargs)

    

    Deletes a model version.

     

    You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.

     

    When you delete a model version, Amazon Fraud Detector permanently deletes that model version and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteModelVersion>`_    


    **Request Syntax** 
    ::

      response = client.delete_model_version(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          modelVersionNumber='string'
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID of the model version to delete.

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type of the model version to delete.

      

    
    :type modelVersionNumber: string
    :param modelVersionNumber: **[REQUIRED]** 

      The model version number of the model version to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    

  .. py:method:: delete_outcome(**kwargs)

    

    Deletes an outcome.

     

    You cannot delete an outcome that is used in a rule version.

     

    When you delete an outcome, Amazon Fraud Detector permanently deletes that outcome and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteOutcome>`_    


    **Request Syntax** 
    ::

      response = client.delete_outcome(
          name='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the outcome to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_rule(**kwargs)

    

    Deletes the rule. You cannot delete a rule if it is used by an ``ACTIVE`` or ``INACTIVE`` detector version.

     

    When you delete a rule, Amazon Fraud Detector permanently deletes that rule and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteRule>`_    


    **Request Syntax** 
    ::

      response = client.delete_rule(
          rule={
              'detectorId': 'string',
              'ruleId': 'string',
              'ruleVersion': 'string'
          }
      )
    :type rule: dict
    :param rule: **[REQUIRED]** 

      A rule.

      

    
      - **detectorId** *(string) --* **[REQUIRED]** 

        The detector for which the rule is associated.

        

      
      - **ruleId** *(string) --* **[REQUIRED]** 

        The rule ID.

        

      
      - **ruleVersion** *(string) --* **[REQUIRED]** 

        The rule version.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: delete_variable(**kwargs)

    

    Deletes a variable.

     

    You can't delete variables that are included in an event type in Amazon Fraud Detector.

     

    Amazon Fraud Detector automatically deletes model output variables and SageMaker model output variables when you delete the model. You can't delete these variables manually.

     

    When you delete a variable, Amazon Fraud Detector permanently deletes that variable and the data is no longer stored in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DeleteVariable>`_    


    **Request Syntax** 
    ::

      response = client.delete_variable(
          name='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the variable to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_detector(**kwargs)

    

    Gets all versions for a specified detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DescribeDetector>`_    


    **Request Syntax** 
    ::

      response = client.describe_detector(
          detectorId='string',
          nextToken='string',
          maxResults=123
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token from the previous response.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return for the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'detectorId': 'string',
            'detectorVersionSummaries': [
                {
                    'detectorVersionId': 'string',
                    'status': 'DRAFT'|'ACTIVE'|'INACTIVE',
                    'description': 'string',
                    'lastUpdatedTime': 'string'
                },
            ],
            'nextToken': 'string',
            'arn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **detectorId** *(string) --* 

          The detector ID.

          
        

        - **detectorVersionSummaries** *(list) --* 

          The status and description for each detector version.

          
          

          - *(dict) --* 

            The summary of the detector version.

            
            

            - **detectorVersionId** *(string) --* 

              The detector version ID. 

              
            

            - **status** *(string) --* 

              The detector version status. 

              
            

            - **description** *(string) --* 

              The detector version description. 

              
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of when the detector version was last updated.

              
        
      
        

        - **nextToken** *(string) --* 

          The next token to be used for subsequent requests.

          
        

        - **arn** *(string) --* 

          The detector ARN.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: describe_model_versions(**kwargs)

    

    Gets all of the model versions for the specified model type or for the specified model type and model ID. You can also get details for a single, specified model version. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/DescribeModelVersions>`_    


    **Request Syntax** 
    ::

      response = client.describe_model_versions(
          modelId='string',
          modelVersionNumber='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          nextToken='string',
          maxResults=123
      )
    :type modelId: string
    :param modelId: 

      The model ID.

      

    
    :type modelVersionNumber: string
    :param modelVersionNumber: 

      The model version number.

      

    
    :type modelType: string
    :param modelType: 

      The model type.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token from the previous results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of results to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'modelVersionDetails': [
                {
                    'modelId': 'string',
                    'modelType': 'ONLINE_FRAUD_INSIGHTS',
                    'modelVersionNumber': 'string',
                    'status': 'string',
                    'trainingDataSource': 'EXTERNAL_EVENTS',
                    'trainingDataSchema': {
                        'modelVariables': [
                            'string',
                        ],
                        'labelSchema': {
                            'labelMapper': {
                                'string': [
                                    'string',
                                ]
                            }
                        }
                    },
                    'externalEventsDetail': {
                        'dataLocation': 'string',
                        'dataAccessRoleArn': 'string'
                    },
                    'trainingResult': {
                        'dataValidationMetrics': {
                            'fileLevelMessages': [
                                {
                                    'title': 'string',
                                    'content': 'string',
                                    'type': 'string'
                                },
                            ],
                            'fieldLevelMessages': [
                                {
                                    'fieldName': 'string',
                                    'identifier': 'string',
                                    'title': 'string',
                                    'content': 'string',
                                    'type': 'string'
                                },
                            ]
                        },
                        'trainingMetrics': {
                            'auc': ...,
                            'metricDataPoints': [
                                {
                                    'fpr': ...,
                                    'precision': ...,
                                    'tpr': ...,
                                    'threshold': ...
                                },
                            ]
                        },
                        'variableImportanceMetrics': {
                            'LogitMetrics': [
                                {
                                    'variableName': 'string',
                                    'variableType': 'string',
                                    'variableImportance': ...
                                },
                            ]
                        }
                    },
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **modelVersionDetails** *(list) --* 

          The model version details.

          
          

          - *(dict) --* 

            The details of the model version.

            
            

            - **modelId** *(string) --* 

              The model ID.

              
            

            - **modelType** *(string) --* 

              The model type.

              
            

            - **modelVersionNumber** *(string) --* 

              The model version number.

              
            

            - **status** *(string) --* 

              The status of the model version.

              
            

            - **trainingDataSource** *(string) --* 

              The model version training data source.

              
            

            - **trainingDataSchema** *(dict) --* 

              The training data schema.

              
              

              - **modelVariables** *(list) --* 

                The training data schema variables.

                
                

                - *(string) --* 
            
              

              - **labelSchema** *(dict) --* 

                The label schema.

                
                

                - **labelMapper** *(dict) --* 

                  The label mapper maps the Amazon Fraud Detector supported model classification labels (``FRAUD`` , ``LEGIT`` ) to the appropriate event type labels. For example, if "``FRAUD`` " and "``LEGIT`` " are Amazon Fraud Detector supported labels, this mapper could be: ``{"FRAUD" => ["0"]`` , ``"LEGIT" => ["1"]}`` or ``{"FRAUD" => ["false"]`` , ``"LEGIT" => ["true"]}`` or ``{"FRAUD" => ["fraud", "abuse"]`` , ``"LEGIT" => ["legit", "safe"]}`` . The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. 

                  
                  

                  - *(string) --* 
                    

                    - *(list) --* 
                      

                      - *(string) --* 
                  
              
            
            
          
            

            - **externalEventsDetail** *(dict) --* 

              The event details.

              
              

              - **dataLocation** *(string) --* 

                The Amazon S3 bucket location for the data.

                
              

              - **dataAccessRoleArn** *(string) --* 

                The ARN of the role that provides Amazon Fraud Detector access to the data location.

                
          
            

            - **trainingResult** *(dict) --* 

              The training results.

              
              

              - **dataValidationMetrics** *(dict) --* 

                The validation metrics.

                
                

                - **fileLevelMessages** *(list) --* 

                  The file-specific model training validation messages.

                  
                  

                  - *(dict) --* 

                    The message details.

                    
                    

                    - **title** *(string) --* 

                      The message title.

                      
                    

                    - **content** *(string) --* 

                      The message content.

                      
                    

                    - **type** *(string) --* 

                      The message type.

                      
                
              
                

                - **fieldLevelMessages** *(list) --* 

                  The field-specific model training validation messages.

                  
                  

                  - *(dict) --* 

                    The message details.

                    
                    

                    - **fieldName** *(string) --* 

                      The field name.

                      
                    

                    - **identifier** *(string) --* 

                      The message ID.

                      
                    

                    - **title** *(string) --* 

                      The message title.

                      
                    

                    - **content** *(string) --* 

                      The message content.

                      
                    

                    - **type** *(string) --* 

                      The message type.

                      
                
              
            
              

              - **trainingMetrics** *(dict) --* 

                The training metric details.

                
                

                - **auc** *(float) --* 

                  The area under the curve. This summarizes true positive rate (TPR) and false positive rate (FPR) across all possible model score thresholds. A model with no predictive power has an AUC of 0.5, whereas a perfect model has a score of 1.0.

                  
                

                - **metricDataPoints** *(list) --* 

                  The data points details.

                  
                  

                  - *(dict) --* 

                    Model performance metrics data points.

                    
                    

                    - **fpr** *(float) --* 

                      The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.

                      
                    

                    - **precision** *(float) --* 

                      The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.

                      
                    

                    - **tpr** *(float) --* 

                      The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.

                      
                    

                    - **threshold** *(float) --* 

                      The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.

                      
                
              
            
              

              - **variableImportanceMetrics** *(dict) --* 

                The variable importance metrics.

                
                

                - **LogitMetrics** *(list) --* 

                  List of variable metrics.

                  
                  

                  - *(dict) --* 

                    The logit metric details.

                    
                    

                    - **variableName** *(string) --* 

                      The name of the variable.

                      
                    

                    - **variableType** *(string) --* 

                      The type of variable.

                      
                    

                    - **variableImportance** *(float) --* 

                      The relative importance of the variable.

                      
                
              
            
          
            

            - **lastUpdatedTime** *(string) --* 

              The timestamp when the model was last updated.

              
            

            - **createdTime** *(string) --* 

              The timestamp when the model was created.

              
            

            - **arn** *(string) --* 

              The model version ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next token.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_batch_prediction_jobs(**kwargs)

    

    Gets all batch prediction jobs or a specific job if you specify a job ID. This is a paginated API. If you provide a null maxResults, this action retrieves a maximum of 50 records per page. If you provide a maxResults, the value must be between 1 and 50. To get the next page results, provide the pagination token from the GetBatchPredictionJobsResponse as part of your request. A null pagination token fetches the records from the beginning.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetBatchPredictionJobs>`_    


    **Request Syntax** 
    ::

      response = client.get_batch_prediction_jobs(
          jobId='string',
          maxResults=123,
          nextToken='string'
      )
    :type jobId: string
    :param jobId: 

      The batch prediction job for which to get the details.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token from the previous request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'batchPredictions': [
                {
                    'jobId': 'string',
                    'status': 'IN_PROGRESS_INITIALIZING'|'IN_PROGRESS'|'CANCEL_IN_PROGRESS'|'CANCELED'|'COMPLETE'|'FAILED',
                    'failureReason': 'string',
                    'startTime': 'string',
                    'completionTime': 'string',
                    'lastHeartbeatTime': 'string',
                    'inputPath': 'string',
                    'outputPath': 'string',
                    'eventTypeName': 'string',
                    'detectorName': 'string',
                    'detectorVersion': 'string',
                    'iamRoleArn': 'string',
                    'arn': 'string',
                    'processedRecordsCount': 123,
                    'totalRecordsCount': 123
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **batchPredictions** *(list) --* 

          An array containing the details of each batch prediction job.

          
          

          - *(dict) --* 

            The batch prediction details.

            
            

            - **jobId** *(string) --* 

              The job ID for the batch prediction.

              
            

            - **status** *(string) --* 

              The batch prediction status.

              
            

            - **failureReason** *(string) --* 

              The reason a batch prediction job failed.

              
            

            - **startTime** *(string) --* 

              Timestamp of when the batch prediction job started.

              
            

            - **completionTime** *(string) --* 

              Timestamp of when the batch prediction job comleted.

              
            

            - **lastHeartbeatTime** *(string) --* 

              Timestamp of most recent heartbeat indicating the batch prediction job was making progress.

              
            

            - **inputPath** *(string) --* 

              The Amazon S3 location of your training file.

              
            

            - **outputPath** *(string) --* 

              The Amazon S3 location of your output file.

              
            

            - **eventTypeName** *(string) --* 

              The name of the event type.

              
            

            - **detectorName** *(string) --* 

              The name of the detector.

              
            

            - **detectorVersion** *(string) --* 

              The detector version. 

              
            

            - **iamRoleArn** *(string) --* 

              The ARN of the IAM role to use for this job request.

              
            

            - **arn** *(string) --* 

              The ARN of batch prediction job.

              
            

            - **processedRecordsCount** *(integer) --* 

              The number of records processed by the batch prediction job.

              
            

            - **totalRecordsCount** *(integer) --* 

              The total number of records in the batch prediction job.

              
        
      
        

        - **nextToken** *(string) --* 

          The next token for the subsequent request.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_detector_version(**kwargs)

    

    Gets a particular detector version. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetDetectorVersion>`_    


    **Request Syntax** 
    ::

      response = client.get_detector_version(
          detectorId='string',
          detectorVersionId='string'
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID.

      

    
    :type detectorVersionId: string
    :param detectorVersionId: **[REQUIRED]** 

      The detector version ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'detectorId': 'string',
            'detectorVersionId': 'string',
            'description': 'string',
            'externalModelEndpoints': [
                'string',
            ],
            'modelVersions': [
                {
                    'modelId': 'string',
                    'modelType': 'ONLINE_FRAUD_INSIGHTS',
                    'modelVersionNumber': 'string',
                    'arn': 'string'
                },
            ],
            'rules': [
                {
                    'detectorId': 'string',
                    'ruleId': 'string',
                    'ruleVersion': 'string'
                },
            ],
            'status': 'DRAFT'|'ACTIVE'|'INACTIVE',
            'lastUpdatedTime': 'string',
            'createdTime': 'string',
            'ruleExecutionMode': 'ALL_MATCHED'|'FIRST_MATCHED',
            'arn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **detectorId** *(string) --* 

          The detector ID.

          
        

        - **detectorVersionId** *(string) --* 

          The detector version ID.

          
        

        - **description** *(string) --* 

          The detector version description.

          
        

        - **externalModelEndpoints** *(list) --* 

          The Amazon SageMaker model endpoints included in the detector version.

          
          

          - *(string) --* 
      
        

        - **modelVersions** *(list) --* 

          The model versions included in the detector version. 

          
          

          - *(dict) --* 

            The model version.

            
            

            - **modelId** *(string) --* 

              The model ID.

              
            

            - **modelType** *(string) --* 

              The model type.

              
            

            - **modelVersionNumber** *(string) --* 

              The model version number.

              
            

            - **arn** *(string) --* 

              The model version ARN.

              
        
      
        

        - **rules** *(list) --* 

          The rules included in the detector version.

          
          

          - *(dict) --* 

            A rule.

            
            

            - **detectorId** *(string) --* 

              The detector for which the rule is associated.

              
            

            - **ruleId** *(string) --* 

              The rule ID.

              
            

            - **ruleVersion** *(string) --* 

              The rule version.

              
        
      
        

        - **status** *(string) --* 

          The status of the detector version.

          
        

        - **lastUpdatedTime** *(string) --* 

          The timestamp when the detector version was last updated. 

          
        

        - **createdTime** *(string) --* 

          The timestamp when the detector version was created. 

          
        

        - **ruleExecutionMode** *(string) --* 

          The execution mode of the rule in the dectector

           

           ``FIRST_MATCHED`` indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.

           

           ``ALL_MATCHED`` indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.

          
        

        - **arn** *(string) --* 

          The detector version ARN.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_detectors(**kwargs)

    

    Gets all detectors or a single detector if a ``detectorId`` is specified. This is a paginated API. If you provide a null ``maxResults`` , this action retrieves a maximum of 10 records per page. If you provide a ``maxResults`` , the value must be between 5 and 10. To get the next page results, provide the pagination token from the ``GetDetectorsResponse`` as part of your request. A null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetDetectors>`_    


    **Request Syntax** 
    ::

      response = client.get_detectors(
          detectorId='string',
          nextToken='string',
          maxResults=123
      )
    :type detectorId: string
    :param detectorId: 

      The detector ID.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token for the subsequent request.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'detectors': [
                {
                    'detectorId': 'string',
                    'description': 'string',
                    'eventTypeName': 'string',
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **detectors** *(list) --* 

          The detectors.

          
          

          - *(dict) --* 

            The detector.

            
            

            - **detectorId** *(string) --* 

              The detector ID.

              
            

            - **description** *(string) --* 

              The detector description.

              
            

            - **eventTypeName** *(string) --* 

              The name of the event type.

              
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of when the detector was last updated.

              
            

            - **createdTime** *(string) --* 

              Timestamp of when the detector was created.

              
            

            - **arn** *(string) --* 

              The detector ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_entity_types(**kwargs)

    

    Gets all entity types or a specific entity type if a name is specified. This is a paginated API. If you provide a null ``maxResults`` , this action retrieves a maximum of 10 records per page. If you provide a ``maxResults`` , the value must be between 5 and 10. To get the next page results, provide the pagination token from the ``GetEntityTypesResponse`` as part of your request. A null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetEntityTypes>`_    


    **Request Syntax** 
    ::

      response = client.get_entity_types(
          name='string',
          nextToken='string',
          maxResults=123
      )
    :type name: string
    :param name: 

      The name.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token for the subsequent request.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'entityTypes': [
                {
                    'name': 'string',
                    'description': 'string',
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **entityTypes** *(list) --* 

          An array of entity types.

          
          

          - *(dict) --* 

            The entity type details.

            
            

            - **name** *(string) --* 

              The entity type name.

              
            

            - **description** *(string) --* 

              The entity type description.

              
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of when the entity type was last updated.

              
            

            - **createdTime** *(string) --* 

              Timestamp of when the entity type was created.

              
            

            - **arn** *(string) --* 

              The entity type ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_event_prediction(**kwargs)

    

    Evaluates an event against a detector version. If a version ID is not provided, the detector’s (``ACTIVE`` ) version is used.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetEventPrediction>`_    


    **Request Syntax** 
    ::

      response = client.get_event_prediction(
          detectorId='string',
          detectorVersionId='string',
          eventId='string',
          eventTypeName='string',
          entities=[
              {
                  'entityType': 'string',
                  'entityId': 'string'
              },
          ],
          eventTimestamp='string',
          eventVariables={
              'string': 'string'
          },
          externalModelEndpointDataBlobs={
              'string': {
                  'byteBuffer': b'bytes',
                  'contentType': 'string'
              }
          }
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID.

      

    
    :type detectorVersionId: string
    :param detectorVersionId: 

      The detector version ID.

      

    
    :type eventId: string
    :param eventId: **[REQUIRED]** 

      The unique ID used to identify the event.

      

    
    :type eventTypeName: string
    :param eventTypeName: **[REQUIRED]** 

      The event type associated with the detector specified for the prediction.

      

    
    :type entities: list
    :param entities: **[REQUIRED]** 

      The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."

      

    
      - *(dict) --* 

        The entity details. 

        

      
        - **entityType** *(string) --* **[REQUIRED]** 

          The entity type.

          

        
        - **entityId** *(string) --* **[REQUIRED]** 

          The entity ID. If you do not know the ``entityId`` , you can pass ``unknown`` , which is areserved string literal.

          

        
      
  
    :type eventTimestamp: string
    :param eventTimestamp: **[REQUIRED]** 

      Timestamp that defines when the event under evaluation occurred.

      

    
    :type eventVariables: dict
    :param eventVariables: **[REQUIRED]** 

      Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.

       

      .. warning::

         

         
        * You must provide at least one eventVariable 
         
        * If detectorVersion is associated with a modelVersion, you must provide at least one associated eventVariable 
         

         

       

      To ensure highest possible fraud prediction and to simplify your data preparation, Amazon Fraud Detector will replace all missing variables or values as follows:

       

       **For Amazon Fraud Detector trained models:**  

       

      If a null value is provided explicitly for a variable or if a variable is missing, model will replace the null value or the missing variable (no variable name in the eventVariables map) with calculated default mean/medians for numeric variables and with special values for categorical variables.

       

       **For External models ( for example, imported SageMaker):**  

       

      If a null value is provided explicitly for a variable, the model and rules will use “null” as the value. If a variable is not provided (no variable name in the eventVariables map), model and rules will use the default value that is provided for the variable. 

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type externalModelEndpointDataBlobs: dict
    :param externalModelEndpointDataBlobs: 

      The Amazon SageMaker model endpoint input data blobs.

      

    
      - *(string) --* 

      
        - *(dict) --* 

          A pre-formed Amazon SageMaker model input you can include if your detector version includes an imported Amazon SageMaker model endpoint with pass-through input configuration.

          

        
          - **byteBuffer** *(bytes) --* 

            The byte buffer of the Amazon SageMaker model endpoint input data blob.

            

          
          - **contentType** *(string) --* 

            The content type of the Amazon SageMaker model endpoint input data blob. 

            

          
        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'modelScores': [
                {
                    'modelVersion': {
                        'modelId': 'string',
                        'modelType': 'ONLINE_FRAUD_INSIGHTS',
                        'modelVersionNumber': 'string',
                        'arn': 'string'
                    },
                    'scores': {
                        'string': ...
                    }
                },
            ],
            'ruleResults': [
                {
                    'ruleId': 'string',
                    'outcomes': [
                        'string',
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **modelScores** *(list) --* 

          The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.

          
          

          - *(dict) --* 

            The fraud prediction scores.

            
            

            - **modelVersion** *(dict) --* 

              The model version.

              
              

              - **modelId** *(string) --* 

                The model ID.

                
              

              - **modelType** *(string) --* 

                The model type.

                
              

              - **modelVersionNumber** *(string) --* 

                The model version number.

                
              

              - **arn** *(string) --* 

                The model version ARN.

                
          
            

            - **scores** *(dict) --* 

              The model's fraud prediction scores.

              
              

              - *(string) --* 
                

                - *(float) --* 
          
        
        
      
        

        - **ruleResults** *(list) --* 

          The results.

          
          

          - *(dict) --* 

            The rule results.

            
            

            - **ruleId** *(string) --* 

              The rule ID that was matched, based on the rule execution mode.

              
            

            - **outcomes** *(list) --* 

              The outcomes of the matched rule, based on the rule execution mode.

              
              

              - *(string) --* 
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ConflictException`

    

  .. py:method:: get_event_types(**kwargs)

    

    Gets all event types or a specific event type if name is provided. This is a paginated API. If you provide a null ``maxResults`` , this action retrieves a maximum of 10 records per page. If you provide a ``maxResults`` , the value must be between 5 and 10. To get the next page results, provide the pagination token from the ``GetEventTypesResponse`` as part of your request. A null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetEventTypes>`_    


    **Request Syntax** 
    ::

      response = client.get_event_types(
          name='string',
          nextToken='string',
          maxResults=123
      )
    :type name: string
    :param name: 

      The name.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token for the subsequent request.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'eventTypes': [
                {
                    'name': 'string',
                    'description': 'string',
                    'eventVariables': [
                        'string',
                    ],
                    'labels': [
                        'string',
                    ],
                    'entityTypes': [
                        'string',
                    ],
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **eventTypes** *(list) --* 

          An array of event types.

          
          

          - *(dict) --* 

            The event type details.

            
            

            - **name** *(string) --* 

              The event type name.

              
            

            - **description** *(string) --* 

              The event type description.

              
            

            - **eventVariables** *(list) --* 

              The event type event variables.

              
              

              - *(string) --* 
          
            

            - **labels** *(list) --* 

              The event type labels.

              
              

              - *(string) --* 
          
            

            - **entityTypes** *(list) --* 

              The event type entity types.

              
              

              - *(string) --* 
          
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of when the event type was last updated.

              
            

            - **createdTime** *(string) --* 

              Timestamp of when the event type was created.

              
            

            - **arn** *(string) --* 

              The entity type ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_external_models(**kwargs)

    

    Gets the details for one or more Amazon SageMaker models that have been imported into the service. This is a paginated API. If you provide a null ``maxResults`` , this actions retrieves a maximum of 10 records per page. If you provide a ``maxResults`` , the value must be between 5 and 10. To get the next page results, provide the pagination token from the ``GetExternalModelsResult`` as part of your request. A null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetExternalModels>`_    


    **Request Syntax** 
    ::

      response = client.get_external_models(
          modelEndpoint='string',
          nextToken='string',
          maxResults=123
      )
    :type modelEndpoint: string
    :param modelEndpoint: 

      The Amazon SageMaker model endpoint.

      

    
    :type nextToken: string
    :param nextToken: 

      The next page token for the request.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'externalModels': [
                {
                    'modelEndpoint': 'string',
                    'modelSource': 'SAGEMAKER',
                    'invokeModelEndpointRoleArn': 'string',
                    'inputConfiguration': {
                        'eventTypeName': 'string',
                        'format': 'TEXT_CSV'|'APPLICATION_JSON',
                        'useEventVariables': True|False,
                        'jsonInputTemplate': 'string',
                        'csvInputTemplate': 'string'
                    },
                    'outputConfiguration': {
                        'format': 'TEXT_CSV'|'APPLICATION_JSONLINES',
                        'jsonKeyToVariableMap': {
                            'string': 'string'
                        },
                        'csvIndexToVariableMap': {
                            'string': 'string'
                        }
                    },
                    'modelEndpointStatus': 'ASSOCIATED'|'DISSOCIATED',
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **externalModels** *(list) --* 

          Gets the Amazon SageMaker models.

          
          

          - *(dict) --* 

            The Amazon SageMaker model.

            
            

            - **modelEndpoint** *(string) --* 

              The Amazon SageMaker model endpoints.

              
            

            - **modelSource** *(string) --* 

              The source of the model.

              
            

            - **invokeModelEndpointRoleArn** *(string) --* 

              The role used to invoke the model. 

              
            

            - **inputConfiguration** *(dict) --* 

              The input configuration.

              
              

              - **eventTypeName** *(string) --* 

                The event type name.

                
              

              - **format** *(string) --* 

                The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector.

                
              

              - **useEventVariables** *(boolean) --* 

                The event variables.

                
              

              - **jsonInputTemplate** *(string) --* 

                Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. 

                
              

              - **csvInputTemplate** *(string) --* 

                Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. 

                
          
            

            - **outputConfiguration** *(dict) --* 

              The output configuration.

              
              

              - **format** *(string) --* 

                The format of the model output configuration.

                
              

              - **jsonKeyToVariableMap** *(dict) --* 

                A map of JSON keys in response from SageMaker to the Amazon Fraud Detector variables. 

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **csvIndexToVariableMap** *(dict) --* 

                A map of CSV index values in the SageMaker response to the Amazon Fraud Detector variables. 

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
            

            - **modelEndpointStatus** *(string) --* 

              The Amazon Fraud Detector status for the external model endpoint

              
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of when the model was last updated.

              
            

            - **createdTime** *(string) --* 

              Timestamp of when the model was last created.

              
            

            - **arn** *(string) --* 

              The model ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token to be used in subsequent requests.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_kms_encryption_key()

    

    Gets the encryption key if a Key Management Service (KMS) customer master key (CMK) has been specified to be used to encrypt content in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetKMSEncryptionKey>`_    


    **Request Syntax** 

    ::

      response = client.get_kms_encryption_key()
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'kmsKey': {
                'kmsEncryptionKeyArn': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **kmsKey** *(dict) --* 

          The KMS encryption key.

          
          

          - **kmsEncryptionKeyArn** *(string) --* 

            The encryption key ARN.

            
      
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_labels(**kwargs)

    

    Gets all labels or a specific label if name is provided. This is a paginated API. If you provide a null ``maxResults`` , this action retrieves a maximum of 50 records per page. If you provide a ``maxResults`` , the value must be between 10 and 50. To get the next page results, provide the pagination token from the ``GetGetLabelsResponse`` as part of your request. A null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetLabels>`_    


    **Request Syntax** 
    ::

      response = client.get_labels(
          name='string',
          nextToken='string',
          maxResults=123
      )
    :type name: string
    :param name: 

      The name of the label or labels to get.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token for the subsequent request.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'labels': [
                {
                    'name': 'string',
                    'description': 'string',
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **labels** *(list) --* 

          An array of labels.

          
          

          - *(dict) --* 

            The label details.

            
            

            - **name** *(string) --* 

              The label name.

              
            

            - **description** *(string) --* 

              The label description.

              
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of when the label was last updated.

              
            

            - **createdTime** *(string) --* 

              Timestamp of when the event type was created.

              
            

            - **arn** *(string) --* 

              The label ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_model_version(**kwargs)

    

    Gets the details of the specified model version.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetModelVersion>`_    


    **Request Syntax** 
    ::

      response = client.get_model_version(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          modelVersionNumber='string'
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID.

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type.

      

    
    :type modelVersionNumber: string
    :param modelVersionNumber: **[REQUIRED]** 

      The model version number.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'modelId': 'string',
            'modelType': 'ONLINE_FRAUD_INSIGHTS',
            'modelVersionNumber': 'string',
            'trainingDataSource': 'EXTERNAL_EVENTS',
            'trainingDataSchema': {
                'modelVariables': [
                    'string',
                ],
                'labelSchema': {
                    'labelMapper': {
                        'string': [
                            'string',
                        ]
                    }
                }
            },
            'externalEventsDetail': {
                'dataLocation': 'string',
                'dataAccessRoleArn': 'string'
            },
            'status': 'string',
            'arn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **modelId** *(string) --* 

          The model ID.

          
        

        - **modelType** *(string) --* 

          The model type.

          
        

        - **modelVersionNumber** *(string) --* 

          The model version number.

          
        

        - **trainingDataSource** *(string) --* 

          The training data source.

          
        

        - **trainingDataSchema** *(dict) --* 

          The training data schema.

          
          

          - **modelVariables** *(list) --* 

            The training data schema variables.

            
            

            - *(string) --* 
        
          

          - **labelSchema** *(dict) --* 

            The label schema.

            
            

            - **labelMapper** *(dict) --* 

              The label mapper maps the Amazon Fraud Detector supported model classification labels (``FRAUD`` , ``LEGIT`` ) to the appropriate event type labels. For example, if "``FRAUD`` " and "``LEGIT`` " are Amazon Fraud Detector supported labels, this mapper could be: ``{"FRAUD" => ["0"]`` , ``"LEGIT" => ["1"]}`` or ``{"FRAUD" => ["false"]`` , ``"LEGIT" => ["true"]}`` or ``{"FRAUD" => ["fraud", "abuse"]`` , ``"LEGIT" => ["legit", "safe"]}`` . The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. 

              
              

              - *(string) --* 
                

                - *(list) --* 
                  

                  - *(string) --* 
              
          
        
        
      
        

        - **externalEventsDetail** *(dict) --* 

          The event details.

          
          

          - **dataLocation** *(string) --* 

            The Amazon S3 bucket location for the data.

            
          

          - **dataAccessRoleArn** *(string) --* 

            The ARN of the role that provides Amazon Fraud Detector access to the data location.

            
      
        

        - **status** *(string) --* 

          The model version status.

           

          Possible values are:

           

           
          * ``TRAINING_IN_PROGRESS``   
           
          * ``TRAINING_COMPLETE``   
           
          * ``ACTIVATE_REQUESTED``   
           
          * ``ACTIVATE_IN_PROGRESS``   
           
          * ``ACTIVE``   
           
          * ``INACTIVATE_REQUESTED``   
           
          * ``INACTIVATE_IN_PROGRESS``   
           
          * ``INACTIVE``   
           
          * ``ERROR``   
           

          
        

        - **arn** *(string) --* 

          The model version ARN.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_models(**kwargs)

    

    Gets one or more models. Gets all models for the AWS account if no model type and no model id provided. Gets all models for the AWS account and model type, if the model type is specified but model id is not provided. Gets a specific model if (model type, model id) tuple is specified. 

     

    This is a paginated API. If you provide a null ``maxResults`` , this action retrieves a maximum of 10 records per page. If you provide a ``maxResults`` , the value must be between 1 and 10. To get the next page results, provide the pagination token from the response as part of your request. A null pagination token fetches the records from the beginning.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetModels>`_    


    **Request Syntax** 
    ::

      response = client.get_models(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          nextToken='string',
          maxResults=123
      )
    :type modelId: string
    :param modelId: 

      The model ID.

      

    
    :type modelType: string
    :param modelType: 

      The model type.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token for the subsequent request.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'nextToken': 'string',
            'models': [
                {
                    'modelId': 'string',
                    'modelType': 'ONLINE_FRAUD_INSIGHTS',
                    'description': 'string',
                    'eventTypeName': 'string',
                    'createdTime': 'string',
                    'lastUpdatedTime': 'string',
                    'arn': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **nextToken** *(string) --* 

          The next page token to be used in subsequent requests.

          
        

        - **models** *(list) --* 

          The array of models.

          
          

          - *(dict) --* 

            The model.

            
            

            - **modelId** *(string) --* 

              The model ID.

              
            

            - **modelType** *(string) --* 

              The model type.

              
            

            - **description** *(string) --* 

              The model description.

              
            

            - **eventTypeName** *(string) --* 

              The name of the event type.

              
            

            - **createdTime** *(string) --* 

              Timestamp of when the model was created.

              
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of last time the model was updated.

              
            

            - **arn** *(string) --* 

              The ARN of the model.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_outcomes(**kwargs)

    

    Gets one or more outcomes. This is a paginated API. If you provide a null ``maxResults`` , this actions retrieves a maximum of 100 records per page. If you provide a ``maxResults`` , the value must be between 50 and 100. To get the next page results, provide the pagination token from the ``GetOutcomesResult`` as part of your request. A null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetOutcomes>`_    


    **Request Syntax** 
    ::

      response = client.get_outcomes(
          name='string',
          nextToken='string',
          maxResults=123
      )
    :type name: string
    :param name: 

      The name of the outcome or outcomes to get.

      

    
    :type nextToken: string
    :param nextToken: 

      The next page token for the request. 

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'outcomes': [
                {
                    'name': 'string',
                    'description': 'string',
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **outcomes** *(list) --* 

          The outcomes. 

          
          

          - *(dict) --* 

            The outcome.

            
            

            - **name** *(string) --* 

              The outcome name.

              
            

            - **description** *(string) --* 

              The outcome description.

              
            

            - **lastUpdatedTime** *(string) --* 

              The timestamp when the outcome was last updated.

              
            

            - **createdTime** *(string) --* 

              The timestamp when the outcome was created.

              
            

            - **arn** *(string) --* 

              The outcome ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token for subsequent requests.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_rules(**kwargs)

    

    Get all rules for a detector (paginated) if ``ruleId`` and ``ruleVersion`` are not specified. Gets all rules for the detector and the ``ruleId`` if present (paginated). Gets a specific rule if both the ``ruleId`` and the ``ruleVersion`` are specified.

     

    This is a paginated API. Providing null maxResults results in retrieving maximum of 100 records per page. If you provide maxResults the value must be between 50 and 100. To get the next page result, a provide a pagination token from GetRulesResult as part of your request. Null pagination token fetches the records from the beginning.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetRules>`_    


    **Request Syntax** 
    ::

      response = client.get_rules(
          ruleId='string',
          detectorId='string',
          ruleVersion='string',
          nextToken='string',
          maxResults=123
      )
    :type ruleId: string
    :param ruleId: 

      The rule ID.

      

    
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID.

      

    
    :type ruleVersion: string
    :param ruleVersion: 

      The rule version.

      

    
    :type nextToken: string
    :param nextToken: 

      The next page token.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of rules to return for the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ruleDetails': [
                {
                    'ruleId': 'string',
                    'description': 'string',
                    'detectorId': 'string',
                    'ruleVersion': 'string',
                    'expression': 'string',
                    'language': 'DETECTORPL',
                    'outcomes': [
                        'string',
                    ],
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ruleDetails** *(list) --* 

          The details of the requested rule.

          
          

          - *(dict) --* 

            The details of the rule.

            
            

            - **ruleId** *(string) --* 

              The rule ID.

              
            

            - **description** *(string) --* 

              The rule description.

              
            

            - **detectorId** *(string) --* 

              The detector for which the rule is associated.

              
            

            - **ruleVersion** *(string) --* 

              The rule version.

              
            

            - **expression** *(string) --* 

              The rule expression.

              
            

            - **language** *(string) --* 

              The rule language.

              
            

            - **outcomes** *(list) --* 

              The rule outcomes.

              
              

              - *(string) --* 
          
            

            - **lastUpdatedTime** *(string) --* 

              Timestamp of the last time the rule was updated.

              
            

            - **createdTime** *(string) --* 

              The timestamp of when the rule was created.

              
            

            - **arn** *(string) --* 

              The rule ARN.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token to be used in subsequent requests.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_variables(**kwargs)

    

    Gets all of the variables or the specific variable. This is a paginated API. Providing null ``maxSizePerPage`` results in retrieving maximum of 100 records per page. If you provide ``maxSizePerPage`` the value must be between 50 and 100. To get the next page result, a provide a pagination token from ``GetVariablesResult`` as part of your request. Null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/GetVariables>`_    


    **Request Syntax** 
    ::

      response = client.get_variables(
          name='string',
          nextToken='string',
          maxResults=123
      )
    :type name: string
    :param name: 

      The name of the variable. 

      

    
    :type nextToken: string
    :param nextToken: 

      The next page token of the get variable request. 

      

    
    :type maxResults: integer
    :param maxResults: 

      The max size per page determined for the get variable request. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'variables': [
                {
                    'name': 'string',
                    'dataType': 'STRING'|'INTEGER'|'FLOAT'|'BOOLEAN',
                    'dataSource': 'EVENT'|'MODEL_SCORE'|'EXTERNAL_MODEL_SCORE',
                    'defaultValue': 'string',
                    'description': 'string',
                    'variableType': 'string',
                    'lastUpdatedTime': 'string',
                    'createdTime': 'string',
                    'arn': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **variables** *(list) --* 

          The names of the variables returned. 

          
          

          - *(dict) --* 

            The variable.

            
            

            - **name** *(string) --* 

              The name of the variable.

              
            

            - **dataType** *(string) --* 

              The data type of the variable. For more information see `Variable types <https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types>`__ .

              
            

            - **dataSource** *(string) --* 

              The data source of the variable.

              
            

            - **defaultValue** *(string) --* 

              The default value of the variable.

              
            

            - **description** *(string) --* 

              The description of the variable. 

              
            

            - **variableType** *(string) --* 

              The variable type of the variable.

               

              Valid Values: ``AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT``  

              
            

            - **lastUpdatedTime** *(string) --* 

              The time when variable was last updated.

              
            

            - **createdTime** *(string) --* 

              The time when the variable was created.

              
            

            - **arn** *(string) --* 

              The ARN of the variable.

              
        
      
        

        - **nextToken** *(string) --* 

          The next page token to be used in subsequent requests. 

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists all tags associated with the resource. This is a paginated API. To get the next page results, provide the pagination token from the response as part of your request. A null pagination token fetches the records from the beginning. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceARN='string',
          nextToken='string',
          maxResults=123
      )
    :type resourceARN: string
    :param resourceARN: **[REQUIRED]** 

      The ARN that specifies the resource whose tags you want to list.

      

    
    :type nextToken: string
    :param nextToken: 

      The next token from the previous results.

      

    
    :type maxResults: integer
    :param maxResults: 

      The maximum number of objects to return for the request. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': [
                {
                    'key': 'string',
                    'value': 'string'
                },
            ],
            'nextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(list) --* 

          A collection of key and value pairs.

          
          

          - *(dict) --* 

            A key and value pair. 

            
            

            - **key** *(string) --* 

              A tag key.

              
            

            - **value** *(string) --* 

              A value assigned to a tag key.

              
        
      
        

        - **nextToken** *(string) --* 

          The next token for subsequent requests. 

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_detector(**kwargs)

    

    Creates or updates a detector. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/PutDetector>`_    


    **Request Syntax** 
    ::

      response = client.put_detector(
          detectorId='string',
          description='string',
          eventTypeName='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID. 

      

    
    :type description: string
    :param description: 

      The description of the detector.

      

    
    :type eventTypeName: string
    :param eventTypeName: **[REQUIRED]** 

      The name of the event type.

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_entity_type(**kwargs)

    

    Creates or updates an entity type. An entity represents who is performing the event. As part of a fraud prediction, you pass the entity ID to indicate the specific entity who performed the event. An entity type classifies the entity. Example classifications include customer, merchant, or account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/PutEntityType>`_    


    **Request Syntax** 
    ::

      response = client.put_entity_type(
          name='string',
          description='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the entity type.

      

    
    :type description: string
    :param description: 

      The description.

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_event_type(**kwargs)

    

    Creates or updates an event type. An event is a business activity that is evaluated for fraud risk. With Amazon Fraud Detector, you generate fraud predictions for events. An event type defines the structure for an event sent to Amazon Fraud Detector. This includes the variables sent as part of the event, the entity performing the event (such as a customer), and the labels that classify the event. Example event types include online payment transactions, account registrations, and authentications.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/PutEventType>`_    


    **Request Syntax** 
    ::

      response = client.put_event_type(
          name='string',
          description='string',
          eventVariables=[
              'string',
          ],
          labels=[
              'string',
          ],
          entityTypes=[
              'string',
          ],
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name.

      

    
    :type description: string
    :param description: 

      The description of the event type.

      

    
    :type eventVariables: list
    :param eventVariables: **[REQUIRED]** 

      The event type variables.

      

    
      - *(string) --* 

      
  
    :type labels: list
    :param labels: 

      The event type labels.

      

    
      - *(string) --* 

      
  
    :type entityTypes: list
    :param entityTypes: **[REQUIRED]** 

      The entity type for the event type. Example entity types: customer, merchant, account.

      

    
      - *(string) --* 

      
  
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_external_model(**kwargs)

    

    Creates or updates an Amazon SageMaker model endpoint. You can also use this action to update the configuration of the model endpoint, including the IAM role and/or the mapped variables. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/PutExternalModel>`_    


    **Request Syntax** 
    ::

      response = client.put_external_model(
          modelEndpoint='string',
          modelSource='SAGEMAKER',
          invokeModelEndpointRoleArn='string',
          inputConfiguration={
              'eventTypeName': 'string',
              'format': 'TEXT_CSV'|'APPLICATION_JSON',
              'useEventVariables': True|False,
              'jsonInputTemplate': 'string',
              'csvInputTemplate': 'string'
          },
          outputConfiguration={
              'format': 'TEXT_CSV'|'APPLICATION_JSONLINES',
              'jsonKeyToVariableMap': {
                  'string': 'string'
              },
              'csvIndexToVariableMap': {
                  'string': 'string'
              }
          },
          modelEndpointStatus='ASSOCIATED'|'DISSOCIATED',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type modelEndpoint: string
    :param modelEndpoint: **[REQUIRED]** 

      The model endpoints name.

      

    
    :type modelSource: string
    :param modelSource: **[REQUIRED]** 

      The source of the model.

      

    
    :type invokeModelEndpointRoleArn: string
    :param invokeModelEndpointRoleArn: **[REQUIRED]** 

      The IAM role used to invoke the model endpoint.

      

    
    :type inputConfiguration: dict
    :param inputConfiguration: **[REQUIRED]** 

      The model endpoint input configuration.

      

    
      - **eventTypeName** *(string) --* 

        The event type name.

        

      
      - **format** *(string) --* 

        The format of the model input configuration. The format differs depending on if it is passed through to SageMaker or constructed by Amazon Fraud Detector.

        

      
      - **useEventVariables** *(boolean) --* **[REQUIRED]** 

        The event variables.

        

      
      - **jsonInputTemplate** *(string) --* 

        Template for constructing the JSON input-data sent to SageMaker. At event-evaluation, the placeholders for variable names in the template will be replaced with the variable values before being sent to SageMaker. 

        

      
      - **csvInputTemplate** *(string) --* 

        Template for constructing the CSV input-data sent to SageMaker. At event-evaluation, the placeholders for variable-names in the template will be replaced with the variable values before being sent to SageMaker. 

        

      
    
    :type outputConfiguration: dict
    :param outputConfiguration: **[REQUIRED]** 

      The model endpoint output configuration.

      

    
      - **format** *(string) --* **[REQUIRED]** 

        The format of the model output configuration.

        

      
      - **jsonKeyToVariableMap** *(dict) --* 

        A map of JSON keys in response from SageMaker to the Amazon Fraud Detector variables. 

        

      
        - *(string) --* 

        
          - *(string) --* 

          
    
  
      - **csvIndexToVariableMap** *(dict) --* 

        A map of CSV index values in the SageMaker response to the Amazon Fraud Detector variables. 

        

      
        - *(string) --* 

        
          - *(string) --* 

          
    
  
    
    :type modelEndpointStatus: string
    :param modelEndpointStatus: **[REQUIRED]** 

      The model endpoint’s status in Amazon Fraud Detector.

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_kms_encryption_key(**kwargs)

    

    Specifies the Key Management Service (KMS) customer master key (CMK) to be used to encrypt content in Amazon Fraud Detector.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/PutKMSEncryptionKey>`_    


    **Request Syntax** 
    ::

      response = client.put_kms_encryption_key(
          kmsEncryptionKeyArn='string'
      )
    :type kmsEncryptionKeyArn: string
    :param kmsEncryptionKeyArn: **[REQUIRED]** 

      The KMS encryption key ARN.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_label(**kwargs)

    

    Creates or updates label. A label classifies an event as fraudulent or legitimate. Labels are associated with event types and used to train supervised machine learning models in Amazon Fraud Detector. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/PutLabel>`_    


    **Request Syntax** 
    ::

      response = client.put_label(
          name='string',
          description='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The label name.

      

    
    :type description: string
    :param description: 

      The label description.

      

    
    :type tags: list
    :param tags: 

      

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: put_outcome(**kwargs)

    

    Creates or updates an outcome. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/PutOutcome>`_    


    **Request Syntax** 
    ::

      response = client.put_outcome(
          name='string',
          description='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the outcome.

      

    
    :type description: string
    :param description: 

      The outcome description.

      

    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Assigns tags to a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceARN='string',
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type resourceARN: string
    :param resourceARN: **[REQUIRED]** 

      The resource ARN.

      

    
    :type tags: list
    :param tags: **[REQUIRED]** 

      The tags to assign to the resource.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes tags from a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceARN='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceARN: string
    :param resourceARN: **[REQUIRED]** 

      The ARN of the resource from which to remove the tag.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      The resource ARN.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_detector_version(**kwargs)

    

    Updates a detector version. The detector version attributes that you can update include models, external model endpoints, rules, rule execution mode, and description. You can only update a ``DRAFT`` detector version.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateDetectorVersion>`_    


    **Request Syntax** 
    ::

      response = client.update_detector_version(
          detectorId='string',
          detectorVersionId='string',
          externalModelEndpoints=[
              'string',
          ],
          rules=[
              {
                  'detectorId': 'string',
                  'ruleId': 'string',
                  'ruleVersion': 'string'
              },
          ],
          description='string',
          modelVersions=[
              {
                  'modelId': 'string',
                  'modelType': 'ONLINE_FRAUD_INSIGHTS',
                  'modelVersionNumber': 'string',
                  'arn': 'string'
              },
          ],
          ruleExecutionMode='ALL_MATCHED'|'FIRST_MATCHED'
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The parent detector ID for the detector version you want to update.

      

    
    :type detectorVersionId: string
    :param detectorVersionId: **[REQUIRED]** 

      The detector version ID. 

      

    
    :type externalModelEndpoints: list
    :param externalModelEndpoints: **[REQUIRED]** 

      The Amazon SageMaker model endpoints to include in the detector version.

      

    
      - *(string) --* 

      
  
    :type rules: list
    :param rules: **[REQUIRED]** 

      The rules to include in the detector version.

      

    
      - *(dict) --* 

        A rule.

        

      
        - **detectorId** *(string) --* **[REQUIRED]** 

          The detector for which the rule is associated.

          

        
        - **ruleId** *(string) --* **[REQUIRED]** 

          The rule ID.

          

        
        - **ruleVersion** *(string) --* **[REQUIRED]** 

          The rule version.

          

        
      
  
    :type description: string
    :param description: 

      The detector version description. 

      

    
    :type modelVersions: list
    :param modelVersions: 

      The model versions to include in the detector version.

      

    
      - *(dict) --* 

        The model version.

        

      
        - **modelId** *(string) --* **[REQUIRED]** 

          The model ID.

          

        
        - **modelType** *(string) --* **[REQUIRED]** 

          The model type.

          

        
        - **modelVersionNumber** *(string) --* **[REQUIRED]** 

          The model version number.

          

        
        - **arn** *(string) --* 

          The model version ARN.

          

        
      
  
    :type ruleExecutionMode: string
    :param ruleExecutionMode: 

      The rule execution mode to add to the detector.

       

      If you specify ``FIRST_MATCHED`` , Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.

       

      If you specifiy ``ALL_MATCHED`` , Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.

       

      The default behavior is ``FIRST_MATCHED`` .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_detector_version_metadata(**kwargs)

    

    Updates the detector version's description. You can update the metadata for any detector version (``DRAFT, ACTIVE,`` or ``INACTIVE`` ). 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateDetectorVersionMetadata>`_    


    **Request Syntax** 
    ::

      response = client.update_detector_version_metadata(
          detectorId='string',
          detectorVersionId='string',
          description='string'
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID.

      

    
    :type detectorVersionId: string
    :param detectorVersionId: **[REQUIRED]** 

      The detector version ID. 

      

    
    :type description: string
    :param description: **[REQUIRED]** 

      The description.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_detector_version_status(**kwargs)

    

    Updates the detector version’s status. You can perform the following promotions or demotions using ``UpdateDetectorVersionStatus`` : ``DRAFT`` to ``ACTIVE`` , ``ACTIVE`` to ``INACTIVE`` , and ``INACTIVE`` to ``ACTIVE`` .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateDetectorVersionStatus>`_    


    **Request Syntax** 
    ::

      response = client.update_detector_version_status(
          detectorId='string',
          detectorVersionId='string',
          status='DRAFT'|'ACTIVE'|'INACTIVE'
      )
    :type detectorId: string
    :param detectorId: **[REQUIRED]** 

      The detector ID. 

      

    
    :type detectorVersionId: string
    :param detectorVersionId: **[REQUIRED]** 

      The detector version ID. 

      

    
    :type status: string
    :param status: **[REQUIRED]** 

      The new status.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_model(**kwargs)

    

    Updates a model. You can update the description attribute using this action.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateModel>`_    


    **Request Syntax** 
    ::

      response = client.update_model(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          description='string'
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID.

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type.

      

    
    :type description: string
    :param description: 

      The new model description.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_model_version(**kwargs)

    

    Updates a model version. Updating a model version retrains an existing model version using updated training data and produces a new minor version of the model. You can update the training data set location and data access role attributes using this action. This action creates and trains a new minor version of the model, for example version 1.01, 1.02, 1.03.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateModelVersion>`_    


    **Request Syntax** 
    ::

      response = client.update_model_version(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          majorVersionNumber='string',
          externalEventsDetail={
              'dataLocation': 'string',
              'dataAccessRoleArn': 'string'
          },
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID.

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type.

      

    
    :type majorVersionNumber: string
    :param majorVersionNumber: **[REQUIRED]** 

      The major version number.

      

    
    :type externalEventsDetail: dict
    :param externalEventsDetail: 

      The event details.

      

    
      - **dataLocation** *(string) --* **[REQUIRED]** 

        The Amazon S3 bucket location for the data.

        

      
      - **dataAccessRoleArn** *(string) --* **[REQUIRED]** 

        The ARN of the role that provides Amazon Fraud Detector access to the data location.

        

      
    
    :type tags: list
    :param tags: 

      A collection of key and value pairs.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'modelId': 'string',
            'modelType': 'ONLINE_FRAUD_INSIGHTS',
            'modelVersionNumber': 'string',
            'status': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **modelId** *(string) --* 

          The model ID.

          
        

        - **modelType** *(string) --* 

          The model type.

          
        

        - **modelVersionNumber** *(string) --* 

          The model version number of the model version updated.

          
        

        - **status** *(string) --* 

          The status of the updated model version.

          
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    

  .. py:method:: update_model_version_status(**kwargs)

    

    Updates the status of a model version.

     

    You can perform the following status updates:

     

     
    * Change the ``TRAINING_COMPLETE`` status to ``ACTIVE`` . 
     
    * Change ``ACTIVE`` to ``INACTIVE`` . 
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateModelVersionStatus>`_    


    **Request Syntax** 
    ::

      response = client.update_model_version_status(
          modelId='string',
          modelType='ONLINE_FRAUD_INSIGHTS',
          modelVersionNumber='string',
          status='ACTIVE'|'INACTIVE'|'TRAINING_CANCELLED'
      )
    :type modelId: string
    :param modelId: **[REQUIRED]** 

      The model ID of the model version to update.

      

    
    :type modelType: string
    :param modelType: **[REQUIRED]** 

      The model type.

      

    
    :type modelVersionNumber: string
    :param modelVersionNumber: **[REQUIRED]** 

      The model version number.

      

    
    :type status: string
    :param status: **[REQUIRED]** 

      The model version status.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_rule_metadata(**kwargs)

    

    Updates a rule's metadata. The description attribute can be updated.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateRuleMetadata>`_    


    **Request Syntax** 
    ::

      response = client.update_rule_metadata(
          rule={
              'detectorId': 'string',
              'ruleId': 'string',
              'ruleVersion': 'string'
          },
          description='string'
      )
    :type rule: dict
    :param rule: **[REQUIRED]** 

      The rule to update.

      

    
      - **detectorId** *(string) --* **[REQUIRED]** 

        The detector for which the rule is associated.

        

      
      - **ruleId** *(string) --* **[REQUIRED]** 

        The rule ID.

        

      
      - **ruleVersion** *(string) --* **[REQUIRED]** 

        The rule version.

        

      
    
    :type description: string
    :param description: **[REQUIRED]** 

      The rule description.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_rule_version(**kwargs)

    

    Updates a rule version resulting in a new rule version. Updates a rule version resulting in a new rule version (version 1, 2, 3 ...). 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateRuleVersion>`_    


    **Request Syntax** 
    ::

      response = client.update_rule_version(
          rule={
              'detectorId': 'string',
              'ruleId': 'string',
              'ruleVersion': 'string'
          },
          description='string',
          expression='string',
          language='DETECTORPL',
          outcomes=[
              'string',
          ],
          tags=[
              {
                  'key': 'string',
                  'value': 'string'
              },
          ]
      )
    :type rule: dict
    :param rule: **[REQUIRED]** 

      The rule to update.

      

    
      - **detectorId** *(string) --* **[REQUIRED]** 

        The detector for which the rule is associated.

        

      
      - **ruleId** *(string) --* **[REQUIRED]** 

        The rule ID.

        

      
      - **ruleVersion** *(string) --* **[REQUIRED]** 

        The rule version.

        

      
    
    :type description: string
    :param description: 

      The description.

      

    
    :type expression: string
    :param expression: **[REQUIRED]** 

      The rule expression.

      

    
    :type language: string
    :param language: **[REQUIRED]** 

      The language.

      

    
    :type outcomes: list
    :param outcomes: **[REQUIRED]** 

      The outcomes.

      

    
      - *(string) --* 

      
  
    :type tags: list
    :param tags: 

      The tags to assign to the rule version.

      

    
      - *(dict) --* 

        A key and value pair. 

        

      
        - **key** *(string) --* **[REQUIRED]** 

          A tag key.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          A value assigned to a tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'rule': {
                'detectorId': 'string',
                'ruleId': 'string',
                'ruleVersion': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **rule** *(dict) --* 

          The new rule version that was created.

          
          

          - **detectorId** *(string) --* 

            The detector for which the rule is associated.

            
          

          - **ruleId** *(string) --* 

            The rule ID.

            
          

          - **ruleVersion** *(string) --* 

            The rule version.

            
      
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

  .. py:method:: update_variable(**kwargs)

    

    Updates a variable.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/frauddetector-2019-11-15/UpdateVariable>`_    


    **Request Syntax** 
    ::

      response = client.update_variable(
          name='string',
          defaultValue='string',
          description='string',
          variableType='string'
      )
    :type name: string
    :param name: **[REQUIRED]** 

      The name of the variable.

      

    
    :type defaultValue: string
    :param defaultValue: 

      The new default value of the variable.

      

    
    :type description: string
    :param description: 

      The new description.

      

    
    :type variableType: string
    :param variableType: 

      The variable type. For more information see `Variable types <https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types>`__ .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`FraudDetector.Client.exceptions.ValidationException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`FraudDetector.Client.exceptions.InternalServerException`

    
    *     :py:class:`FraudDetector.Client.exceptions.ThrottlingException`

    
    *     :py:class:`FraudDetector.Client.exceptions.AccessDeniedException`

    

==========
Paginators
==========


The available paginators are:
