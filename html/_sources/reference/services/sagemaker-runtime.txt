

****************
SageMakerRuntime
****************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: SageMakerRuntime.Client

  A low-level client representing Amazon SageMaker Runtime
  

  The Amazon SageMaker runtime API. 

  ::

    
    import boto3
    
    client = boto3.client('sagemaker-runtime')

  
  These are the available methods:
  
  *   :py:meth:`~SageMakerRuntime.Client.can_paginate`

  
  *   :py:meth:`~SageMakerRuntime.Client.generate_presigned_url`

  
  *   :py:meth:`~SageMakerRuntime.Client.get_paginator`

  
  *   :py:meth:`~SageMakerRuntime.Client.get_waiter`

  
  *   :py:meth:`~SageMakerRuntime.Client.invoke_endpoint`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: invoke_endpoint(**kwargs)

    

    After you deploy a model into production using Amazon SageMaker hosting services, your client applications use this API to get inferences from the model hosted at the specified endpoint. 

     

    For an overview of Amazon SageMaker, see `How It Works <https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html>`__ . 

     

    Amazon SageMaker strips all POST headers except those supported by the API. Amazon SageMaker might add additional headers. You should not rely on the behavior of headers outside those enumerated in the request syntax. 

     

    Calls to ``InvokeEndpoint`` are authenticated by using AWS Signature Version 4. For information, see `Authenticating Requests (AWS Signature Version 4) <https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html>`__ in the *Amazon S3 API Reference* .

     

    A customer's model containers must respond to requests within 60 seconds. The model itself can have a maximum processing time of 60 seconds before responding to invocations. If your model is going to take 50-60 seconds of processing time, the SDK socket timeout should be set to be 70 seconds.

     

    .. note::

       

      Endpoints are scoped to an individual account, and are not public. The URL does not contain the account ID, but Amazon SageMaker determines the account ID from the authentication token that is supplied by the caller.

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/runtime.sagemaker-2017-05-13/InvokeEndpoint>`_    


    **Request Syntax** 
    ::

      response = client.invoke_endpoint(
          EndpointName='string',
          Body=b'bytes'|file,
          ContentType='string',
          Accept='string',
          CustomAttributes='string',
          TargetModel='string',
          TargetVariant='string',
          TargetContainerHostname='string',
          InferenceId='string'
      )
    :type EndpointName: string
    :param EndpointName: **[REQUIRED]** 

      The name of the endpoint that you specified when you created the endpoint using the `CreateEndpoint <https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html>`__ API. 

      

    
    :type Body: bytes or seekable file-like object
    :param Body: **[REQUIRED]** 

      Provides input data, in the format specified in the ``ContentType`` request header. Amazon SageMaker passes all of the data in the body to the model. 

       

      For information about the format of the request body, see `Common Data Formats-Inference <https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html>`__ .

      

    
    :type ContentType: string
    :param ContentType: 

      The MIME type of the input data in the request body.

      

    
    :type Accept: string
    :param Accept: 

      The desired MIME type of the inference in the response.

      

    
    :type CustomAttributes: string
    :param CustomAttributes: 

      Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in `Section 3.3.6. Field Value Components <https://tools.ietf.org/html/rfc7230#section-3.2.6>`__ of the Hypertext Transfer Protocol (HTTP/1.1). 

       

      The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with ``Trace ID:`` in your post-processing function.

       

      This feature is currently supported in the AWS SDKs but not in the Amazon SageMaker Python SDK.

      

    
    :type TargetModel: string
    :param TargetModel: 

      The model to request for inference when invoking a multi-model endpoint.

      

    
    :type TargetVariant: string
    :param TargetVariant: 

      Specify the production variant to send the inference request to when invoking an endpoint that is running two or more variants. Note that this parameter overrides the default behavior for the endpoint, which is to distribute the invocation traffic based on the variant weights.

       

      For information about how to use variant targeting to perform a/b testing, see `Test models in production <https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html>`__  

      

    
    :type TargetContainerHostname: string
    :param TargetContainerHostname: 

      If the endpoint hosts multiple containers and is configured to use direct invocation, this parameter specifies the host name of the container to invoke.

      

    
    :type InferenceId: string
    :param InferenceId: 

      If you provide a value, it is added to the captured data when you enable data capture on the endpoint. For information about data capture, see `Capture Data <https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html>`__ .

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Body': StreamingBody(),
            'ContentType': 'string',
            'InvokedProductionVariant': 'string',
            'CustomAttributes': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Body** (:class:`.StreamingBody`) -- 

          Includes the inference provided by the model.

           

          For information about the format of the response body, see `Common Data Formats-Inference <https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html>`__ .

          
        

        - **ContentType** *(string) --* 

          The MIME type of the inference returned in the response body.

          
        

        - **InvokedProductionVariant** *(string) --* 

          Identifies the production variant that was invoked.

          
        

        - **CustomAttributes** *(string) --* 

          Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the ``CustomAttributes`` header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in `Section 3.3.6. Field Value Components <https://tools.ietf.org/html/rfc7230#section-3.2.6>`__ of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back. 

           

          The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with ``Trace ID:`` in your post-processing function.

           

          This feature is currently supported in the AWS SDKs but not in the Amazon SageMaker Python SDK.

          
    
    **Exceptions** 
    
    *     :py:class:`SageMakerRuntime.Client.exceptions.InternalFailure`

    
    *     :py:class:`SageMakerRuntime.Client.exceptions.ServiceUnavailable`

    
    *     :py:class:`SageMakerRuntime.Client.exceptions.ValidationError`

    
    *     :py:class:`SageMakerRuntime.Client.exceptions.ModelError`

    

==========
Paginators
==========


The available paginators are:
