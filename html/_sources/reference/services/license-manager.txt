

**************
LicenseManager
**************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: LicenseManager.Client

  A low-level client representing AWS License Manager
   

  AWS License Manager makes it easier to manage licenses from software vendors across multiple AWS accounts and on-premises servers.

  ::

    
    import boto3
    
    client = boto3.client('license-manager')

  
  These are the available methods:
  
  *   :py:meth:`~LicenseManager.Client.accept_grant`

  
  *   :py:meth:`~LicenseManager.Client.can_paginate`

  
  *   :py:meth:`~LicenseManager.Client.check_in_license`

  
  *   :py:meth:`~LicenseManager.Client.checkout_borrow_license`

  
  *   :py:meth:`~LicenseManager.Client.checkout_license`

  
  *   :py:meth:`~LicenseManager.Client.create_grant`

  
  *   :py:meth:`~LicenseManager.Client.create_grant_version`

  
  *   :py:meth:`~LicenseManager.Client.create_license`

  
  *   :py:meth:`~LicenseManager.Client.create_license_configuration`

  
  *   :py:meth:`~LicenseManager.Client.create_license_manager_report_generator`

  
  *   :py:meth:`~LicenseManager.Client.create_license_version`

  
  *   :py:meth:`~LicenseManager.Client.create_token`

  
  *   :py:meth:`~LicenseManager.Client.delete_grant`

  
  *   :py:meth:`~LicenseManager.Client.delete_license`

  
  *   :py:meth:`~LicenseManager.Client.delete_license_configuration`

  
  *   :py:meth:`~LicenseManager.Client.delete_license_manager_report_generator`

  
  *   :py:meth:`~LicenseManager.Client.delete_token`

  
  *   :py:meth:`~LicenseManager.Client.extend_license_consumption`

  
  *   :py:meth:`~LicenseManager.Client.generate_presigned_url`

  
  *   :py:meth:`~LicenseManager.Client.get_access_token`

  
  *   :py:meth:`~LicenseManager.Client.get_grant`

  
  *   :py:meth:`~LicenseManager.Client.get_license`

  
  *   :py:meth:`~LicenseManager.Client.get_license_configuration`

  
  *   :py:meth:`~LicenseManager.Client.get_license_manager_report_generator`

  
  *   :py:meth:`~LicenseManager.Client.get_license_usage`

  
  *   :py:meth:`~LicenseManager.Client.get_paginator`

  
  *   :py:meth:`~LicenseManager.Client.get_service_settings`

  
  *   :py:meth:`~LicenseManager.Client.get_waiter`

  
  *   :py:meth:`~LicenseManager.Client.list_associations_for_license_configuration`

  
  *   :py:meth:`~LicenseManager.Client.list_distributed_grants`

  
  *   :py:meth:`~LicenseManager.Client.list_failures_for_license_configuration_operations`

  
  *   :py:meth:`~LicenseManager.Client.list_license_configurations`

  
  *   :py:meth:`~LicenseManager.Client.list_license_manager_report_generators`

  
  *   :py:meth:`~LicenseManager.Client.list_license_specifications_for_resource`

  
  *   :py:meth:`~LicenseManager.Client.list_license_versions`

  
  *   :py:meth:`~LicenseManager.Client.list_licenses`

  
  *   :py:meth:`~LicenseManager.Client.list_received_grants`

  
  *   :py:meth:`~LicenseManager.Client.list_received_licenses`

  
  *   :py:meth:`~LicenseManager.Client.list_resource_inventory`

  
  *   :py:meth:`~LicenseManager.Client.list_tags_for_resource`

  
  *   :py:meth:`~LicenseManager.Client.list_tokens`

  
  *   :py:meth:`~LicenseManager.Client.list_usage_for_license_configuration`

  
  *   :py:meth:`~LicenseManager.Client.reject_grant`

  
  *   :py:meth:`~LicenseManager.Client.tag_resource`

  
  *   :py:meth:`~LicenseManager.Client.untag_resource`

  
  *   :py:meth:`~LicenseManager.Client.update_license_configuration`

  
  *   :py:meth:`~LicenseManager.Client.update_license_manager_report_generator`

  
  *   :py:meth:`~LicenseManager.Client.update_license_specifications_for_resource`

  
  *   :py:meth:`~LicenseManager.Client.update_service_settings`

  

  .. py:method:: accept_grant(**kwargs)

    

    Accepts the specified grant.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/AcceptGrant>`_    


    **Request Syntax** 
    ::

      response = client.accept_grant(
          GrantArn='string'
      )
    :type GrantArn: string
    :param GrantArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the grant.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'GrantArn': 'string',
            'Status': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
            'Version': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **GrantArn** *(string) --* 

          Grant ARN.

          
        

        - **Status** *(string) --* 

          Grant status.

          
        

        - **Version** *(string) --* 

          Grant version.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: check_in_license(**kwargs)

    

    Checks in the specified license. Check in a license when it is no longer in use.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CheckInLicense>`_    


    **Request Syntax** 
    ::

      response = client.check_in_license(
          LicenseConsumptionToken='string',
          Beneficiary='string'
      )
    :type LicenseConsumptionToken: string
    :param LicenseConsumptionToken: **[REQUIRED]** 

      License consumption token.

      

    
    :type Beneficiary: string
    :param Beneficiary: 

      License beneficiary.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ConflictException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: checkout_borrow_license(**kwargs)

    

    Checks out the specified license for offline use.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CheckoutBorrowLicense>`_    


    **Request Syntax** 
    ::

      response = client.checkout_borrow_license(
          LicenseArn='string',
          Entitlements=[
              {
                  'Name': 'string',
                  'Value': 'string',
                  'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second'
              },
          ],
          DigitalSignatureMethod='JWT_PS384',
          NodeId='string',
          CheckoutMetadata=[
              {
                  'Name': 'string',
                  'Value': 'string'
              },
          ],
          ClientToken='string'
      )
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license. The license must use the borrow consumption configuration.

      

    
    :type Entitlements: list
    :param Entitlements: **[REQUIRED]** 

      License entitlements. Partial checkouts are not supported.

      

    
      - *(dict) --* 

        Data associated with an entitlement resource.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Entitlement data name.

          

        
        - **Value** *(string) --* 

          Entitlement data value.

          

        
        - **Unit** *(string) --* **[REQUIRED]** 

          Entitlement data unit.

          

        
      
  
    :type DigitalSignatureMethod: string
    :param DigitalSignatureMethod: **[REQUIRED]** 

      Digital signature method. The possible value is JSON Web Signature (JWS) algorithm PS384. For more information, see `RFC 7518 Digital Signature with RSASSA-PSS <https://tools.ietf.org/html/rfc7518#section-3.5>`__ .

      

    
    :type NodeId: string
    :param NodeId: 

      Node ID.

      

    
    :type CheckoutMetadata: list
    :param CheckoutMetadata: 

      Information about constraints.

      

    
      - *(dict) --* 

        Describes key/value pairs.

        

      
        - **Name** *(string) --* 

          The key name.

          

        
        - **Value** *(string) --* 

          The value.

          

        
      
  
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseArn': 'string',
            'LicenseConsumptionToken': 'string',
            'EntitlementsAllowed': [
                {
                    'Name': 'string',
                    'Value': 'string',
                    'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second'
                },
            ],
            'NodeId': 'string',
            'SignedToken': 'string',
            'IssuedAt': 'string',
            'Expiration': 'string',
            'CheckoutMetadata': [
                {
                    'Name': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseArn** *(string) --* 

          Amazon Resource Name (ARN) of the license.

          
        

        - **LicenseConsumptionToken** *(string) --* 

          License consumption token.

          
        

        - **EntitlementsAllowed** *(list) --* 

          Allowed license entitlements.

          
          

          - *(dict) --* 

            Data associated with an entitlement resource.

            
            

            - **Name** *(string) --* 

              Entitlement data name.

              
            

            - **Value** *(string) --* 

              Entitlement data value.

              
            

            - **Unit** *(string) --* 

              Entitlement data unit.

              
        
      
        

        - **NodeId** *(string) --* 

          Node ID.

          
        

        - **SignedToken** *(string) --* 

          Signed token.

          
        

        - **IssuedAt** *(string) --* 

          Date and time at which the license checkout is issued.

          
        

        - **Expiration** *(string) --* 

          Date and time at which the license checkout expires.

          
        

        - **CheckoutMetadata** *(list) --* 

          Information about constraints.

          
          

          - *(dict) --* 

            Describes key/value pairs.

            
            

            - **Name** *(string) --* 

              The key name.

              
            

            - **Value** *(string) --* 

              The value.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LicenseManager.Client.exceptions.NoEntitlementsAllowedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.EntitlementNotAllowedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.UnsupportedDigitalSignatureMethodException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RedirectException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: checkout_license(**kwargs)

    

    Checks out the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CheckoutLicense>`_    


    **Request Syntax** 
    ::

      response = client.checkout_license(
          ProductSKU='string',
          CheckoutType='PROVISIONAL',
          KeyFingerprint='string',
          Entitlements=[
              {
                  'Name': 'string',
                  'Value': 'string',
                  'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second'
              },
          ],
          ClientToken='string',
          Beneficiary='string',
          NodeId='string'
      )
    :type ProductSKU: string
    :param ProductSKU: **[REQUIRED]** 

      Product SKU.

      

    
    :type CheckoutType: string
    :param CheckoutType: **[REQUIRED]** 

      Checkout type.

      

    
    :type KeyFingerprint: string
    :param KeyFingerprint: **[REQUIRED]** 

      Key fingerprint identifying the license.

      

    
    :type Entitlements: list
    :param Entitlements: **[REQUIRED]** 

      License entitlements.

      

    
      - *(dict) --* 

        Data associated with an entitlement resource.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Entitlement data name.

          

        
        - **Value** *(string) --* 

          Entitlement data value.

          

        
        - **Unit** *(string) --* **[REQUIRED]** 

          Entitlement data unit.

          

        
      
  
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    :type Beneficiary: string
    :param Beneficiary: 

      License beneficiary.

      

    
    :type NodeId: string
    :param NodeId: 

      Node ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'CheckoutType': 'PROVISIONAL',
            'LicenseConsumptionToken': 'string',
            'EntitlementsAllowed': [
                {
                    'Name': 'string',
                    'Value': 'string',
                    'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second'
                },
            ],
            'SignedToken': 'string',
            'NodeId': 'string',
            'IssuedAt': 'string',
            'Expiration': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **CheckoutType** *(string) --* 

          Checkout type.

          
        

        - **LicenseConsumptionToken** *(string) --* 

          License consumption token.

          
        

        - **EntitlementsAllowed** *(list) --* 

          Allowed license entitlements.

          
          

          - *(dict) --* 

            Data associated with an entitlement resource.

            
            

            - **Name** *(string) --* 

              Entitlement data name.

              
            

            - **Value** *(string) --* 

              Entitlement data value.

              
            

            - **Unit** *(string) --* 

              Entitlement data unit.

              
        
      
        

        - **SignedToken** *(string) --* 

          Signed token.

          
        

        - **NodeId** *(string) --* 

          Node ID.

          
        

        - **IssuedAt** *(string) --* 

          Date and time at which the license checkout is issued.

          
        

        - **Expiration** *(string) --* 

          Date and time at which the license checkout expires.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LicenseManager.Client.exceptions.NoEntitlementsAllowedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.UnsupportedDigitalSignatureMethodException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RedirectException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: create_grant(**kwargs)

    

    Creates a grant for the specified license. A grant shares the use of license entitlements with specific AWS accounts.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateGrant>`_    


    **Request Syntax** 
    ::

      response = client.create_grant(
          ClientToken='string',
          GrantName='string',
          LicenseArn='string',
          Principals=[
              'string',
          ],
          HomeRegion='string',
          AllowedOperations=[
              'CreateGrant'|'CheckoutLicense'|'CheckoutBorrowLicense'|'CheckInLicense'|'ExtendConsumptionLicense'|'ListPurchasedLicenses'|'CreateToken',
          ]
      )
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    :type GrantName: string
    :param GrantName: **[REQUIRED]** 

      Grant name.

      

    
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license.

      

    
    :type Principals: list
    :param Principals: **[REQUIRED]** 

      The grant principals.

      

    
      - *(string) --* 

      
  
    :type HomeRegion: string
    :param HomeRegion: **[REQUIRED]** 

      Home Region of the grant.

      

    
    :type AllowedOperations: list
    :param AllowedOperations: **[REQUIRED]** 

      Allowed operations for the grant.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'GrantArn': 'string',
            'Status': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
            'Version': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **GrantArn** *(string) --* 

          Grant ARN.

          
        

        - **Status** *(string) --* 

          Grant status.

          
        

        - **Version** *(string) --* 

          Grant version.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    

  .. py:method:: create_grant_version(**kwargs)

    

    Creates a new version of the specified grant.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateGrantVersion>`_    


    **Request Syntax** 
    ::

      response = client.create_grant_version(
          ClientToken='string',
          GrantArn='string',
          GrantName='string',
          AllowedOperations=[
              'CreateGrant'|'CheckoutLicense'|'CheckoutBorrowLicense'|'CheckInLicense'|'ExtendConsumptionLicense'|'ListPurchasedLicenses'|'CreateToken',
          ],
          Status='PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
          StatusReason='string',
          SourceVersion='string'
      )
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    :type GrantArn: string
    :param GrantArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the grant.

      

    
    :type GrantName: string
    :param GrantName: 

      Grant name.

      

    
    :type AllowedOperations: list
    :param AllowedOperations: 

      Allowed operations for the grant.

      

    
      - *(string) --* 

      
  
    :type Status: string
    :param Status: 

      Grant status.

      

    
    :type StatusReason: string
    :param StatusReason: 

    
    :type SourceVersion: string
    :param SourceVersion: 

      Current version of the grant.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'GrantArn': 'string',
            'Status': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
            'Version': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **GrantArn** *(string) --* 

          Grant ARN.

          
        

        - **Status** *(string) --* 

          Grant status.

          
        

        - **Version** *(string) --* 

          New version of the grant.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: create_license(**kwargs)

    

    Creates a license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicense>`_    


    **Request Syntax** 
    ::

      response = client.create_license(
          LicenseName='string',
          ProductName='string',
          ProductSKU='string',
          Issuer={
              'Name': 'string',
              'SignKey': 'string'
          },
          HomeRegion='string',
          Validity={
              'Begin': 'string',
              'End': 'string'
          },
          Entitlements=[
              {
                  'Name': 'string',
                  'Value': 'string',
                  'MaxCount': 123,
                  'Overage': True|False,
                  'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second',
                  'AllowCheckIn': True|False
              },
          ],
          Beneficiary='string',
          ConsumptionConfiguration={
              'RenewType': 'None'|'Weekly'|'Monthly',
              'ProvisionalConfiguration': {
                  'MaxTimeToLiveInMinutes': 123
              },
              'BorrowConfiguration': {
                  'AllowEarlyCheckIn': True|False,
                  'MaxTimeToLiveInMinutes': 123
              }
          },
          LicenseMetadata=[
              {
                  'Name': 'string',
                  'Value': 'string'
              },
          ],
          ClientToken='string'
      )
    :type LicenseName: string
    :param LicenseName: **[REQUIRED]** 

      License name.

      

    
    :type ProductName: string
    :param ProductName: **[REQUIRED]** 

      Product name.

      

    
    :type ProductSKU: string
    :param ProductSKU: **[REQUIRED]** 

      Product SKU.

      

    
    :type Issuer: dict
    :param Issuer: **[REQUIRED]** 

      License issuer.

      

    
      - **Name** *(string) --* **[REQUIRED]** 

        Issuer name.

        

      
      - **SignKey** *(string) --* 

        Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.

        

      
    
    :type HomeRegion: string
    :param HomeRegion: **[REQUIRED]** 

      Home Region for the license.

      

    
    :type Validity: dict
    :param Validity: **[REQUIRED]** 

      Date and time range during which the license is valid, in ISO8601-UTC format.

      

    
      - **Begin** *(string) --* **[REQUIRED]** 

        Start of the time range.

        

      
      - **End** *(string) --* 

        End of the time range.

        

      
    
    :type Entitlements: list
    :param Entitlements: **[REQUIRED]** 

      License entitlements.

      

    
      - *(dict) --* 

        Describes a resource entitled for use with a license.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Entitlement name.

          

        
        - **Value** *(string) --* 

          Entitlement resource. Use only if the unit is None.

          

        
        - **MaxCount** *(integer) --* 

          Maximum entitlement count. Use if the unit is not None.

          

        
        - **Overage** *(boolean) --* 

          Indicates whether overages are allowed.

          

        
        - **Unit** *(string) --* **[REQUIRED]** 

          Entitlement unit.

          

        
        - **AllowCheckIn** *(boolean) --* 

          Indicates whether check-ins are allowed.

          

        
      
  
    :type Beneficiary: string
    :param Beneficiary: **[REQUIRED]** 

      License beneficiary.

      

    
    :type ConsumptionConfiguration: dict
    :param ConsumptionConfiguration: **[REQUIRED]** 

      Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.

      

    
      - **RenewType** *(string) --* 

        Renewal frequency.

        

      
      - **ProvisionalConfiguration** *(dict) --* 

        Details about a provisional configuration.

        

      
        - **MaxTimeToLiveInMinutes** *(integer) --* **[REQUIRED]** 

          Maximum time for the provisional configuration, in minutes.

          

        
      
      - **BorrowConfiguration** *(dict) --* 

        Details about a borrow configuration.

        

      
        - **AllowEarlyCheckIn** *(boolean) --* **[REQUIRED]** 

          Indicates whether early check-ins are allowed.

          

        
        - **MaxTimeToLiveInMinutes** *(integer) --* **[REQUIRED]** 

          Maximum time for the borrow configuration, in minutes.

          

        
      
    
    :type LicenseMetadata: list
    :param LicenseMetadata: 

      Information about the license.

      

    
      - *(dict) --* 

        Describes key/value pairs.

        

      
        - **Name** *(string) --* 

          The key name.

          

        
        - **Value** *(string) --* 

          The value.

          

        
      
  
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseArn': 'string',
            'Status': 'AVAILABLE'|'PENDING_AVAILABLE'|'DEACTIVATED'|'SUSPENDED'|'EXPIRED'|'PENDING_DELETE'|'DELETED',
            'Version': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseArn** *(string) --* 

          Amazon Resource Name (ARN) of the license.

          
        

        - **Status** *(string) --* 

          License status.

          
        

        - **Version** *(string) --* 

          License version.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RedirectException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: create_license_configuration(**kwargs)

    

    Creates a license configuration.

     

    A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), license affinity to host (how long a license must be associated with a host), and the number of licenses purchased and used.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.create_license_configuration(
          Name='string',
          Description='string',
          LicenseCountingType='vCPU'|'Instance'|'Core'|'Socket',
          LicenseCount=123,
          LicenseCountHardLimit=True|False,
          LicenseRules=[
              'string',
          ],
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          DisassociateWhenNotFound=True|False,
          ProductInformationList=[
              {
                  'ResourceType': 'string',
                  'ProductInformationFilterList': [
                      {
                          'ProductInformationFilterName': 'string',
                          'ProductInformationFilterValue': [
                              'string',
                          ],
                          'ProductInformationFilterComparator': 'string'
                      },
                  ]
              },
          ]
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      Name of the license configuration.

      

    
    :type Description: string
    :param Description: 

      Description of the license configuration.

      

    
    :type LicenseCountingType: string
    :param LicenseCountingType: **[REQUIRED]** 

      Dimension used to track the license inventory.

      

    
    :type LicenseCount: integer
    :param LicenseCount: 

      Number of licenses managed by the license configuration.

      

    
    :type LicenseCountHardLimit: boolean
    :param LicenseCountHardLimit: 

      Indicates whether hard or soft license enforcement is used. Exceeding a hard limit blocks the launch of new instances.

      

    
    :type LicenseRules: list
    :param LicenseRules: 

      License rules. The syntax is #name=value (for example, #allowedTenancy=EC2-DedicatedHost). The available rules vary by dimension, as follows.

       

       
      * ``Cores`` dimension: ``allowedTenancy`` | ``licenseAffinityToHost`` | ``maximumCores`` | ``minimumCores``   
       
      * ``Instances`` dimension: ``allowedTenancy`` | ``maximumCores`` | ``minimumCores`` | ``maximumSockets`` | ``minimumSockets`` | ``maximumVcpus`` | ``minimumVcpus``   
       
      * ``Sockets`` dimension: ``allowedTenancy`` | ``licenseAffinityToHost`` | ``maximumSockets`` | ``minimumSockets``   
       
      * ``vCPUs`` dimension: ``allowedTenancy`` | ``honorVcpuOptimization`` | ``maximumVcpus`` | ``minimumVcpus``   
       

       

      The unit for ``licenseAffinityToHost`` is days and the range is 1 to 180. The possible values for ``allowedTenancy`` are ``EC2-Default`` , ``EC2-DedicatedHost`` , and ``EC2-DedicatedInstance`` . The possible values for ``honorVcpuOptimization`` are ``True`` and ``False`` .

      

    
      - *(string) --* 

      
  
    :type Tags: list
    :param Tags: 

      Tags to add to the license configuration.

      

    
      - *(dict) --* 

        Details about a tag for a license configuration.

        

      
        - **Key** *(string) --* 

          Tag key.

          

        
        - **Value** *(string) --* 

          Tag value.

          

        
      
  
    :type DisassociateWhenNotFound: boolean
    :param DisassociateWhenNotFound: 

      When true, disassociates a resource when software is uninstalled.

      

    
    :type ProductInformationList: list
    :param ProductInformationList: 

      Product information.

      

    
      - *(dict) --* 

        Describes product information for a license configuration.

        

      
        - **ResourceType** *(string) --* **[REQUIRED]** 

          Resource type. The possible values are ``SSM_MANAGED`` | ``RDS`` .

          

        
        - **ProductInformationFilterList** *(list) --* **[REQUIRED]** 

          A Product information filter consists of a ``ProductInformationFilterComparator`` which is a logical operator, a ``ProductInformationFilterName`` which specifies the type of filter being declared, and a ``ProductInformationFilterValue`` that specifies the value to filter on. 

           

          Accepted values for ``ProductInformationFilterName`` are listed here along with descriptions and valid options for ``ProductInformationFilterComparator`` . 

           

          The following filters and are supported when the resource type is ``SSM_MANAGED`` :

           

           
          * ``Application Name`` - The name of the application. Logical operator is ``EQUALS`` . 
           
          * ``Application Publisher`` - The publisher of the application. Logical operator is ``EQUALS`` . 
           
          * ``Application Version`` - The version of the application. Logical operator is ``EQUALS`` . 
           
          * ``Platform Name`` - The name of the platform. Logical operator is ``EQUALS`` . 
           
          * ``Platform Type`` - The platform type. Logical operator is ``EQUALS`` . 
           
          * ``Tag:key`` - The key of a tag attached to an AWS resource you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . The key for your tag must be appended to ``Tag:`` following the example: ``Tag:name-of-your-key`` . ``ProductInformationFilterValue`` is optional if you are not using values for the key.  
           
          * ``AccountId`` - The 12-digit ID of an AWS account you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . 
           
          * ``License Included`` - The type of license included. Logical operators are ``EQUALS`` and ``NOT_EQUALS`` . Possible values are: ``sql-server-enterprise`` | ``sql-server-standard`` | ``sql-server-web`` | ``windows-server-datacenter`` . 
           

           

          The following filters and logical operators are supported when the resource type is ``RDS`` :

           

           
          * ``Engine Edition`` - The edition of the database engine. Logical operator is ``EQUALS`` . Possible values are: ``oracle-ee`` | ``oracle-se`` | ``oracle-se1`` | ``oracle-se2`` . 
           
          * ``License Pack`` - The license pack. Logical operator is ``EQUALS`` . Possible values are: ``data guard`` | ``diagnostic pack sqlt`` | ``tuning pack sqlt`` | ``ols`` | ``olap`` . 
           

          

        
          - *(dict) --* 

            Describes product information filters.

            

          
            - **ProductInformationFilterName** *(string) --* **[REQUIRED]** 

              Filter name.

              

            
            - **ProductInformationFilterValue** *(list) --* 

              Filter value.

              

            
              - *(string) --* 

              
          
            - **ProductInformationFilterComparator** *(string) --* **[REQUIRED]** 

              Logical operator.

              

            
          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurationArn** *(string) --* 

          Amazon Resource Name (ARN) of the license configuration.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: create_license_manager_report_generator(**kwargs)

    

    Creates a new report generator.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicenseManagerReportGenerator>`_    


    **Request Syntax** 
    ::

      response = client.create_license_manager_report_generator(
          ReportGeneratorName='string',
          Type=[
              'LicenseConfigurationSummaryReport'|'LicenseConfigurationUsageReport',
          ],
          ReportContext={
              'licenseConfigurationArns': [
                  'string',
              ]
          },
          ReportFrequency={
              'value': 123,
              'period': 'DAY'|'WEEK'|'MONTH'
          },
          ClientToken='string',
          Description='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ReportGeneratorName: string
    :param ReportGeneratorName: **[REQUIRED]** 

      Name of the report generator.

      

    
    :type Type: list
    :param Type: **[REQUIRED]** 

      Type of reports to generate. The following report types an be generated:

       

       
      * License configuration report - Reports on the number and details of consumed licenses for a license configuration. 
       
      * Resource report - Reports on the tracked licenses and resource consumption for a license configuration. 
       

      

    
      - *(string) --* 

      
  
    :type ReportContext: dict
    :param ReportContext: **[REQUIRED]** 

      Defines the type of license configuration the report generator tracks.

      

    
      - **licenseConfigurationArns** *(list) --* **[REQUIRED]** 

        Amazon Resource Number (ARN) of the license configuration that this generator reports on.

        

      
        - *(string) --* 

        
    
    
    :type ReportFrequency: dict
    :param ReportFrequency: **[REQUIRED]** 

      Frequency by which reports are generated. Reports can be generated daily, monthly, or weekly.

      

    
      - **value** *(integer) --* 

        Number of times within the frequency period that a report will be generated. Currently only ``1`` is supported.

        

      
      - **period** *(string) --* 

        Time period between each report. The period can be daily, weekly, or monthly.

        

      
    
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    :type Description: string
    :param Description: 

      Description of the report generator.

      

    
    :type Tags: list
    :param Tags: 

      Tags to add to the report generator.

      

    
      - *(dict) --* 

        Details about a tag for a license configuration.

        

      
        - **Key** *(string) --* 

          Tag key.

          

        
        - **Value** *(string) --* 

          Tag value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseManagerReportGeneratorArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseManagerReportGeneratorArn** *(string) --* 

          The Amazon Resource Number (ARN) of the new report generator.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: create_license_version(**kwargs)

    

    Creates a new version of the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateLicenseVersion>`_    


    **Request Syntax** 
    ::

      response = client.create_license_version(
          LicenseArn='string',
          LicenseName='string',
          ProductName='string',
          Issuer={
              'Name': 'string',
              'SignKey': 'string'
          },
          HomeRegion='string',
          Validity={
              'Begin': 'string',
              'End': 'string'
          },
          LicenseMetadata=[
              {
                  'Name': 'string',
                  'Value': 'string'
              },
          ],
          Entitlements=[
              {
                  'Name': 'string',
                  'Value': 'string',
                  'MaxCount': 123,
                  'Overage': True|False,
                  'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second',
                  'AllowCheckIn': True|False
              },
          ],
          ConsumptionConfiguration={
              'RenewType': 'None'|'Weekly'|'Monthly',
              'ProvisionalConfiguration': {
                  'MaxTimeToLiveInMinutes': 123
              },
              'BorrowConfiguration': {
                  'AllowEarlyCheckIn': True|False,
                  'MaxTimeToLiveInMinutes': 123
              }
          },
          Status='AVAILABLE'|'PENDING_AVAILABLE'|'DEACTIVATED'|'SUSPENDED'|'EXPIRED'|'PENDING_DELETE'|'DELETED',
          ClientToken='string',
          SourceVersion='string'
      )
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license.

      

    
    :type LicenseName: string
    :param LicenseName: **[REQUIRED]** 

      License name.

      

    
    :type ProductName: string
    :param ProductName: **[REQUIRED]** 

      Product name.

      

    
    :type Issuer: dict
    :param Issuer: **[REQUIRED]** 

      License issuer.

      

    
      - **Name** *(string) --* **[REQUIRED]** 

        Issuer name.

        

      
      - **SignKey** *(string) --* 

        Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.

        

      
    
    :type HomeRegion: string
    :param HomeRegion: **[REQUIRED]** 

      Home Region of the license.

      

    
    :type Validity: dict
    :param Validity: **[REQUIRED]** 

      Date and time range during which the license is valid, in ISO8601-UTC format.

      

    
      - **Begin** *(string) --* **[REQUIRED]** 

        Start of the time range.

        

      
      - **End** *(string) --* 

        End of the time range.

        

      
    
    :type LicenseMetadata: list
    :param LicenseMetadata: 

      Information about the license.

      

    
      - *(dict) --* 

        Describes key/value pairs.

        

      
        - **Name** *(string) --* 

          The key name.

          

        
        - **Value** *(string) --* 

          The value.

          

        
      
  
    :type Entitlements: list
    :param Entitlements: **[REQUIRED]** 

      License entitlements.

      

    
      - *(dict) --* 

        Describes a resource entitled for use with a license.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Entitlement name.

          

        
        - **Value** *(string) --* 

          Entitlement resource. Use only if the unit is None.

          

        
        - **MaxCount** *(integer) --* 

          Maximum entitlement count. Use if the unit is not None.

          

        
        - **Overage** *(boolean) --* 

          Indicates whether overages are allowed.

          

        
        - **Unit** *(string) --* **[REQUIRED]** 

          Entitlement unit.

          

        
        - **AllowCheckIn** *(boolean) --* 

          Indicates whether check-ins are allowed.

          

        
      
  
    :type ConsumptionConfiguration: dict
    :param ConsumptionConfiguration: **[REQUIRED]** 

      Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.

      

    
      - **RenewType** *(string) --* 

        Renewal frequency.

        

      
      - **ProvisionalConfiguration** *(dict) --* 

        Details about a provisional configuration.

        

      
        - **MaxTimeToLiveInMinutes** *(integer) --* **[REQUIRED]** 

          Maximum time for the provisional configuration, in minutes.

          

        
      
      - **BorrowConfiguration** *(dict) --* 

        Details about a borrow configuration.

        

      
        - **AllowEarlyCheckIn** *(boolean) --* **[REQUIRED]** 

          Indicates whether early check-ins are allowed.

          

        
        - **MaxTimeToLiveInMinutes** *(integer) --* **[REQUIRED]** 

          Maximum time for the borrow configuration, in minutes.

          

        
      
    
    :type Status: string
    :param Status: **[REQUIRED]** 

      License status.

      

    
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    :type SourceVersion: string
    :param SourceVersion: 

      Current version of the license.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseArn': 'string',
            'Version': 'string',
            'Status': 'AVAILABLE'|'PENDING_AVAILABLE'|'DEACTIVATED'|'SUSPENDED'|'EXPIRED'|'PENDING_DELETE'|'DELETED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseArn** *(string) --* 

          License ARN.

          
        

        - **Version** *(string) --* 

          New version of the license.

          
        

        - **Status** *(string) --* 

          License status.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RedirectException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ConflictException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: create_token(**kwargs)

    

    Creates a long-lived token.

     

    A refresh token is a JWT token used to get an access token. With an access token, you can call AssumeRoleWithWebIdentity to get role credentials that you can use to call License Manager to manage the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/CreateToken>`_    


    **Request Syntax** 
    ::

      response = client.create_token(
          LicenseArn='string',
          RoleArns=[
              'string',
          ],
          ExpirationInDays=123,
          TokenProperties=[
              'string',
          ],
          ClientToken='string'
      )
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license. The ARN is mapped to the aud claim of the JWT token.

      

    
    :type RoleArns: list
    :param RoleArns: 

      Amazon Resource Name (ARN) of the IAM roles to embed in the token. License Manager does not check whether the roles are in use.

      

    
      - *(string) --* 

      
  
    :type ExpirationInDays: integer
    :param ExpirationInDays: 

      Token expiration, in days, counted from token creation. The default is 365 days.

      

    
    :type TokenProperties: list
    :param TokenProperties: 

      Data specified by the caller to be included in the JWT token. The data is mapped to the amr claim of the JWT token.

      

    
      - *(string) --* 

      
  
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Idempotency token, valid for 10 minutes.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'TokenId': 'string',
            'TokenType': 'REFRESH_TOKEN',
            'Token': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **TokenId** *(string) --* 

          Token ID.

          
        

        - **TokenType** *(string) --* 

          Token type.

          
        

        - **Token** *(string) --* 

          Refresh token, encoded as a JWT token.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RedirectException`

    

  .. py:method:: delete_grant(**kwargs)

    

    Deletes the specified grant.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteGrant>`_    


    **Request Syntax** 
    ::

      response = client.delete_grant(
          GrantArn='string',
          StatusReason='string',
          Version='string'
      )
    :type GrantArn: string
    :param GrantArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the grant.

      

    
    :type StatusReason: string
    :param StatusReason: 

    
    :type Version: string
    :param Version: **[REQUIRED]** 

      Current version of the grant.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'GrantArn': 'string',
            'Status': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
            'Version': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **GrantArn** *(string) --* 

          Grant ARN.

          
        

        - **Status** *(string) --* 

          Grant status.

          
        

        - **Version** *(string) --* 

          Grant version.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: delete_license(**kwargs)

    

    Deletes the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteLicense>`_    


    **Request Syntax** 
    ::

      response = client.delete_license(
          LicenseArn='string',
          SourceVersion='string'
      )
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license.

      

    
    :type SourceVersion: string
    :param SourceVersion: **[REQUIRED]** 

      Current version of the license.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Status': 'PENDING_DELETE'|'DELETED',
            'DeletionDate': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Status** *(string) --* 

          License status.

          
        

        - **DeletionDate** *(string) --* 

          Date on which the license is deleted.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RedirectException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ConflictException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: delete_license_configuration(**kwargs)

    

    Deletes the specified license configuration.

     

    You cannot delete a license configuration that is in use.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.delete_license_configuration(
          LicenseConfigurationArn='string'
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      ID of the license configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: delete_license_manager_report_generator(**kwargs)

    

    Delete an existing report generator.

     

    This action deletes the report generator, which stops it from generating future reports and cannot be reversed. However, the previous reports from this generator will remain in your S3 bucket.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteLicenseManagerReportGenerator>`_    


    **Request Syntax** 
    ::

      response = client.delete_license_manager_report_generator(
          LicenseManagerReportGeneratorArn='string'
      )
    :type LicenseManagerReportGeneratorArn: string
    :param LicenseManagerReportGeneratorArn: **[REQUIRED]** 

      Amazon Resource Number (ARN) of the report generator that will be deleted.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: delete_token(**kwargs)

    

    Deletes the specified token. Must be called in the license home Region.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/DeleteToken>`_    


    **Request Syntax** 
    ::

      response = client.delete_token(
          TokenId='string'
      )
    :type TokenId: string
    :param TokenId: **[REQUIRED]** 

      Token ID.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RedirectException`

    

  .. py:method:: extend_license_consumption(**kwargs)

    

    Extends the expiration date for license consumption.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ExtendLicenseConsumption>`_    


    **Request Syntax** 
    ::

      response = client.extend_license_consumption(
          LicenseConsumptionToken='string',
          DryRun=True|False
      )
    :type LicenseConsumptionToken: string
    :param LicenseConsumptionToken: **[REQUIRED]** 

      License consumption token.

      

    
    :type DryRun: boolean
    :param DryRun: 

      Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConsumptionToken': 'string',
            'Expiration': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConsumptionToken** *(string) --* 

          License consumption token.

          
        

        - **Expiration** *(string) --* 

          Date and time at which the license consumption expires.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_access_token(**kwargs)

    

    Gets a temporary access token to use with AssumeRoleWithWebIdentity. Access tokens are valid for one hour.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetAccessToken>`_    


    **Request Syntax** 
    ::

      response = client.get_access_token(
          Token='string',
          TokenProperties=[
              'string',
          ]
      )
    :type Token: string
    :param Token: **[REQUIRED]** 

      Refresh token, encoded as a JWT token.

      

    
    :type TokenProperties: list
    :param TokenProperties: 

      Token properties to validate against those present in the JWT token.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AccessToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AccessToken** *(string) --* 

          Temporary access token.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: get_grant(**kwargs)

    

    Gets detailed information about the specified grant.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetGrant>`_    


    **Request Syntax** 
    ::

      response = client.get_grant(
          GrantArn='string',
          Version='string'
      )
    :type GrantArn: string
    :param GrantArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the grant.

      

    
    :type Version: string
    :param Version: 

      Grant version.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Grant': {
                'GrantArn': 'string',
                'GrantName': 'string',
                'ParentArn': 'string',
                'LicenseArn': 'string',
                'GranteePrincipalArn': 'string',
                'HomeRegion': 'string',
                'GrantStatus': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
                'StatusReason': 'string',
                'Version': 'string',
                'GrantedOperations': [
                    'CreateGrant'|'CheckoutLicense'|'CheckoutBorrowLicense'|'CheckInLicense'|'ExtendConsumptionLicense'|'ListPurchasedLicenses'|'CreateToken',
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Grant** *(dict) --* 

          Grant details.

          
          

          - **GrantArn** *(string) --* 

            Amazon Resource Name (ARN) of the grant.

            
          

          - **GrantName** *(string) --* 

            Grant name.

            
          

          - **ParentArn** *(string) --* 

            Parent ARN.

            
          

          - **LicenseArn** *(string) --* 

            License ARN.

            
          

          - **GranteePrincipalArn** *(string) --* 

            The grantee principal ARN.

            
          

          - **HomeRegion** *(string) --* 

            Home Region of the grant.

            
          

          - **GrantStatus** *(string) --* 

            Grant status.

            
          

          - **StatusReason** *(string) --* 

            Grant status reason.

            
          

          - **Version** *(string) --* 

            Grant version.

            
          

          - **GrantedOperations** *(list) --* 

            Granted operations.

            
            

            - *(string) --* 
        
      
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: get_license(**kwargs)

    

    Gets detailed information about the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetLicense>`_    


    **Request Syntax** 
    ::

      response = client.get_license(
          LicenseArn='string',
          Version='string'
      )
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license.

      

    
    :type Version: string
    :param Version: 

      License version.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'License': {
                'LicenseArn': 'string',
                'LicenseName': 'string',
                'ProductName': 'string',
                'ProductSKU': 'string',
                'Issuer': {
                    'Name': 'string',
                    'SignKey': 'string',
                    'KeyFingerprint': 'string'
                },
                'HomeRegion': 'string',
                'Status': 'AVAILABLE'|'PENDING_AVAILABLE'|'DEACTIVATED'|'SUSPENDED'|'EXPIRED'|'PENDING_DELETE'|'DELETED',
                'Validity': {
                    'Begin': 'string',
                    'End': 'string'
                },
                'Beneficiary': 'string',
                'Entitlements': [
                    {
                        'Name': 'string',
                        'Value': 'string',
                        'MaxCount': 123,
                        'Overage': True|False,
                        'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second',
                        'AllowCheckIn': True|False
                    },
                ],
                'ConsumptionConfiguration': {
                    'RenewType': 'None'|'Weekly'|'Monthly',
                    'ProvisionalConfiguration': {
                        'MaxTimeToLiveInMinutes': 123
                    },
                    'BorrowConfiguration': {
                        'AllowEarlyCheckIn': True|False,
                        'MaxTimeToLiveInMinutes': 123
                    }
                },
                'LicenseMetadata': [
                    {
                        'Name': 'string',
                        'Value': 'string'
                    },
                ],
                'CreateTime': 'string',
                'Version': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **License** *(dict) --* 

          License details.

          
          

          - **LicenseArn** *(string) --* 

            Amazon Resource Name (ARN) of the license.

            
          

          - **LicenseName** *(string) --* 

            License name.

            
          

          - **ProductName** *(string) --* 

            Product name.

            
          

          - **ProductSKU** *(string) --* 

            Product SKU.

            
          

          - **Issuer** *(dict) --* 

            License issuer.

            
            

            - **Name** *(string) --* 

              Issuer name.

              
            

            - **SignKey** *(string) --* 

              Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.

              
            

            - **KeyFingerprint** *(string) --* 

              Issuer key fingerprint.

              
        
          

          - **HomeRegion** *(string) --* 

            Home Region of the license.

            
          

          - **Status** *(string) --* 

            License status.

            
          

          - **Validity** *(dict) --* 

            Date and time range during which the license is valid, in ISO8601-UTC format.

            
            

            - **Begin** *(string) --* 

              Start of the time range.

              
            

            - **End** *(string) --* 

              End of the time range.

              
        
          

          - **Beneficiary** *(string) --* 

            License beneficiary.

            
          

          - **Entitlements** *(list) --* 

            License entitlements.

            
            

            - *(dict) --* 

              Describes a resource entitled for use with a license.

              
              

              - **Name** *(string) --* 

                Entitlement name.

                
              

              - **Value** *(string) --* 

                Entitlement resource. Use only if the unit is None.

                
              

              - **MaxCount** *(integer) --* 

                Maximum entitlement count. Use if the unit is not None.

                
              

              - **Overage** *(boolean) --* 

                Indicates whether overages are allowed.

                
              

              - **Unit** *(string) --* 

                Entitlement unit.

                
              

              - **AllowCheckIn** *(boolean) --* 

                Indicates whether check-ins are allowed.

                
          
        
          

          - **ConsumptionConfiguration** *(dict) --* 

            Configuration for consumption of the license.

            
            

            - **RenewType** *(string) --* 

              Renewal frequency.

              
            

            - **ProvisionalConfiguration** *(dict) --* 

              Details about a provisional configuration.

              
              

              - **MaxTimeToLiveInMinutes** *(integer) --* 

                Maximum time for the provisional configuration, in minutes.

                
          
            

            - **BorrowConfiguration** *(dict) --* 

              Details about a borrow configuration.

              
              

              - **AllowEarlyCheckIn** *(boolean) --* 

                Indicates whether early check-ins are allowed.

                
              

              - **MaxTimeToLiveInMinutes** *(integer) --* 

                Maximum time for the borrow configuration, in minutes.

                
          
        
          

          - **LicenseMetadata** *(list) --* 

            License metadata.

            
            

            - *(dict) --* 

              Describes key/value pairs.

              
              

              - **Name** *(string) --* 

                The key name.

                
              

              - **Value** *(string) --* 

                The value.

                
          
        
          

          - **CreateTime** *(string) --* 

            License creation time.

            
          

          - **Version** *(string) --* 

            License version.

            
      
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: get_license_configuration(**kwargs)

    

    Gets detailed information about the specified license configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.get_license_configuration(
          LicenseConfigurationArn='string'
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurationId': 'string',
            'LicenseConfigurationArn': 'string',
            'Name': 'string',
            'Description': 'string',
            'LicenseCountingType': 'vCPU'|'Instance'|'Core'|'Socket',
            'LicenseRules': [
                'string',
            ],
            'LicenseCount': 123,
            'LicenseCountHardLimit': True|False,
            'ConsumedLicenses': 123,
            'Status': 'string',
            'OwnerAccountId': 'string',
            'ConsumedLicenseSummaryList': [
                {
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ConsumedLicenses': 123
                },
            ],
            'ManagedResourceSummaryList': [
                {
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'AssociationCount': 123
                },
            ],
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ],
            'ProductInformationList': [
                {
                    'ResourceType': 'string',
                    'ProductInformationFilterList': [
                        {
                            'ProductInformationFilterName': 'string',
                            'ProductInformationFilterValue': [
                                'string',
                            ],
                            'ProductInformationFilterComparator': 'string'
                        },
                    ]
                },
            ],
            'AutomatedDiscoveryInformation': {
                'LastRunTime': datetime(2015, 1, 1)
            },
            'DisassociateWhenNotFound': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurationId** *(string) --* 

          Unique ID for the license configuration.

          
        

        - **LicenseConfigurationArn** *(string) --* 

          Amazon Resource Name (ARN) of the license configuration.

          
        

        - **Name** *(string) --* 

          Name of the license configuration.

          
        

        - **Description** *(string) --* 

          Description of the license configuration.

          
        

        - **LicenseCountingType** *(string) --* 

          Dimension on which the licenses are counted.

          
        

        - **LicenseRules** *(list) --* 

          License rules.

          
          

          - *(string) --* 
      
        

        - **LicenseCount** *(integer) --* 

          Number of available licenses.

          
        

        - **LicenseCountHardLimit** *(boolean) --* 

          Sets the number of available licenses as a hard limit.

          
        

        - **ConsumedLicenses** *(integer) --* 

          Number of licenses assigned to resources.

          
        

        - **Status** *(string) --* 

          License configuration status.

          
        

        - **OwnerAccountId** *(string) --* 

          Account ID of the owner of the license configuration.

          
        

        - **ConsumedLicenseSummaryList** *(list) --* 

          Summaries of the licenses consumed by resources.

          
          

          - *(dict) --* 

            Details about license consumption.

            
            

            - **ResourceType** *(string) --* 

              Resource type of the resource consuming a license.

              
            

            - **ConsumedLicenses** *(integer) --* 

              Number of licenses consumed by the resource.

              
        
      
        

        - **ManagedResourceSummaryList** *(list) --* 

          Summaries of the managed resources.

          
          

          - *(dict) --* 

            Summary information about a managed resource.

            
            

            - **ResourceType** *(string) --* 

              Type of resource associated with a license.

              
            

            - **AssociationCount** *(integer) --* 

              Number of resources associated with licenses.

              
        
      
        

        - **Tags** *(list) --* 

          Tags for the license configuration.

          
          

          - *(dict) --* 

            Details about a tag for a license configuration.

            
            

            - **Key** *(string) --* 

              Tag key.

              
            

            - **Value** *(string) --* 

              Tag value.

              
        
      
        

        - **ProductInformationList** *(list) --* 

          Product information.

          
          

          - *(dict) --* 

            Describes product information for a license configuration.

            
            

            - **ResourceType** *(string) --* 

              Resource type. The possible values are ``SSM_MANAGED`` | ``RDS`` .

              
            

            - **ProductInformationFilterList** *(list) --* 

              A Product information filter consists of a ``ProductInformationFilterComparator`` which is a logical operator, a ``ProductInformationFilterName`` which specifies the type of filter being declared, and a ``ProductInformationFilterValue`` that specifies the value to filter on. 

               

              Accepted values for ``ProductInformationFilterName`` are listed here along with descriptions and valid options for ``ProductInformationFilterComparator`` . 

               

              The following filters and are supported when the resource type is ``SSM_MANAGED`` :

               

               
              * ``Application Name`` - The name of the application. Logical operator is ``EQUALS`` . 
               
              * ``Application Publisher`` - The publisher of the application. Logical operator is ``EQUALS`` . 
               
              * ``Application Version`` - The version of the application. Logical operator is ``EQUALS`` . 
               
              * ``Platform Name`` - The name of the platform. Logical operator is ``EQUALS`` . 
               
              * ``Platform Type`` - The platform type. Logical operator is ``EQUALS`` . 
               
              * ``Tag:key`` - The key of a tag attached to an AWS resource you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . The key for your tag must be appended to ``Tag:`` following the example: ``Tag:name-of-your-key`` . ``ProductInformationFilterValue`` is optional if you are not using values for the key.  
               
              * ``AccountId`` - The 12-digit ID of an AWS account you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . 
               
              * ``License Included`` - The type of license included. Logical operators are ``EQUALS`` and ``NOT_EQUALS`` . Possible values are: ``sql-server-enterprise`` | ``sql-server-standard`` | ``sql-server-web`` | ``windows-server-datacenter`` . 
               

               

              The following filters and logical operators are supported when the resource type is ``RDS`` :

               

               
              * ``Engine Edition`` - The edition of the database engine. Logical operator is ``EQUALS`` . Possible values are: ``oracle-ee`` | ``oracle-se`` | ``oracle-se1`` | ``oracle-se2`` . 
               
              * ``License Pack`` - The license pack. Logical operator is ``EQUALS`` . Possible values are: ``data guard`` | ``diagnostic pack sqlt`` | ``tuning pack sqlt`` | ``ols`` | ``olap`` . 
               

              
              

              - *(dict) --* 

                Describes product information filters.

                
                

                - **ProductInformationFilterName** *(string) --* 

                  Filter name.

                  
                

                - **ProductInformationFilterValue** *(list) --* 

                  Filter value.

                  
                  

                  - *(string) --* 
              
                

                - **ProductInformationFilterComparator** *(string) --* 

                  Logical operator.

                  
            
          
        
      
        

        - **AutomatedDiscoveryInformation** *(dict) --* 

          Automated discovery information.

          
          

          - **LastRunTime** *(datetime) --* 

            Time that automated discovery last ran.

            
      
        

        - **DisassociateWhenNotFound** *(boolean) --* 

          When true, disassociates a resource when software is uninstalled.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: get_license_manager_report_generator(**kwargs)

    

    Gets information on the specified report generator.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetLicenseManagerReportGenerator>`_    


    **Request Syntax** 
    ::

      response = client.get_license_manager_report_generator(
          LicenseManagerReportGeneratorArn='string'
      )
    :type LicenseManagerReportGeneratorArn: string
    :param LicenseManagerReportGeneratorArn: **[REQUIRED]** 

      mazon Resource Number (ARN) of the report generator to retrieve information on.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReportGenerator': {
                'ReportGeneratorName': 'string',
                'ReportType': [
                    'LicenseConfigurationSummaryReport'|'LicenseConfigurationUsageReport',
                ],
                'ReportContext': {
                    'licenseConfigurationArns': [
                        'string',
                    ]
                },
                'ReportFrequency': {
                    'value': 123,
                    'period': 'DAY'|'WEEK'|'MONTH'
                },
                'LicenseManagerReportGeneratorArn': 'string',
                'LastRunStatus': 'string',
                'LastRunFailureReason': 'string',
                'LastReportGenerationTime': 'string',
                'ReportCreatorAccount': 'string',
                'Description': 'string',
                'S3Location': {
                    'bucket': 'string',
                    'keyPrefix': 'string'
                },
                'CreateTime': 'string',
                'Tags': [
                    {
                        'Key': 'string',
                        'Value': 'string'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ReportGenerator** *(dict) --* 

          A report generator that creates periodic reports on your license configurations.

          
          

          - **ReportGeneratorName** *(string) --* 

            Name of the report generator.

            
          

          - **ReportType** *(list) --* 

            Type of reports that are generated.

            
            

            - *(string) --* 
        
          

          - **ReportContext** *(dict) --* 

            License configuration type this generator reports on.

            
            

            - **licenseConfigurationArns** *(list) --* 

              Amazon Resource Number (ARN) of the license configuration that this generator reports on.

              
              

              - *(string) --* 
          
        
          

          - **ReportFrequency** *(dict) --* 

            Details on how frequently reports are generated.

            
            

            - **value** *(integer) --* 

              Number of times within the frequency period that a report will be generated. Currently only ``1`` is supported.

              
            

            - **period** *(string) --* 

              Time period between each report. The period can be daily, weekly, or monthly.

              
        
          

          - **LicenseManagerReportGeneratorArn** *(string) --* 

            Amazon Resource Number (ARN) of the report generator.

            
          

          - **LastRunStatus** *(string) --* 

            Status of the last report generation attempt.

            
          

          - **LastRunFailureReason** *(string) --* 

            Failure message for the last report generation attempt.

            
          

          - **LastReportGenerationTime** *(string) --* 

            Time the last report was generated at.

            
          

          - **ReportCreatorAccount** *(string) --* 

            The AWS account ID used to create the report generator.

            
          

          - **Description** *(string) --* 

            Description of the report generator.

            
          

          - **S3Location** *(dict) --* 

            Details of the S3 bucket that report generator reports are published to.

            
            

            - **bucket** *(string) --* 

              Name of the S3 bucket reports are published to.

              
            

            - **keyPrefix** *(string) --* 

              Prefix of the S3 bucket reports are published to.

              
        
          

          - **CreateTime** *(string) --* 

            Time the report was created.

            
          

          - **Tags** *(list) --* 

            Tags associated with the report generator.

            
            

            - *(dict) --* 

              Details about a tag for a license configuration.

              
              

              - **Key** *(string) --* 

                Tag key.

                
              

              - **Value** *(string) --* 

                Tag value.

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: get_license_usage(**kwargs)

    

    Gets detailed information about the usage of the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetLicenseUsage>`_    


    **Request Syntax** 
    ::

      response = client.get_license_usage(
          LicenseArn='string'
      )
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseUsage': {
                'EntitlementUsages': [
                    {
                        'Name': 'string',
                        'ConsumedValue': 'string',
                        'MaxCount': 'string',
                        'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second'
                    },
                ]
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseUsage** *(dict) --* 

          License usage details.

          
          

          - **EntitlementUsages** *(list) --* 

            License entitlement usages.

            
            

            - *(dict) --* 

              Usage associated with an entitlement resource.

              
              

              - **Name** *(string) --* 

                Entitlement usage name.

                
              

              - **ConsumedValue** *(string) --* 

                Resource usage consumed.

                
              

              - **MaxCount** *(string) --* 

                Maximum entitlement usage count.

                
              

              - **Unit** *(string) --* 

                Entitlement usage unit.

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_service_settings()

    

    Gets the License Manager settings for the current Region.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/GetServiceSettings>`_    


    **Request Syntax** 
    ::

      response = client.get_service_settings()
      
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'S3BucketArn': 'string',
            'SnsTopicArn': 'string',
            'OrganizationConfiguration': {
                'EnableIntegration': True|False
            },
            'EnableCrossAccountsDiscovery': True|False,
            'LicenseManagerResourceShareArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **S3BucketArn** *(string) --* 

          Regional S3 bucket path for storing reports, license trail event data, discovery data, and so on.

          
        

        - **SnsTopicArn** *(string) --* 

          SNS topic configured to receive notifications from License Manager.

          
        

        - **OrganizationConfiguration** *(dict) --* 

          Indicates whether AWS Organizations is integrated with License Manager for cross-account discovery.

          
          

          - **EnableIntegration** *(boolean) --* 

            Enables AWS Organization integration.

            
      
        

        - **EnableCrossAccountsDiscovery** *(boolean) --* 

          Indicates whether cross-account discovery is enabled.

          
        

        - **LicenseManagerResourceShareArn** *(string) --* 

          Amazon Resource Name (ARN) of the AWS resource share. The License Manager management account provides member accounts with access to this share.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_associations_for_license_configuration(**kwargs)

    

    Lists the resource associations for the specified license configuration.

     

    Resource associations need not consume licenses from a license configuration. For example, an AMI or a stopped instance might not consume a license (depending on the license rules).

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListAssociationsForLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.list_associations_for_license_configuration(
          LicenseConfigurationArn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of a license configuration.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurationAssociations': [
                {
                    'ResourceArn': 'string',
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ResourceOwnerId': 'string',
                    'AssociationTime': datetime(2015, 1, 1),
                    'AmiAssociationScope': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurationAssociations** *(list) --* 

          Information about the associations for the license configuration.

          
          

          - *(dict) --* 

            Describes an association with a license configuration.

            
            

            - **ResourceArn** *(string) --* 

              Amazon Resource Name (ARN) of the resource.

              
            

            - **ResourceType** *(string) --* 

              Type of server resource.

              
            

            - **ResourceOwnerId** *(string) --* 

              ID of the AWS account that owns the resource consuming licenses.

              
            

            - **AssociationTime** *(datetime) --* 

              Time when the license configuration was associated with the resource.

              
            

            - **AmiAssociationScope** *(string) --* 

              Scope of AMI associations. The possible value is ``cross-account`` .

              
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.FilterLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_distributed_grants(**kwargs)

    

    Lists the grants distributed for the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListDistributedGrants>`_    


    **Request Syntax** 
    ::

      response = client.list_distributed_grants(
          GrantArns=[
              'string',
          ],
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type GrantArns: list
    :param GrantArns: 

      Amazon Resource Names (ARNs) of the grants.

      

    
      - *(string) --* 

      
  
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters are supported:

       

       
      * ``LicenseArn``   
       
      * ``GrantStatus``   
       
      * ``GranteePrincipalARN``   
       
      * ``ProductSKU``   
       
      * ``LicenseIssuerName``   
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Grants': [
                {
                    'GrantArn': 'string',
                    'GrantName': 'string',
                    'ParentArn': 'string',
                    'LicenseArn': 'string',
                    'GranteePrincipalArn': 'string',
                    'HomeRegion': 'string',
                    'GrantStatus': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
                    'StatusReason': 'string',
                    'Version': 'string',
                    'GrantedOperations': [
                        'CreateGrant'|'CheckoutLicense'|'CheckoutBorrowLicense'|'CheckInLicense'|'ExtendConsumptionLicense'|'ListPurchasedLicenses'|'CreateToken',
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Grants** *(list) --* 

          Distributed grant details.

          
          

          - *(dict) --* 

            Describes a grant.

            
            

            - **GrantArn** *(string) --* 

              Amazon Resource Name (ARN) of the grant.

              
            

            - **GrantName** *(string) --* 

              Grant name.

              
            

            - **ParentArn** *(string) --* 

              Parent ARN.

              
            

            - **LicenseArn** *(string) --* 

              License ARN.

              
            

            - **GranteePrincipalArn** *(string) --* 

              The grantee principal ARN.

              
            

            - **HomeRegion** *(string) --* 

              Home Region of the grant.

              
            

            - **GrantStatus** *(string) --* 

              Grant status.

              
            

            - **StatusReason** *(string) --* 

              Grant status reason.

              
            

            - **Version** *(string) --* 

              Grant version.

              
            

            - **GrantedOperations** *(list) --* 

              Granted operations.

              
              

              - *(string) --* 
          
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_failures_for_license_configuration_operations(**kwargs)

    

    Lists the license configuration operations that failed.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListFailuresForLicenseConfigurationOperations>`_    


    **Request Syntax** 
    ::

      response = client.list_failures_for_license_configuration_operations(
          LicenseConfigurationArn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      Amazon Resource Name of the license configuration.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseOperationFailureList': [
                {
                    'ResourceArn': 'string',
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ErrorMessage': 'string',
                    'FailureTime': datetime(2015, 1, 1),
                    'OperationName': 'string',
                    'ResourceOwnerId': 'string',
                    'OperationRequestedBy': 'string',
                    'MetadataList': [
                        {
                            'Name': 'string',
                            'Value': 'string'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseOperationFailureList** *(list) --* 

          License configuration operations that failed.

          
          

          - *(dict) --* 

            Describes the failure of a license operation.

            
            

            - **ResourceArn** *(string) --* 

              Amazon Resource Name (ARN) of the resource.

              
            

            - **ResourceType** *(string) --* 

              Resource type.

              
            

            - **ErrorMessage** *(string) --* 

              Error message.

              
            

            - **FailureTime** *(datetime) --* 

              Failure time.

              
            

            - **OperationName** *(string) --* 

              Name of the operation.

              
            

            - **ResourceOwnerId** *(string) --* 

              ID of the AWS account that owns the resource.

              
            

            - **OperationRequestedBy** *(string) --* 

              The requester is "License Manager Automated Discovery".

              
            

            - **MetadataList** *(list) --* 

              Reserved.

              
              

              - *(dict) --* 

                Describes key/value pairs.

                
                

                - **Name** *(string) --* 

                  The key name.

                  
                

                - **Value** *(string) --* 

                  The value.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_license_configurations(**kwargs)

    

    Lists the license configurations for your account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseConfigurations>`_    


    **Request Syntax** 
    ::

      response = client.list_license_configurations(
          LicenseConfigurationArns=[
              'string',
          ],
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ]
      )
    :type LicenseConfigurationArns: list
    :param LicenseConfigurationArns: 

      Amazon Resource Names (ARN) of the license configurations.

      

    
      - *(string) --* 

      
  
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters and logical operators are supported:

       

       
      * ``licenseCountingType`` - The dimension on which licenses are counted. Possible values are ``vCPU`` | ``Instance`` | ``Core`` | ``Socket`` . Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``enforceLicenseCount`` - A Boolean value that indicates whether hard license enforcement is used. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``usagelimitExceeded`` - A Boolean value that indicates whether the available licenses have been exceeded. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurations': [
                {
                    'LicenseConfigurationId': 'string',
                    'LicenseConfigurationArn': 'string',
                    'Name': 'string',
                    'Description': 'string',
                    'LicenseCountingType': 'vCPU'|'Instance'|'Core'|'Socket',
                    'LicenseRules': [
                        'string',
                    ],
                    'LicenseCount': 123,
                    'LicenseCountHardLimit': True|False,
                    'DisassociateWhenNotFound': True|False,
                    'ConsumedLicenses': 123,
                    'Status': 'string',
                    'OwnerAccountId': 'string',
                    'ConsumedLicenseSummaryList': [
                        {
                            'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                            'ConsumedLicenses': 123
                        },
                    ],
                    'ManagedResourceSummaryList': [
                        {
                            'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                            'AssociationCount': 123
                        },
                    ],
                    'ProductInformationList': [
                        {
                            'ResourceType': 'string',
                            'ProductInformationFilterList': [
                                {
                                    'ProductInformationFilterName': 'string',
                                    'ProductInformationFilterValue': [
                                        'string',
                                    ],
                                    'ProductInformationFilterComparator': 'string'
                                },
                            ]
                        },
                    ],
                    'AutomatedDiscoveryInformation': {
                        'LastRunTime': datetime(2015, 1, 1)
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurations** *(list) --* 

          Information about the license configurations.

          
          

          - *(dict) --* 

            A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), host affinity (how long a VM must be associated with a host), and the number of licenses purchased and used.

            
            

            - **LicenseConfigurationId** *(string) --* 

              Unique ID of the license configuration.

              
            

            - **LicenseConfigurationArn** *(string) --* 

              Amazon Resource Name (ARN) of the license configuration.

              
            

            - **Name** *(string) --* 

              Name of the license configuration.

              
            

            - **Description** *(string) --* 

              Description of the license configuration.

              
            

            - **LicenseCountingType** *(string) --* 

              Dimension to use to track the license inventory.

              
            

            - **LicenseRules** *(list) --* 

              License rules.

              
              

              - *(string) --* 
          
            

            - **LicenseCount** *(integer) --* 

              Number of licenses managed by the license configuration.

              
            

            - **LicenseCountHardLimit** *(boolean) --* 

              Number of available licenses as a hard limit.

              
            

            - **DisassociateWhenNotFound** *(boolean) --* 

              When true, disassociates a resource when software is uninstalled.

              
            

            - **ConsumedLicenses** *(integer) --* 

              Number of licenses consumed. 

              
            

            - **Status** *(string) --* 

              Status of the license configuration.

              
            

            - **OwnerAccountId** *(string) --* 

              Account ID of the license configuration's owner.

              
            

            - **ConsumedLicenseSummaryList** *(list) --* 

              Summaries for licenses consumed by various resources.

              
              

              - *(dict) --* 

                Details about license consumption.

                
                

                - **ResourceType** *(string) --* 

                  Resource type of the resource consuming a license.

                  
                

                - **ConsumedLicenses** *(integer) --* 

                  Number of licenses consumed by the resource.

                  
            
          
            

            - **ManagedResourceSummaryList** *(list) --* 

              Summaries for managed resources.

              
              

              - *(dict) --* 

                Summary information about a managed resource.

                
                

                - **ResourceType** *(string) --* 

                  Type of resource associated with a license.

                  
                

                - **AssociationCount** *(integer) --* 

                  Number of resources associated with licenses.

                  
            
          
            

            - **ProductInformationList** *(list) --* 

              Product information.

              
              

              - *(dict) --* 

                Describes product information for a license configuration.

                
                

                - **ResourceType** *(string) --* 

                  Resource type. The possible values are ``SSM_MANAGED`` | ``RDS`` .

                  
                

                - **ProductInformationFilterList** *(list) --* 

                  A Product information filter consists of a ``ProductInformationFilterComparator`` which is a logical operator, a ``ProductInformationFilterName`` which specifies the type of filter being declared, and a ``ProductInformationFilterValue`` that specifies the value to filter on. 

                   

                  Accepted values for ``ProductInformationFilterName`` are listed here along with descriptions and valid options for ``ProductInformationFilterComparator`` . 

                   

                  The following filters and are supported when the resource type is ``SSM_MANAGED`` :

                   

                   
                  * ``Application Name`` - The name of the application. Logical operator is ``EQUALS`` . 
                   
                  * ``Application Publisher`` - The publisher of the application. Logical operator is ``EQUALS`` . 
                   
                  * ``Application Version`` - The version of the application. Logical operator is ``EQUALS`` . 
                   
                  * ``Platform Name`` - The name of the platform. Logical operator is ``EQUALS`` . 
                   
                  * ``Platform Type`` - The platform type. Logical operator is ``EQUALS`` . 
                   
                  * ``Tag:key`` - The key of a tag attached to an AWS resource you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . The key for your tag must be appended to ``Tag:`` following the example: ``Tag:name-of-your-key`` . ``ProductInformationFilterValue`` is optional if you are not using values for the key.  
                   
                  * ``AccountId`` - The 12-digit ID of an AWS account you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . 
                   
                  * ``License Included`` - The type of license included. Logical operators are ``EQUALS`` and ``NOT_EQUALS`` . Possible values are: ``sql-server-enterprise`` | ``sql-server-standard`` | ``sql-server-web`` | ``windows-server-datacenter`` . 
                   

                   

                  The following filters and logical operators are supported when the resource type is ``RDS`` :

                   

                   
                  * ``Engine Edition`` - The edition of the database engine. Logical operator is ``EQUALS`` . Possible values are: ``oracle-ee`` | ``oracle-se`` | ``oracle-se1`` | ``oracle-se2`` . 
                   
                  * ``License Pack`` - The license pack. Logical operator is ``EQUALS`` . Possible values are: ``data guard`` | ``diagnostic pack sqlt`` | ``tuning pack sqlt`` | ``ols`` | ``olap`` . 
                   

                  
                  

                  - *(dict) --* 

                    Describes product information filters.

                    
                    

                    - **ProductInformationFilterName** *(string) --* 

                      Filter name.

                      
                    

                    - **ProductInformationFilterValue** *(list) --* 

                      Filter value.

                      
                      

                      - *(string) --* 
                  
                    

                    - **ProductInformationFilterComparator** *(string) --* 

                      Logical operator.

                      
                
              
            
          
            

            - **AutomatedDiscoveryInformation** *(dict) --* 

              Automated discovery information.

              
              

              - **LastRunTime** *(datetime) --* 

                Time that automated discovery last ran.

                
          
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.FilterLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_license_manager_report_generators(**kwargs)

    

    Lists the report generators for your account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseManagerReportGenerators>`_    


    **Request Syntax** 
    ::

      response = client.list_license_manager_report_generators(
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters are supported: 

       

       
      * ``LicenseConfigurationArn``   
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReportGenerators': [
                {
                    'ReportGeneratorName': 'string',
                    'ReportType': [
                        'LicenseConfigurationSummaryReport'|'LicenseConfigurationUsageReport',
                    ],
                    'ReportContext': {
                        'licenseConfigurationArns': [
                            'string',
                        ]
                    },
                    'ReportFrequency': {
                        'value': 123,
                        'period': 'DAY'|'WEEK'|'MONTH'
                    },
                    'LicenseManagerReportGeneratorArn': 'string',
                    'LastRunStatus': 'string',
                    'LastRunFailureReason': 'string',
                    'LastReportGenerationTime': 'string',
                    'ReportCreatorAccount': 'string',
                    'Description': 'string',
                    'S3Location': {
                        'bucket': 'string',
                        'keyPrefix': 'string'
                    },
                    'CreateTime': 'string',
                    'Tags': [
                        {
                            'Key': 'string',
                            'Value': 'string'
                        },
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ReportGenerators** *(list) --* 

          A report generator that creates periodic reports on your license configurations.

          
          

          - *(dict) --* 

            Describe the details of a report generator.

            
            

            - **ReportGeneratorName** *(string) --* 

              Name of the report generator.

              
            

            - **ReportType** *(list) --* 

              Type of reports that are generated.

              
              

              - *(string) --* 
          
            

            - **ReportContext** *(dict) --* 

              License configuration type this generator reports on.

              
              

              - **licenseConfigurationArns** *(list) --* 

                Amazon Resource Number (ARN) of the license configuration that this generator reports on.

                
                

                - *(string) --* 
            
          
            

            - **ReportFrequency** *(dict) --* 

              Details on how frequently reports are generated.

              
              

              - **value** *(integer) --* 

                Number of times within the frequency period that a report will be generated. Currently only ``1`` is supported.

                
              

              - **period** *(string) --* 

                Time period between each report. The period can be daily, weekly, or monthly.

                
          
            

            - **LicenseManagerReportGeneratorArn** *(string) --* 

              Amazon Resource Number (ARN) of the report generator.

              
            

            - **LastRunStatus** *(string) --* 

              Status of the last report generation attempt.

              
            

            - **LastRunFailureReason** *(string) --* 

              Failure message for the last report generation attempt.

              
            

            - **LastReportGenerationTime** *(string) --* 

              Time the last report was generated at.

              
            

            - **ReportCreatorAccount** *(string) --* 

              The AWS account ID used to create the report generator.

              
            

            - **Description** *(string) --* 

              Description of the report generator.

              
            

            - **S3Location** *(dict) --* 

              Details of the S3 bucket that report generator reports are published to.

              
              

              - **bucket** *(string) --* 

                Name of the S3 bucket reports are published to.

                
              

              - **keyPrefix** *(string) --* 

                Prefix of the S3 bucket reports are published to.

                
          
            

            - **CreateTime** *(string) --* 

              Time the report was created.

              
            

            - **Tags** *(list) --* 

              Tags associated with the report generator.

              
              

              - *(dict) --* 

                Details about a tag for a license configuration.

                
                

                - **Key** *(string) --* 

                  Tag key.

                  
                

                - **Value** *(string) --* 

                  Tag value.

                  
            
          
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: list_license_specifications_for_resource(**kwargs)

    

    Describes the license configurations for the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseSpecificationsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_license_specifications_for_resource(
          ResourceArn='string',
          MaxResults=123,
          NextToken='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of a resource that has an associated license configuration.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseSpecifications': [
                {
                    'LicenseConfigurationArn': 'string',
                    'AmiAssociationScope': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseSpecifications** *(list) --* 

          License configurations associated with a resource.

          
          

          - *(dict) --* 

            Details for associating a license configuration with a resource.

            
            

            - **LicenseConfigurationArn** *(string) --* 

              Amazon Resource Name (ARN) of the license configuration.

              
            

            - **AmiAssociationScope** *(string) --* 

              Scope of AMI associations. The possible value is ``cross-account`` .

              
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_license_versions(**kwargs)

    

    Lists all versions of the specified license.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseVersions>`_    


    **Request Syntax** 
    ::

      response = client.list_license_versions(
          LicenseArn='string',
          NextToken='string',
          MaxResults=123
      )
    :type LicenseArn: string
    :param LicenseArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license.

      

    
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Licenses': [
                {
                    'LicenseArn': 'string',
                    'LicenseName': 'string',
                    'ProductName': 'string',
                    'ProductSKU': 'string',
                    'Issuer': {
                        'Name': 'string',
                        'SignKey': 'string',
                        'KeyFingerprint': 'string'
                    },
                    'HomeRegion': 'string',
                    'Status': 'AVAILABLE'|'PENDING_AVAILABLE'|'DEACTIVATED'|'SUSPENDED'|'EXPIRED'|'PENDING_DELETE'|'DELETED',
                    'Validity': {
                        'Begin': 'string',
                        'End': 'string'
                    },
                    'Beneficiary': 'string',
                    'Entitlements': [
                        {
                            'Name': 'string',
                            'Value': 'string',
                            'MaxCount': 123,
                            'Overage': True|False,
                            'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second',
                            'AllowCheckIn': True|False
                        },
                    ],
                    'ConsumptionConfiguration': {
                        'RenewType': 'None'|'Weekly'|'Monthly',
                        'ProvisionalConfiguration': {
                            'MaxTimeToLiveInMinutes': 123
                        },
                        'BorrowConfiguration': {
                            'AllowEarlyCheckIn': True|False,
                            'MaxTimeToLiveInMinutes': 123
                        }
                    },
                    'LicenseMetadata': [
                        {
                            'Name': 'string',
                            'Value': 'string'
                        },
                    ],
                    'CreateTime': 'string',
                    'Version': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Licenses** *(list) --* 

          License details.

          
          

          - *(dict) --* 

            Software license that is managed in AWS License Manager.

            
            

            - **LicenseArn** *(string) --* 

              Amazon Resource Name (ARN) of the license.

              
            

            - **LicenseName** *(string) --* 

              License name.

              
            

            - **ProductName** *(string) --* 

              Product name.

              
            

            - **ProductSKU** *(string) --* 

              Product SKU.

              
            

            - **Issuer** *(dict) --* 

              License issuer.

              
              

              - **Name** *(string) --* 

                Issuer name.

                
              

              - **SignKey** *(string) --* 

                Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.

                
              

              - **KeyFingerprint** *(string) --* 

                Issuer key fingerprint.

                
          
            

            - **HomeRegion** *(string) --* 

              Home Region of the license.

              
            

            - **Status** *(string) --* 

              License status.

              
            

            - **Validity** *(dict) --* 

              Date and time range during which the license is valid, in ISO8601-UTC format.

              
              

              - **Begin** *(string) --* 

                Start of the time range.

                
              

              - **End** *(string) --* 

                End of the time range.

                
          
            

            - **Beneficiary** *(string) --* 

              License beneficiary.

              
            

            - **Entitlements** *(list) --* 

              License entitlements.

              
              

              - *(dict) --* 

                Describes a resource entitled for use with a license.

                
                

                - **Name** *(string) --* 

                  Entitlement name.

                  
                

                - **Value** *(string) --* 

                  Entitlement resource. Use only if the unit is None.

                  
                

                - **MaxCount** *(integer) --* 

                  Maximum entitlement count. Use if the unit is not None.

                  
                

                - **Overage** *(boolean) --* 

                  Indicates whether overages are allowed.

                  
                

                - **Unit** *(string) --* 

                  Entitlement unit.

                  
                

                - **AllowCheckIn** *(boolean) --* 

                  Indicates whether check-ins are allowed.

                  
            
          
            

            - **ConsumptionConfiguration** *(dict) --* 

              Configuration for consumption of the license.

              
              

              - **RenewType** *(string) --* 

                Renewal frequency.

                
              

              - **ProvisionalConfiguration** *(dict) --* 

                Details about a provisional configuration.

                
                

                - **MaxTimeToLiveInMinutes** *(integer) --* 

                  Maximum time for the provisional configuration, in minutes.

                  
            
              

              - **BorrowConfiguration** *(dict) --* 

                Details about a borrow configuration.

                
                

                - **AllowEarlyCheckIn** *(boolean) --* 

                  Indicates whether early check-ins are allowed.

                  
                

                - **MaxTimeToLiveInMinutes** *(integer) --* 

                  Maximum time for the borrow configuration, in minutes.

                  
            
          
            

            - **LicenseMetadata** *(list) --* 

              License metadata.

              
              

              - *(dict) --* 

                Describes key/value pairs.

                
                

                - **Name** *(string) --* 

                  The key name.

                  
                

                - **Value** *(string) --* 

                  The value.

                  
            
          
            

            - **CreateTime** *(string) --* 

              License creation time.

              
            

            - **Version** *(string) --* 

              License version.

              
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: list_licenses(**kwargs)

    

    Lists the licenses for your account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenses>`_    


    **Request Syntax** 
    ::

      response = client.list_licenses(
          LicenseArns=[
              'string',
          ],
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type LicenseArns: list
    :param LicenseArns: 

      Amazon Resource Names (ARNs) of the licenses.

      

    
      - *(string) --* 

      
  
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters are supported:

       

       
      * ``Beneficiary``   
       
      * ``ProductSKU``   
       
      * ``Fingerprint``   
       
      * ``Status``   
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Licenses': [
                {
                    'LicenseArn': 'string',
                    'LicenseName': 'string',
                    'ProductName': 'string',
                    'ProductSKU': 'string',
                    'Issuer': {
                        'Name': 'string',
                        'SignKey': 'string',
                        'KeyFingerprint': 'string'
                    },
                    'HomeRegion': 'string',
                    'Status': 'AVAILABLE'|'PENDING_AVAILABLE'|'DEACTIVATED'|'SUSPENDED'|'EXPIRED'|'PENDING_DELETE'|'DELETED',
                    'Validity': {
                        'Begin': 'string',
                        'End': 'string'
                    },
                    'Beneficiary': 'string',
                    'Entitlements': [
                        {
                            'Name': 'string',
                            'Value': 'string',
                            'MaxCount': 123,
                            'Overage': True|False,
                            'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second',
                            'AllowCheckIn': True|False
                        },
                    ],
                    'ConsumptionConfiguration': {
                        'RenewType': 'None'|'Weekly'|'Monthly',
                        'ProvisionalConfiguration': {
                            'MaxTimeToLiveInMinutes': 123
                        },
                        'BorrowConfiguration': {
                            'AllowEarlyCheckIn': True|False,
                            'MaxTimeToLiveInMinutes': 123
                        }
                    },
                    'LicenseMetadata': [
                        {
                            'Name': 'string',
                            'Value': 'string'
                        },
                    ],
                    'CreateTime': 'string',
                    'Version': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Licenses** *(list) --* 

          License details.

          
          

          - *(dict) --* 

            Software license that is managed in AWS License Manager.

            
            

            - **LicenseArn** *(string) --* 

              Amazon Resource Name (ARN) of the license.

              
            

            - **LicenseName** *(string) --* 

              License name.

              
            

            - **ProductName** *(string) --* 

              Product name.

              
            

            - **ProductSKU** *(string) --* 

              Product SKU.

              
            

            - **Issuer** *(dict) --* 

              License issuer.

              
              

              - **Name** *(string) --* 

                Issuer name.

                
              

              - **SignKey** *(string) --* 

                Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.

                
              

              - **KeyFingerprint** *(string) --* 

                Issuer key fingerprint.

                
          
            

            - **HomeRegion** *(string) --* 

              Home Region of the license.

              
            

            - **Status** *(string) --* 

              License status.

              
            

            - **Validity** *(dict) --* 

              Date and time range during which the license is valid, in ISO8601-UTC format.

              
              

              - **Begin** *(string) --* 

                Start of the time range.

                
              

              - **End** *(string) --* 

                End of the time range.

                
          
            

            - **Beneficiary** *(string) --* 

              License beneficiary.

              
            

            - **Entitlements** *(list) --* 

              License entitlements.

              
              

              - *(dict) --* 

                Describes a resource entitled for use with a license.

                
                

                - **Name** *(string) --* 

                  Entitlement name.

                  
                

                - **Value** *(string) --* 

                  Entitlement resource. Use only if the unit is None.

                  
                

                - **MaxCount** *(integer) --* 

                  Maximum entitlement count. Use if the unit is not None.

                  
                

                - **Overage** *(boolean) --* 

                  Indicates whether overages are allowed.

                  
                

                - **Unit** *(string) --* 

                  Entitlement unit.

                  
                

                - **AllowCheckIn** *(boolean) --* 

                  Indicates whether check-ins are allowed.

                  
            
          
            

            - **ConsumptionConfiguration** *(dict) --* 

              Configuration for consumption of the license.

              
              

              - **RenewType** *(string) --* 

                Renewal frequency.

                
              

              - **ProvisionalConfiguration** *(dict) --* 

                Details about a provisional configuration.

                
                

                - **MaxTimeToLiveInMinutes** *(integer) --* 

                  Maximum time for the provisional configuration, in minutes.

                  
            
              

              - **BorrowConfiguration** *(dict) --* 

                Details about a borrow configuration.

                
                

                - **AllowEarlyCheckIn** *(boolean) --* 

                  Indicates whether early check-ins are allowed.

                  
                

                - **MaxTimeToLiveInMinutes** *(integer) --* 

                  Maximum time for the borrow configuration, in minutes.

                  
            
          
            

            - **LicenseMetadata** *(list) --* 

              License metadata.

              
              

              - *(dict) --* 

                Describes key/value pairs.

                
                

                - **Name** *(string) --* 

                  The key name.

                  
                

                - **Value** *(string) --* 

                  The value.

                  
            
          
            

            - **CreateTime** *(string) --* 

              License creation time.

              
            

            - **Version** *(string) --* 

              License version.

              
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: list_received_grants(**kwargs)

    

    Lists grants that are received but not accepted.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListReceivedGrants>`_    


    **Request Syntax** 
    ::

      response = client.list_received_grants(
          GrantArns=[
              'string',
          ],
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type GrantArns: list
    :param GrantArns: 

      Amazon Resource Names (ARNs) of the grants.

      

    
      - *(string) --* 

      
  
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters are supported:

       

       
      * ``ProductSKU``   
       
      * ``LicenseIssuerName``   
       
      * ``LicenseArn``   
       
      * ``GrantStatus``   
       
      * ``GranterAccountId``   
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Grants': [
                {
                    'GrantArn': 'string',
                    'GrantName': 'string',
                    'ParentArn': 'string',
                    'LicenseArn': 'string',
                    'GranteePrincipalArn': 'string',
                    'HomeRegion': 'string',
                    'GrantStatus': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
                    'StatusReason': 'string',
                    'Version': 'string',
                    'GrantedOperations': [
                        'CreateGrant'|'CheckoutLicense'|'CheckoutBorrowLicense'|'CheckInLicense'|'ExtendConsumptionLicense'|'ListPurchasedLicenses'|'CreateToken',
                    ]
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Grants** *(list) --* 

          Received grant details.

          
          

          - *(dict) --* 

            Describes a grant.

            
            

            - **GrantArn** *(string) --* 

              Amazon Resource Name (ARN) of the grant.

              
            

            - **GrantName** *(string) --* 

              Grant name.

              
            

            - **ParentArn** *(string) --* 

              Parent ARN.

              
            

            - **LicenseArn** *(string) --* 

              License ARN.

              
            

            - **GranteePrincipalArn** *(string) --* 

              The grantee principal ARN.

              
            

            - **HomeRegion** *(string) --* 

              Home Region of the grant.

              
            

            - **GrantStatus** *(string) --* 

              Grant status.

              
            

            - **StatusReason** *(string) --* 

              Grant status reason.

              
            

            - **Version** *(string) --* 

              Grant version.

              
            

            - **GrantedOperations** *(list) --* 

              Granted operations.

              
              

              - *(string) --* 
          
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_received_licenses(**kwargs)

    

    Lists received licenses.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListReceivedLicenses>`_    


    **Request Syntax** 
    ::

      response = client.list_received_licenses(
          LicenseArns=[
              'string',
          ],
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type LicenseArns: list
    :param LicenseArns: 

      Amazon Resource Names (ARNs) of the licenses.

      

    
      - *(string) --* 

      
  
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters are supported:

       

       
      * ``ProductSKU``   
       
      * ``Status``   
       
      * ``Fingerprint``   
       
      * ``IssuerName``   
       
      * ``Beneficiary``   
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Licenses': [
                {
                    'LicenseArn': 'string',
                    'LicenseName': 'string',
                    'ProductName': 'string',
                    'ProductSKU': 'string',
                    'Issuer': {
                        'Name': 'string',
                        'SignKey': 'string',
                        'KeyFingerprint': 'string'
                    },
                    'HomeRegion': 'string',
                    'Status': 'AVAILABLE'|'PENDING_AVAILABLE'|'DEACTIVATED'|'SUSPENDED'|'EXPIRED'|'PENDING_DELETE'|'DELETED',
                    'Validity': {
                        'Begin': 'string',
                        'End': 'string'
                    },
                    'Beneficiary': 'string',
                    'Entitlements': [
                        {
                            'Name': 'string',
                            'Value': 'string',
                            'MaxCount': 123,
                            'Overage': True|False,
                            'Unit': 'Count'|'None'|'Seconds'|'Microseconds'|'Milliseconds'|'Bytes'|'Kilobytes'|'Megabytes'|'Gigabytes'|'Terabytes'|'Bits'|'Kilobits'|'Megabits'|'Gigabits'|'Terabits'|'Percent'|'Bytes/Second'|'Kilobytes/Second'|'Megabytes/Second'|'Gigabytes/Second'|'Terabytes/Second'|'Bits/Second'|'Kilobits/Second'|'Megabits/Second'|'Gigabits/Second'|'Terabits/Second'|'Count/Second',
                            'AllowCheckIn': True|False
                        },
                    ],
                    'ConsumptionConfiguration': {
                        'RenewType': 'None'|'Weekly'|'Monthly',
                        'ProvisionalConfiguration': {
                            'MaxTimeToLiveInMinutes': 123
                        },
                        'BorrowConfiguration': {
                            'AllowEarlyCheckIn': True|False,
                            'MaxTimeToLiveInMinutes': 123
                        }
                    },
                    'LicenseMetadata': [
                        {
                            'Name': 'string',
                            'Value': 'string'
                        },
                    ],
                    'CreateTime': 'string',
                    'Version': 'string',
                    'ReceivedMetadata': {
                        'ReceivedStatus': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'DISABLED'|'WORKFLOW_COMPLETED',
                        'ReceivedStatusReason': 'string',
                        'AllowedOperations': [
                            'CreateGrant'|'CheckoutLicense'|'CheckoutBorrowLicense'|'CheckInLicense'|'ExtendConsumptionLicense'|'ListPurchasedLicenses'|'CreateToken',
                        ]
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Licenses** *(list) --* 

          Received license details.

          
          

          - *(dict) --* 

            Describes a license that is granted to a grantee.

            
            

            - **LicenseArn** *(string) --* 

              Amazon Resource Name (ARN) of the license.

              
            

            - **LicenseName** *(string) --* 

              License name.

              
            

            - **ProductName** *(string) --* 

              Product name.

              
            

            - **ProductSKU** *(string) --* 

              Product SKU.

              
            

            - **Issuer** *(dict) --* 

              Granted license issuer.

              
              

              - **Name** *(string) --* 

                Issuer name.

                
              

              - **SignKey** *(string) --* 

                Asymmetric CMK from AWS Key Management Service. The CMK must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.

                
              

              - **KeyFingerprint** *(string) --* 

                Issuer key fingerprint.

                
          
            

            - **HomeRegion** *(string) --* 

              Home Region of the granted license.

              
            

            - **Status** *(string) --* 

              Granted license status.

              
            

            - **Validity** *(dict) --* 

              Date and time range during which the granted license is valid, in ISO8601-UTC format.

              
              

              - **Begin** *(string) --* 

                Start of the time range.

                
              

              - **End** *(string) --* 

                End of the time range.

                
          
            

            - **Beneficiary** *(string) --* 

              Granted license beneficiary.

              
            

            - **Entitlements** *(list) --* 

              License entitlements.

              
              

              - *(dict) --* 

                Describes a resource entitled for use with a license.

                
                

                - **Name** *(string) --* 

                  Entitlement name.

                  
                

                - **Value** *(string) --* 

                  Entitlement resource. Use only if the unit is None.

                  
                

                - **MaxCount** *(integer) --* 

                  Maximum entitlement count. Use if the unit is not None.

                  
                

                - **Overage** *(boolean) --* 

                  Indicates whether overages are allowed.

                  
                

                - **Unit** *(string) --* 

                  Entitlement unit.

                  
                

                - **AllowCheckIn** *(boolean) --* 

                  Indicates whether check-ins are allowed.

                  
            
          
            

            - **ConsumptionConfiguration** *(dict) --* 

              Configuration for consumption of the license.

              
              

              - **RenewType** *(string) --* 

                Renewal frequency.

                
              

              - **ProvisionalConfiguration** *(dict) --* 

                Details about a provisional configuration.

                
                

                - **MaxTimeToLiveInMinutes** *(integer) --* 

                  Maximum time for the provisional configuration, in minutes.

                  
            
              

              - **BorrowConfiguration** *(dict) --* 

                Details about a borrow configuration.

                
                

                - **AllowEarlyCheckIn** *(boolean) --* 

                  Indicates whether early check-ins are allowed.

                  
                

                - **MaxTimeToLiveInMinutes** *(integer) --* 

                  Maximum time for the borrow configuration, in minutes.

                  
            
          
            

            - **LicenseMetadata** *(list) --* 

              Granted license metadata.

              
              

              - *(dict) --* 

                Describes key/value pairs.

                
                

                - **Name** *(string) --* 

                  The key name.

                  
                

                - **Value** *(string) --* 

                  The value.

                  
            
          
            

            - **CreateTime** *(string) --* 

              Creation time of the granted license.

              
            

            - **Version** *(string) --* 

              Version of the granted license.

              
            

            - **ReceivedMetadata** *(dict) --* 

              Granted license received metadata.

              
              

              - **ReceivedStatus** *(string) --* 

                Received status.

                
              

              - **ReceivedStatusReason** *(string) --* 
              

              - **AllowedOperations** *(list) --* 

                Allowed operations.

                
                

                - *(string) --* 
            
          
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_resource_inventory(**kwargs)

    

    Lists resources managed using Systems Manager inventory.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListResourceInventory>`_    


    **Request Syntax** 
    ::

      response = client.list_resource_inventory(
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Condition': 'EQUALS'|'NOT_EQUALS'|'BEGINS_WITH'|'CONTAINS',
                  'Value': 'string'
              },
          ]
      )
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters and logical operators are supported:

       

       
      * ``account_id`` - The ID of the AWS account that owns the resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``application_name`` - The name of the application. Logical operators are ``EQUALS`` | ``BEGINS_WITH`` . 
       
      * ``license_included`` - The type of license included. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . Possible values are ``sql-server-enterprise`` | ``sql-server-standard`` | ``sql-server-web`` | ``windows-server-datacenter`` . 
       
      * ``platform`` - The platform of the resource. Logical operators are ``EQUALS`` | ``BEGINS_WITH`` . 
       
      * ``resource_id`` - The ID of the resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``tag:<key>`` - The key/value combination of a tag assigned to the resource. Logical operators are ``EQUALS`` (single account) or ``EQUALS`` | ``NOT_EQUALS`` (cross account). 
       

      

    
      - *(dict) --* 

        An inventory filter.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Name of the filter.

          

        
        - **Condition** *(string) --* **[REQUIRED]** 

          Condition of the filter.

          

        
        - **Value** *(string) --* 

          Value of the filter.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResourceInventoryList': [
                {
                    'ResourceId': 'string',
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ResourceArn': 'string',
                    'Platform': 'string',
                    'PlatformVersion': 'string',
                    'ResourceOwningAccountId': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResourceInventoryList** *(list) --* 

          Information about the resources.

          
          

          - *(dict) --* 

            Details about a resource.

            
            

            - **ResourceId** *(string) --* 

              ID of the resource.

              
            

            - **ResourceType** *(string) --* 

              Type of resource.

              
            

            - **ResourceArn** *(string) --* 

              Amazon Resource Name (ARN) of the resource.

              
            

            - **Platform** *(string) --* 

              Platform of the resource.

              
            

            - **PlatformVersion** *(string) --* 

              Platform version of the resource in the inventory.

              
            

            - **ResourceOwningAccountId** *(string) --* 

              ID of the account that owns the resource.

              
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.FilterLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.FailedDependencyException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists the tags for the specified license configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceArn='string'
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license configuration.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tags** *(list) --* 

          Information about the tags.

          
          

          - *(dict) --* 

            Details about a tag for a license configuration.

            
            

            - **Key** *(string) --* 

              Tag key.

              
            

            - **Value** *(string) --* 

              Tag value.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: list_tokens(**kwargs)

    

    Lists your tokens.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListTokens>`_    


    **Request Syntax** 
    ::

      response = client.list_tokens(
          TokenIds=[
              'string',
          ],
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type TokenIds: list
    :param TokenIds: 

      Token IDs.

      

    
      - *(string) --* 

      
  
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filter is supported:

       

       
      * ``LicenseArns``   
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tokens': [
                {
                    'TokenId': 'string',
                    'TokenType': 'string',
                    'LicenseArn': 'string',
                    'ExpirationTime': 'string',
                    'TokenProperties': [
                        'string',
                    ],
                    'RoleArns': [
                        'string',
                    ],
                    'Status': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tokens** *(list) --* 

          Received token details.

          
          

          - *(dict) --* 

            Describes a token.

            
            

            - **TokenId** *(string) --* 

              Token ID.

              
            

            - **TokenType** *(string) --* 

              Type of token generated. The supported value is ``REFRESH_TOKEN`` .

              
            

            - **LicenseArn** *(string) --* 

              Amazon Resource Name (ARN) of the license.

              
            

            - **ExpirationTime** *(string) --* 

              Token expiration time, in ISO8601-UTC format.

              
            

            - **TokenProperties** *(list) --* 

              Data specified by the caller.

              
              

              - *(string) --* 
          
            

            - **RoleArns** *(list) --* 

              Amazon Resource Names (ARN) of the roles included in the token.

              
              

              - *(string) --* 
          
            

            - **Status** *(string) --* 

              Token status. The possible values are ``AVAILABLE`` and ``DELETED`` .

              
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: list_usage_for_license_configuration(**kwargs)

    

    Lists all license usage records for a license configuration, displaying license consumption details by resource at a selected point in time. Use this action to audit the current license consumption for any license inventory and configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListUsageForLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.list_usage_for_license_configuration(
          LicenseConfigurationArn='string',
          MaxResults=123,
          NextToken='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ]
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license configuration.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      Maximum number of results to return in a single call.

      

    
    :type NextToken: string
    :param NextToken: 

      Token for the next set of results.

      

    
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters and logical operators are supported:

       

       
      * ``resourceArn`` - The ARN of the license configuration resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``resourceType`` - The resource type (``EC2_INSTANCE`` | ``EC2_HOST`` | ``EC2_AMI`` | ``SYSTEMS_MANAGER_MANAGED_INSTANCE`` ). Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``resourceAccount`` - The ID of the account that owns the resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurationUsageList': [
                {
                    'ResourceArn': 'string',
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ResourceStatus': 'string',
                    'ResourceOwnerId': 'string',
                    'AssociationTime': datetime(2015, 1, 1),
                    'ConsumedLicenses': 123
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurationUsageList** *(list) --* 

          Information about the license configurations.

          
          

          - *(dict) --* 

            Details about the usage of a resource associated with a license configuration.

            
            

            - **ResourceArn** *(string) --* 

              Amazon Resource Name (ARN) of the resource.

              
            

            - **ResourceType** *(string) --* 

              Type of resource.

              
            

            - **ResourceStatus** *(string) --* 

              Status of the resource.

              
            

            - **ResourceOwnerId** *(string) --* 

              ID of the account that owns the resource.

              
            

            - **AssociationTime** *(datetime) --* 

              Time when the license configuration was initially associated with the resource.

              
            

            - **ConsumedLicenses** *(integer) --* 

              Number of licenses consumed by the resource.

              
        
      
        

        - **NextToken** *(string) --* 

          Token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.FilterLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: reject_grant(**kwargs)

    

    Rejects the specified grant.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/RejectGrant>`_    


    **Request Syntax** 
    ::

      response = client.reject_grant(
          GrantArn='string'
      )
    :type GrantArn: string
    :param GrantArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the grant.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'GrantArn': 'string',
            'Status': 'PENDING_WORKFLOW'|'PENDING_ACCEPT'|'REJECTED'|'ACTIVE'|'FAILED_WORKFLOW'|'DELETED'|'PENDING_DELETE'|'DISABLED'|'WORKFLOW_COMPLETED',
            'Version': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **GrantArn** *(string) --* 

          Grant ARN.

          
        

        - **Status** *(string) --* 

          Grant status.

          
        

        - **Version** *(string) --* 

          Grant version.

          
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds the specified tags to the specified license configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceArn='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license configuration.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      One or more tags.

      

    
      - *(dict) --* 

        Details about a tag for a license configuration.

        

      
        - **Key** *(string) --* 

          Tag key.

          

        
        - **Value** *(string) --* 

          Tag value.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes the specified tags from the specified license configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceArn='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license configuration.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      Keys identifying the tags to remove.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: update_license_configuration(**kwargs)

    

    Modifies the attributes of an existing license configuration.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response = client.update_license_configuration(
          LicenseConfigurationArn='string',
          LicenseConfigurationStatus='AVAILABLE'|'DISABLED',
          LicenseRules=[
              'string',
          ],
          LicenseCount=123,
          LicenseCountHardLimit=True|False,
          Name='string',
          Description='string',
          ProductInformationList=[
              {
                  'ResourceType': 'string',
                  'ProductInformationFilterList': [
                      {
                          'ProductInformationFilterName': 'string',
                          'ProductInformationFilterValue': [
                              'string',
                          ],
                          'ProductInformationFilterComparator': 'string'
                      },
                  ]
              },
          ],
          DisassociateWhenNotFound=True|False
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license configuration.

      

    
    :type LicenseConfigurationStatus: string
    :param LicenseConfigurationStatus: 

      New status of the license configuration.

      

    
    :type LicenseRules: list
    :param LicenseRules: 

      New license rule. The only rule that you can add after you create a license configuration is licenseAffinityToHost.

      

    
      - *(string) --* 

      
  
    :type LicenseCount: integer
    :param LicenseCount: 

      New number of licenses managed by the license configuration.

      

    
    :type LicenseCountHardLimit: boolean
    :param LicenseCountHardLimit: 

      New hard limit of the number of available licenses.

      

    
    :type Name: string
    :param Name: 

      New name of the license configuration.

      

    
    :type Description: string
    :param Description: 

      New description of the license configuration.

      

    
    :type ProductInformationList: list
    :param ProductInformationList: 

      New product information.

      

    
      - *(dict) --* 

        Describes product information for a license configuration.

        

      
        - **ResourceType** *(string) --* **[REQUIRED]** 

          Resource type. The possible values are ``SSM_MANAGED`` | ``RDS`` .

          

        
        - **ProductInformationFilterList** *(list) --* **[REQUIRED]** 

          A Product information filter consists of a ``ProductInformationFilterComparator`` which is a logical operator, a ``ProductInformationFilterName`` which specifies the type of filter being declared, and a ``ProductInformationFilterValue`` that specifies the value to filter on. 

           

          Accepted values for ``ProductInformationFilterName`` are listed here along with descriptions and valid options for ``ProductInformationFilterComparator`` . 

           

          The following filters and are supported when the resource type is ``SSM_MANAGED`` :

           

           
          * ``Application Name`` - The name of the application. Logical operator is ``EQUALS`` . 
           
          * ``Application Publisher`` - The publisher of the application. Logical operator is ``EQUALS`` . 
           
          * ``Application Version`` - The version of the application. Logical operator is ``EQUALS`` . 
           
          * ``Platform Name`` - The name of the platform. Logical operator is ``EQUALS`` . 
           
          * ``Platform Type`` - The platform type. Logical operator is ``EQUALS`` . 
           
          * ``Tag:key`` - The key of a tag attached to an AWS resource you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . The key for your tag must be appended to ``Tag:`` following the example: ``Tag:name-of-your-key`` . ``ProductInformationFilterValue`` is optional if you are not using values for the key.  
           
          * ``AccountId`` - The 12-digit ID of an AWS account you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . 
           
          * ``License Included`` - The type of license included. Logical operators are ``EQUALS`` and ``NOT_EQUALS`` . Possible values are: ``sql-server-enterprise`` | ``sql-server-standard`` | ``sql-server-web`` | ``windows-server-datacenter`` . 
           

           

          The following filters and logical operators are supported when the resource type is ``RDS`` :

           

           
          * ``Engine Edition`` - The edition of the database engine. Logical operator is ``EQUALS`` . Possible values are: ``oracle-ee`` | ``oracle-se`` | ``oracle-se1`` | ``oracle-se2`` . 
           
          * ``License Pack`` - The license pack. Logical operator is ``EQUALS`` . Possible values are: ``data guard`` | ``diagnostic pack sqlt`` | ``tuning pack sqlt`` | ``ols`` | ``olap`` . 
           

          

        
          - *(dict) --* 

            Describes product information filters.

            

          
            - **ProductInformationFilterName** *(string) --* **[REQUIRED]** 

              Filter name.

              

            
            - **ProductInformationFilterValue** *(list) --* 

              Filter value.

              

            
              - *(string) --* 

              
          
            - **ProductInformationFilterComparator** *(string) --* **[REQUIRED]** 

              Logical operator.

              

            
          
      
      
  
    :type DisassociateWhenNotFound: boolean
    :param DisassociateWhenNotFound: 

      When true, disassociates a resource when software is uninstalled.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    

  .. py:method:: update_license_manager_report_generator(**kwargs)

    

    Updates a report generator.

     

    After you make changes to a report generator, it will start generating new reports within 60 minutes of being updated.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseManagerReportGenerator>`_    


    **Request Syntax** 
    ::

      response = client.update_license_manager_report_generator(
          LicenseManagerReportGeneratorArn='string',
          ReportGeneratorName='string',
          Type=[
              'LicenseConfigurationSummaryReport'|'LicenseConfigurationUsageReport',
          ],
          ReportContext={
              'licenseConfigurationArns': [
                  'string',
              ]
          },
          ReportFrequency={
              'value': 123,
              'period': 'DAY'|'WEEK'|'MONTH'
          },
          ClientToken='string',
          Description='string'
      )
    :type LicenseManagerReportGeneratorArn: string
    :param LicenseManagerReportGeneratorArn: **[REQUIRED]** 

      Amazon Resource Number (ARN) of the report generator to update.

      

    
    :type ReportGeneratorName: string
    :param ReportGeneratorName: **[REQUIRED]** 

      Name of the report generator.

      

    
    :type Type: list
    :param Type: **[REQUIRED]** 

      Type of reports to generate. The following report types an be generated:

       

       
      * License configuration report - Reports on the number and details of consumed licenses for a license configuration. 
       
      * Resource report - Reports on the tracked licenses and resource consumption for a license configuration. 
       

      

    
      - *(string) --* 

      
  
    :type ReportContext: dict
    :param ReportContext: **[REQUIRED]** 

      ?

      

    
      - **licenseConfigurationArns** *(list) --* **[REQUIRED]** 

        Amazon Resource Number (ARN) of the license configuration that this generator reports on.

        

      
        - *(string) --* 

        
    
    
    :type ReportFrequency: dict
    :param ReportFrequency: **[REQUIRED]** 

      Frequency by which reports are generated. The following options are avaiable:

       

      ??? What are the APi value options?

      

    
      - **value** *(integer) --* 

        Number of times within the frequency period that a report will be generated. Currently only ``1`` is supported.

        

      
      - **period** *(string) --* 

        Time period between each report. The period can be daily, weekly, or monthly.

        

      
    
    :type ClientToken: string
    :param ClientToken: **[REQUIRED]** 

      Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      

    
    :type Description: string
    :param Description: 

      Description of the report generator.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.ValidationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ResourceLimitExceededException`

    

  .. py:method:: update_license_specifications_for_resource(**kwargs)

    

    Adds or removes the specified license configurations for the specified AWS resource.

     

    You can update the license specifications of AMIs, instances, and hosts. You cannot update the license specifications for launch templates and AWS CloudFormation templates, as they send license configurations to the operation that creates the resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateLicenseSpecificationsForResource>`_    


    **Request Syntax** 
    ::

      response = client.update_license_specifications_for_resource(
          ResourceArn='string',
          AddLicenseSpecifications=[
              {
                  'LicenseConfigurationArn': 'string',
                  'AmiAssociationScope': 'string'
              },
          ],
          RemoveLicenseSpecifications=[
              {
                  'LicenseConfigurationArn': 'string',
                  'AmiAssociationScope': 'string'
              },
          ]
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the AWS resource.

      

    
    :type AddLicenseSpecifications: list
    :param AddLicenseSpecifications: 

      ARNs of the license configurations to add.

      

    
      - *(dict) --* 

        Details for associating a license configuration with a resource.

        

      
        - **LicenseConfigurationArn** *(string) --* **[REQUIRED]** 

          Amazon Resource Name (ARN) of the license configuration.

          

        
        - **AmiAssociationScope** *(string) --* 

          Scope of AMI associations. The possible value is ``cross-account`` .

          

        
      
  
    :type RemoveLicenseSpecifications: list
    :param RemoveLicenseSpecifications: 

      ARNs of the license configurations to remove.

      

    
      - *(dict) --* 

        Details for associating a license configuration with a resource.

        

      
        - **LicenseConfigurationArn** *(string) --* **[REQUIRED]** 

          Amazon Resource Name (ARN) of the license configuration.

          

        
        - **AmiAssociationScope** *(string) --* 

          Scope of AMI associations. The possible value is ``cross-account`` .

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidResourceStateException`

    
    *     :py:class:`LicenseManager.Client.exceptions.LicenseUsageException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

  .. py:method:: update_service_settings(**kwargs)

    

    Updates License Manager settings for the current Region.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/UpdateServiceSettings>`_    


    **Request Syntax** 
    ::

      response = client.update_service_settings(
          S3BucketArn='string',
          SnsTopicArn='string',
          OrganizationConfiguration={
              'EnableIntegration': True|False
          },
          EnableCrossAccountsDiscovery=True|False
      )
    :type S3BucketArn: string
    :param S3BucketArn: 

      Amazon Resource Name (ARN) of the Amazon S3 bucket where the License Manager information is stored.

      

    
    :type SnsTopicArn: string
    :param SnsTopicArn: 

      Amazon Resource Name (ARN) of the Amazon SNS topic used for License Manager alerts.

      

    
    :type OrganizationConfiguration: dict
    :param OrganizationConfiguration: 

      Enables integration with AWS Organizations for cross-account discovery.

      

    
      - **EnableIntegration** *(boolean) --* **[REQUIRED]** 

        Enables AWS Organization integration.

        

      
    
    :type EnableCrossAccountsDiscovery: boolean
    :param EnableCrossAccountsDiscovery: 

      Activates cross-account discovery.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`LicenseManager.Client.exceptions.InvalidParameterValueException`

    
    *     :py:class:`LicenseManager.Client.exceptions.ServerInternalException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AuthorizationException`

    
    *     :py:class:`LicenseManager.Client.exceptions.AccessDeniedException`

    
    *     :py:class:`LicenseManager.Client.exceptions.RateLimitExceededException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`LicenseManager.Paginator.ListAssociationsForLicenseConfiguration`


* :py:class:`LicenseManager.Paginator.ListLicenseConfigurations`


* :py:class:`LicenseManager.Paginator.ListLicenseSpecificationsForResource`


* :py:class:`LicenseManager.Paginator.ListResourceInventory`


* :py:class:`LicenseManager.Paginator.ListUsageForLicenseConfiguration`



.. py:class:: LicenseManager.Paginator.ListAssociationsForLicenseConfiguration

  ::

    
    paginator = client.get_paginator('list_associations_for_license_configuration')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LicenseManager.Client.list_associations_for_license_configuration`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListAssociationsForLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          LicenseConfigurationArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of a license configuration.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurationAssociations': [
                {
                    'ResourceArn': 'string',
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ResourceOwnerId': 'string',
                    'AssociationTime': datetime(2015, 1, 1),
                    'AmiAssociationScope': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurationAssociations** *(list) --* 

          Information about the associations for the license configuration.

          
          

          - *(dict) --* 

            Describes an association with a license configuration.

            
            

            - **ResourceArn** *(string) --* 

              Amazon Resource Name (ARN) of the resource.

              
            

            - **ResourceType** *(string) --* 

              Type of server resource.

              
            

            - **ResourceOwnerId** *(string) --* 

              ID of the AWS account that owns the resource consuming licenses.

              
            

            - **AssociationTime** *(datetime) --* 

              Time when the license configuration was associated with the resource.

              
            

            - **AmiAssociationScope** *(string) --* 

              Scope of AMI associations. The possible value is ``cross-account`` .

              
        
      
    

.. py:class:: LicenseManager.Paginator.ListLicenseConfigurations

  ::

    
    paginator = client.get_paginator('list_license_configurations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LicenseManager.Client.list_license_configurations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseConfigurations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          LicenseConfigurationArns=[
              'string',
          ],
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type LicenseConfigurationArns: list
    :param LicenseConfigurationArns: 

      Amazon Resource Names (ARN) of the license configurations.

      

    
      - *(string) --* 

      
  
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters and logical operators are supported:

       

       
      * ``licenseCountingType`` - The dimension on which licenses are counted. Possible values are ``vCPU`` | ``Instance`` | ``Core`` | ``Socket`` . Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``enforceLicenseCount`` - A Boolean value that indicates whether hard license enforcement is used. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``usagelimitExceeded`` - A Boolean value that indicates whether the available licenses have been exceeded. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurations': [
                {
                    'LicenseConfigurationId': 'string',
                    'LicenseConfigurationArn': 'string',
                    'Name': 'string',
                    'Description': 'string',
                    'LicenseCountingType': 'vCPU'|'Instance'|'Core'|'Socket',
                    'LicenseRules': [
                        'string',
                    ],
                    'LicenseCount': 123,
                    'LicenseCountHardLimit': True|False,
                    'DisassociateWhenNotFound': True|False,
                    'ConsumedLicenses': 123,
                    'Status': 'string',
                    'OwnerAccountId': 'string',
                    'ConsumedLicenseSummaryList': [
                        {
                            'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                            'ConsumedLicenses': 123
                        },
                    ],
                    'ManagedResourceSummaryList': [
                        {
                            'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                            'AssociationCount': 123
                        },
                    ],
                    'ProductInformationList': [
                        {
                            'ResourceType': 'string',
                            'ProductInformationFilterList': [
                                {
                                    'ProductInformationFilterName': 'string',
                                    'ProductInformationFilterValue': [
                                        'string',
                                    ],
                                    'ProductInformationFilterComparator': 'string'
                                },
                            ]
                        },
                    ],
                    'AutomatedDiscoveryInformation': {
                        'LastRunTime': datetime(2015, 1, 1)
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurations** *(list) --* 

          Information about the license configurations.

          
          

          - *(dict) --* 

            A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), host affinity (how long a VM must be associated with a host), and the number of licenses purchased and used.

            
            

            - **LicenseConfigurationId** *(string) --* 

              Unique ID of the license configuration.

              
            

            - **LicenseConfigurationArn** *(string) --* 

              Amazon Resource Name (ARN) of the license configuration.

              
            

            - **Name** *(string) --* 

              Name of the license configuration.

              
            

            - **Description** *(string) --* 

              Description of the license configuration.

              
            

            - **LicenseCountingType** *(string) --* 

              Dimension to use to track the license inventory.

              
            

            - **LicenseRules** *(list) --* 

              License rules.

              
              

              - *(string) --* 
          
            

            - **LicenseCount** *(integer) --* 

              Number of licenses managed by the license configuration.

              
            

            - **LicenseCountHardLimit** *(boolean) --* 

              Number of available licenses as a hard limit.

              
            

            - **DisassociateWhenNotFound** *(boolean) --* 

              When true, disassociates a resource when software is uninstalled.

              
            

            - **ConsumedLicenses** *(integer) --* 

              Number of licenses consumed. 

              
            

            - **Status** *(string) --* 

              Status of the license configuration.

              
            

            - **OwnerAccountId** *(string) --* 

              Account ID of the license configuration's owner.

              
            

            - **ConsumedLicenseSummaryList** *(list) --* 

              Summaries for licenses consumed by various resources.

              
              

              - *(dict) --* 

                Details about license consumption.

                
                

                - **ResourceType** *(string) --* 

                  Resource type of the resource consuming a license.

                  
                

                - **ConsumedLicenses** *(integer) --* 

                  Number of licenses consumed by the resource.

                  
            
          
            

            - **ManagedResourceSummaryList** *(list) --* 

              Summaries for managed resources.

              
              

              - *(dict) --* 

                Summary information about a managed resource.

                
                

                - **ResourceType** *(string) --* 

                  Type of resource associated with a license.

                  
                

                - **AssociationCount** *(integer) --* 

                  Number of resources associated with licenses.

                  
            
          
            

            - **ProductInformationList** *(list) --* 

              Product information.

              
              

              - *(dict) --* 

                Describes product information for a license configuration.

                
                

                - **ResourceType** *(string) --* 

                  Resource type. The possible values are ``SSM_MANAGED`` | ``RDS`` .

                  
                

                - **ProductInformationFilterList** *(list) --* 

                  A Product information filter consists of a ``ProductInformationFilterComparator`` which is a logical operator, a ``ProductInformationFilterName`` which specifies the type of filter being declared, and a ``ProductInformationFilterValue`` that specifies the value to filter on. 

                   

                  Accepted values for ``ProductInformationFilterName`` are listed here along with descriptions and valid options for ``ProductInformationFilterComparator`` . 

                   

                  The following filters and are supported when the resource type is ``SSM_MANAGED`` :

                   

                   
                  * ``Application Name`` - The name of the application. Logical operator is ``EQUALS`` . 
                   
                  * ``Application Publisher`` - The publisher of the application. Logical operator is ``EQUALS`` . 
                   
                  * ``Application Version`` - The version of the application. Logical operator is ``EQUALS`` . 
                   
                  * ``Platform Name`` - The name of the platform. Logical operator is ``EQUALS`` . 
                   
                  * ``Platform Type`` - The platform type. Logical operator is ``EQUALS`` . 
                   
                  * ``Tag:key`` - The key of a tag attached to an AWS resource you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . The key for your tag must be appended to ``Tag:`` following the example: ``Tag:name-of-your-key`` . ``ProductInformationFilterValue`` is optional if you are not using values for the key.  
                   
                  * ``AccountId`` - The 12-digit ID of an AWS account you wish to exclude from automated discovery. Logical operator is ``NOT_EQUALS`` . 
                   
                  * ``License Included`` - The type of license included. Logical operators are ``EQUALS`` and ``NOT_EQUALS`` . Possible values are: ``sql-server-enterprise`` | ``sql-server-standard`` | ``sql-server-web`` | ``windows-server-datacenter`` . 
                   

                   

                  The following filters and logical operators are supported when the resource type is ``RDS`` :

                   

                   
                  * ``Engine Edition`` - The edition of the database engine. Logical operator is ``EQUALS`` . Possible values are: ``oracle-ee`` | ``oracle-se`` | ``oracle-se1`` | ``oracle-se2`` . 
                   
                  * ``License Pack`` - The license pack. Logical operator is ``EQUALS`` . Possible values are: ``data guard`` | ``diagnostic pack sqlt`` | ``tuning pack sqlt`` | ``ols`` | ``olap`` . 
                   

                  
                  

                  - *(dict) --* 

                    Describes product information filters.

                    
                    

                    - **ProductInformationFilterName** *(string) --* 

                      Filter name.

                      
                    

                    - **ProductInformationFilterValue** *(list) --* 

                      Filter value.

                      
                      

                      - *(string) --* 
                  
                    

                    - **ProductInformationFilterComparator** *(string) --* 

                      Logical operator.

                      
                
              
            
          
            

            - **AutomatedDiscoveryInformation** *(dict) --* 

              Automated discovery information.

              
              

              - **LastRunTime** *(datetime) --* 

                Time that automated discovery last ran.

                
          
        
      
    

.. py:class:: LicenseManager.Paginator.ListLicenseSpecificationsForResource

  ::

    
    paginator = client.get_paginator('list_license_specifications_for_resource')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LicenseManager.Client.list_license_specifications_for_resource`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListLicenseSpecificationsForResource>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ResourceArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ResourceArn: string
    :param ResourceArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of a resource that has an associated license configuration.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseSpecifications': [
                {
                    'LicenseConfigurationArn': 'string',
                    'AmiAssociationScope': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseSpecifications** *(list) --* 

          License configurations associated with a resource.

          
          

          - *(dict) --* 

            Details for associating a license configuration with a resource.

            
            

            - **LicenseConfigurationArn** *(string) --* 

              Amazon Resource Name (ARN) of the license configuration.

              
            

            - **AmiAssociationScope** *(string) --* 

              Scope of AMI associations. The possible value is ``cross-account`` .

              
        
      
    

.. py:class:: LicenseManager.Paginator.ListResourceInventory

  ::

    
    paginator = client.get_paginator('list_resource_inventory')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LicenseManager.Client.list_resource_inventory`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListResourceInventory>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Filters=[
              {
                  'Name': 'string',
                  'Condition': 'EQUALS'|'NOT_EQUALS'|'BEGINS_WITH'|'CONTAINS',
                  'Value': 'string'
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters and logical operators are supported:

       

       
      * ``account_id`` - The ID of the AWS account that owns the resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``application_name`` - The name of the application. Logical operators are ``EQUALS`` | ``BEGINS_WITH`` . 
       
      * ``license_included`` - The type of license included. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . Possible values are ``sql-server-enterprise`` | ``sql-server-standard`` | ``sql-server-web`` | ``windows-server-datacenter`` . 
       
      * ``platform`` - The platform of the resource. Logical operators are ``EQUALS`` | ``BEGINS_WITH`` . 
       
      * ``resource_id`` - The ID of the resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``tag:<key>`` - The key/value combination of a tag assigned to the resource. Logical operators are ``EQUALS`` (single account) or ``EQUALS`` | ``NOT_EQUALS`` (cross account). 
       

      

    
      - *(dict) --* 

        An inventory filter.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          Name of the filter.

          

        
        - **Condition** *(string) --* **[REQUIRED]** 

          Condition of the filter.

          

        
        - **Value** *(string) --* 

          Value of the filter.

          

        
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ResourceInventoryList': [
                {
                    'ResourceId': 'string',
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ResourceArn': 'string',
                    'Platform': 'string',
                    'PlatformVersion': 'string',
                    'ResourceOwningAccountId': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ResourceInventoryList** *(list) --* 

          Information about the resources.

          
          

          - *(dict) --* 

            Details about a resource.

            
            

            - **ResourceId** *(string) --* 

              ID of the resource.

              
            

            - **ResourceType** *(string) --* 

              Type of resource.

              
            

            - **ResourceArn** *(string) --* 

              Amazon Resource Name (ARN) of the resource.

              
            

            - **Platform** *(string) --* 

              Platform of the resource.

              
            

            - **PlatformVersion** *(string) --* 

              Platform version of the resource in the inventory.

              
            

            - **ResourceOwningAccountId** *(string) --* 

              ID of the account that owns the resource.

              
        
      
    

.. py:class:: LicenseManager.Paginator.ListUsageForLicenseConfiguration

  ::

    
    paginator = client.get_paginator('list_usage_for_license_configuration')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`LicenseManager.Client.list_usage_for_license_configuration`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/license-manager-2018-08-01/ListUsageForLicenseConfiguration>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          LicenseConfigurationArn='string',
          Filters=[
              {
                  'Name': 'string',
                  'Values': [
                      'string',
                  ]
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type LicenseConfigurationArn: string
    :param LicenseConfigurationArn: **[REQUIRED]** 

      Amazon Resource Name (ARN) of the license configuration.

      

    
    :type Filters: list
    :param Filters: 

      Filters to scope the results. The following filters and logical operators are supported:

       

       
      * ``resourceArn`` - The ARN of the license configuration resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``resourceType`` - The resource type (``EC2_INSTANCE`` | ``EC2_HOST`` | ``EC2_AMI`` | ``SYSTEMS_MANAGER_MANAGED_INSTANCE`` ). Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       
      * ``resourceAccount`` - The ID of the account that owns the resource. Logical operators are ``EQUALS`` | ``NOT_EQUALS`` . 
       

      

    
      - *(dict) --* 

        A filter name and value pair that is used to return more specific results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.

        

      
        - **Name** *(string) --* 

          Name of the filter. Filter names are case-sensitive.

          

        
        - **Values** *(list) --* 

          Filter values. Filter values are case-sensitive.

          

        
          - *(string) --* 

          
      
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LicenseConfigurationUsageList': [
                {
                    'ResourceArn': 'string',
                    'ResourceType': 'EC2_INSTANCE'|'EC2_HOST'|'EC2_AMI'|'RDS'|'SYSTEMS_MANAGER_MANAGED_INSTANCE',
                    'ResourceStatus': 'string',
                    'ResourceOwnerId': 'string',
                    'AssociationTime': datetime(2015, 1, 1),
                    'ConsumedLicenses': 123
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LicenseConfigurationUsageList** *(list) --* 

          Information about the license configurations.

          
          

          - *(dict) --* 

            Details about the usage of a resource associated with a license configuration.

            
            

            - **ResourceArn** *(string) --* 

              Amazon Resource Name (ARN) of the resource.

              
            

            - **ResourceType** *(string) --* 

              Type of resource.

              
            

            - **ResourceStatus** *(string) --* 

              Status of the resource.

              
            

            - **ResourceOwnerId** *(string) --* 

              ID of the account that owns the resource.

              
            

            - **AssociationTime** *(datetime) --* 

              Time when the license configuration was initially associated with the resource.

              
            

            - **ConsumedLicenses** *(integer) --* 

              Number of licenses consumed by the resource.

              
        
      
    