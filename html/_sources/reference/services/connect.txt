

*******
Connect
*******

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: Connect.Client

  A low-level client representing Amazon Connect Service
  

  Amazon Connect is a cloud-based contact center solution that you use to set up and manage a customer contact center and provide reliable customer engagement at any scale.

   

  Amazon Connect provides metrics and real-time reporting that enable you to optimize contact routing. You can also resolve customer issues more efficiently by getting customers in touch with the appropriate agents.

   

  There are limits to the number of Amazon Connect resources that you can create. There are also limits to the number of requests that you can make per second. For more information, see `Amazon Connect Service Quotas <https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html>`__ in the *Amazon Connect Administrator Guide* .

   

  You can connect programmatically to an AWS service by using an endpoint. For a list of Amazon Connect endpoints, see `Amazon Connect Endpoints <https://docs.aws.amazon.com/general/latest/gr/connect_region.html>`__ .

   

  .. note::

     

    Working with contact flows? Check out the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

     

  ::

    
    import boto3
    
    client = boto3.client('connect')

  
  These are the available methods:
  
  *   :py:meth:`~Connect.Client.associate_approved_origin`

  
  *   :py:meth:`~Connect.Client.associate_bot`

  
  *   :py:meth:`~Connect.Client.associate_instance_storage_config`

  
  *   :py:meth:`~Connect.Client.associate_lambda_function`

  
  *   :py:meth:`~Connect.Client.associate_lex_bot`

  
  *   :py:meth:`~Connect.Client.associate_queue_quick_connects`

  
  *   :py:meth:`~Connect.Client.associate_routing_profile_queues`

  
  *   :py:meth:`~Connect.Client.associate_security_key`

  
  *   :py:meth:`~Connect.Client.can_paginate`

  
  *   :py:meth:`~Connect.Client.create_contact_flow`

  
  *   :py:meth:`~Connect.Client.create_instance`

  
  *   :py:meth:`~Connect.Client.create_integration_association`

  
  *   :py:meth:`~Connect.Client.create_queue`

  
  *   :py:meth:`~Connect.Client.create_quick_connect`

  
  *   :py:meth:`~Connect.Client.create_routing_profile`

  
  *   :py:meth:`~Connect.Client.create_use_case`

  
  *   :py:meth:`~Connect.Client.create_user`

  
  *   :py:meth:`~Connect.Client.create_user_hierarchy_group`

  
  *   :py:meth:`~Connect.Client.delete_instance`

  
  *   :py:meth:`~Connect.Client.delete_integration_association`

  
  *   :py:meth:`~Connect.Client.delete_quick_connect`

  
  *   :py:meth:`~Connect.Client.delete_use_case`

  
  *   :py:meth:`~Connect.Client.delete_user`

  
  *   :py:meth:`~Connect.Client.delete_user_hierarchy_group`

  
  *   :py:meth:`~Connect.Client.describe_contact_flow`

  
  *   :py:meth:`~Connect.Client.describe_hours_of_operation`

  
  *   :py:meth:`~Connect.Client.describe_instance`

  
  *   :py:meth:`~Connect.Client.describe_instance_attribute`

  
  *   :py:meth:`~Connect.Client.describe_instance_storage_config`

  
  *   :py:meth:`~Connect.Client.describe_queue`

  
  *   :py:meth:`~Connect.Client.describe_quick_connect`

  
  *   :py:meth:`~Connect.Client.describe_routing_profile`

  
  *   :py:meth:`~Connect.Client.describe_user`

  
  *   :py:meth:`~Connect.Client.describe_user_hierarchy_group`

  
  *   :py:meth:`~Connect.Client.describe_user_hierarchy_structure`

  
  *   :py:meth:`~Connect.Client.disassociate_approved_origin`

  
  *   :py:meth:`~Connect.Client.disassociate_bot`

  
  *   :py:meth:`~Connect.Client.disassociate_instance_storage_config`

  
  *   :py:meth:`~Connect.Client.disassociate_lambda_function`

  
  *   :py:meth:`~Connect.Client.disassociate_lex_bot`

  
  *   :py:meth:`~Connect.Client.disassociate_queue_quick_connects`

  
  *   :py:meth:`~Connect.Client.disassociate_routing_profile_queues`

  
  *   :py:meth:`~Connect.Client.disassociate_security_key`

  
  *   :py:meth:`~Connect.Client.generate_presigned_url`

  
  *   :py:meth:`~Connect.Client.get_contact_attributes`

  
  *   :py:meth:`~Connect.Client.get_current_metric_data`

  
  *   :py:meth:`~Connect.Client.get_federation_token`

  
  *   :py:meth:`~Connect.Client.get_metric_data`

  
  *   :py:meth:`~Connect.Client.get_paginator`

  
  *   :py:meth:`~Connect.Client.get_waiter`

  
  *   :py:meth:`~Connect.Client.list_approved_origins`

  
  *   :py:meth:`~Connect.Client.list_bots`

  
  *   :py:meth:`~Connect.Client.list_contact_flows`

  
  *   :py:meth:`~Connect.Client.list_hours_of_operations`

  
  *   :py:meth:`~Connect.Client.list_instance_attributes`

  
  *   :py:meth:`~Connect.Client.list_instance_storage_configs`

  
  *   :py:meth:`~Connect.Client.list_instances`

  
  *   :py:meth:`~Connect.Client.list_integration_associations`

  
  *   :py:meth:`~Connect.Client.list_lambda_functions`

  
  *   :py:meth:`~Connect.Client.list_lex_bots`

  
  *   :py:meth:`~Connect.Client.list_phone_numbers`

  
  *   :py:meth:`~Connect.Client.list_prompts`

  
  *   :py:meth:`~Connect.Client.list_queue_quick_connects`

  
  *   :py:meth:`~Connect.Client.list_queues`

  
  *   :py:meth:`~Connect.Client.list_quick_connects`

  
  *   :py:meth:`~Connect.Client.list_routing_profile_queues`

  
  *   :py:meth:`~Connect.Client.list_routing_profiles`

  
  *   :py:meth:`~Connect.Client.list_security_keys`

  
  *   :py:meth:`~Connect.Client.list_security_profiles`

  
  *   :py:meth:`~Connect.Client.list_tags_for_resource`

  
  *   :py:meth:`~Connect.Client.list_use_cases`

  
  *   :py:meth:`~Connect.Client.list_user_hierarchy_groups`

  
  *   :py:meth:`~Connect.Client.list_users`

  
  *   :py:meth:`~Connect.Client.resume_contact_recording`

  
  *   :py:meth:`~Connect.Client.start_chat_contact`

  
  *   :py:meth:`~Connect.Client.start_contact_recording`

  
  *   :py:meth:`~Connect.Client.start_outbound_voice_contact`

  
  *   :py:meth:`~Connect.Client.start_task_contact`

  
  *   :py:meth:`~Connect.Client.stop_contact`

  
  *   :py:meth:`~Connect.Client.stop_contact_recording`

  
  *   :py:meth:`~Connect.Client.suspend_contact_recording`

  
  *   :py:meth:`~Connect.Client.tag_resource`

  
  *   :py:meth:`~Connect.Client.untag_resource`

  
  *   :py:meth:`~Connect.Client.update_contact_attributes`

  
  *   :py:meth:`~Connect.Client.update_contact_flow_content`

  
  *   :py:meth:`~Connect.Client.update_contact_flow_name`

  
  *   :py:meth:`~Connect.Client.update_instance_attribute`

  
  *   :py:meth:`~Connect.Client.update_instance_storage_config`

  
  *   :py:meth:`~Connect.Client.update_queue_hours_of_operation`

  
  *   :py:meth:`~Connect.Client.update_queue_max_contacts`

  
  *   :py:meth:`~Connect.Client.update_queue_name`

  
  *   :py:meth:`~Connect.Client.update_queue_outbound_caller_config`

  
  *   :py:meth:`~Connect.Client.update_queue_status`

  
  *   :py:meth:`~Connect.Client.update_quick_connect_config`

  
  *   :py:meth:`~Connect.Client.update_quick_connect_name`

  
  *   :py:meth:`~Connect.Client.update_routing_profile_concurrency`

  
  *   :py:meth:`~Connect.Client.update_routing_profile_default_outbound_queue`

  
  *   :py:meth:`~Connect.Client.update_routing_profile_name`

  
  *   :py:meth:`~Connect.Client.update_routing_profile_queues`

  
  *   :py:meth:`~Connect.Client.update_user_hierarchy`

  
  *   :py:meth:`~Connect.Client.update_user_hierarchy_group_name`

  
  *   :py:meth:`~Connect.Client.update_user_hierarchy_structure`

  
  *   :py:meth:`~Connect.Client.update_user_identity_info`

  
  *   :py:meth:`~Connect.Client.update_user_phone_config`

  
  *   :py:meth:`~Connect.Client.update_user_routing_profile`

  
  *   :py:meth:`~Connect.Client.update_user_security_profiles`

  

  .. py:method:: associate_approved_origin(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Associates an approved origin to an Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateApprovedOrigin>`_    


    **Request Syntax** 
    ::

      response = client.associate_approved_origin(
          InstanceId='string',
          Origin='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Origin: string
    :param Origin: **[REQUIRED]** 

      The domain to add to your allow list.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceConflictException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_bot(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Allows the specified Amazon Connect instance to access the specified Amazon Lex or Amazon Lex V2 bot.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateBot>`_    


    **Request Syntax** 
    ::

      response = client.associate_bot(
          InstanceId='string',
          LexBot={
              'Name': 'string',
              'LexRegion': 'string'
          },
          LexV2Bot={
              'AliasArn': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type LexBot: dict
    :param LexBot: 

      Configuration information of an Amazon Lex bot.

      

    
      - **Name** *(string) --* 

        The name of the Amazon Lex bot.

        

      
      - **LexRegion** *(string) --* 

        The Region that the Amazon Lex bot was created in.

        

      
    
    :type LexV2Bot: dict
    :param LexV2Bot: 

      The Amazon Lex V2 bot to associate with the instance.

      

    
      - **AliasArn** *(string) --* 

        The Amazon Resource Name (ARN) of the Amazon Lex V2 bot.

        

      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceConflictException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_instance_storage_config(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Associates a storage resource type for the first time. You can only associate one type of storage configuration in a single call. This means, for example, that you can't define an instance with multiple S3 buckets for storing chat transcripts.

     

    This API does not create a resource that doesn't exist. It only associates it to the instance. Ensure that the resource being specified in the storage configuration, like an S3 bucket, exists when being used for association.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateInstanceStorageConfig>`_    


    **Request Syntax** 
    ::

      response = client.associate_instance_storage_config(
          InstanceId='string',
          ResourceType='CHAT_TRANSCRIPTS'|'CALL_RECORDINGS'|'SCHEDULED_REPORTS'|'MEDIA_STREAMS'|'CONTACT_TRACE_RECORDS'|'AGENT_EVENTS',
          StorageConfig={
              'AssociationId': 'string',
              'StorageType': 'S3'|'KINESIS_VIDEO_STREAM'|'KINESIS_STREAM'|'KINESIS_FIREHOSE',
              'S3Config': {
                  'BucketName': 'string',
                  'BucketPrefix': 'string',
                  'EncryptionConfig': {
                      'EncryptionType': 'KMS',
                      'KeyId': 'string'
                  }
              },
              'KinesisVideoStreamConfig': {
                  'Prefix': 'string',
                  'RetentionPeriodHours': 123,
                  'EncryptionConfig': {
                      'EncryptionType': 'KMS',
                      'KeyId': 'string'
                  }
              },
              'KinesisStreamConfig': {
                  'StreamArn': 'string'
              },
              'KinesisFirehoseConfig': {
                  'FirehoseArn': 'string'
              }
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      A valid resource type.

      

    
    :type StorageConfig: dict
    :param StorageConfig: **[REQUIRED]** 

      A valid storage type.

      

    
      - **AssociationId** *(string) --* 

        The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

        

      
      - **StorageType** *(string) --* **[REQUIRED]** 

        A valid storage type.

        

      
      - **S3Config** *(dict) --* 

        The S3 bucket configuration.

        

      
        - **BucketName** *(string) --* **[REQUIRED]** 

          The S3 bucket name.

          

        
        - **BucketPrefix** *(string) --* **[REQUIRED]** 

          The S3 bucket prefix.

          

        
        - **EncryptionConfig** *(dict) --* 

          The Amazon S3 encryption configuration.

          

        
          - **EncryptionType** *(string) --* **[REQUIRED]** 

            The type of encryption.

            

          
          - **KeyId** *(string) --* **[REQUIRED]** 

            The identifier of the encryption key.

            

          
        
      
      - **KinesisVideoStreamConfig** *(dict) --* 

        The configuration of the Kinesis video stream.

        

      
        - **Prefix** *(string) --* **[REQUIRED]** 

          The prefix of the video stream.

          

        
        - **RetentionPeriodHours** *(integer) --* **[REQUIRED]** 

          The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.

           

          The default value is 0, indicating that the stream does not persist data.

          

        
        - **EncryptionConfig** *(dict) --* **[REQUIRED]** 

          The encryption configuration.

          

        
          - **EncryptionType** *(string) --* **[REQUIRED]** 

            The type of encryption.

            

          
          - **KeyId** *(string) --* **[REQUIRED]** 

            The identifier of the encryption key.

            

          
        
      
      - **KinesisStreamConfig** *(dict) --* 

        The configuration of the Kinesis data stream.

        

      
        - **StreamArn** *(string) --* **[REQUIRED]** 

          The Amazon Resource Name (ARN) of the data stream.

          

        
      
      - **KinesisFirehoseConfig** *(dict) --* 

        The configuration of the Kinesis Firehose delivery stream.

        

      
        - **FirehoseArn** *(string) --* **[REQUIRED]** 

          The Amazon Resource Name (ARN) of the delivery stream.

          

        
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AssociationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AssociationId** *(string) --* 

          The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceConflictException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_lambda_function(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Allows the specified Amazon Connect instance to access the specified Lambda function.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateLambdaFunction>`_    


    **Request Syntax** 
    ::

      response = client.associate_lambda_function(
          InstanceId='string',
          FunctionArn='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type FunctionArn: string
    :param FunctionArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) for the Lambda function being associated. Maximum number of characters allowed is 140.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceConflictException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_lex_bot(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Allows the specified Amazon Connect instance to access the specified Amazon Lex bot.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateLexBot>`_    


    **Request Syntax** 
    ::

      response = client.associate_lex_bot(
          InstanceId='string',
          LexBot={
              'Name': 'string',
              'LexRegion': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type LexBot: dict
    :param LexBot: **[REQUIRED]** 

      The Amazon Lex bot to associate with the instance.

      

    
      - **Name** *(string) --* 

        The name of the Amazon Lex bot.

        

      
      - **LexRegion** *(string) --* 

        The Region that the Amazon Lex bot was created in.

        

      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceConflictException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: associate_queue_quick_connects(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Associates a set of quick connects with a queue.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateQueueQuickConnects>`_    


    **Request Syntax** 
    ::

      response = client.associate_queue_quick_connects(
          InstanceId='string',
          QueueId='string',
          QuickConnectIds=[
              'string',
          ]
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type QuickConnectIds: list
    :param QuickConnectIds: **[REQUIRED]** 

      The quick connects to associate with this queue.

      

    
      - *(string) --* 

      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: associate_routing_profile_queues(**kwargs)

    

    Associates a set of queues with a routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateRoutingProfileQueues>`_    


    **Request Syntax** 
    ::

      response = client.associate_routing_profile_queues(
          InstanceId='string',
          RoutingProfileId='string',
          QueueConfigs=[
              {
                  'QueueReference': {
                      'QueueId': 'string',
                      'Channel': 'VOICE'|'CHAT'|'TASK'
                  },
                  'Priority': 123,
                  'Delay': 123
              },
          ]
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type QueueConfigs: list
    :param QueueConfigs: **[REQUIRED]** 

      The queues to associate with this routing profile.

      

    
      - *(dict) --* 

        Contains information about the queue and channel for which priority and delay can be set.

        

      
        - **QueueReference** *(dict) --* **[REQUIRED]** 

          Contains information about a queue resource.

          

        
          - **QueueId** *(string) --* **[REQUIRED]** 

            The identifier for the queue.

            

          
          - **Channel** *(string) --* **[REQUIRED]** 

            The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.

            

          
        
        - **Priority** *(integer) --* **[REQUIRED]** 

          The order in which contacts are to be handled for the queue. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ .

          

        
        - **Delay** *(integer) --* **[REQUIRED]** 

          The delay, in seconds, a contact should be in the queue before they are routed to an available agent. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ in the *Amazon Connect Administrator Guide* .

          

        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: associate_security_key(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Associates a security key to the instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/AssociateSecurityKey>`_    


    **Request Syntax** 
    ::

      response = client.associate_security_key(
          InstanceId='string',
          Key='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Key: string
    :param Key: **[REQUIRED]** 

      A valid security key in PEM format.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'AssociationId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **AssociationId** *(string) --* 

          The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceConflictException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: create_contact_flow(**kwargs)

    

    Creates a contact flow for the specified Amazon Connect instance.

     

    You can also create and update contact flows using the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateContactFlow>`_    


    **Request Syntax** 
    ::

      response = client.create_contact_flow(
          InstanceId='string',
          Name='string',
          Type='CONTACT_FLOW'|'CUSTOMER_QUEUE'|'CUSTOMER_HOLD'|'CUSTOMER_WHISPER'|'AGENT_HOLD'|'AGENT_WHISPER'|'OUTBOUND_WHISPER'|'AGENT_TRANSFER'|'QUEUE_TRANSFER',
          Description='string',
          Content='string',
          Tags={
              'string': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance.

      

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the contact flow.

      

    
    :type Type: string
    :param Type: **[REQUIRED]** 

      The type of the contact flow. For descriptions of the available types, see `Choose a Contact Flow Type <https://docs.aws.amazon.com/connect/latest/adminguide/create-contact-flow.html#contact-flow-types>`__ in the *Amazon Connect Administrator Guide* .

      

    
    :type Description: string
    :param Description: 

      The description of the contact flow. 

      

    
    :type Content: string
    :param Content: **[REQUIRED]** 

      The content of the contact flow. 

      

    
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContactFlowId': 'string',
            'ContactFlowArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContactFlowId** *(string) --* 

          The identifier of the contact flow.

          
        

        - **ContactFlowArn** *(string) --* 

          The Amazon Resource Name (ARN) of the contact flow.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidContactFlowException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: create_instance(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Initiates an Amazon Connect instance with all the supported channels enabled. It does not attach any storage, such as Amazon Simple Storage Service (Amazon S3) or Amazon Kinesis. It also does not allow for any configurations on features, such as Contact Lens for Amazon Connect. 

     

    Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days. If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances. You must wait 30 days before you can restart creating and deleting instances in your account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateInstance>`_    


    **Request Syntax** 
    ::

      response = client.create_instance(
          ClientToken='string',
          IdentityManagementType='SAML'|'CONNECT_MANAGED'|'EXISTING_DIRECTORY',
          InstanceAlias='string',
          DirectoryId='string',
          InboundCallsEnabled=True|False,
          OutboundCallsEnabled=True|False
      )
    :type ClientToken: string
    :param ClientToken: 

      The idempotency token.

      

    
    :type IdentityManagementType: string
    :param IdentityManagementType: **[REQUIRED]** 

      The type of identity management for your Amazon Connect users.

      

    
    :type InstanceAlias: string
    :param InstanceAlias: 

      The name for your instance.

      

    
    :type DirectoryId: string
    :param DirectoryId: 

      The identifier for the directory.

      

    
    :type InboundCallsEnabled: boolean
    :param InboundCallsEnabled: **[REQUIRED]** 

      Your contact center handles incoming contacts.

      

    
    :type OutboundCallsEnabled: boolean
    :param OutboundCallsEnabled: **[REQUIRED]** 

      Your contact center allows outbound calls.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Id': 'string',
            'Arn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Id** *(string) --* 

          The identifier for the instance.

          
        

        - **Arn** *(string) --* 

          The Amazon Resource Name (ARN) of the instance.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: create_integration_association(**kwargs)

    

    Create an AppIntegration association with an Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateIntegrationAssociation>`_    


    **Request Syntax** 
    ::

      response = client.create_integration_association(
          InstanceId='string',
          IntegrationType='EVENT',
          IntegrationArn='string',
          SourceApplicationUrl='string',
          SourceApplicationName='string',
          SourceType='SALESFORCE'|'ZENDESK',
          Tags={
              'string': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type IntegrationType: string
    :param IntegrationType: **[REQUIRED]** 

      The type of information to be ingested.

      

    
    :type IntegrationArn: string
    :param IntegrationArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the integration.

      

    
    :type SourceApplicationUrl: string
    :param SourceApplicationUrl: **[REQUIRED]** 

      The URL for the external application.

      

    
    :type SourceApplicationName: string
    :param SourceApplicationName: **[REQUIRED]** 

      The name of the external application.

      

    
    :type SourceType: string
    :param SourceType: **[REQUIRED]** 

      The type of the data source.

      

    
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IntegrationAssociationId': 'string',
            'IntegrationAssociationArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IntegrationAssociationId** *(string) --* 

          The identifier for the association.

          
        

        - **IntegrationAssociationArn** *(string) --* 

          The Amazon Resource Name (ARN) for the association.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_queue(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Creates a new queue for the specified Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateQueue>`_    


    **Request Syntax** 
    ::

      response = client.create_queue(
          InstanceId='string',
          Name='string',
          Description='string',
          OutboundCallerConfig={
              'OutboundCallerIdName': 'string',
              'OutboundCallerIdNumberId': 'string',
              'OutboundFlowId': 'string'
          },
          HoursOfOperationId='string',
          MaxContacts=123,
          QuickConnectIds=[
              'string',
          ],
          Tags={
              'string': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the queue.

      

    
    :type Description: string
    :param Description: 

      The description of the queue.

      

    
    :type OutboundCallerConfig: dict
    :param OutboundCallerConfig: 

      The outbound caller ID name, number, and outbound whisper flow.

      

    
      - **OutboundCallerIdName** *(string) --* 

        The caller ID name.

        

      
      - **OutboundCallerIdNumberId** *(string) --* 

        The caller ID number.

        

      
      - **OutboundFlowId** *(string) --* 

        The outbound whisper flow to be used during an outbound call.

        

      
    
    :type HoursOfOperationId: string
    :param HoursOfOperationId: **[REQUIRED]** 

      The identifier for the hours of operation.

      

    
    :type MaxContacts: integer
    :param MaxContacts: 

      The maximum number of contacts that can be in the queue before it is considered full.

      

    
    :type QuickConnectIds: list
    :param QuickConnectIds: 

      The quick connects available to agents who are working the queue.

      

    
      - *(string) --* 

      
  
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QueueArn': 'string',
            'QueueId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QueueArn** *(string) --* 

          The Amazon Resource Name (ARN) of the queue.

          
        

        - **QueueId** *(string) --* 

          The identifier for the queue.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: create_quick_connect(**kwargs)

    

    Creates a quick connect for the specified Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateQuickConnect>`_    


    **Request Syntax** 
    ::

      response = client.create_quick_connect(
          InstanceId='string',
          Name='string',
          Description='string',
          QuickConnectConfig={
              'QuickConnectType': 'USER'|'QUEUE'|'PHONE_NUMBER',
              'UserConfig': {
                  'UserId': 'string',
                  'ContactFlowId': 'string'
              },
              'QueueConfig': {
                  'QueueId': 'string',
                  'ContactFlowId': 'string'
              },
              'PhoneConfig': {
                  'PhoneNumber': 'string'
              }
          },
          Tags={
              'string': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the quick connect.

      

    
    :type Description: string
    :param Description: 

      The description of the quick connect.

      

    
    :type QuickConnectConfig: dict
    :param QuickConnectConfig: **[REQUIRED]** 

      Configuration settings for the quick connect.

      

    
      - **QuickConnectType** *(string) --* **[REQUIRED]** 

        The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE). 

        

      
      - **UserConfig** *(dict) --* 

        The user configuration. This is required only if QuickConnectType is USER.

        

      
        - **UserId** *(string) --* **[REQUIRED]** 

          The identifier of the user.

          

        
        - **ContactFlowId** *(string) --* **[REQUIRED]** 

          The identifier of the contact flow.

          

        
      
      - **QueueConfig** *(dict) --* 

        The queue configuration. This is required only if QuickConnectType is QUEUE.

        

      
        - **QueueId** *(string) --* **[REQUIRED]** 

          The identifier for the queue.

          

        
        - **ContactFlowId** *(string) --* **[REQUIRED]** 

          The identifier of the contact flow.

          

        
      
      - **PhoneConfig** *(dict) --* 

        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.

        

      
        - **PhoneNumber** *(string) --* **[REQUIRED]** 

          The phone number in E.164 format.

          

        
      
    
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QuickConnectARN': 'string',
            'QuickConnectId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QuickConnectARN** *(string) --* 

          The Amazon Resource Name (ARN) for the quick connect. 

          
        

        - **QuickConnectId** *(string) --* 

          The identifier for the quick connect. 

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: create_routing_profile(**kwargs)

    

    Creates a new routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateRoutingProfile>`_    


    **Request Syntax** 
    ::

      response = client.create_routing_profile(
          InstanceId='string',
          Name='string',
          Description='string',
          DefaultOutboundQueueId='string',
          QueueConfigs=[
              {
                  'QueueReference': {
                      'QueueId': 'string',
                      'Channel': 'VOICE'|'CHAT'|'TASK'
                  },
                  'Priority': 123,
                  'Delay': 123
              },
          ],
          MediaConcurrencies=[
              {
                  'Channel': 'VOICE'|'CHAT'|'TASK',
                  'Concurrency': 123
              },
          ],
          Tags={
              'string': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the routing profile. Must not be more than 127 characters.

      

    
    :type Description: string
    :param Description: **[REQUIRED]** 

      Description of the routing profile. Must not be more than 250 characters.

      

    
    :type DefaultOutboundQueueId: string
    :param DefaultOutboundQueueId: **[REQUIRED]** 

      The default outbound queue for the routing profile.

      

    
    :type QueueConfigs: list
    :param QueueConfigs: 

      The inbound queues associated with the routing profile. If no queue is added, the agent can make only outbound calls.

      

    
      - *(dict) --* 

        Contains information about the queue and channel for which priority and delay can be set.

        

      
        - **QueueReference** *(dict) --* **[REQUIRED]** 

          Contains information about a queue resource.

          

        
          - **QueueId** *(string) --* **[REQUIRED]** 

            The identifier for the queue.

            

          
          - **Channel** *(string) --* **[REQUIRED]** 

            The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.

            

          
        
        - **Priority** *(integer) --* **[REQUIRED]** 

          The order in which contacts are to be handled for the queue. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ .

          

        
        - **Delay** *(integer) --* **[REQUIRED]** 

          The delay, in seconds, a contact should be in the queue before they are routed to an available agent. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ in the *Amazon Connect Administrator Guide* .

          

        
      
  
    :type MediaConcurrencies: list
    :param MediaConcurrencies: **[REQUIRED]** 

      The channels that agents can handle in the Contact Control Panel (CCP) for this routing profile.

      

    
      - *(dict) --* 

        Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.

        

      
        - **Channel** *(string) --* **[REQUIRED]** 

          The channels that agents can handle in the Contact Control Panel (CCP).

          

        
        - **Concurrency** *(integer) --* **[REQUIRED]** 

          The number of contacts an agent can have on a channel simultaneously.

           

          Valid Range for ``VOICE`` : Minimum value of 1. Maximum value of 1.

           

          Valid Range for ``CHAT`` : Minimum value of 1. Maximum value of 10.

           

          Valid Range for ``TASK`` : Minimum value of 1. Maximum value of 10.

          

        
      
  
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RoutingProfileArn': 'string',
            'RoutingProfileId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RoutingProfileArn** *(string) --* 

          The Amazon Resource Name (ARN) of the routing profile.

          
        

        - **RoutingProfileId** *(string) --* 

          The identifier of the routing profile.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: create_use_case(**kwargs)

    

    Creates a use case for an AppIntegration association.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateUseCase>`_    


    **Request Syntax** 
    ::

      response = client.create_use_case(
          InstanceId='string',
          IntegrationAssociationId='string',
          UseCaseType='RULES_EVALUATION',
          Tags={
              'string': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type IntegrationAssociationId: string
    :param IntegrationAssociationId: **[REQUIRED]** 

      The identifier for the AppIntegration association.

      

    
    :type UseCaseType: string
    :param UseCaseType: **[REQUIRED]** 

      The type of use case to associate to the AppIntegration association. Each AppIntegration association can have only one of each use case type.

      

    
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UseCaseId': 'string',
            'UseCaseArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UseCaseId** *(string) --* 

          The identifier of the use case.

          
        

        - **UseCaseArn** *(string) --* 

          The Amazon Resource Name (ARN) for the use case.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: create_user(**kwargs)

    

    Creates a user account for the specified Amazon Connect instance.

     

    For information about how to create user accounts using the Amazon Connect console, see `Add Users <https://docs.aws.amazon.com/connect/latest/adminguide/user-management.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateUser>`_    


    **Request Syntax** 
    ::

      response = client.create_user(
          Username='string',
          Password='string',
          IdentityInfo={
              'FirstName': 'string',
              'LastName': 'string',
              'Email': 'string'
          },
          PhoneConfig={
              'PhoneType': 'SOFT_PHONE'|'DESK_PHONE',
              'AutoAccept': True|False,
              'AfterContactWorkTimeLimit': 123,
              'DeskPhoneNumber': 'string'
          },
          DirectoryUserId='string',
          SecurityProfileIds=[
              'string',
          ],
          RoutingProfileId='string',
          HierarchyGroupId='string',
          InstanceId='string',
          Tags={
              'string': 'string'
          }
      )
    :type Username: string
    :param Username: **[REQUIRED]** 

      The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from [a-zA-Z0-9_-.\@]+.

      

    
    :type Password: string
    :param Password: 

      The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.

      

    
    :type IdentityInfo: dict
    :param IdentityInfo: 

      The information about the identity of the user.

      

    
      - **FirstName** *(string) --* 

        The first name. This is required if you are using Amazon Connect or SAML for identity management.

        

      
      - **LastName** *(string) --* 

        The last name. This is required if you are using Amazon Connect or SAML for identity management.

        

      
      - **Email** *(string) --* 

        The email address. If you are using SAML for identity management and include this parameter, an error is returned.

        

      
    
    :type PhoneConfig: dict
    :param PhoneConfig: **[REQUIRED]** 

      The phone settings for the user.

      

    
      - **PhoneType** *(string) --* **[REQUIRED]** 

        The phone type.

        

      
      - **AutoAccept** *(boolean) --* 

        The Auto accept setting.

        

      
      - **AfterContactWorkTimeLimit** *(integer) --* 

        The After Call Work (ACW) timeout setting, in seconds.

        

      
      - **DeskPhoneNumber** *(string) --* 

        The phone number for the user's desk phone.

        

      
    
    :type DirectoryUserId: string
    :param DirectoryUserId: 

      The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory.

       

      This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.

      

    
    :type SecurityProfileIds: list
    :param SecurityProfileIds: **[REQUIRED]** 

      The identifier of the security profile for the user.

      

    
      - *(string) --* 

      
  
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile for the user.

      

    
    :type HierarchyGroupId: string
    :param HierarchyGroupId: 

      The identifier of the hierarchy group for the user.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Tags: dict
    :param Tags: 

      One or more tags.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UserId': 'string',
            'UserArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UserId** *(string) --* 

          The identifier of the user account.

          
        

        - **UserArn** *(string) --* 

          The Amazon Resource Name (ARN) of the user account.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: create_user_hierarchy_group(**kwargs)

    

    Creates a new user hierarchy group.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/CreateUserHierarchyGroup>`_    


    **Request Syntax** 
    ::

      response = client.create_user_hierarchy_group(
          Name='string',
          ParentGroupId='string',
          InstanceId='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the user hierarchy group. Must not be more than 100 characters.

      

    
    :type ParentGroupId: string
    :param ParentGroupId: 

      The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HierarchyGroupId': 'string',
            'HierarchyGroupArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HierarchyGroupId** *(string) --* 

          The identifier of the hierarchy group.

          
        

        - **HierarchyGroupArn** *(string) --* 

          The Amazon Resource Name (ARN) of the hierarchy group. 

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: delete_instance(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Deletes the Amazon Connect instance.

     

    Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days. If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances. You must wait 30 days before you can restart creating and deleting instances in your account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DeleteInstance>`_    


    **Request Syntax** 
    ::

      response = client.delete_instance(
          InstanceId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    

  .. py:method:: delete_integration_association(**kwargs)

    

    Deletes an AppIntegration association from an Amazon Connect instance. The association must not have any use cases associated with it.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DeleteIntegrationAssociation>`_    


    **Request Syntax** 
    ::

      response = client.delete_integration_association(
          InstanceId='string',
          IntegrationAssociationId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type IntegrationAssociationId: string
    :param IntegrationAssociationId: **[REQUIRED]** 

      The identifier for the AppIntegration association.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_quick_connect(**kwargs)

    

    Deletes a quick connect.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DeleteQuickConnect>`_    


    **Request Syntax** 
    ::

      response = client.delete_quick_connect(
          InstanceId='string',
          QuickConnectId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QuickConnectId: string
    :param QuickConnectId: **[REQUIRED]** 

      The identifier for the quick connect.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: delete_use_case(**kwargs)

    

    Deletes a use case from an AppIntegration association.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DeleteUseCase>`_    


    **Request Syntax** 
    ::

      response = client.delete_use_case(
          InstanceId='string',
          IntegrationAssociationId='string',
          UseCaseId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type IntegrationAssociationId: string
    :param IntegrationAssociationId: **[REQUIRED]** 

      The identifier for the AppIntegration association.

      

    
    :type UseCaseId: string
    :param UseCaseId: **[REQUIRED]** 

      The identifier for the use case.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: delete_user(**kwargs)

    

    Deletes a user account from the specified Amazon Connect instance.

     

    For information about what happens to a user's data when their account is deleted, see `Delete Users from Your Amazon Connect Instance <https://docs.aws.amazon.com/connect/latest/adminguide/delete-users.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DeleteUser>`_    


    **Request Syntax** 
    ::

      response = client.delete_user(
          InstanceId='string',
          UserId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type UserId: string
    :param UserId: **[REQUIRED]** 

      The identifier of the user.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: delete_user_hierarchy_group(**kwargs)

    

    Deletes an existing user hierarchy group. It must not be associated with any agents or have any active child groups.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DeleteUserHierarchyGroup>`_    


    **Request Syntax** 
    ::

      response = client.delete_user_hierarchy_group(
          HierarchyGroupId='string',
          InstanceId='string'
      )
    :type HierarchyGroupId: string
    :param HierarchyGroupId: **[REQUIRED]** 

      The identifier of the hierarchy group.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_contact_flow(**kwargs)

    

    Describes the specified contact flow.

     

    You can also create and update contact flows using the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeContactFlow>`_    


    **Request Syntax** 
    ::

      response = client.describe_contact_flow(
          InstanceId='string',
          ContactFlowId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance.

      

    
    :type ContactFlowId: string
    :param ContactFlowId: **[REQUIRED]** 

      The identifier of the contact flow.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContactFlow': {
                'Arn': 'string',
                'Id': 'string',
                'Name': 'string',
                'Type': 'CONTACT_FLOW'|'CUSTOMER_QUEUE'|'CUSTOMER_HOLD'|'CUSTOMER_WHISPER'|'AGENT_HOLD'|'AGENT_WHISPER'|'OUTBOUND_WHISPER'|'AGENT_TRANSFER'|'QUEUE_TRANSFER',
                'Description': 'string',
                'Content': 'string',
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContactFlow** *(dict) --* 

          Information about the contact flow.

          
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the contact flow.

            
          

          - **Id** *(string) --* 

            The identifier of the contact flow.

            
          

          - **Name** *(string) --* 

            The name of the contact flow.

            
          

          - **Type** *(string) --* 

            The type of the contact flow. For descriptions of the available types, see `Choose a Contact Flow Type <https://docs.aws.amazon.com/connect/latest/adminguide/create-contact-flow.html#contact-flow-types>`__ in the *Amazon Connect Administrator Guide* .

            
          

          - **Description** *(string) --* 

            The description of the contact flow.

            
          

          - **Content** *(string) --* 

            The content of the contact flow.

            
          

          - **Tags** *(dict) --* 

            One or more tags.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ContactFlowNotPublishedException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_hours_of_operation(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Describes the hours of operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeHoursOfOperation>`_    


    **Request Syntax** 
    ::

      response = client.describe_hours_of_operation(
          InstanceId='string',
          HoursOfOperationId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type HoursOfOperationId: string
    :param HoursOfOperationId: **[REQUIRED]** 

      The identifier for the hours of operation.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HoursOfOperation': {
                'HoursOfOperationId': 'string',
                'HoursOfOperationArn': 'string',
                'Name': 'string',
                'Description': 'string',
                'TimeZone': 'string',
                'Config': [
                    {
                        'Day': 'SUNDAY'|'MONDAY'|'TUESDAY'|'WEDNESDAY'|'THURSDAY'|'FRIDAY'|'SATURDAY',
                        'StartTime': {
                            'Hours': 123,
                            'Minutes': 123
                        },
                        'EndTime': {
                            'Hours': 123,
                            'Minutes': 123
                        }
                    },
                ],
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HoursOfOperation** *(dict) --* 

          The hours of operation.

          
          

          - **HoursOfOperationId** *(string) --* 

            The identifier for the hours of operation.

            
          

          - **HoursOfOperationArn** *(string) --* 

            The Amazon Resource Name (ARN) for the hours of operation.

            
          

          - **Name** *(string) --* 

            The name for the hours of operation.

            
          

          - **Description** *(string) --* 

            The description for the hours of operation.

            
          

          - **TimeZone** *(string) --* 

            The time zone for the hours of operation.

            
          

          - **Config** *(list) --* 

            Configuration information for the hours of operation.

            
            

            - *(dict) --* 

              Contains information about the hours of operation.

              
              

              - **Day** *(string) --* 

                The day that the hours of operation applies to.

                
              

              - **StartTime** *(dict) --* 

                The start time that your contact center is open.

                
                

                - **Hours** *(integer) --* 

                  The hours.

                  
                

                - **Minutes** *(integer) --* 

                  The minutes.

                  
            
              

              - **EndTime** *(dict) --* 

                The end time that your contact center is closes.

                
                

                - **Hours** *(integer) --* 

                  The hours.

                  
                

                - **Minutes** *(integer) --* 

                  The minutes.

                  
            
          
        
          

          - **Tags** *(dict) --* 

            One or more tags.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_instance(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Returns the current state of the specified instance identifier. It tracks the instance while it is being created and returns an error status, if applicable. 

     

    If an instance is not created successfully, the instance status reason field returns details relevant to the reason. The instance in a failed state is returned only for 24 hours after the CreateInstance API was invoked.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeInstance>`_    


    **Request Syntax** 
    ::

      response = client.describe_instance(
          InstanceId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Instance': {
                'Id': 'string',
                'Arn': 'string',
                'IdentityManagementType': 'SAML'|'CONNECT_MANAGED'|'EXISTING_DIRECTORY',
                'InstanceAlias': 'string',
                'CreatedTime': datetime(2015, 1, 1),
                'ServiceRole': 'string',
                'InstanceStatus': 'CREATION_IN_PROGRESS'|'ACTIVE'|'CREATION_FAILED',
                'StatusReason': {
                    'Message': 'string'
                },
                'InboundCallsEnabled': True|False,
                'OutboundCallsEnabled': True|False
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Instance** *(dict) --* 

          The name of the instance.

          
          

          - **Id** *(string) --* 

            The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the instance.

            
          

          - **IdentityManagementType** *(string) --* 

            The identity management type.

            
          

          - **InstanceAlias** *(string) --* 

            The alias of instance.

            
          

          - **CreatedTime** *(datetime) --* 

            When the instance was created.

            
          

          - **ServiceRole** *(string) --* 

            The service role of the instance.

            
          

          - **InstanceStatus** *(string) --* 

            The state of the instance.

            
          

          - **StatusReason** *(dict) --* 

            Relevant details why the instance was not successfully created. 

            
            

            - **Message** *(string) --* 

              The message.

              
        
          

          - **InboundCallsEnabled** *(boolean) --* 

            Whether inbound calls are enabled.

            
          

          - **OutboundCallsEnabled** *(boolean) --* 

            Whether outbound calls are enabled.

            
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_instance_attribute(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Describes the specified instance attribute.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeInstanceAttribute>`_    


    **Request Syntax** 
    ::

      response = client.describe_instance_attribute(
          InstanceId='string',
          AttributeType='INBOUND_CALLS'|'OUTBOUND_CALLS'|'CONTACTFLOW_LOGS'|'CONTACT_LENS'|'AUTO_RESOLVE_BEST_VOICES'|'USE_CUSTOM_TTS_VOICES'|'EARLY_MEDIA'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type AttributeType: string
    :param AttributeType: **[REQUIRED]** 

      The type of attribute.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Attribute': {
                'AttributeType': 'INBOUND_CALLS'|'OUTBOUND_CALLS'|'CONTACTFLOW_LOGS'|'CONTACT_LENS'|'AUTO_RESOLVE_BEST_VOICES'|'USE_CUSTOM_TTS_VOICES'|'EARLY_MEDIA',
                'Value': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Attribute** *(dict) --* 

          The type of attribute.

          
          

          - **AttributeType** *(string) --* 

            The type of attribute.

            
          

          - **Value** *(string) --* 

            The value of the attribute.

            
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_instance_storage_config(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Retrieves the current storage configurations for the specified resource type, association ID, and instance ID.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeInstanceStorageConfig>`_    


    **Request Syntax** 
    ::

      response = client.describe_instance_storage_config(
          InstanceId='string',
          AssociationId='string',
          ResourceType='CHAT_TRANSCRIPTS'|'CALL_RECORDINGS'|'SCHEDULED_REPORTS'|'MEDIA_STREAMS'|'CONTACT_TRACE_RECORDS'|'AGENT_EVENTS'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type AssociationId: string
    :param AssociationId: **[REQUIRED]** 

      The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      A valid resource type.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'StorageConfig': {
                'AssociationId': 'string',
                'StorageType': 'S3'|'KINESIS_VIDEO_STREAM'|'KINESIS_STREAM'|'KINESIS_FIREHOSE',
                'S3Config': {
                    'BucketName': 'string',
                    'BucketPrefix': 'string',
                    'EncryptionConfig': {
                        'EncryptionType': 'KMS',
                        'KeyId': 'string'
                    }
                },
                'KinesisVideoStreamConfig': {
                    'Prefix': 'string',
                    'RetentionPeriodHours': 123,
                    'EncryptionConfig': {
                        'EncryptionType': 'KMS',
                        'KeyId': 'string'
                    }
                },
                'KinesisStreamConfig': {
                    'StreamArn': 'string'
                },
                'KinesisFirehoseConfig': {
                    'FirehoseArn': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **StorageConfig** *(dict) --* 

          A valid storage type.

          
          

          - **AssociationId** *(string) --* 

            The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

            
          

          - **StorageType** *(string) --* 

            A valid storage type.

            
          

          - **S3Config** *(dict) --* 

            The S3 bucket configuration.

            
            

            - **BucketName** *(string) --* 

              The S3 bucket name.

              
            

            - **BucketPrefix** *(string) --* 

              The S3 bucket prefix.

              
            

            - **EncryptionConfig** *(dict) --* 

              The Amazon S3 encryption configuration.

              
              

              - **EncryptionType** *(string) --* 

                The type of encryption.

                
              

              - **KeyId** *(string) --* 

                The identifier of the encryption key.

                
          
        
          

          - **KinesisVideoStreamConfig** *(dict) --* 

            The configuration of the Kinesis video stream.

            
            

            - **Prefix** *(string) --* 

              The prefix of the video stream.

              
            

            - **RetentionPeriodHours** *(integer) --* 

              The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.

               

              The default value is 0, indicating that the stream does not persist data.

              
            

            - **EncryptionConfig** *(dict) --* 

              The encryption configuration.

              
              

              - **EncryptionType** *(string) --* 

                The type of encryption.

                
              

              - **KeyId** *(string) --* 

                The identifier of the encryption key.

                
          
        
          

          - **KinesisStreamConfig** *(dict) --* 

            The configuration of the Kinesis data stream.

            
            

            - **StreamArn** *(string) --* 

              The Amazon Resource Name (ARN) of the data stream.

              
        
          

          - **KinesisFirehoseConfig** *(dict) --* 

            The configuration of the Kinesis Firehose delivery stream.

            
            

            - **FirehoseArn** *(string) --* 

              The Amazon Resource Name (ARN) of the delivery stream.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: describe_queue(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Describes the specified queue.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeQueue>`_    


    **Request Syntax** 
    ::

      response = client.describe_queue(
          InstanceId='string',
          QueueId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Queue': {
                'Name': 'string',
                'QueueArn': 'string',
                'QueueId': 'string',
                'Description': 'string',
                'OutboundCallerConfig': {
                    'OutboundCallerIdName': 'string',
                    'OutboundCallerIdNumberId': 'string',
                    'OutboundFlowId': 'string'
                },
                'HoursOfOperationId': 'string',
                'MaxContacts': 123,
                'Status': 'ENABLED'|'DISABLED',
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Queue** *(dict) --* 

          The name of the queue.

          
          

          - **Name** *(string) --* 

            The name of the queue.

            
          

          - **QueueArn** *(string) --* 

            The Amazon Resource Name (ARN) for the queue.

            
          

          - **QueueId** *(string) --* 

            The identifier for the queue.

            
          

          - **Description** *(string) --* 

            The description of the queue.

            
          

          - **OutboundCallerConfig** *(dict) --* 

            The outbound caller ID name, number, and outbound whisper flow.

            
            

            - **OutboundCallerIdName** *(string) --* 

              The caller ID name.

              
            

            - **OutboundCallerIdNumberId** *(string) --* 

              The caller ID number.

              
            

            - **OutboundFlowId** *(string) --* 

              The outbound whisper flow to be used during an outbound call.

              
        
          

          - **HoursOfOperationId** *(string) --* 

            The identifier for the hours of operation.

            
          

          - **MaxContacts** *(integer) --* 

            The maximum number of contacts that can be in the queue before it is considered full.

            
          

          - **Status** *(string) --* 

            The status of the queue.

            
          

          - **Tags** *(dict) --* 

            One or more tags.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_quick_connect(**kwargs)

    

    Describes the quick connect.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeQuickConnect>`_    


    **Request Syntax** 
    ::

      response = client.describe_quick_connect(
          InstanceId='string',
          QuickConnectId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QuickConnectId: string
    :param QuickConnectId: **[REQUIRED]** 

      The identifier for the quick connect.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QuickConnect': {
                'QuickConnectARN': 'string',
                'QuickConnectId': 'string',
                'Name': 'string',
                'Description': 'string',
                'QuickConnectConfig': {
                    'QuickConnectType': 'USER'|'QUEUE'|'PHONE_NUMBER',
                    'UserConfig': {
                        'UserId': 'string',
                        'ContactFlowId': 'string'
                    },
                    'QueueConfig': {
                        'QueueId': 'string',
                        'ContactFlowId': 'string'
                    },
                    'PhoneConfig': {
                        'PhoneNumber': 'string'
                    }
                },
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QuickConnect** *(dict) --* 

          Information about the quick connect.

          
          

          - **QuickConnectARN** *(string) --* 

            The Amazon Resource Name (ARN) of the quick connect.

            
          

          - **QuickConnectId** *(string) --* 

            The identifier for the quick connect.

            
          

          - **Name** *(string) --* 

            The name of the quick connect.

            
          

          - **Description** *(string) --* 

            The description.

            
          

          - **QuickConnectConfig** *(dict) --* 

            Contains information about the quick connect.

            
            

            - **QuickConnectType** *(string) --* 

              The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE). 

              
            

            - **UserConfig** *(dict) --* 

              The user configuration. This is required only if QuickConnectType is USER.

              
              

              - **UserId** *(string) --* 

                The identifier of the user.

                
              

              - **ContactFlowId** *(string) --* 

                The identifier of the contact flow.

                
          
            

            - **QueueConfig** *(dict) --* 

              The queue configuration. This is required only if QuickConnectType is QUEUE.

              
              

              - **QueueId** *(string) --* 

                The identifier for the queue.

                
              

              - **ContactFlowId** *(string) --* 

                The identifier of the contact flow.

                
          
            

            - **PhoneConfig** *(dict) --* 

              The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.

              
              

              - **PhoneNumber** *(string) --* 

                The phone number in E.164 format.

                
          
        
          

          - **Tags** *(dict) --* 

            One or more tags.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_routing_profile(**kwargs)

    

    Describes the specified routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeRoutingProfile>`_    


    **Request Syntax** 
    ::

      response = client.describe_routing_profile(
          InstanceId='string',
          RoutingProfileId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RoutingProfile': {
                'InstanceId': 'string',
                'Name': 'string',
                'RoutingProfileArn': 'string',
                'RoutingProfileId': 'string',
                'Description': 'string',
                'MediaConcurrencies': [
                    {
                        'Channel': 'VOICE'|'CHAT'|'TASK',
                        'Concurrency': 123
                    },
                ],
                'DefaultOutboundQueueId': 'string',
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RoutingProfile** *(dict) --* 

          The routing profile.

          
          

          - **InstanceId** *(string) --* 

            The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

            
          

          - **Name** *(string) --* 

            The name of the routing profile.

            
          

          - **RoutingProfileArn** *(string) --* 

            The Amazon Resource Name (ARN) of the routing profile.

            
          

          - **RoutingProfileId** *(string) --* 

            The identifier of the routing profile.

            
          

          - **Description** *(string) --* 

            The description of the routing profile.

            
          

          - **MediaConcurrencies** *(list) --* 

            The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.

            
            

            - *(dict) --* 

              Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.

              
              

              - **Channel** *(string) --* 

                The channels that agents can handle in the Contact Control Panel (CCP).

                
              

              - **Concurrency** *(integer) --* 

                The number of contacts an agent can have on a channel simultaneously.

                 

                Valid Range for ``VOICE`` : Minimum value of 1. Maximum value of 1.

                 

                Valid Range for ``CHAT`` : Minimum value of 1. Maximum value of 10.

                 

                Valid Range for ``TASK`` : Minimum value of 1. Maximum value of 10.

                
          
        
          

          - **DefaultOutboundQueueId** *(string) --* 

            The identifier of the default outbound queue for this routing profile.

            
          

          - **Tags** *(dict) --* 

            One or more tags.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_user(**kwargs)

    

    Describes the specified user account. You can find the instance ID in the console (it’s the final part of the ARN). The console does not display the user IDs. Instead, list the users and note the IDs provided in the output.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeUser>`_    


    **Request Syntax** 
    ::

      response = client.describe_user(
          UserId='string',
          InstanceId='string'
      )
    :type UserId: string
    :param UserId: **[REQUIRED]** 

      The identifier of the user account.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'User': {
                'Id': 'string',
                'Arn': 'string',
                'Username': 'string',
                'IdentityInfo': {
                    'FirstName': 'string',
                    'LastName': 'string',
                    'Email': 'string'
                },
                'PhoneConfig': {
                    'PhoneType': 'SOFT_PHONE'|'DESK_PHONE',
                    'AutoAccept': True|False,
                    'AfterContactWorkTimeLimit': 123,
                    'DeskPhoneNumber': 'string'
                },
                'DirectoryUserId': 'string',
                'SecurityProfileIds': [
                    'string',
                ],
                'RoutingProfileId': 'string',
                'HierarchyGroupId': 'string',
                'Tags': {
                    'string': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **User** *(dict) --* 

          Information about the user account and configuration settings.

          
          

          - **Id** *(string) --* 

            The identifier of the user account.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the user account.

            
          

          - **Username** *(string) --* 

            The user name assigned to the user account.

            
          

          - **IdentityInfo** *(dict) --* 

            Information about the user identity.

            
            

            - **FirstName** *(string) --* 

              The first name. This is required if you are using Amazon Connect or SAML for identity management.

              
            

            - **LastName** *(string) --* 

              The last name. This is required if you are using Amazon Connect or SAML for identity management.

              
            

            - **Email** *(string) --* 

              The email address. If you are using SAML for identity management and include this parameter, an error is returned.

              
        
          

          - **PhoneConfig** *(dict) --* 

            Information about the phone configuration for the user.

            
            

            - **PhoneType** *(string) --* 

              The phone type.

              
            

            - **AutoAccept** *(boolean) --* 

              The Auto accept setting.

              
            

            - **AfterContactWorkTimeLimit** *(integer) --* 

              The After Call Work (ACW) timeout setting, in seconds.

              
            

            - **DeskPhoneNumber** *(string) --* 

              The phone number for the user's desk phone.

              
        
          

          - **DirectoryUserId** *(string) --* 

            The identifier of the user account in the directory used for identity management.

            
          

          - **SecurityProfileIds** *(list) --* 

            The identifiers of the security profiles for the user.

            
            

            - *(string) --* 
        
          

          - **RoutingProfileId** *(string) --* 

            The identifier of the routing profile for the user.

            
          

          - **HierarchyGroupId** *(string) --* 

            The identifier of the hierarchy group for the user.

            
          

          - **Tags** *(dict) --* 

            The tags.

            
            

            - *(string) --* 
              

              - *(string) --* 
        
      
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_user_hierarchy_group(**kwargs)

    

    Describes the specified hierarchy group.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeUserHierarchyGroup>`_    


    **Request Syntax** 
    ::

      response = client.describe_user_hierarchy_group(
          HierarchyGroupId='string',
          InstanceId='string'
      )
    :type HierarchyGroupId: string
    :param HierarchyGroupId: **[REQUIRED]** 

      The identifier of the hierarchy group.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HierarchyGroup': {
                'Id': 'string',
                'Arn': 'string',
                'Name': 'string',
                'LevelId': 'string',
                'HierarchyPath': {
                    'LevelOne': {
                        'Id': 'string',
                        'Arn': 'string',
                        'Name': 'string'
                    },
                    'LevelTwo': {
                        'Id': 'string',
                        'Arn': 'string',
                        'Name': 'string'
                    },
                    'LevelThree': {
                        'Id': 'string',
                        'Arn': 'string',
                        'Name': 'string'
                    },
                    'LevelFour': {
                        'Id': 'string',
                        'Arn': 'string',
                        'Name': 'string'
                    },
                    'LevelFive': {
                        'Id': 'string',
                        'Arn': 'string',
                        'Name': 'string'
                    }
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HierarchyGroup** *(dict) --* 

          Information about the hierarchy group.

          
          

          - **Id** *(string) --* 

            The identifier of the hierarchy group.

            
          

          - **Arn** *(string) --* 

            The Amazon Resource Name (ARN) of the hierarchy group.

            
          

          - **Name** *(string) --* 

            The name of the hierarchy group.

            
          

          - **LevelId** *(string) --* 

            The identifier of the level in the hierarchy group.

            
          

          - **HierarchyPath** *(dict) --* 

            Information about the levels in the hierarchy group.

            
            

            - **LevelOne** *(dict) --* 

              Information about level one.

              
              

              - **Id** *(string) --* 

                The identifier of the hierarchy group.

                
              

              - **Arn** *(string) --* 

                The Amazon Resource Name (ARN) of the hierarchy group.

                
              

              - **Name** *(string) --* 

                The name of the hierarchy group.

                
          
            

            - **LevelTwo** *(dict) --* 

              Information about level two.

              
              

              - **Id** *(string) --* 

                The identifier of the hierarchy group.

                
              

              - **Arn** *(string) --* 

                The Amazon Resource Name (ARN) of the hierarchy group.

                
              

              - **Name** *(string) --* 

                The name of the hierarchy group.

                
          
            

            - **LevelThree** *(dict) --* 

              Information about level three.

              
              

              - **Id** *(string) --* 

                The identifier of the hierarchy group.

                
              

              - **Arn** *(string) --* 

                The Amazon Resource Name (ARN) of the hierarchy group.

                
              

              - **Name** *(string) --* 

                The name of the hierarchy group.

                
          
            

            - **LevelFour** *(dict) --* 

              Information about level four.

              
              

              - **Id** *(string) --* 

                The identifier of the hierarchy group.

                
              

              - **Arn** *(string) --* 

                The Amazon Resource Name (ARN) of the hierarchy group.

                
              

              - **Name** *(string) --* 

                The name of the hierarchy group.

                
          
            

            - **LevelFive** *(dict) --* 

              Information about level five.

              
              

              - **Id** *(string) --* 

                The identifier of the hierarchy group.

                
              

              - **Arn** *(string) --* 

                The Amazon Resource Name (ARN) of the hierarchy group.

                
              

              - **Name** *(string) --* 

                The name of the hierarchy group.

                
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: describe_user_hierarchy_structure(**kwargs)

    

    Describes the hierarchy structure of the specified Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DescribeUserHierarchyStructure>`_    


    **Request Syntax** 
    ::

      response = client.describe_user_hierarchy_structure(
          InstanceId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HierarchyStructure': {
                'LevelOne': {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
                'LevelTwo': {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
                'LevelThree': {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
                'LevelFour': {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
                'LevelFive': {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                }
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HierarchyStructure** *(dict) --* 

          Information about the hierarchy structure.

          
          

          - **LevelOne** *(dict) --* 

            Information about level one.

            
            

            - **Id** *(string) --* 

              The identifier of the hierarchy level.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hierarchy level.

              
            

            - **Name** *(string) --* 

              The name of the hierarchy level.

              
        
          

          - **LevelTwo** *(dict) --* 

            Information about level two.

            
            

            - **Id** *(string) --* 

              The identifier of the hierarchy level.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hierarchy level.

              
            

            - **Name** *(string) --* 

              The name of the hierarchy level.

              
        
          

          - **LevelThree** *(dict) --* 

            Information about level three.

            
            

            - **Id** *(string) --* 

              The identifier of the hierarchy level.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hierarchy level.

              
            

            - **Name** *(string) --* 

              The name of the hierarchy level.

              
        
          

          - **LevelFour** *(dict) --* 

            Information about level four.

            
            

            - **Id** *(string) --* 

              The identifier of the hierarchy level.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hierarchy level.

              
            

            - **Name** *(string) --* 

              The name of the hierarchy level.

              
        
          

          - **LevelFive** *(dict) --* 

            Information about level five.

            
            

            - **Id** *(string) --* 

              The identifier of the hierarchy level.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hierarchy level.

              
            

            - **Name** *(string) --* 

              The name of the hierarchy level.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: disassociate_approved_origin(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Revokes access to integrated applications from Amazon Connect.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateApprovedOrigin>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_approved_origin(
          InstanceId='string',
          Origin='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Origin: string
    :param Origin: **[REQUIRED]** 

      The domain URL of the integrated application.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_bot(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Revokes authorization from the specified instance to access the specified Amazon Lex or Amazon Lex V2 bot. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateBot>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_bot(
          InstanceId='string',
          LexBot={
              'Name': 'string',
              'LexRegion': 'string'
          },
          LexV2Bot={
              'AliasArn': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type LexBot: dict
    :param LexBot: 

      Configuration information of an Amazon Lex bot.

      

    
      - **Name** *(string) --* 

        The name of the Amazon Lex bot.

        

      
      - **LexRegion** *(string) --* 

        The Region that the Amazon Lex bot was created in.

        

      
    
    :type LexV2Bot: dict
    :param LexV2Bot: 

      The Amazon Lex V2 bot to disassociate from the instance.

      

    
      - **AliasArn** *(string) --* 

        The Amazon Resource Name (ARN) of the Amazon Lex V2 bot.

        

      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_instance_storage_config(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Removes the storage type configurations for the specified resource type and association ID.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateInstanceStorageConfig>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_instance_storage_config(
          InstanceId='string',
          AssociationId='string',
          ResourceType='CHAT_TRANSCRIPTS'|'CALL_RECORDINGS'|'SCHEDULED_REPORTS'|'MEDIA_STREAMS'|'CONTACT_TRACE_RECORDS'|'AGENT_EVENTS'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type AssociationId: string
    :param AssociationId: **[REQUIRED]** 

      The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      A valid resource type.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_lambda_function(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Remove the Lambda function from the dropdown options available in the relevant contact flow blocks.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateLambdaFunction>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_lambda_function(
          InstanceId='string',
          FunctionArn='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance..

      

    
    :type FunctionArn: string
    :param FunctionArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the Lambda function being disassociated.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_lex_bot(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Revokes authorization from the specified instance to access the specified Amazon Lex bot.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateLexBot>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_lex_bot(
          InstanceId='string',
          BotName='string',
          LexRegion='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type BotName: string
    :param BotName: **[REQUIRED]** 

      The name of the Amazon Lex bot. Maximum character limit of 50.

      

    
    :type LexRegion: string
    :param LexRegion: **[REQUIRED]** 

      The Region in which the Amazon Lex bot has been created.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: disassociate_queue_quick_connects(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Disassociates a set of quick connects from a queue.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateQueueQuickConnects>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_queue_quick_connects(
          InstanceId='string',
          QueueId='string',
          QuickConnectIds=[
              'string',
          ]
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type QuickConnectIds: list
    :param QuickConnectIds: **[REQUIRED]** 

      The quick connects to disassociate from the queue.

      

    
      - *(string) --* 

      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: disassociate_routing_profile_queues(**kwargs)

    

    Disassociates a set of queues from a routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateRoutingProfileQueues>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_routing_profile_queues(
          InstanceId='string',
          RoutingProfileId='string',
          QueueReferences=[
              {
                  'QueueId': 'string',
                  'Channel': 'VOICE'|'CHAT'|'TASK'
              },
          ]
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type QueueReferences: list
    :param QueueReferences: **[REQUIRED]** 

      The queues to disassociate from this routing profile.

      

    
      - *(dict) --* 

        Contains the channel and queue identifier for a routing profile.

        

      
        - **QueueId** *(string) --* **[REQUIRED]** 

          The identifier for the queue.

          

        
        - **Channel** *(string) --* **[REQUIRED]** 

          The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.

          

        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: disassociate_security_key(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Deletes the specified security key.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/DisassociateSecurityKey>`_    


    **Request Syntax** 
    ::

      response = client.disassociate_security_key(
          InstanceId='string',
          AssociationId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type AssociationId: string
    :param AssociationId: **[REQUIRED]** 

      The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_contact_attributes(**kwargs)

    

    Retrieves the contact attributes for the specified contact.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/GetContactAttributes>`_    


    **Request Syntax** 
    ::

      response = client.get_contact_attributes(
          InstanceId='string',
          InitialContactId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance.

      

    
    :type InitialContactId: string
    :param InitialContactId: **[REQUIRED]** 

      The identifier of the initial contact.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Attributes': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Attributes** *(dict) --* 

          Information about the attributes.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: get_current_metric_data(**kwargs)

    

    Gets the real-time metric data from the specified Amazon Connect instance.

     

    For a description of each metric, see `Real-time Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/GetCurrentMetricData>`_    


    **Request Syntax** 
    ::

      response = client.get_current_metric_data(
          InstanceId='string',
          Filters={
              'Queues': [
                  'string',
              ],
              'Channels': [
                  'VOICE'|'CHAT'|'TASK',
              ]
          },
          Groupings=[
              'QUEUE'|'CHANNEL',
          ],
          CurrentMetrics=[
              {
                  'Name': 'AGENTS_ONLINE'|'AGENTS_AVAILABLE'|'AGENTS_ON_CALL'|'AGENTS_NON_PRODUCTIVE'|'AGENTS_AFTER_CONTACT_WORK'|'AGENTS_ERROR'|'AGENTS_STAFFED'|'CONTACTS_IN_QUEUE'|'OLDEST_CONTACT_AGE'|'CONTACTS_SCHEDULED'|'AGENTS_ON_CONTACT'|'SLOTS_ACTIVE'|'SLOTS_AVAILABLE',
                  'Unit': 'SECONDS'|'COUNT'|'PERCENT'
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Filters: dict
    :param Filters: **[REQUIRED]** 

      The queues, up to 100, or channels, to use to filter the metrics returned. Metric data is retrieved only for the resources associated with the queues or channels included in the filter. You can include both queue IDs and queue ARNs in the same request. VOICE, CHAT, and TASK channels are supported.

      

    
      - **Queues** *(list) --* 

        The queues to use to filter the metrics. You can specify up to 100 queues per request.

        

      
        - *(string) --* 

        
    
      - **Channels** *(list) --* 

        The channel to use to filter the metrics.

        

      
        - *(string) --* 

        
    
    
    :type Groupings: list
    :param Groupings: 

      The grouping applied to the metrics returned. For example, when grouped by ``QUEUE`` , the metrics returned apply to each queue rather than aggregated for all queues. If you group by ``CHANNEL`` , you should include a Channels filter. VOICE, CHAT, and TASK channels are supported.

       

      If no ``Grouping`` is included in the request, a summary of metrics is returned.

      

    
      - *(string) --* 

      
  
    :type CurrentMetrics: list
    :param CurrentMetrics: **[REQUIRED]** 

      The metrics to retrieve. Specify the name and unit for each metric. The following metrics are available. For a description of all the metrics, see `Real-time Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

        AGENTS_AFTER_CONTACT_WORK  

      Unit: COUNT

       

      Name in real-time metrics report: `ACW <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#aftercallwork-real-time>`__  

        AGENTS_AVAILABLE  

      Unit: COUNT

       

      Name in real-time metrics report: `Available <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#available-real-time>`__  

        AGENTS_ERROR  

      Unit: COUNT

       

      Name in real-time metrics report: `Error <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#error-real-time>`__  

        AGENTS_NON_PRODUCTIVE  

      Unit: COUNT

       

      Name in real-time metrics report: `NPT (Non-Productive Time) <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#non-productive-time-real-time>`__  

        AGENTS_ON_CALL  

      Unit: COUNT

       

      Name in real-time metrics report: `On contact <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#on-call-real-time>`__  

        AGENTS_ON_CONTACT  

      Unit: COUNT

       

      Name in real-time metrics report: `On contact <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#on-call-real-time>`__  

        AGENTS_ONLINE  

      Unit: COUNT

       

      Name in real-time metrics report: `Online <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#online-real-time>`__  

        AGENTS_STAFFED  

      Unit: COUNT

       

      Name in real-time metrics report: `Staffed <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#staffed-real-time>`__  

        CONTACTS_IN_QUEUE  

      Unit: COUNT

       

      Name in real-time metrics report: `In queue <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#in-queue-real-time>`__  

        CONTACTS_SCHEDULED  

      Unit: COUNT

       

      Name in real-time metrics report: `Scheduled <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#scheduled-real-time>`__  

        OLDEST_CONTACT_AGE  

      Unit: SECONDS

       

      When you use groupings, Unit says SECONDS but the Value is returned in MILLISECONDS. For example, if you get a response like this:

       

       ``{ "Metric": { "Name": "OLDEST_CONTACT_AGE", "Unit": "SECONDS" }, "Value": 24113.0`` }

       

      The actual OLDEST_CONTACT_AGE is 24 seconds.

       

      Name in real-time metrics report: `Oldest <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#oldest-real-time>`__  

        SLOTS_ACTIVE  

      Unit: COUNT

       

      Name in real-time metrics report: `Active <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#active-real-time>`__  

        SLOTS_AVAILABLE  

      Unit: COUNT

       

      Name in real-time metrics report: `Availability <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html#availability-real-time>`__  

        

    
      - *(dict) --* 

        Contains information about a real-time metric. For a description of each metric, see `Real-time Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

        

      
        - **Name** *(string) --* 

          The name of the metric.

          

        
        - **Unit** *(string) --* 

          The unit for the metric.

          

        
      
  
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

       

      The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'MetricResults': [
                {
                    'Dimensions': {
                        'Queue': {
                            'Id': 'string',
                            'Arn': 'string'
                        },
                        'Channel': 'VOICE'|'CHAT'|'TASK'
                    },
                    'Collections': [
                        {
                            'Metric': {
                                'Name': 'AGENTS_ONLINE'|'AGENTS_AVAILABLE'|'AGENTS_ON_CALL'|'AGENTS_NON_PRODUCTIVE'|'AGENTS_AFTER_CONTACT_WORK'|'AGENTS_ERROR'|'AGENTS_STAFFED'|'CONTACTS_IN_QUEUE'|'OLDEST_CONTACT_AGE'|'CONTACTS_SCHEDULED'|'AGENTS_ON_CONTACT'|'SLOTS_ACTIVE'|'SLOTS_AVAILABLE',
                                'Unit': 'SECONDS'|'COUNT'|'PERCENT'
                            },
                            'Value': 123.0
                        },
                    ]
                },
            ],
            'DataSnapshotTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

           

          The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.

          
        

        - **MetricResults** *(list) --* 

          Information about the real-time metrics.

          
          

          - *(dict) --* 

            Contains information about a set of real-time metrics.

            
            

            - **Dimensions** *(dict) --* 

              The dimensions for the metrics.

              
              

              - **Queue** *(dict) --* 

                Information about the queue for which metrics are returned.

                
                

                - **Id** *(string) --* 

                  The identifier of the queue.

                  
                

                - **Arn** *(string) --* 

                  The Amazon Resource Name (ARN) of the queue.

                  
            
              

              - **Channel** *(string) --* 

                The channel used for grouping and filters.

                
          
            

            - **Collections** *(list) --* 

              The set of metrics.

              
              

              - *(dict) --* 

                Contains the data for a real-time metric.

                
                

                - **Metric** *(dict) --* 

                  Information about the metric.

                  
                  

                  - **Name** *(string) --* 

                    The name of the metric.

                    
                  

                  - **Unit** *(string) --* 

                    The unit for the metric.

                    
              
                

                - **Value** *(float) --* 

                  The value of the metric.

                  
            
          
        
      
        

        - **DataSnapshotTime** *(datetime) --* 

          The time at which the metrics were retrieved and cached for pagination.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: get_federation_token(**kwargs)

    

    Retrieves a token for federation.

     

    .. note::

       

      This API doesn't support root users. If you try to invoke GetFederationToken with root credentials, an error message similar to the following one appears: 

       

       ``Provided identity: Principal: .... User: .... cannot be used for federation with Amazon Connect``  

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/GetFederationToken>`_    


    **Request Syntax** 
    ::

      response = client.get_federation_token(
          InstanceId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Credentials': {
                'AccessToken': 'string',
                'AccessTokenExpiration': datetime(2015, 1, 1),
                'RefreshToken': 'string',
                'RefreshTokenExpiration': datetime(2015, 1, 1)
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Credentials** *(dict) --* 

          The credentials to use for federation.

          
          

          - **AccessToken** *(string) --* 

            An access token generated for a federated user to access Amazon Connect.

            
          

          - **AccessTokenExpiration** *(datetime) --* 

            A token generated with an expiration time for the session a user is logged in to Amazon Connect.

            
          

          - **RefreshToken** *(string) --* 

            Renews a token generated for a user to access the Amazon Connect instance.

            
          

          - **RefreshTokenExpiration** *(datetime) --* 

            Renews the expiration timer for a generated token.

            
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.UserNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    

  .. py:method:: get_metric_data(**kwargs)

    

    Gets historical metric data from the specified Amazon Connect instance.

     

    For a description of each historical metric, see `Historical Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/GetMetricData>`_    


    **Request Syntax** 
    ::

      response = client.get_metric_data(
          InstanceId='string',
          StartTime=datetime(2015, 1, 1),
          EndTime=datetime(2015, 1, 1),
          Filters={
              'Queues': [
                  'string',
              ],
              'Channels': [
                  'VOICE'|'CHAT'|'TASK',
              ]
          },
          Groupings=[
              'QUEUE'|'CHANNEL',
          ],
          HistoricalMetrics=[
              {
                  'Name': 'CONTACTS_QUEUED'|'CONTACTS_HANDLED'|'CONTACTS_ABANDONED'|'CONTACTS_CONSULTED'|'CONTACTS_AGENT_HUNG_UP_FIRST'|'CONTACTS_HANDLED_INCOMING'|'CONTACTS_HANDLED_OUTBOUND'|'CONTACTS_HOLD_ABANDONS'|'CONTACTS_TRANSFERRED_IN'|'CONTACTS_TRANSFERRED_OUT'|'CONTACTS_TRANSFERRED_IN_FROM_QUEUE'|'CONTACTS_TRANSFERRED_OUT_FROM_QUEUE'|'CONTACTS_MISSED'|'CALLBACK_CONTACTS_HANDLED'|'API_CONTACTS_HANDLED'|'OCCUPANCY'|'HANDLE_TIME'|'AFTER_CONTACT_WORK_TIME'|'QUEUED_TIME'|'ABANDON_TIME'|'QUEUE_ANSWER_TIME'|'HOLD_TIME'|'INTERACTION_TIME'|'INTERACTION_AND_HOLD_TIME'|'SERVICE_LEVEL',
                  'Threshold': {
                      'Comparison': 'LT',
                      'ThresholdValue': 123.0
                  },
                  'Statistic': 'SUM'|'MAX'|'AVG',
                  'Unit': 'SECONDS'|'COUNT'|'PERCENT'
              },
          ],
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type StartTime: datetime
    :param StartTime: **[REQUIRED]** 

      The timestamp, in UNIX Epoch time format, at which to start the reporting interval for the retrieval of historical metrics data. The time must be specified using a multiple of 5 minutes, such as 10:05, 10:10, 10:15.

       

      The start time cannot be earlier than 24 hours before the time of the request. Historical metrics are available only for 24 hours.

      

    
    :type EndTime: datetime
    :param EndTime: **[REQUIRED]** 

      The timestamp, in UNIX Epoch time format, at which to end the reporting interval for the retrieval of historical metrics data. The time must be specified using an interval of 5 minutes, such as 11:00, 11:05, 11:10, and must be later than the start time timestamp.

       

      The time range between the start and end time must be less than 24 hours.

      

    
    :type Filters: dict
    :param Filters: **[REQUIRED]** 

      The queues, up to 100, or channels, to use to filter the metrics returned. Metric data is retrieved only for the resources associated with the queues or channels included in the filter. You can include both queue IDs and queue ARNs in the same request. VOICE, CHAT, and TASK channels are supported.

       

      .. note::

         

        To filter by ``Queues`` , enter the queue ID/ARN, not the name of the queue.

         

      

    
      - **Queues** *(list) --* 

        The queues to use to filter the metrics. You can specify up to 100 queues per request.

        

      
        - *(string) --* 

        
    
      - **Channels** *(list) --* 

        The channel to use to filter the metrics.

        

      
        - *(string) --* 

        
    
    
    :type Groupings: list
    :param Groupings: 

      The grouping applied to the metrics returned. For example, when results are grouped by queue, the metrics returned are grouped by queue. The values returned apply to the metrics for each queue rather than aggregated for all queues.

       

      If no grouping is specified, a summary of metrics for all queues is returned.

      

    
      - *(string) --* 

      
  
    :type HistoricalMetrics: list
    :param HistoricalMetrics: **[REQUIRED]** 

      The metrics to retrieve. Specify the name, unit, and statistic for each metric. The following historical metrics are available. For a description of each metric, see `Historical Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

       

      .. note::

         

        This API does not support a contacts incoming metric (there's no CONTACTS_INCOMING metric missing from the documented list). 

         

        ABANDON_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        AFTER_CONTACT_WORK_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        API_CONTACTS_HANDLED  

      Unit: COUNT

       

      Statistic: SUM

        CALLBACK_CONTACTS_HANDLED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_ABANDONED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_AGENT_HUNG_UP_FIRST  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_CONSULTED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HANDLED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HANDLED_INCOMING  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HANDLED_OUTBOUND  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HOLD_ABANDONS  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_MISSED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_QUEUED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_IN  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_IN_FROM_QUEUE  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_OUT  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_OUT_FROM_QUEUE  

      Unit: COUNT

       

      Statistic: SUM

        HANDLE_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        HOLD_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        INTERACTION_AND_HOLD_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        INTERACTION_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        OCCUPANCY  

      Unit: PERCENT

       

      Statistic: AVG

        QUEUE_ANSWER_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        QUEUED_TIME  

      Unit: SECONDS

       

      Statistic: MAX

        SERVICE_LEVEL  

      You can include up to 20 SERVICE_LEVEL metrics in a request.

       

      Unit: PERCENT

       

      Statistic: AVG

       

      Threshold: For ``ThresholdValue`` , enter any whole number from 1 to 604800 (inclusive), in seconds. For ``Comparison`` , you must enter ``LT`` (for "Less than"). 

        

    
      - *(dict) --* 

        Contains information about a historical metric. For a description of each metric, see `Historical Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

        

      
        - **Name** *(string) --* 

          The name of the metric.

          

        
        - **Threshold** *(dict) --* 

          The threshold for the metric, used with service level metrics.

          

        
          - **Comparison** *(string) --* 

            The type of comparison. Only "less than" (LT) comparisons are supported.

            

          
          - **ThresholdValue** *(float) --* 

            The threshold value to compare.

            

          
        
        - **Statistic** *(string) --* 

          The statistic for the metric.

          

        
        - **Unit** *(string) --* 

          The unit for the metric.

          

        
      
  
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'MetricResults': [
                {
                    'Dimensions': {
                        'Queue': {
                            'Id': 'string',
                            'Arn': 'string'
                        },
                        'Channel': 'VOICE'|'CHAT'|'TASK'
                    },
                    'Collections': [
                        {
                            'Metric': {
                                'Name': 'CONTACTS_QUEUED'|'CONTACTS_HANDLED'|'CONTACTS_ABANDONED'|'CONTACTS_CONSULTED'|'CONTACTS_AGENT_HUNG_UP_FIRST'|'CONTACTS_HANDLED_INCOMING'|'CONTACTS_HANDLED_OUTBOUND'|'CONTACTS_HOLD_ABANDONS'|'CONTACTS_TRANSFERRED_IN'|'CONTACTS_TRANSFERRED_OUT'|'CONTACTS_TRANSFERRED_IN_FROM_QUEUE'|'CONTACTS_TRANSFERRED_OUT_FROM_QUEUE'|'CONTACTS_MISSED'|'CALLBACK_CONTACTS_HANDLED'|'API_CONTACTS_HANDLED'|'OCCUPANCY'|'HANDLE_TIME'|'AFTER_CONTACT_WORK_TIME'|'QUEUED_TIME'|'ABANDON_TIME'|'QUEUE_ANSWER_TIME'|'HOLD_TIME'|'INTERACTION_TIME'|'INTERACTION_AND_HOLD_TIME'|'SERVICE_LEVEL',
                                'Threshold': {
                                    'Comparison': 'LT',
                                    'ThresholdValue': 123.0
                                },
                                'Statistic': 'SUM'|'MAX'|'AVG',
                                'Unit': 'SECONDS'|'COUNT'|'PERCENT'
                            },
                            'Value': 123.0
                        },
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

           

          The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.

          
        

        - **MetricResults** *(list) --* 

          Information about the historical metrics.

           

          If no grouping is specified, a summary of metric data is returned.

          
          

          - *(dict) --* 

            Contains information about the historical metrics retrieved.

            
            

            - **Dimensions** *(dict) --* 

              The dimension for the metrics.

              
              

              - **Queue** *(dict) --* 

                Information about the queue for which metrics are returned.

                
                

                - **Id** *(string) --* 

                  The identifier of the queue.

                  
                

                - **Arn** *(string) --* 

                  The Amazon Resource Name (ARN) of the queue.

                  
            
              

              - **Channel** *(string) --* 

                The channel used for grouping and filters.

                
          
            

            - **Collections** *(list) --* 

              The set of metrics.

              
              

              - *(dict) --* 

                Contains the data for a historical metric.

                
                

                - **Metric** *(dict) --* 

                  Information about the metric.

                  
                  

                  - **Name** *(string) --* 

                    The name of the metric.

                    
                  

                  - **Threshold** *(dict) --* 

                    The threshold for the metric, used with service level metrics.

                    
                    

                    - **Comparison** *(string) --* 

                      The type of comparison. Only "less than" (LT) comparisons are supported.

                      
                    

                    - **ThresholdValue** *(float) --* 

                      The threshold value to compare.

                      
                
                  

                  - **Statistic** *(string) --* 

                    The statistic for the metric.

                    
                  

                  - **Unit** *(string) --* 

                    The unit for the metric.

                    
              
                

                - **Value** *(float) --* 

                  The value of the metric.

                  
            
          
        
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_approved_origins(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Returns a paginated list of all approved origins associated with the instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListApprovedOrigins>`_    


    **Request Syntax** 
    ::

      response = client.list_approved_origins(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Origins': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Origins** *(list) --* 

          The approved origins.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_bots(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    For the specified version of Amazon Lex, returns a paginated list of all the Amazon Lex bots currently associated with the instance. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListBots>`_    


    **Request Syntax** 
    ::

      response = client.list_bots(
          InstanceId='string',
          NextToken='string',
          MaxResults=123,
          LexVersion='V1'|'V2'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    :type LexVersion: string
    :param LexVersion: **[REQUIRED]** 

      The version of Amazon Lex or Amazon Lex V2.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LexBots': [
                {
                    'LexBot': {
                        'Name': 'string',
                        'LexRegion': 'string'
                    },
                    'LexV2Bot': {
                        'AliasArn': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LexBots** *(list) --* 

          The names and Regions of the Amazon Lex or Amazon Lex V2 bots associated with the specified instance.

          
          

          - *(dict) --* 

            Configuration information of an Amazon Lex or Amazon Lex V2 bot.

            
            

            - **LexBot** *(dict) --* 

              Configuration information of an Amazon Lex bot.

              
              

              - **Name** *(string) --* 

                The name of the Amazon Lex bot.

                
              

              - **LexRegion** *(string) --* 

                The Region that the Amazon Lex bot was created in.

                
          
            

            - **LexV2Bot** *(dict) --* 

              Configuration information of an Amazon Lex V2 bot.

              
              

              - **AliasArn** *(string) --* 

                The Amazon Resource Name (ARN) of the Amazon Lex V2 bot.

                
          
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_contact_flows(**kwargs)

    

    Provides information about the contact flows for the specified Amazon Connect instance.

     

    You can also create and update contact flows using the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

     

    For more information about contact flows, see `Contact Flows <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-contact-flows.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListContactFlows>`_    


    **Request Syntax** 
    ::

      response = client.list_contact_flows(
          InstanceId='string',
          ContactFlowTypes=[
              'CONTACT_FLOW'|'CUSTOMER_QUEUE'|'CUSTOMER_HOLD'|'CUSTOMER_WHISPER'|'AGENT_HOLD'|'AGENT_WHISPER'|'OUTBOUND_WHISPER'|'AGENT_TRANSFER'|'QUEUE_TRANSFER',
          ],
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ContactFlowTypes: list
    :param ContactFlowTypes: 

      The type of contact flow.

      

    
      - *(string) --* 

      
  
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContactFlowSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'ContactFlowType': 'CONTACT_FLOW'|'CUSTOMER_QUEUE'|'CUSTOMER_HOLD'|'CUSTOMER_WHISPER'|'AGENT_HOLD'|'AGENT_WHISPER'|'OUTBOUND_WHISPER'|'AGENT_TRANSFER'|'QUEUE_TRANSFER'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContactFlowSummaryList** *(list) --* 

          Information about the contact flows.

          
          

          - *(dict) --* 

            Contains summary information about a contact flow.

             

            You can also create and update contact flows using the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

            
            

            - **Id** *(string) --* 

              The identifier of the contact flow.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the contact flow.

              
            

            - **Name** *(string) --* 

              The name of the contact flow.

              
            

            - **ContactFlowType** *(string) --* 

              The type of contact flow.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_hours_of_operations(**kwargs)

    

    Provides information about the hours of operation for the specified Amazon Connect instance.

     

    For more information about hours of operation, see `Set the Hours of Operation for a Queue <https://docs.aws.amazon.com/connect/latest/adminguide/set-hours-operation.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListHoursOfOperations>`_    


    **Request Syntax** 
    ::

      response = client.list_hours_of_operations(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HoursOfOperationSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HoursOfOperationSummaryList** *(list) --* 

          Information about the hours of operation.

          
          

          - *(dict) --* 

            Contains summary information about hours of operation for a contact center.

            
            

            - **Id** *(string) --* 

              The identifier of the hours of operation.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hours of operation.

              
            

            - **Name** *(string) --* 

              The name of the hours of operation.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_instance_attributes(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Returns a paginated list of all attribute types for the given instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListInstanceAttributes>`_    


    **Request Syntax** 
    ::

      response = client.list_instance_attributes(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Attributes': [
                {
                    'AttributeType': 'INBOUND_CALLS'|'OUTBOUND_CALLS'|'CONTACTFLOW_LOGS'|'CONTACT_LENS'|'AUTO_RESOLVE_BEST_VOICES'|'USE_CUSTOM_TTS_VOICES'|'EARLY_MEDIA',
                    'Value': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Attributes** *(list) --* 

          The attribute types.

          
          

          - *(dict) --* 

            A toggle for an individual feature at the instance level.

            
            

            - **AttributeType** *(string) --* 

              The type of attribute.

              
            

            - **Value** *(string) --* 

              The value of the attribute.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_instance_storage_configs(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Returns a paginated list of storage configs for the identified instance and resource type.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListInstanceStorageConfigs>`_    


    **Request Syntax** 
    ::

      response = client.list_instance_storage_configs(
          InstanceId='string',
          ResourceType='CHAT_TRANSCRIPTS'|'CALL_RECORDINGS'|'SCHEDULED_REPORTS'|'MEDIA_STREAMS'|'CONTACT_TRACE_RECORDS'|'AGENT_EVENTS',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      A valid resource type.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'StorageConfigs': [
                {
                    'AssociationId': 'string',
                    'StorageType': 'S3'|'KINESIS_VIDEO_STREAM'|'KINESIS_STREAM'|'KINESIS_FIREHOSE',
                    'S3Config': {
                        'BucketName': 'string',
                        'BucketPrefix': 'string',
                        'EncryptionConfig': {
                            'EncryptionType': 'KMS',
                            'KeyId': 'string'
                        }
                    },
                    'KinesisVideoStreamConfig': {
                        'Prefix': 'string',
                        'RetentionPeriodHours': 123,
                        'EncryptionConfig': {
                            'EncryptionType': 'KMS',
                            'KeyId': 'string'
                        }
                    },
                    'KinesisStreamConfig': {
                        'StreamArn': 'string'
                    },
                    'KinesisFirehoseConfig': {
                        'FirehoseArn': 'string'
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **StorageConfigs** *(list) --* 

          A valid storage type.

          
          

          - *(dict) --* 

            The storage configuration for the instance.

            
            

            - **AssociationId** *(string) --* 

              The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

              
            

            - **StorageType** *(string) --* 

              A valid storage type.

              
            

            - **S3Config** *(dict) --* 

              The S3 bucket configuration.

              
              

              - **BucketName** *(string) --* 

                The S3 bucket name.

                
              

              - **BucketPrefix** *(string) --* 

                The S3 bucket prefix.

                
              

              - **EncryptionConfig** *(dict) --* 

                The Amazon S3 encryption configuration.

                
                

                - **EncryptionType** *(string) --* 

                  The type of encryption.

                  
                

                - **KeyId** *(string) --* 

                  The identifier of the encryption key.

                  
            
          
            

            - **KinesisVideoStreamConfig** *(dict) --* 

              The configuration of the Kinesis video stream.

              
              

              - **Prefix** *(string) --* 

                The prefix of the video stream.

                
              

              - **RetentionPeriodHours** *(integer) --* 

                The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.

                 

                The default value is 0, indicating that the stream does not persist data.

                
              

              - **EncryptionConfig** *(dict) --* 

                The encryption configuration.

                
                

                - **EncryptionType** *(string) --* 

                  The type of encryption.

                  
                

                - **KeyId** *(string) --* 

                  The identifier of the encryption key.

                  
            
          
            

            - **KinesisStreamConfig** *(dict) --* 

              The configuration of the Kinesis data stream.

              
              

              - **StreamArn** *(string) --* 

                The Amazon Resource Name (ARN) of the data stream.

                
          
            

            - **KinesisFirehoseConfig** *(dict) --* 

              The configuration of the Kinesis Firehose delivery stream.

              
              

              - **FirehoseArn** *(string) --* 

                The Amazon Resource Name (ARN) of the delivery stream.

                
          
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_instances(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Return a list of instances which are in active state, creation-in-progress state, and failed state. Instances that aren't successfully created (they are in a failed state) are returned only for 24 hours after the CreateInstance API was invoked.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListInstances>`_    


    **Request Syntax** 
    ::

      response = client.list_instances(
          NextToken='string',
          MaxResults=123
      )
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InstanceSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'IdentityManagementType': 'SAML'|'CONNECT_MANAGED'|'EXISTING_DIRECTORY',
                    'InstanceAlias': 'string',
                    'CreatedTime': datetime(2015, 1, 1),
                    'ServiceRole': 'string',
                    'InstanceStatus': 'CREATION_IN_PROGRESS'|'ACTIVE'|'CREATION_FAILED',
                    'InboundCallsEnabled': True|False,
                    'OutboundCallsEnabled': True|False
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **InstanceSummaryList** *(list) --* 

          Information about the instances.

          
          

          - *(dict) --* 

            Information about the instance.

            
            

            - **Id** *(string) --* 

              The identifier of the instance.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the instance.

              
            

            - **IdentityManagementType** *(string) --* 

              The identity management type of the instance.

              
            

            - **InstanceAlias** *(string) --* 

              The alias of the instance.

              
            

            - **CreatedTime** *(datetime) --* 

              When the instance was created.

              
            

            - **ServiceRole** *(string) --* 

              The service role of the instance.

              
            

            - **InstanceStatus** *(string) --* 

              The state of the instance.

              
            

            - **InboundCallsEnabled** *(boolean) --* 

              Whether inbound calls are enabled.

              
            

            - **OutboundCallsEnabled** *(boolean) --* 

              Whether outbound calls are enabled.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_integration_associations(**kwargs)

    

    Provides summary information about the AppIntegration associations for the specified Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListIntegrationAssociations>`_    


    **Request Syntax** 
    ::

      response = client.list_integration_associations(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IntegrationAssociationSummaryList': [
                {
                    'IntegrationAssociationId': 'string',
                    'IntegrationAssociationArn': 'string',
                    'InstanceId': 'string',
                    'IntegrationType': 'EVENT',
                    'IntegrationArn': 'string',
                    'SourceApplicationUrl': 'string',
                    'SourceApplicationName': 'string',
                    'SourceType': 'SALESFORCE'|'ZENDESK'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IntegrationAssociationSummaryList** *(list) --* 

          The AppIntegration associations.

          
          

          - *(dict) --* 

            Contains summary information about the associated AppIntegrations.

            
            

            - **IntegrationAssociationId** *(string) --* 

              The identifier for the AppIntegration association.

              
            

            - **IntegrationAssociationArn** *(string) --* 

              The Amazon Resource Name (ARN) for the AppIntegration association.

              
            

            - **InstanceId** *(string) --* 

              The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

              
            

            - **IntegrationType** *(string) --* 

              The integration type.

              
            

            - **IntegrationArn** *(string) --* 

              The Amazon Resource Name (ARN) for the AppIntegration.

              
            

            - **SourceApplicationUrl** *(string) --* 

              The URL for the external application.

              
            

            - **SourceApplicationName** *(string) --* 

              The user-provided, friendly name for the external application.

              
            

            - **SourceType** *(string) --* 

              The name of the source.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_lambda_functions(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Returns a paginated list of all Lambda functions that display in the dropdown options in the relevant contact flow blocks.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListLambdaFunctions>`_    


    **Request Syntax** 
    ::

      response = client.list_lambda_functions(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LambdaFunctions': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LambdaFunctions** *(list) --* 

          The Lambdafunction ARNs associated with the specified instance.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_lex_bots(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Returns a paginated list of all the Amazon Lex bots currently associated with the instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListLexBots>`_    


    **Request Syntax** 
    ::

      response = client.list_lex_bots(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LexBots': [
                {
                    'Name': 'string',
                    'LexRegion': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LexBots** *(list) --* 

          The names and Regions of the Amazon Lex bots associated with the specified instance.

          
          

          - *(dict) --* 

            Configuration information of an Amazon Lex bot.

            
            

            - **Name** *(string) --* 

              The name of the Amazon Lex bot.

              
            

            - **LexRegion** *(string) --* 

              The Region that the Amazon Lex bot was created in.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_phone_numbers(**kwargs)

    

    Provides information about the phone numbers for the specified Amazon Connect instance. 

     

    For more information about phone numbers, see `Set Up Phone Numbers for Your Contact Center <https://docs.aws.amazon.com/connect/latest/adminguide/contact-center-phone-number.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListPhoneNumbers>`_    


    **Request Syntax** 
    ::

      response = client.list_phone_numbers(
          InstanceId='string',
          PhoneNumberTypes=[
              'TOLL_FREE'|'DID',
          ],
          PhoneNumberCountryCodes=[
              'AF'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BA'|'BW'|'BR'|'IO'|'VG'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CK'|'CR'|'HR'|'CU'|'CW'|'CY'|'CZ'|'CD'|'DK'|'DJ'|'DM'|'DO'|'TL'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'PF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'CI'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'AN'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'KP'|'MP'|'NO'|'OM'|'PK'|'PW'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'CG'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'KR'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'VI'|'UG'|'UA'|'AE'|'GB'|'US'|'UY'|'UZ'|'VU'|'VA'|'VE'|'VN'|'WF'|'EH'|'YE'|'ZM'|'ZW',
          ],
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PhoneNumberTypes: list
    :param PhoneNumberTypes: 

      The type of phone number.

      

    
      - *(string) --* 

      
  
    :type PhoneNumberCountryCodes: list
    :param PhoneNumberCountryCodes: 

      The ISO country code.

      

    
      - *(string) --* 

      
  
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'PhoneNumberSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'PhoneNumber': 'string',
                    'PhoneNumberType': 'TOLL_FREE'|'DID',
                    'PhoneNumberCountryCode': 'AF'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BA'|'BW'|'BR'|'IO'|'VG'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CK'|'CR'|'HR'|'CU'|'CW'|'CY'|'CZ'|'CD'|'DK'|'DJ'|'DM'|'DO'|'TL'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'PF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'CI'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'AN'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'KP'|'MP'|'NO'|'OM'|'PK'|'PW'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'CG'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'KR'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'VI'|'UG'|'UA'|'AE'|'GB'|'US'|'UY'|'UZ'|'VU'|'VA'|'VE'|'VN'|'WF'|'EH'|'YE'|'ZM'|'ZW'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **PhoneNumberSummaryList** *(list) --* 

          Information about the phone numbers.

          
          

          - *(dict) --* 

            Contains summary information about a phone number for a contact center.

            
            

            - **Id** *(string) --* 

              The identifier of the phone number.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the phone number.

              
            

            - **PhoneNumber** *(string) --* 

              The phone number.

              
            

            - **PhoneNumberType** *(string) --* 

              The type of phone number.

              
            

            - **PhoneNumberCountryCode** *(string) --* 

              The ISO country code.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_prompts(**kwargs)

    

    Provides information about the prompts for the specified Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListPrompts>`_    


    **Request Syntax** 
    ::

      response = client.list_prompts(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'PromptSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **PromptSummaryList** *(list) --* 

          Information about the prompts.

          
          

          - *(dict) --* 

            Contains information about the prompt.

            
            

            - **Id** *(string) --* 

              The identifier of the prompt.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the prompt.

              
            

            - **Name** *(string) --* 

              The name of the prompt.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_queue_quick_connects(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Lists the quick connects associated with a queue.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListQueueQuickConnects>`_    


    **Request Syntax** 
    ::

      response = client.list_queue_quick_connects(
          InstanceId='string',
          QueueId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'QuickConnectSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'QuickConnectType': 'USER'|'QUEUE'|'PHONE_NUMBER'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
        

        - **QuickConnectSummaryList** *(list) --* 

          Information about the quick connects.

          
          

          - *(dict) --* 

            Contains summary information about a quick connect.

            
            

            - **Id** *(string) --* 

              The identifier for the quick connect.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the quick connect.

              
            

            - **Name** *(string) --* 

              The name of the quick connect.

              
            

            - **QuickConnectType** *(string) --* 

              The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_queues(**kwargs)

    

    Provides information about the queues for the specified Amazon Connect instance.

     

    If you do not specify a ``QueueTypes`` parameter, both standard and agent queues are returned. This might cause an unexpected truncation of results if you have more than 1000 agents and you limit the number of results of the API call in code.

     

    For more information about queues, see `Queues\: Standard and Agent <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-queues-standard-and-agent.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListQueues>`_    


    **Request Syntax** 
    ::

      response = client.list_queues(
          InstanceId='string',
          QueueTypes=[
              'STANDARD'|'AGENT',
          ],
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueTypes: list
    :param QueueTypes: 

      The type of queue.

      

    
      - *(string) --* 

      
  
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QueueSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'QueueType': 'STANDARD'|'AGENT'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QueueSummaryList** *(list) --* 

          Information about the queues.

          
          

          - *(dict) --* 

            Contains summary information about a queue.

            
            

            - **Id** *(string) --* 

              The identifier of the queue.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the queue.

              
            

            - **Name** *(string) --* 

              The name of the queue.

              
            

            - **QueueType** *(string) --* 

              The type of queue.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_quick_connects(**kwargs)

    

    Provides information about the quick connects for the specified Amazon Connect instance. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListQuickConnects>`_    


    **Request Syntax** 
    ::

      response = client.list_quick_connects(
          InstanceId='string',
          NextToken='string',
          MaxResults=123,
          QuickConnectTypes=[
              'USER'|'QUEUE'|'PHONE_NUMBER',
          ]
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    :type QuickConnectTypes: list
    :param QuickConnectTypes: 

      The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QuickConnectSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'QuickConnectType': 'USER'|'QUEUE'|'PHONE_NUMBER'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QuickConnectSummaryList** *(list) --* 

          Information about the quick connects.

          
          

          - *(dict) --* 

            Contains summary information about a quick connect.

            
            

            - **Id** *(string) --* 

              The identifier for the quick connect.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the quick connect.

              
            

            - **Name** *(string) --* 

              The name of the quick connect.

              
            

            - **QuickConnectType** *(string) --* 

              The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_routing_profile_queues(**kwargs)

    

    Lists the queues associated with a routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListRoutingProfileQueues>`_    


    **Request Syntax** 
    ::

      response = client.list_routing_profile_queues(
          InstanceId='string',
          RoutingProfileId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'RoutingProfileQueueConfigSummaryList': [
                {
                    'QueueId': 'string',
                    'QueueArn': 'string',
                    'QueueName': 'string',
                    'Priority': 123,
                    'Delay': 123,
                    'Channel': 'VOICE'|'CHAT'|'TASK'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
        

        - **RoutingProfileQueueConfigSummaryList** *(list) --* 

          Information about the routing profiles.

          
          

          - *(dict) --* 

            Contains summary information about a routing profile queue.

            
            

            - **QueueId** *(string) --* 

              The identifier for the queue.

              
            

            - **QueueArn** *(string) --* 

              The Amazon Resource Name (ARN) of the queue.

              
            

            - **QueueName** *(string) --* 

              The name of the queue.

              
            

            - **Priority** *(integer) --* 

              The order in which contacts are to be handled for the queue. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ .

              
            

            - **Delay** *(integer) --* 

              The delay, in seconds, that a contact should be in the queue before they are routed to an available agent. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ in the *Amazon Connect Administrator Guide* .

              
            

            - **Channel** *(string) --* 

              The channels this queue supports.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_routing_profiles(**kwargs)

    

    Provides summary information about the routing profiles for the specified Amazon Connect instance.

     

    For more information about routing profiles, see `Routing Profiles <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing.html>`__ and `Create a Routing Profile <https://docs.aws.amazon.com/connect/latest/adminguide/routing-profiles.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListRoutingProfiles>`_    


    **Request Syntax** 
    ::

      response = client.list_routing_profiles(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RoutingProfileSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RoutingProfileSummaryList** *(list) --* 

          Information about the routing profiles.

          
          

          - *(dict) --* 

            Contains summary information about a routing profile.

            
            

            - **Id** *(string) --* 

              The identifier of the routing profile.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the routing profile.

              
            

            - **Name** *(string) --* 

              The name of the routing profile.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_security_keys(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Returns a paginated list of all security keys associated with the instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListSecurityKeys>`_    


    **Request Syntax** 
    ::

      response = client.list_security_keys(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecurityKeys': [
                {
                    'AssociationId': 'string',
                    'Key': 'string',
                    'CreationTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **SecurityKeys** *(list) --* 

          The security keys.

          
          

          - *(dict) --* 

            Configuration information of the security key.

            
            

            - **AssociationId** *(string) --* 

              The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

              
            

            - **Key** *(string) --* 

              The key of the security key.

              
            

            - **CreationTime** *(datetime) --* 

              When the security key was created.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_security_profiles(**kwargs)

    

    Provides summary information about the security profiles for the specified Amazon Connect instance.

     

    For more information about security profiles, see `Security Profiles <https://docs.aws.amazon.com/connect/latest/adminguide/connect-security-profiles.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListSecurityProfiles>`_    


    **Request Syntax** 
    ::

      response = client.list_security_profiles(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecurityProfileSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **SecurityProfileSummaryList** *(list) --* 

          Information about the security profiles.

          
          

          - *(dict) --* 

            Contains information about a security profile.

            
            

            - **Id** *(string) --* 

              The identifier of the security profile.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the security profile.

              
            

            - **Name** *(string) --* 

              The name of the security profile.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Lists the tags for the specified resource.

     

    For sample policies that use tags, see `Amazon Connect Identity-Based Policy Examples <https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          resourceArn='string'
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'tags': {
                'string': 'string'
            }
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **tags** *(dict) --* 

          Information about the tags.

          
          

          - *(string) --* 
            

            - *(string) --* 
      
    
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_use_cases(**kwargs)

    

    Lists the use cases. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListUseCases>`_    


    **Request Syntax** 
    ::

      response = client.list_use_cases(
          InstanceId='string',
          IntegrationAssociationId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type IntegrationAssociationId: string
    :param IntegrationAssociationId: **[REQUIRED]** 

      The identifier for the integration association.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UseCaseSummaryList': [
                {
                    'UseCaseId': 'string',
                    'UseCaseArn': 'string',
                    'UseCaseType': 'RULES_EVALUATION'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UseCaseSummaryList** *(list) --* 

          The use cases.

          
          

          - *(dict) --* 

            Contains the use case.

            
            

            - **UseCaseId** *(string) --* 

              The identifier for the use case.

              
            

            - **UseCaseArn** *(string) --* 

              The Amazon Resource Name (ARN) for the use case.

              
            

            - **UseCaseType** *(string) --* 

              The type of use case to associate to the AppIntegration association. Each AppIntegration association can have only one of each use case type.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: list_user_hierarchy_groups(**kwargs)

    

    Provides summary information about the hierarchy groups for the specified Amazon Connect instance.

     

    For more information about agent hierarchies, see `Set Up Agent Hierarchies <https://docs.aws.amazon.com/connect/latest/adminguide/agent-hierarchy.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListUserHierarchyGroups>`_    


    **Request Syntax** 
    ::

      response = client.list_user_hierarchy_groups(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UserHierarchyGroupSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UserHierarchyGroupSummaryList** *(list) --* 

          Information about the hierarchy groups.

          
          

          - *(dict) --* 

            Contains summary information about a hierarchy group.

            
            

            - **Id** *(string) --* 

              The identifier of the hierarchy group.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hierarchy group.

              
            

            - **Name** *(string) --* 

              The name of the hierarchy group.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: list_users(**kwargs)

    

    Provides summary information about the users for the specified Amazon Connect instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListUsers>`_    


    **Request Syntax** 
    ::

      response = client.list_users(
          InstanceId='string',
          NextToken='string',
          MaxResults=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type NextToken: string
    :param NextToken: 

      The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of results to return per page.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UserSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Username': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UserSummaryList** *(list) --* 

          Information about the users.

          
          

          - *(dict) --* 

            Contains summary information about a user.

            
            

            - **Id** *(string) --* 

              The identifier of the user account.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the user account.

              
            

            - **Username** *(string) --* 

              The Amazon Connect user name of the user account.

              
        
      
        

        - **NextToken** *(string) --* 

          If there are additional results, this is the token for the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: resume_contact_recording(**kwargs)

    

    When a contact is being recorded, and the recording has been suspended using SuspendContactRecording, this API resumes recording the call.

     

    Only voice recordings are supported at this time.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ResumeContactRecording>`_    


    **Request Syntax** 
    ::

      response = client.resume_contact_recording(
          InstanceId='string',
          ContactId='string',
          InitialContactId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ContactId: string
    :param ContactId: **[REQUIRED]** 

      The identifier of the contact.

      

    
    :type InitialContactId: string
    :param InitialContactId: **[REQUIRED]** 

      The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: start_chat_contact(**kwargs)

    

    Initiates a contact flow to start a new chat for the customer. Response of this API provides a token required to obtain credentials from the `CreateParticipantConnection <https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html>`__ API in the Amazon Connect Participant Service.

     

    When a new chat contact is successfully created, clients must subscribe to the participant’s connection for the created chat within 5 minutes. This is achieved by invoking `CreateParticipantConnection <https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html>`__ with WEBSOCKET and CONNECTION_CREDENTIALS. 

     

    A 429 error occurs in two situations:

     

     
    * API rate limit is exceeded. API TPS throttling returns a ``TooManyRequests`` exception. 
     
    * The `quota for concurrent active chats <https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html>`__ is exceeded. Active chat throttling returns a ``LimitExceededException`` . 
     

     

    For more information about chat, see `Chat <https://docs.aws.amazon.com/connect/latest/adminguide/chat.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/StartChatContact>`_    


    **Request Syntax** 
    ::

      response = client.start_chat_contact(
          InstanceId='string',
          ContactFlowId='string',
          Attributes={
              'string': 'string'
          },
          ParticipantDetails={
              'DisplayName': 'string'
          },
          InitialMessage={
              'ContentType': 'string',
              'Content': 'string'
          },
          ClientToken='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ContactFlowId: string
    :param ContactFlowId: **[REQUIRED]** 

      The identifier of the contact flow for initiating the chat. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to **Routing** , **Contact Flows** . Choose the contact flow. On the contact flow page, under the name of the contact flow, choose **Show additional flow information** . The ContactFlowId is the last part of the ARN, shown here in bold: 

       

      arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/**846ec553-a005-41c0-8341-xxxxxxxxxxxx**  

      

    
    :type Attributes: dict
    :param Attributes: 

      A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in contact flows just like any other contact attributes. 

       

      There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type ParticipantDetails: dict
    :param ParticipantDetails: **[REQUIRED]** 

      Information identifying the participant.

      

    
      - **DisplayName** *(string) --* **[REQUIRED]** 

        Display name of the participant.

        

      
    
    :type InitialMessage: dict
    :param InitialMessage: 

      The initial message to be sent to the newly created chat.

      

    
      - **ContentType** *(string) --* **[REQUIRED]** 

        The type of the content. Supported types are text and plain.

        

      
      - **Content** *(string) --* **[REQUIRED]** 

        The content of the chat message.

        

      
    
    :type ClientToken: string
    :param ClientToken: 

      A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContactId': 'string',
            'ParticipantId': 'string',
            'ParticipantToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContactId** *(string) --* 

          The identifier of this contact within the Amazon Connect instance. 

          
        

        - **ParticipantId** *(string) --* 

          The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.

          
        

        - **ParticipantToken** *(string) --* 

          The token used by the chat participant to call `CreateParticipantConnection <https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html>`__ . The participant token is valid for the lifetime of a chat participant.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    

  .. py:method:: start_contact_recording(**kwargs)

    

    Starts recording the contact when the agent joins the call. StartContactRecording is a one-time action. For example, if you use StopContactRecording to stop recording an ongoing call, you can't use StartContactRecording to restart it. For scenarios where the recording has started and you want to suspend and resume it, such as when collecting sensitive information (for example, a credit card number), use SuspendContactRecording and ResumeContactRecording.

     

    You can use this API to override the recording behavior configured in the `Set recording behavior <https://docs.aws.amazon.com/connect/latest/adminguide/set-recording-behavior.html>`__ block.

     

    Only voice recordings are supported at this time.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/StartContactRecording>`_    


    **Request Syntax** 
    ::

      response = client.start_contact_recording(
          InstanceId='string',
          ContactId='string',
          InitialContactId='string',
          VoiceRecordingConfiguration={
              'VoiceRecordingTrack': 'FROM_AGENT'|'TO_AGENT'|'ALL'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ContactId: string
    :param ContactId: **[REQUIRED]** 

      The identifier of the contact.

      

    
    :type InitialContactId: string
    :param InitialContactId: **[REQUIRED]** 

      The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

      

    
    :type VoiceRecordingConfiguration: dict
    :param VoiceRecordingConfiguration: **[REQUIRED]** 

      The person being recorded.

      

    
      - **VoiceRecordingTrack** *(string) --* 

        Identifies which track is being recorded.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: start_outbound_voice_contact(**kwargs)

    

    Places an outbound call to a contact, and then initiates the contact flow. It performs the actions in the contact flow that's specified (in ``ContactFlowId`` ).

     

    Agents do not initiate the outbound API, which means that they do not dial the contact. If the contact flow places an outbound call to a contact, and then puts the contact in queue, the call is then routed to the agent, like any other inbound case.

     

    There is a 60-second dialing timeout for this operation. If the call is not connected after 60 seconds, it fails.

     

    .. note::

       

      UK numbers with a 447 prefix are not allowed by default. Before you can dial these UK mobile numbers, you must submit a service quota increase request. For more information, see `Amazon Connect Service Quotas <https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html>`__ in the *Amazon Connect Administrator Guide* . 

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/StartOutboundVoiceContact>`_    


    **Request Syntax** 
    ::

      response = client.start_outbound_voice_contact(
          DestinationPhoneNumber='string',
          ContactFlowId='string',
          InstanceId='string',
          ClientToken='string',
          SourcePhoneNumber='string',
          QueueId='string',
          Attributes={
              'string': 'string'
          }
      )
    :type DestinationPhoneNumber: string
    :param DestinationPhoneNumber: **[REQUIRED]** 

      The phone number of the customer, in E.164 format.

      

    
    :type ContactFlowId: string
    :param ContactFlowId: **[REQUIRED]** 

      The identifier of the contact flow for the outbound call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to **Routing** , **Contact Flows** . Choose the contact flow. On the contact flow page, under the name of the contact flow, choose **Show additional flow information** . The ContactFlowId is the last part of the ARN, shown here in bold: 

       

      arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/**846ec553-a005-41c0-8341-xxxxxxxxxxxx**  

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ClientToken: string
    :param ClientToken: 

      A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned. 

      This field is autopopulated if not provided.

    
    :type SourcePhoneNumber: string
    :param SourcePhoneNumber: 

      The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.

      

    
    :type QueueId: string
    :param QueueId: 

      The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.

      

    
    :type Attributes: dict
    :param Attributes: 

      A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.

       

      There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContactId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContactId** *(string) --* 

          The identifier of this contact within the Amazon Connect instance.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.LimitExceededException`

    
    *     :py:class:`Connect.Client.exceptions.DestinationNotAllowedException`

    
    *     :py:class:`Connect.Client.exceptions.OutboundContactNotPermittedException`

    

  .. py:method:: start_task_contact(**kwargs)

    

    Initiates a contact flow to start a new task.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/StartTaskContact>`_    


    **Request Syntax** 
    ::

      response = client.start_task_contact(
          InstanceId='string',
          PreviousContactId='string',
          ContactFlowId='string',
          Attributes={
              'string': 'string'
          },
          Name='string',
          References={
              'string': {
                  'Value': 'string',
                  'Type': 'URL'
              }
          },
          Description='string',
          ClientToken='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PreviousContactId: string
    :param PreviousContactId: 

      The identifier of the previous chat, voice, or task contact. 

      

    
    :type ContactFlowId: string
    :param ContactFlowId: **[REQUIRED]** 

      The identifier of the contact flow for initiating the tasks. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to **Routing** , **Contact Flows** . Choose the contact flow. On the contact flow page, under the name of the contact flow, choose **Show additional flow information** . The ContactFlowId is the last part of the ARN, shown here in bold: 

       

      arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/**846ec553-a005-41c0-8341-xxxxxxxxxxxx**  

      

    
    :type Attributes: dict
    :param Attributes: 

      A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.

       

      There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of a task that is shown to an agent in the Contact Control Panel (CCP).

      

    
    :type References: dict
    :param References: 

      A formatted URL that is shown to an agent in the Contact Control Panel (CCP).

      

    
      - *(string) --* 

      
        - *(dict) --* 

          A link that an agent selects to complete a given task. You can have up to 4,096 UTF-8 bytes across all references for a contact.

          

        
          - **Value** *(string) --* **[REQUIRED]** 

            A formatted URL that displays to an agent in the Contact Control Panel (CCP)

            

          
          - **Type** *(string) --* **[REQUIRED]** 

            A valid URL.

            

          
        
  

    :type Description: string
    :param Description: 

      A description of the task that is shown to an agent in the Contact Control Panel (CCP).

      

    
    :type ClientToken: string
    :param ClientToken: 

      A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

      This field is autopopulated if not provided.

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContactId': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContactId** *(string) --* 

          The identifier of this contact within the Amazon Connect instance.

          
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.ServiceQuotaExceededException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: stop_contact(**kwargs)

    

    Ends the specified contact.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/StopContact>`_    


    **Request Syntax** 
    ::

      response = client.stop_contact(
          ContactId='string',
          InstanceId='string'
      )
    :type ContactId: string
    :param ContactId: **[REQUIRED]** 

      The ID of the contact.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ContactNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: stop_contact_recording(**kwargs)

    

    Stops recording a call when a contact is being recorded. StopContactRecording is a one-time action. If you use StopContactRecording to stop recording an ongoing call, you can't use StartContactRecording to restart it. For scenarios where the recording has started and you want to suspend it for sensitive information (for example, to collect a credit card number), and then restart it, use SuspendContactRecording and ResumeContactRecording.

     

    Only voice recordings are supported at this time.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/StopContactRecording>`_    


    **Request Syntax** 
    ::

      response = client.stop_contact_recording(
          InstanceId='string',
          ContactId='string',
          InitialContactId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ContactId: string
    :param ContactId: **[REQUIRED]** 

      The identifier of the contact.

      

    
    :type InitialContactId: string
    :param InitialContactId: **[REQUIRED]** 

      The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: suspend_contact_recording(**kwargs)

    

    When a contact is being recorded, this API suspends recording the call. For example, you might suspend the call recording while collecting sensitive information, such as a credit card number. Then use ResumeContactRecording to restart recording. 

     

    The period of time that the recording is suspended is filled with silence in the final recording. 

     

    Only voice recordings are supported at this time.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/SuspendContactRecording>`_    


    **Request Syntax** 
    ::

      response = client.suspend_contact_recording(
          InstanceId='string',
          ContactId='string',
          InitialContactId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ContactId: string
    :param ContactId: **[REQUIRED]** 

      The identifier of the contact.

      

    
    :type InitialContactId: string
    :param InitialContactId: **[REQUIRED]** 

      The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Adds the specified tags to the specified resource.

     

    The supported resource types are users, routing profiles, queues, quick connects, and contact flows.

     

    For sample policies that use tags, see `Amazon Connect Identity-Based Policy Examples <https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html>`__ in the *Amazon Connect Administrator Guide* .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          resourceArn='string',
          tags={
              'string': 'string'
          }
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    :type tags: dict
    :param tags: **[REQUIRED]** 

      One or more tags. For example, { "tags": {"key1":"value1", "key2":"value2"} }.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes the specified tags from the specified resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          resourceArn='string',
          tagKeys=[
              'string',
          ]
      )
    :type resourceArn: string
    :param resourceArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the resource.

      

    
    :type tagKeys: list
    :param tagKeys: **[REQUIRED]** 

      The tag keys.

      

    
      - *(string) --* 

      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_contact_attributes(**kwargs)

    

    Creates or updates user-defined contact attributes associated with the specified contact.

     

    You can create or update user-defined attributes for both ongoing and completed contacts. For example, while the call is active, you can update the customer's name or the reason the customer called. You can add notes about steps that the agent took during the call that display to the next agent that takes the call. You can also update attributes for a contact using data from your CRM application and save the data with the contact in Amazon Connect. You could also flag calls for additional analysis, such as legal review or to identify abusive callers.

     

    Contact attributes are available in Amazon Connect for 24 months, and are then deleted. For information about CTR retention and the maximum size of the CTR attributes section, see `Feature specifications <https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits>`__ in the *Amazon Connect Administrator Guide* . 

     

     **Important:** You cannot use the operation to update attributes for contacts that occurred prior to the release of the API, which was September 12, 2018. You can update attributes only for contacts that started after the release of the API. If you attempt to update attributes for a contact that occurred prior to the release of the API, a 400 error is returned. This applies also to queued callbacks that were initiated prior to the release of the API but are still active in your instance.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateContactAttributes>`_    


    **Request Syntax** 
    ::

      response = client.update_contact_attributes(
          InitialContactId='string',
          InstanceId='string',
          Attributes={
              'string': 'string'
          }
      )
    :type InitialContactId: string
    :param InitialContactId: **[REQUIRED]** 

      The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type Attributes: dict
    :param Attributes: **[REQUIRED]** 

      The Amazon Connect attributes. These attributes can be accessed in contact flows just like any other contact attributes.

       

      You can have up to 32,768 UTF-8 bytes across all attributes for a contact. Attribute keys can include only alphanumeric, dash, and underscore characters.

      

    
      - *(string) --* 

      
        - *(string) --* 

        
  

    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_contact_flow_content(**kwargs)

    

    Updates the specified contact flow.

     

    You can also create and update contact flows using the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateContactFlowContent>`_    


    **Request Syntax** 
    ::

      response = client.update_contact_flow_content(
          InstanceId='string',
          ContactFlowId='string',
          Content='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance.

      

    
    :type ContactFlowId: string
    :param ContactFlowId: **[REQUIRED]** 

      The identifier of the contact flow.

      

    
    :type Content: string
    :param Content: **[REQUIRED]** 

      The JSON string that represents contact flow’s content. For an example, see `Example contact flow in Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language-example.html>`__ in the *Amazon Connect Administrator Guide* . 

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidContactFlowException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_contact_flow_name(**kwargs)

    

    The name of the contact flow.

     

    You can also create and update contact flows using the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateContactFlowName>`_    


    **Request Syntax** 
    ::

      response = client.update_contact_flow_name(
          InstanceId='string',
          ContactFlowId='string',
          Name='string',
          Description='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance.

      

    
    :type ContactFlowId: string
    :param ContactFlowId: **[REQUIRED]** 

      The identifier of the contact flow.

      

    
    :type Name: string
    :param Name: 

      The name of the contact flow.

      

    
    :type Description: string
    :param Description: 

      The description of the contact flow.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_instance_attribute(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Updates the value for the specified attribute type.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateInstanceAttribute>`_    


    **Request Syntax** 
    ::

      response = client.update_instance_attribute(
          InstanceId='string',
          AttributeType='INBOUND_CALLS'|'OUTBOUND_CALLS'|'CONTACTFLOW_LOGS'|'CONTACT_LENS'|'AUTO_RESOLVE_BEST_VOICES'|'USE_CUSTOM_TTS_VOICES'|'EARLY_MEDIA',
          Value='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type AttributeType: string
    :param AttributeType: **[REQUIRED]** 

      The type of attribute.

      

    
    :type Value: string
    :param Value: **[REQUIRED]** 

      The value for the attribute. Maximum character limit is 100. 

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_instance_storage_config(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Updates an existing configuration for a resource type. This API is idempotent.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateInstanceStorageConfig>`_    


    **Request Syntax** 
    ::

      response = client.update_instance_storage_config(
          InstanceId='string',
          AssociationId='string',
          ResourceType='CHAT_TRANSCRIPTS'|'CALL_RECORDINGS'|'SCHEDULED_REPORTS'|'MEDIA_STREAMS'|'CONTACT_TRACE_RECORDS'|'AGENT_EVENTS',
          StorageConfig={
              'AssociationId': 'string',
              'StorageType': 'S3'|'KINESIS_VIDEO_STREAM'|'KINESIS_STREAM'|'KINESIS_FIREHOSE',
              'S3Config': {
                  'BucketName': 'string',
                  'BucketPrefix': 'string',
                  'EncryptionConfig': {
                      'EncryptionType': 'KMS',
                      'KeyId': 'string'
                  }
              },
              'KinesisVideoStreamConfig': {
                  'Prefix': 'string',
                  'RetentionPeriodHours': 123,
                  'EncryptionConfig': {
                      'EncryptionType': 'KMS',
                      'KeyId': 'string'
                  }
              },
              'KinesisStreamConfig': {
                  'StreamArn': 'string'
              },
              'KinesisFirehoseConfig': {
                  'FirehoseArn': 'string'
              }
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type AssociationId: string
    :param AssociationId: **[REQUIRED]** 

      The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      A valid resource type.

      

    
    :type StorageConfig: dict
    :param StorageConfig: **[REQUIRED]** 

      The storage configuration for the instance.

      

    
      - **AssociationId** *(string) --* 

        The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

        

      
      - **StorageType** *(string) --* **[REQUIRED]** 

        A valid storage type.

        

      
      - **S3Config** *(dict) --* 

        The S3 bucket configuration.

        

      
        - **BucketName** *(string) --* **[REQUIRED]** 

          The S3 bucket name.

          

        
        - **BucketPrefix** *(string) --* **[REQUIRED]** 

          The S3 bucket prefix.

          

        
        - **EncryptionConfig** *(dict) --* 

          The Amazon S3 encryption configuration.

          

        
          - **EncryptionType** *(string) --* **[REQUIRED]** 

            The type of encryption.

            

          
          - **KeyId** *(string) --* **[REQUIRED]** 

            The identifier of the encryption key.

            

          
        
      
      - **KinesisVideoStreamConfig** *(dict) --* 

        The configuration of the Kinesis video stream.

        

      
        - **Prefix** *(string) --* **[REQUIRED]** 

          The prefix of the video stream.

          

        
        - **RetentionPeriodHours** *(integer) --* **[REQUIRED]** 

          The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.

           

          The default value is 0, indicating that the stream does not persist data.

          

        
        - **EncryptionConfig** *(dict) --* **[REQUIRED]** 

          The encryption configuration.

          

        
          - **EncryptionType** *(string) --* **[REQUIRED]** 

            The type of encryption.

            

          
          - **KeyId** *(string) --* **[REQUIRED]** 

            The identifier of the encryption key.

            

          
        
      
      - **KinesisStreamConfig** *(dict) --* 

        The configuration of the Kinesis data stream.

        

      
        - **StreamArn** *(string) --* **[REQUIRED]** 

          The Amazon Resource Name (ARN) of the data stream.

          

        
      
      - **KinesisFirehoseConfig** *(dict) --* 

        The configuration of the Kinesis Firehose delivery stream.

        

      
        - **FirehoseArn** *(string) --* **[REQUIRED]** 

          The Amazon Resource Name (ARN) of the delivery stream.

          

        
      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    

  .. py:method:: update_queue_hours_of_operation(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Updates the hours of operation for the specified queue.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateQueueHoursOfOperation>`_    


    **Request Syntax** 
    ::

      response = client.update_queue_hours_of_operation(
          InstanceId='string',
          QueueId='string',
          HoursOfOperationId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type HoursOfOperationId: string
    :param HoursOfOperationId: **[REQUIRED]** 

      The identifier for the hours of operation.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_queue_max_contacts(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Updates the maximum number of contacts allowed in a queue before it is considered full.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateQueueMaxContacts>`_    


    **Request Syntax** 
    ::

      response = client.update_queue_max_contacts(
          InstanceId='string',
          QueueId='string',
          MaxContacts=123
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type MaxContacts: integer
    :param MaxContacts: 

      The maximum number of contacts that can be in the queue before it is considered full.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_queue_name(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Updates the name and description of a queue. At least ``Name`` or ``Description`` must be provided.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateQueueName>`_    


    **Request Syntax** 
    ::

      response = client.update_queue_name(
          InstanceId='string',
          QueueId='string',
          Name='string',
          Description='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type Name: string
    :param Name: 

      The name of the queue.

      

    
    :type Description: string
    :param Description: 

      The description of the queue.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_queue_outbound_caller_config(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Updates the outbound caller ID name, number, and outbound whisper flow for a specified queue.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateQueueOutboundCallerConfig>`_    


    **Request Syntax** 
    ::

      response = client.update_queue_outbound_caller_config(
          InstanceId='string',
          QueueId='string',
          OutboundCallerConfig={
              'OutboundCallerIdName': 'string',
              'OutboundCallerIdNumberId': 'string',
              'OutboundFlowId': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type OutboundCallerConfig: dict
    :param OutboundCallerConfig: **[REQUIRED]** 

      The outbound caller ID name, number, and outbound whisper flow.

      

    
      - **OutboundCallerIdName** *(string) --* 

        The caller ID name.

        

      
      - **OutboundCallerIdNumberId** *(string) --* 

        The caller ID number.

        

      
      - **OutboundFlowId** *(string) --* 

        The outbound whisper flow to be used during an outbound call.

        

      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_queue_status(**kwargs)

    

    This API is in preview release for Amazon Connect and is subject to change.

     

    Updates the status of the queue.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateQueueStatus>`_    


    **Request Syntax** 
    ::

      response = client.update_queue_status(
          InstanceId='string',
          QueueId='string',
          Status='ENABLED'|'DISABLED'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type Status: string
    :param Status: **[REQUIRED]** 

      The status of the queue.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_quick_connect_config(**kwargs)

    

    Updates the configuration settings for the specified quick connect.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateQuickConnectConfig>`_    


    **Request Syntax** 
    ::

      response = client.update_quick_connect_config(
          InstanceId='string',
          QuickConnectId='string',
          QuickConnectConfig={
              'QuickConnectType': 'USER'|'QUEUE'|'PHONE_NUMBER',
              'UserConfig': {
                  'UserId': 'string',
                  'ContactFlowId': 'string'
              },
              'QueueConfig': {
                  'QueueId': 'string',
                  'ContactFlowId': 'string'
              },
              'PhoneConfig': {
                  'PhoneNumber': 'string'
              }
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QuickConnectId: string
    :param QuickConnectId: **[REQUIRED]** 

      The identifier for the quick connect.

      

    
    :type QuickConnectConfig: dict
    :param QuickConnectConfig: **[REQUIRED]** 

      Information about the configuration settings for the quick connect.

      

    
      - **QuickConnectType** *(string) --* **[REQUIRED]** 

        The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE). 

        

      
      - **UserConfig** *(dict) --* 

        The user configuration. This is required only if QuickConnectType is USER.

        

      
        - **UserId** *(string) --* **[REQUIRED]** 

          The identifier of the user.

          

        
        - **ContactFlowId** *(string) --* **[REQUIRED]** 

          The identifier of the contact flow.

          

        
      
      - **QueueConfig** *(dict) --* 

        The queue configuration. This is required only if QuickConnectType is QUEUE.

        

      
        - **QueueId** *(string) --* **[REQUIRED]** 

          The identifier for the queue.

          

        
        - **ContactFlowId** *(string) --* **[REQUIRED]** 

          The identifier of the contact flow.

          

        
      
      - **PhoneConfig** *(dict) --* 

        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.

        

      
        - **PhoneNumber** *(string) --* **[REQUIRED]** 

          The phone number in E.164 format.

          

        
      
    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_quick_connect_name(**kwargs)

    

    Updates the name and description of a quick connect. The request accepts the following data in JSON format. At least ``Name`` or ``Description`` must be provided.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateQuickConnectName>`_    


    **Request Syntax** 
    ::

      response = client.update_quick_connect_name(
          InstanceId='string',
          QuickConnectId='string',
          Name='string',
          Description='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QuickConnectId: string
    :param QuickConnectId: **[REQUIRED]** 

      The identifier for the quick connect.

      

    
    :type Name: string
    :param Name: 

      The name of the quick connect.

      

    
    :type Description: string
    :param Description: 

      The description of the quick connect.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_routing_profile_concurrency(**kwargs)

    

    Updates the channels that agents can handle in the Contact Control Panel (CCP) for a routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateRoutingProfileConcurrency>`_    


    **Request Syntax** 
    ::

      response = client.update_routing_profile_concurrency(
          InstanceId='string',
          RoutingProfileId='string',
          MediaConcurrencies=[
              {
                  'Channel': 'VOICE'|'CHAT'|'TASK',
                  'Concurrency': 123
              },
          ]
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type MediaConcurrencies: list
    :param MediaConcurrencies: **[REQUIRED]** 

      The channels that agents can handle in the Contact Control Panel (CCP).

      

    
      - *(dict) --* 

        Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.

        

      
        - **Channel** *(string) --* **[REQUIRED]** 

          The channels that agents can handle in the Contact Control Panel (CCP).

          

        
        - **Concurrency** *(integer) --* **[REQUIRED]** 

          The number of contacts an agent can have on a channel simultaneously.

           

          Valid Range for ``VOICE`` : Minimum value of 1. Maximum value of 1.

           

          Valid Range for ``CHAT`` : Minimum value of 1. Maximum value of 10.

           

          Valid Range for ``TASK`` : Minimum value of 1. Maximum value of 10.

          

        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_routing_profile_default_outbound_queue(**kwargs)

    

    Updates the default outbound queue of a routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateRoutingProfileDefaultOutboundQueue>`_    


    **Request Syntax** 
    ::

      response = client.update_routing_profile_default_outbound_queue(
          InstanceId='string',
          RoutingProfileId='string',
          DefaultOutboundQueueId='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type DefaultOutboundQueueId: string
    :param DefaultOutboundQueueId: **[REQUIRED]** 

      The identifier for the default outbound queue.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_routing_profile_name(**kwargs)

    

    Updates the name and description of a routing profile. The request accepts the following data in JSON format. At least ``Name`` or ``Description`` must be provided.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateRoutingProfileName>`_    


    **Request Syntax** 
    ::

      response = client.update_routing_profile_name(
          InstanceId='string',
          RoutingProfileId='string',
          Name='string',
          Description='string'
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type Name: string
    :param Name: 

      The name of the routing profile. Must not be more than 127 characters.

      

    
    :type Description: string
    :param Description: 

      The description of the routing profile. Must not be more than 250 characters.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_routing_profile_queues(**kwargs)

    

    Updates the properties associated with a set of queues for a routing profile.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateRoutingProfileQueues>`_    


    **Request Syntax** 
    ::

      response = client.update_routing_profile_queues(
          InstanceId='string',
          RoutingProfileId='string',
          QueueConfigs=[
              {
                  'QueueReference': {
                      'QueueId': 'string',
                      'Channel': 'VOICE'|'CHAT'|'TASK'
                  },
                  'Priority': 123,
                  'Delay': 123
              },
          ]
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type QueueConfigs: list
    :param QueueConfigs: **[REQUIRED]** 

      The queues to be updated for this routing profile. Queues must first be associated to the routing profile. You can do this using AssociateRoutingProfileQueues.

      

    
      - *(dict) --* 

        Contains information about the queue and channel for which priority and delay can be set.

        

      
        - **QueueReference** *(dict) --* **[REQUIRED]** 

          Contains information about a queue resource.

          

        
          - **QueueId** *(string) --* **[REQUIRED]** 

            The identifier for the queue.

            

          
          - **Channel** *(string) --* **[REQUIRED]** 

            The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.

            

          
        
        - **Priority** *(integer) --* **[REQUIRED]** 

          The order in which contacts are to be handled for the queue. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ .

          

        
        - **Delay** *(integer) --* **[REQUIRED]** 

          The delay, in seconds, a contact should be in the queue before they are routed to an available agent. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ in the *Amazon Connect Administrator Guide* .

          

        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_user_hierarchy(**kwargs)

    

    Assigns the specified hierarchy group to the specified user.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateUserHierarchy>`_    


    **Request Syntax** 
    ::

      response = client.update_user_hierarchy(
          HierarchyGroupId='string',
          UserId='string',
          InstanceId='string'
      )
    :type HierarchyGroupId: string
    :param HierarchyGroupId: 

      The identifier of the hierarchy group.

      

    
    :type UserId: string
    :param UserId: **[REQUIRED]** 

      The identifier of the user account.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_user_hierarchy_group_name(**kwargs)

    

    Updates the name of the user hierarchy group. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateUserHierarchyGroupName>`_    


    **Request Syntax** 
    ::

      response = client.update_user_hierarchy_group_name(
          Name='string',
          HierarchyGroupId='string',
          InstanceId='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the hierarchy group. Must not be more than 100 characters.

      

    
    :type HierarchyGroupId: string
    :param HierarchyGroupId: **[REQUIRED]** 

      The identifier of the hierarchy group.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.DuplicateResourceException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_user_hierarchy_structure(**kwargs)

    

    Updates the user hierarchy structure: add, remove, and rename user hierarchy levels.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateUserHierarchyStructure>`_    


    **Request Syntax** 
    ::

      response = client.update_user_hierarchy_structure(
          HierarchyStructure={
              'LevelOne': {
                  'Name': 'string'
              },
              'LevelTwo': {
                  'Name': 'string'
              },
              'LevelThree': {
                  'Name': 'string'
              },
              'LevelFour': {
                  'Name': 'string'
              },
              'LevelFive': {
                  'Name': 'string'
              }
          },
          InstanceId='string'
      )
    :type HierarchyStructure: dict
    :param HierarchyStructure: **[REQUIRED]** 

      The hierarchy levels to update.

      

    
      - **LevelOne** *(dict) --* 

        The update for level one.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the user hierarchy level. Must not be more than 50 characters.

          

        
      
      - **LevelTwo** *(dict) --* 

        The update for level two.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the user hierarchy level. Must not be more than 50 characters.

          

        
      
      - **LevelThree** *(dict) --* 

        The update for level three.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the user hierarchy level. Must not be more than 50 characters.

          

        
      
      - **LevelFour** *(dict) --* 

        The update for level four.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the user hierarchy level. Must not be more than 50 characters.

          

        
      
      - **LevelFive** *(dict) --* 

        The update for level five.

        

      
        - **Name** *(string) --* **[REQUIRED]** 

          The name of the user hierarchy level. Must not be more than 50 characters.

          

        
      
    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceInUseException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_user_identity_info(**kwargs)

    

    Updates the identity information for the specified user.

     

    .. warning::

       

      We strongly recommend limiting who has the ability to invoke ``UpdateUserIdentityInfo`` . Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see `Best Practices for Security Profiles <https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html>`__ in the *Amazon Connect Administrator Guide* .

       

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateUserIdentityInfo>`_    


    **Request Syntax** 
    ::

      response = client.update_user_identity_info(
          IdentityInfo={
              'FirstName': 'string',
              'LastName': 'string',
              'Email': 'string'
          },
          UserId='string',
          InstanceId='string'
      )
    :type IdentityInfo: dict
    :param IdentityInfo: **[REQUIRED]** 

      The identity information for the user.

      

    
      - **FirstName** *(string) --* 

        The first name. This is required if you are using Amazon Connect or SAML for identity management.

        

      
      - **LastName** *(string) --* 

        The last name. This is required if you are using Amazon Connect or SAML for identity management.

        

      
      - **Email** *(string) --* 

        The email address. If you are using SAML for identity management and include this parameter, an error is returned.

        

      
    
    :type UserId: string
    :param UserId: **[REQUIRED]** 

      The identifier of the user account.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_user_phone_config(**kwargs)

    

    Updates the phone configuration settings for the specified user.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateUserPhoneConfig>`_    


    **Request Syntax** 
    ::

      response = client.update_user_phone_config(
          PhoneConfig={
              'PhoneType': 'SOFT_PHONE'|'DESK_PHONE',
              'AutoAccept': True|False,
              'AfterContactWorkTimeLimit': 123,
              'DeskPhoneNumber': 'string'
          },
          UserId='string',
          InstanceId='string'
      )
    :type PhoneConfig: dict
    :param PhoneConfig: **[REQUIRED]** 

      Information about phone configuration settings for the user.

      

    
      - **PhoneType** *(string) --* **[REQUIRED]** 

        The phone type.

        

      
      - **AutoAccept** *(boolean) --* 

        The Auto accept setting.

        

      
      - **AfterContactWorkTimeLimit** *(integer) --* 

        The After Call Work (ACW) timeout setting, in seconds.

        

      
      - **DeskPhoneNumber** *(string) --* 

        The phone number for the user's desk phone.

        

      
    
    :type UserId: string
    :param UserId: **[REQUIRED]** 

      The identifier of the user account.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_user_routing_profile(**kwargs)

    

    Assigns the specified routing profile to the specified user.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateUserRoutingProfile>`_    


    **Request Syntax** 
    ::

      response = client.update_user_routing_profile(
          RoutingProfileId='string',
          UserId='string',
          InstanceId='string'
      )
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile for the user.

      

    
    :type UserId: string
    :param UserId: **[REQUIRED]** 

      The identifier of the user account.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

  .. py:method:: update_user_security_profiles(**kwargs)

    

    Assigns the specified security profiles to the specified user.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/UpdateUserSecurityProfiles>`_    


    **Request Syntax** 
    ::

      response = client.update_user_security_profiles(
          SecurityProfileIds=[
              'string',
          ],
          UserId='string',
          InstanceId='string'
      )
    :type SecurityProfileIds: list
    :param SecurityProfileIds: **[REQUIRED]** 

      The identifiers of the security profiles for the user.

      

    
      - *(string) --* 

      
  
    :type UserId: string
    :param UserId: **[REQUIRED]** 

      The identifier of the user account.

      

    
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`Connect.Client.exceptions.InvalidRequestException`

    
    *     :py:class:`Connect.Client.exceptions.InvalidParameterException`

    
    *     :py:class:`Connect.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`Connect.Client.exceptions.ThrottlingException`

    
    *     :py:class:`Connect.Client.exceptions.InternalServiceException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`Connect.Paginator.GetMetricData`


* :py:class:`Connect.Paginator.ListApprovedOrigins`


* :py:class:`Connect.Paginator.ListBots`


* :py:class:`Connect.Paginator.ListContactFlows`


* :py:class:`Connect.Paginator.ListHoursOfOperations`


* :py:class:`Connect.Paginator.ListInstanceAttributes`


* :py:class:`Connect.Paginator.ListInstanceStorageConfigs`


* :py:class:`Connect.Paginator.ListInstances`


* :py:class:`Connect.Paginator.ListIntegrationAssociations`


* :py:class:`Connect.Paginator.ListLambdaFunctions`


* :py:class:`Connect.Paginator.ListLexBots`


* :py:class:`Connect.Paginator.ListPhoneNumbers`


* :py:class:`Connect.Paginator.ListPrompts`


* :py:class:`Connect.Paginator.ListQueueQuickConnects`


* :py:class:`Connect.Paginator.ListQueues`


* :py:class:`Connect.Paginator.ListQuickConnects`


* :py:class:`Connect.Paginator.ListRoutingProfileQueues`


* :py:class:`Connect.Paginator.ListRoutingProfiles`


* :py:class:`Connect.Paginator.ListSecurityKeys`


* :py:class:`Connect.Paginator.ListSecurityProfiles`


* :py:class:`Connect.Paginator.ListUseCases`


* :py:class:`Connect.Paginator.ListUserHierarchyGroups`


* :py:class:`Connect.Paginator.ListUsers`



.. py:class:: Connect.Paginator.GetMetricData

  ::

    
    paginator = client.get_paginator('get_metric_data')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.get_metric_data`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/GetMetricData>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          StartTime=datetime(2015, 1, 1),
          EndTime=datetime(2015, 1, 1),
          Filters={
              'Queues': [
                  'string',
              ],
              'Channels': [
                  'VOICE'|'CHAT'|'TASK',
              ]
          },
          Groupings=[
              'QUEUE'|'CHANNEL',
          ],
          HistoricalMetrics=[
              {
                  'Name': 'CONTACTS_QUEUED'|'CONTACTS_HANDLED'|'CONTACTS_ABANDONED'|'CONTACTS_CONSULTED'|'CONTACTS_AGENT_HUNG_UP_FIRST'|'CONTACTS_HANDLED_INCOMING'|'CONTACTS_HANDLED_OUTBOUND'|'CONTACTS_HOLD_ABANDONS'|'CONTACTS_TRANSFERRED_IN'|'CONTACTS_TRANSFERRED_OUT'|'CONTACTS_TRANSFERRED_IN_FROM_QUEUE'|'CONTACTS_TRANSFERRED_OUT_FROM_QUEUE'|'CONTACTS_MISSED'|'CALLBACK_CONTACTS_HANDLED'|'API_CONTACTS_HANDLED'|'OCCUPANCY'|'HANDLE_TIME'|'AFTER_CONTACT_WORK_TIME'|'QUEUED_TIME'|'ABANDON_TIME'|'QUEUE_ANSWER_TIME'|'HOLD_TIME'|'INTERACTION_TIME'|'INTERACTION_AND_HOLD_TIME'|'SERVICE_LEVEL',
                  'Threshold': {
                      'Comparison': 'LT',
                      'ThresholdValue': 123.0
                  },
                  'Statistic': 'SUM'|'MAX'|'AVG',
                  'Unit': 'SECONDS'|'COUNT'|'PERCENT'
              },
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type StartTime: datetime
    :param StartTime: **[REQUIRED]** 

      The timestamp, in UNIX Epoch time format, at which to start the reporting interval for the retrieval of historical metrics data. The time must be specified using a multiple of 5 minutes, such as 10:05, 10:10, 10:15.

       

      The start time cannot be earlier than 24 hours before the time of the request. Historical metrics are available only for 24 hours.

      

    
    :type EndTime: datetime
    :param EndTime: **[REQUIRED]** 

      The timestamp, in UNIX Epoch time format, at which to end the reporting interval for the retrieval of historical metrics data. The time must be specified using an interval of 5 minutes, such as 11:00, 11:05, 11:10, and must be later than the start time timestamp.

       

      The time range between the start and end time must be less than 24 hours.

      

    
    :type Filters: dict
    :param Filters: **[REQUIRED]** 

      The queues, up to 100, or channels, to use to filter the metrics returned. Metric data is retrieved only for the resources associated with the queues or channels included in the filter. You can include both queue IDs and queue ARNs in the same request. VOICE, CHAT, and TASK channels are supported.

       

      .. note::

         

        To filter by ``Queues`` , enter the queue ID/ARN, not the name of the queue.

         

      

    
      - **Queues** *(list) --* 

        The queues to use to filter the metrics. You can specify up to 100 queues per request.

        

      
        - *(string) --* 

        
    
      - **Channels** *(list) --* 

        The channel to use to filter the metrics.

        

      
        - *(string) --* 

        
    
    
    :type Groupings: list
    :param Groupings: 

      The grouping applied to the metrics returned. For example, when results are grouped by queue, the metrics returned are grouped by queue. The values returned apply to the metrics for each queue rather than aggregated for all queues.

       

      If no grouping is specified, a summary of metrics for all queues is returned.

      

    
      - *(string) --* 

      
  
    :type HistoricalMetrics: list
    :param HistoricalMetrics: **[REQUIRED]** 

      The metrics to retrieve. Specify the name, unit, and statistic for each metric. The following historical metrics are available. For a description of each metric, see `Historical Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

       

      .. note::

         

        This API does not support a contacts incoming metric (there's no CONTACTS_INCOMING metric missing from the documented list). 

         

        ABANDON_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        AFTER_CONTACT_WORK_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        API_CONTACTS_HANDLED  

      Unit: COUNT

       

      Statistic: SUM

        CALLBACK_CONTACTS_HANDLED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_ABANDONED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_AGENT_HUNG_UP_FIRST  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_CONSULTED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HANDLED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HANDLED_INCOMING  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HANDLED_OUTBOUND  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_HOLD_ABANDONS  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_MISSED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_QUEUED  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_IN  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_IN_FROM_QUEUE  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_OUT  

      Unit: COUNT

       

      Statistic: SUM

        CONTACTS_TRANSFERRED_OUT_FROM_QUEUE  

      Unit: COUNT

       

      Statistic: SUM

        HANDLE_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        HOLD_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        INTERACTION_AND_HOLD_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        INTERACTION_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        OCCUPANCY  

      Unit: PERCENT

       

      Statistic: AVG

        QUEUE_ANSWER_TIME  

      Unit: SECONDS

       

      Statistic: AVG

        QUEUED_TIME  

      Unit: SECONDS

       

      Statistic: MAX

        SERVICE_LEVEL  

      You can include up to 20 SERVICE_LEVEL metrics in a request.

       

      Unit: PERCENT

       

      Statistic: AVG

       

      Threshold: For ``ThresholdValue`` , enter any whole number from 1 to 604800 (inclusive), in seconds. For ``Comparison`` , you must enter ``LT`` (for "Less than"). 

        

    
      - *(dict) --* 

        Contains information about a historical metric. For a description of each metric, see `Historical Metrics Definitions <https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html>`__ in the *Amazon Connect Administrator Guide* .

        

      
        - **Name** *(string) --* 

          The name of the metric.

          

        
        - **Threshold** *(dict) --* 

          The threshold for the metric, used with service level metrics.

          

        
          - **Comparison** *(string) --* 

            The type of comparison. Only "less than" (LT) comparisons are supported.

            

          
          - **ThresholdValue** *(float) --* 

            The threshold value to compare.

            

          
        
        - **Statistic** *(string) --* 

          The statistic for the metric.

          

        
        - **Unit** *(string) --* 

          The unit for the metric.

          

        
      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'MetricResults': [
                {
                    'Dimensions': {
                        'Queue': {
                            'Id': 'string',
                            'Arn': 'string'
                        },
                        'Channel': 'VOICE'|'CHAT'|'TASK'
                    },
                    'Collections': [
                        {
                            'Metric': {
                                'Name': 'CONTACTS_QUEUED'|'CONTACTS_HANDLED'|'CONTACTS_ABANDONED'|'CONTACTS_CONSULTED'|'CONTACTS_AGENT_HUNG_UP_FIRST'|'CONTACTS_HANDLED_INCOMING'|'CONTACTS_HANDLED_OUTBOUND'|'CONTACTS_HOLD_ABANDONS'|'CONTACTS_TRANSFERRED_IN'|'CONTACTS_TRANSFERRED_OUT'|'CONTACTS_TRANSFERRED_IN_FROM_QUEUE'|'CONTACTS_TRANSFERRED_OUT_FROM_QUEUE'|'CONTACTS_MISSED'|'CALLBACK_CONTACTS_HANDLED'|'API_CONTACTS_HANDLED'|'OCCUPANCY'|'HANDLE_TIME'|'AFTER_CONTACT_WORK_TIME'|'QUEUED_TIME'|'ABANDON_TIME'|'QUEUE_ANSWER_TIME'|'HOLD_TIME'|'INTERACTION_TIME'|'INTERACTION_AND_HOLD_TIME'|'SERVICE_LEVEL',
                                'Threshold': {
                                    'Comparison': 'LT',
                                    'ThresholdValue': 123.0
                                },
                                'Statistic': 'SUM'|'MAX'|'AVG',
                                'Unit': 'SECONDS'|'COUNT'|'PERCENT'
                            },
                            'Value': 123.0
                        },
                    ]
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **MetricResults** *(list) --* 

          Information about the historical metrics.

           

          If no grouping is specified, a summary of metric data is returned.

          
          

          - *(dict) --* 

            Contains information about the historical metrics retrieved.

            
            

            - **Dimensions** *(dict) --* 

              The dimension for the metrics.

              
              

              - **Queue** *(dict) --* 

                Information about the queue for which metrics are returned.

                
                

                - **Id** *(string) --* 

                  The identifier of the queue.

                  
                

                - **Arn** *(string) --* 

                  The Amazon Resource Name (ARN) of the queue.

                  
            
              

              - **Channel** *(string) --* 

                The channel used for grouping and filters.

                
          
            

            - **Collections** *(list) --* 

              The set of metrics.

              
              

              - *(dict) --* 

                Contains the data for a historical metric.

                
                

                - **Metric** *(dict) --* 

                  Information about the metric.

                  
                  

                  - **Name** *(string) --* 

                    The name of the metric.

                    
                  

                  - **Threshold** *(dict) --* 

                    The threshold for the metric, used with service level metrics.

                    
                    

                    - **Comparison** *(string) --* 

                      The type of comparison. Only "less than" (LT) comparisons are supported.

                      
                    

                    - **ThresholdValue** *(float) --* 

                      The threshold value to compare.

                      
                
                  

                  - **Statistic** *(string) --* 

                    The statistic for the metric.

                    
                  

                  - **Unit** *(string) --* 

                    The unit for the metric.

                    
              
                

                - **Value** *(float) --* 

                  The value of the metric.

                  
            
          
        
      
    

.. py:class:: Connect.Paginator.ListApprovedOrigins

  ::

    
    paginator = client.get_paginator('list_approved_origins')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_approved_origins`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListApprovedOrigins>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Origins': [
                'string',
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Origins** *(list) --* 

          The approved origins.

          
          

          - *(string) --* 
      
    

.. py:class:: Connect.Paginator.ListBots

  ::

    
    paginator = client.get_paginator('list_bots')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_bots`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListBots>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          LexVersion='V1'|'V2',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type LexVersion: string
    :param LexVersion: **[REQUIRED]** 

      The version of Amazon Lex or Amazon Lex V2.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LexBots': [
                {
                    'LexBot': {
                        'Name': 'string',
                        'LexRegion': 'string'
                    },
                    'LexV2Bot': {
                        'AliasArn': 'string'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LexBots** *(list) --* 

          The names and Regions of the Amazon Lex or Amazon Lex V2 bots associated with the specified instance.

          
          

          - *(dict) --* 

            Configuration information of an Amazon Lex or Amazon Lex V2 bot.

            
            

            - **LexBot** *(dict) --* 

              Configuration information of an Amazon Lex bot.

              
              

              - **Name** *(string) --* 

                The name of the Amazon Lex bot.

                
              

              - **LexRegion** *(string) --* 

                The Region that the Amazon Lex bot was created in.

                
          
            

            - **LexV2Bot** *(dict) --* 

              Configuration information of an Amazon Lex V2 bot.

              
              

              - **AliasArn** *(string) --* 

                The Amazon Resource Name (ARN) of the Amazon Lex V2 bot.

                
          
        
      
    

.. py:class:: Connect.Paginator.ListContactFlows

  ::

    
    paginator = client.get_paginator('list_contact_flows')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_contact_flows`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListContactFlows>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          ContactFlowTypes=[
              'CONTACT_FLOW'|'CUSTOMER_QUEUE'|'CUSTOMER_HOLD'|'CUSTOMER_WHISPER'|'AGENT_HOLD'|'AGENT_WHISPER'|'OUTBOUND_WHISPER'|'AGENT_TRANSFER'|'QUEUE_TRANSFER',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ContactFlowTypes: list
    :param ContactFlowTypes: 

      The type of contact flow.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ContactFlowSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'ContactFlowType': 'CONTACT_FLOW'|'CUSTOMER_QUEUE'|'CUSTOMER_HOLD'|'CUSTOMER_WHISPER'|'AGENT_HOLD'|'AGENT_WHISPER'|'OUTBOUND_WHISPER'|'AGENT_TRANSFER'|'QUEUE_TRANSFER'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ContactFlowSummaryList** *(list) --* 

          Information about the contact flows.

          
          

          - *(dict) --* 

            Contains summary information about a contact flow.

             

            You can also create and update contact flows using the `Amazon Connect Flow language <https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html>`__ .

            
            

            - **Id** *(string) --* 

              The identifier of the contact flow.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the contact flow.

              
            

            - **Name** *(string) --* 

              The name of the contact flow.

              
            

            - **ContactFlowType** *(string) --* 

              The type of contact flow.

              
        
      
    

.. py:class:: Connect.Paginator.ListHoursOfOperations

  ::

    
    paginator = client.get_paginator('list_hours_of_operations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_hours_of_operations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListHoursOfOperations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'HoursOfOperationSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **HoursOfOperationSummaryList** *(list) --* 

          Information about the hours of operation.

          
          

          - *(dict) --* 

            Contains summary information about hours of operation for a contact center.

            
            

            - **Id** *(string) --* 

              The identifier of the hours of operation.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hours of operation.

              
            

            - **Name** *(string) --* 

              The name of the hours of operation.

              
        
      
    

.. py:class:: Connect.Paginator.ListInstanceAttributes

  ::

    
    paginator = client.get_paginator('list_instance_attributes')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_instance_attributes`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListInstanceAttributes>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Attributes': [
                {
                    'AttributeType': 'INBOUND_CALLS'|'OUTBOUND_CALLS'|'CONTACTFLOW_LOGS'|'CONTACT_LENS'|'AUTO_RESOLVE_BEST_VOICES'|'USE_CUSTOM_TTS_VOICES'|'EARLY_MEDIA',
                    'Value': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Attributes** *(list) --* 

          The attribute types.

          
          

          - *(dict) --* 

            A toggle for an individual feature at the instance level.

            
            

            - **AttributeType** *(string) --* 

              The type of attribute.

              
            

            - **Value** *(string) --* 

              The value of the attribute.

              
        
      
    

.. py:class:: Connect.Paginator.ListInstanceStorageConfigs

  ::

    
    paginator = client.get_paginator('list_instance_storage_configs')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_instance_storage_configs`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListInstanceStorageConfigs>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          ResourceType='CHAT_TRANSCRIPTS'|'CALL_RECORDINGS'|'SCHEDULED_REPORTS'|'MEDIA_STREAMS'|'CONTACT_TRACE_RECORDS'|'AGENT_EVENTS',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type ResourceType: string
    :param ResourceType: **[REQUIRED]** 

      A valid resource type.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'StorageConfigs': [
                {
                    'AssociationId': 'string',
                    'StorageType': 'S3'|'KINESIS_VIDEO_STREAM'|'KINESIS_STREAM'|'KINESIS_FIREHOSE',
                    'S3Config': {
                        'BucketName': 'string',
                        'BucketPrefix': 'string',
                        'EncryptionConfig': {
                            'EncryptionType': 'KMS',
                            'KeyId': 'string'
                        }
                    },
                    'KinesisVideoStreamConfig': {
                        'Prefix': 'string',
                        'RetentionPeriodHours': 123,
                        'EncryptionConfig': {
                            'EncryptionType': 'KMS',
                            'KeyId': 'string'
                        }
                    },
                    'KinesisStreamConfig': {
                        'StreamArn': 'string'
                    },
                    'KinesisFirehoseConfig': {
                        'FirehoseArn': 'string'
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **StorageConfigs** *(list) --* 

          A valid storage type.

          
          

          - *(dict) --* 

            The storage configuration for the instance.

            
            

            - **AssociationId** *(string) --* 

              The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

              
            

            - **StorageType** *(string) --* 

              A valid storage type.

              
            

            - **S3Config** *(dict) --* 

              The S3 bucket configuration.

              
              

              - **BucketName** *(string) --* 

                The S3 bucket name.

                
              

              - **BucketPrefix** *(string) --* 

                The S3 bucket prefix.

                
              

              - **EncryptionConfig** *(dict) --* 

                The Amazon S3 encryption configuration.

                
                

                - **EncryptionType** *(string) --* 

                  The type of encryption.

                  
                

                - **KeyId** *(string) --* 

                  The identifier of the encryption key.

                  
            
          
            

            - **KinesisVideoStreamConfig** *(dict) --* 

              The configuration of the Kinesis video stream.

              
              

              - **Prefix** *(string) --* 

                The prefix of the video stream.

                
              

              - **RetentionPeriodHours** *(integer) --* 

                The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.

                 

                The default value is 0, indicating that the stream does not persist data.

                
              

              - **EncryptionConfig** *(dict) --* 

                The encryption configuration.

                
                

                - **EncryptionType** *(string) --* 

                  The type of encryption.

                  
                

                - **KeyId** *(string) --* 

                  The identifier of the encryption key.

                  
            
          
            

            - **KinesisStreamConfig** *(dict) --* 

              The configuration of the Kinesis data stream.

              
              

              - **StreamArn** *(string) --* 

                The Amazon Resource Name (ARN) of the data stream.

                
          
            

            - **KinesisFirehoseConfig** *(dict) --* 

              The configuration of the Kinesis Firehose delivery stream.

              
              

              - **FirehoseArn** *(string) --* 

                The Amazon Resource Name (ARN) of the delivery stream.

                
          
        
      
    

.. py:class:: Connect.Paginator.ListInstances

  ::

    
    paginator = client.get_paginator('list_instances')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_instances`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListInstances>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'InstanceSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'IdentityManagementType': 'SAML'|'CONNECT_MANAGED'|'EXISTING_DIRECTORY',
                    'InstanceAlias': 'string',
                    'CreatedTime': datetime(2015, 1, 1),
                    'ServiceRole': 'string',
                    'InstanceStatus': 'CREATION_IN_PROGRESS'|'ACTIVE'|'CREATION_FAILED',
                    'InboundCallsEnabled': True|False,
                    'OutboundCallsEnabled': True|False
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **InstanceSummaryList** *(list) --* 

          Information about the instances.

          
          

          - *(dict) --* 

            Information about the instance.

            
            

            - **Id** *(string) --* 

              The identifier of the instance.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the instance.

              
            

            - **IdentityManagementType** *(string) --* 

              The identity management type of the instance.

              
            

            - **InstanceAlias** *(string) --* 

              The alias of the instance.

              
            

            - **CreatedTime** *(datetime) --* 

              When the instance was created.

              
            

            - **ServiceRole** *(string) --* 

              The service role of the instance.

              
            

            - **InstanceStatus** *(string) --* 

              The state of the instance.

              
            

            - **InboundCallsEnabled** *(boolean) --* 

              Whether inbound calls are enabled.

              
            

            - **OutboundCallsEnabled** *(boolean) --* 

              Whether outbound calls are enabled.

              
        
      
    

.. py:class:: Connect.Paginator.ListIntegrationAssociations

  ::

    
    paginator = client.get_paginator('list_integration_associations')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_integration_associations`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListIntegrationAssociations>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'IntegrationAssociationSummaryList': [
                {
                    'IntegrationAssociationId': 'string',
                    'IntegrationAssociationArn': 'string',
                    'InstanceId': 'string',
                    'IntegrationType': 'EVENT',
                    'IntegrationArn': 'string',
                    'SourceApplicationUrl': 'string',
                    'SourceApplicationName': 'string',
                    'SourceType': 'SALESFORCE'|'ZENDESK'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **IntegrationAssociationSummaryList** *(list) --* 

          The AppIntegration associations.

          
          

          - *(dict) --* 

            Contains summary information about the associated AppIntegrations.

            
            

            - **IntegrationAssociationId** *(string) --* 

              The identifier for the AppIntegration association.

              
            

            - **IntegrationAssociationArn** *(string) --* 

              The Amazon Resource Name (ARN) for the AppIntegration association.

              
            

            - **InstanceId** *(string) --* 

              The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

              
            

            - **IntegrationType** *(string) --* 

              The integration type.

              
            

            - **IntegrationArn** *(string) --* 

              The Amazon Resource Name (ARN) for the AppIntegration.

              
            

            - **SourceApplicationUrl** *(string) --* 

              The URL for the external application.

              
            

            - **SourceApplicationName** *(string) --* 

              The user-provided, friendly name for the external application.

              
            

            - **SourceType** *(string) --* 

              The name of the source.

              
        
      
    

.. py:class:: Connect.Paginator.ListLambdaFunctions

  ::

    
    paginator = client.get_paginator('list_lambda_functions')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_lambda_functions`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListLambdaFunctions>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LambdaFunctions': [
                'string',
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LambdaFunctions** *(list) --* 

          The Lambdafunction ARNs associated with the specified instance.

          
          

          - *(string) --* 
      
    

.. py:class:: Connect.Paginator.ListLexBots

  ::

    
    paginator = client.get_paginator('list_lex_bots')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_lex_bots`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListLexBots>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'LexBots': [
                {
                    'Name': 'string',
                    'LexRegion': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **LexBots** *(list) --* 

          The names and Regions of the Amazon Lex bots associated with the specified instance.

          
          

          - *(dict) --* 

            Configuration information of an Amazon Lex bot.

            
            

            - **Name** *(string) --* 

              The name of the Amazon Lex bot.

              
            

            - **LexRegion** *(string) --* 

              The Region that the Amazon Lex bot was created in.

              
        
      
    

.. py:class:: Connect.Paginator.ListPhoneNumbers

  ::

    
    paginator = client.get_paginator('list_phone_numbers')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_phone_numbers`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListPhoneNumbers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PhoneNumberTypes=[
              'TOLL_FREE'|'DID',
          ],
          PhoneNumberCountryCodes=[
              'AF'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BA'|'BW'|'BR'|'IO'|'VG'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CK'|'CR'|'HR'|'CU'|'CW'|'CY'|'CZ'|'CD'|'DK'|'DJ'|'DM'|'DO'|'TL'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'PF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'CI'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'AN'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'KP'|'MP'|'NO'|'OM'|'PK'|'PW'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'CG'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'KR'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'VI'|'UG'|'UA'|'AE'|'GB'|'US'|'UY'|'UZ'|'VU'|'VA'|'VE'|'VN'|'WF'|'EH'|'YE'|'ZM'|'ZW',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PhoneNumberTypes: list
    :param PhoneNumberTypes: 

      The type of phone number.

      

    
      - *(string) --* 

      
  
    :type PhoneNumberCountryCodes: list
    :param PhoneNumberCountryCodes: 

      The ISO country code.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'PhoneNumberSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'PhoneNumber': 'string',
                    'PhoneNumberType': 'TOLL_FREE'|'DID',
                    'PhoneNumberCountryCode': 'AF'|'AL'|'DZ'|'AS'|'AD'|'AO'|'AI'|'AQ'|'AG'|'AR'|'AM'|'AW'|'AU'|'AT'|'AZ'|'BS'|'BH'|'BD'|'BB'|'BY'|'BE'|'BZ'|'BJ'|'BM'|'BT'|'BO'|'BA'|'BW'|'BR'|'IO'|'VG'|'BN'|'BG'|'BF'|'BI'|'KH'|'CM'|'CA'|'CV'|'KY'|'CF'|'TD'|'CL'|'CN'|'CX'|'CC'|'CO'|'KM'|'CK'|'CR'|'HR'|'CU'|'CW'|'CY'|'CZ'|'CD'|'DK'|'DJ'|'DM'|'DO'|'TL'|'EC'|'EG'|'SV'|'GQ'|'ER'|'EE'|'ET'|'FK'|'FO'|'FJ'|'FI'|'FR'|'PF'|'GA'|'GM'|'GE'|'DE'|'GH'|'GI'|'GR'|'GL'|'GD'|'GU'|'GT'|'GG'|'GN'|'GW'|'GY'|'HT'|'HN'|'HK'|'HU'|'IS'|'IN'|'ID'|'IR'|'IQ'|'IE'|'IM'|'IL'|'IT'|'CI'|'JM'|'JP'|'JE'|'JO'|'KZ'|'KE'|'KI'|'KW'|'KG'|'LA'|'LV'|'LB'|'LS'|'LR'|'LY'|'LI'|'LT'|'LU'|'MO'|'MK'|'MG'|'MW'|'MY'|'MV'|'ML'|'MT'|'MH'|'MR'|'MU'|'YT'|'MX'|'FM'|'MD'|'MC'|'MN'|'ME'|'MS'|'MA'|'MZ'|'MM'|'NA'|'NR'|'NP'|'NL'|'AN'|'NC'|'NZ'|'NI'|'NE'|'NG'|'NU'|'KP'|'MP'|'NO'|'OM'|'PK'|'PW'|'PA'|'PG'|'PY'|'PE'|'PH'|'PN'|'PL'|'PT'|'PR'|'QA'|'CG'|'RE'|'RO'|'RU'|'RW'|'BL'|'SH'|'KN'|'LC'|'MF'|'PM'|'VC'|'WS'|'SM'|'ST'|'SA'|'SN'|'RS'|'SC'|'SL'|'SG'|'SX'|'SK'|'SI'|'SB'|'SO'|'ZA'|'KR'|'ES'|'LK'|'SD'|'SR'|'SJ'|'SZ'|'SE'|'CH'|'SY'|'TW'|'TJ'|'TZ'|'TH'|'TG'|'TK'|'TO'|'TT'|'TN'|'TR'|'TM'|'TC'|'TV'|'VI'|'UG'|'UA'|'AE'|'GB'|'US'|'UY'|'UZ'|'VU'|'VA'|'VE'|'VN'|'WF'|'EH'|'YE'|'ZM'|'ZW'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **PhoneNumberSummaryList** *(list) --* 

          Information about the phone numbers.

          
          

          - *(dict) --* 

            Contains summary information about a phone number for a contact center.

            
            

            - **Id** *(string) --* 

              The identifier of the phone number.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the phone number.

              
            

            - **PhoneNumber** *(string) --* 

              The phone number.

              
            

            - **PhoneNumberType** *(string) --* 

              The type of phone number.

              
            

            - **PhoneNumberCountryCode** *(string) --* 

              The ISO country code.

              
        
      
    

.. py:class:: Connect.Paginator.ListPrompts

  ::

    
    paginator = client.get_paginator('list_prompts')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_prompts`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListPrompts>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'PromptSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **PromptSummaryList** *(list) --* 

          Information about the prompts.

          
          

          - *(dict) --* 

            Contains information about the prompt.

            
            

            - **Id** *(string) --* 

              The identifier of the prompt.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the prompt.

              
            

            - **Name** *(string) --* 

              The name of the prompt.

              
        
      
    

.. py:class:: Connect.Paginator.ListQueueQuickConnects

  ::

    
    paginator = client.get_paginator('list_queue_quick_connects')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_queue_quick_connects`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListQueueQuickConnects>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          QueueId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueId: string
    :param QueueId: **[REQUIRED]** 

      The identifier for the queue.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QuickConnectSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'QuickConnectType': 'USER'|'QUEUE'|'PHONE_NUMBER'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QuickConnectSummaryList** *(list) --* 

          Information about the quick connects.

          
          

          - *(dict) --* 

            Contains summary information about a quick connect.

            
            

            - **Id** *(string) --* 

              The identifier for the quick connect.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the quick connect.

              
            

            - **Name** *(string) --* 

              The name of the quick connect.

              
            

            - **QuickConnectType** *(string) --* 

              The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).

              
        
      
    

.. py:class:: Connect.Paginator.ListQueues

  ::

    
    paginator = client.get_paginator('list_queues')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_queues`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListQueues>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          QueueTypes=[
              'STANDARD'|'AGENT',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QueueTypes: list
    :param QueueTypes: 

      The type of queue.

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QueueSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'QueueType': 'STANDARD'|'AGENT'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QueueSummaryList** *(list) --* 

          Information about the queues.

          
          

          - *(dict) --* 

            Contains summary information about a queue.

            
            

            - **Id** *(string) --* 

              The identifier of the queue.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the queue.

              
            

            - **Name** *(string) --* 

              The name of the queue.

              
            

            - **QueueType** *(string) --* 

              The type of queue.

              
        
      
    

.. py:class:: Connect.Paginator.ListQuickConnects

  ::

    
    paginator = client.get_paginator('list_quick_connects')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_quick_connects`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListQuickConnects>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          QuickConnectTypes=[
              'USER'|'QUEUE'|'PHONE_NUMBER',
          ],
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type QuickConnectTypes: list
    :param QuickConnectTypes: 

      The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).

      

    
      - *(string) --* 

      
  
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'QuickConnectSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string',
                    'QuickConnectType': 'USER'|'QUEUE'|'PHONE_NUMBER'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **QuickConnectSummaryList** *(list) --* 

          Information about the quick connects.

          
          

          - *(dict) --* 

            Contains summary information about a quick connect.

            
            

            - **Id** *(string) --* 

              The identifier for the quick connect.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the quick connect.

              
            

            - **Name** *(string) --* 

              The name of the quick connect.

              
            

            - **QuickConnectType** *(string) --* 

              The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).

              
        
      
    

.. py:class:: Connect.Paginator.ListRoutingProfileQueues

  ::

    
    paginator = client.get_paginator('list_routing_profile_queues')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_routing_profile_queues`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListRoutingProfileQueues>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          RoutingProfileId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type RoutingProfileId: string
    :param RoutingProfileId: **[REQUIRED]** 

      The identifier of the routing profile.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RoutingProfileQueueConfigSummaryList': [
                {
                    'QueueId': 'string',
                    'QueueArn': 'string',
                    'QueueName': 'string',
                    'Priority': 123,
                    'Delay': 123,
                    'Channel': 'VOICE'|'CHAT'|'TASK'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RoutingProfileQueueConfigSummaryList** *(list) --* 

          Information about the routing profiles.

          
          

          - *(dict) --* 

            Contains summary information about a routing profile queue.

            
            

            - **QueueId** *(string) --* 

              The identifier for the queue.

              
            

            - **QueueArn** *(string) --* 

              The Amazon Resource Name (ARN) of the queue.

              
            

            - **QueueName** *(string) --* 

              The name of the queue.

              
            

            - **Priority** *(integer) --* 

              The order in which contacts are to be handled for the queue. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ .

              
            

            - **Delay** *(integer) --* 

              The delay, in seconds, that a contact should be in the queue before they are routed to an available agent. For more information, see `Queues\: priority and delay <https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html>`__ in the *Amazon Connect Administrator Guide* .

              
            

            - **Channel** *(string) --* 

              The channels this queue supports.

              
        
      
    

.. py:class:: Connect.Paginator.ListRoutingProfiles

  ::

    
    paginator = client.get_paginator('list_routing_profiles')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_routing_profiles`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListRoutingProfiles>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RoutingProfileSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RoutingProfileSummaryList** *(list) --* 

          Information about the routing profiles.

          
          

          - *(dict) --* 

            Contains summary information about a routing profile.

            
            

            - **Id** *(string) --* 

              The identifier of the routing profile.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the routing profile.

              
            

            - **Name** *(string) --* 

              The name of the routing profile.

              
        
      
    

.. py:class:: Connect.Paginator.ListSecurityKeys

  ::

    
    paginator = client.get_paginator('list_security_keys')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_security_keys`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListSecurityKeys>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecurityKeys': [
                {
                    'AssociationId': 'string',
                    'Key': 'string',
                    'CreationTime': datetime(2015, 1, 1)
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **SecurityKeys** *(list) --* 

          The security keys.

          
          

          - *(dict) --* 

            Configuration information of the security key.

            
            

            - **AssociationId** *(string) --* 

              The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.

              
            

            - **Key** *(string) --* 

              The key of the security key.

              
            

            - **CreationTime** *(datetime) --* 

              When the security key was created.

              
        
      
    

.. py:class:: Connect.Paginator.ListSecurityProfiles

  ::

    
    paginator = client.get_paginator('list_security_profiles')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_security_profiles`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListSecurityProfiles>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'SecurityProfileSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **SecurityProfileSummaryList** *(list) --* 

          Information about the security profiles.

          
          

          - *(dict) --* 

            Contains information about a security profile.

            
            

            - **Id** *(string) --* 

              The identifier of the security profile.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the security profile.

              
            

            - **Name** *(string) --* 

              The name of the security profile.

              
        
      
    

.. py:class:: Connect.Paginator.ListUseCases

  ::

    
    paginator = client.get_paginator('list_use_cases')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_use_cases`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListUseCases>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          IntegrationAssociationId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type IntegrationAssociationId: string
    :param IntegrationAssociationId: **[REQUIRED]** 

      The identifier for the integration association.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UseCaseSummaryList': [
                {
                    'UseCaseId': 'string',
                    'UseCaseArn': 'string',
                    'UseCaseType': 'RULES_EVALUATION'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UseCaseSummaryList** *(list) --* 

          The use cases.

          
          

          - *(dict) --* 

            Contains the use case.

            
            

            - **UseCaseId** *(string) --* 

              The identifier for the use case.

              
            

            - **UseCaseArn** *(string) --* 

              The Amazon Resource Name (ARN) for the use case.

              
            

            - **UseCaseType** *(string) --* 

              The type of use case to associate to the AppIntegration association. Each AppIntegration association can have only one of each use case type.

              
        
      
    

.. py:class:: Connect.Paginator.ListUserHierarchyGroups

  ::

    
    paginator = client.get_paginator('list_user_hierarchy_groups')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_user_hierarchy_groups`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListUserHierarchyGroups>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UserHierarchyGroupSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UserHierarchyGroupSummaryList** *(list) --* 

          Information about the hierarchy groups.

          
          

          - *(dict) --* 

            Contains summary information about a hierarchy group.

            
            

            - **Id** *(string) --* 

              The identifier of the hierarchy group.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the hierarchy group.

              
            

            - **Name** *(string) --* 

              The name of the hierarchy group.

              
        
      
    

.. py:class:: Connect.Paginator.ListUsers

  ::

    
    paginator = client.get_paginator('list_users')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`Connect.Client.list_users`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/connect-2017-08-08/ListUsers>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          InstanceId='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type InstanceId: string
    :param InstanceId: **[REQUIRED]** 

      The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'UserSummaryList': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'Username': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **UserSummaryList** *(list) --* 

          Information about the users.

          
          

          - *(dict) --* 

            Contains summary information about a user.

            
            

            - **Id** *(string) --* 

              The identifier of the user account.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the user account.

              
            

            - **Username** *(string) --* 

              The Amazon Connect user name of the user account.

              
        
      
    