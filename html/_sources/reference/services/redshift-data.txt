

**********************
RedshiftDataAPIService
**********************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: RedshiftDataAPIService.Client

  A low-level client representing Redshift Data API Service
  

  You can use the Amazon Redshift Data API to run queries on Amazon Redshift tables. You can run individual SQL statements, which are committed if the statement succeeds. 

   

  For more information about the Amazon Redshift Data API, see `Using the Amazon Redshift Data API <https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html>`__ in the *Amazon Redshift Cluster Management Guide* . 

  ::

    
    import boto3
    
    client = boto3.client('redshift-data')

  
  These are the available methods:
  
  *   :py:meth:`~RedshiftDataAPIService.Client.can_paginate`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.cancel_statement`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.describe_statement`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.describe_table`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.execute_statement`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.generate_presigned_url`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.get_paginator`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.get_statement_result`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.get_waiter`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.list_databases`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.list_schemas`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.list_statements`

  
  *   :py:meth:`~RedshiftDataAPIService.Client.list_tables`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: cancel_statement(**kwargs)

    

    Cancels a running query. To be canceled, a query must be running. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/CancelStatement>`_    


    **Request Syntax** 
    ::

      response = client.cancel_statement(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by ``ExecuteStatment`` and ``ListStatements`` . 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Status': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Status** *(boolean) --* 

          A value that indicates whether the cancel statement succeeded (true). 

          
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_statement(**kwargs)

    

    Describes the details about a specific instance when a query was run by the Amazon Redshift Data API. The information includes when the query started, when it finished, the query status, the number of rows returned, and the SQL statement. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/DescribeStatement>`_    


    **Request Syntax** 
    ::

      response = client.describe_statement(
          Id='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by ``ExecuteStatment`` and ``ListStatements`` . 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterIdentifier': 'string',
            'CreatedAt': datetime(2015, 1, 1),
            'Database': 'string',
            'DbUser': 'string',
            'Duration': 123,
            'Error': 'string',
            'HasResultSet': True|False,
            'Id': 'string',
            'QueryParameters': [
                {
                    'name': 'string',
                    'value': 'string'
                },
            ],
            'QueryString': 'string',
            'RedshiftPid': 123,
            'RedshiftQueryId': 123,
            'ResultRows': 123,
            'ResultSize': 123,
            'SecretArn': 'string',
            'Status': 'SUBMITTED'|'PICKED'|'STARTED'|'FINISHED'|'ABORTED'|'FAILED'|'ALL',
            'UpdatedAt': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ClusterIdentifier** *(string) --* 

          The cluster identifier. 

          
        

        - **CreatedAt** *(datetime) --* 

          The date and time (UTC) when the SQL statement was submitted to run. 

          
        

        - **Database** *(string) --* 

          The name of the database. 

          
        

        - **DbUser** *(string) --* 

          The database user name. 

          
        

        - **Duration** *(integer) --* 

          The amount of time in nanoseconds that the statement ran. 

          
        

        - **Error** *(string) --* 

          The error message from the cluster if the SQL statement encountered an error while running. 

          
        

        - **HasResultSet** *(boolean) --* 

          A value that indicates whether the statement has a result set. The result set can be empty. 

          
        

        - **Id** *(string) --* 

          The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 

          
        

        - **QueryParameters** *(list) --* 

          The parameters for the SQL statement.

          
          

          - *(dict) --* 

            A parameter used in a SQL statement.

            
            

            - **name** *(string) --* 

              The name of the parameter.

              
            

            - **value** *(string) --* 

              The value of the parameter. Amazon Redshift implicitly converts to the proper data type. For more inforation, see `Data types <https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html>`__ in the *Amazon Redshift Database Developer Guide* . 

              
        
      
        

        - **QueryString** *(string) --* 

          The SQL statement text. 

          
        

        - **RedshiftPid** *(integer) --* 

          The process identifier from Amazon Redshift. 

          
        

        - **RedshiftQueryId** *(integer) --* 

          The identifier of the query generated by Amazon Redshift. These identifiers are also available in the ``query`` column of the ``STL_QUERY`` system view. 

          
        

        - **ResultRows** *(integer) --* 

          Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. 

          
        

        - **ResultSize** *(integer) --* 

          The size in bytes of the returned results. 

          
        

        - **SecretArn** *(string) --* 

          The name or Amazon Resource Name (ARN) of the secret that enables access to the database. 

          
        

        - **Status** *(string) --* 

          The status of the SQL statement being described. Status values are defined as follows: 

           

           
          * ABORTED - The query run was stopped by the user.  
           
          * ALL - A status value that includes all query statuses. This value can be used to filter results.  
           
          * FAILED - The query run failed.  
           
          * FINISHED - The query has finished running.  
           
          * PICKED - The query has been chosen to be run.  
           
          * STARTED - The query run has started.  
           
          * SUBMITTED - The query was submitted, but not yet processed.  
           

          
        

        - **UpdatedAt** *(datetime) --* 

          The date and time (UTC) that the metadata for the SQL statement was last updated. An example is the time the status last changed. 

          
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

  .. py:method:: describe_table(**kwargs)

    

    Describes the detailed information about a table from metadata in the cluster. The information includes its columns. A token is returned to page through the column list. Depending on the authorization method, use one of the following combinations of request parameters: 

     

     
    * AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.  
     
    * Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the ``redshift:GetClusterCredentials`` operation is required to use this method.  
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/DescribeTable>`_    


    **Request Syntax** 
    ::

      response = client.describe_table(
          ClusterIdentifier='string',
          ConnectedDatabase='string',
          Database='string',
          DbUser='string',
          MaxResults=123,
          NextToken='string',
          Schema='string',
          SecretArn='string',
          Table='string'
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type ConnectedDatabase: string
    :param ConnectedDatabase: 

      A database name. The connected database is specified when you connect with your authentication credentials. 

      

    
    :type Database: string
    :param Database: **[REQUIRED]** 

      The name of the database that contains the tables to be described. If ``ConnectedDatabase`` is not specified, this is also the database to connect to with your authentication credentials.

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of tables to return in the response. If more tables exist than fit in one response, then ``NextToken`` is returned to page through the results. 

      

    
    :type NextToken: string
    :param NextToken: 

      A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

      

    
    :type Schema: string
    :param Schema: 

      The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    :type Table: string
    :param Table: 

      The table name. If no table is specified, then all tables for all matching schemas are returned. If no table and no schema is specified, then all tables for all schemas in the database are returned

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ColumnList': [
                {
                    'columnDefault': 'string',
                    'isCaseSensitive': True|False,
                    'isCurrency': True|False,
                    'isSigned': True|False,
                    'label': 'string',
                    'length': 123,
                    'name': 'string',
                    'nullable': 123,
                    'precision': 123,
                    'scale': 123,
                    'schemaName': 'string',
                    'tableName': 'string',
                    'typeName': 'string'
                },
            ],
            'NextToken': 'string',
            'TableName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ColumnList** *(list) --* 

          A list of columns in the table. 

          
          

          - *(dict) --* 

            The properties (metadata) of a column. 

            
            

            - **columnDefault** *(string) --* 

              The default value of the column. 

              
            

            - **isCaseSensitive** *(boolean) --* 

              A value that indicates whether the column is case-sensitive. 

              
            

            - **isCurrency** *(boolean) --* 

              A value that indicates whether the column contains currency values.

              
            

            - **isSigned** *(boolean) --* 

              A value that indicates whether an integer column is signed.

              
            

            - **label** *(string) --* 

              The label for the column. 

              
            

            - **length** *(integer) --* 

              The length of the column.

              
            

            - **name** *(string) --* 

              The name of the column. 

              
            

            - **nullable** *(integer) --* 

              A value that indicates whether the column is nullable. 

              
            

            - **precision** *(integer) --* 

              The precision value of a decimal number column. 

              
            

            - **scale** *(integer) --* 

              The scale value of a decimal number column. 

              
            

            - **schemaName** *(string) --* 

              The name of the schema that contains the table that includes the column.

              
            

            - **tableName** *(string) --* 

              The name of the table that includes the column. 

              
            

            - **typeName** *(string) --* 

              The database-specific data type of the column. 

              
        
      
        

        - **NextToken** *(string) --* 

          A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

          
        

        - **TableName** *(string) --* 

          The table name. 

          
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

  .. py:method:: execute_statement(**kwargs)

    

    Runs an SQL statement, which can be data manipulation language (DML) or data definition language (DDL). This statement must be a single SQL statement. Depending on the authorization method, use one of the following combinations of request parameters: 

     

     
    * AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.  
     
    * Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the ``redshift:GetClusterCredentials`` operation is required to use this method.  
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ExecuteStatement>`_    


    **Request Syntax** 
    ::

      response = client.execute_statement(
          ClusterIdentifier='string',
          Database='string',
          DbUser='string',
          Parameters=[
              {
                  'name': 'string',
                  'value': 'string'
              },
          ],
          SecretArn='string',
          Sql='string',
          StatementName='string',
          WithEvent=True|False
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type Database: string
    :param Database: 

      The name of the database. This parameter is required when authenticating using temporary credentials.

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type Parameters: list
    :param Parameters: 

      The parameters for the SQL statement.

      

    
      - *(dict) --* 

        A parameter used in a SQL statement.

        

      
        - **name** *(string) --* **[REQUIRED]** 

          The name of the parameter.

          

        
        - **value** *(string) --* **[REQUIRED]** 

          The value of the parameter. Amazon Redshift implicitly converts to the proper data type. For more inforation, see `Data types <https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html>`__ in the *Amazon Redshift Database Developer Guide* . 

          

        
      
  
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    :type Sql: string
    :param Sql: **[REQUIRED]** 

      The SQL statement text to run. 

      

    
    :type StatementName: string
    :param StatementName: 

      The name of the SQL statement. You can name the SQL statement when you create it to identify the query. 

      

    
    :type WithEvent: boolean
    :param WithEvent: 

      A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ClusterIdentifier': 'string',
            'CreatedAt': datetime(2015, 1, 1),
            'Database': 'string',
            'DbUser': 'string',
            'Id': 'string',
            'SecretArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ClusterIdentifier** *(string) --* 

          The cluster identifier. 

          
        

        - **CreatedAt** *(datetime) --* 

          The date and time (UTC) the statement was created. 

          
        

        - **Database** *(string) --* 

          The name of the database.

          
        

        - **DbUser** *(string) --* 

          The database user name.

          
        

        - **Id** *(string) --* 

          The identifier of the statement to be run. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 

          
        

        - **SecretArn** *(string) --* 

          The name or ARN of the secret that enables access to the database. 

          
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ExecuteStatementException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ActiveStatementsExceededException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_statement_result(**kwargs)

    

    Fetches the temporarily cached result of an SQL statement. A token is returned to page through the statement results. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/GetStatementResult>`_    


    **Request Syntax** 
    ::

      response = client.get_statement_result(
          Id='string',
          NextToken='string'
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by ``ExecuteStatment`` and ``ListStatements`` . 

      

    
    :type NextToken: string
    :param NextToken: 

      A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ColumnMetadata': [
                {
                    'columnDefault': 'string',
                    'isCaseSensitive': True|False,
                    'isCurrency': True|False,
                    'isSigned': True|False,
                    'label': 'string',
                    'length': 123,
                    'name': 'string',
                    'nullable': 123,
                    'precision': 123,
                    'scale': 123,
                    'schemaName': 'string',
                    'tableName': 'string',
                    'typeName': 'string'
                },
            ],
            'NextToken': 'string',
            'Records': [
                [
                    {
                        'blobValue': b'bytes',
                        'booleanValue': True|False,
                        'doubleValue': 123.0,
                        'isNull': True|False,
                        'longValue': 123,
                        'stringValue': 'string'
                    },
                ],
            ],
            'TotalNumRows': 123
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ColumnMetadata** *(list) --* 

          The properties (metadata) of a column. 

          
          

          - *(dict) --* 

            The properties (metadata) of a column. 

            
            

            - **columnDefault** *(string) --* 

              The default value of the column. 

              
            

            - **isCaseSensitive** *(boolean) --* 

              A value that indicates whether the column is case-sensitive. 

              
            

            - **isCurrency** *(boolean) --* 

              A value that indicates whether the column contains currency values.

              
            

            - **isSigned** *(boolean) --* 

              A value that indicates whether an integer column is signed.

              
            

            - **label** *(string) --* 

              The label for the column. 

              
            

            - **length** *(integer) --* 

              The length of the column.

              
            

            - **name** *(string) --* 

              The name of the column. 

              
            

            - **nullable** *(integer) --* 

              A value that indicates whether the column is nullable. 

              
            

            - **precision** *(integer) --* 

              The precision value of a decimal number column. 

              
            

            - **scale** *(integer) --* 

              The scale value of a decimal number column. 

              
            

            - **schemaName** *(string) --* 

              The name of the schema that contains the table that includes the column.

              
            

            - **tableName** *(string) --* 

              The name of the table that includes the column. 

              
            

            - **typeName** *(string) --* 

              The database-specific data type of the column. 

              
        
      
        

        - **NextToken** *(string) --* 

          A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

          
        

        - **Records** *(list) --* 

          The results of the SQL statement.

          
          

          - *(list) --* 
            

            - *(dict) --* 

              A data value in a column. 

              
              

              - **blobValue** *(bytes) --* 

                A value of the BLOB data type. 

                
              

              - **booleanValue** *(boolean) --* 

                A value of the Boolean data type. 

                
              

              - **doubleValue** *(float) --* 

                A value of the double data type. 

                
              

              - **isNull** *(boolean) --* 

                A value that indicates whether the data is NULL. 

                
              

              - **longValue** *(integer) --* 

                A value of the long data type. 

                
              

              - **stringValue** *(string) --* 

                A value of the string data type. 

                
          
        
      
        

        - **TotalNumRows** *(integer) --* 

          The total number of rows in the result set returned from a query. You can use this number to estimate the number of calls to the ``GetStatementResult`` operation needed to page through the results. 

          
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_databases(**kwargs)

    

    List the databases in a cluster. A token is returned to page through the database list. Depending on the authorization method, use one of the following combinations of request parameters: 

     

     
    * AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.  
     
    * Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the ``redshift:GetClusterCredentials`` operation is required to use this method.  
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListDatabases>`_    


    **Request Syntax** 
    ::

      response = client.list_databases(
          ClusterIdentifier='string',
          Database='string',
          DbUser='string',
          MaxResults=123,
          NextToken='string',
          SecretArn='string'
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type Database: string
    :param Database: 

      The name of the database. This parameter is required when authenticating using temporary credentials. 

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of databases to return in the response. If more databases exist than fit in one response, then ``NextToken`` is returned to page through the results. 

      

    
    :type NextToken: string
    :param NextToken: 

      A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Databases': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Databases** *(list) --* 

          The names of databases. 

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

          
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

  .. py:method:: list_schemas(**kwargs)

    

    Lists the schemas in a database. A token is returned to page through the schema list. Depending on the authorization method, use one of the following combinations of request parameters: 

     

     
    * AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.  
     
    * Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the ``redshift:GetClusterCredentials`` operation is required to use this method.  
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListSchemas>`_    


    **Request Syntax** 
    ::

      response = client.list_schemas(
          ClusterIdentifier='string',
          ConnectedDatabase='string',
          Database='string',
          DbUser='string',
          MaxResults=123,
          NextToken='string',
          SchemaPattern='string',
          SecretArn='string'
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type ConnectedDatabase: string
    :param ConnectedDatabase: 

      A database name. The connected database is specified when you connect with your authentication credentials. 

      

    
    :type Database: string
    :param Database: **[REQUIRED]** 

      The name of the database that contains the schemas to list. If ``ConnectedDatabase`` is not specified, this is also the database to connect to with your authentication credentials.

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of schemas to return in the response. If more schemas exist than fit in one response, then ``NextToken`` is returned to page through the results. 

      

    
    :type NextToken: string
    :param NextToken: 

      A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

      

    
    :type SchemaPattern: string
    :param SchemaPattern: 

      A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Schemas': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

          
        

        - **Schemas** *(list) --* 

          The schemas that match the request pattern. 

          
          

          - *(string) --* 
      
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

  .. py:method:: list_statements(**kwargs)

    

    List of SQL statements. By default, only finished statements are shown. A token is returned to page through the statement list. 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListStatements>`_    


    **Request Syntax** 
    ::

      response = client.list_statements(
          MaxResults=123,
          NextToken='string',
          RoleLevel=True|False,
          StatementName='string',
          Status='SUBMITTED'|'PICKED'|'STARTED'|'FINISHED'|'ABORTED'|'FAILED'|'ALL'
      )
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of SQL statements to return in the response. If more SQL statements exist than fit in one response, then ``NextToken`` is returned to page through the results. 

      

    
    :type NextToken: string
    :param NextToken: 

      A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

      

    
    :type RoleLevel: boolean
    :param RoleLevel: 

      A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true. 

      

    
    :type StatementName: string
    :param StatementName: 

      The name of the SQL statement specified as input to ``ExecuteStatement`` to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of ``myStatement`` . Data API does a case-sensitive match of SQL statement names to the prefix value you provide. 

      

    
    :type Status: string
    :param Status: 

      The status of the SQL statement to list. Status values are defined as follows: 

       

       
      * ABORTED - The query run was stopped by the user.  
       
      * ALL - A status value that includes all query statuses. This value can be used to filter results.  
       
      * FAILED - The query run failed.  
       
      * FINISHED - The query has finished running.  
       
      * PICKED - The query has been chosen to be run.  
       
      * STARTED - The query run has started.  
       
      * SUBMITTED - The query was submitted, but not yet processed.  
       

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Statements': [
                {
                    'CreatedAt': datetime(2015, 1, 1),
                    'Id': 'string',
                    'QueryParameters': [
                        {
                            'name': 'string',
                            'value': 'string'
                        },
                    ],
                    'QueryString': 'string',
                    'SecretArn': 'string',
                    'StatementName': 'string',
                    'Status': 'SUBMITTED'|'PICKED'|'STARTED'|'FINISHED'|'ABORTED'|'FAILED'|'ALL',
                    'UpdatedAt': datetime(2015, 1, 1)
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

          
        

        - **Statements** *(list) --* 

          The SQL statements. 

          
          

          - *(dict) --* 

            The SQL statement to run.

            
            

            - **CreatedAt** *(datetime) --* 

              The date and time (UTC) the statement was created. 

              
            

            - **Id** *(string) --* 

              The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 

              
            

            - **QueryParameters** *(list) --* 

              The parameters used in a SQL statement.

              
              

              - *(dict) --* 

                A parameter used in a SQL statement.

                
                

                - **name** *(string) --* 

                  The name of the parameter.

                  
                

                - **value** *(string) --* 

                  The value of the parameter. Amazon Redshift implicitly converts to the proper data type. For more inforation, see `Data types <https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html>`__ in the *Amazon Redshift Database Developer Guide* . 

                  
            
          
            

            - **QueryString** *(string) --* 

              The SQL statement.

              
            

            - **SecretArn** *(string) --* 

              The name or Amazon Resource Name (ARN) of the secret that enables access to the database. 

              
            

            - **StatementName** *(string) --* 

              The name of the SQL statement. 

              
            

            - **Status** *(string) --* 

              The status of the SQL statement. An example is the that the SQL statement finished. 

              
            

            - **UpdatedAt** *(datetime) --* 

              The date and time (UTC) that the statement metadata was last updated.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

  .. py:method:: list_tables(**kwargs)

    

    List the tables in a database. If neither ``SchemaPattern`` nor ``TablePattern`` are specified, then all tables in the database are returned. A token is returned to page through the table list. Depending on the authorization method, use one of the following combinations of request parameters: 

     

     
    * AWS Secrets Manager - specify the Amazon Resource Name (ARN) of the secret and the cluster identifier that matches the cluster in the secret.  
     
    * Temporary credentials - specify the cluster identifier, the database name, and the database user name. Permission to call the ``redshift:GetClusterCredentials`` operation is required to use this method.  
     

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListTables>`_    


    **Request Syntax** 
    ::

      response = client.list_tables(
          ClusterIdentifier='string',
          ConnectedDatabase='string',
          Database='string',
          DbUser='string',
          MaxResults=123,
          NextToken='string',
          SchemaPattern='string',
          SecretArn='string',
          TablePattern='string'
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type ConnectedDatabase: string
    :param ConnectedDatabase: 

      A database name. The connected database is specified when you connect with your authentication credentials. 

      

    
    :type Database: string
    :param Database: **[REQUIRED]** 

      The name of the database that contains the tables to list. If ``ConnectedDatabase`` is not specified, this is also the database to connect to with your authentication credentials.

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type MaxResults: integer
    :param MaxResults: 

      The maximum number of tables to return in the response. If more tables exist than fit in one response, then ``NextToken`` is returned to page through the results. 

      

    
    :type NextToken: string
    :param NextToken: 

      A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

      

    
    :type SchemaPattern: string
    :param SchemaPattern: 

      A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. If ``SchemaPattern`` is not specified, then all tables that match ``TablePattern`` are returned. If neither ``SchemaPattern`` or ``TablePattern`` are specified, then all tables are returned. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    :type TablePattern: string
    :param TablePattern: 

      A pattern to filter results by table name. Within a table pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only table name entries matching the search pattern are returned. If ``TablePattern`` is not specified, then all tables that match ``SchemaPattern`` are returned. If neither ``SchemaPattern`` or ``TablePattern`` are specified, then all tables are returned. 

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'NextToken': 'string',
            'Tables': [
                {
                    'name': 'string',
                    'schema': 'string',
                    'type': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **NextToken** *(string) --* 

          A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. 

          
        

        - **Tables** *(list) --* 

          The tables that match the request pattern. 

          
          

          - *(dict) --* 

            The properties of a table. 

            
            

            - **name** *(string) --* 

              The name of the table. 

              
            

            - **schema** *(string) --* 

              The schema containing the table. 

              
            

            - **type** *(string) --* 

              The type of the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. 

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.ValidationException`

    
    *     :py:class:`RedshiftDataAPIService.Client.exceptions.InternalServerException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`RedshiftDataAPIService.Paginator.DescribeTable`


* :py:class:`RedshiftDataAPIService.Paginator.GetStatementResult`


* :py:class:`RedshiftDataAPIService.Paginator.ListDatabases`


* :py:class:`RedshiftDataAPIService.Paginator.ListSchemas`


* :py:class:`RedshiftDataAPIService.Paginator.ListStatements`


* :py:class:`RedshiftDataAPIService.Paginator.ListTables`



.. py:class:: RedshiftDataAPIService.Paginator.DescribeTable

  ::

    
    paginator = client.get_paginator('describe_table')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RedshiftDataAPIService.Client.describe_table`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/DescribeTable>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterIdentifier='string',
          ConnectedDatabase='string',
          Database='string',
          DbUser='string',
          Schema='string',
          SecretArn='string',
          Table='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type ConnectedDatabase: string
    :param ConnectedDatabase: 

      A database name. The connected database is specified when you connect with your authentication credentials. 

      

    
    :type Database: string
    :param Database: **[REQUIRED]** 

      The name of the database that contains the tables to be described. If ``ConnectedDatabase`` is not specified, this is also the database to connect to with your authentication credentials.

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type Schema: string
    :param Schema: 

      The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    :type Table: string
    :param Table: 

      The table name. If no table is specified, then all tables for all matching schemas are returned. If no table and no schema is specified, then all tables for all schemas in the database are returned

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ColumnList': [
                {
                    'columnDefault': 'string',
                    'isCaseSensitive': True|False,
                    'isCurrency': True|False,
                    'isSigned': True|False,
                    'label': 'string',
                    'length': 123,
                    'name': 'string',
                    'nullable': 123,
                    'precision': 123,
                    'scale': 123,
                    'schemaName': 'string',
                    'tableName': 'string',
                    'typeName': 'string'
                },
            ],
            'TableName': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ColumnList** *(list) --* 

          A list of columns in the table. 

          
          

          - *(dict) --* 

            The properties (metadata) of a column. 

            
            

            - **columnDefault** *(string) --* 

              The default value of the column. 

              
            

            - **isCaseSensitive** *(boolean) --* 

              A value that indicates whether the column is case-sensitive. 

              
            

            - **isCurrency** *(boolean) --* 

              A value that indicates whether the column contains currency values.

              
            

            - **isSigned** *(boolean) --* 

              A value that indicates whether an integer column is signed.

              
            

            - **label** *(string) --* 

              The label for the column. 

              
            

            - **length** *(integer) --* 

              The length of the column.

              
            

            - **name** *(string) --* 

              The name of the column. 

              
            

            - **nullable** *(integer) --* 

              A value that indicates whether the column is nullable. 

              
            

            - **precision** *(integer) --* 

              The precision value of a decimal number column. 

              
            

            - **scale** *(integer) --* 

              The scale value of a decimal number column. 

              
            

            - **schemaName** *(string) --* 

              The name of the schema that contains the table that includes the column.

              
            

            - **tableName** *(string) --* 

              The name of the table that includes the column. 

              
            

            - **typeName** *(string) --* 

              The database-specific data type of the column. 

              
        
      
        

        - **TableName** *(string) --* 

          The table name. 

          
    

.. py:class:: RedshiftDataAPIService.Paginator.GetStatementResult

  ::

    
    paginator = client.get_paginator('get_statement_result')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RedshiftDataAPIService.Client.get_statement_result`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/GetStatementResult>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Id='string',
          PaginationConfig={
              'MaxItems': 123,
              'StartingToken': 'string'
          }
      )
    :type Id: string
    :param Id: **[REQUIRED]** 

      The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. This identifier is returned by ``ExecuteStatment`` and ``ListStatements`` . 

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ColumnMetadata': [
                {
                    'columnDefault': 'string',
                    'isCaseSensitive': True|False,
                    'isCurrency': True|False,
                    'isSigned': True|False,
                    'label': 'string',
                    'length': 123,
                    'name': 'string',
                    'nullable': 123,
                    'precision': 123,
                    'scale': 123,
                    'schemaName': 'string',
                    'tableName': 'string',
                    'typeName': 'string'
                },
            ],
            'Records': [
                [
                    {
                        'blobValue': b'bytes',
                        'booleanValue': True|False,
                        'doubleValue': 123.0,
                        'isNull': True|False,
                        'longValue': 123,
                        'stringValue': 'string'
                    },
                ],
            ],
            'TotalNumRows': 123
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ColumnMetadata** *(list) --* 

          The properties (metadata) of a column. 

          
          

          - *(dict) --* 

            The properties (metadata) of a column. 

            
            

            - **columnDefault** *(string) --* 

              The default value of the column. 

              
            

            - **isCaseSensitive** *(boolean) --* 

              A value that indicates whether the column is case-sensitive. 

              
            

            - **isCurrency** *(boolean) --* 

              A value that indicates whether the column contains currency values.

              
            

            - **isSigned** *(boolean) --* 

              A value that indicates whether an integer column is signed.

              
            

            - **label** *(string) --* 

              The label for the column. 

              
            

            - **length** *(integer) --* 

              The length of the column.

              
            

            - **name** *(string) --* 

              The name of the column. 

              
            

            - **nullable** *(integer) --* 

              A value that indicates whether the column is nullable. 

              
            

            - **precision** *(integer) --* 

              The precision value of a decimal number column. 

              
            

            - **scale** *(integer) --* 

              The scale value of a decimal number column. 

              
            

            - **schemaName** *(string) --* 

              The name of the schema that contains the table that includes the column.

              
            

            - **tableName** *(string) --* 

              The name of the table that includes the column. 

              
            

            - **typeName** *(string) --* 

              The database-specific data type of the column. 

              
        
      
        

        - **Records** *(list) --* 

          The results of the SQL statement.

          
          

          - *(list) --* 
            

            - *(dict) --* 

              A data value in a column. 

              
              

              - **blobValue** *(bytes) --* 

                A value of the BLOB data type. 

                
              

              - **booleanValue** *(boolean) --* 

                A value of the Boolean data type. 

                
              

              - **doubleValue** *(float) --* 

                A value of the double data type. 

                
              

              - **isNull** *(boolean) --* 

                A value that indicates whether the data is NULL. 

                
              

              - **longValue** *(integer) --* 

                A value of the long data type. 

                
              

              - **stringValue** *(string) --* 

                A value of the string data type. 

                
          
        
      
        

        - **TotalNumRows** *(integer) --* 

          The total number of rows in the result set returned from a query. You can use this number to estimate the number of calls to the ``GetStatementResult`` operation needed to page through the results. 

          
    

.. py:class:: RedshiftDataAPIService.Paginator.ListDatabases

  ::

    
    paginator = client.get_paginator('list_databases')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RedshiftDataAPIService.Client.list_databases`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListDatabases>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterIdentifier='string',
          Database='string',
          DbUser='string',
          SecretArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type Database: string
    :param Database: 

      The name of the database. This parameter is required when authenticating using temporary credentials. 

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Databases': [
                'string',
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Databases** *(list) --* 

          The names of databases. 

          
          

          - *(string) --* 
      
    

.. py:class:: RedshiftDataAPIService.Paginator.ListSchemas

  ::

    
    paginator = client.get_paginator('list_schemas')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RedshiftDataAPIService.Client.list_schemas`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListSchemas>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterIdentifier='string',
          ConnectedDatabase='string',
          Database='string',
          DbUser='string',
          SchemaPattern='string',
          SecretArn='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type ConnectedDatabase: string
    :param ConnectedDatabase: 

      A database name. The connected database is specified when you connect with your authentication credentials. 

      

    
    :type Database: string
    :param Database: **[REQUIRED]** 

      The name of the database that contains the schemas to list. If ``ConnectedDatabase`` is not specified, this is also the database to connect to with your authentication credentials.

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type SchemaPattern: string
    :param SchemaPattern: 

      A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Schemas': [
                'string',
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Schemas** *(list) --* 

          The schemas that match the request pattern. 

          
          

          - *(string) --* 
      
    

.. py:class:: RedshiftDataAPIService.Paginator.ListStatements

  ::

    
    paginator = client.get_paginator('list_statements')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RedshiftDataAPIService.Client.list_statements`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListStatements>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          RoleLevel=True|False,
          StatementName='string',
          Status='SUBMITTED'|'PICKED'|'STARTED'|'FINISHED'|'ABORTED'|'FAILED'|'ALL',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type RoleLevel: boolean
    :param RoleLevel: 

      A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. If false, only statements run by the caller's IAM role in the current IAM session are returned. The default is true. 

      

    
    :type StatementName: string
    :param StatementName: 

      The name of the SQL statement specified as input to ``ExecuteStatement`` to identify the query. You can list multiple statements by providing a prefix that matches the beginning of the statement name. For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of ``myStatement`` . Data API does a case-sensitive match of SQL statement names to the prefix value you provide. 

      

    
    :type Status: string
    :param Status: 

      The status of the SQL statement to list. Status values are defined as follows: 

       

       
      * ABORTED - The query run was stopped by the user.  
       
      * ALL - A status value that includes all query statuses. This value can be used to filter results.  
       
      * FAILED - The query run failed.  
       
      * FINISHED - The query has finished running.  
       
      * PICKED - The query has been chosen to be run.  
       
      * STARTED - The query run has started.  
       
      * SUBMITTED - The query was submitted, but not yet processed.  
       

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Statements': [
                {
                    'CreatedAt': datetime(2015, 1, 1),
                    'Id': 'string',
                    'QueryParameters': [
                        {
                            'name': 'string',
                            'value': 'string'
                        },
                    ],
                    'QueryString': 'string',
                    'SecretArn': 'string',
                    'StatementName': 'string',
                    'Status': 'SUBMITTED'|'PICKED'|'STARTED'|'FINISHED'|'ABORTED'|'FAILED'|'ALL',
                    'UpdatedAt': datetime(2015, 1, 1)
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Statements** *(list) --* 

          The SQL statements. 

          
          

          - *(dict) --* 

            The SQL statement to run.

            
            

            - **CreatedAt** *(datetime) --* 

              The date and time (UTC) the statement was created. 

              
            

            - **Id** *(string) --* 

              The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 

              
            

            - **QueryParameters** *(list) --* 

              The parameters used in a SQL statement.

              
              

              - *(dict) --* 

                A parameter used in a SQL statement.

                
                

                - **name** *(string) --* 

                  The name of the parameter.

                  
                

                - **value** *(string) --* 

                  The value of the parameter. Amazon Redshift implicitly converts to the proper data type. For more inforation, see `Data types <https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html>`__ in the *Amazon Redshift Database Developer Guide* . 

                  
            
          
            

            - **QueryString** *(string) --* 

              The SQL statement.

              
            

            - **SecretArn** *(string) --* 

              The name or Amazon Resource Name (ARN) of the secret that enables access to the database. 

              
            

            - **StatementName** *(string) --* 

              The name of the SQL statement. 

              
            

            - **Status** *(string) --* 

              The status of the SQL statement. An example is the that the SQL statement finished. 

              
            

            - **UpdatedAt** *(datetime) --* 

              The date and time (UTC) that the statement metadata was last updated.

              
        
      
    

.. py:class:: RedshiftDataAPIService.Paginator.ListTables

  ::

    
    paginator = client.get_paginator('list_tables')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`RedshiftDataAPIService.Client.list_tables`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/redshift-data-2019-12-20/ListTables>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          ClusterIdentifier='string',
          ConnectedDatabase='string',
          Database='string',
          DbUser='string',
          SchemaPattern='string',
          SecretArn='string',
          TablePattern='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type ClusterIdentifier: string
    :param ClusterIdentifier: **[REQUIRED]** 

      The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. 

      

    
    :type ConnectedDatabase: string
    :param ConnectedDatabase: 

      A database name. The connected database is specified when you connect with your authentication credentials. 

      

    
    :type Database: string
    :param Database: **[REQUIRED]** 

      The name of the database that contains the tables to list. If ``ConnectedDatabase`` is not specified, this is also the database to connect to with your authentication credentials.

      

    
    :type DbUser: string
    :param DbUser: 

      The database user name. This parameter is required when authenticating using temporary credentials. 

      

    
    :type SchemaPattern: string
    :param SchemaPattern: 

      A pattern to filter results by schema name. Within a schema pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only schema name entries matching the search pattern are returned. If ``SchemaPattern`` is not specified, then all tables that match ``TablePattern`` are returned. If neither ``SchemaPattern`` or ``TablePattern`` are specified, then all tables are returned. 

      

    
    :type SecretArn: string
    :param SecretArn: 

      The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. 

      

    
    :type TablePattern: string
    :param TablePattern: 

      A pattern to filter results by table name. Within a table pattern, "%" means match any substring of 0 or more characters and "_" means match any one character. Only table name entries matching the search pattern are returned. If ``TablePattern`` is not specified, then all tables that match ``SchemaPattern`` are returned. If neither ``SchemaPattern`` or ``TablePattern`` are specified, then all tables are returned. 

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tables': [
                {
                    'name': 'string',
                    'schema': 'string',
                    'type': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tables** *(list) --* 

          The tables that match the request pattern. 

          
          

          - *(dict) --* 

            The properties of a table. 

            
            

            - **name** *(string) --* 

              The name of the table. 

              
            

            - **schema** *(string) --* 

              The schema containing the table. 

              
            

            - **type** *(string) --* 

              The type of the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. 

              
        
      
    