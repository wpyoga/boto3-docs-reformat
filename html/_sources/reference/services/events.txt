

***********
EventBridge
***********

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: EventBridge.Client

  A low-level client representing Amazon EventBridge
  

  Amazon EventBridge helps you to respond to state changes in your AWS resources. When your resources change state, they automatically send events into an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:

   

   
  * Automatically invoke an AWS Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state. 
   
  * Direct specific API records from AWS CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks. 
   
  * Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume. 
   

   

  For more information about the features of Amazon EventBridge, see the `Amazon EventBridge User Guide <https://docs.aws.amazon.com/eventbridge/latest/userguide>`__ .

  ::

    
    import boto3
    
    client = boto3.client('events')

  
  These are the available methods:
  
  *   :py:meth:`~EventBridge.Client.activate_event_source`

  
  *   :py:meth:`~EventBridge.Client.can_paginate`

  
  *   :py:meth:`~EventBridge.Client.cancel_replay`

  
  *   :py:meth:`~EventBridge.Client.create_api_destination`

  
  *   :py:meth:`~EventBridge.Client.create_archive`

  
  *   :py:meth:`~EventBridge.Client.create_connection`

  
  *   :py:meth:`~EventBridge.Client.create_event_bus`

  
  *   :py:meth:`~EventBridge.Client.create_partner_event_source`

  
  *   :py:meth:`~EventBridge.Client.deactivate_event_source`

  
  *   :py:meth:`~EventBridge.Client.deauthorize_connection`

  
  *   :py:meth:`~EventBridge.Client.delete_api_destination`

  
  *   :py:meth:`~EventBridge.Client.delete_archive`

  
  *   :py:meth:`~EventBridge.Client.delete_connection`

  
  *   :py:meth:`~EventBridge.Client.delete_event_bus`

  
  *   :py:meth:`~EventBridge.Client.delete_partner_event_source`

  
  *   :py:meth:`~EventBridge.Client.delete_rule`

  
  *   :py:meth:`~EventBridge.Client.describe_api_destination`

  
  *   :py:meth:`~EventBridge.Client.describe_archive`

  
  *   :py:meth:`~EventBridge.Client.describe_connection`

  
  *   :py:meth:`~EventBridge.Client.describe_event_bus`

  
  *   :py:meth:`~EventBridge.Client.describe_event_source`

  
  *   :py:meth:`~EventBridge.Client.describe_partner_event_source`

  
  *   :py:meth:`~EventBridge.Client.describe_replay`

  
  *   :py:meth:`~EventBridge.Client.describe_rule`

  
  *   :py:meth:`~EventBridge.Client.disable_rule`

  
  *   :py:meth:`~EventBridge.Client.enable_rule`

  
  *   :py:meth:`~EventBridge.Client.generate_presigned_url`

  
  *   :py:meth:`~EventBridge.Client.get_paginator`

  
  *   :py:meth:`~EventBridge.Client.get_waiter`

  
  *   :py:meth:`~EventBridge.Client.list_api_destinations`

  
  *   :py:meth:`~EventBridge.Client.list_archives`

  
  *   :py:meth:`~EventBridge.Client.list_connections`

  
  *   :py:meth:`~EventBridge.Client.list_event_buses`

  
  *   :py:meth:`~EventBridge.Client.list_event_sources`

  
  *   :py:meth:`~EventBridge.Client.list_partner_event_source_accounts`

  
  *   :py:meth:`~EventBridge.Client.list_partner_event_sources`

  
  *   :py:meth:`~EventBridge.Client.list_replays`

  
  *   :py:meth:`~EventBridge.Client.list_rule_names_by_target`

  
  *   :py:meth:`~EventBridge.Client.list_rules`

  
  *   :py:meth:`~EventBridge.Client.list_tags_for_resource`

  
  *   :py:meth:`~EventBridge.Client.list_targets_by_rule`

  
  *   :py:meth:`~EventBridge.Client.put_events`

  
  *   :py:meth:`~EventBridge.Client.put_partner_events`

  
  *   :py:meth:`~EventBridge.Client.put_permission`

  
  *   :py:meth:`~EventBridge.Client.put_rule`

  
  *   :py:meth:`~EventBridge.Client.put_targets`

  
  *   :py:meth:`~EventBridge.Client.remove_permission`

  
  *   :py:meth:`~EventBridge.Client.remove_targets`

  
  *   :py:meth:`~EventBridge.Client.start_replay`

  
  *   :py:meth:`~EventBridge.Client.tag_resource`

  
  *   :py:meth:`~EventBridge.Client.test_event_pattern`

  
  *   :py:meth:`~EventBridge.Client.untag_resource`

  
  *   :py:meth:`~EventBridge.Client.update_api_destination`

  
  *   :py:meth:`~EventBridge.Client.update_archive`

  
  *   :py:meth:`~EventBridge.Client.update_connection`

  

  .. py:method:: activate_event_source(**kwargs)

    

    Activates a partner event source that has been deactivated. Once activated, your matching event bus will start receiving events from the event source.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ActivateEventSource>`_    


    **Request Syntax** 
    ::

      response = client.activate_event_source(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the partner event source to activate.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.InvalidStateException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: cancel_replay(**kwargs)

    

    Cancels the specified replay.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CancelReplay>`_    


    **Request Syntax** 
    ::

      response = client.cancel_replay(
          ReplayName='string'
      )
    :type ReplayName: string
    :param ReplayName: **[REQUIRED]** 

      The name of the replay to cancel.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReplayArn': 'string',
            'State': 'STARTING'|'RUNNING'|'CANCELLING'|'COMPLETED'|'CANCELLED'|'FAILED',
            'StateReason': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ReplayArn** *(string) --* 

          The ARN of the replay to cancel.

          
        

        - **State** *(string) --* 

          The current state of the replay.

          
        

        - **StateReason** *(string) --* 

          The reason that the replay is in the current state.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.IllegalStatusException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: create_api_destination(**kwargs)

    

    Creates an API destination, which is an HTTP invocation endpoint configured as a target for events.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreateApiDestination>`_    


    **Request Syntax** 
    ::

      response = client.create_api_destination(
          Name='string',
          Description='string',
          ConnectionArn='string',
          InvocationEndpoint='string',
          HttpMethod='POST'|'GET'|'HEAD'|'OPTIONS'|'PUT'|'PATCH'|'DELETE',
          InvocationRateLimitPerSecond=123
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name for the API destination to create.

      

    
    :type Description: string
    :param Description: 

      A description for the API destination to create.

      

    
    :type ConnectionArn: string
    :param ConnectionArn: **[REQUIRED]** 

      The ARN of the connection to use for the API destination. The destination endpoint must support the authorization type specified for the connection.

      

    
    :type InvocationEndpoint: string
    :param InvocationEndpoint: **[REQUIRED]** 

      The URL to the HTTP invocation endpoint for the API destination.

      

    
    :type HttpMethod: string
    :param HttpMethod: **[REQUIRED]** 

      The method to use for the request to the HTTP invocation endpoint.

      

    
    :type InvocationRateLimitPerSecond: integer
    :param InvocationRateLimitPerSecond: 

      The maximum number of requests per second to send to the HTTP invocation endpoint.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApiDestinationArn': 'string',
            'ApiDestinationState': 'ACTIVE'|'INACTIVE',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApiDestinationArn** *(string) --* 

          The ARN of the API destination that was created by the request.

          
        

        - **ApiDestinationState** *(string) --* 

          The state of the API destination that was created by the request.

          
        

        - **CreationTime** *(datetime) --* 

          A time stamp indicating the time that the API destination was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp indicating the time that the API destination was last modified.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: create_archive(**kwargs)

    

    Creates an archive of events with the specified settings. When you create an archive, incoming events might not immediately start being sent to the archive. Allow a short period of time for changes to take effect. If you do not specify a pattern to filter events sent to the archive, all events are sent to the archive except replayed events. Replayed events are not sent to an archive.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreateArchive>`_    


    **Request Syntax** 
    ::

      response = client.create_archive(
          ArchiveName='string',
          EventSourceArn='string',
          Description='string',
          EventPattern='string',
          RetentionDays=123
      )
    :type ArchiveName: string
    :param ArchiveName: **[REQUIRED]** 

      The name for the archive to create.

      

    
    :type EventSourceArn: string
    :param EventSourceArn: **[REQUIRED]** 

      The ARN of the event source associated with the archive.

      

    
    :type Description: string
    :param Description: 

      A description for the archive.

      

    
    :type EventPattern: string
    :param EventPattern: 

      An event pattern to use to filter events sent to the archive.

      

    
    :type RetentionDays: integer
    :param RetentionDays: 

      The number of days to retain events for. Default value is 0. If set to 0, events are retained indefinitely

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ArchiveArn': 'string',
            'State': 'ENABLED'|'DISABLED'|'CREATING'|'UPDATING'|'CREATE_FAILED'|'UPDATE_FAILED',
            'StateReason': 'string',
            'CreationTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ArchiveArn** *(string) --* 

          The ARN of the archive that was created.

          
        

        - **State** *(string) --* 

          The state of the archive that was created.

          
        

        - **StateReason** *(string) --* 

          The reason that the archive is in the state.

          
        

        - **CreationTime** *(datetime) --* 

          The time at which the archive was created.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.InvalidEventPatternException`

    

  .. py:method:: create_connection(**kwargs)

    

    Creates a connection. A connection defines the authorization type and credentials to use for authorization with an API destination HTTP endpoint.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreateConnection>`_    


    **Request Syntax** 
    ::

      response = client.create_connection(
          Name='string',
          Description='string',
          AuthorizationType='BASIC'|'OAUTH_CLIENT_CREDENTIALS'|'API_KEY',
          AuthParameters={
              'BasicAuthParameters': {
                  'Username': 'string',
                  'Password': 'string'
              },
              'OAuthParameters': {
                  'ClientParameters': {
                      'ClientID': 'string',
                      'ClientSecret': 'string'
                  },
                  'AuthorizationEndpoint': 'string',
                  'HttpMethod': 'GET'|'POST'|'PUT',
                  'OAuthHttpParameters': {
                      'HeaderParameters': [
                          {
                              'Key': 'string',
                              'Value': 'string',
                              'IsValueSecret': True|False
                          },
                      ],
                      'QueryStringParameters': [
                          {
                              'Key': 'string',
                              'Value': 'string',
                              'IsValueSecret': True|False
                          },
                      ],
                      'BodyParameters': [
                          {
                              'Key': 'string',
                              'Value': 'string',
                              'IsValueSecret': True|False
                          },
                      ]
                  }
              },
              'ApiKeyAuthParameters': {
                  'ApiKeyName': 'string',
                  'ApiKeyValue': 'string'
              },
              'InvocationHttpParameters': {
                  'HeaderParameters': [
                      {
                          'Key': 'string',
                          'Value': 'string',
                          'IsValueSecret': True|False
                      },
                  ],
                  'QueryStringParameters': [
                      {
                          'Key': 'string',
                          'Value': 'string',
                          'IsValueSecret': True|False
                      },
                  ],
                  'BodyParameters': [
                      {
                          'Key': 'string',
                          'Value': 'string',
                          'IsValueSecret': True|False
                      },
                  ]
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name for the connection to create.

      

    
    :type Description: string
    :param Description: 

      A description for the connection to create.

      

    
    :type AuthorizationType: string
    :param AuthorizationType: **[REQUIRED]** 

      The type of authorization to use for the connection.

      

    
    :type AuthParameters: dict
    :param AuthParameters: **[REQUIRED]** 

      A ``CreateConnectionAuthRequestParameters`` object that contains the authorization parameters to use to authorize with the endpoint. 

      

    
      - **BasicAuthParameters** *(dict) --* 

        A ``CreateConnectionBasicAuthRequestParameters`` object that contains the Basic authorization parameters to use for the connection.

        

      
        - **Username** *(string) --* **[REQUIRED]** 

          The user name to use for Basic authorization.

          

        
        - **Password** *(string) --* **[REQUIRED]** 

          The password associated with the user name to use for Basic authorization.

          

        
      
      - **OAuthParameters** *(dict) --* 

        A ``CreateConnectionOAuthRequestParameters`` object that contains the OAuth authorization parameters to use for the connection.

        

      
        - **ClientParameters** *(dict) --* **[REQUIRED]** 

          A ``CreateConnectionOAuthClientRequestParameters`` object that contains the client parameters for OAuth authorization.

          

        
          - **ClientID** *(string) --* **[REQUIRED]** 

            The client ID to use for OAuth authorization for the connection.

            

          
          - **ClientSecret** *(string) --* **[REQUIRED]** 

            The client secret associated with the client ID to use for OAuth authorization for the connection.

            

          
        
        - **AuthorizationEndpoint** *(string) --* **[REQUIRED]** 

          The URL to the authorization endpoint when OAuth is specified as the authorization type.

          

        
        - **HttpMethod** *(string) --* **[REQUIRED]** 

          The method to use for the authorization request.

          

        
        - **OAuthHttpParameters** *(dict) --* 

          A ``ConnectionHttpParameters`` object that contains details about the additional parameters to use for the connection.

          

        
          - **HeaderParameters** *(list) --* 

            Contains additional header parameters for the connection.

            

          
            - *(dict) --* 

              Additional parameter included in the header. You can include up to 100 additional header parameters per request. An event payload cannot exceed 64 KB.

              

            
              - **Key** *(string) --* 

                The key for the parameter.

                

              
              - **Value** *(string) --* 

                The value associated with the key.

                

              
              - **IsValueSecret** *(boolean) --* 

                Specified whether the value is a secret.

                

              
            
        
          - **QueryStringParameters** *(list) --* 

            Contains additional query string parameters for the connection.

            

          
            - *(dict) --* 

              Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.

              

            
              - **Key** *(string) --* 

                The key for a query string parameter.

                

              
              - **Value** *(string) --* 

                The value associated with the key for the query string parameter.

                

              
              - **IsValueSecret** *(boolean) --* 

                Specifies whether the value is secret.

                

              
            
        
          - **BodyParameters** *(list) --* 

            Contains additional body string parameters for the connection.

            

          
            - *(dict) --* 

              Additional parameter included in the body. You can include up to 100 additional body parameters per request. An event payload cannot exceed 64 KB.

              

            
              - **Key** *(string) --* 

                The key for the parameter.

                

              
              - **Value** *(string) --* 

                The value associated with the key.

                

              
              - **IsValueSecret** *(boolean) --* 

                Specified whether the value is secret.

                

              
            
        
        
      
      - **ApiKeyAuthParameters** *(dict) --* 

        A ``CreateConnectionApiKeyAuthRequestParameters`` object that contains the API key authorization parameters to use for the connection.

        

      
        - **ApiKeyName** *(string) --* **[REQUIRED]** 

          The name of the API key to use for authorization.

          

        
        - **ApiKeyValue** *(string) --* **[REQUIRED]** 

          The value for the API key to use for authorization.

          

        
      
      - **InvocationHttpParameters** *(dict) --* 

        A ``ConnectionHttpParameters`` object that contains the API key authorization parameters to use for the connection. Note that if you include additional parameters for the target of a rule via ``HttpParameters`` , including query strings, the parameters added for the connection take precedence.

        

      
        - **HeaderParameters** *(list) --* 

          Contains additional header parameters for the connection.

          

        
          - *(dict) --* 

            Additional parameter included in the header. You can include up to 100 additional header parameters per request. An event payload cannot exceed 64 KB.

            

          
            - **Key** *(string) --* 

              The key for the parameter.

              

            
            - **Value** *(string) --* 

              The value associated with the key.

              

            
            - **IsValueSecret** *(boolean) --* 

              Specified whether the value is a secret.

              

            
          
      
        - **QueryStringParameters** *(list) --* 

          Contains additional query string parameters for the connection.

          

        
          - *(dict) --* 

            Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.

            

          
            - **Key** *(string) --* 

              The key for a query string parameter.

              

            
            - **Value** *(string) --* 

              The value associated with the key for the query string parameter.

              

            
            - **IsValueSecret** *(boolean) --* 

              Specifies whether the value is secret.

              

            
          
      
        - **BodyParameters** *(list) --* 

          Contains additional body string parameters for the connection.

          

        
          - *(dict) --* 

            Additional parameter included in the body. You can include up to 100 additional body parameters per request. An event payload cannot exceed 64 KB.

            

          
            - **Key** *(string) --* 

              The key for the parameter.

              

            
            - **Value** *(string) --* 

              The value associated with the key.

              

            
            - **IsValueSecret** *(boolean) --* 

              Specified whether the value is secret.

              

            
          
      
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectionArn': 'string',
            'ConnectionState': 'CREATING'|'UPDATING'|'DELETING'|'AUTHORIZED'|'DEAUTHORIZED'|'AUTHORIZING'|'DEAUTHORIZING',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectionArn** *(string) --* 

          The ARN of the connection that was created by the request.

          
        

        - **ConnectionState** *(string) --* 

          The state of the connection that was created by the request.

          
        

        - **CreationTime** *(datetime) --* 

          A time stamp for the time that the connection was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp for the time that the connection was last updated.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: create_event_bus(**kwargs)

    

    Creates a new event bus within your account. This can be a custom event bus which you can use to receive events from your custom applications and services, or it can be a partner event bus which can be matched to a partner event source.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreateEventBus>`_    


    **Request Syntax** 
    ::

      response = client.create_event_bus(
          Name='string',
          EventSourceName='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the new event bus. 

       

      Event bus names cannot contain the / character. You can't use the name ``default`` for a custom event bus, as this name is already used for your account's default event bus.

       

      If this is a partner event bus, the name must exactly match the name of the partner event source that this event bus is matched to.

      

    
    :type EventSourceName: string
    :param EventSourceName: 

      If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.

      

    
    :type Tags: list
    :param Tags: 

      Tags to associate with the event bus.

      

    
      - *(dict) --* 

        A key-value pair associated with an AWS resource. In EventBridge, rules and event buses support tagging.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the specified tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventBusArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventBusArn** *(string) --* 

          The ARN of the new event bus.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InvalidStateException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: create_partner_event_source(**kwargs)

    

    Called by an SaaS partner to create a partner event source. This operation is not used by AWS customers.

     

    Each partner event source can be used by one AWS account to create a matching partner event bus in that AWS account. A SaaS partner must create one partner event source for each AWS account that wants to receive those event types. 

     

    A partner event source creates events based on resources within the SaaS partner's service or application.

     

    An AWS account that creates a partner event bus that matches the partner event source can use that event bus to receive events from the partner, and then process them using AWS Events rules and targets.

     

    Partner event source names follow this format:

     

     `` *partner_name* /*event_namespace* /*event_name* ``  

     

     *partner_name* is determined during partner registration and identifies the partner to AWS customers. *event_namespace* is determined by the partner and is a way for the partner to categorize their events. *event_name* is determined by the partner, and should uniquely identify an event-generating resource within the partner system. The combination of *event_namespace* and *event_name* should help AWS customers decide whether to create an event bus to receive these events.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreatePartnerEventSource>`_    


    **Request Syntax** 
    ::

      response = client.create_partner_event_source(
          Name='string',
          Account='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the partner event source. This name must be unique and must be in the format `` *partner_name* /*event_namespace* /*event_name* `` . The AWS account that wants to use this partner event source must create a partner event bus with a name that matches the name of the partner event source.

      

    
    :type Account: string
    :param Account: **[REQUIRED]** 

      The AWS account ID that is permitted to create a matching partner event bus for this partner event source.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventSourceArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventSourceArn** *(string) --* 

          The ARN of the partner event source.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: deactivate_event_source(**kwargs)

    

    You can use this operation to temporarily stop receiving events from the specified partner event source. The matching event bus is not deleted. 

     

    When you deactivate a partner event source, the source goes into PENDING state. If it remains in PENDING state for more than two weeks, it is deleted.

     

    To activate a deactivated partner event source, use  ActivateEventSource .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeactivateEventSource>`_    


    **Request Syntax** 
    ::

      response = client.deactivate_event_source(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the partner event source to deactivate.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.InvalidStateException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: deauthorize_connection(**kwargs)

    

    Removes all authorization parameters from the connection. This lets you remove the secret from the connection so you can reuse it without having to create a new connection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeauthorizeConnection>`_    


    **Request Syntax** 
    ::

      response = client.deauthorize_connection(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the connection to remove authorization from.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectionArn': 'string',
            'ConnectionState': 'CREATING'|'UPDATING'|'DELETING'|'AUTHORIZED'|'DEAUTHORIZED'|'AUTHORIZING'|'DEAUTHORIZING',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1),
            'LastAuthorizedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectionArn** *(string) --* 

          The ARN of the connection that authorization was removed from.

          
        

        - **ConnectionState** *(string) --* 

          The state of the connection.

          
        

        - **CreationTime** *(datetime) --* 

          A time stamp for the time that the connection was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp for the time that the connection was last updated.

          
        

        - **LastAuthorizedTime** *(datetime) --* 

          A time stamp for the time that the connection was last authorized.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: delete_api_destination(**kwargs)

    

    Deletes the specified API destination.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteApiDestination>`_    


    **Request Syntax** 
    ::

      response = client.delete_api_destination(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the destination to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: delete_archive(**kwargs)

    

    Deletes the specified archive.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteArchive>`_    


    **Request Syntax** 
    ::

      response = client.delete_archive(
          ArchiveName='string'
      )
    :type ArchiveName: string
    :param ArchiveName: **[REQUIRED]** 

      The name of the archive to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: delete_connection(**kwargs)

    

    Deletes a connection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteConnection>`_    


    **Request Syntax** 
    ::

      response = client.delete_connection(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the connection to delete.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectionArn': 'string',
            'ConnectionState': 'CREATING'|'UPDATING'|'DELETING'|'AUTHORIZED'|'DEAUTHORIZED'|'AUTHORIZING'|'DEAUTHORIZING',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1),
            'LastAuthorizedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectionArn** *(string) --* 

          The ARN of the connection that was deleted.

          
        

        - **ConnectionState** *(string) --* 

          The state of the connection before it was deleted.

          
        

        - **CreationTime** *(datetime) --* 

          A time stamp for the time that the connection was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp for the time that the connection was last modified before it was deleted.

          
        

        - **LastAuthorizedTime** *(datetime) --* 

          A time stamp for the time that the connection was last authorized before it wa deleted.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: delete_event_bus(**kwargs)

    

    Deletes the specified custom event bus or partner event bus. All rules associated with this event bus need to be deleted. You can't delete your account's default event bus.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteEventBus>`_    


    **Request Syntax** 
    ::

      response = client.delete_event_bus(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the event bus to delete.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    

  .. py:method:: delete_partner_event_source(**kwargs)

    

    This operation is used by SaaS partners to delete a partner event source. This operation is not used by AWS customers.

     

    When you delete an event source, the status of the corresponding partner event bus in the AWS customer account becomes DELETED.

     

    

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeletePartnerEventSource>`_    


    **Request Syntax** 
    ::

      response = client.delete_partner_event_source(
          Name='string',
          Account='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the event source to delete.

      

    
    :type Account: string
    :param Account: **[REQUIRED]** 

      The AWS account ID of the AWS customer that the event source was created for.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: delete_rule(**kwargs)

    

    Deletes the specified rule.

     

    Before you can delete the rule, you must remove all targets, using  RemoveTargets .

     

    When you delete a rule, incoming events might continue to match to the deleted rule. Allow a short period of time for changes to take effect.

     

    If you call delete rule multiple times for the same rule, all calls will succeed. When you call delete rule for a non-existent custom eventbus, ``ResourceNotFoundException`` is returned.

     

    Managed rules are rules created and managed by another AWS service on your behalf. These rules are created by those other AWS services to support functionality in those services. You can delete these rules using the ``Force`` option, but you should do so only if you are sure the other service is not still using that rule.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteRule>`_    


    **Request Syntax** 
    ::

      response = client.delete_rule(
          Name='string',
          EventBusName='string',
          Force=True|False
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    :type Force: boolean
    :param Force: 

      If this is a managed rule, created by an AWS service on your behalf, you must specify ``Force`` as ``True`` to delete the rule. This parameter is ignored for rules that are not managed rules. You can check whether a rule is a managed rule by using ``DescribeRule`` or ``ListRules`` and checking the ``ManagedBy`` field of the response.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: describe_api_destination(**kwargs)

    

    Retrieves details about an API destination.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeApiDestination>`_    


    **Request Syntax** 
    ::

      response = client.describe_api_destination(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the API destination to retrieve.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApiDestinationArn': 'string',
            'Name': 'string',
            'Description': 'string',
            'ApiDestinationState': 'ACTIVE'|'INACTIVE',
            'ConnectionArn': 'string',
            'InvocationEndpoint': 'string',
            'HttpMethod': 'POST'|'GET'|'HEAD'|'OPTIONS'|'PUT'|'PATCH'|'DELETE',
            'InvocationRateLimitPerSecond': 123,
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApiDestinationArn** *(string) --* 

          The ARN of the API destination retrieved.

          
        

        - **Name** *(string) --* 

          The name of the API destination retrieved.

          
        

        - **Description** *(string) --* 

          The description for the API destination retrieved.

          
        

        - **ApiDestinationState** *(string) --* 

          The state of the API destination retrieved.

          
        

        - **ConnectionArn** *(string) --* 

          The ARN of the connection specified for the API destination retrieved.

          
        

        - **InvocationEndpoint** *(string) --* 

          The URL to use to connect to the HTTP endpoint.

          
        

        - **HttpMethod** *(string) --* 

          The method to use to connect to the HTTP endpoint.

          
        

        - **InvocationRateLimitPerSecond** *(integer) --* 

          The maximum number of invocations per second to specified for the API destination. Note that if you set the invocation rate maximum to a value lower the rate necessary to send all events received on to the destination HTTP endpoint, some events may not be delivered within the 24-hour retry window. If you plan to set the rate lower than the rate necessary to deliver all events, consider using a dead-letter queue to catch events that are not delivered within 24 hours.

          
        

        - **CreationTime** *(datetime) --* 

          A time stamp for the time that the API destination was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp for the time that the API destination was last modified.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: describe_archive(**kwargs)

    

    Retrieves details about an archive.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeArchive>`_    


    **Request Syntax** 
    ::

      response = client.describe_archive(
          ArchiveName='string'
      )
    :type ArchiveName: string
    :param ArchiveName: **[REQUIRED]** 

      The name of the archive to retrieve.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ArchiveArn': 'string',
            'ArchiveName': 'string',
            'EventSourceArn': 'string',
            'Description': 'string',
            'EventPattern': 'string',
            'State': 'ENABLED'|'DISABLED'|'CREATING'|'UPDATING'|'CREATE_FAILED'|'UPDATE_FAILED',
            'StateReason': 'string',
            'RetentionDays': 123,
            'SizeBytes': 123,
            'EventCount': 123,
            'CreationTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ArchiveArn** *(string) --* 

          The ARN of the archive.

          
        

        - **ArchiveName** *(string) --* 

          The name of the archive.

          
        

        - **EventSourceArn** *(string) --* 

          The ARN of the event source associated with the archive.

          
        

        - **Description** *(string) --* 

          The description of the archive.

          
        

        - **EventPattern** *(string) --* 

          The event pattern used to filter events sent to the archive.

          
        

        - **State** *(string) --* 

          The state of the archive.

          
        

        - **StateReason** *(string) --* 

          The reason that the archive is in the state.

          
        

        - **RetentionDays** *(integer) --* 

          The number of days to retain events for in the archive.

          
        

        - **SizeBytes** *(integer) --* 

          The size of the archive in bytes.

          
        

        - **EventCount** *(integer) --* 

          The number of events in the archive.

          
        

        - **CreationTime** *(datetime) --* 

          The time at which the archive was created.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: describe_connection(**kwargs)

    

    Retrieves details about a connection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeConnection>`_    


    **Request Syntax** 
    ::

      response = client.describe_connection(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the connection to retrieve.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectionArn': 'string',
            'Name': 'string',
            'Description': 'string',
            'ConnectionState': 'CREATING'|'UPDATING'|'DELETING'|'AUTHORIZED'|'DEAUTHORIZED'|'AUTHORIZING'|'DEAUTHORIZING',
            'StateReason': 'string',
            'AuthorizationType': 'BASIC'|'OAUTH_CLIENT_CREDENTIALS'|'API_KEY',
            'SecretArn': 'string',
            'AuthParameters': {
                'BasicAuthParameters': {
                    'Username': 'string'
                },
                'OAuthParameters': {
                    'ClientParameters': {
                        'ClientID': 'string'
                    },
                    'AuthorizationEndpoint': 'string',
                    'HttpMethod': 'GET'|'POST'|'PUT',
                    'OAuthHttpParameters': {
                        'HeaderParameters': [
                            {
                                'Key': 'string',
                                'Value': 'string',
                                'IsValueSecret': True|False
                            },
                        ],
                        'QueryStringParameters': [
                            {
                                'Key': 'string',
                                'Value': 'string',
                                'IsValueSecret': True|False
                            },
                        ],
                        'BodyParameters': [
                            {
                                'Key': 'string',
                                'Value': 'string',
                                'IsValueSecret': True|False
                            },
                        ]
                    }
                },
                'ApiKeyAuthParameters': {
                    'ApiKeyName': 'string'
                },
                'InvocationHttpParameters': {
                    'HeaderParameters': [
                        {
                            'Key': 'string',
                            'Value': 'string',
                            'IsValueSecret': True|False
                        },
                    ],
                    'QueryStringParameters': [
                        {
                            'Key': 'string',
                            'Value': 'string',
                            'IsValueSecret': True|False
                        },
                    ],
                    'BodyParameters': [
                        {
                            'Key': 'string',
                            'Value': 'string',
                            'IsValueSecret': True|False
                        },
                    ]
                }
            },
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1),
            'LastAuthorizedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectionArn** *(string) --* 

          The ARN of the connection retrieved.

          
        

        - **Name** *(string) --* 

          The name of the connection retrieved.

          
        

        - **Description** *(string) --* 

          The description for the connection retrieved.

          
        

        - **ConnectionState** *(string) --* 

          The state of the connection retrieved.

          
        

        - **StateReason** *(string) --* 

          The reason that the connection is in the current connection state.

          
        

        - **AuthorizationType** *(string) --* 

          The type of authorization specified for the connection.

          
        

        - **SecretArn** *(string) --* 

          The ARN of the secret created from the authorization parameters specified for the connection.

          
        

        - **AuthParameters** *(dict) --* 

          The parameters to use for authorization for the connection.

          
          

          - **BasicAuthParameters** *(dict) --* 

            The authorization parameters for Basic authorization.

            
            

            - **Username** *(string) --* 

              The user name to use for Basic authorization.

              
        
          

          - **OAuthParameters** *(dict) --* 

            The OAuth parameters to use for authorization.

            
            

            - **ClientParameters** *(dict) --* 

              A ``ConnectionOAuthClientResponseParameters`` object that contains details about the client parameters returned when OAuth is specified as the authorization type.

              
              

              - **ClientID** *(string) --* 

                The client ID associated with the response to the connection request.

                
          
            

            - **AuthorizationEndpoint** *(string) --* 

              The URL to the HTTP endpoint that authorized the request.

              
            

            - **HttpMethod** *(string) --* 

              The method used to connect to the HTTP endpoint.

              
            

            - **OAuthHttpParameters** *(dict) --* 

              The additional HTTP parameters used for the OAuth authorization request.

              
              

              - **HeaderParameters** *(list) --* 

                Contains additional header parameters for the connection.

                
                

                - *(dict) --* 

                  Additional parameter included in the header. You can include up to 100 additional header parameters per request. An event payload cannot exceed 64 KB.

                  
                  

                  - **Key** *(string) --* 

                    The key for the parameter.

                    
                  

                  - **Value** *(string) --* 

                    The value associated with the key.

                    
                  

                  - **IsValueSecret** *(boolean) --* 

                    Specified whether the value is a secret.

                    
              
            
              

              - **QueryStringParameters** *(list) --* 

                Contains additional query string parameters for the connection.

                
                

                - *(dict) --* 

                  Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.

                  
                  

                  - **Key** *(string) --* 

                    The key for a query string parameter.

                    
                  

                  - **Value** *(string) --* 

                    The value associated with the key for the query string parameter.

                    
                  

                  - **IsValueSecret** *(boolean) --* 

                    Specifies whether the value is secret.

                    
              
            
              

              - **BodyParameters** *(list) --* 

                Contains additional body string parameters for the connection.

                
                

                - *(dict) --* 

                  Additional parameter included in the body. You can include up to 100 additional body parameters per request. An event payload cannot exceed 64 KB.

                  
                  

                  - **Key** *(string) --* 

                    The key for the parameter.

                    
                  

                  - **Value** *(string) --* 

                    The value associated with the key.

                    
                  

                  - **IsValueSecret** *(boolean) --* 

                    Specified whether the value is secret.

                    
              
            
          
        
          

          - **ApiKeyAuthParameters** *(dict) --* 

            The API Key parameters to use for authorization.

            
            

            - **ApiKeyName** *(string) --* 

              The name of the header to use for the ``APIKeyValue`` used for authorization.

              
        
          

          - **InvocationHttpParameters** *(dict) --* 

            Additional parameters for the connection that are passed through with every invocation to the HTTP endpoint.

            
            

            - **HeaderParameters** *(list) --* 

              Contains additional header parameters for the connection.

              
              

              - *(dict) --* 

                Additional parameter included in the header. You can include up to 100 additional header parameters per request. An event payload cannot exceed 64 KB.

                
                

                - **Key** *(string) --* 

                  The key for the parameter.

                  
                

                - **Value** *(string) --* 

                  The value associated with the key.

                  
                

                - **IsValueSecret** *(boolean) --* 

                  Specified whether the value is a secret.

                  
            
          
            

            - **QueryStringParameters** *(list) --* 

              Contains additional query string parameters for the connection.

              
              

              - *(dict) --* 

                Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.

                
                

                - **Key** *(string) --* 

                  The key for a query string parameter.

                  
                

                - **Value** *(string) --* 

                  The value associated with the key for the query string parameter.

                  
                

                - **IsValueSecret** *(boolean) --* 

                  Specifies whether the value is secret.

                  
            
          
            

            - **BodyParameters** *(list) --* 

              Contains additional body string parameters for the connection.

              
              

              - *(dict) --* 

                Additional parameter included in the body. You can include up to 100 additional body parameters per request. An event payload cannot exceed 64 KB.

                
                

                - **Key** *(string) --* 

                  The key for the parameter.

                  
                

                - **Value** *(string) --* 

                  The value associated with the key.

                  
                

                - **IsValueSecret** *(boolean) --* 

                  Specified whether the value is secret.

                  
            
          
        
      
        

        - **CreationTime** *(datetime) --* 

          A time stamp for the time that the connection was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp for the time that the connection was last modified.

          
        

        - **LastAuthorizedTime** *(datetime) --* 

          A time stamp for the time that the connection was last authorized.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: describe_event_bus(**kwargs)

    

    Displays details about an event bus in your account. This can include the external AWS accounts that are permitted to write events to your default event bus, and the associated policy. For custom event buses and partner event buses, it displays the name, ARN, policy, state, and creation time.

     

    To enable your account to receive events from other accounts on its default event bus, use  PutPermission .

     

    For more information about partner event buses, see  CreateEventBus .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeEventBus>`_    


    **Request Syntax** 
    ::

      response = client.describe_event_bus(
          Name='string'
      )
    :type Name: string
    :param Name: 

      The name or ARN of the event bus to show details for. If you omit this, the default event bus is displayed.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Name': 'string',
            'Arn': 'string',
            'Policy': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Name** *(string) --* 

          The name of the event bus. Currently, this is always ``default`` .

          
        

        - **Arn** *(string) --* 

          The Amazon Resource Name (ARN) of the account permitted to write events to the current account.

          
        

        - **Policy** *(string) --* 

          The policy that enables the external account to send events to your account.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: describe_event_source(**kwargs)

    

    This operation lists details about a partner event source that is shared with your account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeEventSource>`_    


    **Request Syntax** 
    ::

      response = client.describe_event_source(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the partner event source to display the details of.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'CreatedBy': 'string',
            'CreationTime': datetime(2015, 1, 1),
            'ExpirationTime': datetime(2015, 1, 1),
            'Name': 'string',
            'State': 'PENDING'|'ACTIVE'|'DELETED'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The ARN of the partner event source.

          
        

        - **CreatedBy** *(string) --* 

          The name of the SaaS partner that created the event source.

          
        

        - **CreationTime** *(datetime) --* 

          The date and time that the event source was created.

          
        

        - **ExpirationTime** *(datetime) --* 

          The date and time that the event source will expire if you do not create a matching event bus.

          
        

        - **Name** *(string) --* 

          The name of the partner event source.

          
        

        - **State** *(string) --* 

          The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: describe_partner_event_source(**kwargs)

    

    An SaaS partner can use this operation to list details about a partner event source that they have created. AWS customers do not use this operation. Instead, AWS customers can use  DescribeEventSource to see details about a partner event source that is shared with them.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribePartnerEventSource>`_    


    **Request Syntax** 
    ::

      response = client.describe_partner_event_source(
          Name='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the event source to display.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Arn': 'string',
            'Name': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Arn** *(string) --* 

          The ARN of the event source.

          
        

        - **Name** *(string) --* 

          The name of the event source.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: describe_replay(**kwargs)

    

    Retrieves details about a replay. Use ``DescribeReplay`` to determine the progress of a running replay. A replay processes events to replay based on the time in the event, and replays them using 1 minute intervals. If you use ``StartReplay`` and specify an ``EventStartTime`` and an ``EventEndTime`` that covers a 20 minute time range, the events are replayed from the first minute of that 20 minute range first. Then the events from the second minute are replayed. You can use ``DescribeReplay`` to determine the progress of a replay. The value returned for ``EventLastReplayedTime`` indicates the time within the specified time range associated with the last event replayed.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeReplay>`_    


    **Request Syntax** 
    ::

      response = client.describe_replay(
          ReplayName='string'
      )
    :type ReplayName: string
    :param ReplayName: **[REQUIRED]** 

      The name of the replay to retrieve.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReplayName': 'string',
            'ReplayArn': 'string',
            'Description': 'string',
            'State': 'STARTING'|'RUNNING'|'CANCELLING'|'COMPLETED'|'CANCELLED'|'FAILED',
            'StateReason': 'string',
            'EventSourceArn': 'string',
            'Destination': {
                'Arn': 'string',
                'FilterArns': [
                    'string',
                ]
            },
            'EventStartTime': datetime(2015, 1, 1),
            'EventEndTime': datetime(2015, 1, 1),
            'EventLastReplayedTime': datetime(2015, 1, 1),
            'ReplayStartTime': datetime(2015, 1, 1),
            'ReplayEndTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ReplayName** *(string) --* 

          The name of the replay.

          
        

        - **ReplayArn** *(string) --* 

          The ARN of the replay.

          
        

        - **Description** *(string) --* 

          The description of the replay.

          
        

        - **State** *(string) --* 

          The current state of the replay.

          
        

        - **StateReason** *(string) --* 

          The reason that the replay is in the current state.

          
        

        - **EventSourceArn** *(string) --* 

          The ARN of the archive events were replayed from.

          
        

        - **Destination** *(dict) --* 

          A ``ReplayDestination`` object that contains details about the replay.

          
          

          - **Arn** *(string) --* 

            The ARN of the event bus to replay event to. You can replay events only to the event bus specified to create the archive.

            
          

          - **FilterArns** *(list) --* 

            A list of ARNs for rules to replay events to.

            
            

            - *(string) --* 
        
      
        

        - **EventStartTime** *(datetime) --* 

          The time stamp of the first event that was last replayed from the archive.

          
        

        - **EventEndTime** *(datetime) --* 

          The time stamp for the last event that was replayed from the archive.

          
        

        - **EventLastReplayedTime** *(datetime) --* 

          The time that the event was last replayed.

          
        

        - **ReplayStartTime** *(datetime) --* 

          A time stamp for the time that the replay started.

          
        

        - **ReplayEndTime** *(datetime) --* 

          A time stamp for the time that the replay stopped.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: describe_rule(**kwargs)

    

    Describes the specified rule.

     

    DescribeRule does not list the targets of a rule. To see the targets associated with a rule, use  ListTargetsByRule .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeRule>`_    


    **Request Syntax** 
    ::

      response = client.describe_rule(
          Name='string',
          EventBusName='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Name': 'string',
            'Arn': 'string',
            'EventPattern': 'string',
            'ScheduleExpression': 'string',
            'State': 'ENABLED'|'DISABLED',
            'Description': 'string',
            'RoleArn': 'string',
            'ManagedBy': 'string',
            'EventBusName': 'string',
            'CreatedBy': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Name** *(string) --* 

          The name of the rule.

          
        

        - **Arn** *(string) --* 

          The Amazon Resource Name (ARN) of the rule.

          
        

        - **EventPattern** *(string) --* 

          The event pattern. For more information, see `Events and Event Patterns <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html>`__ in the *Amazon EventBridge User Guide* .

          
        

        - **ScheduleExpression** *(string) --* 

          The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)".

          
        

        - **State** *(string) --* 

          Specifies whether the rule is enabled or disabled.

          
        

        - **Description** *(string) --* 

          The description of the rule.

          
        

        - **RoleArn** *(string) --* 

          The Amazon Resource Name (ARN) of the IAM role associated with the rule.

          
        

        - **ManagedBy** *(string) --* 

          If this is a managed rule, created by an AWS service on your behalf, this field displays the principal name of the AWS service that created the rule.

          
        

        - **EventBusName** *(string) --* 

          The name of the event bus associated with the rule.

          
        

        - **CreatedBy** *(string) --* 

          The account ID of the user that created the rule. If you use ``PutRule`` to put a rule on an event bus in another account, the other account is the owner of the rule, and the rule ARN includes the account ID for that account. However, the value for ``CreatedBy`` is the account ID as the account that created the rule in the other account.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: disable_rule(**kwargs)

    

    Disables the specified rule. A disabled rule won't match any events, and won't self-trigger if it has a schedule expression.

     

    When you disable a rule, incoming events might continue to match to the disabled rule. Allow a short period of time for changes to take effect.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DisableRule>`_    


    **Request Syntax** 
    ::

      response = client.disable_rule(
          Name='string',
          EventBusName='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: enable_rule(**kwargs)

    

    Enables the specified rule. If the rule does not exist, the operation fails.

     

    When you enable a rule, incoming events might not immediately start matching to a newly enabled rule. Allow a short period of time for changes to take effect.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/EnableRule>`_    


    **Request Syntax** 
    ::

      response = client.enable_rule(
          Name='string',
          EventBusName='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: list_api_destinations(**kwargs)

    

    Retrieves a list of API destination in the account in the current Region.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListApiDestinations>`_    


    **Request Syntax** 
    ::

      response = client.list_api_destinations(
          NamePrefix='string',
          ConnectionArn='string',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: 

      A name prefix to filter results returned. Only API destinations with a name that starts with the prefix are returned.

      

    
    :type ConnectionArn: string
    :param ConnectionArn: 

      The ARN of the connection specified for the API destination.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of API destinations to include in the response.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApiDestinations': [
                {
                    'ApiDestinationArn': 'string',
                    'Name': 'string',
                    'ApiDestinationState': 'ACTIVE'|'INACTIVE',
                    'ConnectionArn': 'string',
                    'InvocationEndpoint': 'string',
                    'HttpMethod': 'POST'|'GET'|'HEAD'|'OPTIONS'|'PUT'|'PATCH'|'DELETE',
                    'InvocationRateLimitPerSecond': 123,
                    'CreationTime': datetime(2015, 1, 1),
                    'LastModifiedTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApiDestinations** *(list) --* 

          An array of ``ApiDestination`` objects that include information about an API destination.

          
          

          - *(dict) --* 

            Contains details about an API destination.

            
            

            - **ApiDestinationArn** *(string) --* 

              The ARN of the API destination.

              
            

            - **Name** *(string) --* 

              The name of the API destination.

              
            

            - **ApiDestinationState** *(string) --* 

              The state of the API destination.

              
            

            - **ConnectionArn** *(string) --* 

              The ARN of the connection specified for the API destination.

              
            

            - **InvocationEndpoint** *(string) --* 

              The URL to the endpoint for the API destination.

              
            

            - **HttpMethod** *(string) --* 

              The method to use to connect to the HTTP endpoint.

              
            

            - **InvocationRateLimitPerSecond** *(integer) --* 

              The maximum number of invocations per second to send to the HTTP endpoint.

              
            

            - **CreationTime** *(datetime) --* 

              A time stamp for the time that the API destination was created.

              
            

            - **LastModifiedTime** *(datetime) --* 

              A time stamp for the time that the API destination was last modified.

              
        
      
        

        - **NextToken** *(string) --* 

          A token you can use in a subsequent request to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: list_archives(**kwargs)

    

    Lists your archives. You can either list all the archives or you can provide a prefix to match to the archive names. Filter parameters are exclusive.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListArchives>`_    


    **Request Syntax** 
    ::

      response = client.list_archives(
          NamePrefix='string',
          EventSourceArn='string',
          State='ENABLED'|'DISABLED'|'CREATING'|'UPDATING'|'CREATE_FAILED'|'UPDATE_FAILED',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: 

      A name prefix to filter the archives returned. Only archives with name that match the prefix are returned.

      

    
    :type EventSourceArn: string
    :param EventSourceArn: 

      The ARN of the event source associated with the archive.

      

    
    :type State: string
    :param State: 

      The state of the archive.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of results to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Archives': [
                {
                    'ArchiveName': 'string',
                    'EventSourceArn': 'string',
                    'State': 'ENABLED'|'DISABLED'|'CREATING'|'UPDATING'|'CREATE_FAILED'|'UPDATE_FAILED',
                    'StateReason': 'string',
                    'RetentionDays': 123,
                    'SizeBytes': 123,
                    'EventCount': 123,
                    'CreationTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Archives** *(list) --* 

          An array of ``Archive`` objects that include details about an archive.

          
          

          - *(dict) --* 

            An ``Archive`` object that contains details about an archive.

            
            

            - **ArchiveName** *(string) --* 

              The name of the archive.

              
            

            - **EventSourceArn** *(string) --* 

              The ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.

              
            

            - **State** *(string) --* 

              The current state of the archive.

              
            

            - **StateReason** *(string) --* 

              A description for the reason that the archive is in the current state.

              
            

            - **RetentionDays** *(integer) --* 

              The number of days to retain events in the archive before they are deleted.

              
            

            - **SizeBytes** *(integer) --* 

              The size of the archive, in bytes.

              
            

            - **EventCount** *(integer) --* 

              The number of events in the archive.

              
            

            - **CreationTime** *(datetime) --* 

              The time stamp for the time that the archive was created.

              
        
      
        

        - **NextToken** *(string) --* 

          The token returned by a previous call to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: list_connections(**kwargs)

    

    Retrieves a list of connections from the account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListConnections>`_    


    **Request Syntax** 
    ::

      response = client.list_connections(
          NamePrefix='string',
          ConnectionState='CREATING'|'UPDATING'|'DELETING'|'AUTHORIZED'|'DEAUTHORIZED'|'AUTHORIZING'|'DEAUTHORIZING',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: 

      A name prefix to filter results returned. Only connections with a name that starts with the prefix are returned.

      

    
    :type ConnectionState: string
    :param ConnectionState: 

      The state of the connection.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of connections to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Connections': [
                {
                    'ConnectionArn': 'string',
                    'Name': 'string',
                    'ConnectionState': 'CREATING'|'UPDATING'|'DELETING'|'AUTHORIZED'|'DEAUTHORIZED'|'AUTHORIZING'|'DEAUTHORIZING',
                    'StateReason': 'string',
                    'AuthorizationType': 'BASIC'|'OAUTH_CLIENT_CREDENTIALS'|'API_KEY',
                    'CreationTime': datetime(2015, 1, 1),
                    'LastModifiedTime': datetime(2015, 1, 1),
                    'LastAuthorizedTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Connections** *(list) --* 

          An array of connections objects that include details about the connections.

          
          

          - *(dict) --* 

            Contains information about a connection.

            
            

            - **ConnectionArn** *(string) --* 

              The ARN of the connection.

              
            

            - **Name** *(string) --* 

              The name of the connection.

              
            

            - **ConnectionState** *(string) --* 

              The state of the connection.

              
            

            - **StateReason** *(string) --* 

              The reason that the connection is in the connection state.

              
            

            - **AuthorizationType** *(string) --* 

              The authorization type specified for the connection.

              
            

            - **CreationTime** *(datetime) --* 

              A time stamp for the time that the connection was created.

              
            

            - **LastModifiedTime** *(datetime) --* 

              A time stamp for the time that the connection was last modified.

              
            

            - **LastAuthorizedTime** *(datetime) --* 

              A time stamp for the time that the connection was last authorized.

              
        
      
        

        - **NextToken** *(string) --* 

          A token you can use in a subsequent request to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: list_event_buses(**kwargs)

    

    Lists all the event buses in your account, including the default event bus, custom event buses, and partner event buses.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListEventBuses>`_    


    **Request Syntax** 
    ::

      response = client.list_event_buses(
          NamePrefix='string',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: 

      Specifying this limits the results to only those event buses with names that start with the specified prefix.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventBuses': [
                {
                    'Name': 'string',
                    'Arn': 'string',
                    'Policy': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventBuses** *(list) --* 

          This list of event buses.

          
          

          - *(dict) --* 

            An event bus receives events from a source and routes them to rules associated with that event bus. Your account's default event bus receives events from AWS services. A custom event bus can receive events from your custom applications and services. A partner event bus receives events from an event source created by an SaaS partner. These events come from the partners services or applications.

            
            

            - **Name** *(string) --* 

              The name of the event bus.

              
            

            - **Arn** *(string) --* 

              The ARN of the event bus.

              
            

            - **Policy** *(string) --* 

              The permissions policy of the event bus, describing which other AWS accounts can write events to this event bus.

              
        
      
        

        - **NextToken** *(string) --* 

          A token you can use in a subsequent operation to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: list_event_sources(**kwargs)

    

    You can use this to see all the partner event sources that have been shared with your AWS account. For more information about partner event sources, see  CreateEventBus .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListEventSources>`_    


    **Request Syntax** 
    ::

      response = client.list_event_sources(
          NamePrefix='string',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: 

      Specifying this limits the results to only those partner event sources with names that start with the specified prefix.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'EventSources': [
                {
                    'Arn': 'string',
                    'CreatedBy': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'ExpirationTime': datetime(2015, 1, 1),
                    'Name': 'string',
                    'State': 'PENDING'|'ACTIVE'|'DELETED'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **EventSources** *(list) --* 

          The list of event sources.

          
          

          - *(dict) --* 

            A partner event source is created by an SaaS partner. If a customer creates a partner event bus that matches this event source, that AWS account can receive events from the partner's applications or services.

            
            

            - **Arn** *(string) --* 

              The ARN of the event source.

              
            

            - **CreatedBy** *(string) --* 

              The name of the partner that created the event source.

              
            

            - **CreationTime** *(datetime) --* 

              The date and time the event source was created.

              
            

            - **ExpirationTime** *(datetime) --* 

              The date and time that the event source will expire, if the AWS account doesn't create a matching event bus for it.

              
            

            - **Name** *(string) --* 

              The name of the event source.

              
            

            - **State** *(string) --* 

              The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.

              
        
      
        

        - **NextToken** *(string) --* 

          A token you can use in a subsequent operation to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: list_partner_event_source_accounts(**kwargs)

    

    An SaaS partner can use this operation to display the AWS account ID that a particular partner event source name is associated with. This operation is not used by AWS customers.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListPartnerEventSourceAccounts>`_    


    **Request Syntax** 
    ::

      response = client.list_partner_event_source_accounts(
          EventSourceName='string',
          NextToken='string',
          Limit=123
      )
    :type EventSourceName: string
    :param EventSourceName: **[REQUIRED]** 

      The name of the partner event source to display account information about.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to this operation. Specifying this retrieves the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      Specifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'PartnerEventSourceAccounts': [
                {
                    'Account': 'string',
                    'CreationTime': datetime(2015, 1, 1),
                    'ExpirationTime': datetime(2015, 1, 1),
                    'State': 'PENDING'|'ACTIVE'|'DELETED'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **PartnerEventSourceAccounts** *(list) --* 

          The list of partner event sources returned by the operation.

          
          

          - *(dict) --* 

            The AWS account that a partner event source has been offered to.

            
            

            - **Account** *(string) --* 

              The AWS account ID that the partner event source was offered to.

              
            

            - **CreationTime** *(datetime) --* 

              The date and time the event source was created.

              
            

            - **ExpirationTime** *(datetime) --* 

              The date and time that the event source will expire, if the AWS account doesn't create a matching event bus for it.

              
            

            - **State** *(string) --* 

              The state of the event source. If it is ACTIVE, you have already created a matching event bus for this event source, and that event bus is active. If it is PENDING, either you haven't yet created a matching event bus, or that event bus is deactivated. If it is DELETED, you have created a matching event bus, but the event source has since been deleted.

              
        
      
        

        - **NextToken** *(string) --* 

          A token you can use in a subsequent operation to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: list_partner_event_sources(**kwargs)

    

    An SaaS partner can use this operation to list all the partner event source names that they have created. This operation is not used by AWS customers.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListPartnerEventSources>`_    


    **Request Syntax** 
    ::

      response = client.list_partner_event_sources(
          NamePrefix='string',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: **[REQUIRED]** 

      If you specify this, the results are limited to only those partner event sources that start with the string you specify.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to this operation. Specifying this retrieves the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      pecifying this limits the number of results returned by this operation. The operation also returns a NextToken which you can use in a subsequent operation to retrieve the next set of results.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'PartnerEventSources': [
                {
                    'Arn': 'string',
                    'Name': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **PartnerEventSources** *(list) --* 

          The list of partner event sources returned by the operation.

          
          

          - *(dict) --* 

            A partner event source is created by an SaaS partner. If a customer creates a partner event bus that matches this event source, that AWS account can receive events from the partner's applications or services.

            
            

            - **Arn** *(string) --* 

              The ARN of the partner event source.

              
            

            - **Name** *(string) --* 

              The name of the partner event source.

              
        
      
        

        - **NextToken** *(string) --* 

          A token you can use in a subsequent operation to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: list_replays(**kwargs)

    

    Lists your replays. You can either list all the replays or you can provide a prefix to match to the replay names. Filter parameters are exclusive.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListReplays>`_    


    **Request Syntax** 
    ::

      response = client.list_replays(
          NamePrefix='string',
          State='STARTING'|'RUNNING'|'CANCELLING'|'COMPLETED'|'CANCELLED'|'FAILED',
          EventSourceArn='string',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: 

      A name prefix to filter the replays returned. Only replays with name that match the prefix are returned.

      

    
    :type State: string
    :param State: 

      The state of the replay.

      

    
    :type EventSourceArn: string
    :param EventSourceArn: 

      The ARN of the event source associated with the replay.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of replays to retrieve.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Replays': [
                {
                    'ReplayName': 'string',
                    'EventSourceArn': 'string',
                    'State': 'STARTING'|'RUNNING'|'CANCELLING'|'COMPLETED'|'CANCELLED'|'FAILED',
                    'StateReason': 'string',
                    'EventStartTime': datetime(2015, 1, 1),
                    'EventEndTime': datetime(2015, 1, 1),
                    'EventLastReplayedTime': datetime(2015, 1, 1),
                    'ReplayStartTime': datetime(2015, 1, 1),
                    'ReplayEndTime': datetime(2015, 1, 1)
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Replays** *(list) --* 

          An array of ``Replay`` objects that contain information about the replay.

          
          

          - *(dict) --* 

            A ``Replay`` object that contains details about a replay.

            
            

            - **ReplayName** *(string) --* 

              The name of the replay.

              
            

            - **EventSourceArn** *(string) --* 

              The ARN of the archive to replay event from.

              
            

            - **State** *(string) --* 

              The current state of the replay.

              
            

            - **StateReason** *(string) --* 

              A description of why the replay is in the current state.

              
            

            - **EventStartTime** *(datetime) --* 

              A time stamp for the time to start replaying events. This is determined by the time in the event as described in `Time <https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEventsRequestEntry.html#eventbridge-Type-PutEventsRequestEntry-Time>`__ .

              
            

            - **EventEndTime** *(datetime) --* 

              A time stamp for the time to start replaying events. Any event with a creation time prior to the ``EventEndTime`` specified is replayed.

              
            

            - **EventLastReplayedTime** *(datetime) --* 

              A time stamp for the time that the last event was replayed.

              
            

            - **ReplayStartTime** *(datetime) --* 

              A time stamp for the time that the replay started.

              
            

            - **ReplayEndTime** *(datetime) --* 

              A time stamp for the time that the replay completed.

              
        
      
        

        - **NextToken** *(string) --* 

          The token returned by a previous call to retrieve the next set of results.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: list_rule_names_by_target(**kwargs)

    

    Lists the rules for the specified target. You can see which of the rules in Amazon EventBridge can invoke a specific target in your account.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRuleNamesByTarget>`_    


    **Request Syntax** 
    ::

      response = client.list_rule_names_by_target(
          TargetArn='string',
          EventBusName='string',
          NextToken='string',
          Limit=123
      )
    :type TargetArn: string
    :param TargetArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the target resource.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus to list rules for. If you omit this, the default event bus is used.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of results to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RuleNames': [
                'string',
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RuleNames** *(list) --* 

          The names of the rules that can invoke the given target.

          
          

          - *(string) --* 
      
        

        - **NextToken** *(string) --* 

          Indicates whether there are additional results to retrieve. If there are no more results, the value is null.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: list_rules(**kwargs)

    

    Lists your Amazon EventBridge rules. You can either list all the rules or you can provide a prefix to match to the rule names.

     

    ListRules does not list the targets of a rule. To see the targets associated with a rule, use  ListTargetsByRule .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRules>`_    


    **Request Syntax** 
    ::

      response = client.list_rules(
          NamePrefix='string',
          EventBusName='string',
          NextToken='string',
          Limit=123
      )
    :type NamePrefix: string
    :param NamePrefix: 

      The prefix matching the rule name.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus to list the rules for. If you omit this, the default event bus is used.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of results to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Rules': [
                {
                    'Name': 'string',
                    'Arn': 'string',
                    'EventPattern': 'string',
                    'State': 'ENABLED'|'DISABLED',
                    'Description': 'string',
                    'ScheduleExpression': 'string',
                    'RoleArn': 'string',
                    'ManagedBy': 'string',
                    'EventBusName': 'string'
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Rules** *(list) --* 

          The rules that match the specified criteria.

          
          

          - *(dict) --* 

            Contains information about a rule in Amazon EventBridge.

            
            

            - **Name** *(string) --* 

              The name of the rule.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the rule.

              
            

            - **EventPattern** *(string) --* 

              The event pattern of the rule. For more information, see `Events and Event Patterns <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html>`__ in the *Amazon EventBridge User Guide* .

              
            

            - **State** *(string) --* 

              The state of the rule.

              
            

            - **Description** *(string) --* 

              The description of the rule.

              
            

            - **ScheduleExpression** *(string) --* 

              The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)".

              
            

            - **RoleArn** *(string) --* 

              The Amazon Resource Name (ARN) of the role that is used for target invocation.

              
            

            - **ManagedBy** *(string) --* 

              If the rule was created on behalf of your account by an AWS service, this field displays the principal name of the service that created the rule.

              
            

            - **EventBusName** *(string) --* 

              The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

              
        
      
        

        - **NextToken** *(string) --* 

          Indicates whether there are additional results to retrieve. If there are no more results, the value is null.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: list_tags_for_resource(**kwargs)

    

    Displays the tags associated with an EventBridge resource. In EventBridge, rules and event buses can be tagged.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListTagsForResource>`_    


    **Request Syntax** 
    ::

      response = client.list_tags_for_resource(
          ResourceARN='string'
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The ARN of the EventBridge resource for which you want to view tags.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Tags** *(list) --* 

          The list of tag keys and values associated with the resource you specified

          
          

          - *(dict) --* 

            A key-value pair associated with an AWS resource. In EventBridge, rules and event buses support tagging.

            
            

            - **Key** *(string) --* 

              A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.

              
            

            - **Value** *(string) --* 

              The value for the specified tag key.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: list_targets_by_rule(**kwargs)

    

    Lists the targets assigned to the specified rule.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListTargetsByRule>`_    


    **Request Syntax** 
    ::

      response = client.list_targets_by_rule(
          Rule='string',
          EventBusName='string',
          NextToken='string',
          Limit=123
      )
    :type Rule: string
    :param Rule: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    :type NextToken: string
    :param NextToken: 

      The token returned by a previous call to retrieve the next set of results.

      

    
    :type Limit: integer
    :param Limit: 

      The maximum number of results to return.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Targets': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'RoleArn': 'string',
                    'Input': 'string',
                    'InputPath': 'string',
                    'InputTransformer': {
                        'InputPathsMap': {
                            'string': 'string'
                        },
                        'InputTemplate': 'string'
                    },
                    'KinesisParameters': {
                        'PartitionKeyPath': 'string'
                    },
                    'RunCommandParameters': {
                        'RunCommandTargets': [
                            {
                                'Key': 'string',
                                'Values': [
                                    'string',
                                ]
                            },
                        ]
                    },
                    'EcsParameters': {
                        'TaskDefinitionArn': 'string',
                        'TaskCount': 123,
                        'LaunchType': 'EC2'|'FARGATE',
                        'NetworkConfiguration': {
                            'awsvpcConfiguration': {
                                'Subnets': [
                                    'string',
                                ],
                                'SecurityGroups': [
                                    'string',
                                ],
                                'AssignPublicIp': 'ENABLED'|'DISABLED'
                            }
                        },
                        'PlatformVersion': 'string',
                        'Group': 'string',
                        'CapacityProviderStrategy': [
                            {
                                'capacityProvider': 'string',
                                'weight': 123,
                                'base': 123
                            },
                        ],
                        'EnableECSManagedTags': True|False,
                        'EnableExecuteCommand': True|False,
                        'PlacementConstraints': [
                            {
                                'type': 'distinctInstance'|'memberOf',
                                'expression': 'string'
                            },
                        ],
                        'PlacementStrategy': [
                            {
                                'type': 'random'|'spread'|'binpack',
                                'field': 'string'
                            },
                        ],
                        'PropagateTags': 'TASK_DEFINITION',
                        'ReferenceId': 'string',
                        'Tags': [
                            {
                                'Key': 'string',
                                'Value': 'string'
                            },
                        ]
                    },
                    'BatchParameters': {
                        'JobDefinition': 'string',
                        'JobName': 'string',
                        'ArrayProperties': {
                            'Size': 123
                        },
                        'RetryStrategy': {
                            'Attempts': 123
                        }
                    },
                    'SqsParameters': {
                        'MessageGroupId': 'string'
                    },
                    'HttpParameters': {
                        'PathParameterValues': [
                            'string',
                        ],
                        'HeaderParameters': {
                            'string': 'string'
                        },
                        'QueryStringParameters': {
                            'string': 'string'
                        }
                    },
                    'RedshiftDataParameters': {
                        'SecretManagerArn': 'string',
                        'Database': 'string',
                        'DbUser': 'string',
                        'Sql': 'string',
                        'StatementName': 'string',
                        'WithEvent': True|False
                    },
                    'SageMakerPipelineParameters': {
                        'PipelineParameterList': [
                            {
                                'Name': 'string',
                                'Value': 'string'
                            },
                        ]
                    },
                    'DeadLetterConfig': {
                        'Arn': 'string'
                    },
                    'RetryPolicy': {
                        'MaximumRetryAttempts': 123,
                        'MaximumEventAgeInSeconds': 123
                    }
                },
            ],
            'NextToken': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Targets** *(list) --* 

          The targets assigned to the rule.

          
          

          - *(dict) --* 

            Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see  PutTargets .

             

            If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a ``RoleArn`` with proper permissions in the ``Target`` structure. For more information, see `Sending and Receiving Events Between AWS Accounts <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html>`__ in the *Amazon EventBridge User Guide* .

            
            

            - **Id** *(string) --* 

              The ID of the target.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the target.

              
            

            - **RoleArn** *(string) --* 

              The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.

              
            

            - **Input** *(string) --* 

              Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see `The JavaScript Object Notation (JSON) Data Interchange Format <http://www.rfc-editor.org/rfc/rfc7159.txt>`__ .

              
            

            - **InputPath** *(string) --* 

              The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You must use JSON dot notation, not bracket notation. For more information about JSON paths, see `JSONPath <http://goessner.net/articles/JsonPath/>`__ .

              
            

            - **InputTransformer** *(dict) --* 

              Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.

              
              

              - **InputPathsMap** *(dict) --* 

                Map of JSON paths to be extracted from the event. You can then insert these in the template in ``InputTemplate`` to produce the output you want to be sent to the target.

                 

                 ``InputPathsMap`` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.

                 

                The keys cannot start with "AWS." 

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **InputTemplate** *(string) --* 

                Input template where you specify placeholders that will be filled with the values of the keys from ``InputPathsMap`` to customize the data sent to the target. Enclose each ``InputPathsMaps`` value in brackets: <*value* > The InputTemplate must be valid JSON.

                 

                If ``InputTemplate`` is a JSON object (surrounded by curly braces), the following restrictions apply:

                 

                 
                * The placeholder cannot be used as an object key. 
                 

                 

                The following example shows the syntax for using ``InputPathsMap`` and ``InputTemplate`` .

                 

                 ``"InputTransformer":``  

                 

                 ``{``  

                 

                 ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

                 

                 ``"InputTemplate": "<instance> is in state <status>"``  

                 

                 ``}``  

                 

                To have the ``InputTemplate`` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:

                 

                 ``"InputTransformer":``  

                 

                 ``{``  

                 

                 ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

                 

                 ``"InputTemplate": "<instance> is in state \"<status>\""``  

                 

                 ``}``  

                 

                The ``InputTemplate`` can also be valid JSON with varibles in quotes or out, as in the following example:

                 

                 ``"InputTransformer":``  

                 

                 ``{``  

                 

                 ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

                 

                 ``"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'``  

                 

                 ``}``  

                
          
            

            - **KinesisParameters** *(dict) --* 

              The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the ``eventId`` as the partition key.

              
              

              - **PartitionKeyPath** *(string) --* 

                The JSON path to be extracted from the event and used as the partition key. For more information, see `Amazon Kinesis Streams Key Concepts <https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key>`__ in the *Amazon Kinesis Streams Developer Guide* .

                
          
            

            - **RunCommandParameters** *(dict) --* 

              Parameters used when you are using the rule to invoke Amazon EC2 Run Command.

              
              

              - **RunCommandTargets** *(list) --* 

                Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.

                
                

                - *(dict) --* 

                  Information about the EC2 instances that are to be sent the command, specified as key-value pairs. Each ``RunCommandTarget`` block can include only one key, but this key may specify multiple values.

                  
                  

                  - **Key** *(string) --* 

                    Can be either ``tag:``  *tag-key* or ``InstanceIds`` .

                    
                  

                  - **Values** *(list) --* 

                    If ``Key`` is ``tag:``  *tag-key* , ``Values`` is a list of tag values. If ``Key`` is ``InstanceIds`` , ``Values`` is a list of Amazon EC2 instance IDs.

                    
                    

                    - *(string) --* 
                
              
            
          
            

            - **EcsParameters** *(dict) --* 

              Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see `Task Definitions <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in the *Amazon EC2 Container Service Developer Guide* .

              
              

              - **TaskDefinitionArn** *(string) --* 

                The ARN of the task definition to use if the event target is an Amazon ECS task. 

                
              

              - **TaskCount** *(integer) --* 

                The number of tasks to create based on ``TaskDefinition`` . The default is 1.

                
              

              - **LaunchType** *(string) --* 

                Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The ``FARGATE`` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see `AWS Fargate on Amazon ECS <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

                
              

              - **NetworkConfiguration** *(dict) --* 

                Use this structure if the ECS task uses the ``awsvpc`` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if ``LaunchType`` is ``FARGATE`` because the ``awsvpc`` mode is required for Fargate tasks.

                 

                If you specify ``NetworkConfiguration`` when the target ECS task does not use the ``awsvpc`` network mode, the task fails.

                
                

                - **awsvpcConfiguration** *(dict) --* 

                  Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the ``awsvpc`` network mode.

                  
                  

                  - **Subnets** *(list) --* 

                    Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.

                    
                    

                    - *(string) --* 
                
                  

                  - **SecurityGroups** *(list) --* 

                    Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.

                    
                    

                    - *(string) --* 
                
                  

                  - **AssignPublicIp** *(string) --* 

                    Specifies whether the task's elastic network interface receives a public IP address. You can specify ``ENABLED`` only when ``LaunchType`` in ``EcsParameters`` is set to ``FARGATE`` .

                    
              
            
              

              - **PlatformVersion** *(string) --* 

                Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as ``1.1.0`` .

                 

                This structure is used only if ``LaunchType`` is ``FARGATE`` . For more information about valid platform versions, see `AWS Fargate Platform Versions <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

                
              

              - **Group** *(string) --* 

                Specifies an ECS task group for the task. The maximum length is 255 characters.

                
              

              - **CapacityProviderStrategy** *(list) --* 

                The capacity provider strategy to use for the task.

                 

                If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or launchType is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used. 

                
                

                - *(dict) --* 

                  The details of a capacity provider strategy. To learn more, see `CapacityProviderStrategyItem <https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html>`__ in the Amazon ECS API Reference.

                  
                  

                  - **capacityProvider** *(string) --* 

                    The short name of the capacity provider.

                    
                  

                  - **weight** *(integer) --* 

                    The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.

                    
                  

                  - **base** *(integer) --* 

                    The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. 

                    
              
            
              

              - **EnableECSManagedTags** *(boolean) --* 

                Specifies whether to enable Amazon ECS managed tags for the task. For more information, see `Tagging Your Amazon ECS Resources <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the Amazon Elastic Container Service Developer Guide. 

                
              

              - **EnableExecuteCommand** *(boolean) --* 

                Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.

                
              

              - **PlacementConstraints** *(list) --* 

                An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).

                
                

                - *(dict) --* 

                  An object representing a constraint on task placement. To learn more, see `Task Placement Constraints <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__ in the Amazon Elastic Container Service Developer Guide.

                  
                  

                  - **type** *(string) --* 

                    The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. 

                    
                  

                  - **expression** *(string) --* 

                    A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is ``distinctInstance`` . To learn more, see `Cluster Query Language <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__ in the Amazon Elastic Container Service Developer Guide. 

                    
              
            
              

              - **PlacementStrategy** *(list) --* 

                The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. 

                
                

                - *(dict) --* 

                  The task placement strategy for a task or service. To learn more, see `Task Placement Strategies <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__ in the Amazon Elastic Container Service Developer Guide.

                  
                  

                  - **type** *(string) --* 

                    The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). 

                    
                  

                  - **field** *(string) --* 

                    The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. 

                    
              
            
              

              - **PropagateTags** *(string) --* 

                Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. 

                
              

              - **ReferenceId** *(string) --* 

                The reference ID to use for the task.

                
              

              - **Tags** *(list) --* 

                The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see `RunTask <https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags>`__ in the Amazon ECS API Reference.

                
                

                - *(dict) --* 

                  A key-value pair associated with an AWS resource. In EventBridge, rules and event buses support tagging.

                  
                  

                  - **Key** *(string) --* 

                    A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.

                    
                  

                  - **Value** *(string) --* 

                    The value for the specified tag key.

                    
              
            
          
            

            - **BatchParameters** *(dict) --* 

              If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see `Jobs <https://docs.aws.amazon.com/batch/latest/userguide/jobs.html>`__ in the *AWS Batch User Guide* .

              
              

              - **JobDefinition** *(string) --* 

                The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.

                
              

              - **JobName** *(string) --* 

                The name to use for this execution of the job, if the target is an AWS Batch job.

                
              

              - **ArrayProperties** *(dict) --* 

                The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.

                
                

                - **Size** *(integer) --* 

                  The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.

                  
            
              

              - **RetryStrategy** *(dict) --* 

                The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.

                
                

                - **Attempts** *(integer) --* 

                  The number of times to attempt to retry, if the job fails. Valid values are 1–10.

                  
            
          
            

            - **SqsParameters** *(dict) --* 

              Contains the message group ID to use when the target is a FIFO queue.

               

              If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.

              
              

              - **MessageGroupId** *(string) --* 

                The FIFO message group ID to use as the target.

                
          
            

            - **HttpParameters** *(dict) --* 

              Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination.

               

              If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.

              
              

              - **PathParameterValues** *(list) --* 

                The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").

                
                

                - *(string) --* 
            
              

              - **HeaderParameters** *(dict) --* 

                The headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **QueryStringParameters** *(dict) --* 

                The query string keys/values that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
            

            - **RedshiftDataParameters** *(dict) --* 

              Contains the Redshift Data API parameters to use when the target is a Redshift cluster.

               

              If you specify a Redshift Cluster as a Target, you can use this to specify parameters to invoke the Redshift Data API ExecuteStatement based on EventBridge events.

              
              

              - **SecretManagerArn** *(string) --* 

                The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.

                
              

              - **Database** *(string) --* 

                The name of the database. Required when authenticating using temporary credentials.

                
              

              - **DbUser** *(string) --* 

                The database user name. Required when authenticating using temporary credentials.

                
              

              - **Sql** *(string) --* 

                The SQL statement text to run.

                
              

              - **StatementName** *(string) --* 

                The name of the SQL statement. You can name the SQL statement when you create it to identify the query.

                
              

              - **WithEvent** *(boolean) --* 

                Indicates whether to send an event back to EventBridge after the SQL statement runs.

                
          
            

            - **SageMakerPipelineParameters** *(dict) --* 

              Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline.

               

              If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.

              
              

              - **PipelineParameterList** *(list) --* 

                List of Parameter names and values for SageMaker Model Building Pipeline execution.

                
                

                - *(dict) --* 

                  Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.

                  
                  

                  - **Name** *(string) --* 

                    Name of parameter to start execution of a SageMaker Model Building Pipeline.

                    
                  

                  - **Value** *(string) --* 

                    Value of parameter to start execution of a SageMaker Model Building Pipeline.

                    
              
            
          
            

            - **DeadLetterConfig** *(dict) --* 

              The ``DeadLetterConfig`` that defines the target queue to send dead-letter queue events to.

              
              

              - **Arn** *(string) --* 

                The ARN of the SQS queue specified as the target for the dead-letter queue.

                
          
            

            - **RetryPolicy** *(dict) --* 

              The ``RetryPolicy`` object that contains the retry policy configuration to use for the dead-letter queue.

              
              

              - **MaximumRetryAttempts** *(integer) --* 

                The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the ``MaximumEventAgeInSeconds`` is met.

                
              

              - **MaximumEventAgeInSeconds** *(integer) --* 

                The maximum amount of time, in seconds, to continue to make retry attempts.

                
          
        
      
        

        - **NextToken** *(string) --* 

          Indicates whether there are additional results to retrieve. If there are no more results, the value is null.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: put_events(**kwargs)

    

    Sends custom events to Amazon EventBridge so that they can be matched to rules.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutEvents>`_    


    **Request Syntax** 
    ::

      response = client.put_events(
          Entries=[
              {
                  'Time': datetime(2015, 1, 1),
                  'Source': 'string',
                  'Resources': [
                      'string',
                  ],
                  'DetailType': 'string',
                  'Detail': 'string',
                  'EventBusName': 'string',
                  'TraceHeader': 'string'
              },
          ]
      )
    :type Entries: list
    :param Entries: **[REQUIRED]** 

      The entry that defines an event in your system. You can specify several parameters for the entry such as the source and type of the event, resources associated with the event, and so on.

      

    
      - *(dict) --* 

        Represents an event to be submitted.

        

      
        - **Time** *(datetime) --* 

          The time stamp of the event, per `RFC3339 <https://www.rfc-editor.org/rfc/rfc3339.txt>`__ . If no time stamp is provided, the time stamp of the  PutEvents call is used.

          

        
        - **Source** *(string) --* 

          The source of the event.

          

        
        - **Resources** *(list) --* 

          AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.

          

        
          - *(string) --* 

          
      
        - **DetailType** *(string) --* 

          Free-form string used to decide what fields to expect in the event detail.

          

        
        - **Detail** *(string) --* 

          A valid JSON string. There is no other schema imposed. The JSON string may contain fields and nested subobjects.

          

        
        - **EventBusName** *(string) --* 

          The name or ARN of the event bus to receive the event. Only the rules that are associated with this event bus are used to match the event. If you omit this, the default event bus is used.

          

        
        - **TraceHeader** *(string) --* 

          An AWS X-Ray trade header, which is an http header (X-Amzn-Trace-Id) that contains the trace-id associated with the event.

           

          To learn more about X-Ray trace headers, see `Tracing header <https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader>`__ in the AWS X-Ray Developer Guide.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedEntryCount': 123,
            'Entries': [
                {
                    'EventId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedEntryCount** *(integer) --* 

          The number of failed entries.

          
        

        - **Entries** *(list) --* 

          The successfully and unsuccessfully ingested events results. If the ingestion was successful, the entry has the event ID in it. Otherwise, you can use the error code and error message to identify the problem with the entry.

          
          

          - *(dict) --* 

            Represents an event that failed to be submitted.

            
            

            - **EventId** *(string) --* 

              The ID of the event.

              
            

            - **ErrorCode** *(string) --* 

              The error code that indicates why the event submission failed.

              
            

            - **ErrorMessage** *(string) --* 

              The error message that explains why the event submission failed.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: put_partner_events(**kwargs)

    

    This is used by SaaS partners to write events to a customer's partner event bus. AWS customers do not use this operation.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutPartnerEvents>`_    


    **Request Syntax** 
    ::

      response = client.put_partner_events(
          Entries=[
              {
                  'Time': datetime(2015, 1, 1),
                  'Source': 'string',
                  'Resources': [
                      'string',
                  ],
                  'DetailType': 'string',
                  'Detail': 'string'
              },
          ]
      )
    :type Entries: list
    :param Entries: **[REQUIRED]** 

      The list of events to write to the event bus.

      

    
      - *(dict) --* 

        The details about an event generated by an SaaS partner.

        

      
        - **Time** *(datetime) --* 

          The date and time of the event.

          

        
        - **Source** *(string) --* 

          The event source that is generating the evntry.

          

        
        - **Resources** *(list) --* 

          AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.

          

        
          - *(string) --* 

          
      
        - **DetailType** *(string) --* 

          A free-form string used to decide what fields to expect in the event detail.

          

        
        - **Detail** *(string) --* 

          A valid JSON string. There is no other schema imposed. The JSON string may contain fields and nested subobjects.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedEntryCount': 123,
            'Entries': [
                {
                    'EventId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedEntryCount** *(integer) --* 

          The number of events from this operation that could not be written to the partner event bus.

          
        

        - **Entries** *(list) --* 

          The list of events from this operation that were successfully written to the partner event bus.

          
          

          - *(dict) --* 

            Represents an event that a partner tried to generate, but failed.

            
            

            - **EventId** *(string) --* 

              The ID of the event.

              
            

            - **ErrorCode** *(string) --* 

              The error code that indicates why the event submission failed.

              
            

            - **ErrorMessage** *(string) --* 

              The error message that explains why the event submission failed.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: put_permission(**kwargs)

    

    Running ``PutPermission`` permits the specified AWS account or AWS organization to put events to the specified *event bus* . Amazon EventBridge (CloudWatch Events) rules in your account are triggered by these events arriving to an event bus in your account. 

     

    For another account to send events to your account, that external account must have an EventBridge rule with your account's event bus as a target.

     

    To enable multiple AWS accounts to put events to your event bus, run ``PutPermission`` once for each of these accounts. Or, if all the accounts are members of the same AWS organization, you can run ``PutPermission`` once specifying ``Principal`` as "*" and specifying the AWS organization ID in ``Condition`` , to grant permissions to all accounts in that organization.

     

    If you grant permissions using an organization, then accounts in that organization must specify a ``RoleArn`` with proper permissions when they use ``PutTarget`` to add your account's event bus as a target. For more information, see `Sending and Receiving Events Between AWS Accounts <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html>`__ in the *Amazon EventBridge User Guide* .

     

    The permission policy on the default event bus cannot exceed 10 KB in size.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutPermission>`_    


    **Request Syntax** 
    ::

      response = client.put_permission(
          EventBusName='string',
          Action='string',
          Principal='string',
          StatementId='string',
          Condition={
              'Type': 'string',
              'Key': 'string',
              'Value': 'string'
          },
          Policy='string'
      )
    :type EventBusName: string
    :param EventBusName: 

      The name of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    :type Action: string
    :param Action: 

      The action that you are enabling the other account to perform. Currently, this must be ``events:PutEvents`` .

      

    
    :type Principal: string
    :param Principal: 

      The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify "*" to permit any account to put events to your default event bus.

       

      If you specify "*" without specifying ``Condition`` , avoid creating rules that may match undesirable events. To create more secure rules, make sure that the event pattern for each rule contains an ``account`` field with a specific account ID from which to receive events. Rules with an account field do not match any events sent from other accounts.

      

    
    :type StatementId: string
    :param StatementId: 

      An identifier string for the external account that you are granting permissions to. If you later want to revoke the permission for this external account, specify this ``StatementId`` when you run  RemovePermission .

      

    
    :type Condition: dict
    :param Condition: 

      This parameter enables you to limit the permission to accounts that fulfill a certain condition, such as being a member of a certain AWS organization. For more information about AWS Organizations, see `What Is AWS Organizations <https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html>`__ in the *AWS Organizations User Guide* .

       

      If you specify ``Condition`` with an AWS organization ID, and specify "*" as the value for ``Principal`` , you grant permission to all the accounts in the named organization.

       

      The ``Condition`` is a JSON string which must contain ``Type`` , ``Key`` , and ``Value`` fields.

      

    
      - **Type** *(string) --* **[REQUIRED]** 

        Specifies the type of condition. Currently the only supported value is ``StringEquals`` .

        

      
      - **Key** *(string) --* **[REQUIRED]** 

        Specifies the key for the condition. Currently the only supported key is ``aws:PrincipalOrgID`` .

        

      
      - **Value** *(string) --* **[REQUIRED]** 

        Specifies the value for the key. Currently, this must be the ID of the organization.

        

      
    
    :type Policy: string
    :param Policy: 

      A JSON string that describes the permission policy statement. You can include a ``Policy`` parameter in the request instead of using the ``StatementId`` , ``Action`` , ``Principal`` , or ``Condition`` parameters.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.PolicyLengthExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: put_rule(**kwargs)

    

    Creates or updates the specified rule. Rules are enabled by default, or based on value of the state. You can disable a rule using  DisableRule .

     

    A single rule watches for events from a single event bus. Events generated by AWS services go to your account's default event bus. Events generated by SaaS partner services or applications go to the matching partner event bus. If you have custom applications or services, you can specify whether their events go to your default event bus or a custom event bus that you have created. For more information, see  CreateEventBus .

     

    If you are updating an existing rule, the rule is replaced with what you specify in this ``PutRule`` command. If you omit arguments in ``PutRule`` , the old values for those arguments are not kept. Instead, they are replaced with null values.

     

    When you create or update a rule, incoming events might not immediately start matching to new or updated rules. Allow a short period of time for changes to take effect.

     

    A rule must contain at least an EventPattern or ScheduleExpression. Rules with EventPatterns are triggered when a matching event is observed. Rules with ScheduleExpressions self-trigger based on the given schedule. A rule can have both an EventPattern and a ScheduleExpression, in which case the rule triggers on matching events as well as on a schedule.

     

    When you initially create a rule, you can optionally assign one or more tags to the rule. Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only rules with certain tag values. To use the ``PutRule`` operation and assign tags, you must have both the ``events:PutRule`` and ``events:TagResource`` permissions.

     

    If you are updating an existing rule, any tags you specify in the ``PutRule`` operation are ignored. To update the tags of an existing rule, use  TagResource and  UntagResource .

     

    Most services in AWS treat : or / as the same character in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event patterns and rules. Be sure to use the correct ARN characters when creating event patterns so that they match the ARN syntax in the event you want to match.

     

    In EventBridge, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop.

     

    To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. 

     

    An infinite loop can quickly cause higher than expected charges. We recommend that you use budgeting, which alerts you when charges exceed your specified limit. For more information, see `Managing Your Costs with Budgets <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutRule>`_    


    **Request Syntax** 
    ::

      response = client.put_rule(
          Name='string',
          ScheduleExpression='string',
          EventPattern='string',
          State='ENABLED'|'DISABLED',
          Description='string',
          RoleArn='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ],
          EventBusName='string'
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the rule that you are creating or updating.

      

    
    :type ScheduleExpression: string
    :param ScheduleExpression: 

      The scheduling expression. For example, "cron(0 20 * * ? *)" or "rate(5 minutes)".

      

    
    :type EventPattern: string
    :param EventPattern: 

      The event pattern. For more information, see `Events and Event Patterns <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html>`__ in the *Amazon EventBridge User Guide* .

      

    
    :type State: string
    :param State: 

      Indicates whether the rule is enabled or disabled.

      

    
    :type Description: string
    :param Description: 

      A description of the rule.

      

    
    :type RoleArn: string
    :param RoleArn: 

      The Amazon Resource Name (ARN) of the IAM role associated with the rule.

      

    
    :type Tags: list
    :param Tags: 

      The list of key-value pairs to associate with the rule.

      

    
      - *(dict) --* 

        A key-value pair associated with an AWS resource. In EventBridge, rules and event buses support tagging.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the specified tag key.

          

        
      
  
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus to associate with this rule. If you omit this, the default event bus is used.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RuleArn': 'string'
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RuleArn** *(string) --* 

          The Amazon Resource Name (ARN) of the rule.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InvalidEventPatternException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    

  .. py:method:: put_targets(**kwargs)

    

    Adds the specified targets to the specified rule, or updates the targets if they are already associated with the rule.

     

    Targets are the resources that are invoked when a rule is triggered.

     

    You can configure the following as targets for Events:

     

     
    * `API destination <https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-api-destinations.html>`__   
     
    * Amazon API Gateway REST API endpoints 
     
    * API Gateway 
     
    * AWS Batch job queue 
     
    * CloudWatch Logs group 
     
    * CodeBuild project 
     
    * CodePineline 
     
    * Amazon EC2 ``CreateSnapshot`` API call 
     
    * Amazon EC2 ``RebootInstances`` API call 
     
    * Amazon EC2 ``StopInstances`` API call 
     
    * Amazon EC2 ``TerminateInstances`` API call 
     
    * Amazon ECS tasks 
     
    * Event bus in a different AWS account or Region. You can use an event bus in the US East (N. Virginia) us-east-1, US West (Oregon) us-west-2, or Europe (Ireland) eu-west-1 Regions as a target for a rule. 
     
    * Firehose delivery stream (Kinesis Data Firehose) 
     
    * Inspector assessment template (Amazon Inspector) 
     
    * Kinesis stream (Kinesis Data Stream) 
     
    * AWS Lambda function 
     
    * Redshift clusters (Data API statement execution) 
     
    * Amazon SNS topic 
     
    * Amazon SQS queues (includes FIFO queues 
     
    * SSM Automation 
     
    * SSM OpsItem 
     
    * SSM Run Command 
     
    * Step Functions state machines 
     

     

    Creating rules with built-in targets is supported only in the AWS Management Console. The built-in targets are ``EC2 CreateSnapshot API call`` , ``EC2 RebootInstances API call`` , ``EC2 StopInstances API call`` , and ``EC2 TerminateInstances API call`` . 

     

    For some target types, ``PutTargets`` provides target-specific parameters. If the target is a Kinesis data stream, you can optionally specify which shard the event goes to by using the ``KinesisParameters`` argument. To invoke a command on multiple EC2 instances with one rule, you can use the ``RunCommandParameters`` field.

     

    To be able to make API calls against the resources that you own, Amazon EventBridge (CloudWatch Events) needs the appropriate permissions. For AWS Lambda and Amazon SNS resources, EventBridge relies on resource-based policies. For EC2 instances, Kinesis data streams, AWS Step Functions state machines and API Gateway REST APIs, EventBridge relies on IAM roles that you specify in the ``RoleARN`` argument in ``PutTargets`` . For more information, see `Authentication and Access Control <https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html>`__ in the *Amazon EventBridge User Guide* .

     

    If another AWS account is in the same region and has granted you permission (using ``PutPermission`` ), you can send events to that account. Set that account's event bus as a target of the rules in your account. To send the matched events to the other account, specify that account's event bus as the ``Arn`` value when you run ``PutTargets`` . If your account sends events to another account, your account is charged for each sent event. Each event sent to another account is charged as a custom event. The account receiving the event is not charged. For more information, see `Amazon EventBridge (CloudWatch Events) Pricing <https://aws.amazon.com/eventbridge/pricing/>`__ .

     

    .. note::

       

       ``Input`` , ``InputPath`` , and ``InputTransformer`` are not available with ``PutTarget`` if the target is an event bus of a different AWS account.

       

     

    If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a ``RoleArn`` with proper permissions in the ``Target`` structure. For more information, see `Sending and Receiving Events Between AWS Accounts <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html>`__ in the *Amazon EventBridge User Guide* .

     

    For more information about enabling cross-account events, see  PutPermission .

     

     **Input** , **InputPath** , and **InputTransformer** are mutually exclusive and optional parameters of a target. When a rule is triggered due to a matched event:

     

     
    * If none of the following arguments are specified for a target, then the entire event is passed to the target in JSON format (unless the target is Amazon EC2 Run Command or Amazon ECS task, in which case nothing from the event is passed to the target). 
     
    * If **Input** is specified in the form of valid JSON, then the matched event is overridden with this constant. 
     
    * If **InputPath** is specified in the form of JSONPath (for example, ``$.detail`` ), then only the part of the event specified in the path is passed to the target (for example, only the detail part of the event is passed). 
     
    * If **InputTransformer** is specified, then one or more specified JSONPaths are extracted from the event and used as values in a template that you specify as the input to the target. 
     

     

    When you specify ``InputPath`` or ``InputTransformer`` , you must use JSON dot notation, not bracket notation.

     

    When you add targets to a rule and the associated rule triggers soon after, new or updated targets might not be immediately invoked. Allow a short period of time for changes to take effect.

     

    This action can partially fail if too many requests are made at the same time. If that happens, ``FailedEntryCount`` is non-zero in the response and each entry in ``FailedEntries`` provides the ID of the failed target and the error code.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutTargets>`_    


    **Request Syntax** 
    ::

      response = client.put_targets(
          Rule='string',
          EventBusName='string',
          Targets=[
              {
                  'Id': 'string',
                  'Arn': 'string',
                  'RoleArn': 'string',
                  'Input': 'string',
                  'InputPath': 'string',
                  'InputTransformer': {
                      'InputPathsMap': {
                          'string': 'string'
                      },
                      'InputTemplate': 'string'
                  },
                  'KinesisParameters': {
                      'PartitionKeyPath': 'string'
                  },
                  'RunCommandParameters': {
                      'RunCommandTargets': [
                          {
                              'Key': 'string',
                              'Values': [
                                  'string',
                              ]
                          },
                      ]
                  },
                  'EcsParameters': {
                      'TaskDefinitionArn': 'string',
                      'TaskCount': 123,
                      'LaunchType': 'EC2'|'FARGATE',
                      'NetworkConfiguration': {
                          'awsvpcConfiguration': {
                              'Subnets': [
                                  'string',
                              ],
                              'SecurityGroups': [
                                  'string',
                              ],
                              'AssignPublicIp': 'ENABLED'|'DISABLED'
                          }
                      },
                      'PlatformVersion': 'string',
                      'Group': 'string',
                      'CapacityProviderStrategy': [
                          {
                              'capacityProvider': 'string',
                              'weight': 123,
                              'base': 123
                          },
                      ],
                      'EnableECSManagedTags': True|False,
                      'EnableExecuteCommand': True|False,
                      'PlacementConstraints': [
                          {
                              'type': 'distinctInstance'|'memberOf',
                              'expression': 'string'
                          },
                      ],
                      'PlacementStrategy': [
                          {
                              'type': 'random'|'spread'|'binpack',
                              'field': 'string'
                          },
                      ],
                      'PropagateTags': 'TASK_DEFINITION',
                      'ReferenceId': 'string',
                      'Tags': [
                          {
                              'Key': 'string',
                              'Value': 'string'
                          },
                      ]
                  },
                  'BatchParameters': {
                      'JobDefinition': 'string',
                      'JobName': 'string',
                      'ArrayProperties': {
                          'Size': 123
                      },
                      'RetryStrategy': {
                          'Attempts': 123
                      }
                  },
                  'SqsParameters': {
                      'MessageGroupId': 'string'
                  },
                  'HttpParameters': {
                      'PathParameterValues': [
                          'string',
                      ],
                      'HeaderParameters': {
                          'string': 'string'
                      },
                      'QueryStringParameters': {
                          'string': 'string'
                      }
                  },
                  'RedshiftDataParameters': {
                      'SecretManagerArn': 'string',
                      'Database': 'string',
                      'DbUser': 'string',
                      'Sql': 'string',
                      'StatementName': 'string',
                      'WithEvent': True|False
                  },
                  'SageMakerPipelineParameters': {
                      'PipelineParameterList': [
                          {
                              'Name': 'string',
                              'Value': 'string'
                          },
                      ]
                  },
                  'DeadLetterConfig': {
                      'Arn': 'string'
                  },
                  'RetryPolicy': {
                      'MaximumRetryAttempts': 123,
                      'MaximumEventAgeInSeconds': 123
                  }
              },
          ]
      )
    :type Rule: string
    :param Rule: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    :type Targets: list
    :param Targets: **[REQUIRED]** 

      The targets to update or add to the rule.

      

    
      - *(dict) --* 

        Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see  PutTargets .

         

        If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a ``RoleArn`` with proper permissions in the ``Target`` structure. For more information, see `Sending and Receiving Events Between AWS Accounts <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html>`__ in the *Amazon EventBridge User Guide* .

        

      
        - **Id** *(string) --* **[REQUIRED]** 

          The ID of the target.

          

        
        - **Arn** *(string) --* **[REQUIRED]** 

          The Amazon Resource Name (ARN) of the target.

          

        
        - **RoleArn** *(string) --* 

          The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.

          

        
        - **Input** *(string) --* 

          Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see `The JavaScript Object Notation (JSON) Data Interchange Format <http://www.rfc-editor.org/rfc/rfc7159.txt>`__ .

          

        
        - **InputPath** *(string) --* 

          The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You must use JSON dot notation, not bracket notation. For more information about JSON paths, see `JSONPath <http://goessner.net/articles/JsonPath/>`__ .

          

        
        - **InputTransformer** *(dict) --* 

          Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.

          

        
          - **InputPathsMap** *(dict) --* 

            Map of JSON paths to be extracted from the event. You can then insert these in the template in ``InputTemplate`` to produce the output you want to be sent to the target.

             

             ``InputPathsMap`` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.

             

            The keys cannot start with "AWS." 

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
          - **InputTemplate** *(string) --* **[REQUIRED]** 

            Input template where you specify placeholders that will be filled with the values of the keys from ``InputPathsMap`` to customize the data sent to the target. Enclose each ``InputPathsMaps`` value in brackets: <*value* > The InputTemplate must be valid JSON.

             

            If ``InputTemplate`` is a JSON object (surrounded by curly braces), the following restrictions apply:

             

             
            * The placeholder cannot be used as an object key. 
             

             

            The following example shows the syntax for using ``InputPathsMap`` and ``InputTemplate`` .

             

             ``"InputTransformer":``  

             

             ``{``  

             

             ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

             

             ``"InputTemplate": "<instance> is in state <status>"``  

             

             ``}``  

             

            To have the ``InputTemplate`` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:

             

             ``"InputTransformer":``  

             

             ``{``  

             

             ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

             

             ``"InputTemplate": "<instance> is in state \"<status>\""``  

             

             ``}``  

             

            The ``InputTemplate`` can also be valid JSON with varibles in quotes or out, as in the following example:

             

             ``"InputTransformer":``  

             

             ``{``  

             

             ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

             

             ``"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'``  

             

             ``}``  

            

          
        
        - **KinesisParameters** *(dict) --* 

          The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the ``eventId`` as the partition key.

          

        
          - **PartitionKeyPath** *(string) --* **[REQUIRED]** 

            The JSON path to be extracted from the event and used as the partition key. For more information, see `Amazon Kinesis Streams Key Concepts <https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key>`__ in the *Amazon Kinesis Streams Developer Guide* .

            

          
        
        - **RunCommandParameters** *(dict) --* 

          Parameters used when you are using the rule to invoke Amazon EC2 Run Command.

          

        
          - **RunCommandTargets** *(list) --* **[REQUIRED]** 

            Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.

            

          
            - *(dict) --* 

              Information about the EC2 instances that are to be sent the command, specified as key-value pairs. Each ``RunCommandTarget`` block can include only one key, but this key may specify multiple values.

              

            
              - **Key** *(string) --* **[REQUIRED]** 

                Can be either ``tag:``  *tag-key* or ``InstanceIds`` .

                

              
              - **Values** *(list) --* **[REQUIRED]** 

                If ``Key`` is ``tag:``  *tag-key* , ``Values`` is a list of tag values. If ``Key`` is ``InstanceIds`` , ``Values`` is a list of Amazon EC2 instance IDs.

                

              
                - *(string) --* 

                
            
            
        
        
        - **EcsParameters** *(dict) --* 

          Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see `Task Definitions <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in the *Amazon EC2 Container Service Developer Guide* .

          

        
          - **TaskDefinitionArn** *(string) --* **[REQUIRED]** 

            The ARN of the task definition to use if the event target is an Amazon ECS task. 

            

          
          - **TaskCount** *(integer) --* 

            The number of tasks to create based on ``TaskDefinition`` . The default is 1.

            

          
          - **LaunchType** *(string) --* 

            Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The ``FARGATE`` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see `AWS Fargate on Amazon ECS <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

            

          
          - **NetworkConfiguration** *(dict) --* 

            Use this structure if the ECS task uses the ``awsvpc`` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if ``LaunchType`` is ``FARGATE`` because the ``awsvpc`` mode is required for Fargate tasks.

             

            If you specify ``NetworkConfiguration`` when the target ECS task does not use the ``awsvpc`` network mode, the task fails.

            

          
            - **awsvpcConfiguration** *(dict) --* 

              Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the ``awsvpc`` network mode.

              

            
              - **Subnets** *(list) --* **[REQUIRED]** 

                Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.

                

              
                - *(string) --* 

                
            
              - **SecurityGroups** *(list) --* 

                Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.

                

              
                - *(string) --* 

                
            
              - **AssignPublicIp** *(string) --* 

                Specifies whether the task's elastic network interface receives a public IP address. You can specify ``ENABLED`` only when ``LaunchType`` in ``EcsParameters`` is set to ``FARGATE`` .

                

              
            
          
          - **PlatformVersion** *(string) --* 

            Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as ``1.1.0`` .

             

            This structure is used only if ``LaunchType`` is ``FARGATE`` . For more information about valid platform versions, see `AWS Fargate Platform Versions <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

            

          
          - **Group** *(string) --* 

            Specifies an ECS task group for the task. The maximum length is 255 characters.

            

          
          - **CapacityProviderStrategy** *(list) --* 

            The capacity provider strategy to use for the task.

             

            If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or launchType is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used. 

            

          
            - *(dict) --* 

              The details of a capacity provider strategy. To learn more, see `CapacityProviderStrategyItem <https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html>`__ in the Amazon ECS API Reference.

              

            
              - **capacityProvider** *(string) --* **[REQUIRED]** 

                The short name of the capacity provider.

                

              
              - **weight** *(integer) --* 

                The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.

                

              
              - **base** *(integer) --* 

                The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. 

                

              
            
        
          - **EnableECSManagedTags** *(boolean) --* 

            Specifies whether to enable Amazon ECS managed tags for the task. For more information, see `Tagging Your Amazon ECS Resources <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the Amazon Elastic Container Service Developer Guide. 

            

          
          - **EnableExecuteCommand** *(boolean) --* 

            Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.

            

          
          - **PlacementConstraints** *(list) --* 

            An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).

            

          
            - *(dict) --* 

              An object representing a constraint on task placement. To learn more, see `Task Placement Constraints <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__ in the Amazon Elastic Container Service Developer Guide.

              

            
              - **type** *(string) --* 

                The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. 

                

              
              - **expression** *(string) --* 

                A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is ``distinctInstance`` . To learn more, see `Cluster Query Language <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__ in the Amazon Elastic Container Service Developer Guide. 

                

              
            
        
          - **PlacementStrategy** *(list) --* 

            The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. 

            

          
            - *(dict) --* 

              The task placement strategy for a task or service. To learn more, see `Task Placement Strategies <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__ in the Amazon Elastic Container Service Developer Guide.

              

            
              - **type** *(string) --* 

                The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). 

                

              
              - **field** *(string) --* 

                The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. 

                

              
            
        
          - **PropagateTags** *(string) --* 

            Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. 

            

          
          - **ReferenceId** *(string) --* 

            The reference ID to use for the task.

            

          
          - **Tags** *(list) --* 

            The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see `RunTask <https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags>`__ in the Amazon ECS API Reference.

            

          
            - *(dict) --* 

              A key-value pair associated with an AWS resource. In EventBridge, rules and event buses support tagging.

              

            
              - **Key** *(string) --* **[REQUIRED]** 

                A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.

                

              
              - **Value** *(string) --* **[REQUIRED]** 

                The value for the specified tag key.

                

              
            
        
        
        - **BatchParameters** *(dict) --* 

          If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see `Jobs <https://docs.aws.amazon.com/batch/latest/userguide/jobs.html>`__ in the *AWS Batch User Guide* .

          

        
          - **JobDefinition** *(string) --* **[REQUIRED]** 

            The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.

            

          
          - **JobName** *(string) --* **[REQUIRED]** 

            The name to use for this execution of the job, if the target is an AWS Batch job.

            

          
          - **ArrayProperties** *(dict) --* 

            The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.

            

          
            - **Size** *(integer) --* 

              The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.

              

            
          
          - **RetryStrategy** *(dict) --* 

            The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.

            

          
            - **Attempts** *(integer) --* 

              The number of times to attempt to retry, if the job fails. Valid values are 1–10.

              

            
          
        
        - **SqsParameters** *(dict) --* 

          Contains the message group ID to use when the target is a FIFO queue.

           

          If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.

          

        
          - **MessageGroupId** *(string) --* 

            The FIFO message group ID to use as the target.

            

          
        
        - **HttpParameters** *(dict) --* 

          Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination.

           

          If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.

          

        
          - **PathParameterValues** *(list) --* 

            The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").

            

          
            - *(string) --* 

            
        
          - **HeaderParameters** *(dict) --* 

            The headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
          - **QueryStringParameters** *(dict) --* 

            The query string keys/values that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.

            

          
            - *(string) --* 

            
              - *(string) --* 

              
        
      
        
        - **RedshiftDataParameters** *(dict) --* 

          Contains the Redshift Data API parameters to use when the target is a Redshift cluster.

           

          If you specify a Redshift Cluster as a Target, you can use this to specify parameters to invoke the Redshift Data API ExecuteStatement based on EventBridge events.

          

        
          - **SecretManagerArn** *(string) --* 

            The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.

            

          
          - **Database** *(string) --* **[REQUIRED]** 

            The name of the database. Required when authenticating using temporary credentials.

            

          
          - **DbUser** *(string) --* 

            The database user name. Required when authenticating using temporary credentials.

            

          
          - **Sql** *(string) --* **[REQUIRED]** 

            The SQL statement text to run.

            

          
          - **StatementName** *(string) --* 

            The name of the SQL statement. You can name the SQL statement when you create it to identify the query.

            

          
          - **WithEvent** *(boolean) --* 

            Indicates whether to send an event back to EventBridge after the SQL statement runs.

            

          
        
        - **SageMakerPipelineParameters** *(dict) --* 

          Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline.

           

          If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.

          

        
          - **PipelineParameterList** *(list) --* 

            List of Parameter names and values for SageMaker Model Building Pipeline execution.

            

          
            - *(dict) --* 

              Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.

              

            
              - **Name** *(string) --* **[REQUIRED]** 

                Name of parameter to start execution of a SageMaker Model Building Pipeline.

                

              
              - **Value** *(string) --* **[REQUIRED]** 

                Value of parameter to start execution of a SageMaker Model Building Pipeline.

                

              
            
        
        
        - **DeadLetterConfig** *(dict) --* 

          The ``DeadLetterConfig`` that defines the target queue to send dead-letter queue events to.

          

        
          - **Arn** *(string) --* 

            The ARN of the SQS queue specified as the target for the dead-letter queue.

            

          
        
        - **RetryPolicy** *(dict) --* 

          The ``RetryPolicy`` object that contains the retry policy configuration to use for the dead-letter queue.

          

        
          - **MaximumRetryAttempts** *(integer) --* 

            The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the ``MaximumEventAgeInSeconds`` is met.

            

          
          - **MaximumEventAgeInSeconds** *(integer) --* 

            The maximum amount of time, in seconds, to continue to make retry attempts.

            

          
        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedEntryCount': 123,
            'FailedEntries': [
                {
                    'TargetId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedEntryCount** *(integer) --* 

          The number of failed entries.

          
        

        - **FailedEntries** *(list) --* 

          The failed target entries.

          
          

          - *(dict) --* 

            Represents a target that failed to be added to a rule.

            
            

            - **TargetId** *(string) --* 

              The ID of the target.

              
            

            - **ErrorCode** *(string) --* 

              The error code that indicates why the target addition failed. If the value is ``ConcurrentModificationException`` , too many requests were made at the same time.

              
            

            - **ErrorMessage** *(string) --* 

              The error message that explains why the target addition failed.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: remove_permission(**kwargs)

    

    Revokes the permission of another AWS account to be able to put events to the specified event bus. Specify the account to revoke by the ``StatementId`` value that you associated with the account when you granted it permission with ``PutPermission`` . You can find the ``StatementId`` by using  DescribeEventBus .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/RemovePermission>`_    


    **Request Syntax** 
    ::

      response = client.remove_permission(
          StatementId='string',
          RemoveAllPermissions=True|False,
          EventBusName='string'
      )
    :type StatementId: string
    :param StatementId: 

      The statement ID corresponding to the account that is no longer allowed to put events to the default event bus.

      

    
    :type RemoveAllPermissions: boolean
    :param RemoveAllPermissions: 

      Specifies whether to remove all permissions.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name of the event bus to revoke permissions for. If you omit this, the default event bus is used.

      

    
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.OperationDisabledException`

    

  .. py:method:: remove_targets(**kwargs)

    

    Removes the specified targets from the specified rule. When the rule is triggered, those targets are no longer be invoked.

     

    When you remove a target, when the associated rule triggers, removed targets might continue to be invoked. Allow a short period of time for changes to take effect.

     

    This action can partially fail if too many requests are made at the same time. If that happens, ``FailedEntryCount`` is non-zero in the response and each entry in ``FailedEntries`` provides the ID of the failed target and the error code.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/RemoveTargets>`_    


    **Request Syntax** 
    ::

      response = client.remove_targets(
          Rule='string',
          EventBusName='string',
          Ids=[
              'string',
          ],
          Force=True|False
      )
    :type Rule: string
    :param Rule: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    :type Ids: list
    :param Ids: **[REQUIRED]** 

      The IDs of the targets to remove from the rule.

      

    
      - *(string) --* 

      
  
    :type Force: boolean
    :param Force: 

      If this is a managed rule, created by an AWS service on your behalf, you must specify ``Force`` as ``True`` to remove targets. This parameter is ignored for rules that are not managed rules. You can check whether a rule is a managed rule by using ``DescribeRule`` or ``ListRules`` and checking the ``ManagedBy`` field of the response.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'FailedEntryCount': 123,
            'FailedEntries': [
                {
                    'TargetId': 'string',
                    'ErrorCode': 'string',
                    'ErrorMessage': 'string'
                },
            ]
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **FailedEntryCount** *(integer) --* 

          The number of failed entries.

          
        

        - **FailedEntries** *(list) --* 

          The failed target entries.

          
          

          - *(dict) --* 

            Represents a target that failed to be removed from a rule.

            
            

            - **TargetId** *(string) --* 

              The ID of the target.

              
            

            - **ErrorCode** *(string) --* 

              The error code that indicates why the target removal failed. If the value is ``ConcurrentModificationException`` , too many requests were made at the same time.

              
            

            - **ErrorMessage** *(string) --* 

              The error message that explains why the target removal failed.

              
        
      
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: start_replay(**kwargs)

    

    Starts the specified replay. Events are not necessarily replayed in the exact same order that they were added to the archive. A replay processes events to replay based on the time in the event, and replays them using 1 minute intervals. If you specify an ``EventStartTime`` and an ``EventEndTime`` that covers a 20 minute time range, the events are replayed from the first minute of that 20 minute range first. Then the events from the second minute are replayed. You can use ``DescribeReplay`` to determine the progress of a replay. The value returned for ``EventLastReplayedTime`` indicates the time within the specified time range associated with the last event replayed.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/StartReplay>`_    


    **Request Syntax** 
    ::

      response = client.start_replay(
          ReplayName='string',
          Description='string',
          EventSourceArn='string',
          EventStartTime=datetime(2015, 1, 1),
          EventEndTime=datetime(2015, 1, 1),
          Destination={
              'Arn': 'string',
              'FilterArns': [
                  'string',
              ]
          }
      )
    :type ReplayName: string
    :param ReplayName: **[REQUIRED]** 

      The name of the replay to start.

      

    
    :type Description: string
    :param Description: 

      A description for the replay to start.

      

    
    :type EventSourceArn: string
    :param EventSourceArn: **[REQUIRED]** 

      The ARN of the archive to replay events from.

      

    
    :type EventStartTime: datetime
    :param EventStartTime: **[REQUIRED]** 

      A time stamp for the time to start replaying events. Only events that occurred between the ``EventStartTime`` and ``EventEndTime`` are replayed.

      

    
    :type EventEndTime: datetime
    :param EventEndTime: **[REQUIRED]** 

      A time stamp for the time to stop replaying events. Only events that occurred between the ``EventStartTime`` and ``EventEndTime`` are replayed.

      

    
    :type Destination: dict
    :param Destination: **[REQUIRED]** 

      A ``ReplayDestination`` object that includes details about the destination for the replay.

      

    
      - **Arn** *(string) --* **[REQUIRED]** 

        The ARN of the event bus to replay event to. You can replay events only to the event bus specified to create the archive.

        

      
      - **FilterArns** *(list) --* 

        A list of ARNs for rules to replay events to.

        

      
        - *(string) --* 

        
    
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ReplayArn': 'string',
            'State': 'STARTING'|'RUNNING'|'CANCELLING'|'COMPLETED'|'CANCELLED'|'FAILED',
            'StateReason': 'string',
            'ReplayStartTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ReplayArn** *(string) --* 

          The ARN of the replay.

          
        

        - **State** *(string) --* 

          The state of the replay.

          
        

        - **StateReason** *(string) --* 

          The reason that the replay is in the state.

          
        

        - **ReplayStartTime** *(datetime) --* 

          The time at which the replay started.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceAlreadyExistsException`

    
    *     :py:class:`EventBridge.Client.exceptions.InvalidEventPatternException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: tag_resource(**kwargs)

    

    Assigns one or more tags (key-value pairs) to the specified EventBridge resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In EventBridge, rules and event buses can be tagged.

     

    Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.

     

    You can use the ``TagResource`` action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.

     

    You can associate as many as 50 tags with a resource.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/TagResource>`_    


    **Request Syntax** 
    ::

      response = client.tag_resource(
          ResourceARN='string',
          Tags=[
              {
                  'Key': 'string',
                  'Value': 'string'
              },
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The ARN of the EventBridge resource that you're adding tags to.

      

    
    :type Tags: list
    :param Tags: **[REQUIRED]** 

      The list of key-value pairs to associate with the resource.

      

    
      - *(dict) --* 

        A key-value pair associated with an AWS resource. In EventBridge, rules and event buses support tagging.

        

      
        - **Key** *(string) --* **[REQUIRED]** 

          A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.

          

        
        - **Value** *(string) --* **[REQUIRED]** 

          The value for the specified tag key.

          

        
      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    

  .. py:method:: test_event_pattern(**kwargs)

    

    Tests whether the specified event pattern matches the provided event.

     

    Most services in AWS treat : or / as the same character in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event patterns and rules. Be sure to use the correct ARN characters when creating event patterns so that they match the ARN syntax in the event you want to match.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/TestEventPattern>`_    


    **Request Syntax** 
    ::

      response = client.test_event_pattern(
          EventPattern='string',
          Event='string'
      )
    :type EventPattern: string
    :param EventPattern: **[REQUIRED]** 

      The event pattern. For more information, see `Events and Event Patterns <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html>`__ in the *Amazon EventBridge User Guide* .

      

    
    :type Event: string
    :param Event: **[REQUIRED]** 

      The event, in JSON format, to test against the event pattern. The JSON must follow the format specified in `AWS Events <https://docs.aws.amazon.com/eventbridge/latest/userguide/aws-events.html>`__ , and the following fields are mandatory:

       

       
      * ``id``   
       
      * ``account``   
       
      * ``source``   
       
      * ``time``   
       
      * ``region``   
       
      * ``resources``   
       
      * ``detail-type``   
       

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Result': True|False
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Result** *(boolean) --* 

          Indicates whether the event matches the event pattern.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.InvalidEventPatternException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    

  .. py:method:: untag_resource(**kwargs)

    

    Removes one or more tags from the specified EventBridge resource. In Amazon EventBridge (CloudWatch Events), rules and event buses can be tagged.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/UntagResource>`_    


    **Request Syntax** 
    ::

      response = client.untag_resource(
          ResourceARN='string',
          TagKeys=[
              'string',
          ]
      )
    :type ResourceARN: string
    :param ResourceARN: **[REQUIRED]** 

      The ARN of the EventBridge resource from which you are removing tags.

      

    
    :type TagKeys: list
    :param TagKeys: **[REQUIRED]** 

      The list of tag keys to remove from the resource.

      

    
      - *(string) --* 

      
  
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {}
      **Response Structure** 

      

      - *(dict) --* 
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ManagedRuleException`

    

  .. py:method:: update_api_destination(**kwargs)

    

    Updates an API destination.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/UpdateApiDestination>`_    


    **Request Syntax** 
    ::

      response = client.update_api_destination(
          Name='string',
          Description='string',
          ConnectionArn='string',
          InvocationEndpoint='string',
          HttpMethod='POST'|'GET'|'HEAD'|'OPTIONS'|'PUT'|'PATCH'|'DELETE',
          InvocationRateLimitPerSecond=123
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the API destination to update.

      

    
    :type Description: string
    :param Description: 

      The name of the API destination to update.

      

    
    :type ConnectionArn: string
    :param ConnectionArn: 

      The ARN of the connection to use for the API destination.

      

    
    :type InvocationEndpoint: string
    :param InvocationEndpoint: 

      The URL to the endpoint to use for the API destination.

      

    
    :type HttpMethod: string
    :param HttpMethod: 

      The method to use for the API destination.

      

    
    :type InvocationRateLimitPerSecond: integer
    :param InvocationRateLimitPerSecond: 

      The maximum number of invocations per second to send to the API destination.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ApiDestinationArn': 'string',
            'ApiDestinationState': 'ACTIVE'|'INACTIVE',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ApiDestinationArn** *(string) --* 

          The ARN of the API destination that was updated.

          
        

        - **ApiDestinationState** *(string) --* 

          The state of the API destination that was updated.

          
        

        - **CreationTime** *(datetime) --* 

          A time stamp for the time that the API destination was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp for the time that the API destination was last modified.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    

  .. py:method:: update_archive(**kwargs)

    

    Updates the specified archive.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/UpdateArchive>`_    


    **Request Syntax** 
    ::

      response = client.update_archive(
          ArchiveName='string',
          Description='string',
          EventPattern='string',
          RetentionDays=123
      )
    :type ArchiveName: string
    :param ArchiveName: **[REQUIRED]** 

      The name of the archive to update.

      

    
    :type Description: string
    :param Description: 

      The description for the archive.

      

    
    :type EventPattern: string
    :param EventPattern: 

      The event pattern to use to filter events sent to the archive.

      

    
    :type RetentionDays: integer
    :param RetentionDays: 

      The number of days to retain events in the archive.

      

    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ArchiveArn': 'string',
            'State': 'ENABLED'|'DISABLED'|'CREATING'|'UPDATING'|'CREATE_FAILED'|'UPDATE_FAILED',
            'StateReason': 'string',
            'CreationTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ArchiveArn** *(string) --* 

          The ARN of the archive.

          
        

        - **State** *(string) --* 

          The state of the archive.

          
        

        - **StateReason** *(string) --* 

          The reason that the archive is in the current state.

          
        

        - **CreationTime** *(datetime) --* 

          The time at which the archive was updated.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    
    *     :py:class:`EventBridge.Client.exceptions.InvalidEventPatternException`

    

  .. py:method:: update_connection(**kwargs)

    

    Updates settings for a connection.

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/UpdateConnection>`_    


    **Request Syntax** 
    ::

      response = client.update_connection(
          Name='string',
          Description='string',
          AuthorizationType='BASIC'|'OAUTH_CLIENT_CREDENTIALS'|'API_KEY',
          AuthParameters={
              'BasicAuthParameters': {
                  'Username': 'string',
                  'Password': 'string'
              },
              'OAuthParameters': {
                  'ClientParameters': {
                      'ClientID': 'string',
                      'ClientSecret': 'string'
                  },
                  'AuthorizationEndpoint': 'string',
                  'HttpMethod': 'GET'|'POST'|'PUT',
                  'OAuthHttpParameters': {
                      'HeaderParameters': [
                          {
                              'Key': 'string',
                              'Value': 'string',
                              'IsValueSecret': True|False
                          },
                      ],
                      'QueryStringParameters': [
                          {
                              'Key': 'string',
                              'Value': 'string',
                              'IsValueSecret': True|False
                          },
                      ],
                      'BodyParameters': [
                          {
                              'Key': 'string',
                              'Value': 'string',
                              'IsValueSecret': True|False
                          },
                      ]
                  }
              },
              'ApiKeyAuthParameters': {
                  'ApiKeyName': 'string',
                  'ApiKeyValue': 'string'
              },
              'InvocationHttpParameters': {
                  'HeaderParameters': [
                      {
                          'Key': 'string',
                          'Value': 'string',
                          'IsValueSecret': True|False
                      },
                  ],
                  'QueryStringParameters': [
                      {
                          'Key': 'string',
                          'Value': 'string',
                          'IsValueSecret': True|False
                      },
                  ],
                  'BodyParameters': [
                      {
                          'Key': 'string',
                          'Value': 'string',
                          'IsValueSecret': True|False
                      },
                  ]
              }
          }
      )
    :type Name: string
    :param Name: **[REQUIRED]** 

      The name of the connection to update.

      

    
    :type Description: string
    :param Description: 

      A description for the connection.

      

    
    :type AuthorizationType: string
    :param AuthorizationType: 

      The type of authorization to use for the connection.

      

    
    :type AuthParameters: dict
    :param AuthParameters: 

      The authorization parameters to use for the connection.

      

    
      - **BasicAuthParameters** *(dict) --* 

        A ``UpdateConnectionBasicAuthRequestParameters`` object that contains the authorization parameters for Basic authorization.

        

      
        - **Username** *(string) --* 

          The user name to use for Basic authorization.

          

        
        - **Password** *(string) --* 

          The password associated with the user name to use for Basic authorization.

          

        
      
      - **OAuthParameters** *(dict) --* 

        A ``UpdateConnectionOAuthRequestParameters`` object that contains the authorization parameters for OAuth authorization.

        

      
        - **ClientParameters** *(dict) --* 

          A ``UpdateConnectionOAuthClientRequestParameters`` object that contains the client parameters to use for the connection when OAuth is specified as the authorization type.

          

        
          - **ClientID** *(string) --* 

            The client ID to use for OAuth authorization.

            

          
          - **ClientSecret** *(string) --* 

            The client secret assciated with the client ID to use for OAuth authorization.

            

          
        
        - **AuthorizationEndpoint** *(string) --* 

          The URL to the authorization endpoint when OAuth is specified as the authorization type.

          

        
        - **HttpMethod** *(string) --* 

          The method used to connect to the HTTP endpoint.

          

        
        - **OAuthHttpParameters** *(dict) --* 

          The additional HTTP parameters used for the OAuth authorization request.

          

        
          - **HeaderParameters** *(list) --* 

            Contains additional header parameters for the connection.

            

          
            - *(dict) --* 

              Additional parameter included in the header. You can include up to 100 additional header parameters per request. An event payload cannot exceed 64 KB.

              

            
              - **Key** *(string) --* 

                The key for the parameter.

                

              
              - **Value** *(string) --* 

                The value associated with the key.

                

              
              - **IsValueSecret** *(boolean) --* 

                Specified whether the value is a secret.

                

              
            
        
          - **QueryStringParameters** *(list) --* 

            Contains additional query string parameters for the connection.

            

          
            - *(dict) --* 

              Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.

              

            
              - **Key** *(string) --* 

                The key for a query string parameter.

                

              
              - **Value** *(string) --* 

                The value associated with the key for the query string parameter.

                

              
              - **IsValueSecret** *(boolean) --* 

                Specifies whether the value is secret.

                

              
            
        
          - **BodyParameters** *(list) --* 

            Contains additional body string parameters for the connection.

            

          
            - *(dict) --* 

              Additional parameter included in the body. You can include up to 100 additional body parameters per request. An event payload cannot exceed 64 KB.

              

            
              - **Key** *(string) --* 

                The key for the parameter.

                

              
              - **Value** *(string) --* 

                The value associated with the key.

                

              
              - **IsValueSecret** *(boolean) --* 

                Specified whether the value is secret.

                

              
            
        
        
      
      - **ApiKeyAuthParameters** *(dict) --* 

        A ``UpdateConnectionApiKeyAuthRequestParameters`` object that contains the authorization parameters for API key authorization.

        

      
        - **ApiKeyName** *(string) --* 

          The name of the API key to use for authorization.

          

        
        - **ApiKeyValue** *(string) --* 

          The value associated with teh API key to use for authorization.

          

        
      
      - **InvocationHttpParameters** *(dict) --* 

        A ``ConnectionHttpParameters`` object that contains the additional parameters to use for the connection.

        

      
        - **HeaderParameters** *(list) --* 

          Contains additional header parameters for the connection.

          

        
          - *(dict) --* 

            Additional parameter included in the header. You can include up to 100 additional header parameters per request. An event payload cannot exceed 64 KB.

            

          
            - **Key** *(string) --* 

              The key for the parameter.

              

            
            - **Value** *(string) --* 

              The value associated with the key.

              

            
            - **IsValueSecret** *(boolean) --* 

              Specified whether the value is a secret.

              

            
          
      
        - **QueryStringParameters** *(list) --* 

          Contains additional query string parameters for the connection.

          

        
          - *(dict) --* 

            Additional query string parameter for the connection. You can include up to 100 additional query string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB.

            

          
            - **Key** *(string) --* 

              The key for a query string parameter.

              

            
            - **Value** *(string) --* 

              The value associated with the key for the query string parameter.

              

            
            - **IsValueSecret** *(boolean) --* 

              Specifies whether the value is secret.

              

            
          
      
        - **BodyParameters** *(list) --* 

          Contains additional body string parameters for the connection.

          

        
          - *(dict) --* 

            Additional parameter included in the body. You can include up to 100 additional body parameters per request. An event payload cannot exceed 64 KB.

            

          
            - **Key** *(string) --* 

              The key for the parameter.

              

            
            - **Value** *(string) --* 

              The value associated with the key.

              

            
            - **IsValueSecret** *(boolean) --* 

              Specified whether the value is secret.

              

            
          
      
      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'ConnectionArn': 'string',
            'ConnectionState': 'CREATING'|'UPDATING'|'DELETING'|'AUTHORIZED'|'DEAUTHORIZED'|'AUTHORIZING'|'DEAUTHORIZING',
            'CreationTime': datetime(2015, 1, 1),
            'LastModifiedTime': datetime(2015, 1, 1),
            'LastAuthorizedTime': datetime(2015, 1, 1)
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **ConnectionArn** *(string) --* 

          The ARN of the connection that was updated.

          
        

        - **ConnectionState** *(string) --* 

          The state of the connection that was updated.

          
        

        - **CreationTime** *(datetime) --* 

          A time stamp for the time that the connection was created.

          
        

        - **LastModifiedTime** *(datetime) --* 

          A time stamp for the time that the connection was last modified.

          
        

        - **LastAuthorizedTime** *(datetime) --* 

          A time stamp for the time that the connection was last authorized.

          
    
    **Exceptions** 
    
    *     :py:class:`EventBridge.Client.exceptions.ConcurrentModificationException`

    
    *     :py:class:`EventBridge.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`EventBridge.Client.exceptions.InternalException`

    
    *     :py:class:`EventBridge.Client.exceptions.LimitExceededException`

    

==========
Paginators
==========


The available paginators are:

* :py:class:`EventBridge.Paginator.ListRuleNamesByTarget`


* :py:class:`EventBridge.Paginator.ListRules`


* :py:class:`EventBridge.Paginator.ListTargetsByRule`



.. py:class:: EventBridge.Paginator.ListRuleNamesByTarget

  ::

    
    paginator = client.get_paginator('list_rule_names_by_target')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`EventBridge.Client.list_rule_names_by_target`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRuleNamesByTarget>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          TargetArn='string',
          EventBusName='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type TargetArn: string
    :param TargetArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the target resource.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus to list rules for. If you omit this, the default event bus is used.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'RuleNames': [
                'string',
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **RuleNames** *(list) --* 

          The names of the rules that can invoke the given target.

          
          

          - *(string) --* 
      
    

.. py:class:: EventBridge.Paginator.ListRules

  ::

    
    paginator = client.get_paginator('list_rules')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`EventBridge.Client.list_rules`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRules>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          NamePrefix='string',
          EventBusName='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type NamePrefix: string
    :param NamePrefix: 

      The prefix matching the rule name.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus to list the rules for. If you omit this, the default event bus is used.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Rules': [
                {
                    'Name': 'string',
                    'Arn': 'string',
                    'EventPattern': 'string',
                    'State': 'ENABLED'|'DISABLED',
                    'Description': 'string',
                    'ScheduleExpression': 'string',
                    'RoleArn': 'string',
                    'ManagedBy': 'string',
                    'EventBusName': 'string'
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Rules** *(list) --* 

          The rules that match the specified criteria.

          
          

          - *(dict) --* 

            Contains information about a rule in Amazon EventBridge.

            
            

            - **Name** *(string) --* 

              The name of the rule.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the rule.

              
            

            - **EventPattern** *(string) --* 

              The event pattern of the rule. For more information, see `Events and Event Patterns <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html>`__ in the *Amazon EventBridge User Guide* .

              
            

            - **State** *(string) --* 

              The state of the rule.

              
            

            - **Description** *(string) --* 

              The description of the rule.

              
            

            - **ScheduleExpression** *(string) --* 

              The scheduling expression. For example, "cron(0 20 * * ? *)", "rate(5 minutes)".

              
            

            - **RoleArn** *(string) --* 

              The Amazon Resource Name (ARN) of the role that is used for target invocation.

              
            

            - **ManagedBy** *(string) --* 

              If the rule was created on behalf of your account by an AWS service, this field displays the principal name of the service that created the rule.

              
            

            - **EventBusName** *(string) --* 

              The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

              
        
      
    

.. py:class:: EventBridge.Paginator.ListTargetsByRule

  ::

    
    paginator = client.get_paginator('list_targets_by_rule')

  
  

  .. py:method:: paginate(**kwargs)

    Creates an iterator that will paginate through responses from :py:meth:`EventBridge.Client.list_targets_by_rule`.

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListTargetsByRule>`_    


    **Request Syntax** 
    ::

      response_iterator = paginator.paginate(
          Rule='string',
          EventBusName='string',
          PaginationConfig={
              'MaxItems': 123,
              'PageSize': 123,
              'StartingToken': 'string'
          }
      )
    :type Rule: string
    :param Rule: **[REQUIRED]** 

      The name of the rule.

      

    
    :type EventBusName: string
    :param EventBusName: 

      The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used.

      

    
    :type PaginationConfig: dict
    :param PaginationConfig: 

      A dictionary that provides parameters to control pagination.

      

    
      - **MaxItems** *(integer) --* 

        The total number of items to return. If the total number of items available is more than the value specified in max-items then a ``NextToken`` will be provided in the output that you can use to resume pagination.

        

      
      - **PageSize** *(integer) --* 

        The size of each page.

        

        

        

      
      - **StartingToken** *(string) --* 

        A token to specify where to start paginating. This is the ``NextToken`` from a previous response.

        

      
    
    
    :rtype: dict
    :returns: 
      
      **Response Syntax** 

      
      ::

        {
            'Targets': [
                {
                    'Id': 'string',
                    'Arn': 'string',
                    'RoleArn': 'string',
                    'Input': 'string',
                    'InputPath': 'string',
                    'InputTransformer': {
                        'InputPathsMap': {
                            'string': 'string'
                        },
                        'InputTemplate': 'string'
                    },
                    'KinesisParameters': {
                        'PartitionKeyPath': 'string'
                    },
                    'RunCommandParameters': {
                        'RunCommandTargets': [
                            {
                                'Key': 'string',
                                'Values': [
                                    'string',
                                ]
                            },
                        ]
                    },
                    'EcsParameters': {
                        'TaskDefinitionArn': 'string',
                        'TaskCount': 123,
                        'LaunchType': 'EC2'|'FARGATE',
                        'NetworkConfiguration': {
                            'awsvpcConfiguration': {
                                'Subnets': [
                                    'string',
                                ],
                                'SecurityGroups': [
                                    'string',
                                ],
                                'AssignPublicIp': 'ENABLED'|'DISABLED'
                            }
                        },
                        'PlatformVersion': 'string',
                        'Group': 'string',
                        'CapacityProviderStrategy': [
                            {
                                'capacityProvider': 'string',
                                'weight': 123,
                                'base': 123
                            },
                        ],
                        'EnableECSManagedTags': True|False,
                        'EnableExecuteCommand': True|False,
                        'PlacementConstraints': [
                            {
                                'type': 'distinctInstance'|'memberOf',
                                'expression': 'string'
                            },
                        ],
                        'PlacementStrategy': [
                            {
                                'type': 'random'|'spread'|'binpack',
                                'field': 'string'
                            },
                        ],
                        'PropagateTags': 'TASK_DEFINITION',
                        'ReferenceId': 'string',
                        'Tags': [
                            {
                                'Key': 'string',
                                'Value': 'string'
                            },
                        ]
                    },
                    'BatchParameters': {
                        'JobDefinition': 'string',
                        'JobName': 'string',
                        'ArrayProperties': {
                            'Size': 123
                        },
                        'RetryStrategy': {
                            'Attempts': 123
                        }
                    },
                    'SqsParameters': {
                        'MessageGroupId': 'string'
                    },
                    'HttpParameters': {
                        'PathParameterValues': [
                            'string',
                        ],
                        'HeaderParameters': {
                            'string': 'string'
                        },
                        'QueryStringParameters': {
                            'string': 'string'
                        }
                    },
                    'RedshiftDataParameters': {
                        'SecretManagerArn': 'string',
                        'Database': 'string',
                        'DbUser': 'string',
                        'Sql': 'string',
                        'StatementName': 'string',
                        'WithEvent': True|False
                    },
                    'SageMakerPipelineParameters': {
                        'PipelineParameterList': [
                            {
                                'Name': 'string',
                                'Value': 'string'
                            },
                        ]
                    },
                    'DeadLetterConfig': {
                        'Arn': 'string'
                    },
                    'RetryPolicy': {
                        'MaximumRetryAttempts': 123,
                        'MaximumEventAgeInSeconds': 123
                    }
                },
            ],
            
        }
      **Response Structure** 

      

      - *(dict) --* 
        

        - **Targets** *(list) --* 

          The targets assigned to the rule.

          
          

          - *(dict) --* 

            Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see  PutTargets .

             

            If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a ``RoleArn`` with proper permissions in the ``Target`` structure. For more information, see `Sending and Receiving Events Between AWS Accounts <https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html>`__ in the *Amazon EventBridge User Guide* .

            
            

            - **Id** *(string) --* 

              The ID of the target.

              
            

            - **Arn** *(string) --* 

              The Amazon Resource Name (ARN) of the target.

              
            

            - **RoleArn** *(string) --* 

              The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.

              
            

            - **Input** *(string) --* 

              Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see `The JavaScript Object Notation (JSON) Data Interchange Format <http://www.rfc-editor.org/rfc/rfc7159.txt>`__ .

              
            

            - **InputPath** *(string) --* 

              The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You must use JSON dot notation, not bracket notation. For more information about JSON paths, see `JSONPath <http://goessner.net/articles/JsonPath/>`__ .

              
            

            - **InputTransformer** *(dict) --* 

              Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.

              
              

              - **InputPathsMap** *(dict) --* 

                Map of JSON paths to be extracted from the event. You can then insert these in the template in ``InputTemplate`` to produce the output you want to be sent to the target.

                 

                 ``InputPathsMap`` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.

                 

                The keys cannot start with "AWS." 

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **InputTemplate** *(string) --* 

                Input template where you specify placeholders that will be filled with the values of the keys from ``InputPathsMap`` to customize the data sent to the target. Enclose each ``InputPathsMaps`` value in brackets: <*value* > The InputTemplate must be valid JSON.

                 

                If ``InputTemplate`` is a JSON object (surrounded by curly braces), the following restrictions apply:

                 

                 
                * The placeholder cannot be used as an object key. 
                 

                 

                The following example shows the syntax for using ``InputPathsMap`` and ``InputTemplate`` .

                 

                 ``"InputTransformer":``  

                 

                 ``{``  

                 

                 ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

                 

                 ``"InputTemplate": "<instance> is in state <status>"``  

                 

                 ``}``  

                 

                To have the ``InputTemplate`` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:

                 

                 ``"InputTransformer":``  

                 

                 ``{``  

                 

                 ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

                 

                 ``"InputTemplate": "<instance> is in state \"<status>\""``  

                 

                 ``}``  

                 

                The ``InputTemplate`` can also be valid JSON with varibles in quotes or out, as in the following example:

                 

                 ``"InputTransformer":``  

                 

                 ``{``  

                 

                 ``"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},``  

                 

                 ``"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'``  

                 

                 ``}``  

                
          
            

            - **KinesisParameters** *(dict) --* 

              The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the ``eventId`` as the partition key.

              
              

              - **PartitionKeyPath** *(string) --* 

                The JSON path to be extracted from the event and used as the partition key. For more information, see `Amazon Kinesis Streams Key Concepts <https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key>`__ in the *Amazon Kinesis Streams Developer Guide* .

                
          
            

            - **RunCommandParameters** *(dict) --* 

              Parameters used when you are using the rule to invoke Amazon EC2 Run Command.

              
              

              - **RunCommandTargets** *(list) --* 

                Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.

                
                

                - *(dict) --* 

                  Information about the EC2 instances that are to be sent the command, specified as key-value pairs. Each ``RunCommandTarget`` block can include only one key, but this key may specify multiple values.

                  
                  

                  - **Key** *(string) --* 

                    Can be either ``tag:``  *tag-key* or ``InstanceIds`` .

                    
                  

                  - **Values** *(list) --* 

                    If ``Key`` is ``tag:``  *tag-key* , ``Values`` is a list of tag values. If ``Key`` is ``InstanceIds`` , ``Values`` is a list of Amazon EC2 instance IDs.

                    
                    

                    - *(string) --* 
                
              
            
          
            

            - **EcsParameters** *(dict) --* 

              Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see `Task Definitions <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html>`__ in the *Amazon EC2 Container Service Developer Guide* .

              
              

              - **TaskDefinitionArn** *(string) --* 

                The ARN of the task definition to use if the event target is an Amazon ECS task. 

                
              

              - **TaskCount** *(integer) --* 

                The number of tasks to create based on ``TaskDefinition`` . The default is 1.

                
              

              - **LaunchType** *(string) --* 

                Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The ``FARGATE`` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see `AWS Fargate on Amazon ECS <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

                
              

              - **NetworkConfiguration** *(dict) --* 

                Use this structure if the ECS task uses the ``awsvpc`` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if ``LaunchType`` is ``FARGATE`` because the ``awsvpc`` mode is required for Fargate tasks.

                 

                If you specify ``NetworkConfiguration`` when the target ECS task does not use the ``awsvpc`` network mode, the task fails.

                
                

                - **awsvpcConfiguration** *(dict) --* 

                  Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the ``awsvpc`` network mode.

                  
                  

                  - **Subnets** *(list) --* 

                    Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.

                    
                    

                    - *(string) --* 
                
                  

                  - **SecurityGroups** *(list) --* 

                    Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.

                    
                    

                    - *(string) --* 
                
                  

                  - **AssignPublicIp** *(string) --* 

                    Specifies whether the task's elastic network interface receives a public IP address. You can specify ``ENABLED`` only when ``LaunchType`` in ``EcsParameters`` is set to ``FARGATE`` .

                    
              
            
              

              - **PlatformVersion** *(string) --* 

                Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as ``1.1.0`` .

                 

                This structure is used only if ``LaunchType`` is ``FARGATE`` . For more information about valid platform versions, see `AWS Fargate Platform Versions <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html>`__ in the *Amazon Elastic Container Service Developer Guide* .

                
              

              - **Group** *(string) --* 

                Specifies an ECS task group for the task. The maximum length is 255 characters.

                
              

              - **CapacityProviderStrategy** *(list) --* 

                The capacity provider strategy to use for the task.

                 

                If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or launchType is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used. 

                
                

                - *(dict) --* 

                  The details of a capacity provider strategy. To learn more, see `CapacityProviderStrategyItem <https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html>`__ in the Amazon ECS API Reference.

                  
                  

                  - **capacityProvider** *(string) --* 

                    The short name of the capacity provider.

                    
                  

                  - **weight** *(integer) --* 

                    The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.

                    
                  

                  - **base** *(integer) --* 

                    The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. 

                    
              
            
              

              - **EnableECSManagedTags** *(boolean) --* 

                Specifies whether to enable Amazon ECS managed tags for the task. For more information, see `Tagging Your Amazon ECS Resources <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html>`__ in the Amazon Elastic Container Service Developer Guide. 

                
              

              - **EnableExecuteCommand** *(boolean) --* 

                Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.

                
              

              - **PlacementConstraints** *(list) --* 

                An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).

                
                

                - *(dict) --* 

                  An object representing a constraint on task placement. To learn more, see `Task Placement Constraints <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html>`__ in the Amazon Elastic Container Service Developer Guide.

                  
                  

                  - **type** *(string) --* 

                    The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates. 

                    
                  

                  - **expression** *(string) --* 

                    A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is ``distinctInstance`` . To learn more, see `Cluster Query Language <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html>`__ in the Amazon Elastic Container Service Developer Guide. 

                    
              
            
              

              - **PlacementStrategy** *(list) --* 

                The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task. 

                
                

                - *(dict) --* 

                  The task placement strategy for a task or service. To learn more, see `Task Placement Strategies <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html>`__ in the Amazon Elastic Container Service Developer Guide.

                  
                  

                  - **type** *(string) --* 

                    The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task). 

                    
                  

                  - **field** *(string) --* 

                    The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. 

                    
              
            
              

              - **PropagateTags** *(string) --* 

                Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action. 

                
              

              - **ReferenceId** *(string) --* 

                The reference ID to use for the task.

                
              

              - **Tags** *(list) --* 

                The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see `RunTask <https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags>`__ in the Amazon ECS API Reference.

                
                

                - *(dict) --* 

                  A key-value pair associated with an AWS resource. In EventBridge, rules and event buses support tagging.

                  
                  

                  - **Key** *(string) --* 

                    A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.

                    
                  

                  - **Value** *(string) --* 

                    The value for the specified tag key.

                    
              
            
          
            

            - **BatchParameters** *(dict) --* 

              If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see `Jobs <https://docs.aws.amazon.com/batch/latest/userguide/jobs.html>`__ in the *AWS Batch User Guide* .

              
              

              - **JobDefinition** *(string) --* 

                The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.

                
              

              - **JobName** *(string) --* 

                The name to use for this execution of the job, if the target is an AWS Batch job.

                
              

              - **ArrayProperties** *(dict) --* 

                The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.

                
                

                - **Size** *(integer) --* 

                  The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.

                  
            
              

              - **RetryStrategy** *(dict) --* 

                The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.

                
                

                - **Attempts** *(integer) --* 

                  The number of times to attempt to retry, if the job fails. Valid values are 1–10.

                  
            
          
            

            - **SqsParameters** *(dict) --* 

              Contains the message group ID to use when the target is a FIFO queue.

               

              If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.

              
              

              - **MessageGroupId** *(string) --* 

                The FIFO message group ID to use as the target.

                
          
            

            - **HttpParameters** *(dict) --* 

              Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination.

               

              If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.

              
              

              - **PathParameterValues** *(list) --* 

                The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").

                
                

                - *(string) --* 
            
              

              - **HeaderParameters** *(dict) --* 

                The headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
              

              - **QueryStringParameters** *(dict) --* 

                The query string keys/values that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.

                
                

                - *(string) --* 
                  

                  - *(string) --* 
            
          
          
            

            - **RedshiftDataParameters** *(dict) --* 

              Contains the Redshift Data API parameters to use when the target is a Redshift cluster.

               

              If you specify a Redshift Cluster as a Target, you can use this to specify parameters to invoke the Redshift Data API ExecuteStatement based on EventBridge events.

              
              

              - **SecretManagerArn** *(string) --* 

                The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.

                
              

              - **Database** *(string) --* 

                The name of the database. Required when authenticating using temporary credentials.

                
              

              - **DbUser** *(string) --* 

                The database user name. Required when authenticating using temporary credentials.

                
              

              - **Sql** *(string) --* 

                The SQL statement text to run.

                
              

              - **StatementName** *(string) --* 

                The name of the SQL statement. You can name the SQL statement when you create it to identify the query.

                
              

              - **WithEvent** *(boolean) --* 

                Indicates whether to send an event back to EventBridge after the SQL statement runs.

                
          
            

            - **SageMakerPipelineParameters** *(dict) --* 

              Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline.

               

              If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.

              
              

              - **PipelineParameterList** *(list) --* 

                List of Parameter names and values for SageMaker Model Building Pipeline execution.

                
                

                - *(dict) --* 

                  Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.

                  
                  

                  - **Name** *(string) --* 

                    Name of parameter to start execution of a SageMaker Model Building Pipeline.

                    
                  

                  - **Value** *(string) --* 

                    Value of parameter to start execution of a SageMaker Model Building Pipeline.

                    
              
            
          
            

            - **DeadLetterConfig** *(dict) --* 

              The ``DeadLetterConfig`` that defines the target queue to send dead-letter queue events to.

              
              

              - **Arn** *(string) --* 

                The ARN of the SQS queue specified as the target for the dead-letter queue.

                
          
            

            - **RetryPolicy** *(dict) --* 

              The ``RetryPolicy`` object that contains the retry policy configuration to use for the dead-letter queue.

              
              

              - **MaximumRetryAttempts** *(integer) --* 

                The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the ``MaximumEventAgeInSeconds`` is met.

                
              

              - **MaximumEventAgeInSeconds** *(integer) --* 

                The maximum amount of time, in seconds, to continue to make retry attempts.

                
          
        
      
    