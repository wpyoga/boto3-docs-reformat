

*****************
PersonalizeEvents
*****************

.. contents:: Table of Contents
   :depth: 2


======
Client
======



.. py:class:: PersonalizeEvents.Client

  A low-level client representing Amazon Personalize Events
  

  Amazon Personalize can consume real-time user event data, such as *stream* or *click* data, and use it for model training either alone or combined with historical data. For more information see `Recording Events <https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html>`__ .

  ::

    
    import boto3
    
    client = boto3.client('personalize-events')

  
  These are the available methods:
  
  *   :py:meth:`~PersonalizeEvents.Client.can_paginate`

  
  *   :py:meth:`~PersonalizeEvents.Client.generate_presigned_url`

  
  *   :py:meth:`~PersonalizeEvents.Client.get_paginator`

  
  *   :py:meth:`~PersonalizeEvents.Client.get_waiter`

  
  *   :py:meth:`~PersonalizeEvents.Client.put_events`

  
  *   :py:meth:`~PersonalizeEvents.Client.put_items`

  
  *   :py:meth:`~PersonalizeEvents.Client.put_users`

  

  .. py:method:: can_paginate(operation_name)

        
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :return: ``True`` if the operation can be paginated,
        ``False`` otherwise.


  .. py:method:: generate_presigned_url(ClientMethod, Params=None, ExpiresIn=3600, HttpMethod=None)

        
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for
    
    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.
    
    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)
    
    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.
    
    :returns: The presigned url


  .. py:method:: get_paginator(operation_name)

        
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name.  This is the same name
        as the method name on the client.  For example, if the
        method name is ``create_foo``, and you'd normally invoke the
        operation as ``client.create_foo(**kwargs)``, if the
        ``create_foo`` operation can be paginated, you can use the
        call ``client.get_paginator("create_foo")``.
    
    :raise OperationNotPageableError: Raised if the operation is not
        pageable.  You can use the ``client.can_paginate`` method to
        check if an operation is pageable.
    
    :rtype: L{botocore.paginate.Paginator}
    :return: A paginator object.


  .. py:method:: get_waiter(waiter_name)

        
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters
        section of the service docs for a list of available waiters.
    
    :returns: The specified waiter object.
    :rtype: botocore.waiter.Waiter


  .. py:method:: put_events(**kwargs)

    

    Records user interaction event data. For more information see `Recording Events <https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/personalize-events-2018-03-22/PutEvents>`_    


    **Request Syntax** 
    ::

      response = client.put_events(
          trackingId='string',
          userId='string',
          sessionId='string',
          eventList=[
              {
                  'eventId': 'string',
                  'eventType': 'string',
                  'eventValue': ...,
                  'itemId': 'string',
                  'properties': 'string',
                  'sentAt': datetime(2015, 1, 1),
                  'recommendationId': 'string',
                  'impression': [
                      'string',
                  ]
              },
          ]
      )
    :type trackingId: string
    :param trackingId: **[REQUIRED]** 

      The tracking ID for the event. The ID is generated by a call to the `CreateEventTracker <https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html>`__ API.

      

    
    :type userId: string
    :param userId: 

      The user associated with the event.

      

    
    :type sessionId: string
    :param sessionId: **[REQUIRED]** 

      The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see `Recording Events <https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html>`__ .

      

    
    :type eventList: list
    :param eventList: **[REQUIRED]** 

      A list of event data from the session.

      

    
      - *(dict) --* 

        Represents user interaction event information sent using the ``PutEvents`` API.

        

      
        - **eventId** *(string) --* 

          An ID associated with the event. If an event ID is not provided, Amazon Personalize generates a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses the event ID to distinquish unique events. Any subsequent events after the first with the same event ID are not used in model training.

          

        
        - **eventType** *(string) --* **[REQUIRED]** 

          The type of event, such as click or download. This property corresponds to the ``EVENT_TYPE`` field of your Interactions schema and depends on the types of events you are tracking.

          

        
        - **eventValue** *(float) --* 

          The event value that corresponds to the ``EVENT_VALUE`` field of the Interactions schema.

          

        
        - **itemId** *(string) --* 

          The item ID key that corresponds to the ``ITEM_ID`` field of the Interactions schema.

          

        
        - **properties** *(string) --* 

          A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (``itemId`` ) and rating (``eventValue`` ) , you might also send the number of movie ratings made by the user.

           

          Each item in the map consists of a key-value pair. For example,

           

           ``{"numberOfRatings": "12"}``  

           

          The keys use camel case names that match the fields in the Interactions schema. In the above example, the ``numberOfRatings`` would match the 'NUMBER_OF_RATINGS' field defined in the Interactions schema.

          

        
        - **sentAt** *(datetime) --* **[REQUIRED]** 

          The timestamp (in Unix time) on the client side when the event occurred.

          

        
        - **recommendationId** *(string) --* 

          The ID of the recommendation.

          

        
        - **impression** *(list) --* 

          A list of item IDs that represents the sequence of items you have shown the user. For example, ``["itemId1", "itemId2", "itemId3"]`` .

          

        
          - *(string) --* 

          
      
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`PersonalizeEvents.Client.exceptions.InvalidInputException`

    

  .. py:method:: put_items(**kwargs)

    

    Adds one or more items to an Items dataset. For more information see `Importing Items Incrementally <https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html>`__ . 

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/personalize-events-2018-03-22/PutItems>`_    


    **Request Syntax** 
    ::

      response = client.put_items(
          datasetArn='string',
          items=[
              {
                  'itemId': 'string',
                  'properties': 'string'
              },
          ]
      )
    :type datasetArn: string
    :param datasetArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the Items dataset you are adding the item or items to.

      

    
    :type items: list
    :param items: **[REQUIRED]** 

      A list of item data.

      

    
      - *(dict) --* 

        Represents item metadata added to an Items dataset using the ``PutItems`` API. For more information see `Importing Items Incrementally <https://docs.aws.amazon.com/personalize/latest/dg/importing-items.html>`__ . 

        

      
        - **itemId** *(string) --* **[REQUIRED]** 

          The ID associated with the item.

          

        
        - **properties** *(string) --* 

          A string map of item-specific metadata. Each element in the map consists of a key-value pair. For example, ``{"numberOfRatings": "12"}`` .

           

          The keys use camel case names that match the fields in the schema for the Items dataset. In the previous example, the ``numberOfRatings`` matches the 'NUMBER_OF_RATINGS' field defined in the Items schema. For categorical string data, to include multiple categories for a single item, separate each category with a pipe separator (``|`` ). For example, ``\"Horror|Action\"`` .

          

        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`PersonalizeEvents.Client.exceptions.InvalidInputException`

    
    *     :py:class:`PersonalizeEvents.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`PersonalizeEvents.Client.exceptions.ResourceInUseException`

    

  .. py:method:: put_users(**kwargs)

    

    Adds one or more users to a Users dataset. For more information see `Importing Users Incrementally <https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html>`__ .

    

    See also: `AWS API Documentation <https://docs.aws.amazon.com/goto/WebAPI/personalize-events-2018-03-22/PutUsers>`_    


    **Request Syntax** 
    ::

      response = client.put_users(
          datasetArn='string',
          users=[
              {
                  'userId': 'string',
                  'properties': 'string'
              },
          ]
      )
    :type datasetArn: string
    :param datasetArn: **[REQUIRED]** 

      The Amazon Resource Name (ARN) of the Users dataset you are adding the user or users to.

      

    
    :type users: list
    :param users: **[REQUIRED]** 

      A list of user data.

      

    
      - *(dict) --* 

        Represents user metadata added to a Users dataset using the ``PutUsers`` API. For more information see `Importing Users Incrementally <https://docs.aws.amazon.com/personalize/latest/dg/importing-users.html>`__ .

        

      
        - **userId** *(string) --* **[REQUIRED]** 

          The ID associated with the user.

          

        
        - **properties** *(string) --* 

          A string map of user-specific metadata. Each element in the map consists of a key-value pair. For example, ``{"numberOfVideosWatched": "45"}`` .

           

          The keys use camel case names that match the fields in the schema for the Users dataset. In the previous example, the ``numberOfVideosWatched`` matches the 'NUMBER_OF_VIDEOS_WATCHED' field defined in the Users schema. For categorical string data, to include multiple categories for a single user, separate each category with a pipe separator (``|`` ). For example, ``\"Member|Frequent shopper\"`` .

          

        
      
  
    
    :returns: None
    **Exceptions** 
    
    *     :py:class:`PersonalizeEvents.Client.exceptions.InvalidInputException`

    
    *     :py:class:`PersonalizeEvents.Client.exceptions.ResourceNotFoundException`

    
    *     :py:class:`PersonalizeEvents.Client.exceptions.ResourceInUseException`

    

==========
Paginators
==========


The available paginators are:
